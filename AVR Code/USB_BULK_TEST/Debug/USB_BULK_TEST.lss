
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00002b3e  00002bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b9a  008020b2  008020b2  00002c86  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  00002cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a474  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b68  00000000  00000000  0000d624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008a11  00000000  00000000  0000f18c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a7c  00000000  00000000  00017ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f649  00000000  00000000  0001861c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002318  00000000  00000000  00047c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  00049f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b8d9  00000000  00000000  0004a368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2c c1       	rjmp	.+600    	; 0x25a <__ctors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c6       	rjmp	.+3372   	; 0xd46 <__vector_6>
      1a:	00 00       	nop
      1c:	03 c7       	rjmp	.+3590   	; 0xe24 <__vector_7>
      1e:	00 00       	nop
      20:	38 c1       	rjmp	.+624    	; 0x292 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	26 c1       	rjmp	.+588    	; 0x292 <__bad_interrupt>
      46:	00 00       	nop
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1a c1       	rjmp	.+564    	; 0x292 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_24>
      64:	16 c1       	rjmp	.+556    	; 0x292 <__bad_interrupt>
      66:	00 00       	nop
      68:	14 c1       	rjmp	.+552    	; 0x292 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	08 c1       	rjmp	.+528    	; 0x292 <__bad_interrupt>
      82:	00 00       	nop
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fa c0       	rjmp	.+500    	; 0x292 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f4 c0       	rjmp	.+488    	; 0x292 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ea c0       	rjmp	.+468    	; 0x292 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 c0       	rjmp	.+428    	; 0x292 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d4 c0       	rjmp	.+424    	; 0x292 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d2 c0       	rjmp	.+420    	; 0x292 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d0 c0       	rjmp	.+416    	; 0x292 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ce c0       	rjmp	.+412    	; 0x292 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	cc c0       	rjmp	.+408    	; 0x292 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ca c0       	rjmp	.+404    	; 0x292 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c8 c0       	rjmp	.+400    	; 0x292 <__bad_interrupt>
     102:	00 00       	nop
     104:	c6 c0       	rjmp	.+396    	; 0x292 <__bad_interrupt>
     106:	00 00       	nop
     108:	c4 c0       	rjmp	.+392    	; 0x292 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c2 c0       	rjmp	.+388    	; 0x292 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c0 c0       	rjmp	.+384    	; 0x292 <__bad_interrupt>
     112:	00 00       	nop
     114:	be c0       	rjmp	.+380    	; 0x292 <__bad_interrupt>
     116:	00 00       	nop
     118:	bc c0       	rjmp	.+376    	; 0x292 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c0       	rjmp	.+372    	; 0x292 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b8 c0       	rjmp	.+368    	; 0x292 <__bad_interrupt>
     122:	00 00       	nop
     124:	b6 c0       	rjmp	.+364    	; 0x292 <__bad_interrupt>
     126:	00 00       	nop
     128:	b4 c0       	rjmp	.+360    	; 0x292 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	b2 c0       	rjmp	.+356    	; 0x292 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b0 c0       	rjmp	.+352    	; 0x292 <__bad_interrupt>
     132:	00 00       	nop
     134:	ae c0       	rjmp	.+348    	; 0x292 <__bad_interrupt>
     136:	00 00       	nop
     138:	ac c0       	rjmp	.+344    	; 0x292 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	aa c0       	rjmp	.+340    	; 0x292 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a8 c0       	rjmp	.+336    	; 0x292 <__bad_interrupt>
     142:	00 00       	nop
     144:	a6 c0       	rjmp	.+332    	; 0x292 <__bad_interrupt>
     146:	00 00       	nop
     148:	a4 c0       	rjmp	.+328    	; 0x292 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	eb c6       	rjmp	.+3542   	; 0xf24 <__vector_83>
     14e:	00 00       	nop
     150:	a0 c0       	rjmp	.+320    	; 0x292 <__bad_interrupt>
     152:	00 00       	nop
     154:	9e c0       	rjmp	.+316    	; 0x292 <__bad_interrupt>
     156:	00 00       	nop
     158:	9c c0       	rjmp	.+312    	; 0x292 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9a c0       	rjmp	.+308    	; 0x292 <__bad_interrupt>
     15e:	00 00       	nop
     160:	98 c0       	rjmp	.+304    	; 0x292 <__bad_interrupt>
     162:	00 00       	nop
     164:	96 c0       	rjmp	.+300    	; 0x292 <__bad_interrupt>
     166:	00 00       	nop
     168:	94 c0       	rjmp	.+296    	; 0x292 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	92 c0       	rjmp	.+292    	; 0x292 <__bad_interrupt>
     16e:	00 00       	nop
     170:	90 c0       	rjmp	.+288    	; 0x292 <__bad_interrupt>
     172:	00 00       	nop
     174:	8e c0       	rjmp	.+284    	; 0x292 <__bad_interrupt>
     176:	00 00       	nop
     178:	8c c0       	rjmp	.+280    	; 0x292 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8a c0       	rjmp	.+276    	; 0x292 <__bad_interrupt>
     17e:	00 00       	nop
     180:	88 c0       	rjmp	.+272    	; 0x292 <__bad_interrupt>
     182:	00 00       	nop
     184:	86 c0       	rjmp	.+268    	; 0x292 <__bad_interrupt>
     186:	00 00       	nop
     188:	84 c0       	rjmp	.+264    	; 0x292 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	82 c0       	rjmp	.+260    	; 0x292 <__bad_interrupt>
     18e:	00 00       	nop
     190:	80 c0       	rjmp	.+256    	; 0x292 <__bad_interrupt>
     192:	00 00       	nop
     194:	7e c0       	rjmp	.+252    	; 0x292 <__bad_interrupt>
     196:	00 00       	nop
     198:	7c c0       	rjmp	.+248    	; 0x292 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7a c0       	rjmp	.+244    	; 0x292 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	78 c0       	rjmp	.+240    	; 0x292 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	76 c0       	rjmp	.+236    	; 0x292 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	74 c0       	rjmp	.+232    	; 0x292 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	72 c0       	rjmp	.+228    	; 0x292 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	70 c0       	rjmp	.+224    	; 0x292 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	6e c0       	rjmp	.+220    	; 0x292 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6a c0       	rjmp	.+212    	; 0x292 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	68 c0       	rjmp	.+208    	; 0x292 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	66 c0       	rjmp	.+204    	; 0x292 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	64 c0       	rjmp	.+200    	; 0x292 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	62 c0       	rjmp	.+196    	; 0x292 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	60 c0       	rjmp	.+192    	; 0x292 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5e c0       	rjmp	.+188    	; 0x292 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	5c c0       	rjmp	.+184    	; 0x292 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5a c0       	rjmp	.+180    	; 0x292 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	58 c0       	rjmp	.+176    	; 0x292 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	54 c0       	rjmp	.+168    	; 0x292 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	52 c0       	rjmp	.+164    	; 0x292 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__vector_125>
     1f8:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__vector_126>
     1fc:	c3 01       	movw	r24, r6
     1fe:	c5 01       	movw	r24, r10
     200:	c7 01       	movw	r24, r14
     202:	c9 01       	movw	r24, r18
     204:	cb 01       	movw	r24, r22
     206:	d0 01       	movw	r26, r0
     208:	cd 01       	movw	r24, r26
     20a:	cf 01       	movw	r24, r30
     20c:	b9 0a       	sbc	r11, r25
     20e:	bb 0a       	sbc	r11, r27
     210:	f8 0a       	sbc	r15, r24
     212:	36 0b       	sbc	r19, r22
     214:	3f 0b       	sbc	r19, r31
     216:	44 0b       	sbc	r20, r20
     218:	97 0b       	sbc	r25, r23
     21a:	9c 0b       	sbc	r25, r28
     21c:	e7 0a       	sbc	r14, r23
     21e:	ea 0a       	sbc	r14, r26
     220:	ec 0a       	sbc	r14, r28
     222:	ee 0a       	sbc	r14, r30
     224:	f0 0a       	sbc	r15, r16
     226:	f2 0a       	sbc	r15, r18
     228:	f4 0a       	sbc	r15, r20
     22a:	f6 0a       	sbc	r15, r22
     22c:	24 0b       	sbc	r18, r20
     22e:	27 0b       	sbc	r18, r23
     230:	2a 0b       	sbc	r18, r26
     232:	2c 0b       	sbc	r18, r28
     234:	2e 0b       	sbc	r18, r30
     236:	30 0b       	sbc	r19, r16
     238:	32 0b       	sbc	r19, r18
     23a:	34 0b       	sbc	r19, r20
     23c:	50 0b       	sbc	r21, r16
     23e:	5b 0b       	sbc	r21, r27
     240:	66 0b       	sbc	r22, r22
     242:	74 0b       	sbc	r23, r20
     244:	76 0b       	sbc	r23, r22
     246:	78 0b       	sbc	r23, r24
     248:	82 0b       	sbc	r24, r18
     24a:	8c 0b       	sbc	r24, r28
     24c:	14 0f       	add	r17, r20
     24e:	17 0f       	add	r17, r23
     250:	1a 0f       	add	r17, r26
     252:	1d 0f       	add	r17, r29
     254:	20 0f       	add	r18, r16
     256:	23 0f       	add	r18, r19
     258:	26 0f       	add	r18, r22

0000025a <__ctors_end>:
     25a:	11 24       	eor	r1, r1
     25c:	1f be       	out	0x3f, r1	; 63
     25e:	cf ef       	ldi	r28, 0xFF	; 255
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df e2       	ldi	r29, 0x2F	; 47
     264:	de bf       	out	0x3e, r29	; 62

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	ee e3       	ldi	r30, 0x3E	; 62
     26e:	fb e2       	ldi	r31, 0x2B	; 43
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
     272:	05 90       	lpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a2 3b       	cpi	r26, 0xB2	; 178
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
     27c:	2c e2       	ldi	r18, 0x2C	; 44
     27e:	a2 eb       	ldi	r26, 0xB2	; 178
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	ac 34       	cpi	r26, 0x4C	; 76
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	3e d0       	rcall	.+124    	; 0x30a <main>
     28e:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <_exit>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     294:	e0 e8       	ldi	r30, 0x80	; 128
     296:	f6 e0       	ldi	r31, 0x06	; 6
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     29c:	85 e0       	ldi	r24, 0x05	; 5
     29e:	84 83       	std	Z+4, r24	; 0x04
     2a0:	08 95       	ret

000002a2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2a2:	08 95       	ret

000002a4 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     2a4:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     2a8:	2e ee       	ldi	r18, 0xEE	; 238
     2aa:	32 e0       	ldi	r19, 0x02	; 2
     2ac:	42 9f       	mul	r20, r18
     2ae:	c0 01       	movw	r24, r0
     2b0:	43 9f       	mul	r20, r19
     2b2:	90 0d       	add	r25, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	42 e5       	ldi	r20, 0x52	; 82
     2b8:	51 e0       	ldi	r21, 0x01	; 1
     2ba:	6a ef       	ldi	r22, 0xFA	; 250
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	86 59       	subi	r24, 0x96	; 150
     2c0:	99 4d       	sbci	r25, 0xD9	; 217
     2c2:	c8 c7       	rjmp	.+3984   	; 0x1254 <udi_vendor_iso_in_run>
     2c4:	08 95       	ret

000002c6 <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2c6:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     2ca:	2e ee       	ldi	r18, 0xEE	; 238
     2cc:	32 e0       	ldi	r19, 0x02	; 2
     2ce:	42 9f       	mul	r20, r18
     2d0:	c0 01       	movw	r24, r0
     2d2:	43 9f       	mul	r20, r19
     2d4:	90 0d       	add	r25, r0
     2d6:	11 24       	eor	r1, r1
     2d8:	43 e6       	ldi	r20, 0x63	; 99
     2da:	51 e0       	ldi	r21, 0x01	; 1
     2dc:	6a ef       	ldi	r22, 0xFA	; 250
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	8c 59       	subi	r24, 0x9C	; 156
     2e2:	98 4d       	sbci	r25, 0xD8	; 216
     2e4:	c3 c7       	rjmp	.+3974   	; 0x126c <udi_vendor_iso_in_run2>
     2e6:	08 95       	ret

000002e8 <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     2e8:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     2ec:	2e ee       	ldi	r18, 0xEE	; 238
     2ee:	32 e0       	ldi	r19, 0x02	; 2
     2f0:	42 9f       	mul	r20, r18
     2f2:	c0 01       	movw	r24, r0
     2f4:	43 9f       	mul	r20, r19
     2f6:	90 0d       	add	r25, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	44 e7       	ldi	r20, 0x74	; 116
     2fc:	51 e0       	ldi	r21, 0x01	; 1
     2fe:	6a ef       	ldi	r22, 0xFA	; 250
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	82 5a       	subi	r24, 0xA2	; 162
     304:	97 4d       	sbci	r25, 0xD7	; 215
     306:	be c7       	rjmp	.+3964   	; 0x1284 <udi_vendor_iso_in_run3>
     308:	08 95       	ret

0000030a <main>:
uint32_t debug_counter;

unsigned char tripleUsbSuccess = 0;

int main(void){
	irq_initialize_vectors();
     30a:	87 e0       	ldi	r24, 0x07	; 7
     30c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     310:	78 94       	sei
	sysclk_init();
     312:	b3 d6       	rcall	.+3430   	; 0x107a <sysclk_init>
	board_init();
     314:	c6 df       	rcall	.-116    	; 0x2a2 <board_init>
	udc_start();
     316:	0e 94 39 0a 	call	0x1472	; 0x1472 <udc_start>
	tiny_dac_setup();
     31a:	da d0       	rcall	.+436    	; 0x4d0 <tiny_dac_setup>
	tiny_dma_setup();
     31c:	fd d0       	rcall	.+506    	; 0x518 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	99 d0       	rcall	.+306    	; 0x456 <tiny_adc_setup>
	tiny_adc_pid_setup();
     324:	85 d0       	rcall	.+266    	; 0x430 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     326:	8c e0       	ldi	r24, 0x0C	; 12
     328:	79 d0       	rcall	.+242    	; 0x41c <tiny_adc_ch1setup>
	tiny_timer_setup();
     32a:	c1 d5       	rcall	.+2946   	; 0xeae <tiny_timer_setup>
	tiny_uart_setup();
     32c:	72 d6       	rcall	.+3300   	; 0x1012 <tiny_uart_setup>
	tiny_spi_setup();
     32e:	8b d6       	rcall	.+3350   	; 0x1046 <tiny_spi_setup>
	tiny_dig_setup();
     330:	b1 df       	rcall	.-158    	; 0x294 <tiny_dig_setup>
     332:	50 91 56 22 	lds	r21, 0x2256	; 0x802256 <debug_counter>
     336:	40 91 57 22 	lds	r20, 0x2257	; 0x802257 <debug_counter+0x1>
     33a:	30 91 58 22 	lds	r19, 0x2258	; 0x802258 <debug_counter+0x2>
     33e:	20 91 59 22 	lds	r18, 0x2259	; 0x802259 <debug_counter+0x3>

uint32_t debug_counter;

unsigned char tripleUsbSuccess = 0;

int main(void){
     342:	85 2f       	mov	r24, r21
     344:	94 2f       	mov	r25, r20
     346:	a3 2f       	mov	r26, r19
     348:	b2 2f       	mov	r27, r18
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	a1 1d       	adc	r26, r1
     34e:	b1 1d       	adc	r27, r1
	//asm("nop");
	
	while (true) {
		debug_counter++;
		if(debug_counter > 100000000){
			debug_counter = 0;
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	20 e0       	ldi	r18, 0x00	; 0
	//USARTC0.DATA = 0x55;
	//asm("nop");
	
	while (true) {
		debug_counter++;
		if(debug_counter > 100000000){
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	61 ee       	ldi	r22, 0xE1	; 225
     35c:	96 07       	cpc	r25, r22
     35e:	65 ef       	ldi	r22, 0xF5	; 245
     360:	a6 07       	cpc	r26, r22
     362:	65 e0       	ldi	r22, 0x05	; 5
     364:	b6 07       	cpc	r27, r22
     366:	88 f3       	brcs	.-30     	; 0x34a <main+0x40>
     368:	ec cf       	rjmp	.-40     	; 0x342 <main+0x38>

0000036a <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     36a:	08 95       	ret

0000036c <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     36c:	08 95       	ret

0000036e <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	switch(global_mode){
     36e:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
     372:	8e 2f       	mov	r24, r30
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	88 30       	cpi	r24, 0x08	; 8
     378:	91 05       	cpc	r25, r1
     37a:	90 f4       	brcc	.+36     	; 0x3a0 <main_sof_action+0x32>
     37c:	fc 01       	movw	r30, r24
     37e:	e2 50       	subi	r30, 0x02	; 2
     380:	ff 4f       	sbci	r31, 0xFF	; 255
     382:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__tablejump2__>
		case 0:
			tiny_dma_loop_mode_0();
     386:	54 d1       	rcall	.+680    	; 0x630 <tiny_dma_loop_mode_0>
			break;
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <main_sof_action+0x32>
		case 1:
			tiny_dma_loop_mode_1();
     38a:	cb d1       	rcall	.+918    	; 0x722 <tiny_dma_loop_mode_1>
			break;
     38c:	09 c0       	rjmp	.+18     	; 0x3a0 <main_sof_action+0x32>
		case 2:
			tiny_dma_loop_mode_2();
     38e:	14 d2       	rcall	.+1064   	; 0x7b8 <tiny_dma_loop_mode_2>
			break;
     390:	07 c0       	rjmp	.+14     	; 0x3a0 <main_sof_action+0x32>
		case 3:
			tiny_dma_loop_mode_3();
     392:	d0 d2       	rcall	.+1440   	; 0x934 <tiny_dma_loop_mode_3>
			break;
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <main_sof_action+0x32>
		case 4:
			tiny_dma_loop_mode_4();
     396:	3c d3       	rcall	.+1656   	; 0xa10 <tiny_dma_loop_mode_4>
			break;
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <main_sof_action+0x32>
		case 6:
			tiny_dma_loop_mode_6();
     39a:	30 d4       	rcall	.+2144   	; 0xbfc <tiny_dma_loop_mode_6>
			break;
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <main_sof_action+0x32>
		case 7:
			tiny_dma_loop_mode_7();
     39e:	a5 d4       	rcall	.+2378   	; 0xcea <tiny_dma_loop_mode_7>
		break;
		default:
			break;
	}
		usb_state = !b1_state;
     3a0:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	91 11       	cpse	r25, r1
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <usb_state>
     3ae:	08 95       	ret

000003b0 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <main_b_vendor_enable>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     3b6:	42 e5       	ldi	r20, 0x52	; 82
     3b8:	51 e0       	ldi	r21, 0x01	; 1
     3ba:	6e ee       	ldi	r22, 0xEE	; 238
     3bc:	72 e0       	ldi	r23, 0x02	; 2
     3be:	8a e6       	ldi	r24, 0x6A	; 106
     3c0:	96 e2       	ldi	r25, 0x26	; 38
     3c2:	48 d7       	rcall	.+3728   	; 0x1254 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     3c4:	43 e6       	ldi	r20, 0x63	; 99
     3c6:	51 e0       	ldi	r21, 0x01	; 1
     3c8:	6e ee       	ldi	r22, 0xEE	; 238
     3ca:	72 e0       	ldi	r23, 0x02	; 2
     3cc:	84 e6       	ldi	r24, 0x64	; 100
     3ce:	97 e2       	ldi	r25, 0x27	; 39
     3d0:	4d d7       	rcall	.+3738   	; 0x126c <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     3d2:	44 e7       	ldi	r20, 0x74	; 116
     3d4:	51 e0       	ldi	r21, 0x01	; 1
     3d6:	6e ee       	ldi	r22, 0xEE	; 238
     3d8:	72 e0       	ldi	r23, 0x02	; 2
     3da:	8e e5       	ldi	r24, 0x5E	; 94
     3dc:	98 e2       	ldi	r25, 0x28	; 40
     3de:	52 d7       	rcall	.+3748   	; 0x1284 <udi_vendor_iso_in_run3>
	return true;
}
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	08 95       	ret

000003e4 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     3e4:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <main_b_vendor_enable>
     3e8:	08 95       	ret

000003ea <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	08 95       	ret

000003ee <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	08 95       	ret

000003f2 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     3f2:	e0 e0       	ldi	r30, 0x00	; 0
     3f4:	f2 e0       	ldi	r31, 0x02	; 2
     3f6:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     3f8:	98 2f       	mov	r25, r24
     3fa:	9c 71       	andi	r25, 0x1C	; 28
     3fc:	93 68       	ori	r25, 0x83	; 131
     3fe:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     400:	88 23       	and	r24, r24
     402:	1c f4       	brge	.+6      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     404:	90 e1       	ldi	r25, 0x10	; 16
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	02 c0       	rjmp	.+4      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	89 2b       	or	r24, r25
     410:	e0 e0       	ldi	r30, 0x00	; 0
     412:	f2 e0       	ldi	r31, 0x02	; 2
     414:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     416:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     418:	16 a2       	std	Z+38, r1	; 0x26
     41a:	08 95       	ret

0000041c <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     41c:	e0 e0       	ldi	r30, 0x00	; 0
     41e:	f2 e0       	ldi	r31, 0x02	; 2
     420:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     422:	83 68       	ori	r24, 0x83	; 131
     424:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     426:	80 e1       	ldi	r24, 0x10	; 16
     428:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     42a:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     42c:	16 aa       	std	Z+54, r1	; 0x36
     42e:	08 95       	ret

00000430 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     430:	e0 e0       	ldi	r30, 0x00	; 0
     432:	f2 e0       	ldi	r31, 0x02	; 2
     434:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     436:	83 e8       	ldi	r24, 0x83	; 131
     438:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     43a:	8f e2       	ldi	r24, 0x2F	; 47
     43c:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     43e:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     440:	16 a6       	std	Z+46, r1	; 0x2e
     442:	08 95       	ret

00000444 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     444:	aa ec       	ldi	r26, 0xCA	; 202
     446:	b1 e0       	ldi	r27, 0x01	; 1
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     44c:	e8 2f       	mov	r30, r24
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     452:	1c 92       	st	X, r1

	return( result );
     454:	08 95       	ret

00000456 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     45a:	e0 e7       	ldi	r30, 0x70	; 112
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	91 81       	ldd	r25, Z+1	; 0x01
     460:	9d 7f       	andi	r25, 0xFD	; 253
     462:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     464:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     468:	62 30       	cpi	r22, 0x02	; 2
     46a:	31 f1       	breq	.+76     	; 0x4b8 <tiny_adc_setup+0x62>
     46c:	e0 e0       	ldi	r30, 0x00	; 0
     46e:	f2 e0       	ldi	r31, 0x02	; 2
     470:	9c e1       	ldi	r25, 0x1C	; 28
     472:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     474:	90 e4       	ldi	r25, 0x40	; 64
     476:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     478:	81 11       	cpse	r24, r1
     47a:	02 c0       	rjmp	.+4      	; 0x480 <tiny_adc_setup+0x2a>
     47c:	80 e4       	ldi	r24, 0x40	; 64
     47e:	01 c0       	rjmp	.+2      	; 0x482 <tiny_adc_setup+0x2c>
     480:	80 ec       	ldi	r24, 0xC0	; 192
     482:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     486:	61 30       	cpi	r22, 0x01	; 1
     488:	11 f0       	breq	.+4      	; 0x48e <tiny_adc_setup+0x38>
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	01 c0       	rjmp	.+2      	; 0x490 <tiny_adc_setup+0x3a>
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	c0 e0       	ldi	r28, 0x00	; 0
     492:	d2 e0       	ldi	r29, 0x02	; 2
     494:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     496:	80 e2       	ldi	r24, 0x20	; 32
     498:	d5 df       	rcall	.-86     	; 0x444 <ReadCalibrationByte>
     49a:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     49c:	81 e2       	ldi	r24, 0x21	; 33
     49e:	d2 df       	rcall	.-92     	; 0x444 <ReadCalibrationByte>
     4a0:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     4a2:	18 8e       	std	Y+24, r1	; 0x18
     4a4:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     4aa:	c2 df       	rcall	.-124    	; 0x430 <tiny_adc_pid_setup>
     4ac:	0e c0       	rjmp	.+28     	; 0x4ca <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4ae:	80 ec       	ldi	r24, 0xC0	; 192
     4b0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	ec cf       	rjmp	.-40     	; 0x490 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     4b8:	e0 e0       	ldi	r30, 0x00	; 0
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	9e e1       	ldi	r25, 0x1E	; 30
     4be:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     4c0:	90 e4       	ldi	r25, 0x40	; 64
     4c2:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4c4:	81 11       	cpse	r24, r1
     4c6:	f3 cf       	rjmp	.-26     	; 0x4ae <tiny_adc_setup+0x58>
     4c8:	d9 cf       	rjmp	.-78     	; 0x47c <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     4d4:	e0 e7       	ldi	r30, 0x70	; 112
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	82 81       	ldd	r24, Z+2	; 0x02
     4da:	8b 7f       	andi	r24, 0xFB	; 251
     4dc:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     4de:	c0 e2       	ldi	r28, 0x20	; 32
     4e0:	d3 e0       	ldi	r29, 0x03	; 3
     4e2:	8d e0       	ldi	r24, 0x0D	; 13
     4e4:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     4e6:	80 e4       	ldi	r24, 0x40	; 64
     4e8:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     4ee:	83 e3       	ldi	r24, 0x33	; 51
     4f0:	a9 df       	rcall	.-174    	; 0x444 <ReadCalibrationByte>
     4f2:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     4f4:	82 e3       	ldi	r24, 0x32	; 50
     4f6:	a6 df       	rcall	.-180    	; 0x444 <ReadCalibrationByte>
     4f8:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     4fa:	87 e3       	ldi	r24, 0x37	; 55
     4fc:	a3 df       	rcall	.-186    	; 0x444 <ReadCalibrationByte>
     4fe:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     500:	86 e3       	ldi	r24, 0x36	; 54
     502:	a0 df       	rcall	.-192    	; 0x444 <ReadCalibrationByte>
     504:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     506:	e0 e2       	ldi	r30, 0x20	; 32
     508:	f6 e0       	ldi	r31, 0x06	; 6
     50a:	80 81       	ld	r24, Z
     50c:	83 60       	ori	r24, 0x03	; 3
     50e:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     510:	14 82       	std	Z+4, r1	; 0x04
	
	

     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <tiny_dma_setup>:
#include "globals.h"


void tiny_dma_setup(void){
	//Turn on DMA
	PR.PRGEN &=0b111111110; //Turn on DMA clk
     518:	e0 e7       	ldi	r30, 0x70	; 112
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	8e 7f       	andi	r24, 0xFE	; 254
     520:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm | DMA_PRIMODE_RR0123_gc;
     522:	80 e8       	ldi	r24, 0x80	; 128
     524:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     528:	08 95       	ret

0000052a <tiny_dma_flush>:
}
void tiny_dma_flush(void){
	DMA.CH0.CTRLA = 0x00;
     52a:	e0 e0       	ldi	r30, 0x00	; 0
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     530:	80 e4       	ldi	r24, 0x40	; 64
     532:	80 8b       	std	Z+16, r24	; 0x10

	DMA.CH1.CTRLA = 0x00;
     534:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     536:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH2.CTRLA = 0x00;
     538:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     53a:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.CTRLA = 0x00;
     53c:	e0 e4       	ldi	r30, 0x40	; 64
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	10 82       	st	Z, r1
	DMA.CH3.CTRLA = DMA_CH_RESET_bm;
     542:	80 83       	st	Z, r24
	
	b1_state = 0;
     544:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <b1_state>
     548:	08 95       	ret

0000054a <tiny_dma_set_mode_0>:
}
void tiny_dma_set_mode_0(void){
	
	global_mode = 0;
     54a:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     54e:	ed df       	rcall	.-38     	; 0x52a <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     550:	e0 e0       	ldi	r30, 0x00	; 0
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     556:	94 e2       	ldi	r25, 0x24	; 36
     558:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     55a:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     55c:	49 e5       	ldi	r20, 0x59	; 89
     55e:	42 ab       	std	Z+50, r20	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     560:	32 e0       	ldi	r19, 0x02	; 2
     562:	33 ab       	std	Z+51, r19	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     564:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     568:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     56c:	64 ab       	std	Z+52, r22	; 0x34
     56e:	75 ab       	std	Z+53, r23	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     570:	6a e6       	ldi	r22, 0x6A	; 106
     572:	74 e2       	ldi	r23, 0x24	; 36
     574:	60 af       	std	Z+56, r22	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     576:	71 af       	std	Z+57, r23	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     578:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     57a:	8b e3       	ldi	r24, 0x3B	; 59
     57c:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     584:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     588:	20 a9       	ldd	r18, Z+48	; 0x30
     58a:	20 68       	ori	r18, 0x80	; 128
     58c:	20 ab       	std	Z+48, r18	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     58e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     592:	a0 e4       	ldi	r26, 0x40	; 64
     594:	b1 e0       	ldi	r27, 0x01	; 1
     596:	9c 93       	st	X, r25
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     598:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     59c:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     5a0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     5a4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     5a8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     5ac:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     5b0:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     5b4:	4a e5       	ldi	r20, 0x5A	; 90
     5b6:	52 e2       	ldi	r21, 0x22	; 34
     5b8:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     5bc:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     5c0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     5c4:	29 e3       	ldi	r18, 0x39	; 57
     5c6:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     5ca:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     5ce:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     5d2:	2c 91       	ld	r18, X
     5d4:	20 68       	ori	r18, 0x80	; 128
     5d6:	2c 93       	st	X, r18
	
	DMA.CH0.CTRLA = 0x00;
     5d8:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     5da:	20 e4       	ldi	r18, 0x40	; 64
     5dc:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     5de:	24 e0       	ldi	r18, 0x04	; 4
     5e0:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
     5e2:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     5e4:	81 e9       	ldi	r24, 0x91	; 145
     5e6:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     5e8:	80 e1       	ldi	r24, 0x10	; 16
     5ea:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     5ec:	47 e7       	ldi	r20, 0x77	; 119
     5ee:	51 e0       	ldi	r21, 0x01	; 1
     5f0:	44 8b       	std	Z+20, r20	; 0x14
     5f2:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     5f4:	90 8f       	std	Z+24, r25	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     5f6:	31 8f       	std	Z+25, r19	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     5f8:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     5fa:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     5fe:	2e ee       	ldi	r18, 0xEE	; 238
     600:	32 e0       	ldi	r19, 0x02	; 2
     602:	42 9f       	mul	r20, r18
     604:	c0 01       	movw	r24, r0
     606:	43 9f       	mul	r20, r19
     608:	90 0d       	add	r25, r0
     60a:	11 24       	eor	r1, r1
     60c:	86 59       	subi	r24, 0x96	; 150
     60e:	99 4d       	sbci	r25, 0xD9	; 217
     610:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     612:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     616:	42 9f       	mul	r20, r18
     618:	c0 01       	movw	r24, r0
     61a:	43 9f       	mul	r20, r19
     61c:	90 0d       	add	r25, r0
     61e:	11 24       	eor	r1, r1
     620:	86 59       	subi	r24, 0x96	; 150
     622:	99 4d       	sbci	r25, 0xD9	; 217
     624:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     626:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     628:	80 89       	ldd	r24, Z+16	; 0x10
     62a:	80 68       	ori	r24, 0x80	; 128
     62c:	80 8b       	std	Z+16, r24	; 0x10
     62e:	08 95       	ret

00000630 <tiny_dma_loop_mode_0>:
}

void tiny_dma_loop_mode_0(void){
     630:	08 95       	ret

00000632 <tiny_dma_set_mode_1>:
	return;
}

void tiny_dma_set_mode_1(void){
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
	
	global_mode = 1;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     63c:	76 df       	rcall	.-276    	; 0x52a <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH2.CTRLA = 0x00;
     63e:	e0 e0       	ldi	r30, 0x00	; 0
     640:	f1 e0       	ldi	r31, 0x01	; 1
     642:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	80 ab       	std	Z+48, r24	; 0x30
		
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     648:	94 e0       	ldi	r25, 0x04	; 4
     64a:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00;  //No int
     64c:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     64e:	12 aa       	std	Z+50, r1	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     650:	5b e4       	ldi	r21, 0x4B	; 75
     652:	53 ab       	std	Z+51, r21	; 0x33
	DMA.CH2.TRFCNT = 0;
     654:	14 aa       	std	Z+52, r1	; 0x34
     656:	15 aa       	std	Z+53, r1	; 0x35
	DMA.CH2.REPCNT = 0;
     658:	16 aa       	std	Z+54, r1	; 0x36
		
	DMA.CH2.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     65a:	21 e0       	ldi	r18, 0x01	; 1
     65c:	30 e2       	ldi	r19, 0x20	; 32
     65e:	20 af       	std	Z+56, r18	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     660:	31 af       	std	Z+57, r19	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     662:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     664:	40 ea       	ldi	r20, 0xA0	; 160
     666:	44 af       	std	Z+60, r20	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     668:	38 e0       	ldi	r19, 0x08	; 8
     66a:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     66e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     672:	80 a9       	ldd	r24, Z+48	; 0x30
     674:	80 6a       	ori	r24, 0xA0	; 160
     676:	80 ab       	std	Z+48, r24	; 0x30
		
	USARTC0.DATA = 0x55;
     678:	85 e5       	ldi	r24, 0x55	; 85
     67a:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>

	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     67e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     682:	a0 e4       	ldi	r26, 0x40	; 64
     684:	b1 e0       	ldi	r27, 0x01	; 1
     686:	c4 e2       	ldi	r28, 0x24	; 36
     688:	cc 93       	st	X, r28
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     68a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     68e:	89 e5       	ldi	r24, 0x59	; 89
     690:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     69a:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     69e:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     6a2:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     6a6:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     6aa:	6a e6       	ldi	r22, 0x6A	; 106
     6ac:	74 e2       	ldi	r23, 0x24	; 36
     6ae:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     6b2:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     6b6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     6ba:	2b e3       	ldi	r18, 0x3B	; 59
     6bc:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     6c0:	63 e0       	ldi	r22, 0x03	; 3
     6c2:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     6c6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     6ca:	2c 91       	ld	r18, X
     6cc:	20 68       	ori	r18, 0x80	; 128
     6ce:	2c 93       	st	X, r18
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     6d0:	90 8b       	std	Z+16, r25	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
     6d2:	61 8b       	std	Z+17, r22	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     6d4:	a1 e9       	ldi	r26, 0x91	; 145
     6d6:	a2 8b       	std	Z+18, r26	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     6d8:	20 e1       	ldi	r18, 0x10	; 16
     6da:	23 8b       	std	Z+19, r18	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     6dc:	67 e7       	ldi	r22, 0x77	; 119
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	64 8b       	std	Z+20, r22	; 0x14
     6e2:	75 8b       	std	Z+21, r23	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     6e4:	c0 8f       	std	Z+24, r28	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     6e6:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     6e8:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     6ea:	c8 e5       	ldi	r28, 0x58	; 88
     6ec:	d9 e2       	ldi	r29, 0x29	; 41
     6ee:	c4 8f       	std	Z+28, r28	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[PACKET_SIZE]) >> 8) & 0xFF;
     6f0:	d5 8f       	std	Z+29, r29	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     6f2:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     6f4:	20 89       	ldd	r18, Z+16	; 0x10
     6f6:	20 68       	ori	r18, 0x80	; 128
     6f8:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     6fa:	90 a3       	std	Z+32, r25	; 0x20
	DMA.CH1.CTRLB = 0x02; //Hi interrupt
     6fc:	81 a3       	std	Z+33, r24	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     6fe:	a2 a3       	std	Z+34, r26	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     700:	53 a3       	std	Z+35, r21	; 0x23
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     702:	64 a3       	std	Z+36, r22	; 0x24
     704:	75 a3       	std	Z+37, r23	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     706:	40 a7       	std	Z+40, r20	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     708:	31 a7       	std	Z+41, r19	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     70a:	12 a6       	std	Z+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     70c:	8f ec       	ldi	r24, 0xCF	; 207
     70e:	9a e2       	ldi	r25, 0x2A	; 42
     710:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     712:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     714:	16 a6       	std	Z+46, r1	; 0x2e
		
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     716:	80 a1       	ldd	r24, Z+32	; 0x20
     718:	80 68       	ori	r24, 0x80	; 128
     71a:	80 a3       	std	Z+32, r24	; 0x20
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <tiny_dma_loop_mode_1>:

void tiny_dma_loop_mode_1(void){
     722:	08 95       	ret

00000724 <tiny_dma_set_mode_2>:
	return;
}

void tiny_dma_set_mode_2(void){
     724:	cf 93       	push	r28
	
	global_mode = 2;
     726:	c2 e0       	ldi	r28, 0x02	; 2
     728:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     72c:	fe de       	rcall	.-516    	; 0x52a <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     72e:	e0 e0       	ldi	r30, 0x00	; 0
     730:	f1 e0       	ldi	r31, 0x01	; 1
     732:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     734:	34 e2       	ldi	r19, 0x24	; 36
     736:	30 ab       	std	Z+48, r19	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     738:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     73a:	29 e5       	ldi	r18, 0x59	; 89
     73c:	22 ab       	std	Z+50, r18	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     742:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     746:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     74a:	44 ab       	std	Z+52, r20	; 0x34
     74c:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     74e:	4a e5       	ldi	r20, 0x5A	; 90
     750:	52 e2       	ldi	r21, 0x22	; 34
     752:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     754:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     756:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     758:	99 e3       	ldi	r25, 0x39	; 57
     75a:	94 af       	std	Z+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     75c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     760:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     764:	90 a9       	ldd	r25, Z+48	; 0x30
     766:	90 68       	ori	r25, 0x80	; 128
     768:	90 ab       	std	Z+48, r25	; 0x30

	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     76a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     76e:	e0 e4       	ldi	r30, 0x40	; 64
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	30 83       	st	Z, r19
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     774:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     778:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     77c:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     780:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     784:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     788:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     78c:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     790:	2a e6       	ldi	r18, 0x6A	; 106
     792:	34 e2       	ldi	r19, 0x24	; 36
     794:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     798:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     79c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     7a0:	9b e3       	ldi	r25, 0x3B	; 59
     7a2:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     7a6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     7aa:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     7ae:	80 81       	ld	r24, Z
     7b0:	80 68       	ori	r24, 0x80	; 128
     7b2:	80 83       	st	Z, r24
	
}
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <tiny_dma_loop_mode_2>:

void tiny_dma_loop_mode_2(void){
     7b8:	cf 93       	push	r28
	DMA.CH0.CTRLA = 0x00;
     7ba:	e0 e0       	ldi	r30, 0x00	; 0
     7bc:	f1 e0       	ldi	r31, 0x01	; 1
     7be:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     7c0:	b0 e4       	ldi	r27, 0x40	; 64
     7c2:	b0 8b       	std	Z+16, r27	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     7c4:	a4 e0       	ldi	r26, 0x04	; 4
     7c6:	a0 8b       	std	Z+16, r26	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt!
     7c8:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     7ca:	51 e9       	ldi	r21, 0x91	; 145
     7cc:	52 8b       	std	Z+18, r21	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     7ce:	80 e1       	ldi	r24, 0x10	; 16
     7d0:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     7d2:	67 e7       	ldi	r22, 0x77	; 119
     7d4:	71 e0       	ldi	r23, 0x01	; 1
     7d6:	64 8b       	std	Z+20, r22	; 0x14
     7d8:	75 8b       	std	Z+21, r23	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     7da:	84 e2       	ldi	r24, 0x24	; 36
     7dc:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     7de:	42 e0       	ldi	r20, 0x02	; 2
     7e0:	41 8f       	std	Z+25, r20	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     7e2:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     7e4:	c0 91 b5 20 	lds	r28, 0x20B5	; 0x8020b5 <b1_state>
     7e8:	8e ee       	ldi	r24, 0xEE	; 238
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	c8 9f       	mul	r28, r24
     7ee:	90 01       	movw	r18, r0
     7f0:	c9 9f       	mul	r28, r25
     7f2:	30 0d       	add	r19, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	26 59       	subi	r18, 0x96	; 150
     7f8:	39 4d       	sbci	r19, 0xD9	; 217
     7fa:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     7fc:	c0 91 b5 20 	lds	r28, 0x20B5	; 0x8020b5 <b1_state>
     800:	c8 9f       	mul	r28, r24
     802:	90 01       	movw	r18, r0
     804:	c9 9f       	mul	r28, r25
     806:	30 0d       	add	r19, r0
     808:	11 24       	eor	r1, r1
     80a:	26 59       	subi	r18, 0x96	; 150
     80c:	39 4d       	sbci	r19, 0xD9	; 217
     80e:	35 8f       	std	Z+29, r19	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     810:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     812:	20 89       	ldd	r18, Z+16	; 0x10
     814:	20 68       	ori	r18, 0x80	; 128
     816:	20 8b       	std	Z+16, r18	; 0x10
	
	DMA.CH1.CTRLA = 0x00;
     818:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     81a:	b0 a3       	std	Z+32, r27	; 0x20
		
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     81c:	a0 a3       	std	Z+32, r26	; 0x20
	DMA.CH1.CTRLB = 0x00; //No interrupt!
     81e:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     820:	52 a3       	std	Z+34, r21	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH2_gc;	//Triggered from ADCA channel 0
     822:	22 e1       	ldi	r18, 0x12	; 18
     824:	23 a3       	std	Z+35, r18	; 0x23
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     826:	64 a3       	std	Z+36, r22	; 0x24
     828:	75 a3       	std	Z+37, r23	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &ADCA.CH2.RESL) >> 0) & 0xFF; //Source address is ADC
     82a:	24 e3       	ldi	r18, 0x34	; 52
     82c:	20 a7       	std	Z+40, r18	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &ADCA.CH2.RESL) >> 8) & 0xFF;
     82e:	41 a7       	std	Z+41, r20	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     830:	12 a6       	std	Z+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     832:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     836:	48 9f       	mul	r20, r24
     838:	90 01       	movw	r18, r0
     83a:	49 9f       	mul	r20, r25
     83c:	30 0d       	add	r19, r0
     83e:	11 24       	eor	r1, r1
     840:	2f 51       	subi	r18, 0x1F	; 31
     842:	38 4d       	sbci	r19, 0xD8	; 216
     844:	24 a7       	std	Z+44, r18	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     846:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     84a:	48 9f       	mul	r20, r24
     84c:	90 01       	movw	r18, r0
     84e:	49 9f       	mul	r20, r25
     850:	30 0d       	add	r19, r0
     852:	11 24       	eor	r1, r1
     854:	c9 01       	movw	r24, r18
     856:	8f 51       	subi	r24, 0x1F	; 31
     858:	98 4d       	sbci	r25, 0xD8	; 216
     85a:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     85c:	16 a6       	std	Z+46, r1	; 0x2e
		
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     85e:	80 a1       	ldd	r24, Z+32	; 0x20
     860:	80 68       	ori	r24, 0x80	; 128
     862:	80 a3       	std	Z+32, r24	; 0x20
}
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <tiny_dma_set_mode_3>:



void tiny_dma_set_mode_3(void){
     868:	cf 93       	push	r28
	
	global_mode = 3;
     86a:	c3 e0       	ldi	r28, 0x03	; 3
     86c:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
		
	tiny_dma_flush();	
     870:	5c de       	rcall	.-840    	; 0x52a <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     872:	e0 e0       	ldi	r30, 0x00	; 0
     874:	f1 e0       	ldi	r31, 0x01	; 1
     876:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     878:	80 e4       	ldi	r24, 0x40	; 64
     87a:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	80 a3       	std	Z+32, r24	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     880:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     882:	12 a2       	std	Z+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     884:	8b e4       	ldi	r24, 0x4B	; 75
     886:	83 a3       	std	Z+35, r24	; 0x23
	DMA.CH1.TRFCNT = 0;
     888:	14 a2       	std	Z+36, r1	; 0x24
     88a:	15 a2       	std	Z+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     88c:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e2       	ldi	r25, 0x20	; 32
     892:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     894:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     896:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     898:	80 ea       	ldi	r24, 0xA0	; 160
     89a:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     89c:	88 e0       	ldi	r24, 0x08	; 8
     89e:	85 a7       	std	Z+45, r24	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     8a0:	16 a6       	std	Z+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     8a2:	80 a1       	ldd	r24, Z+32	; 0x20
     8a4:	80 6a       	ori	r24, 0xA0	; 160
     8a6:	80 a3       	std	Z+32, r24	; 0x20
	
	USARTC0.DATA = 0x55;
     8a8:	85 e5       	ldi	r24, 0x55	; 85
     8aa:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     8ae:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     8b0:	24 e2       	ldi	r18, 0x24	; 36
     8b2:	20 ab       	std	Z+48, r18	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     8b4:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     8b6:	99 e5       	ldi	r25, 0x59	; 89
     8b8:	92 ab       	std	Z+50, r25	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     8be:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     8c2:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     8c6:	44 ab       	std	Z+52, r20	; 0x34
     8c8:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     8ca:	4a e6       	ldi	r20, 0x6A	; 106
     8cc:	54 e2       	ldi	r21, 0x24	; 36
     8ce:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     8d0:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     8d2:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     8d4:	8b e3       	ldi	r24, 0x3B	; 59
     8d6:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     8d8:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     8dc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     8e0:	80 a9       	ldd	r24, Z+48	; 0x30
     8e2:	80 68       	ori	r24, 0x80	; 128
     8e4:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     8e6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     8ea:	e0 e4       	ldi	r30, 0x40	; 64
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	20 83       	st	Z, r18
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     8f0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     8f4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     8f8:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     8fc:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <dacBuf_len>
     900:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <dacBuf_len+0x1>
     904:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     908:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     90c:	8a e5       	ldi	r24, 0x5A	; 90
     90e:	92 e2       	ldi	r25, 0x22	; 34
     910:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     914:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     918:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     91c:	89 e3       	ldi	r24, 0x39	; 57
     91e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     922:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     926:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     92a:	80 81       	ld	r24, Z
     92c:	80 68       	ori	r24, 0x80	; 128
     92e:	80 83       	st	Z, r24

}
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <tiny_dma_loop_mode_3>:

void tiny_dma_loop_mode_3(void){
	//Actual data being transferred
	DMA.CH0.CTRLA = 0x00;
     934:	e0 e0       	ldi	r30, 0x00	; 0
     936:	f1 e0       	ldi	r31, 0x01	; 1
     938:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     93a:	80 e4       	ldi	r24, 0x40	; 64
     93c:	80 8b       	std	Z+16, r24	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt
     942:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     944:	81 e9       	ldi	r24, 0x91	; 145
     946:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     948:	8b e4       	ldi	r24, 0x4B	; 75
     94a:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     94c:	87 e7       	ldi	r24, 0x77	; 119
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	84 8b       	std	Z+20, r24	; 0x14
     952:	95 8b       	std	Z+21, r25	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     954:	80 ea       	ldi	r24, 0xA0	; 160
     956:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     95c:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     95e:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     962:	2e ee       	ldi	r18, 0xEE	; 238
     964:	32 e0       	ldi	r19, 0x02	; 2
     966:	42 9f       	mul	r20, r18
     968:	c0 01       	movw	r24, r0
     96a:	43 9f       	mul	r20, r19
     96c:	90 0d       	add	r25, r0
     96e:	11 24       	eor	r1, r1
     970:	86 59       	subi	r24, 0x96	; 150
     972:	99 4d       	sbci	r25, 0xD9	; 217
     974:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE]) >> 8) & 0xFF;
     976:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     97a:	42 9f       	mul	r20, r18
     97c:	c0 01       	movw	r24, r0
     97e:	43 9f       	mul	r20, r19
     980:	90 0d       	add	r25, r0
     982:	11 24       	eor	r1, r1
     984:	86 59       	subi	r24, 0x96	; 150
     986:	99 4d       	sbci	r25, 0xD9	; 217
     988:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     98a:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     98c:	80 89       	ldd	r24, Z+16	; 0x10
     98e:	80 68       	ori	r24, 0x80	; 128
     990:	80 8b       	std	Z+16, r24	; 0x10
     992:	08 95       	ret

00000994 <tiny_dma_set_mode_4>:
}

void tiny_dma_set_mode_4(void){
     994:	cf 93       	push	r28
	
	global_mode = 4;
     996:	c4 e0       	ldi	r28, 0x04	; 4
     998:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     99c:	c6 dd       	rcall	.-1140   	; 0x52a <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f1 e0       	ldi	r31, 0x01	; 1
     9a2:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     9a8:	c0 a3       	std	Z+32, r28	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     9aa:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     9ac:	12 a2       	std	Z+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     9ae:	8b e4       	ldi	r24, 0x4B	; 75
     9b0:	83 a3       	std	Z+35, r24	; 0x23
	DMA.CH1.TRFCNT = 0;
     9b2:	14 a2       	std	Z+36, r1	; 0x24
     9b4:	15 a2       	std	Z+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     9b6:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e2       	ldi	r25, 0x20	; 32
     9bc:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     9be:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     9c0:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     9c2:	80 ea       	ldi	r24, 0xA0	; 160
     9c4:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     9c6:	88 e0       	ldi	r24, 0x08	; 8
     9c8:	85 a7       	std	Z+45, r24	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     9ca:	16 a6       	std	Z+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     9cc:	80 a1       	ldd	r24, Z+32	; 0x20
     9ce:	80 6a       	ori	r24, 0xA0	; 160
     9d0:	80 a3       	std	Z+32, r24	; 0x20
		
	DMA.CH2.REPCNT = 0; //Repeat forever!
     9d2:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     9d4:	84 e2       	ldi	r24, 0x24	; 36
     9d6:	80 ab       	std	Z+48, r24	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     9d8:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     9da:	89 e5       	ldi	r24, 0x59	; 89
     9dc:	82 ab       	std	Z+50, r24	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     9e2:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <auxDacBufLen>
     9e6:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     9ea:	84 ab       	std	Z+52, r24	; 0x34
     9ec:	95 ab       	std	Z+53, r25	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     9ee:	8a e6       	ldi	r24, 0x6A	; 106
     9f0:	94 e2       	ldi	r25, 0x24	; 36
     9f2:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     9f4:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     9f6:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     9f8:	8b e3       	ldi	r24, 0x3B	; 59
     9fa:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     a02:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a06:	80 a9       	ldd	r24, Z+48	; 0x30
     a08:	80 68       	ori	r24, 0x80	; 128
     a0a:	80 ab       	std	Z+48, r24	; 0x30
}
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <tiny_dma_loop_mode_4>:

void tiny_dma_loop_mode_4(void){
     a10:	cf 93       	push	r28
	//Actual data being transferred
	DMA.CH0.CTRLA = 0x00;
     a12:	e0 e0       	ldi	r30, 0x00	; 0
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     a18:	b0 e4       	ldi	r27, 0x40	; 64
     a1a:	b0 8b       	std	Z+16, r27	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     a1c:	a4 e0       	ldi	r26, 0x04	; 4
     a1e:	a0 8b       	std	Z+16, r26	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt
     a20:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     a22:	51 e9       	ldi	r21, 0x91	; 145
     a24:	52 8b       	std	Z+18, r21	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     a26:	8b e4       	ldi	r24, 0x4B	; 75
     a28:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     a2a:	67 e7       	ldi	r22, 0x77	; 119
     a2c:	71 e0       	ldi	r23, 0x01	; 1
     a2e:	64 8b       	std	Z+20, r22	; 0x14
     a30:	75 8b       	std	Z+21, r23	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     a32:	80 ea       	ldi	r24, 0xA0	; 160
     a34:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     a36:	48 e0       	ldi	r20, 0x08	; 8
     a38:	41 8f       	std	Z+25, r20	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     a3a:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     a3c:	c0 91 b5 20 	lds	r28, 0x20B5	; 0x8020b5 <b1_state>
     a40:	8e ee       	ldi	r24, 0xEE	; 238
     a42:	92 e0       	ldi	r25, 0x02	; 2
     a44:	c8 9f       	mul	r28, r24
     a46:	90 01       	movw	r18, r0
     a48:	c9 9f       	mul	r28, r25
     a4a:	30 0d       	add	r19, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	26 59       	subi	r18, 0x96	; 150
     a50:	39 4d       	sbci	r19, 0xD9	; 217
     a52:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE]) >> 8) & 0xFF;
     a54:	c0 91 b5 20 	lds	r28, 0x20B5	; 0x8020b5 <b1_state>
     a58:	c8 9f       	mul	r28, r24
     a5a:	90 01       	movw	r18, r0
     a5c:	c9 9f       	mul	r28, r25
     a5e:	30 0d       	add	r19, r0
     a60:	11 24       	eor	r1, r1
     a62:	26 59       	subi	r18, 0x96	; 150
     a64:	39 4d       	sbci	r19, 0xD9	; 217
     a66:	35 8f       	std	Z+29, r19	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     a68:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a6a:	20 89       	ldd	r18, Z+16	; 0x10
     a6c:	20 68       	ori	r18, 0x80	; 128
     a6e:	20 8b       	std	Z+16, r18	; 0x10
	
	//Actual data being transferred
	DMA.CH3.CTRLA = 0x00;
     a70:	e0 e4       	ldi	r30, 0x40	; 64
     a72:	f1 e0       	ldi	r31, 0x01	; 1
     a74:	10 82       	st	Z, r1
	DMA.CH3.CTRLA = DMA_CH_RESET_bm;
     a76:	b0 83       	st	Z, r27
	
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     a78:	a0 83       	st	Z, r26
	DMA.CH3.CTRLB = 0x00; //No interrupt
     a7a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     a7e:	50 93 42 01 	sts	0x0142, r21	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_SPIC_gc;
     a82:	2a e4       	ldi	r18, 0x4A	; 74
     a84:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = HALFPACKET_SIZE;
     a88:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a8c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
	
	DMA.CH3.SRCADDR0 = (( (uint16_t) &SPIC.DATA) >> 0) & 0xFF; //Source address is ADC
     a90:	23 ec       	ldi	r18, 0xC3	; 195
     a92:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &SPIC.DATA) >> 8) & 0xFF;
     a96:	40 93 49 01 	sts	0x0149, r20	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     a9a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     a9e:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     aa2:	48 9f       	mul	r20, r24
     aa4:	90 01       	movw	r18, r0
     aa6:	49 9f       	mul	r20, r25
     aa8:	30 0d       	add	r19, r0
     aaa:	11 24       	eor	r1, r1
     aac:	2f 51       	subi	r18, 0x1F	; 31
     aae:	38 4d       	sbci	r19, 0xD8	; 216
     ab0:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
     ab4:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     ab8:	48 9f       	mul	r20, r24
     aba:	90 01       	movw	r18, r0
     abc:	49 9f       	mul	r20, r25
     abe:	30 0d       	add	r19, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	c9 01       	movw	r24, r18
     ac4:	8f 51       	subi	r24, 0x1F	; 31
     ac6:	98 4d       	sbci	r25, 0xD8	; 216
     ac8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     acc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ad0:	80 81       	ld	r24, Z
     ad2:	80 68       	ori	r24, 0x80	; 128
     ad4:	80 83       	st	Z, r24
}	
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <tiny_dma_set_mode_5>:
	
void tiny_dma_set_mode_5(void){
	global_mode = 5;
     ada:	85 e0       	ldi	r24, 0x05	; 5
     adc:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
		
	tiny_dma_flush();
     ae0:	24 dd       	rcall	.-1464   	; 0x52a <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ae8:	34 e2       	ldi	r19, 0x24	; 36
     aea:	30 ab       	std	Z+48, r19	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     aec:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     aee:	29 e5       	ldi	r18, 0x59	; 89
     af0:	22 ab       	std	Z+50, r18	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     af6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     afa:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     afe:	44 ab       	std	Z+52, r20	; 0x34
     b00:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     b02:	4a e5       	ldi	r20, 0x5A	; 90
     b04:	52 e2       	ldi	r21, 0x22	; 34
     b06:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     b08:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     b0a:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b0c:	99 e3       	ldi	r25, 0x39	; 57
     b0e:	94 af       	std	Z+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     b10:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     b14:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b18:	90 a9       	ldd	r25, Z+48	; 0x30
     b1a:	90 68       	ori	r25, 0x80	; 128
     b1c:	90 ab       	std	Z+48, r25	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     b1e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b22:	e0 e4       	ldi	r30, 0x40	; 64
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	30 83       	st	Z, r19
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     b28:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     b2c:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     b30:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     b34:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
     b38:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b3c:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b40:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     b44:	2a e6       	ldi	r18, 0x6A	; 106
     b46:	34 e2       	ldi	r19, 0x24	; 36
     b48:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     b4c:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     b50:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b54:	9b e3       	ldi	r25, 0x3B	; 59
     b56:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     b5a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     b5e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	80 83       	st	Z, r24
     b68:	08 95       	ret

00000b6a <tiny_dma_set_mode_6>:
}

void tiny_dma_set_mode_6(void){
	
	global_mode = 6;
     b6a:	86 e0       	ldi	r24, 0x06	; 6
     b6c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     b70:	dc dc       	rcall	.-1608   	; 0x52a <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     b72:	e0 e0       	ldi	r30, 0x00	; 0
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b78:	34 e2       	ldi	r19, 0x24	; 36
     b7a:	30 ab       	std	Z+48, r19	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     b7c:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     b7e:	29 e5       	ldi	r18, 0x59	; 89
     b80:	22 ab       	std	Z+50, r18	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     b86:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     b8a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b8e:	44 ab       	std	Z+52, r20	; 0x34
     b90:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     b92:	4a e5       	ldi	r20, 0x5A	; 90
     b94:	52 e2       	ldi	r21, 0x22	; 34
     b96:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     b98:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     b9a:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b9c:	99 e3       	ldi	r25, 0x39	; 57
     b9e:	94 af       	std	Z+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     ba0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     ba4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ba8:	90 a9       	ldd	r25, Z+48	; 0x30
     baa:	90 68       	ori	r25, 0x80	; 128
     bac:	90 ab       	std	Z+48, r25	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     bae:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     bb2:	e0 e4       	ldi	r30, 0x40	; 64
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	30 83       	st	Z, r19
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     bb8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     bbc:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     bc6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     bca:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     bce:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bd2:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     bd6:	2a e6       	ldi	r18, 0x6A	; 106
     bd8:	34 e2       	ldi	r19, 0x24	; 36
     bda:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     bde:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     be2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     be6:	9b e3       	ldi	r25, 0x3B	; 59
     be8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     bec:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     bf0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     bf4:	80 81       	ld	r24, Z
     bf6:	80 68       	ori	r24, 0x80	; 128
     bf8:	80 83       	st	Z, r24
     bfa:	08 95       	ret

00000bfc <tiny_dma_loop_mode_6>:
	
}

void tiny_dma_loop_mode_6(void){
	DMA.CH0.CTRLA = 0x00;
     bfc:	e0 e0       	ldi	r30, 0x00	; 0
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     c02:	80 e4       	ldi	r24, 0x40	; 64
     c04:	80 8b       	std	Z+16, r24	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt!
     c0a:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     c0c:	81 e9       	ldi	r24, 0x91	; 145
     c0e:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     c10:	80 e1       	ldi	r24, 0x10	; 16
     c12:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = PACKET_SIZE;
     c14:	2e ee       	ldi	r18, 0xEE	; 238
     c16:	32 e0       	ldi	r19, 0x02	; 2
     c18:	24 8b       	std	Z+20, r18	; 0x14
     c1a:	35 8b       	std	Z+21, r19	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     c1c:	84 e2       	ldi	r24, 0x24	; 36
     c1e:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     c24:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     c26:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     c2a:	42 9f       	mul	r20, r18
     c2c:	c0 01       	movw	r24, r0
     c2e:	43 9f       	mul	r20, r19
     c30:	90 0d       	add	r25, r0
     c32:	11 24       	eor	r1, r1
     c34:	86 59       	subi	r24, 0x96	; 150
     c36:	99 4d       	sbci	r25, 0xD9	; 217
     c38:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     c3a:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     c3e:	42 9f       	mul	r20, r18
     c40:	c0 01       	movw	r24, r0
     c42:	43 9f       	mul	r20, r19
     c44:	90 0d       	add	r25, r0
     c46:	11 24       	eor	r1, r1
     c48:	86 59       	subi	r24, 0x96	; 150
     c4a:	99 4d       	sbci	r25, 0xD9	; 217
     c4c:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     c4e:	16 8e       	std	Z+30, r1	; 0x1e
	
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     c50:	80 89       	ldd	r24, Z+16	; 0x10
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	80 8b       	std	Z+16, r24	; 0x10
     c56:	08 95       	ret

00000c58 <tiny_dma_set_mode_7>:
}

void tiny_dma_set_mode_7(void){
		
		global_mode = 7;
     c58:	87 e0       	ldi	r24, 0x07	; 7
     c5a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
		
		tiny_dma_flush();
     c5e:	65 dc       	rcall	.-1846   	; 0x52a <tiny_dma_flush>
		
		DMA.CH2.REPCNT = 0; //Repeat forever!
     c60:	e0 e0       	ldi	r30, 0x00	; 0
     c62:	f1 e0       	ldi	r31, 0x01	; 1
     c64:	16 aa       	std	Z+54, r1	; 0x36
		DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     c66:	34 e2       	ldi	r19, 0x24	; 36
     c68:	30 ab       	std	Z+48, r19	; 0x30
		DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     c6a:	11 aa       	std	Z+49, r1	; 0x31
		DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     c6c:	29 e5       	ldi	r18, 0x59	; 89
     c6e:	22 ab       	std	Z+50, r18	; 0x32
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	83 ab       	std	Z+51, r24	; 0x33
		DMA.CH2.TRFCNT = dacBuf_len;
     c74:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     c78:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     c7c:	44 ab       	std	Z+52, r20	; 0x34
     c7e:	55 ab       	std	Z+53, r21	; 0x35

		DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     c80:	4a e5       	ldi	r20, 0x5A	; 90
     c82:	52 e2       	ldi	r21, 0x22	; 34
     c84:	40 af       	std	Z+56, r20	; 0x38
		DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     c86:	51 af       	std	Z+57, r21	; 0x39
		DMA.CH2.SRCADDR2 = 0x00;
     c88:	12 ae       	std	Z+58, r1	; 0x3a
			
		DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     c8a:	99 e3       	ldi	r25, 0x39	; 57
     c8c:	94 af       	std	Z+60, r25	; 0x3c
		DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     c8e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
		DMA.CH2.DESTADDR2 = 0x00;
     c92:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
			
		//Must enable last for REPCNT won't work!
		DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     c96:	90 a9       	ldd	r25, Z+48	; 0x30
     c98:	90 68       	ori	r25, 0x80	; 128
     c9a:	90 ab       	std	Z+48, r25	; 0x30
		
		DMA.CH3.REPCNT = 0; //Repeat forever!
     c9c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
		DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ca0:	e0 e4       	ldi	r30, 0x40	; 64
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
     ca4:	30 83       	st	Z, r19
		DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     ca6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
		DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     caa:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
		DMA.CH3.TRFCNT = auxDacBufLen;
     cb4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     cb8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     cbc:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cc0:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

		DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     cc4:	2a e6       	ldi	r18, 0x6A	; 106
     cc6:	34 e2       	ldi	r19, 0x24	; 36
     cc8:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
		DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     ccc:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
		DMA.CH3.SRCADDR2 = 0x00;
     cd0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
		DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     cd4:	9b e3       	ldi	r25, 0x3B	; 59
     cd6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
		DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     cda:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
		DMA.CH3.DESTADDR2 = 0x00;
     cde:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
		//Must enable last for REPCNT won't work!
		DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     ce2:	80 81       	ld	r24, Z
     ce4:	80 68       	ori	r24, 0x80	; 128
     ce6:	80 83       	st	Z, r24
     ce8:	08 95       	ret

00000cea <tiny_dma_loop_mode_7>:
}

void tiny_dma_loop_mode_7(void){
	
		DMA.CH0.CTRLA = 0x00;
     cea:	e0 e0       	ldi	r30, 0x00	; 0
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	10 8a       	std	Z+16, r1	; 0x10
		DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     cf0:	80 e4       	ldi	r24, 0x40	; 64
     cf2:	80 8b       	std	Z+16, r24	; 0x10
		
		DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     cf4:	85 e0       	ldi	r24, 0x05	; 5
     cf6:	80 8b       	std	Z+16, r24	; 0x10
		DMA.CH0.CTRLB = 0x00; //No interrupt!
     cf8:	11 8a       	std	Z+17, r1	; 0x11
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     cfa:	81 e9       	ldi	r24, 0x91	; 145
     cfc:	82 8b       	std	Z+18, r24	; 0x12
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     cfe:	80 e1       	ldi	r24, 0x10	; 16
     d00:	83 8b       	std	Z+19, r24	; 0x13
		DMA.CH0.TRFCNT = PACKET_SIZE;
     d02:	2e ee       	ldi	r18, 0xEE	; 238
     d04:	32 e0       	ldi	r19, 0x02	; 2
     d06:	24 8b       	std	Z+20, r18	; 0x14
     d08:	35 8b       	std	Z+21, r19	; 0x15
		
		DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     d0a:	84 e2       	ldi	r24, 0x24	; 36
     d0c:	80 8f       	std	Z+24, r24	; 0x18
		DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	81 8f       	std	Z+25, r24	; 0x19
		DMA.CH0.SRCADDR2 = 0x00;
     d12:	12 8e       	std	Z+26, r1	; 0x1a
		
		DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d14:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d18:	42 9f       	mul	r20, r18
     d1a:	c0 01       	movw	r24, r0
     d1c:	43 9f       	mul	r20, r19
     d1e:	90 0d       	add	r25, r0
     d20:	11 24       	eor	r1, r1
     d22:	86 59       	subi	r24, 0x96	; 150
     d24:	99 4d       	sbci	r25, 0xD9	; 217
     d26:	84 8f       	std	Z+28, r24	; 0x1c
		DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d28:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d2c:	42 9f       	mul	r20, r18
     d2e:	c0 01       	movw	r24, r0
     d30:	43 9f       	mul	r20, r19
     d32:	90 0d       	add	r25, r0
     d34:	11 24       	eor	r1, r1
     d36:	86 59       	subi	r24, 0x96	; 150
     d38:	99 4d       	sbci	r25, 0xD9	; 217
     d3a:	95 8f       	std	Z+29, r25	; 0x1d
		DMA.CH0.DESTADDR2 = 0x00;
     d3c:	16 8e       	std	Z+30, r1	; 0x1e
		
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d3e:	80 89       	ldd	r24, Z+16	; 0x10
     d40:	80 68       	ori	r24, 0x80	; 128
     d42:	80 8b       	std	Z+16, r24	; 0x10
     d44:	08 95       	ret

00000d46 <__vector_6>:
	
}

ISR(DMA_CH0_vect){
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	2f 93       	push	r18
     d52:	3f 93       	push	r19
     d54:	4f 93       	push	r20
     d56:	8f 93       	push	r24
     d58:	9f 93       	push	r25
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
		DMA.INTFLAGS = 0x01;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     d64:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     d68:	88 23       	and	r24, r24
     d6a:	19 f0       	breq	.+6      	; 0xd72 <__vector_6+0x2c>
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	41 f1       	breq	.+80     	; 0xdc0 <__vector_6+0x7a>
     d70:	4d c0       	rjmp	.+154    	; 0xe0c <__vector_6+0xc6>
			case 0:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d72:	e0 e0       	ldi	r30, 0x00	; 0
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	87 e7       	ldi	r24, 0x77	; 119
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	84 8b       	std	Z+20, r24	; 0x14
     d7c:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d7e:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d82:	2e ee       	ldi	r18, 0xEE	; 238
     d84:	32 e0       	ldi	r19, 0x02	; 2
     d86:	42 9f       	mul	r20, r18
     d88:	c0 01       	movw	r24, r0
     d8a:	43 9f       	mul	r20, r19
     d8c:	90 0d       	add	r25, r0
     d8e:	11 24       	eor	r1, r1
     d90:	86 59       	subi	r24, 0x96	; 150
     d92:	99 4d       	sbci	r25, 0xD9	; 217
     d94:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d96:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d9a:	42 9f       	mul	r20, r18
     d9c:	c0 01       	movw	r24, r0
     d9e:	43 9f       	mul	r20, r19
     da0:	90 0d       	add	r25, r0
     da2:	11 24       	eor	r1, r1
     da4:	86 59       	subi	r24, 0x96	; 150
     da6:	99 4d       	sbci	r25, 0xD9	; 217
     da8:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     daa:	80 89       	ldd	r24, Z+16	; 0x10
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     db0:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	91 11       	cpse	r25, r1
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
     dbe:	26 c0       	rjmp	.+76     	; 0xe0c <__vector_6+0xc6>
			case 1:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     dc0:	e0 e0       	ldi	r30, 0x00	; 0
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	87 e7       	ldi	r24, 0x77	; 119
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	84 8b       	std	Z+20, r24	; 0x14
     dca:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     dcc:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     dd0:	2e ee       	ldi	r18, 0xEE	; 238
     dd2:	32 e0       	ldi	r19, 0x02	; 2
     dd4:	42 9f       	mul	r20, r18
     dd6:	c0 01       	movw	r24, r0
     dd8:	43 9f       	mul	r20, r19
     dda:	90 0d       	add	r25, r0
     ddc:	11 24       	eor	r1, r1
     dde:	86 59       	subi	r24, 0x96	; 150
     de0:	99 4d       	sbci	r25, 0xD9	; 217
     de2:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     de4:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     de8:	42 9f       	mul	r20, r18
     dea:	c0 01       	movw	r24, r0
     dec:	43 9f       	mul	r20, r19
     dee:	90 0d       	add	r25, r0
     df0:	11 24       	eor	r1, r1
     df2:	86 59       	subi	r24, 0x96	; 150
     df4:	99 4d       	sbci	r25, 0xD9	; 217
     df6:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     df8:	80 89       	ldd	r24, Z+16	; 0x10
     dfa:	80 68       	ori	r24, 0x80	; 128
     dfc:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     dfe:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	91 11       	cpse	r25, r1
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	4f 91       	pop	r20
     e16:	3f 91       	pop	r19
     e18:	2f 91       	pop	r18
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <__vector_7>:

ISR(DMA_CH1_vect){
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	2f 93       	push	r18
     e30:	3f 93       	push	r19
     e32:	4f 93       	push	r20
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
		DMA.INTFLAGS = 0x02;
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     e42:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	31 f5       	brne	.+76     	; 0xe96 <__vector_7+0x72>
			case 0:
			////////////////////////////////////////
			break;
			case 1:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     e4a:	e0 e0       	ldi	r30, 0x00	; 0
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	87 e7       	ldi	r24, 0x77	; 119
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	84 a3       	std	Z+36, r24	; 0x24
     e54:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e56:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <b2_state>
     e5a:	2e ee       	ldi	r18, 0xEE	; 238
     e5c:	32 e0       	ldi	r19, 0x02	; 2
     e5e:	42 9f       	mul	r20, r18
     e60:	c0 01       	movw	r24, r0
     e62:	43 9f       	mul	r20, r19
     e64:	90 0d       	add	r25, r0
     e66:	11 24       	eor	r1, r1
     e68:	8f 51       	subi	r24, 0x1F	; 31
     e6a:	98 4d       	sbci	r25, 0xD8	; 216
     e6c:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     e6e:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <b2_state>
     e72:	42 9f       	mul	r20, r18
     e74:	c0 01       	movw	r24, r0
     e76:	43 9f       	mul	r20, r19
     e78:	90 0d       	add	r25, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	8f 51       	subi	r24, 0x1F	; 31
     e7e:	98 4d       	sbci	r25, 0xD8	; 216
     e80:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e82:	80 a1       	ldd	r24, Z+32	; 0x20
     e84:	80 68       	ori	r24, 0x80	; 128
     e86:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
     e88:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <b2_state>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	91 11       	cpse	r25, r1
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <b2_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <tiny_timer_setup>:
#define PSU_PER 3000
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     eae:	e0 e7       	ldi	r30, 0x70	; 112
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	83 81       	ldd	r24, Z+3	; 0x03
     eb4:	8c 7f       	andi	r24, 0xFC	; 252
     eb6:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     eb8:	84 81       	ldd	r24, Z+4	; 0x04
     eba:	8c 7f       	andi	r24, 0xFC	; 252
     ebc:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     ebe:	80 81       	ld	r24, Z
     ec0:	8d 7f       	andi	r24, 0xFD	; 253
     ec2:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     ec4:	e0 e8       	ldi	r30, 0x80	; 128
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	80 ec       	ldi	r24, 0xC0	; 192
     eca:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     ecc:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
     ece:	88 ec       	ldi	r24, 0xC8	; 200
     ed0:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     ed2:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     ed4:	e0 e0       	ldi	r30, 0x00	; 0
     ed6:	f8 e0       	ldi	r31, 0x08	; 8
     ed8:	34 e0       	ldi	r19, 0x04	; 4
     eda:	30 83       	st	Z, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     edc:	23 e0       	ldi	r18, 0x03	; 3
     ede:	21 83       	std	Z+1, r18	; 0x01
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     ee0:	14 82       	std	Z+4, r1	; 0x04
		TC_DAC.PER = 469;
     ee2:	85 ed       	ldi	r24, 0xD5	; 213
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	86 a3       	std	Z+38, r24	; 0x26
     ee8:	97 a3       	std	Z+39, r25	; 0x27
		TC_DAC.INTCTRLA = 0x00;
     eea:	16 82       	std	Z+6, r1	; 0x06
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     eec:	e0 e4       	ldi	r30, 0x40	; 64
     eee:	f8 e0       	ldi	r31, 0x08	; 8
     ef0:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     ef2:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     ef4:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     ef6:	86 a3       	std	Z+38, r24	; 0x26
     ef8:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     efa:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     efc:	e0 e6       	ldi	r30, 0x60	; 96
     efe:	f6 e0       	ldi	r31, 0x06	; 6
     f00:	80 81       	ld	r24, Z
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     f06:	e0 e4       	ldi	r30, 0x40	; 64
     f08:	f9 e0       	ldi	r31, 0x09	; 9
     f0a:	83 e1       	ldi	r24, 0x13	; 19
     f0c:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     f0e:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_LO_gc;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     f14:	28 eb       	ldi	r18, 0xB8	; 184
     f16:	3b e0       	ldi	r19, 0x0B	; 11
     f18:	26 a3       	std	Z+38, r18	; 0x26
     f1a:	37 a3       	std	Z+39, r19	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     f1c:	10 a6       	std	Z+40, r1	; 0x28
     f1e:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     f20:	80 83       	st	Z, r24
     f22:	08 95       	ret

00000f24 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	1f 92       	push	r1
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	if (global_mode == 7){
     f48:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     f4c:	87 30       	cpi	r24, 0x07	; 7
     f4e:	31 f4       	brne	.+12     	; 0xf5c <__vector_83+0x38>
		nothing = ADCA.CH1.RESL;
     f50:	e0 e0       	ldi	r30, 0x00	; 0
     f52:	f2 e0       	ldi	r31, 0x02	; 2
     f54:	84 a5       	ldd	r24, Z+44	; 0x2c
     f56:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
     f58:	95 a5       	ldd	r25, Z+45	; 0x2d
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <__vector_83+0x3c>
	}
	else{
		tempvar = ADCA.CH1.RESL;
     f5c:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
     f60:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     f64:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
     f66:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     f6a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	0c f4       	brge	.+2      	; 0xf76 <__vector_83+0x52>
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	99 23       	and	r25, r25
     f78:	c9 f0       	breq	.+50     	; 0xfac <__vector_83+0x88>
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	22 3b       	cpi	r18, 0xB2	; 178
     f7e:	3b 40       	sbci	r19, 0x0B	; 11
     f80:	08 f0       	brcs	.+2      	; 0xf84 <__vector_83+0x60>
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	99 23       	and	r25, r25
     f86:	91 f0       	breq	.+36     	; 0xfac <__vector_83+0x88>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
     f88:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     f8c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     f90:	89 30       	cpi	r24, 0x09	; 9
     f92:	1c f4       	brge	.+6      	; 0xf9a <__vector_83+0x76>
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <__vector_83+0x7a>
     f9a:	86 e0       	ldi	r24, 0x06	; 6
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     fa6:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
     faa:	23 c0       	rjmp	.+70     	; 0xff2 <__vector_83+0xce>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
     fac:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     fb0:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	8f 3f       	cpi	r24, 0xFF	; 255
     fb8:	0c f0       	brlt	.+2      	; 0xfbc <__vector_83+0x98>
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	99 23       	and	r25, r25
     fbe:	c9 f0       	breq	.+50     	; 0xff2 <__vector_83+0xce>
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	27 30       	cpi	r18, 0x07	; 7
     fc4:	31 05       	cpc	r19, r1
     fc6:	08 f4       	brcc	.+2      	; 0xfca <__vector_83+0xa6>
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	99 23       	and	r25, r25
     fcc:	91 f0       	breq	.+36     	; 0xff2 <__vector_83+0xce>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
     fce:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     fd2:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     fd6:	88 3f       	cpi	r24, 0xF8	; 248
     fd8:	1c f0       	brlt	.+6      	; 0xfe0 <__vector_83+0xbc>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <__vector_83+0xc0>
     fe0:	86 e0       	ldi	r24, 0x06	; 6
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	48 1b       	sub	r20, r24
     fe8:	59 0b       	sbc	r21, r25
     fea:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     fee:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
     ff2:	0f 90       	pop	r0
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	ff 91       	pop	r31
     ffa:	ef 91       	pop	r30
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    1012:	e0 e7       	ldi	r30, 0x70	; 112
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	83 81       	ldd	r24, Z+3	; 0x03
    1018:	8f 7e       	andi	r24, 0xEF	; 239
    101a:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b01001010;
    101c:	e0 e4       	ldi	r30, 0x40	; 64
    101e:	f6 e0       	ldi	r31, 0x06	; 6
    1020:	80 81       	ld	r24, Z
    1022:	8a 64       	ori	r24, 0x4A	; 74
    1024:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    102a:	88 e5       	ldi	r24, 0x58	; 88
    102c:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	#ifndef VERO
		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
    102e:	80 e2       	ldi	r24, 0x20	; 32
    1030:	86 87       	std	Z+14, r24	; 0x0e
	#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1032:	e0 ea       	ldi	r30, 0xA0	; 160
    1034:	f8 e0       	ldi	r31, 0x08	; 8
    1036:	84 ec       	ldi	r24, 0xC4	; 196
    1038:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    103e:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1040:	88 e1       	ldi	r24, 0x18	; 24
    1042:	84 83       	std	Z+4, r24	; 0x04
    1044:	08 95       	ret

00001046 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    1046:	e0 e7       	ldi	r30, 0x70	; 112
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	87 7f       	andi	r24, 0xF7	; 247
    104e:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1050:	e0 ec       	ldi	r30, 0xC0	; 192
    1052:	f8 e0       	ldi	r31, 0x08	; 8
    1054:	80 e4       	ldi	r24, 0x40	; 64
    1056:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_HI_gc;
    1058:	83 e0       	ldi	r24, 0x03	; 3
    105a:	81 83       	std	Z+1, r24	; 0x01
	#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
	#else
		PORTC.PIN7CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;  //Pin5 if not swapped		
    105c:	88 e5       	ldi	r24, 0x58	; 88
    105e:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <__TEXT_REGION_LENGTH__+0x700657>
    1062:	08 95       	ret

00001064 <__vector_24>:
	#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
	asm("nop");
    106e:	00 00       	nop
}
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	00 d0       	rcall	.+0      	; 0x1084 <sysclk_init+0xa>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <sysclk_init+0xc>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1090:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1094:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1098:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    109c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    10a0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    10a4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    10a8:	64 e0       	ldi	r22, 0x04	; 4
    10aa:	81 e4       	ldi	r24, 0x41	; 65
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	be d5       	rcall	.+2940   	; 0x1c2c <ccp_write_io>
    10b0:	6c e1       	ldi	r22, 0x1C	; 28
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	c0 d5       	rcall	.+2944   	; 0x1c38 <nvm_read_byte>
    10b8:	8a 83       	std	Y+2, r24	; 0x02
    10ba:	6d e1       	ldi	r22, 0x1D	; 29
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	bb d5       	rcall	.+2934   	; 0x1c38 <nvm_read_byte>
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <sysclk_init+0x5a>
    10cc:	80 e4       	ldi	r24, 0x40	; 64
    10ce:	93 e2       	ldi	r25, 0x23	; 35
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	9c 83       	std	Y+4, r25	; 0x04
    10dc:	e0 e6       	ldi	r30, 0x60	; 96
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	82 83       	std	Z+2, r24	; 0x02
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	83 83       	std	Z+3, r24	; 0x03
    10e6:	9f b7       	in	r25, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	e0 e5       	ldi	r30, 0x50	; 80
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	80 83       	st	Z, r24
    10f4:	9f bf       	out	0x3f, r25	; 63
    10f6:	81 81       	ldd	r24, Z+1	; 0x01
    10f8:	81 ff       	sbrs	r24, 1
    10fa:	fd cf       	rjmp	.-6      	; 0x10f6 <sysclk_init+0x7c>
    10fc:	9f b7       	in	r25, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	00 e5       	ldi	r16, 0x50	; 80
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	d8 01       	movw	r26, r16
    1106:	16 96       	adiw	r26, 0x06	; 6
    1108:	8c 91       	ld	r24, X
    110a:	16 97       	sbiw	r26, 0x06	; 6
    110c:	89 7f       	andi	r24, 0xF9	; 249
    110e:	16 96       	adiw	r26, 0x06	; 6
    1110:	8c 93       	st	X, r24
    1112:	16 97       	sbiw	r26, 0x06	; 6
    1114:	e0 e6       	ldi	r30, 0x60	; 96
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 e8       	ldi	r24, 0x80	; 128
    111a:	85 83       	std	Z+5, r24	; 0x05
    111c:	8b eb       	ldi	r24, 0xBB	; 187
    111e:	86 83       	std	Z+6, r24	; 0x06
    1120:	16 96       	adiw	r26, 0x06	; 6
    1122:	8c 91       	ld	r24, X
    1124:	16 97       	sbiw	r26, 0x06	; 6
    1126:	84 60       	ori	r24, 0x04	; 4
    1128:	16 96       	adiw	r26, 0x06	; 6
    112a:	8c 93       	st	X, r24
    112c:	80 81       	ld	r24, Z
    112e:	81 60       	ori	r24, 0x01	; 1
    1130:	80 83       	st	Z, r24
    1132:	9f bf       	out	0x3f, r25	; 63
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	80 e4       	ldi	r24, 0x40	; 64
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	78 d5       	rcall	.+2800   	; 0x1c2c <ccp_write_io>
    113c:	9f b7       	in	r25, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	f8 01       	movw	r30, r16
    1142:	80 81       	ld	r24, Z
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	80 83       	st	Z, r24
    1148:	9f bf       	out	0x3f, r25	; 63
    114a:	24 96       	adiw	r28, 0x04	; 4
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <sysclk_enable_module>:
    115a:	9f b7       	in	r25, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	e8 2f       	mov	r30, r24
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	e0 59       	subi	r30, 0x90	; 144
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 95       	com	r22
    1168:	80 81       	ld	r24, Z
    116a:	68 23       	and	r22, r24
    116c:	60 83       	st	Z, r22
    116e:	9f bf       	out	0x3f, r25	; 63
    1170:	08 95       	ret

00001172 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1172:	86 30       	cpi	r24, 0x06	; 6
    1174:	11 f0       	breq	.+4      	; 0x117a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	01 c0       	rjmp	.+2      	; 0x117c <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    117a:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    117c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1180:	81 fd       	sbrc	r24, 1
    1182:	26 c0       	rjmp	.+76     	; 0x11d0 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1184:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1186:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1188:	e0 e5       	ldi	r30, 0x50	; 80
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	82 60       	ori	r24, 0x02	; 2
    1190:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1192:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1194:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1196:	81 ff       	sbrs	r24, 1
    1198:	fd cf       	rjmp	.-6      	; 0x1194 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    119a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    119c:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    119e:	a0 e5       	ldi	r26, 0x50	; 80
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	16 96       	adiw	r26, 0x06	; 6
    11a4:	8c 91       	ld	r24, X
    11a6:	16 97       	sbiw	r26, 0x06	; 6
    11a8:	89 7f       	andi	r24, 0xF9	; 249
    11aa:	16 96       	adiw	r26, 0x06	; 6
    11ac:	8c 93       	st	X, r24
    11ae:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    11b0:	e0 e6       	ldi	r30, 0x60	; 96
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 e8       	ldi	r24, 0x80	; 128
    11b6:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    11b8:	8b eb       	ldi	r24, 0xBB	; 187
    11ba:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	8c 91       	ld	r24, X
    11c0:	16 97       	sbiw	r26, 0x06	; 6
    11c2:	84 60       	ori	r24, 0x04	; 4
    11c4:	16 96       	adiw	r26, 0x06	; 6
    11c6:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    11c8:	80 81       	ld	r24, Z
    11ca:	81 60       	ori	r24, 0x01	; 1
    11cc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11ce:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    11d0:	63 60       	ori	r22, 0x03	; 3
    11d2:	84 e4       	ldi	r24, 0x44	; 68
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	2a d5       	rcall	.+2644   	; 0x1c2c <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    11d8:	60 e4       	ldi	r22, 0x40	; 64
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	be cf       	rjmp	.-132    	; 0x115a <sysclk_enable_module>
    11de:	08 95       	ret

000011e0 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    11e0:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <udi_vendor_alternate_setting>
    11e4:	08 95       	ret

000011e6 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    11e6:	40 d1       	rcall	.+640    	; 0x1468 <udc_get_interface_desc>
    11e8:	fc 01       	movw	r30, r24
    11ea:	83 81       	ldd	r24, Z+3	; 0x03
    11ec:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    11f0:	81 11       	cpse	r24, r1
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    11f4:	dd c8       	rjmp	.-3654   	; 0x3b0 <main_vendor_enable>
    11f6:	08 95       	ret
			return false;
		}
	}
	return true;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
}
    11fa:	08 95       	ret

000011fc <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    11fc:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <udi_vendor_alternate_setting>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	09 f4       	brne	.+2      	; 0x1206 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    1204:	ef c8       	rjmp	.-3618   	; 0x3e4 <main_vendor_disable>
    1206:	08 95       	ret

00001208 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1208:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    120c:	88 23       	and	r24, r24
    120e:	4c f4       	brge	.+18     	; 0x1222 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1210:	80 76       	andi	r24, 0x60	; 96
    1212:	80 34       	cpi	r24, 0x40	; 64
    1214:	a9 f4       	brne	.+42     	; 0x1240 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1216:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    121a:	81 11       	cpse	r24, r1
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    121e:	e7 c8       	rjmp	.-3634   	; 0x3ee <main_setup_in_received>
    1220:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1222:	80 76       	andi	r24, 0x60	; 96
    1224:	80 34       	cpi	r24, 0x40	; 64
    1226:	81 f4       	brne	.+32     	; 0x1248 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1228:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    122c:	81 11       	cpse	r24, r1
    122e:	0e c0       	rjmp	.+28     	; 0x124c <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1230:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1234:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1238:	89 2b       	or	r24, r25
    123a:	51 f0       	breq	.+20     	; 0x1250 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    123c:	d6 c8       	rjmp	.-3668   	; 0x3ea <main_setup_out_received>
    123e:	08 95       	ret
		}
	}
	return false; // Not supported request
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	08 95       	ret
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	08 95       	ret
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	08 95       	ret
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	08 95       	ret
    1250:	80 e0       	ldi	r24, 0x00	; 0
}
    1252:	08 95       	ret

00001254 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    125a:	8a 01       	movw	r16, r20
    125c:	ac 01       	movw	r20, r24
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	81 e8       	ldi	r24, 0x81	; 129
    1262:	0e 94 8a 12 	call	0x2514	; 0x2514 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	08 95       	ret

0000126c <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1272:	8a 01       	movw	r16, r20
    1274:	ac 01       	movw	r20, r24
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	82 e8       	ldi	r24, 0x82	; 130
    127a:	0e 94 8a 12 	call	0x2514	; 0x2514 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    128a:	8a 01       	movw	r16, r20
    128c:	ac 01       	movw	r20, r24
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	83 e8       	ldi	r24, 0x83	; 131
    1292:	0e 94 8a 12 	call	0x2514	; 0x2514 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	08 95       	ret

0000129c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    129c:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    12a0:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    12a4:	01 90       	ld	r0, Z+
    12a6:	f0 81       	ld	r31, Z
    12a8:	e0 2d       	mov	r30, r0
    12aa:	22 81       	ldd	r18, Z+2	; 0x02
    12ac:	33 81       	ldd	r19, Z+3	; 0x03
    12ae:	2e 0f       	add	r18, r30
    12b0:	3f 1f       	adc	r19, r31
    12b2:	fc 01       	movw	r30, r24
    12b4:	40 81       	ld	r20, Z
    12b6:	e4 0f       	add	r30, r20
    12b8:	f1 1d       	adc	r31, r1
    12ba:	e2 17       	cp	r30, r18
    12bc:	f3 07       	cpc	r31, r19
    12be:	b8 f4       	brcc	.+46     	; 0x12ee <udc_next_desc_in_iface+0x52>
    12c0:	81 81       	ldd	r24, Z+1	; 0x01
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	b9 f0       	breq	.+46     	; 0x12f4 <udc_next_desc_in_iface+0x58>
    12c6:	86 13       	cpse	r24, r22
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <udc_next_desc_in_iface+0x40>
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <udc_next_desc_in_iface+0x3a>
    12cc:	81 81       	ldd	r24, Z+1	; 0x01
    12ce:	84 30       	cpi	r24, 0x04	; 4
    12d0:	a1 f0       	breq	.+40     	; 0x12fa <udc_next_desc_in_iface+0x5e>
    12d2:	86 13       	cpse	r24, r22
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <udc_next_desc_in_iface+0x40>
    12d6:	8e 2f       	mov	r24, r30
    12d8:	9f 2f       	mov	r25, r31
    12da:	08 95       	ret
    12dc:	80 81       	ld	r24, Z
    12de:	e8 0f       	add	r30, r24
    12e0:	f1 1d       	adc	r31, r1
    12e2:	e2 17       	cp	r30, r18
    12e4:	f3 07       	cpc	r31, r19
    12e6:	90 f3       	brcs	.-28     	; 0x12cc <udc_next_desc_in_iface+0x30>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 95       	ret
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	08 95       	ret
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	08 95       	ret
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	08 95       	ret

00001300 <udc_valid_address>:
    1300:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1304:	8f 77       	andi	r24, 0x7F	; 127
    1306:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <udd_set_address>
    130a:	08 95       	ret

0000130c <udc_update_iface_desc>:
    130c:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <udc_num_configuration>
    1310:	99 23       	and	r25, r25
    1312:	81 f1       	breq	.+96     	; 0x1374 <udc_update_iface_desc+0x68>
    1314:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1318:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    131c:	01 90       	ld	r0, Z+
    131e:	f0 81       	ld	r31, Z
    1320:	e0 2d       	mov	r30, r0
    1322:	94 81       	ldd	r25, Z+4	; 0x04
    1324:	89 17       	cp	r24, r25
    1326:	40 f5       	brcc	.+80     	; 0x1378 <udc_update_iface_desc+0x6c>
    1328:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    132c:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    1330:	22 81       	ldd	r18, Z+2	; 0x02
    1332:	33 81       	ldd	r19, Z+3	; 0x03
    1334:	2e 0f       	add	r18, r30
    1336:	3f 1f       	adc	r19, r31
    1338:	e2 17       	cp	r30, r18
    133a:	f3 07       	cpc	r31, r19
    133c:	f8 f4       	brcc	.+62     	; 0x137c <udc_update_iface_desc+0x70>
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	94 30       	cpi	r25, 0x04	; 4
    1342:	61 f4       	brne	.+24     	; 0x135c <udc_update_iface_desc+0x50>
    1344:	92 81       	ldd	r25, Z+2	; 0x02
    1346:	98 13       	cpse	r25, r24
    1348:	09 c0       	rjmp	.+18     	; 0x135c <udc_update_iface_desc+0x50>
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	96 13       	cpse	r25, r22
    134e:	06 c0       	rjmp	.+12     	; 0x135c <udc_update_iface_desc+0x50>
    1350:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    1354:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	08 95       	ret
    135c:	90 81       	ld	r25, Z
    135e:	e9 0f       	add	r30, r25
    1360:	f1 1d       	adc	r31, r1
    1362:	e2 17       	cp	r30, r18
    1364:	f3 07       	cpc	r31, r19
    1366:	58 f3       	brcs	.-42     	; 0x133e <udc_update_iface_desc+0x32>
    1368:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    136c:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	08 95       	ret
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	08 95       	ret
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	08 95       	ret
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	08 95       	ret

00001380 <udc_iface_disable>:
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	c8 2f       	mov	r28, r24
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	be df       	rcall	.-132    	; 0x130c <udc_update_iface_desc>
    1390:	18 2f       	mov	r17, r24
    1392:	88 23       	and	r24, r24
    1394:	81 f1       	breq	.+96     	; 0x13f6 <udc_iface_disable+0x76>
    1396:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    139a:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    139e:	ec 2f       	mov	r30, r28
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	12 96       	adiw	r26, 0x02	; 2
    13a8:	8d 91       	ld	r24, X+
    13aa:	9c 91       	ld	r25, X
    13ac:	13 97       	sbiw	r26, 0x03	; 3
    13ae:	e8 0f       	add	r30, r24
    13b0:	f9 1f       	adc	r31, r25
    13b2:	e0 80       	ld	r14, Z
    13b4:	f1 80       	ldd	r15, Z+1	; 0x01
    13b6:	d7 01       	movw	r26, r14
    13b8:	16 96       	adiw	r26, 0x06	; 6
    13ba:	ed 91       	ld	r30, X+
    13bc:	fc 91       	ld	r31, X
    13be:	17 97       	sbiw	r26, 0x07	; 7
    13c0:	09 95       	icall
    13c2:	68 2f       	mov	r22, r24
    13c4:	8c 2f       	mov	r24, r28
    13c6:	a2 df       	rcall	.-188    	; 0x130c <udc_update_iface_desc>
    13c8:	18 2f       	mov	r17, r24
    13ca:	88 23       	and	r24, r24
    13cc:	a1 f0       	breq	.+40     	; 0x13f6 <udc_iface_disable+0x76>
    13ce:	c0 91 ba 20 	lds	r28, 0x20BA	; 0x8020ba <udc_ptr_iface>
    13d2:	d0 91 bb 20 	lds	r29, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    13d6:	65 e0       	ldi	r22, 0x05	; 5
    13d8:	ce 01       	movw	r24, r28
    13da:	60 df       	rcall	.-320    	; 0x129c <udc_next_desc_in_iface>
    13dc:	ec 01       	movw	r28, r24
    13de:	89 2b       	or	r24, r25
    13e0:	21 f0       	breq	.+8      	; 0x13ea <udc_iface_disable+0x6a>
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	0e 94 8d 13 	call	0x271a	; 0x271a <udd_ep_free>
    13e8:	f6 cf       	rjmp	.-20     	; 0x13d6 <udc_iface_disable+0x56>
    13ea:	d7 01       	movw	r26, r14
    13ec:	12 96       	adiw	r26, 0x02	; 2
    13ee:	ed 91       	ld	r30, X+
    13f0:	fc 91       	ld	r31, X
    13f2:	13 97       	sbiw	r26, 0x03	; 3
    13f4:	09 95       	icall
    13f6:	81 2f       	mov	r24, r17
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	08 95       	ret

00001404 <udc_iface_enable>:
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	18 2f       	mov	r17, r24
    140c:	7f df       	rcall	.-258    	; 0x130c <udc_update_iface_desc>
    140e:	88 23       	and	r24, r24
    1410:	39 f1       	breq	.+78     	; 0x1460 <udc_iface_enable+0x5c>
    1412:	c0 91 ba 20 	lds	r28, 0x20BA	; 0x8020ba <udc_ptr_iface>
    1416:	d0 91 bb 20 	lds	r29, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    141a:	65 e0       	ldi	r22, 0x05	; 5
    141c:	ce 01       	movw	r24, r28
    141e:	3e df       	rcall	.-388    	; 0x129c <udc_next_desc_in_iface>
    1420:	ec 01       	movw	r28, r24
    1422:	89 2b       	or	r24, r25
    1424:	41 f0       	breq	.+16     	; 0x1436 <udc_iface_enable+0x32>
    1426:	4c 81       	ldd	r20, Y+4	; 0x04
    1428:	5d 81       	ldd	r21, Y+5	; 0x05
    142a:	6b 81       	ldd	r22, Y+3	; 0x03
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	ad d7       	rcall	.+3930   	; 0x238a <udd_ep_alloc>
    1430:	81 11       	cpse	r24, r1
    1432:	f3 cf       	rjmp	.-26     	; 0x141a <udc_iface_enable+0x16>
    1434:	15 c0       	rjmp	.+42     	; 0x1460 <udc_iface_enable+0x5c>
    1436:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    143a:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    143e:	e1 2f       	mov	r30, r17
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	12 96       	adiw	r26, 0x02	; 2
    1448:	8d 91       	ld	r24, X+
    144a:	9c 91       	ld	r25, X
    144c:	13 97       	sbiw	r26, 0x03	; 3
    144e:	e8 0f       	add	r30, r24
    1450:	f9 1f       	adc	r31, r25
    1452:	01 90       	ld	r0, Z+
    1454:	f0 81       	ld	r31, Z
    1456:	e0 2d       	mov	r30, r0
    1458:	01 90       	ld	r0, Z+
    145a:	f0 81       	ld	r31, Z
    145c:	e0 2d       	mov	r30, r0
    145e:	09 95       	icall
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	08 95       	ret

00001468 <udc_get_interface_desc>:
    1468:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udc_ptr_iface>
    146c:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    1470:	08 95       	ret

00001472 <udc_start>:
    1472:	f9 c6       	rjmp	.+3570   	; 0x2266 <udd_enable>
    1474:	08 95       	ret

00001476 <udc_reset>:
    1476:	cf 93       	push	r28
    1478:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    147c:	88 23       	and	r24, r24
    147e:	c1 f0       	breq	.+48     	; 0x14b0 <udc_reset+0x3a>
    1480:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1484:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1488:	01 90       	ld	r0, Z+
    148a:	f0 81       	ld	r31, Z
    148c:	e0 2d       	mov	r30, r0
    148e:	84 81       	ldd	r24, Z+4	; 0x04
    1490:	88 23       	and	r24, r24
    1492:	71 f0       	breq	.+28     	; 0x14b0 <udc_reset+0x3a>
    1494:	c0 e0       	ldi	r28, 0x00	; 0
    1496:	8c 2f       	mov	r24, r28
    1498:	73 df       	rcall	.-282    	; 0x1380 <udc_iface_disable>
    149a:	cf 5f       	subi	r28, 0xFF	; 255
    149c:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    14a0:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    14a4:	01 90       	ld	r0, Z+
    14a6:	f0 81       	ld	r31, Z
    14a8:	e0 2d       	mov	r30, r0
    14aa:	84 81       	ldd	r24, Z+4	; 0x04
    14ac:	c8 17       	cp	r28, r24
    14ae:	98 f3       	brcs	.-26     	; 0x1496 <udc_reset+0x20>
    14b0:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <udc_num_configuration>
    14b4:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_device_status>
    14b8:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <udc_device_status+0x1>
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    14c0:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    14c2:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    14c6:	88 23       	and	r24, r24
    14c8:	49 f1       	breq	.+82     	; 0x151c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14ca:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    14ce:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    14d2:	ed 91       	ld	r30, X+
    14d4:	fc 91       	ld	r31, X
    14d6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14d8:	84 81       	ldd	r24, Z+4	; 0x04
    14da:	88 23       	and	r24, r24
    14dc:	f9 f0       	breq	.+62     	; 0x151c <udc_sof_notify+0x5c>
    14de:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    14e0:	ec 2f       	mov	r30, r28
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	12 96       	adiw	r26, 0x02	; 2
    14ea:	8d 91       	ld	r24, X+
    14ec:	9c 91       	ld	r25, X
    14ee:	13 97       	sbiw	r26, 0x03	; 3
    14f0:	e8 0f       	add	r30, r24
    14f2:	f9 1f       	adc	r31, r25
    14f4:	01 90       	ld	r0, Z+
    14f6:	f0 81       	ld	r31, Z
    14f8:	e0 2d       	mov	r30, r0
    14fa:	00 84       	ldd	r0, Z+8	; 0x08
    14fc:	f1 85       	ldd	r31, Z+9	; 0x09
    14fe:	e0 2d       	mov	r30, r0
    1500:	30 97       	sbiw	r30, 0x00	; 0
    1502:	09 f0       	breq	.+2      	; 0x1506 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1504:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1506:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1508:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    150c:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1510:	ed 91       	ld	r30, X+
    1512:	fc 91       	ld	r31, X
    1514:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1516:	84 81       	ldd	r24, Z+4	; 0x04
    1518:	c8 17       	cp	r28, r24
    151a:	10 f3       	brcs	.-60     	; 0x14e0 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1528:	ea e5       	ldi	r30, 0x5A	; 90
    152a:	f4 e2       	ldi	r31, 0x24	; 36
    152c:	12 86       	std	Z+10, r1	; 0x0a
    152e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1530:	14 86       	std	Z+12, r1	; 0x0c
    1532:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1534:	16 86       	std	Z+14, r1	; 0x0e
    1536:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1538:	80 81       	ld	r24, Z
    153a:	88 23       	and	r24, r24
    153c:	3c f4       	brge	.+14     	; 0x154c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    153e:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1542:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1546:	23 2b       	or	r18, r19
    1548:	09 f4       	brne	.+2      	; 0x154c <udc_process_setup+0x2c>
    154a:	64 c3       	rjmp	.+1736   	; 0x1c14 <udc_process_setup+0x6f4>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    154c:	80 76       	andi	r24, 0x60	; 96
    154e:	80 34       	cpi	r24, 0x40	; 64
    1550:	09 f0       	breq	.+2      	; 0x1554 <udc_process_setup+0x34>
    1552:	02 c1       	rjmp	.+516    	; 0x1758 <udc_process_setup+0x238>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1554:	e0 91 5b 24 	lds	r30, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1558:	8e 2f       	mov	r24, r30
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	e0 5a       	subi	r30, 0xA0	; 160
    1560:	f1 09       	sbc	r31, r1
    1562:	e8 30       	cpi	r30, 0x08	; 8
    1564:	f1 05       	cpc	r31, r1
    1566:	08 f0       	brcs	.+2      	; 0x156a <udc_process_setup+0x4a>
    1568:	ee c0       	rjmp	.+476    	; 0x1746 <udc_process_setup+0x226>
    156a:	ea 5f       	subi	r30, 0xFA	; 250
    156c:	fe 4f       	sbci	r31, 0xFE	; 254
    156e:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    1572:	00 00       	nop
    1574:	53 c3       	rjmp	.+1702   	; 0x1c1c <udc_process_setup+0x6fc>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1576:	e0 e0       	ldi	r30, 0x00	; 0
    1578:	f8 e0       	ldi	r31, 0x08	; 8
    157a:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    157c:	ca e5       	ldi	r28, 0x5A	; 90
    157e:	d4 e2       	ldi	r29, 0x24	; 36
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	9b 81       	ldd	r25, Y+3	; 0x03
    1584:	86 ab       	std	Z+54, r24	; 0x36
    1586:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	8f 70       	andi	r24, 0x0F	; 15
    158c:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    158e:	6e 81       	ldd	r22, Y+6	; 0x06
    1590:	7f 81       	ldd	r23, Y+7	; 0x07
    1592:	8a e5       	ldi	r24, 0x5A	; 90
    1594:	92 e2       	ldi	r25, 0x22	; 34
    1596:	f2 d6       	rcall	.+3556   	; 0x237c <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1598:	8e 81       	ldd	r24, Y+6	; 0x06
    159a:	9f 81       	ldd	r25, Y+7	; 0x07
    159c:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
    15a0:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
    15a4:	82 17       	cp	r24, r18
    15a6:	93 07       	cpc	r25, r19
    15a8:	09 f4       	brne	.+2      	; 0x15ac <udc_process_setup+0x8c>
    15aa:	38 c3       	rjmp	.+1648   	; 0x1c1c <udc_process_setup+0x6fc>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    15ac:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <dacBuf_len>
    15b0:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <dacBuf_len+0x1>
				switch(global_mode){
    15b4:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    15b8:	8e 2f       	mov	r24, r30
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	88 30       	cpi	r24, 0x08	; 8
    15be:	91 05       	cpc	r25, r1
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <udc_process_setup+0xa4>
    15c2:	c3 c0       	rjmp	.+390    	; 0x174a <udc_process_setup+0x22a>
    15c4:	fc 01       	movw	r30, r24
    15c6:	e2 5f       	subi	r30, 0xF2	; 242
    15c8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ca:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    15ce:	0e 94 a5 02 	call	0x54a	; 0x54a <tiny_dma_set_mode_0>
    15d2:	24 c3       	rjmp	.+1608   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    15d4:	2e d8       	rcall	.-4004   	; 0x632 <tiny_dma_set_mode_1>
    15d6:	22 c3       	rjmp	.+1604   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    15d8:	a5 d8       	rcall	.-3766   	; 0x724 <tiny_dma_set_mode_2>
    15da:	20 c3       	rjmp	.+1600   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    15dc:	45 d9       	rcall	.-3446   	; 0x868 <tiny_dma_set_mode_3>
    15de:	1e c3       	rjmp	.+1596   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    15e0:	d9 d9       	rcall	.-3150   	; 0x994 <tiny_dma_set_mode_4>
    15e2:	1c c3       	rjmp	.+1592   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    15e4:	7a da       	rcall	.-2828   	; 0xada <tiny_dma_set_mode_5>
    15e6:	1a c3       	rjmp	.+1588   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    15e8:	c0 da       	rcall	.-2688   	; 0xb6a <tiny_dma_set_mode_6>
    15ea:	18 c3       	rjmp	.+1584   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    15ec:	35 db       	rcall	.-2454   	; 0xc58 <tiny_dma_set_mode_7>
    15ee:	16 c3       	rjmp	.+1580   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    15f0:	e0 e4       	ldi	r30, 0x40	; 64
    15f2:	f8 e0       	ldi	r31, 0x08	; 8
    15f4:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    15f6:	ca e5       	ldi	r28, 0x5A	; 90
    15f8:	d4 e2       	ldi	r29, 0x24	; 36
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	86 ab       	std	Z+54, r24	; 0x36
    1600:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	8f 70       	andi	r24, 0x0F	; 15
    1606:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    1608:	6e 81       	ldd	r22, Y+6	; 0x06
    160a:	7f 81       	ldd	r23, Y+7	; 0x07
    160c:	8a e6       	ldi	r24, 0x6A	; 106
    160e:	94 e2       	ldi	r25, 0x24	; 36
    1610:	b5 d6       	rcall	.+3434   	; 0x237c <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1612:	8e 81       	ldd	r24, Y+6	; 0x06
    1614:	9f 81       	ldd	r25, Y+7	; 0x07
    1616:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
    161a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
    161e:	82 17       	cp	r24, r18
    1620:	93 07       	cpc	r25, r19
    1622:	09 f4       	brne	.+2      	; 0x1626 <udc_process_setup+0x106>
    1624:	fb c2       	rjmp	.+1526   	; 0x1c1c <udc_process_setup+0x6fc>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1626:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <auxDacBufLen>
    162a:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <auxDacBufLen+0x1>
				switch(global_mode){
    162e:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    1632:	8e 2f       	mov	r24, r30
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	88 30       	cpi	r24, 0x08	; 8
    1638:	91 05       	cpc	r25, r1
    163a:	08 f0       	brcs	.+2      	; 0x163e <udc_process_setup+0x11e>
    163c:	88 c0       	rjmp	.+272    	; 0x174e <udc_process_setup+0x22e>
    163e:	fc 01       	movw	r30, r24
    1640:	ea 5e       	subi	r30, 0xEA	; 234
    1642:	fe 4f       	sbci	r31, 0xFE	; 254
    1644:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1648:	0e 94 a5 02 	call	0x54a	; 0x54a <tiny_dma_set_mode_0>
    164c:	e7 c2       	rjmp	.+1486   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 1:
					tiny_dma_set_mode_1();
    164e:	0e 94 19 03 	call	0x632	; 0x632 <tiny_dma_set_mode_1>
    1652:	e4 c2       	rjmp	.+1480   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1654:	67 d8       	rcall	.-3890   	; 0x724 <tiny_dma_set_mode_2>
    1656:	e2 c2       	rjmp	.+1476   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1658:	07 d9       	rcall	.-3570   	; 0x868 <tiny_dma_set_mode_3>
    165a:	e0 c2       	rjmp	.+1472   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 4:
					tiny_dma_set_mode_4();
    165c:	9b d9       	rcall	.-3274   	; 0x994 <tiny_dma_set_mode_4>
    165e:	de c2       	rjmp	.+1468   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1660:	3c da       	rcall	.-2952   	; 0xada <tiny_dma_set_mode_5>
    1662:	dc c2       	rjmp	.+1464   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1664:	82 da       	rcall	.-2812   	; 0xb6a <tiny_dma_set_mode_6>
    1666:	da c2       	rjmp	.+1460   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1668:	f7 da       	rcall	.-2578   	; 0xc58 <tiny_dma_set_mode_7>
    166a:	d8 c2       	rjmp	.+1456   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    166c:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1670:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1674:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1678:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
    167c:	cf c2       	rjmp	.+1438   	; 0x1c1c <udc_process_setup+0x6fc>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    167e:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1682:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1686:	ca c2       	rjmp	.+1428   	; 0x1c1c <udc_process_setup+0x6fc>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1688:	e0 91 5c 24 	lds	r30, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    168c:	f0 91 5d 24 	lds	r31, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1690:	e8 30       	cpi	r30, 0x08	; 8
    1692:	f1 05       	cpc	r31, r1
    1694:	08 f0       	brcs	.+2      	; 0x1698 <udc_process_setup+0x178>
    1696:	5d c0       	rjmp	.+186    	; 0x1752 <udc_process_setup+0x232>
    1698:	e2 5e       	subi	r30, 0xE2	; 226
    169a:	fe 4f       	sbci	r31, 0xFE	; 254
    169c:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16a8:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    16ac:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    16b0:	0e 94 a5 02 	call	0x54a	; 0x54a <tiny_dma_set_mode_0>
    16b4:	b3 c2       	rjmp	.+1382   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16be:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    16c2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    16c6:	0e 94 19 03 	call	0x632	; 0x632 <tiny_dma_set_mode_1>
    16ca:	a8 c2       	rjmp	.+1360   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16d4:	ca e5       	ldi	r28, 0x5A	; 90
    16d6:	d4 e2       	ldi	r29, 0x24	; 36
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	0e 94 0e 02 	call	0x41c	; 0x41c <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    16e4:	1f d8       	rcall	.-4034   	; 0x724 <tiny_dma_set_mode_2>
    16e6:	9a c2       	rjmp	.+1332   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    16e8:	bf d8       	rcall	.-3714   	; 0x868 <tiny_dma_set_mode_3>
    16ea:	98 c2       	rjmp	.+1328   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    16ec:	53 d9       	rcall	.-3418   	; 0x994 <tiny_dma_set_mode_4>
    16ee:	96 c2       	rjmp	.+1324   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    16f8:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    16fc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    1700:	ec d9       	rcall	.-3112   	; 0xada <tiny_dma_set_mode_5>
    1702:	8c c2       	rjmp	.+1304   	; 0x1c1c <udc_process_setup+0x6fc>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    170c:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1710:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    1714:	2a da       	rcall	.-2988   	; 0xb6a <tiny_dma_set_mode_6>
    1716:	82 c2       	rjmp	.+1284   	; 0x1c1c <udc_process_setup+0x6fc>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1720:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1724:	80 68       	ori	r24, 0x80	; 128
    1726:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    172a:	96 da       	rcall	.-2772   	; 0xc58 <tiny_dma_set_mode_7>
    172c:	77 c2       	rjmp	.+1262   	; 0x1c1c <udc_process_setup+0x6fc>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    172e:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1732:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1736:	72 c2       	rjmp	.+1252   	; 0x1c1c <udc_process_setup+0x6fc>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1738:	e9 e7       	ldi	r30, 0x79	; 121
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	88 ed       	ldi	r24, 0xD8	; 216
    1740:	f8 94       	cli
    1742:	84 bf       	out	0x34, r24	; 52
    1744:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <udc_process_setup+0x234>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <udc_process_setup+0x234>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <udc_process_setup+0x234>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1752:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1754:	81 11       	cpse	r24, r1
    1756:	65 c2       	rjmp	.+1226   	; 0x1c22 <udc_process_setup+0x702>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1758:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    175c:	98 2f       	mov	r25, r24
    175e:	90 76       	andi	r25, 0x60	; 96
    1760:	09 f0       	breq	.+2      	; 0x1764 <udc_process_setup+0x244>
    1762:	e1 c1       	rjmp	.+962    	; 0x1b26 <udc_process_setup+0x606>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1764:	88 23       	and	r24, r24
    1766:	0c f0       	brlt	.+2      	; 0x176a <udc_process_setup+0x24a>
    1768:	05 c1       	rjmp	.+522    	; 0x1974 <udc_process_setup+0x454>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    176a:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    176e:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1772:	21 15       	cp	r18, r1
    1774:	31 05       	cpc	r19, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <udc_process_setup+0x25a>
    1778:	d6 c1       	rjmp	.+940    	; 0x1b26 <udc_process_setup+0x606>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    177a:	8f 71       	andi	r24, 0x1F	; 31
    177c:	09 f0       	breq	.+2      	; 0x1780 <udc_process_setup+0x260>
    177e:	a3 c0       	rjmp	.+326    	; 0x18c6 <udc_process_setup+0x3a6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1780:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1784:	96 30       	cpi	r25, 0x06	; 6
    1786:	79 f0       	breq	.+30     	; 0x17a6 <udc_process_setup+0x286>
    1788:	98 30       	cpi	r25, 0x08	; 8
    178a:	09 f4       	brne	.+2      	; 0x178e <udc_process_setup+0x26e>
    178c:	92 c0       	rjmp	.+292    	; 0x18b2 <udc_process_setup+0x392>
    178e:	91 11       	cpse	r25, r1
    1790:	9a c0       	rjmp	.+308    	; 0x18c6 <udc_process_setup+0x3a6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	09 f0       	breq	.+2      	; 0x179a <udc_process_setup+0x27a>
    1798:	c6 c1       	rjmp	.+908    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    179a:	62 e0       	ldi	r22, 0x02	; 2
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	82 ec       	ldi	r24, 0xC2	; 194
    17a0:	90 e2       	ldi	r25, 0x20	; 32
    17a2:	ec d5       	rcall	.+3032   	; 0x237c <udd_set_setup_payload>
    17a4:	3d c2       	rjmp	.+1146   	; 0x1c20 <udc_process_setup+0x700>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    17a6:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    17aa:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    17ae:	29 2f       	mov	r18, r25
    17b0:	33 27       	eor	r19, r19
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	a9 f0       	breq	.+42     	; 0x17e2 <udc_process_setup+0x2c2>
    17b8:	24 f4       	brge	.+8      	; 0x17c2 <udc_process_setup+0x2a2>
    17ba:	21 30       	cpi	r18, 0x01	; 1
    17bc:	31 05       	cpc	r19, r1
    17be:	41 f0       	breq	.+16     	; 0x17d0 <udc_process_setup+0x2b0>
    17c0:	a9 c1       	rjmp	.+850    	; 0x1b14 <udc_process_setup+0x5f4>
    17c2:	23 30       	cpi	r18, 0x03	; 3
    17c4:	31 05       	cpc	r19, r1
    17c6:	d9 f1       	breq	.+118    	; 0x183e <udc_process_setup+0x31e>
    17c8:	2f 30       	cpi	r18, 0x0F	; 15
    17ca:	31 05       	cpc	r19, r1
    17cc:	51 f1       	breq	.+84     	; 0x1822 <udc_process_setup+0x302>
    17ce:	a2 c1       	rjmp	.+836    	; 0x1b14 <udc_process_setup+0x5f4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    17d0:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <udc_config>
    17d4:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    17d8:	dc 01       	movw	r26, r24
    17da:	6c 91       	ld	r22, X
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	ce d5       	rcall	.+2972   	; 0x237c <udd_set_setup_payload>
    17e0:	59 c0       	rjmp	.+178    	; 0x1894 <udc_process_setup+0x374>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    17e2:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    17e6:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
    17ea:	21 89       	ldd	r18, Z+17	; 0x11
    17ec:	82 17       	cp	r24, r18
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <udc_process_setup+0x2d2>
    17f0:	9a c1       	rjmp	.+820    	; 0x1b26 <udc_process_setup+0x606>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    17f2:	99 27       	eor	r25, r25
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    1800:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    1804:	e8 0f       	add	r30, r24
    1806:	f9 1f       	adc	r31, r25
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    180c:	fc 01       	movw	r30, r24
    180e:	62 81       	ldd	r22, Z+2	; 0x02
    1810:	73 81       	ldd	r23, Z+3	; 0x03
    1812:	b4 d5       	rcall	.+2920   	; 0x237c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1814:	e0 91 62 24 	lds	r30, 0x2462	; 0x802462 <udd_g_ctrlreq+0x8>
    1818:	f0 91 63 24 	lds	r31, 0x2463	; 0x802463 <udd_g_ctrlreq+0x9>
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	81 83       	std	Z+1, r24	; 0x01
    1820:	39 c0       	rjmp	.+114    	; 0x1894 <udc_process_setup+0x374>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1822:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config+0x4>
    1826:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x5>
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	09 f4       	brne	.+2      	; 0x1830 <udc_process_setup+0x310>
    182e:	7b c1       	rjmp	.+758    	; 0x1b26 <udc_process_setup+0x606>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1830:	dc 01       	movw	r26, r24
    1832:	12 96       	adiw	r26, 0x02	; 2
    1834:	6d 91       	ld	r22, X+
    1836:	7c 91       	ld	r23, X
    1838:	13 97       	sbiw	r26, 0x03	; 3
    183a:	a0 d5       	rcall	.+2880   	; 0x237c <udd_set_setup_payload>
    183c:	2b c0       	rjmp	.+86     	; 0x1894 <udc_process_setup+0x374>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    183e:	99 27       	eor	r25, r25
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	71 f0       	breq	.+28     	; 0x1862 <udc_process_setup+0x342>
    1846:	38 f0       	brcs	.+14     	; 0x1856 <udc_process_setup+0x336>
    1848:	02 97       	sbiw	r24, 0x02	; 2
    184a:	09 f0       	breq	.+2      	; 0x184e <udc_process_setup+0x32e>
    184c:	6c c1       	rjmp	.+728    	; 0x1b26 <udc_process_setup+0x606>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    184e:	8a e8       	ldi	r24, 0x8A	; 138
    1850:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1852:	28 e1       	ldi	r18, 0x18	; 24
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <udc_process_setup+0x348>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1856:	64 e0       	ldi	r22, 0x04	; 4
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	8e ea       	ldi	r24, 0xAE	; 174
    185c:	90 e2       	ldi	r25, 0x20	; 32
    185e:	8e d5       	rcall	.+2844   	; 0x237c <udd_set_setup_payload>
    1860:	19 c0       	rjmp	.+50     	; 0x1894 <udc_process_setup+0x374>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1862:	83 ea       	ldi	r24, 0xA3	; 163
    1864:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1866:	29 e0       	ldi	r18, 0x09	; 9
    1868:	38 2f       	mov	r19, r24
    186a:	aa e5       	ldi	r26, 0x5A	; 90
    186c:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    186e:	e8 2f       	mov	r30, r24
    1870:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1872:	81 91       	ld	r24, Z+
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	8d 93       	st	X+, r24
    1878:	9d 93       	st	X+, r25
    187a:	8e 2f       	mov	r24, r30
    187c:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    187e:	82 17       	cp	r24, r18
    1880:	c0 f3       	brcs	.-16     	; 0x1872 <udc_process_setup+0x352>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1882:	62 2f       	mov	r22, r18
    1884:	66 0f       	add	r22, r22
    1886:	6e 5f       	subi	r22, 0xFE	; 254
    1888:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	88 e5       	ldi	r24, 0x58	; 88
    1890:	90 e2       	ldi	r25, 0x20	; 32
    1892:	74 d5       	rcall	.+2792   	; 0x237c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1894:	ea e5       	ldi	r30, 0x5A	; 90
    1896:	f4 e2       	ldi	r31, 0x24	; 36
    1898:	86 81       	ldd	r24, Z+6	; 0x06
    189a:	97 81       	ldd	r25, Z+7	; 0x07
    189c:	22 85       	ldd	r18, Z+10	; 0x0a
    189e:	33 85       	ldd	r19, Z+11	; 0x0b
    18a0:	82 17       	cp	r24, r18
    18a2:	93 07       	cpc	r25, r19
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <udc_process_setup+0x388>
    18a6:	bc c1       	rjmp	.+888    	; 0x1c20 <udc_process_setup+0x700>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    18a8:	80 93 64 24 	sts	0x2464, r24	; 0x802464 <udd_g_ctrlreq+0xa>
    18ac:	90 93 65 24 	sts	0x2465, r25	; 0x802465 <udd_g_ctrlreq+0xb>
    18b0:	b7 c1       	rjmp	.+878    	; 0x1c20 <udc_process_setup+0x700>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    18b2:	21 30       	cpi	r18, 0x01	; 1
    18b4:	31 05       	cpc	r19, r1
    18b6:	09 f0       	breq	.+2      	; 0x18ba <udc_process_setup+0x39a>
    18b8:	36 c1       	rjmp	.+620    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	8e eb       	ldi	r24, 0xBE	; 190
    18c0:	90 e2       	ldi	r25, 0x20	; 32
    18c2:	5c d5       	rcall	.+2744   	; 0x237c <udd_set_setup_payload>
    18c4:	ad c1       	rjmp	.+858    	; 0x1c20 <udc_process_setup+0x700>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	e1 f5       	brne	.+120    	; 0x1942 <udc_process_setup+0x422>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18ca:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    18ce:	9a 30       	cpi	r25, 0x0A	; 10
    18d0:	c1 f5       	brne	.+112    	; 0x1942 <udc_process_setup+0x422>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    18d2:	21 30       	cpi	r18, 0x01	; 1
    18d4:	31 05       	cpc	r19, r1
    18d6:	09 f0       	breq	.+2      	; 0x18da <udc_process_setup+0x3ba>
    18d8:	26 c1       	rjmp	.+588    	; 0x1b26 <udc_process_setup+0x606>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18da:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    18de:	88 23       	and	r24, r24
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <udc_process_setup+0x3c4>
    18e2:	21 c1       	rjmp	.+578    	; 0x1b26 <udc_process_setup+0x606>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18e4:	c0 91 5e 24 	lds	r28, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    18e8:	d0 91 5f 24 	lds	r29, 0x245F	; 0x80245f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18ec:	00 91 bc 20 	lds	r16, 0x20BC	; 0x8020bc <udc_ptr_conf>
    18f0:	10 91 bd 20 	lds	r17, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    18f4:	d8 01       	movw	r26, r16
    18f6:	ed 91       	ld	r30, X+
    18f8:	fc 91       	ld	r31, X
    18fa:	84 81       	ldd	r24, Z+4	; 0x04
    18fc:	c8 17       	cp	r28, r24
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <udc_process_setup+0x3e2>
    1900:	12 c1       	rjmp	.+548    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	8c 2f       	mov	r24, r28
    1906:	02 dd       	rcall	.-1532   	; 0x130c <udc_update_iface_desc>
    1908:	88 23       	and	r24, r24
    190a:	09 f4       	brne	.+2      	; 0x190e <udc_process_setup+0x3ee>
    190c:	0c c1       	rjmp	.+536    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    190e:	ce 01       	movw	r24, r28
    1910:	99 27       	eor	r25, r25
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	d8 01       	movw	r26, r16
    1918:	12 96       	adiw	r26, 0x02	; 2
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	13 97       	sbiw	r26, 0x03	; 3
    1920:	e8 0f       	add	r30, r24
    1922:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1924:	01 90       	ld	r0, Z+
    1926:	f0 81       	ld	r31, Z
    1928:	e0 2d       	mov	r30, r0
    192a:	86 81       	ldd	r24, Z+6	; 0x06
    192c:	97 81       	ldd	r25, Z+7	; 0x07
    192e:	fc 01       	movw	r30, r24
    1930:	09 95       	icall
    1932:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	80 ec       	ldi	r24, 0xC0	; 192
    193c:	90 e2       	ldi	r25, 0x20	; 32
    193e:	1e d5       	rcall	.+2620   	; 0x237c <udd_set_setup_payload>
    1940:	6f c1       	rjmp	.+734    	; 0x1c20 <udc_process_setup+0x700>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1942:	82 30       	cpi	r24, 0x02	; 2
    1944:	09 f0       	breq	.+2      	; 0x1948 <udc_process_setup+0x428>
    1946:	ef c0       	rjmp	.+478    	; 0x1b26 <udc_process_setup+0x606>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1948:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    194c:	81 11       	cpse	r24, r1
    194e:	e4 c0       	rjmp	.+456    	; 0x1b18 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	09 f0       	breq	.+2      	; 0x1958 <udc_process_setup+0x438>
    1956:	e7 c0       	rjmp	.+462    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1958:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    195c:	8b d5       	rcall	.+2838   	; 0x2474 <udd_ep_is_halted>
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <udc_ep_status.5522>
    1964:	90 93 b9 20 	sts	0x20B9, r25	; 0x8020b9 <udc_ep_status.5522+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1968:	62 e0       	ldi	r22, 0x02	; 2
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	88 eb       	ldi	r24, 0xB8	; 184
    196e:	90 e2       	ldi	r25, 0x20	; 32
    1970:	05 d5       	rcall	.+2570   	; 0x237c <udd_set_setup_payload>
    1972:	56 c1       	rjmp	.+684    	; 0x1c20 <udc_process_setup+0x700>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1974:	8f 71       	andi	r24, 0x1F	; 31
    1976:	09 f0       	breq	.+2      	; 0x197a <udc_process_setup+0x45a>
    1978:	83 c0       	rjmp	.+262    	; 0x1a80 <udc_process_setup+0x560>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    197a:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    197e:	93 30       	cpi	r25, 0x03	; 3
    1980:	09 f4       	brne	.+2      	; 0x1984 <udc_process_setup+0x464>
    1982:	cc c0       	rjmp	.+408    	; 0x1b1c <udc_process_setup+0x5fc>
    1984:	18 f4       	brcc	.+6      	; 0x198c <udc_process_setup+0x46c>
    1986:	91 30       	cpi	r25, 0x01	; 1
    1988:	a1 f0       	breq	.+40     	; 0x19b2 <udc_process_setup+0x492>
    198a:	7a c0       	rjmp	.+244    	; 0x1a80 <udc_process_setup+0x560>
    198c:	95 30       	cpi	r25, 0x05	; 5
    198e:	19 f0       	breq	.+6      	; 0x1996 <udc_process_setup+0x476>
    1990:	99 30       	cpi	r25, 0x09	; 9
    1992:	39 f1       	breq	.+78     	; 0x19e2 <udc_process_setup+0x4c2>
    1994:	75 c0       	rjmp	.+234    	; 0x1a80 <udc_process_setup+0x560>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1996:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    199a:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    199e:	89 2b       	or	r24, r25
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <udc_process_setup+0x484>
    19a2:	c1 c0       	rjmp	.+386    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    19a4:	80 e8       	ldi	r24, 0x80	; 128
    19a6:	99 e0       	ldi	r25, 0x09	; 9
    19a8:	80 93 66 24 	sts	0x2466, r24	; 0x802466 <udd_g_ctrlreq+0xc>
    19ac:	90 93 67 24 	sts	0x2467, r25	; 0x802467 <udd_g_ctrlreq+0xd>
    19b0:	37 c1       	rjmp	.+622    	; 0x1c20 <udc_process_setup+0x700>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19b2:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    19b6:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    19ba:	89 2b       	or	r24, r25
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <udc_process_setup+0x4a0>
    19be:	b3 c0       	rjmp	.+358    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    19c0:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    19c4:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	09 f0       	breq	.+2      	; 0x19ce <udc_process_setup+0x4ae>
    19cc:	ac c0       	rjmp	.+344    	; 0x1b26 <udc_process_setup+0x606>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    19ce:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_device_status>
    19d2:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <udc_device_status+0x1>
    19d6:	8d 7f       	andi	r24, 0xFD	; 253
    19d8:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_device_status>
    19dc:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <udc_device_status+0x1>
    19e0:	1f c1       	rjmp	.+574    	; 0x1c20 <udc_process_setup+0x700>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    19e2:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    19e6:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    19ea:	89 2b       	or	r24, r25
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <udc_process_setup+0x4d0>
    19ee:	9b c0       	rjmp	.+310    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    19f0:	c2 d4       	rcall	.+2436   	; 0x2376 <udd_getaddress>
    19f2:	88 23       	and	r24, r24
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <udc_process_setup+0x4d8>
    19f6:	97 c0       	rjmp	.+302    	; 0x1b26 <udc_process_setup+0x606>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    19f8:	20 91 5c 24 	lds	r18, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    19fc:	30 91 5d 24 	lds	r19, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1a00:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a02:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    1a06:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a0a:	81 89       	ldd	r24, Z+17	; 0x11
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	82 17       	cp	r24, r18
    1a10:	93 07       	cpc	r25, r19
    1a12:	08 f4       	brcc	.+2      	; 0x1a16 <udc_process_setup+0x4f6>
    1a14:	88 c0       	rjmp	.+272    	; 0x1b26 <udc_process_setup+0x606>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1a16:	2f dd       	rcall	.-1442   	; 0x1476 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1a18:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1a1c:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1a20:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1a24:	88 23       	and	r24, r24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <udc_process_setup+0x50a>
    1a28:	fb c0       	rjmp	.+502    	; 0x1c20 <udc_process_setup+0x700>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1a2a:	99 27       	eor	r25, r25
    1a2c:	81 50       	subi	r24, 0x01	; 1
    1a2e:	90 4c       	sbci	r25, 0xC0	; 192
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    1a3c:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    1a40:	e8 0f       	add	r30, r24
    1a42:	f9 1f       	adc	r31, r25
    1a44:	e0 93 bc 20 	sts	0x20BC, r30	; 0x8020bc <udc_ptr_conf>
    1a48:	f0 93 bd 20 	sts	0x20BD, r31	; 0x8020bd <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a4c:	01 90       	ld	r0, Z+
    1a4e:	f0 81       	ld	r31, Z
    1a50:	e0 2d       	mov	r30, r0
    1a52:	84 81       	ldd	r24, Z+4	; 0x04
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <udc_process_setup+0x53a>
    1a58:	e3 c0       	rjmp	.+454    	; 0x1c20 <udc_process_setup+0x700>
    1a5a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	8c 2f       	mov	r24, r28
    1a60:	d1 dc       	rcall	.-1630   	; 0x1404 <udc_iface_enable>
    1a62:	88 23       	and	r24, r24
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <udc_process_setup+0x548>
    1a66:	5f c0       	rjmp	.+190    	; 0x1b26 <udc_process_setup+0x606>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a68:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a6a:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1a6e:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1a72:	01 90       	ld	r0, Z+
    1a74:	f0 81       	ld	r31, Z
    1a76:	e0 2d       	mov	r30, r0
    1a78:	84 81       	ldd	r24, Z+4	; 0x04
    1a7a:	c8 17       	cp	r28, r24
    1a7c:	78 f3       	brcs	.-34     	; 0x1a5c <udc_process_setup+0x53c>
    1a7e:	d0 c0       	rjmp	.+416    	; 0x1c20 <udc_process_setup+0x700>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	e1 f4       	brne	.+56     	; 0x1abc <udc_process_setup+0x59c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a84:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1a88:	9b 30       	cpi	r25, 0x0B	; 11
    1a8a:	c1 f4       	brne	.+48     	; 0x1abc <udc_process_setup+0x59c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1a8c:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1a90:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1a94:	89 2b       	or	r24, r25
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <udc_process_setup+0x57a>
    1a98:	46 c0       	rjmp	.+140    	; 0x1b26 <udc_process_setup+0x606>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a9a:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1a9e:	88 23       	and	r24, r24
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <udc_process_setup+0x584>
    1aa2:	41 c0       	rjmp	.+130    	; 0x1b26 <udc_process_setup+0x606>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1aa4:	ea e5       	ldi	r30, 0x5A	; 90
    1aa6:	f4 e2       	ldi	r31, 0x24	; 36
    1aa8:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1aaa:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1aac:	8c 2f       	mov	r24, r28
    1aae:	68 dc       	rcall	.-1840   	; 0x1380 <udc_iface_disable>
    1ab0:	88 23       	and	r24, r24
    1ab2:	c9 f1       	breq	.+114    	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1ab4:	6d 2f       	mov	r22, r29
    1ab6:	8c 2f       	mov	r24, r28
    1ab8:	a5 dc       	rcall	.-1718   	; 0x1404 <udc_iface_enable>
    1aba:	33 c0       	rjmp	.+102    	; 0x1b22 <udc_process_setup+0x602>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	99 f5       	brne	.+102    	; 0x1b26 <udc_process_setup+0x606>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ac0:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <udc_process_setup+0x5ae>
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	89 f0       	breq	.+34     	; 0x1aee <udc_process_setup+0x5ce>
    1acc:	29 c0       	rjmp	.+82     	; 0x1b20 <udc_process_setup+0x600>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ace:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1ad2:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1ad6:	89 2b       	or	r24, r25
    1ad8:	31 f5       	brne	.+76     	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1ada:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1ade:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1ae2:	89 2b       	or	r24, r25
    1ae4:	01 f5       	brne	.+64     	; 0x1b26 <udc_process_setup+0x606>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ae6:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1aea:	df d4       	rcall	.+2494   	; 0x24aa <udd_ep_clear_halt>
    1aec:	1a c0       	rjmp	.+52     	; 0x1b22 <udc_process_setup+0x602>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1aee:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1af2:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1af6:	89 2b       	or	r24, r25
    1af8:	b1 f4       	brne	.+44     	; 0x1b26 <udc_process_setup+0x606>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1afa:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1afe:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1b02:	89 2b       	or	r24, r25
    1b04:	81 f4       	brne	.+32     	; 0x1b26 <udc_process_setup+0x606>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b06:	ca e5       	ldi	r28, 0x5A	; 90
    1b08:	d4 e2       	ldi	r29, 0x24	; 36
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	bd d5       	rcall	.+2938   	; 0x2688 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	20 d6       	rcall	.+3136   	; 0x2752 <udd_ep_set_halt>
    1b12:	07 c0       	rjmp	.+14     	; 0x1b22 <udc_process_setup+0x602>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <udc_process_setup+0x602>
				break;
			}
		}
#endif
	}
	return false;
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <udc_process_setup+0x602>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <udc_process_setup+0x602>
				break;
			}
		}
#endif
	}
	return false;
    1b20:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1b22:	81 11       	cpse	r24, r1
    1b24:	7e c0       	rjmp	.+252    	; 0x1c22 <udc_process_setup+0x702>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1b26:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    1b2a:	8f 71       	andi	r24, 0x1F	; 31
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	71 f5       	brne	.+92     	; 0x1b8c <udc_process_setup+0x66c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b30:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1b34:	88 23       	and	r24, r24
    1b36:	51 f1       	breq	.+84     	; 0x1b8c <udc_process_setup+0x66c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b38:	00 91 5e 24 	lds	r16, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1b3c:	10 91 5f 24 	lds	r17, 0x245F	; 0x80245f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b40:	c0 91 bc 20 	lds	r28, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1b44:	d0 91 bd 20 	lds	r29, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1b48:	e8 81       	ld	r30, Y
    1b4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b4c:	84 81       	ldd	r24, Z+4	; 0x04
    1b4e:	08 17       	cp	r16, r24
    1b50:	e8 f4       	brcc	.+58     	; 0x1b8c <udc_process_setup+0x66c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	80 2f       	mov	r24, r16
    1b56:	da db       	rcall	.-2124   	; 0x130c <udc_update_iface_desc>
    1b58:	88 23       	and	r24, r24
    1b5a:	c1 f0       	breq	.+48     	; 0x1b8c <udc_process_setup+0x66c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	ff 27       	eor	r31, r31
    1b60:	cf 01       	movw	r24, r30
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	ea 81       	ldd	r30, Y+2	; 0x02
    1b68:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6a:	e8 0f       	add	r30, r24
    1b6c:	f9 1f       	adc	r31, r25
    1b6e:	c0 81       	ld	r28, Z
    1b70:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b72:	ee 81       	ldd	r30, Y+6	; 0x06
    1b74:	ff 81       	ldd	r31, Y+7	; 0x07
    1b76:	09 95       	icall
    1b78:	68 2f       	mov	r22, r24
    1b7a:	80 2f       	mov	r24, r16
    1b7c:	c7 db       	rcall	.-2162   	; 0x130c <udc_update_iface_desc>
    1b7e:	88 23       	and	r24, r24
    1b80:	29 f0       	breq	.+10     	; 0x1b8c <udc_process_setup+0x66c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1b82:	ec 81       	ldd	r30, Y+4	; 0x04
    1b84:	fd 81       	ldd	r31, Y+5	; 0x05
    1b86:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1b88:	81 11       	cpse	r24, r1
    1b8a:	4b c0       	rjmp	.+150    	; 0x1c22 <udc_process_setup+0x702>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1b8c:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    1b90:	8f 71       	andi	r24, 0x1F	; 31
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <udc_process_setup+0x678>
    1b96:	40 c0       	rjmp	.+128    	; 0x1c18 <udc_process_setup+0x6f8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b98:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1b9c:	88 23       	and	r24, r24
    1b9e:	b1 f1       	breq	.+108    	; 0x1c0c <udc_process_setup+0x6ec>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ba0:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1ba4:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1ba8:	ed 91       	ld	r30, X+
    1baa:	fc 91       	ld	r31, X
    1bac:	11 97       	sbiw	r26, 0x01	; 1
    1bae:	84 81       	ldd	r24, Z+4	; 0x04
    1bb0:	88 23       	and	r24, r24
    1bb2:	71 f1       	breq	.+92     	; 0x1c10 <udc_process_setup+0x6f0>
    1bb4:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bb6:	ec 2f       	mov	r30, r28
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	12 96       	adiw	r26, 0x02	; 2
    1bc0:	8d 91       	ld	r24, X+
    1bc2:	9c 91       	ld	r25, X
    1bc4:	13 97       	sbiw	r26, 0x03	; 3
    1bc6:	e8 0f       	add	r30, r24
    1bc8:	f9 1f       	adc	r31, r25
    1bca:	00 81       	ld	r16, Z
    1bcc:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bce:	d8 01       	movw	r26, r16
    1bd0:	16 96       	adiw	r26, 0x06	; 6
    1bd2:	ed 91       	ld	r30, X+
    1bd4:	fc 91       	ld	r31, X
    1bd6:	17 97       	sbiw	r26, 0x07	; 7
    1bd8:	09 95       	icall
    1bda:	68 2f       	mov	r22, r24
    1bdc:	8c 2f       	mov	r24, r28
    1bde:	96 db       	rcall	.-2260   	; 0x130c <udc_update_iface_desc>
    1be0:	88 23       	and	r24, r24
    1be2:	f9 f0       	breq	.+62     	; 0x1c22 <udc_process_setup+0x702>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1be4:	d8 01       	movw	r26, r16
    1be6:	14 96       	adiw	r26, 0x04	; 4
    1be8:	ed 91       	ld	r30, X+
    1bea:	fc 91       	ld	r31, X
    1bec:	15 97       	sbiw	r26, 0x05	; 5
    1bee:	09 95       	icall
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	17 c0       	rjmp	.+46     	; 0x1c22 <udc_process_setup+0x702>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1bf4:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bf6:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1bfa:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1bfe:	ed 91       	ld	r30, X+
    1c00:	fc 91       	ld	r31, X
    1c02:	11 97       	sbiw	r26, 0x01	; 1
    1c04:	94 81       	ldd	r25, Z+4	; 0x04
    1c06:	c9 17       	cp	r28, r25
    1c08:	b0 f2       	brcs	.-84     	; 0x1bb6 <udc_process_setup+0x696>
    1c0a:	0b c0       	rjmp	.+22     	; 0x1c22 <udc_process_setup+0x702>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	09 c0       	rjmp	.+18     	; 0x1c22 <udc_process_setup+0x702>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <udc_process_setup+0x702>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <udc_process_setup+0x702>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <udc_process_setup+0x702>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <udc_process_setup+0x702>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1c2c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1c2e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1c30:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1c32:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1c34:	60 83       	st	Z, r22
	ret                             // Return to caller
    1c36:	08 95       	ret

00001c38 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1c38:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1c3c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1c3e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1c40:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1c44:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1c46:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1c4a:	08 95       	ret

00001c4c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	22 c0       	rjmp	.+68     	; 0x1c94 <udd_sleep_mode+0x48>
    1c50:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_b_idle>
    1c54:	99 23       	and	r25, r25
    1c56:	d9 f0       	breq	.+54     	; 0x1c8e <udd_sleep_mode+0x42>
    1c58:	90 91 47 2c 	lds	r25, 0x2C47	; 0x802c47 <sleepmgr_locks+0x1>
    1c5c:	91 11       	cpse	r25, r1
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <udd_sleep_mode+0x16>
    1c60:	ff cf       	rjmp	.-2      	; 0x1c60 <udd_sleep_mode+0x14>
    1c62:	2f b7       	in	r18, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	e6 e4       	ldi	r30, 0x46	; 70
    1c68:	fc e2       	ldi	r31, 0x2C	; 44
    1c6a:	91 81       	ldd	r25, Z+1	; 0x01
    1c6c:	91 50       	subi	r25, 0x01	; 1
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	2f bf       	out	0x3f, r18	; 63
    1c72:	0d c0       	rjmp	.+26     	; 0x1c8e <udd_sleep_mode+0x42>
    1c74:	90 91 47 2c 	lds	r25, 0x2C47	; 0x802c47 <sleepmgr_locks+0x1>
    1c78:	9f 3f       	cpi	r25, 0xFF	; 255
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <udd_sleep_mode+0x32>
    1c7c:	ff cf       	rjmp	.-2      	; 0x1c7c <udd_sleep_mode+0x30>
    1c7e:	2f b7       	in	r18, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	e6 e4       	ldi	r30, 0x46	; 70
    1c84:	fc e2       	ldi	r31, 0x2C	; 44
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	9f 5f       	subi	r25, 0xFF	; 255
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	2f bf       	out	0x3f, r18	; 63
    1c8e:	80 93 54 22 	sts	0x2254, r24	; 0x802254 <udd_b_idle>
    1c92:	08 95       	ret
    1c94:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_b_idle>
    1c98:	99 23       	and	r25, r25
    1c9a:	61 f3       	breq	.-40     	; 0x1c74 <udd_sleep_mode+0x28>
    1c9c:	f8 cf       	rjmp	.-16     	; 0x1c8e <udd_sleep_mode+0x42>

00001c9e <udd_ctrl_init>:
    1c9e:	0f 93       	push	r16
    1ca0:	e8 ec       	ldi	r30, 0xC8	; 200
    1ca2:	f4 e0       	ldi	r31, 0x04	; 4
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8f 7d       	andi	r24, 0xDF	; 223
    1ca8:	80 83       	st	Z, r24
    1caa:	80 81       	ld	r24, Z
    1cac:	8f 7d       	andi	r24, 0xDF	; 223
    1cae:	80 83       	st	Z, r24
    1cb0:	e8 e1       	ldi	r30, 0x18	; 24
    1cb2:	f2 e2       	ldi	r31, 0x22	; 34
    1cb4:	02 e0       	ldi	r16, 0x02	; 2
    1cb6:	05 93       	las	Z, r16
    1cb8:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udd_sram+0x1a>
    1cbc:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udd_sram+0x1b>
    1cc0:	00 e2       	ldi	r16, 0x20	; 32
    1cc2:	06 93       	lac	Z, r16
    1cc4:	00 e4       	ldi	r16, 0x40	; 64
    1cc6:	06 93       	lac	Z, r16
    1cc8:	e0 e1       	ldi	r30, 0x10	; 16
    1cca:	f2 e2       	ldi	r31, 0x22	; 34
    1ccc:	00 e2       	ldi	r16, 0x20	; 32
    1cce:	06 93       	lac	Z, r16
    1cd0:	00 e4       	ldi	r16, 0x40	; 64
    1cd2:	06 93       	lac	Z, r16
    1cd4:	ea e5       	ldi	r30, 0x5A	; 90
    1cd6:	f4 e2       	ldi	r31, 0x24	; 36
    1cd8:	14 86       	std	Z+12, r1	; 0x0c
    1cda:	15 86       	std	Z+13, r1	; 0x0d
    1cdc:	16 86       	std	Z+14, r1	; 0x0e
    1cde:	17 86       	std	Z+15, r1	; 0x0f
    1ce0:	12 86       	std	Z+10, r1	; 0x0a
    1ce2:	13 86       	std	Z+11, r1	; 0x0b
    1ce4:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ep_control_state>
    1ce8:	0f 91       	pop	r16
    1cea:	08 95       	ret

00001cec <udd_ctrl_stall_data>:
    1cec:	0f 93       	push	r16
    1cee:	85 e0       	ldi	r24, 0x05	; 5
    1cf0:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1cf4:	e9 e1       	ldi	r30, 0x19	; 25
    1cf6:	f2 e2       	ldi	r31, 0x22	; 34
    1cf8:	04 e0       	ldi	r16, 0x04	; 4
    1cfa:	05 93       	las	Z, r16
    1cfc:	e1 e1       	ldi	r30, 0x11	; 17
    1cfe:	f2 e2       	ldi	r31, 0x22	; 34
    1d00:	04 e0       	ldi	r16, 0x04	; 4
    1d02:	05 93       	las	Z, r16
    1d04:	0f 91       	pop	r16
    1d06:	08 95       	ret

00001d08 <udd_ctrl_send_zlp_in>:
    1d08:	0f 93       	push	r16
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1d10:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udd_sram+0x1a>
    1d14:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udd_sram+0x1b>
    1d18:	e8 e1       	ldi	r30, 0x18	; 24
    1d1a:	f2 e2       	ldi	r31, 0x22	; 34
    1d1c:	02 e0       	ldi	r16, 0x02	; 2
    1d1e:	06 93       	lac	Z, r16
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <udd_ctrl_endofrequest>:
    1d24:	e0 91 66 24 	lds	r30, 0x2466	; 0x802466 <udd_g_ctrlreq+0xc>
    1d28:	f0 91 67 24 	lds	r31, 0x2467	; 0x802467 <udd_g_ctrlreq+0xd>
    1d2c:	30 97       	sbiw	r30, 0x00	; 0
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <udd_ctrl_endofrequest+0xe>
    1d30:	09 95       	icall
    1d32:	08 95       	ret

00001d34 <udd_ctrl_in_sent>:
    1d34:	0f 93       	push	r16
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    1d3e:	83 30       	cpi	r24, 0x03	; 3
    1d40:	19 f4       	brne	.+6      	; 0x1d48 <udd_ctrl_in_sent+0x14>
    1d42:	f0 df       	rcall	.-32     	; 0x1d24 <udd_ctrl_endofrequest>
    1d44:	ac df       	rcall	.-168    	; 0x1c9e <udd_ctrl_init>
    1d46:	5e c0       	rjmp	.+188    	; 0x1e04 <udd_ctrl_in_sent+0xd0>
    1d48:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1d4c:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1d50:	c0 91 64 24 	lds	r28, 0x2464	; 0x802464 <udd_g_ctrlreq+0xa>
    1d54:	d0 91 65 24 	lds	r29, 0x2465	; 0x802465 <udd_g_ctrlreq+0xb>
    1d58:	c8 1b       	sub	r28, r24
    1d5a:	d9 0b       	sbc	r29, r25
    1d5c:	71 f5       	brne	.+92     	; 0x1dba <udd_ctrl_in_sent+0x86>
    1d5e:	20 91 fd 21 	lds	r18, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1d62:	30 91 fe 21 	lds	r19, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1d66:	82 0f       	add	r24, r18
    1d68:	93 1f       	adc	r25, r19
    1d6a:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1d6e:	90 93 fe 21 	sts	0x21FE, r25	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1d72:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1d76:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1d7a:	82 17       	cp	r24, r18
    1d7c:	93 07       	cpc	r25, r19
    1d7e:	21 f0       	breq	.+8      	; 0x1d88 <udd_ctrl_in_sent+0x54>
    1d80:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <b_shortpacket.5272>
    1d84:	88 23       	and	r24, r24
    1d86:	41 f0       	breq	.+16     	; 0x1d98 <udd_ctrl_in_sent+0x64>
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1d8e:	e0 e1       	ldi	r30, 0x10	; 16
    1d90:	f2 e2       	ldi	r31, 0x22	; 34
    1d92:	02 e0       	ldi	r16, 0x02	; 2
    1d94:	06 93       	lac	Z, r16
    1d96:	36 c0       	rjmp	.+108    	; 0x1e04 <udd_ctrl_in_sent+0xd0>
    1d98:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <udd_g_ctrlreq+0xe>
    1d9c:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <udd_g_ctrlreq+0xf>
    1da0:	30 97       	sbiw	r30, 0x00	; 0
    1da2:	99 f0       	breq	.+38     	; 0x1dca <udd_ctrl_in_sent+0x96>
    1da4:	09 95       	icall
    1da6:	88 23       	and	r24, r24
    1da8:	81 f0       	breq	.+32     	; 0x1dca <udd_ctrl_in_sent+0x96>
    1daa:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1dae:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1db2:	c0 91 64 24 	lds	r28, 0x2464	; 0x802464 <udd_g_ctrlreq+0xa>
    1db6:	d0 91 65 24 	lds	r29, 0x2465	; 0x802465 <udd_g_ctrlreq+0xb>
    1dba:	c0 34       	cpi	r28, 0x40	; 64
    1dbc:	d1 05       	cpc	r29, r1
    1dbe:	28 f0       	brcs	.+10     	; 0x1dca <udd_ctrl_in_sent+0x96>
    1dc0:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <b_shortpacket.5272>
    1dc4:	c0 e4       	ldi	r28, 0x40	; 64
    1dc6:	d0 e0       	ldi	r29, 0x00	; 0
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <udd_ctrl_in_sent+0x9c>
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <b_shortpacket.5272>
    1dd0:	e0 e0       	ldi	r30, 0x00	; 0
    1dd2:	f2 e2       	ldi	r31, 0x22	; 34
    1dd4:	c2 8f       	std	Z+26, r28	; 0x1a
    1dd6:	d3 8f       	std	Z+27, r29	; 0x1b
    1dd8:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1ddc:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1de0:	20 91 62 24 	lds	r18, 0x2462	; 0x802462 <udd_g_ctrlreq+0x8>
    1de4:	30 91 63 24 	lds	r19, 0x2463	; 0x802463 <udd_g_ctrlreq+0x9>
    1de8:	28 0f       	add	r18, r24
    1dea:	39 1f       	adc	r19, r25
    1dec:	24 8f       	std	Z+28, r18	; 0x1c
    1dee:	35 8f       	std	Z+29, r19	; 0x1d
    1df0:	c8 0f       	add	r28, r24
    1df2:	d9 1f       	adc	r29, r25
    1df4:	c0 93 fb 21 	sts	0x21FB, r28	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1df8:	d0 93 fc 21 	sts	0x21FC, r29	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1dfc:	e8 e1       	ldi	r30, 0x18	; 24
    1dfe:	f2 e2       	ldi	r31, 0x22	; 34
    1e00:	02 e0       	ldi	r16, 0x02	; 2
    1e02:	06 93       	lac	Z, r16
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	0f 91       	pop	r16
    1e0a:	08 95       	ret

00001e0c <udd_ep_get_size>:
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	81 81       	ldd	r24, Z+1	; 0x01
    1e10:	e8 2f       	mov	r30, r24
    1e12:	e7 70       	andi	r30, 0x07	; 7
    1e14:	8e 2f       	mov	r24, r30
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	fc 01       	movw	r30, r24
    1e1a:	31 97       	sbiw	r30, 0x01	; 1
    1e1c:	e7 30       	cpi	r30, 0x07	; 7
    1e1e:	f1 05       	cpc	r31, r1
    1e20:	c0 f4       	brcc	.+48     	; 0x1e52 <udd_ep_get_size+0x46>
    1e22:	ea 5d       	subi	r30, 0xDA	; 218
    1e24:	fe 4f       	sbci	r31, 0xFE	; 254
    1e26:	7a c6       	rjmp	.+3316   	; 0x2b1c <__tablejump2__>
    1e28:	80 e1       	ldi	r24, 0x10	; 16
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	08 95       	ret
    1e2e:	80 e2       	ldi	r24, 0x20	; 32
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	08 95       	ret
    1e34:	80 e4       	ldi	r24, 0x40	; 64
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	08 95       	ret
    1e3a:	80 e8       	ldi	r24, 0x80	; 128
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	08 95       	ret
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	08 95       	ret
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	92 e0       	ldi	r25, 0x02	; 2
    1e4a:	08 95       	ret
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
    1e4e:	93 e0       	ldi	r25, 0x03	; 3
    1e50:	08 95       	ret
    1e52:	88 e0       	ldi	r24, 0x08	; 8
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	08 95       	ret

00001e58 <udd_ep_get_job>:
    1e58:	28 2f       	mov	r18, r24
    1e5a:	2f 70       	andi	r18, 0x0F	; 15
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	22 0f       	add	r18, r18
    1e60:	33 1f       	adc	r19, r19
    1e62:	08 2e       	mov	r0, r24
    1e64:	00 0c       	add	r0, r0
    1e66:	99 0b       	sbc	r25, r25
    1e68:	88 27       	eor	r24, r24
    1e6a:	99 0f       	add	r25, r25
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	99 27       	eor	r25, r25
    1e70:	82 0f       	add	r24, r18
    1e72:	93 1f       	adc	r25, r19
    1e74:	02 97       	sbiw	r24, 0x02	; 2
    1e76:	9c 01       	movw	r18, r24
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	82 0f       	add	r24, r18
    1e86:	93 1f       	adc	r25, r19
    1e88:	8b 57       	subi	r24, 0x7B	; 123
    1e8a:	9e 4d       	sbci	r25, 0xDE	; 222
    1e8c:	08 95       	ret

00001e8e <udd_ctrl_interrupt_tc_setup>:
    1e8e:	0f 93       	push	r16
    1e90:	cf 93       	push	r28
    1e92:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1e96:	80 ff       	sbrs	r24, 0
    1e98:	62 c0       	rjmp	.+196    	; 0x1f5e <udd_ctrl_interrupt_tc_setup+0xd0>
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1ea0:	e0 e1       	ldi	r30, 0x10	; 16
    1ea2:	f2 e2       	ldi	r31, 0x22	; 34
    1ea4:	00 e8       	ldi	r16, 0x80	; 128
    1ea6:	06 93       	lac	Z, r16
    1ea8:	e8 e1       	ldi	r30, 0x18	; 24
    1eaa:	f2 e2       	ldi	r31, 0x22	; 34
    1eac:	00 e8       	ldi	r16, 0x80	; 128
    1eae:	06 93       	lac	Z, r16
    1eb0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1eb4:	e0 e1       	ldi	r30, 0x10	; 16
    1eb6:	f2 e2       	ldi	r31, 0x22	; 34
    1eb8:	00 e1       	ldi	r16, 0x10	; 16
    1eba:	06 93       	lac	Z, r16
    1ebc:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    1ec0:	88 23       	and	r24, r24
    1ec2:	29 f0       	breq	.+10     	; 0x1ece <udd_ctrl_interrupt_tc_setup+0x40>
    1ec4:	83 50       	subi	r24, 0x03	; 3
    1ec6:	82 30       	cpi	r24, 0x02	; 2
    1ec8:	08 f4       	brcc	.+2      	; 0x1ecc <udd_ctrl_interrupt_tc_setup+0x3e>
    1eca:	2c df       	rcall	.-424    	; 0x1d24 <udd_ctrl_endofrequest>
    1ecc:	e8 de       	rcall	.-560    	; 0x1c9e <udd_ctrl_init>
    1ece:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <udd_sram+0x12>
    1ed2:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <udd_sram+0x13>
    1ed6:	08 97       	sbiw	r24, 0x08	; 8
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <udd_ctrl_interrupt_tc_setup+0x4e>
    1eda:	43 c0       	rjmp	.+134    	; 0x1f62 <udd_ctrl_interrupt_tc_setup+0xd4>
    1edc:	88 e0       	ldi	r24, 0x08	; 8
    1ede:	eb eb       	ldi	r30, 0xBB	; 187
    1ee0:	f1 e2       	ldi	r31, 0x21	; 33
    1ee2:	aa e5       	ldi	r26, 0x5A	; 90
    1ee4:	b4 e2       	ldi	r27, 0x24	; 36
    1ee6:	01 90       	ld	r0, Z+
    1ee8:	0d 92       	st	X+, r0
    1eea:	8a 95       	dec	r24
    1eec:	e1 f7       	brne	.-8      	; 0x1ee6 <udd_ctrl_interrupt_tc_setup+0x58>
    1eee:	e8 ec       	ldi	r30, 0xC8	; 200
    1ef0:	f4 e0       	ldi	r31, 0x04	; 4
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 62       	ori	r24, 0x20	; 32
    1ef6:	80 83       	st	Z, r24
    1ef8:	80 81       	ld	r24, Z
    1efa:	80 62       	ori	r24, 0x20	; 32
    1efc:	80 83       	st	Z, r24
    1efe:	10 db       	rcall	.-2528   	; 0x1520 <udc_process_setup>
    1f00:	c8 2f       	mov	r28, r24
    1f02:	81 11       	cpse	r24, r1
    1f04:	03 c0       	rjmp	.+6      	; 0x1f0c <udd_ctrl_interrupt_tc_setup+0x7e>
    1f06:	f2 de       	rcall	.-540    	; 0x1cec <udd_ctrl_stall_data>
    1f08:	c1 e0       	ldi	r28, 0x01	; 1
    1f0a:	2c c0       	rjmp	.+88     	; 0x1f64 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f0c:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    1f10:	88 23       	and	r24, r24
    1f12:	6c f4       	brge	.+26     	; 0x1f2e <udd_ctrl_interrupt_tc_setup+0xa0>
    1f14:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1f18:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1f1c:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1f20:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1f2a:	04 df       	rcall	.-504    	; 0x1d34 <udd_ctrl_in_sent>
    1f2c:	1b c0       	rjmp	.+54     	; 0x1f64 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f2e:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1f32:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1f36:	89 2b       	or	r24, r25
    1f38:	11 f4       	brne	.+4      	; 0x1f3e <udd_ctrl_interrupt_tc_setup+0xb0>
    1f3a:	e6 de       	rcall	.-564    	; 0x1d08 <udd_ctrl_send_zlp_in>
    1f3c:	13 c0       	rjmp	.+38     	; 0x1f64 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f3e:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1f42:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1f46:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1f4a:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1f54:	e0 e1       	ldi	r30, 0x10	; 16
    1f56:	f2 e2       	ldi	r31, 0x22	; 34
    1f58:	02 e0       	ldi	r16, 0x02	; 2
    1f5a:	06 93       	lac	Z, r16
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f5e:	c0 e0       	ldi	r28, 0x00	; 0
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <udd_ctrl_interrupt_tc_setup+0xd6>
    1f62:	c1 e0       	ldi	r28, 0x01	; 1
    1f64:	8c 2f       	mov	r24, r28
    1f66:	cf 91       	pop	r28
    1f68:	0f 91       	pop	r16
    1f6a:	08 95       	ret

00001f6c <udd_ep_trans_complet>:
    1f6c:	8f 92       	push	r8
    1f6e:	9f 92       	push	r9
    1f70:	af 92       	push	r10
    1f72:	bf 92       	push	r11
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	d8 2e       	mov	r13, r24
    1f84:	69 df       	rcall	.-302    	; 0x1e58 <udd_ep_get_job>
    1f86:	8c 01       	movw	r16, r24
    1f88:	bd 2c       	mov	r11, r13
    1f8a:	bb 1c       	adc	r11, r11
    1f8c:	bb 24       	eor	r11, r11
    1f8e:	bb 1c       	adc	r11, r11
    1f90:	cd 2d       	mov	r28, r13
    1f92:	cf 70       	andi	r28, 0x0F	; 15
    1f94:	d0 e0       	ldi	r29, 0x00	; 0
    1f96:	cc 0f       	add	r28, r28
    1f98:	dd 1f       	adc	r29, r29
    1f9a:	cb 0d       	add	r28, r11
    1f9c:	d1 1d       	adc	r29, r1
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	9c 01       	movw	r18, r24
    1fae:	20 5f       	subi	r18, 0xF0	; 240
    1fb0:	3d 4d       	sbci	r19, 0xDD	; 221
    1fb2:	79 01       	movw	r14, r18
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	2a df       	rcall	.-428    	; 0x1e0c <udd_ep_get_size>
    1fb8:	4c 01       	movw	r8, r24
    1fba:	bb 20       	and	r11, r11
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <udd_ep_trans_complet+0x54>
    1fbe:	70 c0       	rjmp	.+224    	; 0x20a0 <udd_ep_trans_complet+0x134>
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	ee 0f       	add	r30, r30
    1fc8:	ff 1f       	adc	r31, r31
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	e0 50       	subi	r30, 0x00	; 0
    1fd0:	fe 4d       	sbci	r31, 0xDE	; 222
    1fd2:	26 89       	ldd	r18, Z+22	; 0x16
    1fd4:	37 89       	ldd	r19, Z+23	; 0x17
    1fd6:	d8 01       	movw	r26, r16
    1fd8:	15 96       	adiw	r26, 0x05	; 5
    1fda:	8d 91       	ld	r24, X+
    1fdc:	9c 91       	ld	r25, X
    1fde:	16 97       	sbiw	r26, 0x06	; 6
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	15 96       	adiw	r26, 0x05	; 5
    1fe6:	8d 93       	st	X+, r24
    1fe8:	9c 93       	st	X, r25
    1fea:	16 97       	sbiw	r26, 0x06	; 6
    1fec:	13 96       	adiw	r26, 0x03	; 3
    1fee:	2d 91       	ld	r18, X+
    1ff0:	3c 91       	ld	r19, X
    1ff2:	14 97       	sbiw	r26, 0x04	; 4
    1ff4:	82 17       	cp	r24, r18
    1ff6:	93 07       	cpc	r25, r19
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <udd_ep_trans_complet+0x90>
    1ffa:	3c c0       	rjmp	.+120    	; 0x2074 <udd_ep_trans_complet+0x108>
    1ffc:	28 1b       	sub	r18, r24
    1ffe:	39 0b       	sbc	r19, r25
    2000:	21 15       	cp	r18, r1
    2002:	b4 e0       	ldi	r27, 0x04	; 4
    2004:	3b 07       	cpc	r19, r27
    2006:	38 f0       	brcs	.+14     	; 0x2016 <udd_ep_trans_complet+0xaa>
    2008:	2f ef       	ldi	r18, 0xFF	; 255
    200a:	33 e0       	ldi	r19, 0x03	; 3
    200c:	c9 01       	movw	r24, r18
    200e:	b4 01       	movw	r22, r8
    2010:	71 d5       	rcall	.+2786   	; 0x2af4 <__udivmodhi4>
    2012:	28 1b       	sub	r18, r24
    2014:	39 0b       	sbc	r19, r25
    2016:	f8 01       	movw	r30, r16
    2018:	80 81       	ld	r24, Z
    201a:	81 ff       	sbrs	r24, 1
    201c:	09 c0       	rjmp	.+18     	; 0x2030 <udd_ep_trans_complet+0xc4>
    201e:	c9 01       	movw	r24, r18
    2020:	b4 01       	movw	r22, r8
    2022:	68 d5       	rcall	.+2768   	; 0x2af4 <__udivmodhi4>
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	89 2b       	or	r24, r25
    2028:	09 f0       	breq	.+2      	; 0x202c <udd_ep_trans_complet+0xc0>
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	84 2f       	mov	r24, r20
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <udd_ep_trans_complet+0xc6>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	d8 01       	movw	r26, r16
    2034:	9c 91       	ld	r25, X
    2036:	80 fb       	bst	r24, 0
    2038:	91 f9       	bld	r25, 1
    203a:	9c 93       	st	X, r25
    203c:	cc 0f       	add	r28, r28
    203e:	dd 1f       	adc	r29, r29
    2040:	cc 0f       	add	r28, r28
    2042:	dd 1f       	adc	r29, r29
    2044:	cc 0f       	add	r28, r28
    2046:	dd 1f       	adc	r29, r29
    2048:	c0 50       	subi	r28, 0x00	; 0
    204a:	de 4d       	sbci	r29, 0xDE	; 222
    204c:	1e 8a       	std	Y+22, r1	; 0x16
    204e:	1f 8a       	std	Y+23, r1	; 0x17
    2050:	2a 8b       	std	Y+18, r18	; 0x12
    2052:	3b 8b       	std	Y+19, r19	; 0x13
    2054:	11 96       	adiw	r26, 0x01	; 1
    2056:	2d 91       	ld	r18, X+
    2058:	3c 91       	ld	r19, X
    205a:	12 97       	sbiw	r26, 0x02	; 2
    205c:	15 96       	adiw	r26, 0x05	; 5
    205e:	8d 91       	ld	r24, X+
    2060:	9c 91       	ld	r25, X
    2062:	16 97       	sbiw	r26, 0x06	; 6
    2064:	82 0f       	add	r24, r18
    2066:	93 1f       	adc	r25, r19
    2068:	8c 8b       	std	Y+20, r24	; 0x14
    206a:	9d 8b       	std	Y+21, r25	; 0x15
    206c:	f7 01       	movw	r30, r14
    206e:	02 e0       	ldi	r16, 0x02	; 2
    2070:	06 93       	lac	Z, r16
    2072:	ca c0       	rjmp	.+404    	; 0x2208 <udd_ep_trans_complet+0x29c>
    2074:	d8 01       	movw	r26, r16
    2076:	8c 91       	ld	r24, X
    2078:	81 ff       	sbrs	r24, 1
    207a:	b3 c0       	rjmp	.+358    	; 0x21e2 <udd_ep_trans_complet+0x276>
    207c:	8d 7f       	andi	r24, 0xFD	; 253
    207e:	8c 93       	st	X, r24
    2080:	cc 0f       	add	r28, r28
    2082:	dd 1f       	adc	r29, r29
    2084:	cc 0f       	add	r28, r28
    2086:	dd 1f       	adc	r29, r29
    2088:	cc 0f       	add	r28, r28
    208a:	dd 1f       	adc	r29, r29
    208c:	c0 50       	subi	r28, 0x00	; 0
    208e:	de 4d       	sbci	r29, 0xDE	; 222
    2090:	1e 8a       	std	Y+22, r1	; 0x16
    2092:	1f 8a       	std	Y+23, r1	; 0x17
    2094:	1a 8a       	std	Y+18, r1	; 0x12
    2096:	1b 8a       	std	Y+19, r1	; 0x13
    2098:	f7 01       	movw	r30, r14
    209a:	02 e0       	ldi	r16, 0x02	; 2
    209c:	06 93       	lac	Z, r16
    209e:	b4 c0       	rjmp	.+360    	; 0x2208 <udd_ep_trans_complet+0x29c>
    20a0:	fe 01       	movw	r30, r28
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	e0 50       	subi	r30, 0x00	; 0
    20b0:	fe 4d       	sbci	r31, 0xDE	; 222
    20b2:	a2 88       	ldd	r10, Z+18	; 0x12
    20b4:	b3 88       	ldd	r11, Z+19	; 0x13
    20b6:	d8 01       	movw	r26, r16
    20b8:	8c 91       	ld	r24, X
    20ba:	82 ff       	sbrs	r24, 2
    20bc:	19 c0       	rjmp	.+50     	; 0x20f0 <udd_ep_trans_complet+0x184>
    20be:	11 96       	adiw	r26, 0x01	; 1
    20c0:	ed 91       	ld	r30, X+
    20c2:	fc 91       	ld	r31, X
    20c4:	12 97       	sbiw	r26, 0x02	; 2
    20c6:	15 96       	adiw	r26, 0x05	; 5
    20c8:	2d 91       	ld	r18, X+
    20ca:	3c 91       	ld	r19, X
    20cc:	16 97       	sbiw	r26, 0x06	; 6
    20ce:	13 96       	adiw	r26, 0x03	; 3
    20d0:	8d 91       	ld	r24, X+
    20d2:	9c 91       	ld	r25, X
    20d4:	14 97       	sbiw	r26, 0x04	; 4
    20d6:	b4 01       	movw	r22, r8
    20d8:	0d d5       	rcall	.+2586   	; 0x2af4 <__udivmodhi4>
    20da:	b0 e4       	ldi	r27, 0x40	; 64
    20dc:	db 9e       	mul	r13, r27
    20de:	b0 01       	movw	r22, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	6b 57       	subi	r22, 0x7B	; 123
    20e4:	7f 4d       	sbci	r23, 0xDF	; 223
    20e6:	ac 01       	movw	r20, r24
    20e8:	cf 01       	movw	r24, r30
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	1c d5       	rcall	.+2616   	; 0x2b28 <memcpy>
    20f0:	f8 01       	movw	r30, r16
    20f2:	25 81       	ldd	r18, Z+5	; 0x05
    20f4:	36 81       	ldd	r19, Z+6	; 0x06
    20f6:	2a 0d       	add	r18, r10
    20f8:	3b 1d       	adc	r19, r11
    20fa:	25 83       	std	Z+5, r18	; 0x05
    20fc:	36 83       	std	Z+6, r19	; 0x06
    20fe:	83 81       	ldd	r24, Z+3	; 0x03
    2100:	94 81       	ldd	r25, Z+4	; 0x04
    2102:	82 17       	cp	r24, r18
    2104:	93 07       	cpc	r25, r19
    2106:	68 f4       	brcc	.+26     	; 0x2122 <udd_ep_trans_complet+0x1b6>
    2108:	85 83       	std	Z+5, r24	; 0x05
    210a:	96 83       	std	Z+6, r25	; 0x06
    210c:	cc 0f       	add	r28, r28
    210e:	dd 1f       	adc	r29, r29
    2110:	cc 0f       	add	r28, r28
    2112:	dd 1f       	adc	r29, r29
    2114:	cc 0f       	add	r28, r28
    2116:	dd 1f       	adc	r29, r29
    2118:	c0 50       	subi	r28, 0x00	; 0
    211a:	de 4d       	sbci	r29, 0xDE	; 222
    211c:	8e 89       	ldd	r24, Y+22	; 0x16
    211e:	9f 89       	ldd	r25, Y+23	; 0x17
    2120:	60 c0       	rjmp	.+192    	; 0x21e2 <udd_ep_trans_complet+0x276>
    2122:	fe 01       	movw	r30, r28
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	e0 50       	subi	r30, 0x00	; 0
    2132:	fe 4d       	sbci	r31, 0xDE	; 222
    2134:	46 89       	ldd	r20, Z+22	; 0x16
    2136:	57 89       	ldd	r21, Z+23	; 0x17
    2138:	4a 15       	cp	r20, r10
    213a:	5b 05       	cpc	r21, r11
    213c:	09 f0       	breq	.+2      	; 0x2140 <udd_ep_trans_complet+0x1d4>
    213e:	51 c0       	rjmp	.+162    	; 0x21e2 <udd_ep_trans_complet+0x276>
    2140:	28 17       	cp	r18, r24
    2142:	39 07       	cpc	r19, r25
    2144:	09 f4       	brne	.+2      	; 0x2148 <udd_ep_trans_complet+0x1dc>
    2146:	4d c0       	rjmp	.+154    	; 0x21e2 <udd_ep_trans_complet+0x276>
    2148:	ac 01       	movw	r20, r24
    214a:	42 1b       	sub	r20, r18
    214c:	53 0b       	sbc	r21, r19
    214e:	9a 01       	movw	r18, r20
    2150:	21 15       	cp	r18, r1
    2152:	54 e0       	ldi	r21, 0x04	; 4
    2154:	35 07       	cpc	r19, r21
    2156:	50 f0       	brcs	.+20     	; 0x216c <udd_ep_trans_complet+0x200>
    2158:	2f ef       	ldi	r18, 0xFF	; 255
    215a:	33 e0       	ldi	r19, 0x03	; 3
    215c:	c9 01       	movw	r24, r18
    215e:	b4 01       	movw	r22, r8
    2160:	c9 d4       	rcall	.+2450   	; 0x2af4 <__udivmodhi4>
    2162:	d9 01       	movw	r26, r18
    2164:	a8 1b       	sub	r26, r24
    2166:	b9 0b       	sbc	r27, r25
    2168:	cd 01       	movw	r24, r26
    216a:	07 c0       	rjmp	.+14     	; 0x217a <udd_ep_trans_complet+0x20e>
    216c:	c9 01       	movw	r24, r18
    216e:	b4 01       	movw	r22, r8
    2170:	c1 d4       	rcall	.+2434   	; 0x2af4 <__udivmodhi4>
    2172:	f9 01       	movw	r30, r18
    2174:	e8 1b       	sub	r30, r24
    2176:	f9 0b       	sbc	r31, r25
    2178:	cf 01       	movw	r24, r30
    217a:	fe 01       	movw	r30, r28
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	e0 50       	subi	r30, 0x00	; 0
    218a:	fe 4d       	sbci	r31, 0xDE	; 222
    218c:	12 8a       	std	Z+18, r1	; 0x12
    218e:	13 8a       	std	Z+19, r1	; 0x13
    2190:	88 15       	cp	r24, r8
    2192:	99 05       	cpc	r25, r9
    2194:	78 f4       	brcc	.+30     	; 0x21b4 <udd_ep_trans_complet+0x248>
    2196:	d8 01       	movw	r26, r16
    2198:	8c 91       	ld	r24, X
    219a:	84 60       	ori	r24, 0x04	; 4
    219c:	8c 93       	st	X, r24
    219e:	b0 e4       	ldi	r27, 0x40	; 64
    21a0:	db 9e       	mul	r13, r27
    21a2:	c0 01       	movw	r24, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	8b 57       	subi	r24, 0x7B	; 123
    21a8:	9f 4d       	sbci	r25, 0xDF	; 223
    21aa:	84 8b       	std	Z+20, r24	; 0x14
    21ac:	95 8b       	std	Z+21, r25	; 0x15
    21ae:	86 8a       	std	Z+22, r8	; 0x16
    21b0:	97 8a       	std	Z+23, r9	; 0x17
    21b2:	13 c0       	rjmp	.+38     	; 0x21da <udd_ep_trans_complet+0x26e>
    21b4:	f8 01       	movw	r30, r16
    21b6:	41 81       	ldd	r20, Z+1	; 0x01
    21b8:	52 81       	ldd	r21, Z+2	; 0x02
    21ba:	25 81       	ldd	r18, Z+5	; 0x05
    21bc:	36 81       	ldd	r19, Z+6	; 0x06
    21be:	24 0f       	add	r18, r20
    21c0:	35 1f       	adc	r19, r21
    21c2:	cc 0f       	add	r28, r28
    21c4:	dd 1f       	adc	r29, r29
    21c6:	cc 0f       	add	r28, r28
    21c8:	dd 1f       	adc	r29, r29
    21ca:	cc 0f       	add	r28, r28
    21cc:	dd 1f       	adc	r29, r29
    21ce:	c0 50       	subi	r28, 0x00	; 0
    21d0:	de 4d       	sbci	r29, 0xDE	; 222
    21d2:	2c 8b       	std	Y+20, r18	; 0x14
    21d4:	3d 8b       	std	Y+21, r19	; 0x15
    21d6:	8e 8b       	std	Y+22, r24	; 0x16
    21d8:	9f 8b       	std	Y+23, r25	; 0x17
    21da:	f7 01       	movw	r30, r14
    21dc:	02 e0       	ldi	r16, 0x02	; 2
    21de:	06 93       	lac	Z, r16
    21e0:	13 c0       	rjmp	.+38     	; 0x2208 <udd_ep_trans_complet+0x29c>
    21e2:	d8 01       	movw	r26, r16
    21e4:	8c 91       	ld	r24, X
    21e6:	80 ff       	sbrs	r24, 0
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <udd_ep_trans_complet+0x29c>
    21ea:	8e 7f       	andi	r24, 0xFE	; 254
    21ec:	8c 93       	st	X, r24
    21ee:	17 96       	adiw	r26, 0x07	; 7
    21f0:	ed 91       	ld	r30, X+
    21f2:	fc 91       	ld	r31, X
    21f4:	18 97       	sbiw	r26, 0x08	; 8
    21f6:	30 97       	sbiw	r30, 0x00	; 0
    21f8:	39 f0       	breq	.+14     	; 0x2208 <udd_ep_trans_complet+0x29c>
    21fa:	15 96       	adiw	r26, 0x05	; 5
    21fc:	6d 91       	ld	r22, X+
    21fe:	7c 91       	ld	r23, X
    2200:	16 97       	sbiw	r26, 0x06	; 6
    2202:	4d 2d       	mov	r20, r13
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	09 95       	icall
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ff 90       	pop	r15
    2212:	ef 90       	pop	r14
    2214:	df 90       	pop	r13
    2216:	bf 90       	pop	r11
    2218:	af 90       	pop	r10
    221a:	9f 90       	pop	r9
    221c:	8f 90       	pop	r8
    221e:	08 95       	ret

00002220 <udd_attach>:
    2220:	cf 93       	push	r28
    2222:	cf b7       	in	r28, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	11 dd       	rcall	.-1502   	; 0x1c4c <udd_sleep_mode>
    222a:	ea ec       	ldi	r30, 0xCA	; 202
    222c:	f4 e0       	ldi	r31, 0x04	; 4
    222e:	80 e4       	ldi	r24, 0x40	; 64
    2230:	80 83       	st	Z, r24
    2232:	80 e2       	ldi	r24, 0x20	; 32
    2234:	80 83       	st	Z, r24
    2236:	e1 ec       	ldi	r30, 0xC1	; 193
    2238:	f4 e0       	ldi	r31, 0x04	; 4
    223a:	80 81       	ld	r24, Z
    223c:	81 60       	ori	r24, 0x01	; 1
    223e:	80 83       	st	Z, r24
    2240:	a9 ec       	ldi	r26, 0xC9	; 201
    2242:	b4 e0       	ldi	r27, 0x04	; 4
    2244:	8c 91       	ld	r24, X
    2246:	82 60       	ori	r24, 0x02	; 2
    2248:	8c 93       	st	X, r24
    224a:	e8 ec       	ldi	r30, 0xC8	; 200
    224c:	f4 e0       	ldi	r31, 0x04	; 4
    224e:	80 81       	ld	r24, Z
    2250:	80 64       	ori	r24, 0x40	; 64
    2252:	80 83       	st	Z, r24
    2254:	8c 91       	ld	r24, X
    2256:	81 60       	ori	r24, 0x01	; 1
    2258:	8c 93       	st	X, r24
    225a:	80 81       	ld	r24, Z
    225c:	80 68       	ori	r24, 0x80	; 128
    225e:	80 83       	st	Z, r24
    2260:	cf bf       	out	0x3f, r28	; 63
    2262:	cf 91       	pop	r28
    2264:	08 95       	ret

00002266 <udd_enable>:
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	c0 e6       	ldi	r28, 0x60	; 96
    226c:	d0 e0       	ldi	r29, 0x00	; 0
    226e:	18 82       	st	Y, r1
    2270:	80 e3       	ldi	r24, 0x30	; 48
    2272:	0e 94 b9 08 	call	0x1172	; 0x1172 <sysclk_enable_usb>
    2276:	e0 ec       	ldi	r30, 0xC0	; 192
    2278:	f4 e0       	ldi	r31, 0x04	; 4
    227a:	80 81       	ld	r24, Z
    227c:	80 64       	ori	r24, 0x40	; 64
    227e:	80 83       	st	Z, r24
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	88 83       	st	Y, r24
    2284:	cf b7       	in	r28, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	fc 01       	movw	r30, r24
    228e:	ee 0f       	add	r30, r30
    2290:	ff 1f       	adc	r31, r31
    2292:	ee 0f       	add	r30, r30
    2294:	ff 1f       	adc	r31, r31
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	e0 50       	subi	r30, 0x00	; 0
    229c:	fe 4d       	sbci	r31, 0xDE	; 222
    229e:	11 8a       	std	Z+17, r1	; 0x11
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	88 30       	cpi	r24, 0x08	; 8
    22a4:	91 05       	cpc	r25, r1
    22a6:	91 f7       	brne	.-28     	; 0x228c <udd_enable+0x26>
    22a8:	e5 e8       	ldi	r30, 0x85	; 133
    22aa:	f1 e2       	ldi	r31, 0x21	; 33
    22ac:	80 81       	ld	r24, Z
    22ae:	8e 7f       	andi	r24, 0xFE	; 254
    22b0:	80 83       	st	Z, r24
    22b2:	ee e8       	ldi	r30, 0x8E	; 142
    22b4:	f1 e2       	ldi	r31, 0x21	; 33
    22b6:	80 81       	ld	r24, Z
    22b8:	8e 7f       	andi	r24, 0xFE	; 254
    22ba:	80 83       	st	Z, r24
    22bc:	e7 e9       	ldi	r30, 0x97	; 151
    22be:	f1 e2       	ldi	r31, 0x21	; 33
    22c0:	80 81       	ld	r24, Z
    22c2:	8e 7f       	andi	r24, 0xFE	; 254
    22c4:	80 83       	st	Z, r24
    22c6:	e0 ea       	ldi	r30, 0xA0	; 160
    22c8:	f1 e2       	ldi	r31, 0x21	; 33
    22ca:	80 81       	ld	r24, Z
    22cc:	8e 7f       	andi	r24, 0xFE	; 254
    22ce:	80 83       	st	Z, r24
    22d0:	e9 ea       	ldi	r30, 0xA9	; 169
    22d2:	f1 e2       	ldi	r31, 0x21	; 33
    22d4:	80 81       	ld	r24, Z
    22d6:	8e 7f       	andi	r24, 0xFE	; 254
    22d8:	80 83       	st	Z, r24
    22da:	e2 eb       	ldi	r30, 0xB2	; 178
    22dc:	f1 e2       	ldi	r31, 0x21	; 33
    22de:	80 81       	ld	r24, Z
    22e0:	8e 7f       	andi	r24, 0xFE	; 254
    22e2:	80 83       	st	Z, r24
    22e4:	6a e1       	ldi	r22, 0x1A	; 26
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	a6 dc       	rcall	.-1716   	; 0x1c38 <nvm_read_byte>
    22ec:	8f 3f       	cpi	r24, 0xFF	; 255
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <udd_enable+0x90>
    22f0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <udd_enable+0x96>
    22f6:	8f e1       	ldi	r24, 0x1F	; 31
    22f8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    22fc:	6b e1       	ldi	r22, 0x1B	; 27
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	9a dc       	rcall	.-1740   	; 0x1c38 <nvm_read_byte>
    2304:	8f 3f       	cpi	r24, 0xFF	; 255
    2306:	19 f0       	breq	.+6      	; 0x230e <udd_enable+0xa8>
    2308:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <udd_enable+0xae>
    230e:	8f e1       	ldi	r24, 0x1F	; 31
    2310:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2314:	e0 ec       	ldi	r30, 0xC0	; 192
    2316:	f4 e0       	ldi	r31, 0x04	; 4
    2318:	80 81       	ld	r24, Z
    231a:	83 60       	ori	r24, 0x03	; 3
    231c:	80 83       	st	Z, r24
    231e:	80 81       	ld	r24, Z
    2320:	80 68       	ori	r24, 0x80	; 128
    2322:	80 83       	st	Z, r24
    2324:	80 81       	ld	r24, Z
    2326:	80 61       	ori	r24, 0x10	; 16
    2328:	80 83       	st	Z, r24
    232a:	80 e1       	ldi	r24, 0x10	; 16
    232c:	92 e2       	ldi	r25, 0x22	; 34
    232e:	86 83       	std	Z+6, r24	; 0x06
    2330:	97 83       	std	Z+7, r25	; 0x07
    2332:	80 81       	ld	r24, Z
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	80 83       	st	Z, r24
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    233e:	e8 ec       	ldi	r30, 0xC8	; 200
    2340:	f4 e0       	ldi	r31, 0x04	; 4
    2342:	80 81       	ld	r24, Z
    2344:	82 60       	ori	r24, 0x02	; 2
    2346:	80 83       	st	Z, r24
    2348:	10 92 54 22 	sts	0x2254, r1	; 0x802254 <udd_b_idle>
    234c:	80 91 4b 2c 	lds	r24, 0x2C4B	; 0x802c4b <sleepmgr_locks+0x5>
    2350:	8f 3f       	cpi	r24, 0xFF	; 255
    2352:	09 f4       	brne	.+2      	; 0x2356 <udd_enable+0xf0>
    2354:	ff cf       	rjmp	.-2      	; 0x2354 <udd_enable+0xee>
    2356:	9f b7       	in	r25, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	e6 e4       	ldi	r30, 0x46	; 70
    235c:	fc e2       	ldi	r31, 0x2C	; 44
    235e:	85 81       	ldd	r24, Z+5	; 0x05
    2360:	8f 5f       	subi	r24, 0xFF	; 255
    2362:	85 83       	std	Z+5, r24	; 0x05
    2364:	9f bf       	out	0x3f, r25	; 63
    2366:	5c df       	rcall	.-328    	; 0x2220 <udd_attach>
    2368:	cf bf       	out	0x3f, r28	; 63
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	08 95       	ret

00002370 <udd_set_address>:
    2370:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2374:	08 95       	ret

00002376 <udd_getaddress>:
    2376:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    237a:	08 95       	ret

0000237c <udd_set_setup_payload>:
    237c:	ea e5       	ldi	r30, 0x5A	; 90
    237e:	f4 e2       	ldi	r31, 0x24	; 36
    2380:	80 87       	std	Z+8, r24	; 0x08
    2382:	91 87       	std	Z+9, r25	; 0x09
    2384:	62 87       	std	Z+10, r22	; 0x0a
    2386:	73 87       	std	Z+11, r23	; 0x0b
    2388:	08 95       	ret

0000238a <udd_ep_alloc>:
    238a:	28 2f       	mov	r18, r24
    238c:	2f 70       	andi	r18, 0x0F	; 15
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	22 0f       	add	r18, r18
    2392:	33 1f       	adc	r19, r19
    2394:	08 2e       	mov	r0, r24
    2396:	00 0c       	add	r0, r0
    2398:	99 0b       	sbc	r25, r25
    239a:	88 27       	eor	r24, r24
    239c:	99 0f       	add	r25, r25
    239e:	88 1f       	adc	r24, r24
    23a0:	99 27       	eor	r25, r25
    23a2:	82 0f       	add	r24, r18
    23a4:	93 1f       	adc	r25, r19
    23a6:	fc 01       	movw	r30, r24
    23a8:	ee 0f       	add	r30, r30
    23aa:	ff 1f       	adc	r31, r31
    23ac:	ee 0f       	add	r30, r30
    23ae:	ff 1f       	adc	r31, r31
    23b0:	ee 0f       	add	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	e0 50       	subi	r30, 0x00	; 0
    23b6:	fe 4d       	sbci	r31, 0xDE	; 222
    23b8:	21 89       	ldd	r18, Z+17	; 0x11
    23ba:	20 7c       	andi	r18, 0xC0	; 192
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <udd_ep_alloc+0x36>
    23be:	58 c0       	rjmp	.+176    	; 0x2470 <udd_ep_alloc+0xe6>
    23c0:	63 70       	andi	r22, 0x03	; 3
    23c2:	61 30       	cpi	r22, 0x01	; 1
    23c4:	11 f0       	breq	.+4      	; 0x23ca <udd_ep_alloc+0x40>
    23c6:	18 f4       	brcc	.+6      	; 0x23ce <udd_ep_alloc+0x44>
    23c8:	04 c0       	rjmp	.+8      	; 0x23d2 <udd_ep_alloc+0x48>
    23ca:	20 ec       	ldi	r18, 0xC0	; 192
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <udd_ep_alloc+0x4a>
    23ce:	20 e8       	ldi	r18, 0x80	; 128
    23d0:	01 c0       	rjmp	.+2      	; 0x23d4 <udd_ep_alloc+0x4a>
    23d2:	20 e4       	ldi	r18, 0x40	; 64
    23d4:	40 38       	cpi	r20, 0x80	; 128
    23d6:	51 05       	cpc	r21, r1
    23d8:	e9 f0       	breq	.+58     	; 0x2414 <udd_ep_alloc+0x8a>
    23da:	50 f4       	brcc	.+20     	; 0x23f0 <udd_ep_alloc+0x66>
    23dc:	40 32       	cpi	r20, 0x20	; 32
    23de:	51 05       	cpc	r21, r1
    23e0:	a9 f0       	breq	.+42     	; 0x240c <udd_ep_alloc+0x82>
    23e2:	40 34       	cpi	r20, 0x40	; 64
    23e4:	51 05       	cpc	r21, r1
    23e6:	a1 f0       	breq	.+40     	; 0x2410 <udd_ep_alloc+0x86>
    23e8:	40 31       	cpi	r20, 0x10	; 16
    23ea:	51 05       	cpc	r21, r1
    23ec:	d9 f4       	brne	.+54     	; 0x2424 <udd_ep_alloc+0x9a>
    23ee:	0c c0       	rjmp	.+24     	; 0x2408 <udd_ep_alloc+0x7e>
    23f0:	41 15       	cp	r20, r1
    23f2:	32 e0       	ldi	r19, 0x02	; 2
    23f4:	53 07       	cpc	r21, r19
    23f6:	91 f0       	breq	.+36     	; 0x241c <udd_ep_alloc+0x92>
    23f8:	4f 3f       	cpi	r20, 0xFF	; 255
    23fa:	33 e0       	ldi	r19, 0x03	; 3
    23fc:	53 07       	cpc	r21, r19
    23fe:	81 f0       	breq	.+32     	; 0x2420 <udd_ep_alloc+0x96>
    2400:	41 15       	cp	r20, r1
    2402:	51 40       	sbci	r21, 0x01	; 1
    2404:	79 f4       	brne	.+30     	; 0x2424 <udd_ep_alloc+0x9a>
    2406:	08 c0       	rjmp	.+16     	; 0x2418 <udd_ep_alloc+0x8e>
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	0d c0       	rjmp	.+26     	; 0x2426 <udd_ep_alloc+0x9c>
    240c:	42 e0       	ldi	r20, 0x02	; 2
    240e:	0b c0       	rjmp	.+22     	; 0x2426 <udd_ep_alloc+0x9c>
    2410:	43 e0       	ldi	r20, 0x03	; 3
    2412:	09 c0       	rjmp	.+18     	; 0x2426 <udd_ep_alloc+0x9c>
    2414:	44 e0       	ldi	r20, 0x04	; 4
    2416:	07 c0       	rjmp	.+14     	; 0x2426 <udd_ep_alloc+0x9c>
    2418:	45 e0       	ldi	r20, 0x05	; 5
    241a:	05 c0       	rjmp	.+10     	; 0x2426 <udd_ep_alloc+0x9c>
    241c:	46 e0       	ldi	r20, 0x06	; 6
    241e:	03 c0       	rjmp	.+6      	; 0x2426 <udd_ep_alloc+0x9c>
    2420:	47 e0       	ldi	r20, 0x07	; 7
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <udd_ep_alloc+0x9c>
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	fc 01       	movw	r30, r24
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	ee 0f       	add	r30, r30
    242e:	ff 1f       	adc	r31, r31
    2430:	ee 0f       	add	r30, r30
    2432:	ff 1f       	adc	r31, r31
    2434:	e0 50       	subi	r30, 0x00	; 0
    2436:	fe 4d       	sbci	r31, 0xDE	; 222
    2438:	11 8a       	std	Z+17, r1	; 0x11
    243a:	dc 01       	movw	r26, r24
    243c:	aa 0f       	add	r26, r26
    243e:	bb 1f       	adc	r27, r27
    2440:	aa 0f       	add	r26, r26
    2442:	bb 1f       	adc	r27, r27
    2444:	aa 0f       	add	r26, r26
    2446:	bb 1f       	adc	r27, r27
    2448:	a0 5f       	subi	r26, 0xF0	; 240
    244a:	bd 4d       	sbci	r27, 0xDD	; 221
    244c:	36 e0       	ldi	r19, 0x06	; 6
    244e:	3c 93       	st	X, r19
    2450:	24 2b       	or	r18, r20
    2452:	21 8b       	std	Z+17, r18	; 0x11
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	fc 01       	movw	r30, r24
    2462:	e0 50       	subi	r30, 0x00	; 0
    2464:	fe 4d       	sbci	r31, 0xDE	; 222
    2466:	81 89       	ldd	r24, Z+17	; 0x11
    2468:	80 62       	ori	r24, 0x20	; 32
    246a:	81 8b       	std	Z+17, r24	; 0x11
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	08 95       	ret
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	08 95       	ret

00002474 <udd_ep_is_halted>:
    2474:	e8 2f       	mov	r30, r24
    2476:	ef 70       	andi	r30, 0x0F	; 15
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	08 2e       	mov	r0, r24
    2480:	00 0c       	add	r0, r0
    2482:	99 0b       	sbc	r25, r25
    2484:	88 27       	eor	r24, r24
    2486:	99 0f       	add	r25, r25
    2488:	88 1f       	adc	r24, r24
    248a:	99 27       	eor	r25, r25
    248c:	e8 0f       	add	r30, r24
    248e:	f9 1f       	adc	r31, r25
    2490:	ee 0f       	add	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	e0 50       	subi	r30, 0x00	; 0
    249e:	fe 4d       	sbci	r31, 0xDE	; 222
    24a0:	81 89       	ldd	r24, Z+17	; 0x11
    24a2:	82 fb       	bst	r24, 2
    24a4:	88 27       	eor	r24, r24
    24a6:	80 f9       	bld	r24, 0
    24a8:	08 95       	ret

000024aa <udd_ep_clear_halt>:
    24aa:	28 2f       	mov	r18, r24
    24ac:	2f 70       	andi	r18, 0x0F	; 15
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	a9 01       	movw	r20, r18
    24b2:	44 0f       	add	r20, r20
    24b4:	55 1f       	adc	r21, r21
    24b6:	28 2f       	mov	r18, r24
    24b8:	08 2e       	mov	r0, r24
    24ba:	00 0c       	add	r0, r0
    24bc:	33 0b       	sbc	r19, r19
    24be:	22 27       	eor	r18, r18
    24c0:	33 0f       	add	r19, r19
    24c2:	22 1f       	adc	r18, r18
    24c4:	33 27       	eor	r19, r19
    24c6:	24 0f       	add	r18, r20
    24c8:	35 1f       	adc	r19, r21
    24ca:	f9 01       	movw	r30, r18
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	e0 50       	subi	r30, 0x00	; 0
    24da:	fe 4d       	sbci	r31, 0xDE	; 222
    24dc:	91 89       	ldd	r25, Z+17	; 0x11
    24de:	92 ff       	sbrs	r25, 2
    24e0:	17 c0       	rjmp	.+46     	; 0x2510 <udd_ep_clear_halt+0x66>
    24e2:	22 0f       	add	r18, r18
    24e4:	33 1f       	adc	r19, r19
    24e6:	22 0f       	add	r18, r18
    24e8:	33 1f       	adc	r19, r19
    24ea:	22 0f       	add	r18, r18
    24ec:	33 1f       	adc	r19, r19
    24ee:	f9 01       	movw	r30, r18
    24f0:	e0 50       	subi	r30, 0x00	; 0
    24f2:	fe 4d       	sbci	r31, 0xDE	; 222
    24f4:	91 89       	ldd	r25, Z+17	; 0x11
    24f6:	9b 7f       	andi	r25, 0xFB	; 251
    24f8:	91 8b       	std	Z+17, r25	; 0x11
    24fa:	ae dc       	rcall	.-1700   	; 0x1e58 <udd_ep_get_job>
    24fc:	fc 01       	movw	r30, r24
    24fe:	80 81       	ld	r24, Z
    2500:	80 ff       	sbrs	r24, 0
    2502:	06 c0       	rjmp	.+12     	; 0x2510 <udd_ep_clear_halt+0x66>
    2504:	8e 7f       	andi	r24, 0xFE	; 254
    2506:	80 83       	st	Z, r24
    2508:	07 80       	ldd	r0, Z+7	; 0x07
    250a:	f0 85       	ldd	r31, Z+8	; 0x08
    250c:	e0 2d       	mov	r30, r0
    250e:	09 95       	icall
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	08 95       	ret

00002514 <udd_ep_run>:
    2514:	7f 92       	push	r7
    2516:	8f 92       	push	r8
    2518:	9f 92       	push	r9
    251a:	af 92       	push	r10
    251c:	bf 92       	push	r11
    251e:	cf 92       	push	r12
    2520:	df 92       	push	r13
    2522:	ef 92       	push	r14
    2524:	ff 92       	push	r15
    2526:	0f 93       	push	r16
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	98 2e       	mov	r9, r24
    2530:	86 2e       	mov	r8, r22
    2532:	6a 01       	movw	r12, r20
    2534:	79 01       	movw	r14, r18
    2536:	90 dc       	rcall	.-1760   	; 0x1e58 <udd_ep_get_job>
    2538:	5c 01       	movw	r10, r24
    253a:	79 2c       	mov	r7, r9
    253c:	77 1c       	adc	r7, r7
    253e:	77 24       	eor	r7, r7
    2540:	77 1c       	adc	r7, r7
    2542:	c9 2d       	mov	r28, r9
    2544:	cf 70       	andi	r28, 0x0F	; 15
    2546:	d0 e0       	ldi	r29, 0x00	; 0
    2548:	cc 0f       	add	r28, r28
    254a:	dd 1f       	adc	r29, r29
    254c:	c7 0d       	add	r28, r7
    254e:	d1 1d       	adc	r29, r1
    2550:	fe 01       	movw	r30, r28
    2552:	ee 0f       	add	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	ee 0f       	add	r30, r30
    2558:	ff 1f       	adc	r31, r31
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	e0 50       	subi	r30, 0x00	; 0
    2560:	fe 4d       	sbci	r31, 0xDE	; 222
    2562:	81 89       	ldd	r24, Z+17	; 0x11
    2564:	80 7c       	andi	r24, 0xC0	; 192
    2566:	09 f4       	brne	.+2      	; 0x256a <udd_ep_run+0x56>
    2568:	7d c0       	rjmp	.+250    	; 0x2664 <udd_ep_run+0x150>
    256a:	fe 01       	movw	r30, r28
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	ee 0f       	add	r30, r30
    2572:	ff 1f       	adc	r31, r31
    2574:	ee 0f       	add	r30, r30
    2576:	ff 1f       	adc	r31, r31
    2578:	e0 50       	subi	r30, 0x00	; 0
    257a:	fe 4d       	sbci	r31, 0xDE	; 222
    257c:	81 89       	ldd	r24, Z+17	; 0x11
    257e:	80 7c       	andi	r24, 0xC0	; 192
    2580:	80 3c       	cpi	r24, 0xC0	; 192
    2582:	61 f0       	breq	.+24     	; 0x259c <udd_ep_run+0x88>
    2584:	fe 01       	movw	r30, r28
    2586:	ee 0f       	add	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	ee 0f       	add	r30, r30
    258c:	ff 1f       	adc	r31, r31
    258e:	ee 0f       	add	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	e0 50       	subi	r30, 0x00	; 0
    2594:	fe 4d       	sbci	r31, 0xDE	; 222
    2596:	81 89       	ldd	r24, Z+17	; 0x11
    2598:	82 fd       	sbrc	r24, 2
    259a:	66 c0       	rjmp	.+204    	; 0x2668 <udd_ep_run+0x154>
    259c:	8f b7       	in	r24, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	f5 01       	movw	r30, r10
    25a2:	90 81       	ld	r25, Z
    25a4:	90 ff       	sbrs	r25, 0
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <udd_ep_run+0x9a>
    25a8:	8f bf       	out	0x3f, r24	; 63
    25aa:	71 2c       	mov	r7, r1
    25ac:	5e c0       	rjmp	.+188    	; 0x266a <udd_ep_run+0x156>
    25ae:	f5 01       	movw	r30, r10
    25b0:	90 81       	ld	r25, Z
    25b2:	91 60       	ori	r25, 0x01	; 1
    25b4:	90 83       	st	Z, r25
    25b6:	8f bf       	out	0x3f, r24	; 63
    25b8:	c1 82       	std	Z+1, r12	; 0x01
    25ba:	d2 82       	std	Z+2, r13	; 0x02
    25bc:	e3 82       	std	Z+3, r14	; 0x03
    25be:	f4 82       	std	Z+4, r15	; 0x04
    25c0:	15 82       	std	Z+5, r1	; 0x05
    25c2:	16 82       	std	Z+6, r1	; 0x06
    25c4:	07 83       	std	Z+7, r16	; 0x07
    25c6:	10 87       	std	Z+8, r17	; 0x08
    25c8:	81 10       	cpse	r8, r1
    25ca:	06 c0       	rjmp	.+12     	; 0x25d8 <udd_ep_run+0xc4>
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	e1 14       	cp	r14, r1
    25d0:	f1 04       	cpc	r15, r1
    25d2:	19 f0       	breq	.+6      	; 0x25da <udd_ep_run+0xc6>
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	01 c0       	rjmp	.+2      	; 0x25da <udd_ep_run+0xc6>
    25d8:	91 e0       	ldi	r25, 0x01	; 1
    25da:	f5 01       	movw	r30, r10
    25dc:	80 81       	ld	r24, Z
    25de:	90 fb       	bst	r25, 0
    25e0:	81 f9       	bld	r24, 1
    25e2:	8b 7f       	andi	r24, 0xFB	; 251
    25e4:	80 83       	st	Z, r24
    25e6:	77 20       	and	r7, r7
    25e8:	59 f0       	breq	.+22     	; 0x2600 <udd_ep_run+0xec>
    25ea:	cc 0f       	add	r28, r28
    25ec:	dd 1f       	adc	r29, r29
    25ee:	cc 0f       	add	r28, r28
    25f0:	dd 1f       	adc	r29, r29
    25f2:	cc 0f       	add	r28, r28
    25f4:	dd 1f       	adc	r29, r29
    25f6:	c0 50       	subi	r28, 0x00	; 0
    25f8:	de 4d       	sbci	r29, 0xDE	; 222
    25fa:	1e 8a       	std	Y+22, r1	; 0x16
    25fc:	1f 8a       	std	Y+23, r1	; 0x17
    25fe:	2d c0       	rjmp	.+90     	; 0x265a <udd_ep_run+0x146>
    2600:	fe 01       	movw	r30, r28
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	e0 50       	subi	r30, 0x00	; 0
    2610:	fe 4d       	sbci	r31, 0xDE	; 222
    2612:	81 89       	ldd	r24, Z+17	; 0x11
    2614:	80 7c       	andi	r24, 0xC0	; 192
    2616:	80 3c       	cpi	r24, 0xC0	; 192
    2618:	a1 f4       	brne	.+40     	; 0x2642 <udd_ep_run+0x12e>
    261a:	ce 01       	movw	r24, r28
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	80 5f       	subi	r24, 0xF0	; 240
    262a:	9d 4d       	sbci	r25, 0xDD	; 221
    262c:	ef db       	rcall	.-2082   	; 0x1e0c <udd_ep_get_size>
    262e:	bc 01       	movw	r22, r24
    2630:	c7 01       	movw	r24, r14
    2632:	60 d2       	rcall	.+1216   	; 0x2af4 <__udivmodhi4>
    2634:	89 2b       	or	r24, r25
    2636:	29 f0       	breq	.+10     	; 0x2642 <udd_ep_run+0x12e>
    2638:	f5 01       	movw	r30, r10
    263a:	80 81       	ld	r24, Z
    263c:	8e 7f       	andi	r24, 0xFE	; 254
    263e:	80 83       	st	Z, r24
    2640:	14 c0       	rjmp	.+40     	; 0x266a <udd_ep_run+0x156>
    2642:	cc 0f       	add	r28, r28
    2644:	dd 1f       	adc	r29, r29
    2646:	cc 0f       	add	r28, r28
    2648:	dd 1f       	adc	r29, r29
    264a:	cc 0f       	add	r28, r28
    264c:	dd 1f       	adc	r29, r29
    264e:	c0 50       	subi	r28, 0x00	; 0
    2650:	de 4d       	sbci	r29, 0xDE	; 222
    2652:	1a 8a       	std	Y+18, r1	; 0x12
    2654:	1b 8a       	std	Y+19, r1	; 0x13
    2656:	1e 8a       	std	Y+22, r1	; 0x16
    2658:	1f 8a       	std	Y+23, r1	; 0x17
    265a:	89 2d       	mov	r24, r9
    265c:	87 dc       	rcall	.-1778   	; 0x1f6c <udd_ep_trans_complet>
    265e:	77 24       	eor	r7, r7
    2660:	73 94       	inc	r7
    2662:	03 c0       	rjmp	.+6      	; 0x266a <udd_ep_run+0x156>
    2664:	71 2c       	mov	r7, r1
    2666:	01 c0       	rjmp	.+2      	; 0x266a <udd_ep_run+0x156>
    2668:	71 2c       	mov	r7, r1
    266a:	87 2d       	mov	r24, r7
    266c:	df 91       	pop	r29
    266e:	cf 91       	pop	r28
    2670:	1f 91       	pop	r17
    2672:	0f 91       	pop	r16
    2674:	ff 90       	pop	r15
    2676:	ef 90       	pop	r14
    2678:	df 90       	pop	r13
    267a:	cf 90       	pop	r12
    267c:	bf 90       	pop	r11
    267e:	af 90       	pop	r10
    2680:	9f 90       	pop	r9
    2682:	8f 90       	pop	r8
    2684:	7f 90       	pop	r7
    2686:	08 95       	ret

00002688 <udd_ep_abort>:
    2688:	ff 92       	push	r15
    268a:	0f 93       	push	r16
    268c:	1f 93       	push	r17
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	18 2f       	mov	r17, r24
    2694:	f8 2e       	mov	r15, r24
    2696:	ff 1c       	adc	r15, r15
    2698:	ff 24       	eor	r15, r15
    269a:	ff 1c       	adc	r15, r15
    269c:	c8 2f       	mov	r28, r24
    269e:	cf 70       	andi	r28, 0x0F	; 15
    26a0:	d0 e0       	ldi	r29, 0x00	; 0
    26a2:	cc 0f       	add	r28, r28
    26a4:	dd 1f       	adc	r29, r29
    26a6:	cf 0d       	add	r28, r15
    26a8:	d1 1d       	adc	r29, r1
    26aa:	d6 db       	rcall	.-2132   	; 0x1e58 <udd_ep_get_job>
    26ac:	dc 01       	movw	r26, r24
    26ae:	fe 01       	movw	r30, r28
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	e0 5f       	subi	r30, 0xF0	; 240
    26be:	fd 4d       	sbci	r31, 0xDD	; 221
    26c0:	02 e0       	ldi	r16, 0x02	; 2
    26c2:	05 93       	las	Z, r16
    26c4:	8c 91       	ld	r24, X
    26c6:	80 ff       	sbrs	r24, 0
    26c8:	22 c0       	rjmp	.+68     	; 0x270e <udd_ep_abort+0x86>
    26ca:	8e 7f       	andi	r24, 0xFE	; 254
    26cc:	8c 93       	st	X, r24
    26ce:	17 96       	adiw	r26, 0x07	; 7
    26d0:	ed 91       	ld	r30, X+
    26d2:	fc 91       	ld	r31, X
    26d4:	18 97       	sbiw	r26, 0x08	; 8
    26d6:	30 97       	sbiw	r30, 0x00	; 0
    26d8:	d1 f0       	breq	.+52     	; 0x270e <udd_ep_abort+0x86>
    26da:	ff 20       	and	r15, r15
    26dc:	59 f0       	breq	.+22     	; 0x26f4 <udd_ep_abort+0x6c>
    26de:	cc 0f       	add	r28, r28
    26e0:	dd 1f       	adc	r29, r29
    26e2:	cc 0f       	add	r28, r28
    26e4:	dd 1f       	adc	r29, r29
    26e6:	cc 0f       	add	r28, r28
    26e8:	dd 1f       	adc	r29, r29
    26ea:	c0 50       	subi	r28, 0x00	; 0
    26ec:	de 4d       	sbci	r29, 0xDE	; 222
    26ee:	6e 89       	ldd	r22, Y+22	; 0x16
    26f0:	7f 89       	ldd	r23, Y+23	; 0x17
    26f2:	0a c0       	rjmp	.+20     	; 0x2708 <udd_ep_abort+0x80>
    26f4:	cc 0f       	add	r28, r28
    26f6:	dd 1f       	adc	r29, r29
    26f8:	cc 0f       	add	r28, r28
    26fa:	dd 1f       	adc	r29, r29
    26fc:	cc 0f       	add	r28, r28
    26fe:	dd 1f       	adc	r29, r29
    2700:	c0 50       	subi	r28, 0x00	; 0
    2702:	de 4d       	sbci	r29, 0xDE	; 222
    2704:	6a 89       	ldd	r22, Y+18	; 0x12
    2706:	7b 89       	ldd	r23, Y+19	; 0x13
    2708:	41 2f       	mov	r20, r17
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	09 95       	icall
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	08 95       	ret

0000271a <udd_ep_free>:
    271a:	cf 93       	push	r28
    271c:	c8 2f       	mov	r28, r24
    271e:	b4 df       	rcall	.-152    	; 0x2688 <udd_ep_abort>
    2720:	ec 2f       	mov	r30, r28
    2722:	ef 70       	andi	r30, 0x0F	; 15
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	8c 2f       	mov	r24, r28
    272c:	cc 0f       	add	r28, r28
    272e:	99 0b       	sbc	r25, r25
    2730:	88 27       	eor	r24, r24
    2732:	99 0f       	add	r25, r25
    2734:	88 1f       	adc	r24, r24
    2736:	99 27       	eor	r25, r25
    2738:	e8 0f       	add	r30, r24
    273a:	f9 1f       	adc	r31, r25
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	e0 50       	subi	r30, 0x00	; 0
    274a:	fe 4d       	sbci	r31, 0xDE	; 222
    274c:	11 8a       	std	Z+17, r1	; 0x11
    274e:	cf 91       	pop	r28
    2750:	08 95       	ret

00002752 <udd_ep_set_halt>:
    2752:	0f 93       	push	r16
    2754:	e8 2f       	mov	r30, r24
    2756:	ef 70       	andi	r30, 0x0F	; 15
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	28 2f       	mov	r18, r24
    2760:	08 2e       	mov	r0, r24
    2762:	00 0c       	add	r0, r0
    2764:	33 0b       	sbc	r19, r19
    2766:	22 27       	eor	r18, r18
    2768:	33 0f       	add	r19, r19
    276a:	22 1f       	adc	r18, r18
    276c:	33 27       	eor	r19, r19
    276e:	e2 0f       	add	r30, r18
    2770:	f3 1f       	adc	r31, r19
    2772:	df 01       	movw	r26, r30
    2774:	aa 0f       	add	r26, r26
    2776:	bb 1f       	adc	r27, r27
    2778:	aa 0f       	add	r26, r26
    277a:	bb 1f       	adc	r27, r27
    277c:	aa 0f       	add	r26, r26
    277e:	bb 1f       	adc	r27, r27
    2780:	a0 50       	subi	r26, 0x00	; 0
    2782:	be 4d       	sbci	r27, 0xDE	; 222
    2784:	51 96       	adiw	r26, 0x11	; 17
    2786:	9c 91       	ld	r25, X
    2788:	51 97       	sbiw	r26, 0x11	; 17
    278a:	94 60       	ori	r25, 0x04	; 4
    278c:	51 96       	adiw	r26, 0x11	; 17
    278e:	9c 93       	st	X, r25
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	ee 0f       	add	r30, r30
    2796:	ff 1f       	adc	r31, r31
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	e0 5f       	subi	r30, 0xF0	; 240
    279e:	fd 4d       	sbci	r31, 0xDD	; 221
    27a0:	01 e0       	ldi	r16, 0x01	; 1
    27a2:	06 93       	lac	Z, r16
    27a4:	71 df       	rcall	.-286    	; 0x2688 <udd_ep_abort>
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	0f 91       	pop	r16
    27aa:	08 95       	ret

000027ac <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    27ac:	1f 92       	push	r1
    27ae:	0f 92       	push	r0
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	0f 92       	push	r0
    27b4:	11 24       	eor	r1, r1
    27b6:	0f 93       	push	r16
    27b8:	2f 93       	push	r18
    27ba:	3f 93       	push	r19
    27bc:	4f 93       	push	r20
    27be:	5f 93       	push	r21
    27c0:	6f 93       	push	r22
    27c2:	7f 93       	push	r23
    27c4:	8f 93       	push	r24
    27c6:	9f 93       	push	r25
    27c8:	af 93       	push	r26
    27ca:	bf 93       	push	r27
    27cc:	ef 93       	push	r30
    27ce:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    27d0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27d4:	88 23       	and	r24, r24
    27d6:	44 f4       	brge	.+16     	; 0x27e8 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    27d8:	80 e8       	ldi	r24, 0x80	; 128
    27da:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    27de:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    27e2:	0e 94 b7 01 	call	0x36e	; 0x36e <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    27e6:	8a c0       	rjmp	.+276    	; 0x28fc <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    27e8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27ec:	82 ff       	sbrs	r24, 2
    27ee:	20 c0       	rjmp	.+64     	; 0x2830 <__vector_125+0x84>
		udd_ack_underflow_event();
    27f0:	84 e0       	ldi	r24, 0x04	; 4
    27f2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    27f6:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udd_sram+0x18>
    27fa:	86 ff       	sbrs	r24, 6
    27fc:	7f c0       	rjmp	.+254    	; 0x28fc <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    27fe:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2802:	81 fd       	sbrc	r24, 1
    2804:	7b c0       	rjmp	.+246    	; 0x28fc <__vector_125+0x150>
    2806:	43 db       	rcall	.-2426   	; 0x1e8e <udd_ctrl_interrupt_tc_setup>
    2808:	81 11       	cpse	r24, r1
    280a:	78 c0       	rjmp	.+240    	; 0x28fc <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    280c:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	11 f4       	brne	.+4      	; 0x2818 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2814:	79 da       	rcall	.-2830   	; 0x1d08 <udd_ctrl_send_zlp_in>
    2816:	72 c0       	rjmp	.+228    	; 0x28fc <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2818:	84 30       	cpi	r24, 0x04	; 4
    281a:	09 f0       	breq	.+2      	; 0x281e <__vector_125+0x72>
    281c:	6f c0       	rjmp	.+222    	; 0x28fc <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    281e:	e9 e1       	ldi	r30, 0x19	; 25
    2820:	f2 e2       	ldi	r31, 0x22	; 34
    2822:	04 e0       	ldi	r16, 0x04	; 4
    2824:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2826:	e1 e1       	ldi	r30, 0x11	; 17
    2828:	f2 e2       	ldi	r31, 0x22	; 34
    282a:	04 e0       	ldi	r16, 0x04	; 4
    282c:	05 93       	las	Z, r16
    282e:	66 c0       	rjmp	.+204    	; 0x28fc <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2830:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2834:	81 ff       	sbrs	r24, 1
    2836:	5d c0       	rjmp	.+186    	; 0x28f2 <__vector_125+0x146>
		udd_ack_overflow_event();
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    283e:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udd_sram+0x10>
    2842:	86 ff       	sbrs	r24, 6
    2844:	5b c0       	rjmp	.+182    	; 0x28fc <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2846:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    284a:	81 fd       	sbrc	r24, 1
    284c:	57 c0       	rjmp	.+174    	; 0x28fc <__vector_125+0x150>
    284e:	1f db       	rcall	.-2498   	; 0x1e8e <udd_ctrl_interrupt_tc_setup>
    2850:	81 11       	cpse	r24, r1
    2852:	54 c0       	rjmp	.+168    	; 0x28fc <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2854:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    2858:	82 30       	cpi	r24, 0x02	; 2
    285a:	41 f4       	brne	.+16     	; 0x286c <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    285c:	84 e0       	ldi	r24, 0x04	; 4
    285e:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2862:	e0 e1       	ldi	r30, 0x10	; 16
    2864:	f2 e2       	ldi	r31, 0x22	; 34
    2866:	02 e0       	ldi	r16, 0x02	; 2
    2868:	06 93       	lac	Z, r16
    286a:	48 c0       	rjmp	.+144    	; 0x28fc <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    286c:	83 30       	cpi	r24, 0x03	; 3
    286e:	09 f0       	breq	.+2      	; 0x2872 <__vector_125+0xc6>
    2870:	45 c0       	rjmp	.+138    	; 0x28fc <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2872:	e9 e1       	ldi	r30, 0x19	; 25
    2874:	f2 e2       	ldi	r31, 0x22	; 34
    2876:	04 e0       	ldi	r16, 0x04	; 4
    2878:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    287a:	e1 e1       	ldi	r30, 0x11	; 17
    287c:	f2 e2       	ldi	r31, 0x22	; 34
    287e:	04 e0       	ldi	r16, 0x04	; 4
    2880:	05 93       	las	Z, r16
    2882:	3c c0       	rjmp	.+120    	; 0x28fc <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2884:	80 e1       	ldi	r24, 0x10	; 16
    2886:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	fd de       	rcall	.-518    	; 0x2688 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    288e:	81 e8       	ldi	r24, 0x81	; 129
    2890:	fb de       	rcall	.-522    	; 0x2688 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	f9 de       	rcall	.-526    	; 0x2688 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2896:	82 e8       	ldi	r24, 0x82	; 130
    2898:	f7 de       	rcall	.-530    	; 0x2688 <udd_ep_abort>
		}
#endif
		udc_reset();
    289a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    289e:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    28a2:	e0 e0       	ldi	r30, 0x00	; 0
    28a4:	f2 e2       	ldi	r31, 0x22	; 34
    28a6:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    28a8:	96 e0       	ldi	r25, 0x06	; 6
    28aa:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    28ac:	83 e4       	ldi	r24, 0x43	; 67
    28ae:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    28b0:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    28b2:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    28b4:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    28b6:	8b eb       	ldi	r24, 0xBB	; 187
    28b8:	91 e2       	ldi	r25, 0x21	; 33
    28ba:	84 8b       	std	Z+20, r24	; 0x14
    28bc:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    28be:	ef d9       	rcall	.-3106   	; 0x1c9e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    28c0:	1d c0       	rjmp	.+58     	; 0x28fc <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    28c2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28c6:	86 ff       	sbrs	r24, 6
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <__vector_125+0x12e>
		udd_ack_suspend_event();
    28ca:	80 e4       	ldi	r24, 0x40	; 64
    28cc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	bc d9       	rcall	.-3208   	; 0x1c4c <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    28d4:	0e 94 b5 01 	call	0x36a	; 0x36a <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    28d8:	11 c0       	rjmp	.+34     	; 0x28fc <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    28da:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28de:	85 ff       	sbrs	r24, 5
    28e0:	0d c0       	rjmp	.+26     	; 0x28fc <__vector_125+0x150>
		udd_ack_resume_event();
    28e2:	80 e2       	ldi	r24, 0x20	; 32
    28e4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	b0 d9       	rcall	.-3232   	; 0x1c4c <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    28ec:	0e 94 b6 01 	call	0x36c	; 0x36c <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    28f0:	05 c0       	rjmp	.+10     	; 0x28fc <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    28f2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    28f6:	84 fd       	sbrc	r24, 4
    28f8:	c5 cf       	rjmp	.-118    	; 0x2884 <__vector_125+0xd8>
    28fa:	e3 cf       	rjmp	.-58     	; 0x28c2 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    28fc:	ff 91       	pop	r31
    28fe:	ef 91       	pop	r30
    2900:	bf 91       	pop	r27
    2902:	af 91       	pop	r26
    2904:	9f 91       	pop	r25
    2906:	8f 91       	pop	r24
    2908:	7f 91       	pop	r23
    290a:	6f 91       	pop	r22
    290c:	5f 91       	pop	r21
    290e:	4f 91       	pop	r20
    2910:	3f 91       	pop	r19
    2912:	2f 91       	pop	r18
    2914:	0f 91       	pop	r16
    2916:	0f 90       	pop	r0
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	0f 90       	pop	r0
    291c:	1f 90       	pop	r1
    291e:	18 95       	reti

00002920 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2920:	1f 92       	push	r1
    2922:	0f 92       	push	r0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	0f 92       	push	r0
    2928:	11 24       	eor	r1, r1
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	2f 93       	push	r18
    2930:	3f 93       	push	r19
    2932:	4f 93       	push	r20
    2934:	5f 93       	push	r21
    2936:	6f 93       	push	r22
    2938:	7f 93       	push	r23
    293a:	8f 93       	push	r24
    293c:	9f 93       	push	r25
    293e:	af 93       	push	r26
    2940:	bf 93       	push	r27
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	ef 93       	push	r30
    2948:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    294a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    294e:	81 fd       	sbrc	r24, 1
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2952:	9d da       	rcall	.-2758   	; 0x1e8e <udd_ctrl_interrupt_tc_setup>
    2954:	81 11       	cpse	r24, r1
    2956:	b9 c0       	rjmp	.+370    	; 0x2aca <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2958:	82 e0       	ldi	r24, 0x02	; 2
    295a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    295e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2962:	81 95       	neg	r24
    2964:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2966:	e0 e1       	ldi	r30, 0x10	; 16
    2968:	f2 e2       	ldi	r31, 0x22	; 34
    296a:	e8 1b       	sub	r30, r24
    296c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    296e:	20 81       	ld	r18, Z
    2970:	31 81       	ldd	r19, Z+1	; 0x01
    2972:	20 51       	subi	r18, 0x10	; 16
    2974:	32 42       	sbci	r19, 0x22	; 34
    2976:	36 95       	lsr	r19
    2978:	27 95       	ror	r18
    297a:	36 95       	lsr	r19
    297c:	27 95       	ror	r18
    297e:	36 95       	lsr	r19
    2980:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2982:	82 2f       	mov	r24, r18
    2984:	86 95       	lsr	r24
    2986:	20 fd       	sbrc	r18, 0
    2988:	02 c0       	rjmp	.+4      	; 0x298e <__vector_126+0x6e>
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	01 c0       	rjmp	.+2      	; 0x2990 <__vector_126+0x70>
    298e:	90 e8       	ldi	r25, 0x80	; 128
    2990:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2992:	e8 2f       	mov	r30, r24
    2994:	ef 70       	andi	r30, 0x0F	; 15
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	ee 0f       	add	r30, r30
    299a:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    299c:	28 2f       	mov	r18, r24
    299e:	08 2e       	mov	r0, r24
    29a0:	00 0c       	add	r0, r0
    29a2:	33 0b       	sbc	r19, r19
    29a4:	22 27       	eor	r18, r18
    29a6:	33 0f       	add	r19, r19
    29a8:	22 1f       	adc	r18, r18
    29aa:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    29ac:	e2 0f       	add	r30, r18
    29ae:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    29b0:	df 01       	movw	r26, r30
    29b2:	aa 0f       	add	r26, r26
    29b4:	bb 1f       	adc	r27, r27
    29b6:	aa 0f       	add	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	aa 0f       	add	r26, r26
    29bc:	bb 1f       	adc	r27, r27
    29be:	a0 5f       	subi	r26, 0xF0	; 240
    29c0:	bd 4d       	sbci	r27, 0xDD	; 221
    29c2:	9c 91       	ld	r25, X
    29c4:	95 ff       	sbrs	r25, 5
    29c6:	81 c0       	rjmp	.+258    	; 0x2aca <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    29c8:	fd 01       	movw	r30, r26
    29ca:	00 e2       	ldi	r16, 0x20	; 32
    29cc:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    29ce:	81 11       	cpse	r24, r1
    29d0:	77 c0       	rjmp	.+238    	; 0x2ac0 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    29d2:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    29d6:	84 30       	cpi	r24, 0x04	; 4
    29d8:	19 f4       	brne	.+6      	; 0x29e0 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    29da:	a4 d9       	rcall	.-3256   	; 0x1d24 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    29dc:	60 d9       	rcall	.-3392   	; 0x1c9e <udd_ctrl_init>
    29de:	75 c0       	rjmp	.+234    	; 0x2aca <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    29e0:	00 91 12 22 	lds	r16, 0x2212	; 0x802212 <udd_sram+0x12>
    29e4:	10 91 13 22 	lds	r17, 0x2213	; 0x802213 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    29e8:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0xa>
    29ec:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0xb>
    29f0:	c0 91 fb 21 	lds	r28, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    29f4:	d0 91 fc 21 	lds	r29, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    29f8:	9e 01       	movw	r18, r28
    29fa:	20 0f       	add	r18, r16
    29fc:	31 1f       	adc	r19, r17
    29fe:	82 17       	cp	r24, r18
    2a00:	93 07       	cpc	r25, r19
    2a02:	18 f4       	brcc	.+6      	; 0x2a0a <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2a04:	8c 01       	movw	r16, r24
    2a06:	0c 1b       	sub	r16, r28
    2a08:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2a0a:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x8>
    2a0e:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <udd_g_ctrlreq+0x9>
    2a12:	a8 01       	movw	r20, r16
    2a14:	6b eb       	ldi	r22, 0xBB	; 187
    2a16:	71 e2       	ldi	r23, 0x21	; 33
    2a18:	8c 0f       	add	r24, r28
    2a1a:	9d 1f       	adc	r25, r29
    2a1c:	85 d0       	rcall	.+266    	; 0x2b28 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2a1e:	c0 0f       	add	r28, r16
    2a20:	d1 1f       	adc	r29, r17
    2a22:	c0 93 fb 21 	sts	0x21FB, r28	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2a26:	d0 93 fc 21 	sts	0x21FC, r29	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2a2a:	00 34       	cpi	r16, 0x40	; 64
    2a2c:	11 05       	cpc	r17, r1
    2a2e:	69 f4       	brne	.+26     	; 0x2a4a <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2a30:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2a34:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    2a38:	8c 0f       	add	r24, r28
    2a3a:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2a3c:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    2a40:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    2a44:	82 17       	cp	r24, r18
    2a46:	93 07       	cpc	r25, r19
    2a48:	80 f0       	brcs	.+32     	; 0x2a6a <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2a4a:	ea e5       	ldi	r30, 0x5A	; 90
    2a4c:	f4 e2       	ldi	r31, 0x24	; 36
    2a4e:	c2 87       	std	Z+10, r28	; 0x0a
    2a50:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2a52:	06 84       	ldd	r0, Z+14	; 0x0e
    2a54:	f7 85       	ldd	r31, Z+15	; 0x0f
    2a56:	e0 2d       	mov	r30, r0
    2a58:	30 97       	sbiw	r30, 0x00	; 0
    2a5a:	29 f0       	breq	.+10     	; 0x2a66 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2a5c:	09 95       	icall
    2a5e:	81 11       	cpse	r24, r1
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2a62:	44 d9       	rcall	.-3448   	; 0x1cec <udd_ctrl_stall_data>
    2a64:	32 c0       	rjmp	.+100    	; 0x2aca <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2a66:	50 d9       	rcall	.-3424   	; 0x1d08 <udd_ctrl_send_zlp_in>
    2a68:	30 c0       	rjmp	.+96     	; 0x2aca <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2a6a:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0xa>
    2a6e:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0xb>
    2a72:	c8 17       	cp	r28, r24
    2a74:	d9 07       	cpc	r29, r25
    2a76:	f9 f4       	brne	.+62     	; 0x2ab6 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2a78:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <udd_g_ctrlreq+0xe>
    2a7c:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <udd_g_ctrlreq+0xf>
    2a80:	30 97       	sbiw	r30, 0x00	; 0
    2a82:	11 f4       	brne	.+4      	; 0x2a88 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2a84:	33 d9       	rcall	.-3482   	; 0x1cec <udd_ctrl_stall_data>
    2a86:	21 c0       	rjmp	.+66     	; 0x2aca <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2a88:	09 95       	icall
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2a8e:	2e d9       	rcall	.-3492   	; 0x1cec <udd_ctrl_stall_data>
    2a90:	1c c0       	rjmp	.+56     	; 0x2aca <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2a92:	20 91 fd 21 	lds	r18, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2a96:	30 91 fe 21 	lds	r19, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    2a9a:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2a9e:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    2aa2:	82 0f       	add	r24, r18
    2aa4:	93 1f       	adc	r25, r19
    2aa6:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2aaa:	90 93 fe 21 	sts	0x21FE, r25	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2aae:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2ab2:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2ab6:	e0 e1       	ldi	r30, 0x10	; 16
    2ab8:	f2 e2       	ldi	r31, 0x22	; 34
    2aba:	02 e0       	ldi	r16, 0x02	; 2
    2abc:	06 93       	lac	Z, r16
    2abe:	05 c0       	rjmp	.+10     	; 0x2aca <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2ac0:	80 38       	cpi	r24, 0x80	; 128
    2ac2:	11 f4       	brne	.+4      	; 0x2ac8 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2ac4:	37 d9       	rcall	.-3474   	; 0x1d34 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2ac8:	51 da       	rcall	.-2910   	; 0x1f6c <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	bf 91       	pop	r27
    2ad4:	af 91       	pop	r26
    2ad6:	9f 91       	pop	r25
    2ad8:	8f 91       	pop	r24
    2ada:	7f 91       	pop	r23
    2adc:	6f 91       	pop	r22
    2ade:	5f 91       	pop	r21
    2ae0:	4f 91       	pop	r20
    2ae2:	3f 91       	pop	r19
    2ae4:	2f 91       	pop	r18
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	0f 90       	pop	r0
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	0f 90       	pop	r0
    2af0:	1f 90       	pop	r1
    2af2:	18 95       	reti

00002af4 <__udivmodhi4>:
    2af4:	aa 1b       	sub	r26, r26
    2af6:	bb 1b       	sub	r27, r27
    2af8:	51 e1       	ldi	r21, 0x11	; 17
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <__udivmodhi4_ep>

00002afc <__udivmodhi4_loop>:
    2afc:	aa 1f       	adc	r26, r26
    2afe:	bb 1f       	adc	r27, r27
    2b00:	a6 17       	cp	r26, r22
    2b02:	b7 07       	cpc	r27, r23
    2b04:	10 f0       	brcs	.+4      	; 0x2b0a <__udivmodhi4_ep>
    2b06:	a6 1b       	sub	r26, r22
    2b08:	b7 0b       	sbc	r27, r23

00002b0a <__udivmodhi4_ep>:
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	5a 95       	dec	r21
    2b10:	a9 f7       	brne	.-22     	; 0x2afc <__udivmodhi4_loop>
    2b12:	80 95       	com	r24
    2b14:	90 95       	com	r25
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	08 95       	ret

00002b1c <__tablejump2__>:
    2b1c:	ee 0f       	add	r30, r30
    2b1e:	ff 1f       	adc	r31, r31
    2b20:	05 90       	lpm	r0, Z+
    2b22:	f4 91       	lpm	r31, Z
    2b24:	e0 2d       	mov	r30, r0
    2b26:	09 94       	ijmp

00002b28 <memcpy>:
    2b28:	fb 01       	movw	r30, r22
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <memcpy+0xa>
    2b2e:	01 90       	ld	r0, Z+
    2b30:	0d 92       	st	X+, r0
    2b32:	41 50       	subi	r20, 0x01	; 1
    2b34:	50 40       	sbci	r21, 0x00	; 0
    2b36:	d8 f7       	brcc	.-10     	; 0x2b2e <memcpy+0x6>
    2b38:	08 95       	ret

00002b3a <_exit>:
    2b3a:	f8 94       	cli

00002b3c <__stop_program>:
    2b3c:	ff cf       	rjmp	.-2      	; 0x2b3c <__stop_program>
