
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000303a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00802000  0000303a  000030d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d44  008020ac  008020ac  0000317c  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000317c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  000031f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dc97  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024cd  00000000  00000000  00011487  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000abf1  00000000  00000000  00013954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f2c  00000000  00000000  0001e548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003086e  00000000  00000000  0001f474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003802  00000000  00000000  0004fce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  000534e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c398  00000000  00000000  00053a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__vector_6>
      1c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_7>
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c1       	rjmp	.+586    	; 0x274 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c1       	rjmp	.+534    	; 0x274 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_24>
      64:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_25>
      68:	05 c1       	rjmp	.+522    	; 0x274 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop
      98:	ed c0       	rjmp	.+474    	; 0x274 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	eb c0       	rjmp	.+470    	; 0x274 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e9 c0       	rjmp	.+466    	; 0x274 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e7 c0       	rjmp	.+462    	; 0x274 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e5 c0       	rjmp	.+458    	; 0x274 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e3 c0       	rjmp	.+454    	; 0x274 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e1 c0       	rjmp	.+450    	; 0x274 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	df c0       	rjmp	.+446    	; 0x274 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dd c0       	rjmp	.+442    	; 0x274 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c0       	rjmp	.+438    	; 0x274 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d9 c0       	rjmp	.+434    	; 0x274 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d7 c0       	rjmp	.+430    	; 0x274 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d5 c0       	rjmp	.+426    	; 0x274 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d3 c0       	rjmp	.+422    	; 0x274 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d1 c0       	rjmp	.+418    	; 0x274 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cf c0       	rjmp	.+414    	; 0x274 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cd c0       	rjmp	.+410    	; 0x274 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cb c0       	rjmp	.+406    	; 0x274 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c9 c0       	rjmp	.+402    	; 0x274 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c7 c0       	rjmp	.+398    	; 0x274 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c5 c0       	rjmp	.+394    	; 0x274 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c3 c0       	rjmp	.+390    	; 0x274 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c1 c0       	rjmp	.+386    	; 0x274 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bf c0       	rjmp	.+382    	; 0x274 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	bd c0       	rjmp	.+378    	; 0x274 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	bb c0       	rjmp	.+374    	; 0x274 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b9 c0       	rjmp	.+370    	; 0x274 <__bad_interrupt>
     102:	00 00       	nop
     104:	b7 c0       	rjmp	.+366    	; 0x274 <__bad_interrupt>
     106:	00 00       	nop
     108:	b5 c0       	rjmp	.+362    	; 0x274 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b3 c0       	rjmp	.+358    	; 0x274 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b1 c0       	rjmp	.+354    	; 0x274 <__bad_interrupt>
     112:	00 00       	nop
     114:	af c0       	rjmp	.+350    	; 0x274 <__bad_interrupt>
     116:	00 00       	nop
     118:	ad c0       	rjmp	.+346    	; 0x274 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	f2 c4       	rjmp	.+2532   	; 0xb02 <__vector_71>
     11e:	00 00       	nop
     120:	a9 c0       	rjmp	.+338    	; 0x274 <__bad_interrupt>
     122:	00 00       	nop
     124:	a7 c0       	rjmp	.+334    	; 0x274 <__bad_interrupt>
     126:	00 00       	nop
     128:	a5 c0       	rjmp	.+330    	; 0x274 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a3 c0       	rjmp	.+326    	; 0x274 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a1 c0       	rjmp	.+322    	; 0x274 <__bad_interrupt>
     132:	00 00       	nop
     134:	9f c0       	rjmp	.+318    	; 0x274 <__bad_interrupt>
     136:	00 00       	nop
     138:	9d c0       	rjmp	.+314    	; 0x274 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	9b c0       	rjmp	.+310    	; 0x274 <__bad_interrupt>
     13e:	00 00       	nop
     140:	99 c0       	rjmp	.+306    	; 0x274 <__bad_interrupt>
     142:	00 00       	nop
     144:	97 c0       	rjmp	.+302    	; 0x274 <__bad_interrupt>
     146:	00 00       	nop
     148:	95 c0       	rjmp	.+298    	; 0x274 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_83>
     150:	91 c0       	rjmp	.+290    	; 0x274 <__bad_interrupt>
     152:	00 00       	nop
     154:	8f c0       	rjmp	.+286    	; 0x274 <__bad_interrupt>
     156:	00 00       	nop
     158:	8d c0       	rjmp	.+282    	; 0x274 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	8b c0       	rjmp	.+278    	; 0x274 <__bad_interrupt>
     15e:	00 00       	nop
     160:	89 c0       	rjmp	.+274    	; 0x274 <__bad_interrupt>
     162:	00 00       	nop
     164:	87 c0       	rjmp	.+270    	; 0x274 <__bad_interrupt>
     166:	00 00       	nop
     168:	85 c0       	rjmp	.+266    	; 0x274 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	83 c0       	rjmp	.+262    	; 0x274 <__bad_interrupt>
     16e:	00 00       	nop
     170:	81 c0       	rjmp	.+258    	; 0x274 <__bad_interrupt>
     172:	00 00       	nop
     174:	7f c0       	rjmp	.+254    	; 0x274 <__bad_interrupt>
     176:	00 00       	nop
     178:	7d c0       	rjmp	.+250    	; 0x274 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	7b c0       	rjmp	.+246    	; 0x274 <__bad_interrupt>
     17e:	00 00       	nop
     180:	79 c0       	rjmp	.+242    	; 0x274 <__bad_interrupt>
     182:	00 00       	nop
     184:	77 c0       	rjmp	.+238    	; 0x274 <__bad_interrupt>
     186:	00 00       	nop
     188:	75 c0       	rjmp	.+234    	; 0x274 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	73 c0       	rjmp	.+230    	; 0x274 <__bad_interrupt>
     18e:	00 00       	nop
     190:	71 c0       	rjmp	.+226    	; 0x274 <__bad_interrupt>
     192:	00 00       	nop
     194:	6f c0       	rjmp	.+222    	; 0x274 <__bad_interrupt>
     196:	00 00       	nop
     198:	6d c0       	rjmp	.+218    	; 0x274 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	6b c0       	rjmp	.+214    	; 0x274 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	69 c0       	rjmp	.+210    	; 0x274 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	67 c0       	rjmp	.+206    	; 0x274 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	65 c0       	rjmp	.+202    	; 0x274 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	63 c0       	rjmp	.+198    	; 0x274 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5f c0       	rjmp	.+190    	; 0x274 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5d c0       	rjmp	.+186    	; 0x274 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	5b c0       	rjmp	.+182    	; 0x274 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	59 c0       	rjmp	.+178    	; 0x274 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	57 c0       	rjmp	.+174    	; 0x274 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	55 c0       	rjmp	.+170    	; 0x274 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	53 c0       	rjmp	.+166    	; 0x274 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	51 c0       	rjmp	.+162    	; 0x274 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4f c0       	rjmp	.+158    	; 0x274 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4d c0       	rjmp	.+154    	; 0x274 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	4b c0       	rjmp	.+150    	; 0x274 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	49 c0       	rjmp	.+146    	; 0x274 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	47 c0       	rjmp	.+142    	; 0x274 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	45 c0       	rjmp	.+138    	; 0x274 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	43 c0       	rjmp	.+134    	; 0x274 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	41 c0       	rjmp	.+130    	; 0x274 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__vector_125>
     1f8:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__vector_126>
     1fc:	44 04       	cpc	r4, r4
     1fe:	46 04       	cpc	r4, r6
     200:	48 04       	cpc	r4, r8
     202:	4a 04       	cpc	r4, r10
     204:	4c 04       	cpc	r4, r12
     206:	4e 04       	cpc	r4, r14
     208:	50 04       	cpc	r5, r0
     20a:	52 04       	cpc	r5, r2
     20c:	a5 0c       	add	r10, r5
     20e:	ca 0c       	add	r12, r10
     210:	ed 0c       	add	r14, r13
     212:	10 0d       	add	r17, r0
     214:	19 0d       	add	r17, r9
     216:	1e 0d       	add	r17, r14
     218:	74 0d       	add	r23, r4
     21a:	79 0d       	add	r23, r9
     21c:	98 0d       	add	r25, r8
     21e:	2a 0d       	add	r18, r10
     220:	34 0d       	add	r19, r4
     222:	3e 0d       	add	r19, r14
     224:	4c 0d       	add	r20, r12
     226:	4f 0d       	add	r20, r15
     228:	52 0d       	add	r21, r2
     22a:	5d 0d       	add	r21, r13
     22c:	68 0d       	add	r22, r8
     22e:	6a 11       	cpse	r22, r10
     230:	6d 11       	cpse	r22, r13
     232:	70 11       	cpse	r23, r0
     234:	73 11       	cpse	r23, r3
     236:	76 11       	cpse	r23, r6
     238:	79 11       	cpse	r23, r9
     23a:	7c 11       	cpse	r23, r12

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df e2       	ldi	r29, 0x2F	; 47
     246:	de bf       	out	0x3e, r29	; 62

00000248 <__do_copy_data>:
     248:	10 e2       	ldi	r17, 0x20	; 32
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	ea e3       	ldi	r30, 0x3A	; 58
     250:	f0 e3       	ldi	r31, 0x30	; 48
     252:	02 c0       	rjmp	.+4      	; 0x258 <__do_copy_data+0x10>
     254:	05 90       	lpm	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	ac 3a       	cpi	r26, 0xAC	; 172
     25a:	b1 07       	cpc	r27, r17
     25c:	d9 f7       	brne	.-10     	; 0x254 <__do_copy_data+0xc>

0000025e <__do_clear_bss>:
     25e:	2d e2       	ldi	r18, 0x2D	; 45
     260:	ac ea       	ldi	r26, 0xAC	; 172
     262:	b0 e2       	ldi	r27, 0x20	; 32
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a0 3f       	cpi	r26, 0xF0	; 240
     26a:	b2 07       	cpc	r27, r18
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>
     26e:	bf d2       	rcall	.+1406   	; 0x7ee <main>
     270:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <_exit>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	8e 83       	std	Y+6, r24	; 0x06
     282:	8c e1       	ldi	r24, 0x1C	; 28
     284:	f8 d3       	rcall	.+2032   	; 0xa76 <ReadCalibrationByte>
     286:	e0 e6       	ldi	r30, 0x60	; 96
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	83 83       	std	Z+3, r24	; 0x03
     28c:	8b eb       	ldi	r24, 0xBB	; 187
     28e:	86 83       	std	Z+6, r24	; 0x06
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	85 83       	std	Z+5, r24	; 0x05
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	88 ed       	ldi	r24, 0xD8	; 216
     29a:	84 bf       	out	0x34, r24	; 52
     29c:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	88 83       	st	Y, r24
     2a4:	e0 e5       	ldi	r30, 0x50	; 80
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	81 81       	ldd	r24, Z+1	; 0x01
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	e9 f7       	brne	.-6      	; 0x2a8 <tiny_calibration_init+0x32>
     2ae:	e0 e5       	ldi	r30, 0x50	; 80
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	80 83       	st	Z, r24
     2b8:	88 e1       	ldi	r24, 0x18	; 24
     2ba:	85 83       	std	Z+5, r24	; 0x05
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	80 ff       	sbrs	r24, 0
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <tiny_calibration_init+0x46>
     2c2:	e0 e5       	ldi	r30, 0x50	; 80
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 83       	st	Z, r24
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	84 ff       	sbrs	r24, 4
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x56>
     2d2:	88 ed       	ldi	r24, 0xD8	; 216
     2d4:	84 bf       	out	0x34, r24	; 52
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <tiny_calibration_first_sof>:
     2e2:	e0 e7       	ldi	r30, 0x70	; 112
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	85 81       	ldd	r24, Z+5	; 0x05
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	85 83       	std	Z+5, r24	; 0x05
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	8f eb       	ldi	r24, 0xBF	; 191
     2f2:	9d e5       	ldi	r25, 0x5D	; 93
     2f4:	86 a3       	std	Z+38, r24	; 0x26
     2f6:	97 a3       	std	Z+39, r25	; 0x27
     2f8:	80 ee       	ldi	r24, 0xE0	; 224
     2fa:	9e e2       	ldi	r25, 0x2E	; 46
     2fc:	80 a3       	std	Z+32, r24	; 0x20
     2fe:	91 a3       	std	Z+33, r25	; 0x21
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
     304:	08 95       	ret

00000306 <tiny_calibration_maintain>:
     306:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     30a:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     30e:	81 3e       	cpi	r24, 0xE1	; 225
     310:	2e e2       	ldi	r18, 0x2E	; 46
     312:	92 07       	cpc	r25, r18
     314:	20 f0       	brcs	.+8      	; 0x31e <tiny_calibration_maintain+0x18>
     316:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <cali_value_negative_gradient>
     31a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     31e:	80 3e       	cpi	r24, 0xE0	; 224
     320:	2e e2       	ldi	r18, 0x2E	; 46
     322:	92 07       	cpc	r25, r18
     324:	20 f4       	brcc	.+8      	; 0x32e <tiny_calibration_maintain+0x28>
     326:	20 91 8f 23 	lds	r18, 0x238F	; 0x80238f <cali_value_positive_gradient>
     32a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     32e:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     332:	22 23       	and	r18, r18
     334:	31 f0       	breq	.+12     	; 0x342 <tiny_calibration_maintain+0x3c>
     336:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     340:	35 c0       	rjmp	.+106    	; 0x3ac <tiny_calibration_maintain+0xa6>
     342:	88 5f       	subi	r24, 0xF8	; 248
     344:	9a 42       	sbci	r25, 0x2A	; 42
     346:	81 3d       	cpi	r24, 0xD1	; 209
     348:	97 40       	sbci	r25, 0x07	; 7
     34a:	80 f1       	brcs	.+96     	; 0x3ac <tiny_calibration_maintain+0xa6>
     34c:	10 92 ac 20 	sts	0x20AC, r1	; 0x8020ac <__data_end>
     350:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     354:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     358:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     35c:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	a1 1d       	adc	r26, r1
     364:	b1 1d       	adc	r27, r1
     366:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <outOfRange>
     36a:	90 93 ae 20 	sts	0x20AE, r25	; 0x8020ae <outOfRange+0x1>
     36e:	a0 93 af 20 	sts	0x20AF, r26	; 0x8020af <outOfRange+0x2>
     372:	b0 93 b0 20 	sts	0x20B0, r27	; 0x8020b0 <outOfRange+0x3>
     376:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     37a:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     37e:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     382:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     386:	89 2f       	mov	r24, r25
     388:	9a 2f       	mov	r25, r26
     38a:	ab 2f       	mov	r26, r27
     38c:	bb 27       	eor	r27, r27
     38e:	ee e9       	ldi	r30, 0x9E	; 158
     390:	f3 e2       	ldi	r31, 0x23	; 35
     392:	84 8b       	std	Z+20, r24	; 0x14
     394:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     398:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     39c:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     3a0:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     3a4:	83 8b       	std	Z+19, r24	; 0x13
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3ac:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3b0:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b1 f4       	brne	.+44     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3b8:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3bc:	8f 3f       	cpi	r24, 0xFF	; 255
     3be:	91 f0       	breq	.+36     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3c0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3c4:	81 11       	cpse	r24, r1
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <tiny_calibration_maintain+0xce>
     3c8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3d2:	08 95       	ret
     3d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3dc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3e0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3e4:	08 95       	ret

000003e6 <tiny_calibration_safe_add>:
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	09 f4       	brne	.+2      	; 0x3ec <tiny_calibration_safe_add+0x6>
     3ea:	66 c0       	rjmp	.+204    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <tiny_calibration_safe_add+0xa>
     3ee:	9c 01       	movw	r18, r24
     3f0:	99 23       	and	r25, r25
     3f2:	34 f4       	brge	.+12     	; 0x400 <__FUSE_REGION_LENGTH__>
     3f4:	22 27       	eor	r18, r18
     3f6:	33 27       	eor	r19, r19
     3f8:	28 1b       	sub	r18, r24
     3fa:	39 0b       	sbc	r19, r25
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	e8 e6       	ldi	r30, 0x68	; 104
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	83 81       	ldd	r24, Z+3	; 0x03
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     40e:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     412:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     416:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     41a:	96 95       	lsr	r25
     41c:	98 2f       	mov	r25, r24
     41e:	88 27       	eor	r24, r24
     420:	97 95       	ror	r25
     422:	87 95       	ror	r24
     424:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     428:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     42c:	42 81       	ldd	r20, Z+2	; 0x02
     42e:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     432:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     436:	84 0f       	add	r24, r20
     438:	91 1d       	adc	r25, r1
     43a:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     43e:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     442:	00 00       	nop
     444:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     448:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	28 f4       	brcc	.+10     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
     452:	10 92 90 23 	sts	0x2390, r1	; 0x802390 <calTemp>
     456:	10 92 91 23 	sts	0x2391, r1	; 0x802391 <calTemp+0x1>
     45a:	08 95       	ret
     45c:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     460:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	81 15       	cp	r24, r1
     46a:	90 42       	sbci	r25, 0x20	; 32
     46c:	38 f0       	brcs	.+14     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	9f e1       	ldi	r25, 0x1F	; 31
     472:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     476:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     47a:	08 95       	ret
     47c:	55 23       	and	r21, r21
     47e:	59 f0       	breq	.+22     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     480:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     484:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     488:	82 1b       	sub	r24, r18
     48a:	93 0b       	sbc	r25, r19
     48c:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     490:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     496:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     49a:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     49e:	28 0f       	add	r18, r24
     4a0:	39 1f       	adc	r19, r25
     4a2:	20 93 90 23 	sts	0x2390, r18	; 0x802390 <calTemp>
     4a6:	30 93 91 23 	sts	0x2391, r19	; 0x802391 <calTemp+0x1>
     4aa:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     4ae:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     4b2:	8f 77       	andi	r24, 0x7F	; 127
     4b4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4b8:	08 95       	ret

000004ba <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4be:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4c2:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4c6:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4ca:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4ce:	9e 01       	movw	r18, r28
     4d0:	28 1b       	sub	r18, r24
     4d2:	39 0b       	sbc	r19, r25
     4d4:	20 93 93 23 	sts	0x2393, r18	; 0x802393 <gradient>
     4d8:	30 93 94 23 	sts	0x2394, r19	; 0x802394 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4dc:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     4e0:	81 11       	cpse	r24, r1
     4e2:	4d c0       	rjmp	.+154    	; 0x57e <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4e4:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     4e8:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     4ec:	8e 3c       	cpi	r24, 0xCE	; 206
     4ee:	9f 4f       	sbci	r25, 0xFF	; 255
     4f0:	e4 f4       	brge	.+56     	; 0x52a <tiny_calibration_find_values+0x70>
     4f2:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     4f6:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     4fa:	8b 36       	cpi	r24, 0x6B	; 107
     4fc:	9f 4f       	sbci	r25, 0xFF	; 255
     4fe:	ac f0       	brlt	.+42     	; 0x52a <tiny_calibration_find_values+0x70>
			if(inarow){
     500:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     504:	88 23       	and	r24, r24
     506:	31 f0       	breq	.+12     	; 0x514 <tiny_calibration_find_values+0x5a>
				inarow--;
     508:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     512:	35 c0       	rjmp	.+106    	; 0x57e <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     514:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     518:	80 93 92 23 	sts	0x2392, r24	; 0x802392 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 ac 20 	sts	0x20AC, r24	; 0x8020ac <__data_end>
				inarow = NUM_INAROW;
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     528:	2a c0       	rjmp	.+84     	; 0x57e <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     52a:	8c e0       	ldi	r24, 0x0C	; 12
     52c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     530:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     534:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     538:	8a 36       	cpi	r24, 0x6A	; 106
     53a:	9f 4f       	sbci	r25, 0xFF	; 255
     53c:	1c f0       	brlt	.+6      	; 0x544 <tiny_calibration_find_values+0x8a>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	02 c0       	rjmp	.+4      	; 0x548 <tiny_calibration_find_values+0x8e>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	80 93 8d 23 	sts	0x238D, r24	; 0x80238d <calChange>
     54c:	90 93 8e 23 	sts	0x238E, r25	; 0x80238e <calChange+0x1>
			calChange -= gradient / 48;
     550:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     554:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     558:	20 91 8d 23 	lds	r18, 0x238D	; 0x80238d <calChange>
     55c:	30 91 8e 23 	lds	r19, 0x238E	; 0x80238e <calChange+0x1>
     560:	60 e3       	ldi	r22, 0x30	; 48
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodhi4>
     568:	26 1b       	sub	r18, r22
     56a:	37 0b       	sbc	r19, r23
     56c:	20 93 8d 23 	sts	0x238D, r18	; 0x80238d <calChange>
     570:	30 93 8e 23 	sts	0x238E, r19	; 0x80238e <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     574:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <calChange>
     578:	90 91 8e 23 	lds	r25, 0x238E	; 0x80238e <calChange+0x1>
     57c:	34 df       	rcall	.-408    	; 0x3e6 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     57e:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	29 f5       	brne	.+74     	; 0x5d0 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     586:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     58a:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     58e:	c3 97       	sbiw	r24, 0x33	; 51
     590:	94 f0       	brlt	.+36     	; 0x5b6 <tiny_calibration_find_values+0xfc>
			if(inarow){
     592:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     596:	88 23       	and	r24, r24
     598:	31 f0       	breq	.+12     	; 0x5a6 <tiny_calibration_find_values+0xec>
				inarow--;
     59a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5a4:	15 c0       	rjmp	.+42     	; 0x5d0 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5a6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5aa:	80 93 8f 23 	sts	0x238F, r24	; 0x80238f <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	80 93 ac 20 	sts	0x20AC, r24	; 0x8020ac <__data_end>
     5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5b6:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     5ba:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     5be:	87 39       	cpi	r24, 0x97	; 151
     5c0:	91 05       	cpc	r25, r1
     5c2:	1c f4       	brge	.+6      	; 0x5ca <tiny_calibration_find_values+0x110>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <tiny_calibration_find_values+0x114>
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	0b df       	rcall	.-490    	; 0x3e6 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5d0:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5d4:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5de:	86 17       	cp	r24, r22
     5e0:	97 07       	cpc	r25, r23
     5e2:	79 f0       	breq	.+30     	; 0x602 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5e4:	68 17       	cp	r22, r24
     5e6:	79 07       	cpc	r23, r25
     5e8:	28 f4       	brcc	.+10     	; 0x5f4 <magnitude_difference+0x16>
     5ea:	9c 01       	movw	r18, r24
     5ec:	26 1b       	sub	r18, r22
     5ee:	37 0b       	sbc	r19, r23
     5f0:	b9 01       	movw	r22, r18
     5f2:	09 c0       	rjmp	.+18     	; 0x606 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5f4:	86 17       	cp	r24, r22
     5f6:	97 07       	cpc	r25, r23
     5f8:	18 f4       	brcc	.+6      	; 0x600 <magnitude_difference+0x22>
     5fa:	68 1b       	sub	r22, r24
     5fc:	79 0b       	sbc	r23, r25
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <magnitude_difference+0x28>
     600:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	86 2f       	mov	r24, r22
     608:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     60a:	08 95       	ret

0000060c <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     614:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     618:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     61c:	89 2b       	or	r24, r25
     61e:	51 f0       	breq	.+20     	; 0x634 <tiny_calibration_layer2+0x28>
		layer2_counter--;
     620:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     624:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     62e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     632:	4d c0       	rjmp	.+154    	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	layer2_counter = LAYER2_INTERVAL;
     634:	80 e4       	ldi	r24, 0x40	; 64
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     63c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     640:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     644:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <tiny_calibration_layer2+0x42>
     64c:	40 c0       	rjmp	.+128    	; 0x6ce <tiny_calibration_layer2+0xc2>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     64e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     652:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	TRFCNT_temp = TRFCNT_temp % (global_mode > 5 ? PACKET_SIZE : HALFPACKET_SIZE);
     656:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <global_mode>
     65a:	26 30       	cpi	r18, 0x06	; 6
     65c:	18 f4       	brcc	.+6      	; 0x664 <tiny_calibration_layer2+0x58>
     65e:	67 e7       	ldi	r22, 0x77	; 119
     660:	71 e0       	ldi	r23, 0x01	; 1
     662:	02 c0       	rjmp	.+4      	; 0x668 <tiny_calibration_layer2+0x5c>
     664:	6e ee       	ldi	r22, 0xEE	; 238
     666:	72 e0       	ldi	r23, 0x02	; 2
     668:	0e 94 e5 17 	call	0x2fca	; 0x2fca <__udivmodhi4>
     66c:	08 2f       	mov	r16, r24
     66e:	19 2f       	mov	r17, r25
     670:	c8 2f       	mov	r28, r24
     672:	d1 2f       	mov	r29, r17
	
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     674:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     678:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     67c:	8c 17       	cp	r24, r28
     67e:	9d 07       	cpc	r25, r29
     680:	80 f4       	brcc	.+32     	; 0x6a2 <tiny_calibration_layer2+0x96>
     682:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     686:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68a:	80 2f       	mov	r24, r16
     68c:	91 2f       	mov	r25, r17
     68e:	a7 df       	rcall	.-178    	; 0x5de <magnitude_difference>
     690:	02 97       	sbiw	r24, 0x02	; 2
     692:	38 f0       	brcs	.+14     	; 0x6a2 <tiny_calibration_layer2+0x96>
		TC_CALI.PERBUF = 24000;
     694:	80 ec       	ldi	r24, 0xC0	; 192
     696:	9d e5       	ldi	r25, 0x5D	; 93
     698:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     69c:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6a0:	16 c0       	rjmp	.+44     	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6a2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6a6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6aa:	c8 17       	cp	r28, r24
     6ac:	d9 07       	cpc	r29, r25
     6ae:	78 f4       	brcc	.+30     	; 0x6ce <tiny_calibration_layer2+0xc2>
     6b0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6b4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6b8:	80 2f       	mov	r24, r16
     6ba:	91 2f       	mov	r25, r17
     6bc:	90 df       	rcall	.-224    	; 0x5de <magnitude_difference>
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	30 f0       	brcs	.+12     	; 0x6ce <tiny_calibration_layer2+0xc2>
		TC_CALI.PERBUF = 23999;
     6c2:	8f eb       	ldi	r24, 0xBF	; 191
     6c4:	9d e5       	ldi	r25, 0x5D	; 93
     6c6:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ca:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6d8:	ac 01       	movw	r20, r24
     6da:	46 0f       	add	r20, r22
     6dc:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6de:	86 1b       	sub	r24, r22
     6e0:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6e2:	e0 e0       	ldi	r30, 0x00	; 0
     6e4:	fa e0       	ldi	r31, 0x0A	; 10
     6e6:	20 a1       	ldd	r18, Z+32	; 0x20
     6e8:	31 a1       	ldd	r19, Z+33	; 0x21
     6ea:	24 17       	cp	r18, r20
     6ec:	35 07       	cpc	r19, r21
     6ee:	d8 f7       	brcc	.-10     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
     6f0:	20 a1       	ldd	r18, Z+32	; 0x20
     6f2:	31 a1       	ldd	r19, Z+33	; 0x21
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	b0 f7       	brcc	.-20     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     6fa:	08 95       	ret

000006fc <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     6fc:	e0 e8       	ldi	r30, 0x80	; 128
     6fe:	f6 e0       	ldi	r31, 0x06	; 6
     700:	8f e0       	ldi	r24, 0x0F	; 15
     702:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	84 83       	std	Z+4, r24	; 0x04
     708:	08 95       	ret

0000070a <eeprom_safe_read>:
 *  Author: Esposch
 */ 
#include <asf.h>
#include "tiny_eeprom.h"

void eeprom_safe_read(){
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     710:	c0 e4       	ldi	r28, 0x40	; 64
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     716:	80 e4       	ldi	r24, 0x40	; 64
     718:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_read_buffer(EEPROM_CURRENT_PAGE*EEPROM_PAGE_SIZE, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     71a:	40 e2       	ldi	r20, 0x20	; 32
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	68 ec       	ldi	r22, 0xC8	; 200
     720:	7d e2       	ldi	r23, 0x2D	; 45
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 0c 10 	call	0x2018	; 0x2018 <nvm_eeprom_read_buffer>
	CLK.PSCTRL = previous_clk_settings;
     72a:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	08 95       	ret

00000734 <eeprom_safe_write>:

void eeprom_safe_write(){
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     73a:	c0 e4       	ldi	r28, 0x40	; 64
     73c:	d0 e0       	ldi	r29, 0x00	; 0
     73e:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     740:	80 e4       	ldi	r24, 0x40	; 64
     742:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_load_page_to_buffer(eeprom_buffer_write);
     744:	8b ec       	ldi	r24, 0xCB	; 203
     746:	97 e2       	ldi	r25, 0x27	; 39
     748:	0e 94 36 10 	call	0x206c	; 0x206c <nvm_eeprom_load_page_to_buffer>
	nvm_eeprom_atomic_write_page(EEPROM_CURRENT_PAGE);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 55 10 	call	0x20aa	; 0x20aa <nvm_eeprom_atomic_write_page>
	CLK.PSCTRL = previous_clk_settings;
     752:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     75c:	08 95       	ret

0000075e <iso_callback>:
bool main_setup_in_received(void)
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	84 2f       	mov	r24, r20
	unsigned short offset = (ep - 0x81) * 125;
     764:	24 2f       	mov	r18, r20
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	21 58       	subi	r18, 0x81	; 129
     76a:	31 09       	sbc	r19, r1
     76c:	9d e7       	ldi	r25, 0x7D	; 125
     76e:	92 9f       	mul	r25, r18
     770:	b0 01       	movw	r22, r0
     772:	93 9f       	mul	r25, r19
     774:	70 0d       	add	r23, r0
     776:	11 24       	eor	r1, r1
	if (global_mode < 5){
     778:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <global_mode>
     77c:	95 30       	cpi	r25, 0x05	; 5
     77e:	d0 f4       	brcc	.+52     	; 0x7b4 <iso_callback+0x56>
		if(ep > 0x83) offset += 375; //Shift from range [375, 750]  to [750, 1125]  Don't do this in modes 6 and 7 because they use 750 byte long sub-buffers.
     780:	44 38       	cpi	r20, 0x84	; 132
     782:	10 f0       	brcs	.+4      	; 0x788 <iso_callback+0x2a>
     784:	69 58       	subi	r22, 0x89	; 137
     786:	7e 4f       	sbci	r23, 0xFE	; 254
		udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + offset], 125, iso_callback);
     788:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <usb_state>
     78c:	47 e7       	ldi	r20, 0x77	; 119
     78e:	51 e0       	ldi	r21, 0x01	; 1
     790:	94 9f       	mul	r25, r20
     792:	90 01       	movw	r18, r0
     794:	95 9f       	mul	r25, r21
     796:	30 0d       	add	r19, r0
     798:	11 24       	eor	r1, r1
     79a:	62 0f       	add	r22, r18
     79c:	73 1f       	adc	r23, r19
     79e:	ab 01       	movw	r20, r22
     7a0:	44 51       	subi	r20, 0x14	; 20
     7a2:	58 4d       	sbci	r21, 0xD8	; 216
     7a4:	0f ea       	ldi	r16, 0xAF	; 175
     7a6:	13 e0       	ldi	r17, 0x03	; 3
     7a8:	2d e7       	ldi	r18, 0x7D	; 125
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <udd_ep_run>
     7b2:	15 c0       	rjmp	.+42     	; 0x7de <iso_callback+0x80>
	}
	else{
		udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE + offset], 125, iso_callback);
     7b4:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <usb_state>
     7b8:	2e ee       	ldi	r18, 0xEE	; 238
     7ba:	32 e0       	ldi	r19, 0x02	; 2
     7bc:	92 9f       	mul	r25, r18
     7be:	a0 01       	movw	r20, r0
     7c0:	93 9f       	mul	r25, r19
     7c2:	50 0d       	add	r21, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	64 0f       	add	r22, r20
     7c8:	75 1f       	adc	r23, r21
     7ca:	ab 01       	movw	r20, r22
     7cc:	44 51       	subi	r20, 0x14	; 20
     7ce:	58 4d       	sbci	r21, 0xD8	; 216
     7d0:	0f ea       	ldi	r16, 0xAF	; 175
     7d2:	13 e0       	ldi	r17, 0x03	; 3
     7d4:	2d e7       	ldi	r18, 0x7D	; 125
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <udd_ep_run>
	}
	return;
}
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <jump_to_bootloader>:
volatile unsigned char eeprom_buffer_write[EEPROM_PAGE_SIZE];
volatile unsigned char eeprom_buffer_read[EEPROM_PAGE_SIZE];

void jump_to_bootloader(){
	void(* start_bootloader)(void) = (void (*)(void))((BOOT_SECTION_START + ATMEL_DFU_OFFSET)>>1);
	EIND = BOOT_SECTION_START>>17;
     7e4:	1c be       	out	0x3c, r1	; 60
	start_bootloader();
     7e6:	ee ef       	ldi	r30, 0xFE	; 254
     7e8:	f0 e4       	ldi	r31, 0x40	; 64
     7ea:	09 95       	icall
     7ec:	08 95       	ret

000007ee <main>:
}

int main(void){	
	eeprom_safe_read();
     7ee:	8d df       	rcall	.-230    	; 0x70a <eeprom_safe_read>
	if(eeprom_buffer_read[0]){
     7f0:	80 91 c8 2d 	lds	r24, 0x2DC8	; 0x802dc8 <eeprom_buffer_read>
     7f4:	88 23       	and	r24, r24
     7f6:	69 f0       	breq	.+26     	; 0x812 <main+0x24>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     7f8:	80 e2       	ldi	r24, 0x20	; 32
     7fa:	e8 ec       	ldi	r30, 0xC8	; 200
     7fc:	fd e2       	ldi	r31, 0x2D	; 45
     7fe:	ab ec       	ldi	r26, 0xCB	; 203
     800:	b7 e2       	ldi	r27, 0x27	; 39
     802:	01 90       	ld	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	8a 95       	dec	r24
     808:	e1 f7       	brne	.-8      	; 0x802 <main+0x14>
			eeprom_buffer_write[0] = 0;
     80a:	10 92 cb 27 	sts	0x27CB, r1	; 0x8027cb <eeprom_buffer_write>
			eeprom_safe_write();
     80e:	92 df       	rcall	.-220    	; 0x734 <eeprom_safe_write>
			//eeprom_safe_read();
			jump_to_bootloader();
     810:	e9 df       	rcall	.-46     	; 0x7e4 <jump_to_bootloader>
	}
	
	irq_initialize_vectors();
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     818:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     81a:	2d dd       	rcall	.-1446   	; 0x276 <tiny_calibration_init>
		
	board_init();
     81c:	9f df       	rcall	.-194    	; 0x75c <board_init>
	udc_start();
     81e:	0e 94 23 0c 	call	0x1846	; 0x1846 <udc_start>
	tiny_dac_setup();
     822:	82 d1       	rcall	.+772    	; 0xb28 <tiny_dac_setup>
	tiny_dma_setup();
     824:	a5 d1       	rcall	.+842    	; 0xb70 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	2e d1       	rcall	.+604    	; 0xa88 <tiny_adc_setup>
	tiny_adc_pid_setup();
     82c:	1a d1       	rcall	.+564    	; 0xa62 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     82e:	8c e0       	ldi	r24, 0x0C	; 12
     830:	0e d1       	rcall	.+540    	; 0xa4e <tiny_adc_ch1setup>
	tiny_timer_setup();
     832:	9d d5       	rcall	.+2874   	; 0x136e <tiny_timer_setup>
	tiny_uart_setup();
     834:	58 d6       	rcall	.+3248   	; 0x14e6 <tiny_uart_setup>
	tiny_spi_setup();
     836:	71 d6       	rcall	.+3298   	; 0x151a <tiny_spi_setup>
	tiny_dig_setup();
     838:	61 df       	rcall	.-318    	; 0x6fc <tiny_dig_setup>
	//USARTC0.DATA = 0x55;
	//asm("nop");
	


	strcpy(uds.header, "debug123");
     83a:	89 e0       	ldi	r24, 0x09	; 9
     83c:	e0 ea       	ldi	r30, 0xA0	; 160
     83e:	f0 e2       	ldi	r31, 0x20	; 32
     840:	ae e9       	ldi	r26, 0x9E	; 158
     842:	b3 e2       	ldi	r27, 0x23	; 35
     844:	01 90       	ld	r0, Z+
     846:	0d 92       	st	X+, r0
     848:	8a 95       	dec	r24
     84a:	e1 f7       	brne	.-8      	; 0x844 <main+0x56>
	...
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			if(modeChanged){
     868:	80 91 b1 20 	lds	r24, 0x20B1	; 0x8020b1 <modeChanged>
     86c:	88 23       	and	r24, r24
     86e:	71 f3       	breq	.-36     	; 0x84c <main+0x5e>
				switch(futureMode){
     870:	e0 91 ca 25 	lds	r30, 0x25CA	; 0x8025ca <futureMode>
     874:	8e 2f       	mov	r24, r30
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	88 30       	cpi	r24, 0x08	; 8
     87a:	91 05       	cpc	r25, r1
     87c:	a0 f4       	brcc	.+40     	; 0x8a6 <main+0xb8>
     87e:	fc 01       	movw	r30, r24
     880:	e2 50       	subi	r30, 0x02	; 2
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
     888:	9f d1       	rcall	.+830    	; 0xbc8 <tiny_dma_set_mode_0>
					break;
     88a:	0d c0       	rjmp	.+26     	; 0x8a6 <main+0xb8>
					case 1:
					tiny_dma_set_mode_1();
     88c:	0f d2       	rcall	.+1054   	; 0xcac <tiny_dma_set_mode_1>
					break;
     88e:	0b c0       	rjmp	.+22     	; 0x8a6 <main+0xb8>
					case 2:
					tiny_dma_set_mode_2();
     890:	96 d2       	rcall	.+1324   	; 0xdbe <tiny_dma_set_mode_2>
					break;
     892:	09 c0       	rjmp	.+18     	; 0x8a6 <main+0xb8>
					case 3:
					tiny_dma_set_mode_3();
     894:	1a d3       	rcall	.+1588   	; 0xeca <tiny_dma_set_mode_3>
					break;
     896:	07 c0       	rjmp	.+14     	; 0x8a6 <main+0xb8>
					case 4:
					tiny_dma_set_mode_4();
     898:	a6 d3       	rcall	.+1868   	; 0xfe6 <tiny_dma_set_mode_4>
					break;
     89a:	05 c0       	rjmp	.+10     	; 0x8a6 <main+0xb8>
					case 5:
					tiny_dma_set_mode_5();
     89c:	2c d4       	rcall	.+2136   	; 0x10f6 <tiny_dma_set_mode_5>
					break;
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <main+0xb8>
					case 6:
					tiny_dma_set_mode_6();
     8a0:	2b d4       	rcall	.+2134   	; 0x10f8 <tiny_dma_set_mode_6>
					break;
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <main+0xb8>
					case 7:
					tiny_dma_set_mode_7();
     8a4:	9c d4       	rcall	.+2360   	; 0x11de <tiny_dma_set_mode_7>
					break;
				}
				modeChanged = 0;
     8a6:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <modeChanged>
     8aa:	d0 cf       	rjmp	.-96     	; 0x84c <main+0x5e>

000008ac <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     8ac:	08 95       	ret

000008ae <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     8ae:	08 95       	ret

000008b0 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b1 e0       	ldi	r27, 0x01	; 1
     8b8:	54 96       	adiw	r26, 0x14	; 20
     8ba:	8c 91       	ld	r24, X
     8bc:	54 97       	sbiw	r26, 0x14	; 20
     8be:	ee e9       	ldi	r30, 0x9E	; 158
     8c0:	f3 e2       	ldi	r31, 0x23	; 35
     8c2:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     8c4:	55 96       	adiw	r26, 0x15	; 21
     8c6:	8c 91       	ld	r24, X
     8c8:	55 97       	sbiw	r26, 0x15	; 21
     8ca:	82 87       	std	Z+10, r24	; 0x0a
	uds.trfcntL1 = DMA.CH1.TRFCNTL;
     8cc:	94 96       	adiw	r26, 0x24	; 36
     8ce:	8c 91       	ld	r24, X
     8d0:	94 97       	sbiw	r26, 0x24	; 36
     8d2:	83 87       	std	Z+11, r24	; 0x0b
	uds.trfcntH1 = DMA.CH1.TRFCNTH;
     8d4:	95 96       	adiw	r26, 0x25	; 37
     8d6:	8c 91       	ld	r24, X
     8d8:	95 97       	sbiw	r26, 0x25	; 37
     8da:	84 87       	std	Z+12, r24	; 0x0c
	uds.counterL = TC_CALI.CNTL;
     8dc:	c0 e0       	ldi	r28, 0x00	; 0
     8de:	da e0       	ldi	r29, 0x0A	; 10
     8e0:	88 a1       	ldd	r24, Y+32	; 0x20
     8e2:	85 8b       	std	Z+21, r24	; 0x15
	uds.counterH = TC_CALI.CNTH;
     8e4:	89 a1       	ldd	r24, Y+33	; 0x21
     8e6:	86 8b       	std	Z+22, r24	; 0x16
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     8e8:	54 96       	adiw	r26, 0x14	; 20
     8ea:	8d 91       	ld	r24, X+
     8ec:	9c 91       	ld	r25, X
     8ee:	55 97       	sbiw	r26, 0x15	; 21
     8f0:	86 34       	cpi	r24, 0x46	; 70
     8f2:	91 40       	sbci	r25, 0x01	; 1
     8f4:	80 f0       	brcs	.+32     	; 0x916 <main_sof_action+0x66>
     8f6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8fa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8fe:	89 3a       	cpi	r24, 0xA9	; 169
     900:	91 40       	sbci	r25, 0x01	; 1
     902:	48 f4       	brcc	.+18     	; 0x916 <main_sof_action+0x66>
		currentTrfcnt = DMA.CH0.TRFCNT;
     904:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     908:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     90c:	80 93 e8 2d 	sts	0x2DE8, r24	; 0x802de8 <currentTrfcnt>
     910:	90 93 e9 2d 	sts	0x2DE9, r25	; 0x802de9 <currentTrfcnt+0x1>
		asm("nop");
     914:	00 00       	nop
	}
	if(firstFrame){
     916:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <firstFrame>
     91a:	88 23       	and	r24, r24
     91c:	39 f0       	breq	.+14     	; 0x92c <main_sof_action+0x7c>
		tiny_calibration_first_sof();
     91e:	e1 dc       	rcall	.-1598   	; 0x2e2 <tiny_calibration_first_sof>
		firstFrame = 0;
     920:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <firstFrame>
		tcinit = 1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <tcinit>
		return;
     92a:	35 c0       	rjmp	.+106    	; 0x996 <main_sof_action+0xe6>
	}
	else{
		if(tcinit){
     92c:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <tcinit>
     930:	88 23       	and	r24, r24
     932:	41 f0       	breq	.+16     	; 0x944 <main_sof_action+0x94>
			if(calibration_values_found == 0x03){
     934:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     938:	83 30       	cpi	r24, 0x03	; 3
     93a:	19 f4       	brne	.+6      	; 0x942 <main_sof_action+0x92>
				tiny_calibration_maintain();
     93c:	e4 dc       	rcall	.-1592   	; 0x306 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     93e:	66 de       	rcall	.-820    	; 0x60c <tiny_calibration_layer2>
     940:	01 c0       	rjmp	.+2      	; 0x944 <main_sof_action+0x94>
			} else tiny_calibration_find_values();
     942:	bb dd       	rcall	.-1162   	; 0x4ba <tiny_calibration_find_values>
			}
			else debug_divider++;*/
		}
	}
	
	if(debugOnNextEnd){
     944:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <debugOnNextEnd>
     948:	88 23       	and	r24, r24
     94a:	51 f0       	breq	.+20     	; 0x960 <main_sof_action+0xb0>
		currentTrfcnt = DMA.CH0.TRFCNT;
     94c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     950:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     954:	80 93 e8 2d 	sts	0x2DE8, r24	; 0x802de8 <currentTrfcnt>
     958:	90 93 e9 2d 	sts	0x2DE9, r25	; 0x802de9 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     95c:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <debugOnNextEnd>
	}
	if(global_mode < 5){
     960:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     964:	85 30       	cpi	r24, 0x05	; 5
     966:	60 f4       	brcc	.+24     	; 0x980 <main_sof_action+0xd0>
		usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     968:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     96c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	27 37       	cpi	r18, 0x77	; 119
     974:	31 40       	sbci	r19, 0x01	; 1
     976:	08 f0       	brcs	.+2      	; 0x97a <main_sof_action+0xca>
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <usb_state>
     97e:	0b c0       	rjmp	.+22     	; 0x996 <main_sof_action+0xe6>
	}
	else{
		usb_state = (DMA.CH0.TRFCNT < 750) ? 1 : 0;
     980:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     984:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	2e 3e       	cpi	r18, 0xEE	; 238
     98c:	32 40       	sbci	r19, 0x02	; 2
     98e:	08 f0       	brcs	.+2      	; 0x992 <main_sof_action+0xe2>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <usb_state>
	}
	return;
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <main_vendor_enable>:

bool main_vendor_enable(void)
{
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
	main_b_vendor_enable = true;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <main_b_vendor_enable>
	firstFrame = 1;
     9a6:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <firstFrame>
	udd_ep_run(0x81, false, (uint8_t *)&isoBuf[0], 125, iso_callback);
     9aa:	0f ea       	ldi	r16, 0xAF	; 175
     9ac:	13 e0       	ldi	r17, 0x03	; 3
     9ae:	2d e7       	ldi	r18, 0x7D	; 125
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	4c ee       	ldi	r20, 0xEC	; 236
     9b4:	57 e2       	ldi	r21, 0x27	; 39
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	81 e8       	ldi	r24, 0x81	; 129
     9ba:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <udd_ep_run>
	udd_ep_run(0x82, false, (uint8_t *)&isoBuf[125], 125, iso_callback);
     9be:	2d e7       	ldi	r18, 0x7D	; 125
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	49 e6       	ldi	r20, 0x69	; 105
     9c4:	58 e2       	ldi	r21, 0x28	; 40
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	82 e8       	ldi	r24, 0x82	; 130
     9ca:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <udd_ep_run>
	udd_ep_run(0x83, false, (uint8_t *)&isoBuf[250], 125, iso_callback);
     9ce:	2d e7       	ldi	r18, 0x7D	; 125
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	46 ee       	ldi	r20, 0xE6	; 230
     9d4:	58 e2       	ldi	r21, 0x28	; 40
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	83 e8       	ldi	r24, 0x83	; 131
     9da:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <udd_ep_run>
	udd_ep_run(0x84, false, (uint8_t *)&isoBuf[375], 125, iso_callback);
     9de:	2d e7       	ldi	r18, 0x7D	; 125
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	43 e6       	ldi	r20, 0x63	; 99
     9e4:	59 e2       	ldi	r21, 0x29	; 41
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	84 e8       	ldi	r24, 0x84	; 132
     9ea:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <udd_ep_run>
	udd_ep_run(0x85, false, (uint8_t *)&isoBuf[500], 125, iso_callback);
     9ee:	2d e7       	ldi	r18, 0x7D	; 125
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 ee       	ldi	r20, 0xE0	; 224
     9f4:	59 e2       	ldi	r21, 0x29	; 41
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	85 e8       	ldi	r24, 0x85	; 133
     9fa:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <udd_ep_run>
	udd_ep_run(0x86, false, (uint8_t *)&isoBuf[625], 125, iso_callback);
     9fe:	2d e7       	ldi	r18, 0x7D	; 125
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	4d e5       	ldi	r20, 0x5D	; 93
     a04:	5a e2       	ldi	r21, 0x2A	; 42
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	86 e8       	ldi	r24, 0x86	; 134
     a0a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <udd_ep_run>
	return true;
}
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     a16:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <main_b_vendor_enable>
     a1a:	08 95       	ret

00000a1c <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 95       	ret

00000a20 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	08 95       	ret

00000a24 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     a24:	e0 e0       	ldi	r30, 0x00	; 0
     a26:	f2 e0       	ldi	r31, 0x02	; 2
     a28:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a2a:	98 2f       	mov	r25, r24
     a2c:	9c 71       	andi	r25, 0x1C	; 28
     a2e:	93 68       	ori	r25, 0x83	; 131
     a30:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     a32:	88 23       	and	r24, r24
     a34:	1c f4       	brge	.+6      	; 0xa3c <tiny_adc_ch0setup+0x18>
     a36:	90 e1       	ldi	r25, 0x10	; 16
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <tiny_adc_ch0setup+0x1c>
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	89 2b       	or	r24, r25
     a42:	e0 e0       	ldi	r30, 0x00	; 0
     a44:	f2 e0       	ldi	r31, 0x02	; 2
     a46:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a48:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     a4a:	16 a2       	std	Z+38, r1	; 0x26
     a4c:	08 95       	ret

00000a4e <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     a4e:	e0 e0       	ldi	r30, 0x00	; 0
     a50:	f2 e0       	ldi	r31, 0x02	; 2
     a52:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a54:	83 68       	ori	r24, 0x83	; 131
     a56:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     a58:	80 e1       	ldi	r24, 0x10	; 16
     a5a:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a5c:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     a5e:	16 aa       	std	Z+54, r1	; 0x36
     a60:	08 95       	ret

00000a62 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     a62:	e0 e0       	ldi	r30, 0x00	; 0
     a64:	f2 e0       	ldi	r31, 0x02	; 2
     a66:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a68:	83 e8       	ldi	r24, 0x83	; 131
     a6a:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     a6c:	8f e2       	ldi	r24, 0x2F	; 47
     a6e:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a70:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     a72:	16 a6       	std	Z+46, r1	; 0x2e
     a74:	08 95       	ret

00000a76 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     a76:	aa ec       	ldi	r26, 0xCA	; 202
     a78:	b1 e0       	ldi	r27, 0x01	; 1
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     a7e:	e8 2f       	mov	r30, r24
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     a84:	1c 92       	st	X, r1

	return( result );
}
     a86:	08 95       	ret

00000a88 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     a8c:	e0 e7       	ldi	r30, 0x70	; 112
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	9d 7f       	andi	r25, 0xFD	; 253
     a94:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     a96:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a9a:	62 30       	cpi	r22, 0x02	; 2
     a9c:	31 f1       	breq	.+76     	; 0xaea <tiny_adc_setup+0x62>
     a9e:	e0 e0       	ldi	r30, 0x00	; 0
     aa0:	f2 e0       	ldi	r31, 0x02	; 2
     aa2:	9c e1       	ldi	r25, 0x1C	; 28
     aa4:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     aa6:	90 e4       	ldi	r25, 0x40	; 64
     aa8:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     aaa:	81 11       	cpse	r24, r1
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <tiny_adc_setup+0x2a>
     aae:	80 e4       	ldi	r24, 0x40	; 64
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <tiny_adc_setup+0x2c>
     ab2:	80 ec       	ldi	r24, 0xC0	; 192
     ab4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     ab8:	61 30       	cpi	r22, 0x01	; 1
     aba:	11 f0       	breq	.+4      	; 0xac0 <tiny_adc_setup+0x38>
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <tiny_adc_setup+0x3a>
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	c0 e0       	ldi	r28, 0x00	; 0
     ac4:	d2 e0       	ldi	r29, 0x02	; 2
     ac6:	8c 83       	std	Y+4, r24	; 0x04
	#else
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
	#endif
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	d5 df       	rcall	.-86     	; 0xa76 <ReadCalibrationByte>
     acc:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     ace:	81 e2       	ldi	r24, 0x21	; 33
     ad0:	d2 df       	rcall	.-92     	; 0xa76 <ReadCalibrationByte>
     ad2:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     ad4:	18 8e       	std	Y+24, r1	; 0x18
     ad6:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     adc:	c2 df       	rcall	.-124    	; 0xa62 <tiny_adc_pid_setup>
     ade:	0e c0       	rjmp	.+28     	; 0xafc <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ae0:	80 ec       	ldi	r24, 0xC0	; 192
     ae2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     ae6:	84 e0       	ldi	r24, 0x04	; 4
     ae8:	ec cf       	rjmp	.-40     	; 0xac2 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     aea:	e0 e0       	ldi	r30, 0x00	; 0
     aec:	f2 e0       	ldi	r31, 0x02	; 2
     aee:	9e e1       	ldi	r25, 0x1E	; 30
     af0:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     af2:	90 e4       	ldi	r25, 0x40	; 64
     af4:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     af6:	81 11       	cpse	r24, r1
     af8:	f3 cf       	rjmp	.-26     	; 0xae0 <tiny_adc_setup+0x58>
     afa:	d9 cf       	rjmp	.-78     	; 0xaae <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     b1c:	8f 91       	pop	r24
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     b2c:	e0 e7       	ldi	r30, 0x70	; 112
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	8b 7f       	andi	r24, 0xFB	; 251
     b34:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     b36:	c0 e2       	ldi	r28, 0x20	; 32
     b38:	d3 e0       	ldi	r29, 0x03	; 3
     b3a:	8d e0       	ldi	r24, 0x0D	; 13
     b3c:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     b3e:	80 e4       	ldi	r24, 0x40	; 64
     b40:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     b42:	89 e0       	ldi	r24, 0x09	; 9
     b44:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     b46:	83 e3       	ldi	r24, 0x33	; 51
     b48:	96 df       	rcall	.-212    	; 0xa76 <ReadCalibrationByte>
     b4a:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     b4c:	82 e3       	ldi	r24, 0x32	; 50
     b4e:	93 df       	rcall	.-218    	; 0xa76 <ReadCalibrationByte>
     b50:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     b52:	87 e3       	ldi	r24, 0x37	; 55
     b54:	90 df       	rcall	.-224    	; 0xa76 <ReadCalibrationByte>
     b56:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     b58:	86 e3       	ldi	r24, 0x36	; 54
     b5a:	8d df       	rcall	.-230    	; 0xa76 <ReadCalibrationByte>
     b5c:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     b5e:	e0 e2       	ldi	r30, 0x20	; 32
     b60:	f6 e0       	ldi	r31, 0x06	; 6
     b62:	80 81       	ld	r24, Z
     b64:	83 60       	ori	r24, 0x03	; 3
     b66:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     b68:	14 82       	std	Z+4, r1	; 0x04
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <tiny_dma_setup>:
		median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
		
}

void tiny_dma_loop_mode_7(void){
     b70:	e0 e7       	ldi	r30, 0x70	; 112
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8e 7f       	andi	r24, 0xFE	; 254
     b78:	80 83       	st	Z, r24
     b7a:	83 e8       	ldi	r24, 0x83	; 131
     b7c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     b80:	08 95       	ret

00000b82 <tiny_dma_flush>:
     b82:	e0 e0       	ldi	r30, 0x00	; 0
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	10 8a       	std	Z+16, r1	; 0x10
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	80 8b       	std	Z+16, r24	; 0x10
     b8c:	10 a2       	std	Z+32, r1	; 0x20
     b8e:	80 a3       	std	Z+32, r24	; 0x20
     b90:	10 aa       	std	Z+48, r1	; 0x30
     b92:	80 ab       	std	Z+48, r24	; 0x30
     b94:	e0 e4       	ldi	r30, 0x40	; 64
     b96:	f1 e0       	ldi	r31, 0x01	; 1
     b98:	10 82       	st	Z, r1
     b9a:	80 83       	st	Z, r24
     b9c:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <b1_state>
     ba0:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <b2_state>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <usb_state>
     baa:	10 92 9c 23 	sts	0x239C, r1	; 0x80239c <dma_ch0_ran>
     bae:	10 92 9d 23 	sts	0x239D, r1	; 0x80239d <dma_ch0_ran+0x1>
     bb2:	10 92 9a 23 	sts	0x239A, r1	; 0x80239a <dma_ch1_ran>
     bb6:	10 92 9b 23 	sts	0x239B, r1	; 0x80239b <dma_ch1_ran+0x1>
     bba:	08 95       	ret

00000bbc <tiny_dma_delayed_set>:
     bbc:	80 93 ca 25 	sts	0x25CA, r24	; 0x8025ca <futureMode>
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <modeChanged>
     bc6:	08 95       	ret

00000bc8 <tiny_dma_set_mode_0>:
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     bd0:	d8 df       	rcall	.-80     	; 0xb82 <tiny_dma_flush>
     bd2:	c0 e0       	ldi	r28, 0x00	; 0
     bd4:	d1 e0       	ldi	r29, 0x01	; 1
     bd6:	1e aa       	std	Y+54, r1	; 0x36
     bd8:	84 e2       	ldi	r24, 0x24	; 36
     bda:	88 ab       	std	Y+48, r24	; 0x30
     bdc:	19 aa       	std	Y+49, r1	; 0x31
     bde:	49 e5       	ldi	r20, 0x59	; 89
     be0:	4a ab       	std	Y+50, r20	; 0x32
     be2:	32 e0       	ldi	r19, 0x02	; 2
     be4:	3b ab       	std	Y+51, r19	; 0x33
     be6:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     bea:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     bee:	6c ab       	std	Y+52, r22	; 0x34
     bf0:	7d ab       	std	Y+53, r23	; 0x35
     bf2:	6b ec       	ldi	r22, 0xCB	; 203
     bf4:	75 e2       	ldi	r23, 0x25	; 37
     bf6:	68 af       	std	Y+56, r22	; 0x38
     bf8:	79 af       	std	Y+57, r23	; 0x39
     bfa:	1a ae       	std	Y+58, r1	; 0x3a
     bfc:	9b e3       	ldi	r25, 0x3B	; 59
     bfe:	9c af       	std	Y+60, r25	; 0x3c
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c06:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c0a:	28 a9       	ldd	r18, Y+48	; 0x30
     c0c:	20 68       	ori	r18, 0x80	; 128
     c0e:	28 ab       	std	Y+48, r18	; 0x30
     c10:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c14:	e0 e4       	ldi	r30, 0x40	; 64
     c16:	f1 e0       	ldi	r31, 0x01	; 1
     c18:	80 83       	st	Z, r24
     c1a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c1e:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c22:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c26:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     c2a:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     c2e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c32:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c36:	4a eb       	ldi	r20, 0xBA	; 186
     c38:	53 e2       	ldi	r21, 0x23	; 35
     c3a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c3e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c42:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c46:	29 e3       	ldi	r18, 0x39	; 57
     c48:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c4c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c50:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c54:	90 81       	ld	r25, Z
     c56:	90 68       	ori	r25, 0x80	; 128
     c58:	90 83       	st	Z, r25
     c5a:	18 8a       	std	Y+16, r1	; 0x10
     c5c:	90 e4       	ldi	r25, 0x40	; 64
     c5e:	98 8b       	std	Y+16, r25	; 0x10
     c60:	88 8b       	std	Y+16, r24	; 0x10
     c62:	19 8a       	std	Y+17, r1	; 0x11
     c64:	95 e9       	ldi	r25, 0x95	; 149
     c66:	9a 8b       	std	Y+18, r25	; 0x12
     c68:	90 e1       	ldi	r25, 0x10	; 16
     c6a:	9b 8b       	std	Y+19, r25	; 0x13
     c6c:	4e ee       	ldi	r20, 0xEE	; 238
     c6e:	52 e0       	ldi	r21, 0x02	; 2
     c70:	4c 8b       	std	Y+20, r20	; 0x14
     c72:	5d 8b       	std	Y+21, r21	; 0x15
     c74:	88 8f       	std	Y+24, r24	; 0x18
     c76:	39 8f       	std	Y+25, r19	; 0x19
     c78:	1a 8e       	std	Y+26, r1	; 0x1a
     c7a:	8c ee       	ldi	r24, 0xEC	; 236
     c7c:	97 e2       	ldi	r25, 0x27	; 39
     c7e:	8c 8f       	std	Y+28, r24	; 0x1c
     c80:	9d 8f       	std	Y+29, r25	; 0x1d
     c82:	1e 8e       	std	Y+30, r1	; 0x1e
     c84:	68 ec       	ldi	r22, 0xC8	; 200
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	84 ef       	ldi	r24, 0xF4	; 244
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	25 dd       	rcall	.-1462   	; 0x6d8 <tiny_calibration_synchronise_phase>
     c8e:	88 ec       	ldi	r24, 0xC8	; 200
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     c96:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     ca0:	88 89       	ldd	r24, Y+16	; 0x10
     ca2:	80 68       	ori	r24, 0x80	; 128
     ca4:	88 8b       	std	Y+16, r24	; 0x10
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <tiny_dma_set_mode_1>:
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	11 e0       	ldi	r17, 0x01	; 1
     cb4:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     cb8:	64 df       	rcall	.-312    	; 0xb82 <tiny_dma_flush>
     cba:	c0 e0       	ldi	r28, 0x00	; 0
     cbc:	d1 e0       	ldi	r29, 0x01	; 1
     cbe:	18 aa       	std	Y+48, r1	; 0x30
     cc0:	80 e4       	ldi	r24, 0x40	; 64
     cc2:	88 ab       	std	Y+48, r24	; 0x30
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	88 ab       	std	Y+48, r24	; 0x30
     cc8:	19 aa       	std	Y+49, r1	; 0x31
     cca:	1a aa       	std	Y+50, r1	; 0x32
     ccc:	4b e4       	ldi	r20, 0x4B	; 75
     cce:	4b ab       	std	Y+51, r20	; 0x33
     cd0:	1c aa       	std	Y+52, r1	; 0x34
     cd2:	1d aa       	std	Y+53, r1	; 0x35
     cd4:	1e aa       	std	Y+54, r1	; 0x36
     cd6:	8a e0       	ldi	r24, 0x0A	; 10
     cd8:	90 e2       	ldi	r25, 0x20	; 32
     cda:	88 af       	std	Y+56, r24	; 0x38
     cdc:	99 af       	std	Y+57, r25	; 0x39
     cde:	1a ae       	std	Y+58, r1	; 0x3a
     ce0:	70 ea       	ldi	r23, 0xA0	; 160
     ce2:	7c af       	std	Y+60, r23	; 0x3c
     ce4:	68 e0       	ldi	r22, 0x08	; 8
     ce6:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     cea:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     cee:	88 a9       	ldd	r24, Y+48	; 0x30
     cf0:	80 6a       	ori	r24, 0xA0	; 160
     cf2:	88 ab       	std	Y+48, r24	; 0x30
     cf4:	e0 ea       	ldi	r30, 0xA0	; 160
     cf6:	f8 e0       	ldi	r31, 0x08	; 8
     cf8:	85 e5       	ldi	r24, 0x55	; 85
     cfa:	80 83       	st	Z, r24
     cfc:	80 83       	st	Z, r24
     cfe:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     d02:	e0 e4       	ldi	r30, 0x40	; 64
     d04:	f1 e0       	ldi	r31, 0x01	; 1
     d06:	84 e2       	ldi	r24, 0x24	; 36
     d08:	80 83       	st	Z, r24
     d0a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d0e:	99 e5       	ldi	r25, 0x59	; 89
     d10:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     d14:	32 e0       	ldi	r19, 0x02	; 2
     d16:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d1a:	a0 91 0b 20 	lds	r26, 0x200B	; 0x80200b <auxDacBufLen>
     d1e:	b0 91 0c 20 	lds	r27, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     d22:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d26:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     d2a:	ab ec       	ldi	r26, 0xCB	; 203
     d2c:	b5 e2       	ldi	r27, 0x25	; 37
     d2e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d32:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d36:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d3a:	9b e3       	ldi	r25, 0x3B	; 59
     d3c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d46:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d4a:	20 81       	ld	r18, Z
     d4c:	20 68       	ori	r18, 0x80	; 128
     d4e:	20 83       	st	Z, r18
     d50:	88 a3       	std	Y+32, r24	; 0x20
     d52:	99 a3       	std	Y+33, r25	; 0x21
     d54:	25 e9       	ldi	r18, 0x95	; 149
     d56:	2a a3       	std	Y+34, r18	; 0x22
     d58:	4b a3       	std	Y+35, r20	; 0x23
     d5a:	4e ee       	ldi	r20, 0xEE	; 238
     d5c:	52 e0       	ldi	r21, 0x02	; 2
     d5e:	4c a3       	std	Y+36, r20	; 0x24
     d60:	5d a3       	std	Y+37, r21	; 0x25
     d62:	78 a7       	std	Y+40, r23	; 0x28
     d64:	69 a7       	std	Y+41, r22	; 0x29
     d66:	1a a6       	std	Y+42, r1	; 0x2a
     d68:	6a ed       	ldi	r22, 0xDA	; 218
     d6a:	7a e2       	ldi	r23, 0x2A	; 42
     d6c:	6c a7       	std	Y+44, r22	; 0x2c
     d6e:	7d a7       	std	Y+45, r23	; 0x2d
     d70:	1e a6       	std	Y+46, r1	; 0x2e
     d72:	88 8b       	std	Y+16, r24	; 0x10
     d74:	99 8b       	std	Y+17, r25	; 0x11
     d76:	2a 8b       	std	Y+18, r18	; 0x12
     d78:	90 e1       	ldi	r25, 0x10	; 16
     d7a:	9b 8b       	std	Y+19, r25	; 0x13
     d7c:	4c 8b       	std	Y+20, r20	; 0x14
     d7e:	5d 8b       	std	Y+21, r21	; 0x15
     d80:	88 8f       	std	Y+24, r24	; 0x18
     d82:	39 8f       	std	Y+25, r19	; 0x19
     d84:	1a 8e       	std	Y+26, r1	; 0x1a
     d86:	8c ee       	ldi	r24, 0xEC	; 236
     d88:	97 e2       	ldi	r25, 0x27	; 39
     d8a:	8c 8f       	std	Y+28, r24	; 0x1c
     d8c:	9d 8f       	std	Y+29, r25	; 0x1d
     d8e:	1e 8e       	std	Y+30, r1	; 0x1e
     d90:	68 ec       	ldi	r22, 0xC8	; 200
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	84 ef       	ldi	r24, 0xF4	; 244
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	9f dc       	rcall	.-1730   	; 0x6d8 <tiny_calibration_synchronise_phase>
     d9a:	88 ec       	ldi	r24, 0xC8	; 200
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     da2:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     da6:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <median_TRFCNT_delay>
     daa:	88 a1       	ldd	r24, Y+32	; 0x20
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	88 a3       	std	Y+32, r24	; 0x20
     db0:	88 89       	ldd	r24, Y+16	; 0x10
     db2:	80 68       	ori	r24, 0x80	; 128
     db4:	88 8b       	std	Y+16, r24	; 0x10
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	08 95       	ret

00000dbe <tiny_dma_set_mode_2>:
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	12 e0       	ldi	r17, 0x02	; 2
     dc6:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     dca:	db de       	rcall	.-586    	; 0xb82 <tiny_dma_flush>
     dcc:	c0 e0       	ldi	r28, 0x00	; 0
     dce:	d1 e0       	ldi	r29, 0x01	; 1
     dd0:	1e aa       	std	Y+54, r1	; 0x36
     dd2:	84 e2       	ldi	r24, 0x24	; 36
     dd4:	88 ab       	std	Y+48, r24	; 0x30
     dd6:	19 aa       	std	Y+49, r1	; 0x31
     dd8:	39 e5       	ldi	r19, 0x59	; 89
     dda:	3a ab       	std	Y+50, r19	; 0x32
     ddc:	1b ab       	std	Y+51, r17	; 0x33
     dde:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     de2:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     de6:	4c ab       	std	Y+52, r20	; 0x34
     de8:	5d ab       	std	Y+53, r21	; 0x35
     dea:	4b ec       	ldi	r20, 0xCB	; 203
     dec:	55 e2       	ldi	r21, 0x25	; 37
     dee:	48 af       	std	Y+56, r20	; 0x38
     df0:	59 af       	std	Y+57, r21	; 0x39
     df2:	1a ae       	std	Y+58, r1	; 0x3a
     df4:	9b e3       	ldi	r25, 0x3B	; 59
     df6:	9c af       	std	Y+60, r25	; 0x3c
     df8:	93 e0       	ldi	r25, 0x03	; 3
     dfa:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     dfe:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     e02:	28 a9       	ldd	r18, Y+48	; 0x30
     e04:	20 68       	ori	r18, 0x80	; 128
     e06:	28 ab       	std	Y+48, r18	; 0x30
     e08:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     e0c:	e0 e4       	ldi	r30, 0x40	; 64
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	80 83       	st	Z, r24
     e12:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e16:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e1a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e1e:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     e22:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     e26:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     e2a:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e2e:	2a eb       	ldi	r18, 0xBA	; 186
     e30:	33 e2       	ldi	r19, 0x23	; 35
     e32:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e36:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e3a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e3e:	29 e3       	ldi	r18, 0x39	; 57
     e40:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e44:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e48:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e4c:	90 81       	ld	r25, Z
     e4e:	90 68       	ori	r25, 0x80	; 128
     e50:	90 83       	st	Z, r25
     e52:	18 8a       	std	Y+16, r1	; 0x10
     e54:	90 e4       	ldi	r25, 0x40	; 64
     e56:	98 8b       	std	Y+16, r25	; 0x10
     e58:	88 8b       	std	Y+16, r24	; 0x10
     e5a:	19 8a       	std	Y+17, r1	; 0x11
     e5c:	45 e9       	ldi	r20, 0x95	; 149
     e5e:	4a 8b       	std	Y+18, r20	; 0x12
     e60:	90 e1       	ldi	r25, 0x10	; 16
     e62:	9b 8b       	std	Y+19, r25	; 0x13
     e64:	2e ee       	ldi	r18, 0xEE	; 238
     e66:	32 e0       	ldi	r19, 0x02	; 2
     e68:	2c 8b       	std	Y+20, r18	; 0x14
     e6a:	3d 8b       	std	Y+21, r19	; 0x15
     e6c:	88 8f       	std	Y+24, r24	; 0x18
     e6e:	19 8f       	std	Y+25, r17	; 0x19
     e70:	1a 8e       	std	Y+26, r1	; 0x1a
     e72:	6c ee       	ldi	r22, 0xEC	; 236
     e74:	77 e2       	ldi	r23, 0x27	; 39
     e76:	6c 8f       	std	Y+28, r22	; 0x1c
     e78:	7d 8f       	std	Y+29, r23	; 0x1d
     e7a:	1e 8e       	std	Y+30, r1	; 0x1e
     e7c:	88 a3       	std	Y+32, r24	; 0x20
     e7e:	19 a2       	std	Y+33, r1	; 0x21
     e80:	4a a3       	std	Y+34, r20	; 0x22
     e82:	9b a3       	std	Y+35, r25	; 0x23
     e84:	2c a3       	std	Y+36, r18	; 0x24
     e86:	3d a3       	std	Y+37, r19	; 0x25
     e88:	84 e3       	ldi	r24, 0x34	; 52
     e8a:	88 a7       	std	Y+40, r24	; 0x28
     e8c:	19 a7       	std	Y+41, r17	; 0x29
     e8e:	1a a6       	std	Y+42, r1	; 0x2a
     e90:	8a ed       	ldi	r24, 0xDA	; 218
     e92:	9a e2       	ldi	r25, 0x2A	; 42
     e94:	8c a7       	std	Y+44, r24	; 0x2c
     e96:	9d a7       	std	Y+45, r25	; 0x2d
     e98:	1e a6       	std	Y+46, r1	; 0x2e
     e9a:	68 ec       	ldi	r22, 0xC8	; 200
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	84 ef       	ldi	r24, 0xF4	; 244
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	1a dc       	rcall	.-1996   	; 0x6d8 <tiny_calibration_synchronise_phase>
     ea4:	88 ec       	ldi	r24, 0xC8	; 200
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     eac:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     eb6:	88 89       	ldd	r24, Y+16	; 0x10
     eb8:	80 68       	ori	r24, 0x80	; 128
     eba:	88 8b       	std	Y+16, r24	; 0x10
     ebc:	88 a1       	ldd	r24, Y+32	; 0x20
     ebe:	80 68       	ori	r24, 0x80	; 128
     ec0:	88 a3       	std	Y+32, r24	; 0x20
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	08 95       	ret

00000eca <tiny_dma_set_mode_3>:
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	13 e0       	ldi	r17, 0x03	; 3
     ed2:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     ed6:	55 de       	rcall	.-854    	; 0xb82 <tiny_dma_flush>
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
     eda:	d1 e0       	ldi	r29, 0x01	; 1
     edc:	18 a2       	std	Y+32, r1	; 0x20
     ede:	50 e4       	ldi	r21, 0x40	; 64
     ee0:	58 a3       	std	Y+32, r21	; 0x20
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	88 a3       	std	Y+32, r24	; 0x20
     ee6:	19 a2       	std	Y+33, r1	; 0x21
     ee8:	1a a2       	std	Y+34, r1	; 0x22
     eea:	4b e4       	ldi	r20, 0x4B	; 75
     eec:	4b a3       	std	Y+35, r20	; 0x23
     eee:	1c a2       	std	Y+36, r1	; 0x24
     ef0:	1d a2       	std	Y+37, r1	; 0x25
     ef2:	1e a2       	std	Y+38, r1	; 0x26
     ef4:	8a e0       	ldi	r24, 0x0A	; 10
     ef6:	90 e2       	ldi	r25, 0x20	; 32
     ef8:	88 a7       	std	Y+40, r24	; 0x28
     efa:	99 a7       	std	Y+41, r25	; 0x29
     efc:	1a a6       	std	Y+42, r1	; 0x2a
     efe:	30 ea       	ldi	r19, 0xA0	; 160
     f00:	3c a7       	std	Y+44, r19	; 0x2c
     f02:	28 e0       	ldi	r18, 0x08	; 8
     f04:	2d a7       	std	Y+45, r18	; 0x2d
     f06:	1e a6       	std	Y+46, r1	; 0x2e
     f08:	88 a1       	ldd	r24, Y+32	; 0x20
     f0a:	80 6a       	ori	r24, 0xA0	; 160
     f0c:	88 a3       	std	Y+32, r24	; 0x20
     f0e:	85 e5       	ldi	r24, 0x55	; 85
     f10:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     f14:	1e aa       	std	Y+54, r1	; 0x36
     f16:	84 e2       	ldi	r24, 0x24	; 36
     f18:	88 ab       	std	Y+48, r24	; 0x30
     f1a:	19 aa       	std	Y+49, r1	; 0x31
     f1c:	69 e5       	ldi	r22, 0x59	; 89
     f1e:	6a ab       	std	Y+50, r22	; 0x32
     f20:	1b ab       	std	Y+51, r17	; 0x33
     f22:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <dacBuf_len>
     f26:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <dacBuf_len+0x1>
     f2a:	ec ab       	std	Y+52, r30	; 0x34
     f2c:	fd ab       	std	Y+53, r31	; 0x35
     f2e:	ea eb       	ldi	r30, 0xBA	; 186
     f30:	f3 e2       	ldi	r31, 0x23	; 35
     f32:	e8 af       	std	Y+56, r30	; 0x38
     f34:	f9 af       	std	Y+57, r31	; 0x39
     f36:	1a ae       	std	Y+58, r1	; 0x3a
     f38:	99 e3       	ldi	r25, 0x39	; 57
     f3a:	9c af       	std	Y+60, r25	; 0x3c
     f3c:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f40:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f44:	98 a9       	ldd	r25, Y+48	; 0x30
     f46:	90 68       	ori	r25, 0x80	; 128
     f48:	98 ab       	std	Y+48, r25	; 0x30
     f4a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f4e:	e0 e4       	ldi	r30, 0x40	; 64
     f50:	f1 e0       	ldi	r31, 0x01	; 1
     f52:	80 83       	st	Z, r24
     f54:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f58:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f62:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     f66:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     f6a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f6e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f72:	6b ec       	ldi	r22, 0xCB	; 203
     f74:	75 e2       	ldi	r23, 0x25	; 37
     f76:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f7a:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f7e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f82:	9b e3       	ldi	r25, 0x3B	; 59
     f84:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f88:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f8c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f90:	90 81       	ld	r25, Z
     f92:	90 68       	ori	r25, 0x80	; 128
     f94:	90 83       	st	Z, r25
     f96:	18 8a       	std	Y+16, r1	; 0x10
     f98:	58 8b       	std	Y+16, r21	; 0x10
     f9a:	88 8b       	std	Y+16, r24	; 0x10
     f9c:	19 8a       	std	Y+17, r1	; 0x11
     f9e:	85 e9       	ldi	r24, 0x95	; 149
     fa0:	8a 8b       	std	Y+18, r24	; 0x12
     fa2:	4b 8b       	std	Y+19, r20	; 0x13
     fa4:	8e ee       	ldi	r24, 0xEE	; 238
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	8c 8b       	std	Y+20, r24	; 0x14
     faa:	9d 8b       	std	Y+21, r25	; 0x15
     fac:	38 8f       	std	Y+24, r19	; 0x18
     fae:	29 8f       	std	Y+25, r18	; 0x19
     fb0:	1a 8e       	std	Y+26, r1	; 0x1a
     fb2:	8c ee       	ldi	r24, 0xEC	; 236
     fb4:	97 e2       	ldi	r25, 0x27	; 39
     fb6:	8c 8f       	std	Y+28, r24	; 0x1c
     fb8:	9d 8f       	std	Y+29, r25	; 0x1d
     fba:	1e 8e       	std	Y+30, r1	; 0x1e
     fbc:	68 ec       	ldi	r22, 0xC8	; 200
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	84 ef       	ldi	r24, 0xF4	; 244
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	89 db       	rcall	.-2286   	; 0x6d8 <tiny_calibration_synchronise_phase>
     fc6:	88 ec       	ldi	r24, 0xC8	; 200
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     fce:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     fd8:	88 89       	ldd	r24, Y+16	; 0x10
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	88 8b       	std	Y+16, r24	; 0x10
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	08 95       	ret

00000fe6 <tiny_dma_set_mode_4>:
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	14 e0       	ldi	r17, 0x04	; 4
     fee:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     ff2:	c7 dd       	rcall	.-1138   	; 0xb82 <tiny_dma_flush>
     ff4:	c0 e0       	ldi	r28, 0x00	; 0
     ff6:	d1 e0       	ldi	r29, 0x01	; 1
     ff8:	18 aa       	std	Y+48, r1	; 0x30
     ffa:	80 e4       	ldi	r24, 0x40	; 64
     ffc:	88 ab       	std	Y+48, r24	; 0x30
     ffe:	18 ab       	std	Y+48, r17	; 0x30
    1000:	19 aa       	std	Y+49, r1	; 0x31
    1002:	1a aa       	std	Y+50, r1	; 0x32
    1004:	3b e4       	ldi	r19, 0x4B	; 75
    1006:	3b ab       	std	Y+51, r19	; 0x33
    1008:	1c aa       	std	Y+52, r1	; 0x34
    100a:	1d aa       	std	Y+53, r1	; 0x35
    100c:	1e aa       	std	Y+54, r1	; 0x36
    100e:	8a e0       	ldi	r24, 0x0A	; 10
    1010:	90 e2       	ldi	r25, 0x20	; 32
    1012:	88 af       	std	Y+56, r24	; 0x38
    1014:	99 af       	std	Y+57, r25	; 0x39
    1016:	1a ae       	std	Y+58, r1	; 0x3a
    1018:	50 ea       	ldi	r21, 0xA0	; 160
    101a:	5c af       	std	Y+60, r21	; 0x3c
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1022:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1026:	98 a9       	ldd	r25, Y+48	; 0x30
    1028:	90 6a       	ori	r25, 0xA0	; 160
    102a:	98 ab       	std	Y+48, r25	; 0x30
    102c:	95 e5       	ldi	r25, 0x55	; 85
    102e:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1032:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1036:	e0 e4       	ldi	r30, 0x40	; 64
    1038:	f1 e0       	ldi	r31, 0x01	; 1
    103a:	94 e2       	ldi	r25, 0x24	; 36
    103c:	90 83       	st	Z, r25
    103e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1042:	29 e5       	ldi	r18, 0x59	; 89
    1044:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1048:	22 e0       	ldi	r18, 0x02	; 2
    104a:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    104e:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
    1052:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1056:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    105a:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    105e:	6b ec       	ldi	r22, 0xCB	; 203
    1060:	75 e2       	ldi	r23, 0x25	; 37
    1062:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1066:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    106a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    106e:	2b e3       	ldi	r18, 0x3B	; 59
    1070:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1074:	23 e0       	ldi	r18, 0x03	; 3
    1076:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    107a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    107e:	20 81       	ld	r18, Z
    1080:	20 68       	ori	r18, 0x80	; 128
    1082:	20 83       	st	Z, r18
    1084:	98 8b       	std	Y+16, r25	; 0x10
    1086:	19 8a       	std	Y+17, r1	; 0x11
    1088:	45 e9       	ldi	r20, 0x95	; 149
    108a:	4a 8b       	std	Y+18, r20	; 0x12
    108c:	3b 8b       	std	Y+19, r19	; 0x13
    108e:	2e ee       	ldi	r18, 0xEE	; 238
    1090:	32 e0       	ldi	r19, 0x02	; 2
    1092:	2c 8b       	std	Y+20, r18	; 0x14
    1094:	3d 8b       	std	Y+21, r19	; 0x15
    1096:	58 8f       	std	Y+24, r21	; 0x18
    1098:	89 8f       	std	Y+25, r24	; 0x19
    109a:	1a 8e       	std	Y+26, r1	; 0x1a
    109c:	6c ee       	ldi	r22, 0xEC	; 236
    109e:	77 e2       	ldi	r23, 0x27	; 39
    10a0:	6c 8f       	std	Y+28, r22	; 0x1c
    10a2:	7d 8f       	std	Y+29, r23	; 0x1d
    10a4:	1e 8e       	std	Y+30, r1	; 0x1e
    10a6:	98 a3       	std	Y+32, r25	; 0x20
    10a8:	19 a2       	std	Y+33, r1	; 0x21
    10aa:	4a a3       	std	Y+34, r20	; 0x22
    10ac:	9a e4       	ldi	r25, 0x4A	; 74
    10ae:	9b a3       	std	Y+35, r25	; 0x23
    10b0:	2c a3       	std	Y+36, r18	; 0x24
    10b2:	3d a3       	std	Y+37, r19	; 0x25
    10b4:	93 ec       	ldi	r25, 0xC3	; 195
    10b6:	98 a7       	std	Y+40, r25	; 0x28
    10b8:	89 a7       	std	Y+41, r24	; 0x29
    10ba:	1a a6       	std	Y+42, r1	; 0x2a
    10bc:	8a ed       	ldi	r24, 0xDA	; 218
    10be:	9a e2       	ldi	r25, 0x2A	; 42
    10c0:	8c a7       	std	Y+44, r24	; 0x2c
    10c2:	9d a7       	std	Y+45, r25	; 0x2d
    10c4:	1e a6       	std	Y+46, r1	; 0x2e
    10c6:	68 ec       	ldi	r22, 0xC8	; 200
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	84 ef       	ldi	r24, 0xF4	; 244
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	04 db       	rcall	.-2552   	; 0x6d8 <tiny_calibration_synchronise_phase>
    10d0:	88 ec       	ldi	r24, 0xC8	; 200
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    10d8:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    10e2:	88 89       	ldd	r24, Y+16	; 0x10
    10e4:	80 68       	ori	r24, 0x80	; 128
    10e6:	88 8b       	std	Y+16, r24	; 0x10
    10e8:	88 a1       	ldd	r24, Y+32	; 0x20
    10ea:	80 68       	ori	r24, 0x80	; 128
    10ec:	88 a3       	std	Y+32, r24	; 0x20
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	08 95       	ret

000010f6 <tiny_dma_set_mode_5>:
    10f6:	ff cf       	rjmp	.-2      	; 0x10f6 <tiny_dma_set_mode_5>

000010f8 <tiny_dma_set_mode_6>:
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	86 e0       	ldi	r24, 0x06	; 6
    10fe:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    1102:	3f dd       	rcall	.-1410   	; 0xb82 <tiny_dma_flush>
    1104:	c0 e0       	ldi	r28, 0x00	; 0
    1106:	d1 e0       	ldi	r29, 0x01	; 1
    1108:	1e aa       	std	Y+54, r1	; 0x36
    110a:	84 e2       	ldi	r24, 0x24	; 36
    110c:	88 ab       	std	Y+48, r24	; 0x30
    110e:	19 aa       	std	Y+49, r1	; 0x31
    1110:	39 e5       	ldi	r19, 0x59	; 89
    1112:	3a ab       	std	Y+50, r19	; 0x32
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	9b ab       	std	Y+51, r25	; 0x33
    1118:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    111c:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1120:	4c ab       	std	Y+52, r20	; 0x34
    1122:	5d ab       	std	Y+53, r21	; 0x35
    1124:	4a eb       	ldi	r20, 0xBA	; 186
    1126:	53 e2       	ldi	r21, 0x23	; 35
    1128:	48 af       	std	Y+56, r20	; 0x38
    112a:	59 af       	std	Y+57, r21	; 0x39
    112c:	1a ae       	std	Y+58, r1	; 0x3a
    112e:	29 e3       	ldi	r18, 0x39	; 57
    1130:	2c af       	std	Y+60, r18	; 0x3c
    1132:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1136:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    113a:	28 a9       	ldd	r18, Y+48	; 0x30
    113c:	20 68       	ori	r18, 0x80	; 128
    113e:	28 ab       	std	Y+48, r18	; 0x30
    1140:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1144:	e0 e4       	ldi	r30, 0x40	; 64
    1146:	f1 e0       	ldi	r31, 0x01	; 1
    1148:	80 83       	st	Z, r24
    114a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    114e:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1152:	32 e0       	ldi	r19, 0x02	; 2
    1154:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1158:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    115c:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1160:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1164:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1168:	4b ec       	ldi	r20, 0xCB	; 203
    116a:	55 e2       	ldi	r21, 0x25	; 37
    116c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1170:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1174:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1178:	2b e3       	ldi	r18, 0x3B	; 59
    117a:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    117e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1182:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1186:	20 81       	ld	r18, Z
    1188:	20 68       	ori	r18, 0x80	; 128
    118a:	20 83       	st	Z, r18
    118c:	18 8a       	std	Y+16, r1	; 0x10
    118e:	20 e4       	ldi	r18, 0x40	; 64
    1190:	28 8b       	std	Y+16, r18	; 0x10
    1192:	88 8b       	std	Y+16, r24	; 0x10
    1194:	99 8b       	std	Y+17, r25	; 0x11
    1196:	95 e9       	ldi	r25, 0x95	; 149
    1198:	9a 8b       	std	Y+18, r25	; 0x12
    119a:	90 e1       	ldi	r25, 0x10	; 16
    119c:	9b 8b       	std	Y+19, r25	; 0x13
    119e:	4c ed       	ldi	r20, 0xDC	; 220
    11a0:	55 e0       	ldi	r21, 0x05	; 5
    11a2:	4c 8b       	std	Y+20, r20	; 0x14
    11a4:	5d 8b       	std	Y+21, r21	; 0x15
    11a6:	88 8f       	std	Y+24, r24	; 0x18
    11a8:	39 8f       	std	Y+25, r19	; 0x19
    11aa:	1a 8e       	std	Y+26, r1	; 0x1a
    11ac:	8c ee       	ldi	r24, 0xEC	; 236
    11ae:	97 e2       	ldi	r25, 0x27	; 39
    11b0:	8c 8f       	std	Y+28, r24	; 0x1c
    11b2:	9d 8f       	std	Y+29, r25	; 0x1d
    11b4:	1e 8e       	std	Y+30, r1	; 0x1e
    11b6:	68 ec       	ldi	r22, 0xC8	; 200
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	84 ef       	ldi	r24, 0xF4	; 244
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	8c da       	rcall	.-2792   	; 0x6d8 <tiny_calibration_synchronise_phase>
    11c0:	80 e9       	ldi	r24, 0x90	; 144
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    11c8:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    11d2:	88 89       	ldd	r24, Y+16	; 0x10
    11d4:	80 68       	ori	r24, 0x80	; 128
    11d6:	88 8b       	std	Y+16, r24	; 0x10
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <tiny_dma_set_mode_7>:
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	87 e0       	ldi	r24, 0x07	; 7
    11e4:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    11e8:	cc dc       	rcall	.-1640   	; 0xb82 <tiny_dma_flush>
    11ea:	c0 e0       	ldi	r28, 0x00	; 0
    11ec:	d1 e0       	ldi	r29, 0x01	; 1
    11ee:	1e aa       	std	Y+54, r1	; 0x36
    11f0:	94 e2       	ldi	r25, 0x24	; 36
    11f2:	98 ab       	std	Y+48, r25	; 0x30
    11f4:	19 aa       	std	Y+49, r1	; 0x31
    11f6:	39 e5       	ldi	r19, 0x59	; 89
    11f8:	3a ab       	std	Y+50, r19	; 0x32
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	8b ab       	std	Y+51, r24	; 0x33
    11fe:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    1202:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1206:	4c ab       	std	Y+52, r20	; 0x34
    1208:	5d ab       	std	Y+53, r21	; 0x35
    120a:	4a eb       	ldi	r20, 0xBA	; 186
    120c:	53 e2       	ldi	r21, 0x23	; 35
    120e:	48 af       	std	Y+56, r20	; 0x38
    1210:	59 af       	std	Y+57, r21	; 0x39
    1212:	1a ae       	std	Y+58, r1	; 0x3a
    1214:	29 e3       	ldi	r18, 0x39	; 57
    1216:	2c af       	std	Y+60, r18	; 0x3c
    1218:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    121c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1220:	28 a9       	ldd	r18, Y+48	; 0x30
    1222:	20 68       	ori	r18, 0x80	; 128
    1224:	28 ab       	std	Y+48, r18	; 0x30
    1226:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    122a:	e0 e4       	ldi	r30, 0x40	; 64
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	90 83       	st	Z, r25
    1230:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1234:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1238:	32 e0       	ldi	r19, 0x02	; 2
    123a:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    123e:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    1242:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1246:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    124a:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    124e:	4b ec       	ldi	r20, 0xCB	; 203
    1250:	55 e2       	ldi	r21, 0x25	; 37
    1252:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1256:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    125a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    125e:	2b e3       	ldi	r18, 0x3B	; 59
    1260:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1264:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1268:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    126c:	20 81       	ld	r18, Z
    126e:	20 68       	ori	r18, 0x80	; 128
    1270:	20 83       	st	Z, r18
    1272:	18 8a       	std	Y+16, r1	; 0x10
    1274:	20 e4       	ldi	r18, 0x40	; 64
    1276:	28 8b       	std	Y+16, r18	; 0x10
    1278:	25 e2       	ldi	r18, 0x25	; 37
    127a:	28 8b       	std	Y+16, r18	; 0x10
    127c:	89 8b       	std	Y+17, r24	; 0x11
    127e:	85 e9       	ldi	r24, 0x95	; 149
    1280:	8a 8b       	std	Y+18, r24	; 0x12
    1282:	80 e1       	ldi	r24, 0x10	; 16
    1284:	8b 8b       	std	Y+19, r24	; 0x13
    1286:	4c ed       	ldi	r20, 0xDC	; 220
    1288:	55 e0       	ldi	r21, 0x05	; 5
    128a:	4c 8b       	std	Y+20, r20	; 0x14
    128c:	5d 8b       	std	Y+21, r21	; 0x15
    128e:	98 8f       	std	Y+24, r25	; 0x18
    1290:	39 8f       	std	Y+25, r19	; 0x19
    1292:	1a 8e       	std	Y+26, r1	; 0x1a
    1294:	8c ee       	ldi	r24, 0xEC	; 236
    1296:	97 e2       	ldi	r25, 0x27	; 39
    1298:	8c 8f       	std	Y+28, r24	; 0x1c
    129a:	9d 8f       	std	Y+29, r25	; 0x1d
    129c:	1e 8e       	std	Y+30, r1	; 0x1e
    129e:	68 ec       	ldi	r22, 0xC8	; 200
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	84 ef       	ldi	r24, 0xF4	; 244
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	18 da       	rcall	.-3024   	; 0x6d8 <tiny_calibration_synchronise_phase>
    12a8:	80 e9       	ldi	r24, 0x90	; 144
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    12b0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    12ba:	88 89       	ldd	r24, Y+16	; 0x10
    12bc:	80 68       	ori	r24, 0x80	; 128
    12be:	88 8b       	std	Y+16, r24	; 0x10
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <__vector_6>:
}

ISR(DMA_CH0_vect){
    12c6:	1f 92       	push	r1
    12c8:	0f 92       	push	r0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	0f 92       	push	r0
    12ce:	11 24       	eor	r1, r1
    12d0:	8f 93       	push	r24
    12d2:	9f 93       	push	r25
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
	DMA.INTFLAGS = 0x01;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch0_ran++;
    12de:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    12e2:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	80 93 9c 23 	sts	0x239C, r24	; 0x80239c <dma_ch0_ran>
    12ec:	90 93 9d 23 	sts	0x239D, r25	; 0x80239d <dma_ch0_ran+0x1>
	uds.dma_ch0_cntL = dma_ch0_ran & 0xff;
    12f0:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    12f4:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    12f8:	ee e9       	ldi	r30, 0x9E	; 158
    12fa:	f3 e2       	ldi	r31, 0x23	; 35
    12fc:	87 8b       	std	Z+23, r24	; 0x17
	uds.dma_ch0_cntH = (dma_ch0_ran >> 8) & 0xff;
    12fe:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    1302:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    1306:	90 8f       	std	Z+24, r25	; 0x18
}
    1308:	ff 91       	pop	r31
    130a:	ef 91       	pop	r30
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_7>:

ISR(DMA_CH1_vect){
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
	DMA.INTFLAGS = 0x02;
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch1_ran++;
    1332:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    1336:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	80 93 9a 23 	sts	0x239A, r24	; 0x80239a <dma_ch1_ran>
    1340:	90 93 9b 23 	sts	0x239B, r25	; 0x80239b <dma_ch1_ran+0x1>
	uds.dma_ch1_cntL = dma_ch1_ran & 0xff;
    1344:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    1348:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    134c:	ee e9       	ldi	r30, 0x9E	; 158
    134e:	f3 e2       	ldi	r31, 0x23	; 35
    1350:	81 8f       	std	Z+25, r24	; 0x19
	uds.dma_ch1_cntH = (dma_ch1_ran >> 8) & 0xff;
    1352:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    1356:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    135a:	92 8f       	std	Z+26, r25	; 0x1a
}
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    136e:	e0 e7       	ldi	r30, 0x70	; 112
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	83 81       	ldd	r24, Z+3	; 0x03
    1374:	8c 7f       	andi	r24, 0xFC	; 252
    1376:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    1378:	84 81       	ldd	r24, Z+4	; 0x04
    137a:	8c 7f       	andi	r24, 0xFC	; 252
    137c:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    137e:	80 81       	ld	r24, Z
    1380:	8d 7f       	andi	r24, 0xFD	; 253
    1382:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    1384:	e0 e8       	ldi	r30, 0x80	; 128
    1386:	f1 e0       	ldi	r31, 0x01	; 1
    1388:	80 ec       	ldi	r24, 0xC0	; 192
    138a:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    138c:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    138e:	88 ec       	ldi	r24, 0xC8	; 200
    1390:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1392:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b8 e0       	ldi	r27, 0x08	; 8
    1398:	34 e0       	ldi	r19, 0x04	; 4
    139a:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    139c:	23 e0       	ldi	r18, 0x03	; 3
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	2c 93       	st	X, r18
    13a2:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    13a4:	14 96       	adiw	r26, 0x04	; 4
    13a6:	1c 92       	st	X, r1
    13a8:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    13aa:	85 ed       	ldi	r24, 0xD5	; 213
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	96 96       	adiw	r26, 0x26	; 38
    13b0:	8d 93       	st	X+, r24
    13b2:	9c 93       	st	X, r25
    13b4:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    13b6:	16 96       	adiw	r26, 0x06	; 6
    13b8:	1c 92       	st	X, r1
    13ba:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    13bc:	e0 e4       	ldi	r30, 0x40	; 64
    13be:	f8 e0       	ldi	r31, 0x08	; 8
    13c0:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    13c2:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    13c4:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    13c6:	86 a3       	std	Z+38, r24	; 0x26
    13c8:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    13ca:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    13cc:	e0 e6       	ldi	r30, 0x60	; 96
    13ce:	f6 e0       	ldi	r31, 0x06	; 6
    13d0:	80 81       	ld	r24, Z
    13d2:	80 61       	ori	r24, 0x10	; 16
    13d4:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    13d6:	e0 e4       	ldi	r30, 0x40	; 64
    13d8:	f9 e0       	ldi	r31, 0x09	; 9
    13da:	83 e1       	ldi	r24, 0x13	; 19
    13dc:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    13de:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    13e4:	a6 a3       	std	Z+38, r26	; 0x26
    13e6:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    13e8:	10 a6       	std	Z+40, r1	; 0x28
    13ea:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 83       	st	Z, r24
    13f0:	08 95       	ret

000013f2 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	ef 93       	push	r30
    140a:	ff 93       	push	r31
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	1f 92       	push	r1
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    141c:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    1420:	87 30       	cpi	r24, 0x07	; 7
    1422:	31 f4       	brne	.+12     	; 0x1430 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    1424:	e0 e0       	ldi	r30, 0x00	; 0
    1426:	f2 e0       	ldi	r31, 0x02	; 2
    1428:	84 a5       	ldd	r24, Z+44	; 0x2c
    142a:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    142c:	95 a5       	ldd	r25, Z+45	; 0x2d
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1430:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    1434:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <PSU_target>
    1438:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    143a:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    143e:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	0c f4       	brge	.+2      	; 0x144a <__vector_83+0x58>
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	99 23       	and	r25, r25
    144c:	c9 f0       	breq	.+50     	; 0x1480 <__vector_83+0x8e>
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	2a 3f       	cpi	r18, 0xFA	; 250
    1452:	37 40       	sbci	r19, 0x07	; 7
    1454:	08 f0       	brcs	.+2      	; 0x1458 <__vector_83+0x66>
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	99 23       	and	r25, r25
    145a:	91 f0       	breq	.+36     	; 0x1480 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    145c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1460:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1464:	89 30       	cpi	r24, 0x09	; 9
    1466:	1c f4       	brge	.+6      	; 0x146e <__vector_83+0x7c>
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <__vector_83+0x80>
    146e:	86 e0       	ldi	r24, 0x06	; 6
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    147a:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    147e:	23 c0       	rjmp	.+70     	; 0x14c6 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1480:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1484:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	8f 3f       	cpi	r24, 0xFF	; 255
    148c:	0c f0       	brlt	.+2      	; 0x1490 <__vector_83+0x9e>
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	99 23       	and	r25, r25
    1492:	c9 f0       	breq	.+50     	; 0x14c6 <__vector_83+0xd4>
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	27 30       	cpi	r18, 0x07	; 7
    1498:	31 05       	cpc	r19, r1
    149a:	08 f4       	brcc	.+2      	; 0x149e <__vector_83+0xac>
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	99 23       	and	r25, r25
    14a0:	91 f0       	breq	.+36     	; 0x14c6 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    14a2:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    14a6:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    14aa:	88 3f       	cpi	r24, 0xF8	; 248
    14ac:	1c f0       	brlt	.+6      	; 0x14b4 <__vector_83+0xc2>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <__vector_83+0xc6>
    14b4:	86 e0       	ldi	r24, 0x06	; 6
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a9 01       	movw	r20, r18
    14ba:	48 1b       	sub	r20, r24
    14bc:	59 0b       	sbc	r21, r25
    14be:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    14c2:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    14c6:	0f 90       	pop	r0
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	ff 91       	pop	r31
    14ce:	ef 91       	pop	r30
    14d0:	9f 91       	pop	r25
    14d2:	8f 91       	pop	r24
    14d4:	5f 91       	pop	r21
    14d6:	4f 91       	pop	r20
    14d8:	3f 91       	pop	r19
    14da:	2f 91       	pop	r18
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    14e6:	e0 e7       	ldi	r30, 0x70	; 112
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	83 81       	ldd	r24, Z+3	; 0x03
    14ec:	8f 7e       	andi	r24, 0xEF	; 239
    14ee:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    14f0:	e0 e4       	ldi	r30, 0x40	; 64
    14f2:	f6 e0       	ldi	r31, 0x06	; 6
    14f4:	80 81       	ld	r24, Z
    14f6:	8a 6a       	ori	r24, 0xAA	; 170
    14f8:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14fe:	88 e5       	ldi	r24, 0x58	; 88
    1500:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLA = USART_RXCINTLVL_HI_gc;
    1502:	e0 ea       	ldi	r30, 0xA0	; 160
    1504:	f8 e0       	ldi	r31, 0x08	; 8
    1506:	80 e3       	ldi	r24, 0x30	; 48
    1508:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    150a:	84 ec       	ldi	r24, 0xC4	; 196
    150c:	85 83       	std	Z+5, r24	; 0x05
	#if OVERCLOCK == 48
		USARTC0.BAUDCTRLA = 7;  	//BSEL = fper/(2fbaud) -1;  48/(2*3) - 1 = 7
    150e:	87 e0       	ldi	r24, 0x07	; 7
    1510:	86 83       	std	Z+6, r24	; 0x06
	#else
		USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
	#endif
	USARTC0.BAUDCTRLB = 0x00;// USART_BSCALE0_bm goes to 1.5MHz for some reason;
    1512:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1514:	88 e1       	ldi	r24, 0x18	; 24
    1516:	84 83       	std	Z+4, r24	; 0x04
    1518:	08 95       	ret

0000151a <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    151a:	e0 e7       	ldi	r30, 0x70	; 112
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	83 81       	ldd	r24, Z+3	; 0x03
    1520:	87 7f       	andi	r24, 0xF7	; 247
    1522:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1524:	e0 ec       	ldi	r30, 0xC0	; 192
    1526:	f8 e0       	ldi	r31, 0x08	; 8
    1528:	80 e4       	ldi	r24, 0x40	; 64
    152a:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    152c:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    152e:	88 e5       	ldi	r24, 0x58	; 88
    1530:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1534:	08 95       	ret

00001536 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	0f 92       	push	r0
    153e:	11 24       	eor	r1, r1
	asm("nop");
    1540:	00 00       	nop
}
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__vector_25>:

ISR(USARTC0_RXC_vect){
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	8f 93       	push	r24
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
	unsigned char temp = USARTC0.DATA;
    155c:	e0 ea       	ldi	r30, 0xA0	; 160
    155e:	f8 e0       	ldi	r31, 0x08	; 8
    1560:	80 81       	ld	r24, Z
	USARTC0.DATA = temp;
    1562:	80 83       	st	Z, r24
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	8f 91       	pop	r24
    156a:	0f 90       	pop	r0
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	0f 90       	pop	r0
    1570:	1f 90       	pop	r1
    1572:	18 95       	reti

00001574 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1574:	9f b7       	in	r25, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	e8 2f       	mov	r30, r24
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	e0 59       	subi	r30, 0x90	; 144
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	60 95       	com	r22
    1582:	80 81       	ld	r24, Z
    1584:	68 23       	and	r22, r24
    1586:	60 83       	st	Z, r22
    1588:	9f bf       	out	0x3f, r25	; 63
    158a:	08 95       	ret

0000158c <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    158c:	86 30       	cpi	r24, 0x06	; 6
    158e:	11 f0       	breq	.+4      	; 0x1594 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1594:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1596:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    159a:	81 fd       	sbrc	r24, 1
    159c:	26 c0       	rjmp	.+76     	; 0x15ea <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    159e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    15a0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    15a2:	e0 e5       	ldi	r30, 0x50	; 80
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	82 60       	ori	r24, 0x02	; 2
    15aa:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15ac:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    15ae:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    15b0:	81 ff       	sbrs	r24, 1
    15b2:	fd cf       	rjmp	.-6      	; 0x15ae <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    15b4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    15b6:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    15b8:	a0 e5       	ldi	r26, 0x50	; 80
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	16 96       	adiw	r26, 0x06	; 6
    15be:	8c 91       	ld	r24, X
    15c0:	16 97       	sbiw	r26, 0x06	; 6
    15c2:	89 7f       	andi	r24, 0xF9	; 249
    15c4:	16 96       	adiw	r26, 0x06	; 6
    15c6:	8c 93       	st	X, r24
    15c8:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    15ca:	e0 e6       	ldi	r30, 0x60	; 96
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 e8       	ldi	r24, 0x80	; 128
    15d0:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    15d2:	8b eb       	ldi	r24, 0xBB	; 187
    15d4:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    15d6:	16 96       	adiw	r26, 0x06	; 6
    15d8:	8c 91       	ld	r24, X
    15da:	16 97       	sbiw	r26, 0x06	; 6
    15dc:	84 60       	ori	r24, 0x04	; 4
    15de:	16 96       	adiw	r26, 0x06	; 6
    15e0:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    15e2:	80 81       	ld	r24, Z
    15e4:	81 60       	ori	r24, 0x01	; 1
    15e6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15e8:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    15ea:	63 60       	ori	r22, 0x03	; 3
    15ec:	84 e4       	ldi	r24, 0x44	; 68
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0d d5       	rcall	.+2586   	; 0x200c <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    15f2:	60 e4       	ldi	r22, 0x40	; 64
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	be cf       	rjmp	.-132    	; 0x1574 <sysclk_enable_module>
    15f8:	08 95       	ret

000015fa <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    15fa:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udi_vendor_alternate_setting>
    15fe:	08 95       	ret

00001600 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    1600:	1d d1       	rcall	.+570    	; 0x183c <udc_get_interface_desc>
    1602:	fc 01       	movw	r30, r24
    1604:	83 81       	ldd	r24, Z+3	; 0x03
    1606:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    160a:	81 11       	cpse	r24, r1
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    160e:	c6 c9       	rjmp	.-3188   	; 0x99c <main_vendor_enable>
    1610:	08 95       	ret
			return false;
		}
	}
	return true;
    1612:	81 e0       	ldi	r24, 0x01	; 1
}
    1614:	08 95       	ret

00001616 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    1616:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udi_vendor_alternate_setting>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	09 f4       	brne	.+2      	; 0x1620 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    161e:	fb c9       	rjmp	.-3082   	; 0xa16 <main_vendor_disable>
    1620:	08 95       	ret

00001622 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1622:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1626:	88 23       	and	r24, r24
    1628:	4c f4       	brge	.+18     	; 0x163c <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    162a:	80 76       	andi	r24, 0x60	; 96
    162c:	80 34       	cpi	r24, 0x40	; 64
    162e:	a9 f4       	brne	.+42     	; 0x165a <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1630:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1634:	81 11       	cpse	r24, r1
    1636:	13 c0       	rjmp	.+38     	; 0x165e <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1638:	f3 c9       	rjmp	.-3098   	; 0xa20 <main_setup_in_received>
    163a:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    163c:	80 76       	andi	r24, 0x60	; 96
    163e:	80 34       	cpi	r24, 0x40	; 64
    1640:	81 f4       	brne	.+32     	; 0x1662 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1642:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1646:	81 11       	cpse	r24, r1
    1648:	0e c0       	rjmp	.+28     	; 0x1666 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    164a:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    164e:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1652:	89 2b       	or	r24, r25
    1654:	51 f0       	breq	.+20     	; 0x166a <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1656:	e2 c9       	rjmp	.-3132   	; 0xa1c <main_setup_out_received>
    1658:	08 95       	ret
		}
	}
	return false; // Not supported request
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	08 95       	ret
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	08 95       	ret
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	08 95       	ret
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	08 95       	ret
    166a:	80 e0       	ldi	r24, 0x00	; 0
}
    166c:	08 95       	ret

0000166e <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    166e:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1672:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1676:	01 90       	ld	r0, Z+
    1678:	f0 81       	ld	r31, Z
    167a:	e0 2d       	mov	r30, r0
    167c:	22 81       	ldd	r18, Z+2	; 0x02
    167e:	33 81       	ldd	r19, Z+3	; 0x03
    1680:	2e 0f       	add	r18, r30
    1682:	3f 1f       	adc	r19, r31
    1684:	fc 01       	movw	r30, r24
    1686:	40 81       	ld	r20, Z
    1688:	e4 0f       	add	r30, r20
    168a:	f1 1d       	adc	r31, r1
    168c:	e2 17       	cp	r30, r18
    168e:	f3 07       	cpc	r31, r19
    1690:	b8 f4       	brcc	.+46     	; 0x16c0 <udc_next_desc_in_iface+0x52>
    1692:	81 81       	ldd	r24, Z+1	; 0x01
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	b9 f0       	breq	.+46     	; 0x16c6 <udc_next_desc_in_iface+0x58>
    1698:	86 13       	cpse	r24, r22
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <udc_next_desc_in_iface+0x40>
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <udc_next_desc_in_iface+0x3a>
    169e:	81 81       	ldd	r24, Z+1	; 0x01
    16a0:	84 30       	cpi	r24, 0x04	; 4
    16a2:	a1 f0       	breq	.+40     	; 0x16cc <udc_next_desc_in_iface+0x5e>
    16a4:	86 13       	cpse	r24, r22
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <udc_next_desc_in_iface+0x40>
    16a8:	8e 2f       	mov	r24, r30
    16aa:	9f 2f       	mov	r25, r31
    16ac:	08 95       	ret
    16ae:	80 81       	ld	r24, Z
    16b0:	e8 0f       	add	r30, r24
    16b2:	f1 1d       	adc	r31, r1
    16b4:	e2 17       	cp	r30, r18
    16b6:	f3 07       	cpc	r31, r19
    16b8:	90 f3       	brcs	.-28     	; 0x169e <udc_next_desc_in_iface+0x30>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	08 95       	ret
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	08 95       	ret
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	08 95       	ret

000016d2 <udc_valid_address>:
    16d2:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    16d6:	8f 77       	andi	r24, 0x7F	; 127
    16d8:	0c 94 27 14 	jmp	0x284e	; 0x284e <udd_set_address>
    16dc:	08 95       	ret

000016de <udc_update_iface_desc>:
    16de:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <udc_num_configuration>
    16e2:	99 23       	and	r25, r25
    16e4:	81 f1       	breq	.+96     	; 0x1746 <udc_update_iface_desc+0x68>
    16e6:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    16ea:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    16ee:	01 90       	ld	r0, Z+
    16f0:	f0 81       	ld	r31, Z
    16f2:	e0 2d       	mov	r30, r0
    16f4:	94 81       	ldd	r25, Z+4	; 0x04
    16f6:	89 17       	cp	r24, r25
    16f8:	40 f5       	brcc	.+80     	; 0x174a <udc_update_iface_desc+0x6c>
    16fa:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    16fe:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    1702:	22 81       	ldd	r18, Z+2	; 0x02
    1704:	33 81       	ldd	r19, Z+3	; 0x03
    1706:	2e 0f       	add	r18, r30
    1708:	3f 1f       	adc	r19, r31
    170a:	e2 17       	cp	r30, r18
    170c:	f3 07       	cpc	r31, r19
    170e:	f8 f4       	brcc	.+62     	; 0x174e <udc_update_iface_desc+0x70>
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	94 30       	cpi	r25, 0x04	; 4
    1714:	61 f4       	brne	.+24     	; 0x172e <udc_update_iface_desc+0x50>
    1716:	92 81       	ldd	r25, Z+2	; 0x02
    1718:	98 13       	cpse	r25, r24
    171a:	09 c0       	rjmp	.+18     	; 0x172e <udc_update_iface_desc+0x50>
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	96 13       	cpse	r25, r22
    1720:	06 c0       	rjmp	.+12     	; 0x172e <udc_update_iface_desc+0x50>
    1722:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    1726:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	08 95       	ret
    172e:	90 81       	ld	r25, Z
    1730:	e9 0f       	add	r30, r25
    1732:	f1 1d       	adc	r31, r1
    1734:	e2 17       	cp	r30, r18
    1736:	f3 07       	cpc	r31, r19
    1738:	58 f3       	brcs	.-42     	; 0x1710 <udc_update_iface_desc+0x32>
    173a:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    173e:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	08 95       	ret
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	08 95       	ret
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	08 95       	ret
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	08 95       	ret

00001752 <udc_iface_disable>:
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	c8 2f       	mov	r28, r24
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	be df       	rcall	.-132    	; 0x16de <udc_update_iface_desc>
    1762:	18 2f       	mov	r17, r24
    1764:	88 23       	and	r24, r24
    1766:	81 f1       	breq	.+96     	; 0x17c8 <udc_iface_disable+0x76>
    1768:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    176c:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1770:	ec 2f       	mov	r30, r28
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	12 96       	adiw	r26, 0x02	; 2
    177a:	8d 91       	ld	r24, X+
    177c:	9c 91       	ld	r25, X
    177e:	13 97       	sbiw	r26, 0x03	; 3
    1780:	e8 0f       	add	r30, r24
    1782:	f9 1f       	adc	r31, r25
    1784:	e0 80       	ld	r14, Z
    1786:	f1 80       	ldd	r15, Z+1	; 0x01
    1788:	d7 01       	movw	r26, r14
    178a:	16 96       	adiw	r26, 0x06	; 6
    178c:	ed 91       	ld	r30, X+
    178e:	fc 91       	ld	r31, X
    1790:	17 97       	sbiw	r26, 0x07	; 7
    1792:	09 95       	icall
    1794:	68 2f       	mov	r22, r24
    1796:	8c 2f       	mov	r24, r28
    1798:	a2 df       	rcall	.-188    	; 0x16de <udc_update_iface_desc>
    179a:	18 2f       	mov	r17, r24
    179c:	88 23       	and	r24, r24
    179e:	a1 f0       	breq	.+40     	; 0x17c8 <udc_iface_disable+0x76>
    17a0:	c0 91 bd 20 	lds	r28, 0x20BD	; 0x8020bd <udc_ptr_iface>
    17a4:	d0 91 be 20 	lds	r29, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    17a8:	65 e0       	ldi	r22, 0x05	; 5
    17aa:	ce 01       	movw	r24, r28
    17ac:	60 df       	rcall	.-320    	; 0x166e <udc_next_desc_in_iface>
    17ae:	ec 01       	movw	r28, r24
    17b0:	89 2b       	or	r24, r25
    17b2:	21 f0       	breq	.+8      	; 0x17bc <udc_iface_disable+0x6a>
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <udd_ep_free>
    17ba:	f6 cf       	rjmp	.-20     	; 0x17a8 <udc_iface_disable+0x56>
    17bc:	d7 01       	movw	r26, r14
    17be:	12 96       	adiw	r26, 0x02	; 2
    17c0:	ed 91       	ld	r30, X+
    17c2:	fc 91       	ld	r31, X
    17c4:	13 97       	sbiw	r26, 0x03	; 3
    17c6:	09 95       	icall
    17c8:	81 2f       	mov	r24, r17
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	08 95       	ret

000017d6 <udc_iface_enable>:
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	18 2f       	mov	r17, r24
    17de:	7f df       	rcall	.-258    	; 0x16de <udc_update_iface_desc>
    17e0:	88 23       	and	r24, r24
    17e2:	41 f1       	breq	.+80     	; 0x1834 <udc_iface_enable+0x5e>
    17e4:	c0 91 bd 20 	lds	r28, 0x20BD	; 0x8020bd <udc_ptr_iface>
    17e8:	d0 91 be 20 	lds	r29, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    17ec:	65 e0       	ldi	r22, 0x05	; 5
    17ee:	ce 01       	movw	r24, r28
    17f0:	3e df       	rcall	.-388    	; 0x166e <udc_next_desc_in_iface>
    17f2:	ec 01       	movw	r28, r24
    17f4:	89 2b       	or	r24, r25
    17f6:	49 f0       	breq	.+18     	; 0x180a <udc_iface_enable+0x34>
    17f8:	4c 81       	ldd	r20, Y+4	; 0x04
    17fa:	5d 81       	ldd	r21, Y+5	; 0x05
    17fc:	6b 81       	ldd	r22, Y+3	; 0x03
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	0e 94 34 14 	call	0x2868	; 0x2868 <udd_ep_alloc>
    1804:	81 11       	cpse	r24, r1
    1806:	f2 cf       	rjmp	.-28     	; 0x17ec <udc_iface_enable+0x16>
    1808:	15 c0       	rjmp	.+42     	; 0x1834 <udc_iface_enable+0x5e>
    180a:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    180e:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1812:	e1 2f       	mov	r30, r17
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	12 96       	adiw	r26, 0x02	; 2
    181c:	8d 91       	ld	r24, X+
    181e:	9c 91       	ld	r25, X
    1820:	13 97       	sbiw	r26, 0x03	; 3
    1822:	e8 0f       	add	r30, r24
    1824:	f9 1f       	adc	r31, r25
    1826:	01 90       	ld	r0, Z+
    1828:	f0 81       	ld	r31, Z
    182a:	e0 2d       	mov	r30, r0
    182c:	01 90       	ld	r0, Z+
    182e:	f0 81       	ld	r31, Z
    1830:	e0 2d       	mov	r30, r0
    1832:	09 95       	icall
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	08 95       	ret

0000183c <udc_get_interface_desc>:
    183c:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <udc_ptr_iface>
    1840:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    1844:	08 95       	ret

00001846 <udc_start>:
    1846:	88 c7       	rjmp	.+3856   	; 0x2758 <udd_enable>
    1848:	08 95       	ret

0000184a <udc_reset>:
    184a:	cf 93       	push	r28
    184c:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1850:	88 23       	and	r24, r24
    1852:	c1 f0       	breq	.+48     	; 0x1884 <udc_reset+0x3a>
    1854:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1858:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    185c:	01 90       	ld	r0, Z+
    185e:	f0 81       	ld	r31, Z
    1860:	e0 2d       	mov	r30, r0
    1862:	84 81       	ldd	r24, Z+4	; 0x04
    1864:	88 23       	and	r24, r24
    1866:	71 f0       	breq	.+28     	; 0x1884 <udc_reset+0x3a>
    1868:	c0 e0       	ldi	r28, 0x00	; 0
    186a:	8c 2f       	mov	r24, r28
    186c:	72 df       	rcall	.-284    	; 0x1752 <udc_iface_disable>
    186e:	cf 5f       	subi	r28, 0xFF	; 255
    1870:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1874:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1878:	01 90       	ld	r0, Z+
    187a:	f0 81       	ld	r31, Z
    187c:	e0 2d       	mov	r30, r0
    187e:	84 81       	ldd	r24, Z+4	; 0x04
    1880:	c8 17       	cp	r28, r24
    1882:	98 f3       	brcs	.-26     	; 0x186a <udc_reset+0x20>
    1884:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_num_configuration>
    1888:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <udc_device_status>
    188c:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <udc_device_status+0x1>
    1890:	cf 91       	pop	r28
    1892:	08 95       	ret

00001894 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1894:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1896:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    189a:	88 23       	and	r24, r24
    189c:	49 f1       	breq	.+82     	; 0x18f0 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    189e:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    18a2:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    18a6:	ed 91       	ld	r30, X+
    18a8:	fc 91       	ld	r31, X
    18aa:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18ac:	84 81       	ldd	r24, Z+4	; 0x04
    18ae:	88 23       	and	r24, r24
    18b0:	f9 f0       	breq	.+62     	; 0x18f0 <udc_sof_notify+0x5c>
    18b2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    18b4:	ec 2f       	mov	r30, r28
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	12 96       	adiw	r26, 0x02	; 2
    18be:	8d 91       	ld	r24, X+
    18c0:	9c 91       	ld	r25, X
    18c2:	13 97       	sbiw	r26, 0x03	; 3
    18c4:	e8 0f       	add	r30, r24
    18c6:	f9 1f       	adc	r31, r25
    18c8:	01 90       	ld	r0, Z+
    18ca:	f0 81       	ld	r31, Z
    18cc:	e0 2d       	mov	r30, r0
    18ce:	00 84       	ldd	r0, Z+8	; 0x08
    18d0:	f1 85       	ldd	r31, Z+9	; 0x09
    18d2:	e0 2d       	mov	r30, r0
    18d4:	30 97       	sbiw	r30, 0x00	; 0
    18d6:	09 f0       	breq	.+2      	; 0x18da <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    18d8:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    18da:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18dc:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    18e0:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    18e4:	ed 91       	ld	r30, X+
    18e6:	fc 91       	ld	r31, X
    18e8:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18ea:	84 81       	ldd	r24, Z+4	; 0x04
    18ec:	c8 17       	cp	r28, r24
    18ee:	10 f3       	brcs	.-60     	; 0x18b4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    18fc:	ea eb       	ldi	r30, 0xBA	; 186
    18fe:	f5 e2       	ldi	r31, 0x25	; 37
    1900:	12 86       	std	Z+10, r1	; 0x0a
    1902:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1904:	14 86       	std	Z+12, r1	; 0x0c
    1906:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1908:	16 86       	std	Z+14, r1	; 0x0e
    190a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    190c:	80 81       	ld	r24, Z
    190e:	28 2f       	mov	r18, r24
    1910:	88 23       	and	r24, r24
    1912:	3c f4       	brge	.+14     	; 0x1922 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1914:	40 91 c0 25 	lds	r20, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1918:	50 91 c1 25 	lds	r21, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    191c:	45 2b       	or	r20, r21
    191e:	09 f4       	brne	.+2      	; 0x1922 <udc_process_setup+0x2e>
    1920:	69 c3       	rjmp	.+1746   	; 0x1ff4 <udc_process_setup+0x700>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1922:	98 2f       	mov	r25, r24
    1924:	90 76       	andi	r25, 0x60	; 96
    1926:	90 34       	cpi	r25, 0x40	; 64
    1928:	09 f0       	breq	.+2      	; 0x192c <udc_process_setup+0x38>
    192a:	0a c1       	rjmp	.+532    	; 0x1b40 <udc_process_setup+0x24c>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    192c:	e0 91 bb 25 	lds	r30, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1930:	4e 2f       	mov	r20, r30
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	fa 01       	movw	r30, r20
    1936:	e0 5a       	subi	r30, 0xA0	; 160
    1938:	f1 09       	sbc	r31, r1
    193a:	e9 30       	cpi	r30, 0x09	; 9
    193c:	f1 05       	cpc	r31, r1
    193e:	08 f0       	brcs	.+2      	; 0x1942 <udc_process_setup+0x4e>
    1940:	ff c0       	rjmp	.+510    	; 0x1b40 <udc_process_setup+0x24c>
    1942:	ea 5f       	subi	r30, 0xFA	; 250
    1944:	fe 4f       	sbci	r31, 0xFE	; 254
    1946:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    1950:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1954:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1958:	ee e9       	ldi	r30, 0x9E	; 158
    195a:	f3 e2       	ldi	r31, 0x23	; 35
    195c:	85 87       	std	Z+13, r24	; 0x0d
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    195e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1962:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1966:	96 87       	std	Z+14, r25	; 0x0e
			uds.calValNeg = cali_value_negative_gradient;
    1968:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <cali_value_negative_gradient>
    196c:	87 87       	std	Z+15, r24	; 0x0f
			uds.calValPos = cali_value_positive_gradient;
    196e:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <cali_value_positive_gradient>
    1972:	80 8b       	std	Z+16, r24	; 0x10
			uds.CALA = DFLLRC2M.CALA;
    1974:	a8 e6       	ldi	r26, 0x68	; 104
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	12 96       	adiw	r26, 0x02	; 2
    197a:	8c 91       	ld	r24, X
    197c:	12 97       	sbiw	r26, 0x02	; 2
    197e:	81 8b       	std	Z+17, r24	; 0x11
			uds.CALB = DFLLRC2M.CALB;
    1980:	13 96       	adiw	r26, 0x03	; 3
    1982:	8c 91       	ld	r24, X
    1984:	82 8b       	std	Z+18, r24	; 0x12
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    1986:	60 91 c0 25 	lds	r22, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    198a:	70 91 c1 25 	lds	r23, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    198e:	cf 01       	movw	r24, r30
    1990:	64 d7       	rcall	.+3784   	; 0x285a <udd_set_setup_payload>
    1992:	34 c3       	rjmp	.+1640   	; 0x1ffc <udc_process_setup+0x708>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1994:	e0 e0       	ldi	r30, 0x00	; 0
    1996:	f8 e0       	ldi	r31, 0x08	; 8
    1998:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    199a:	ca eb       	ldi	r28, 0xBA	; 186
    199c:	d5 e2       	ldi	r29, 0x25	; 37
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	86 ab       	std	Z+54, r24	; 0x36
    19a4:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	8f 70       	andi	r24, 0x0F	; 15
    19aa:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    19ac:	6e 81       	ldd	r22, Y+6	; 0x06
    19ae:	7f 81       	ldd	r23, Y+7	; 0x07
    19b0:	8a eb       	ldi	r24, 0xBA	; 186
    19b2:	93 e2       	ldi	r25, 0x23	; 35
    19b4:	52 d7       	rcall	.+3748   	; 0x285a <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ba:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    19be:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    19c2:	82 17       	cp	r24, r18
    19c4:	93 07       	cpc	r25, r19
    19c6:	09 f4       	brne	.+2      	; 0x19ca <udc_process_setup+0xd6>
    19c8:	19 c3       	rjmp	.+1586   	; 0x1ffc <udc_process_setup+0x708>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    19ca:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    19ce:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				tiny_dma_delayed_set(global_mode);
    19d2:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19d6:	f2 d8       	rcall	.-3612   	; 0xbbc <tiny_dma_delayed_set>
    19d8:	11 c3       	rjmp	.+1570   	; 0x1ffc <udc_process_setup+0x708>
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    19da:	e0 e4       	ldi	r30, 0x40	; 64
    19dc:	f8 e0       	ldi	r31, 0x08	; 8
    19de:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    19e0:	ca eb       	ldi	r28, 0xBA	; 186
    19e2:	d5 e2       	ldi	r29, 0x25	; 37
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	86 ab       	std	Z+54, r24	; 0x36
    19ea:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	8f 70       	andi	r24, 0x0F	; 15
    19f0:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    19f2:	6e 81       	ldd	r22, Y+6	; 0x06
    19f4:	7f 81       	ldd	r23, Y+7	; 0x07
    19f6:	8b ec       	ldi	r24, 0xCB	; 203
    19f8:	95 e2       	ldi	r25, 0x25	; 37
    19fa:	2f d7       	rcall	.+3678   	; 0x285a <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    1a04:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1a08:	82 17       	cp	r24, r18
    1a0a:	93 07       	cpc	r25, r19
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <udc_process_setup+0x11c>
    1a0e:	f6 c2       	rjmp	.+1516   	; 0x1ffc <udc_process_setup+0x708>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1a10:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    1a14:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				tiny_dma_delayed_set(global_mode);
    1a18:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    1a1c:	cf d8       	rcall	.-3682   	; 0xbbc <tiny_dma_delayed_set>
    1a1e:	ee c2       	rjmp	.+1500   	; 0x1ffc <udc_process_setup+0x708>
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1a20:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1a24:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1a28:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a2c:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <PSU_target>
    1a30:	e5 c2       	rjmp	.+1482   	; 0x1ffc <udc_process_setup+0x708>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1a32:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a36:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1a3a:	e0 c2       	rjmp	.+1472   	; 0x1ffc <udc_process_setup+0x708>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1a3c:	e0 91 bc 25 	lds	r30, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a40:	f0 91 bd 25 	lds	r31, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1a44:	e8 30       	cpi	r30, 0x08	; 8
    1a46:	f1 05       	cpc	r31, r1
    1a48:	08 f0       	brcs	.+2      	; 0x1a4c <udc_process_setup+0x158>
    1a4a:	7a c0       	rjmp	.+244    	; 0x1b40 <udc_process_setup+0x24c>
    1a4c:	e1 5f       	subi	r30, 0xF1	; 241
    1a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a50:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	17 d8       	rcall	.-4050   	; 0xa88 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a5a:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a5e:	0e 94 12 05 	call	0xa24	; 0xa24 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(0);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	ab d8       	rcall	.-3754   	; 0xbbc <tiny_dma_delayed_set>
    1a66:	ca c2       	rjmp	.+1428   	; 0x1ffc <udc_process_setup+0x708>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	0d d8       	rcall	.-4070   	; 0xa88 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a6e:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a72:	0e 94 12 05 	call	0xa24	; 0xa24 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(1);
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	a1 d8       	rcall	.-3774   	; 0xbbc <tiny_dma_delayed_set>
    1a7a:	c0 c2       	rjmp	.+1408   	; 0x1ffc <udc_process_setup+0x708>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	03 d8       	rcall	.-4090   	; 0xa88 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a82:	ca eb       	ldi	r28, 0xBA	; 186
    1a84:	d5 e2       	ldi	r29, 0x25	; 37
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	0e 94 12 05 	call	0xa24	; 0xa24 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	0e 94 27 05 	call	0xa4e	; 0xa4e <tiny_adc_ch1setup>
					tiny_dma_delayed_set(2);
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	93 d8       	rcall	.-3802   	; 0xbbc <tiny_dma_delayed_set>
    1a96:	b2 c2       	rjmp	.+1380   	; 0x1ffc <udc_process_setup+0x708>
					break;
				case 3:  //Mode 3
					tiny_dma_delayed_set(3);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	90 d8       	rcall	.-3808   	; 0xbbc <tiny_dma_delayed_set>
    1a9c:	af c2       	rjmp	.+1374   	; 0x1ffc <udc_process_setup+0x708>
					break;
				case 4:  //Mode 4
					tiny_dma_delayed_set(4);
    1a9e:	84 e0       	ldi	r24, 0x04	; 4
    1aa0:	8d d8       	rcall	.-3814   	; 0xbbc <tiny_dma_delayed_set>
    1aa2:	ac c2       	rjmp	.+1368   	; 0x1ffc <udc_process_setup+0x708>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	0e 94 44 05 	call	0xa88	; 0xa88 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1aac:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1ab0:	0e 94 12 05 	call	0xa24	; 0xa24 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(5);
    1ab4:	85 e0       	ldi	r24, 0x05	; 5
    1ab6:	82 d8       	rcall	.-3836   	; 0xbbc <tiny_dma_delayed_set>
    1ab8:	a1 c2       	rjmp	.+1346   	; 0x1ffc <udc_process_setup+0x708>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	0e 94 44 05 	call	0xa88	; 0xa88 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1ac2:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1ac6:	0e 94 12 05 	call	0xa24	; 0xa24 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(6);
    1aca:	86 e0       	ldi	r24, 0x06	; 6
    1acc:	77 d8       	rcall	.-3858   	; 0xbbc <tiny_dma_delayed_set>
    1ace:	96 c2       	rjmp	.+1324   	; 0x1ffc <udc_process_setup+0x708>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1ad0:	62 e0       	ldi	r22, 0x02	; 2
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 44 05 	call	0xa88	; 0xa88 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1ad8:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1adc:	80 68       	ori	r24, 0x80	; 128
    1ade:	0e 94 12 05 	call	0xa24	; 0xa24 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(7);
    1ae2:	87 e0       	ldi	r24, 0x07	; 7
    1ae4:	6b d8       	rcall	.-3882   	; 0xbbc <tiny_dma_delayed_set>
    1ae6:	8a c2       	rjmp	.+1300   	; 0x1ffc <udc_process_setup+0x708>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1ae8:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1aec:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1af0:	85 c2       	rjmp	.+1290   	; 0x1ffc <udc_process_setup+0x708>
			return 1;
		case 0xa7:  //Soft Reset
		//Fill EEPROM buffer with value
		
		if(udd_g_ctrlreq.req.wValue){
    1af2:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1af6:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1afa:	89 2b       	or	r24, r25
    1afc:	91 f0       	breq	.+36     	; 0x1b22 <udc_process_setup+0x22e>
			eeprom_safe_read();
    1afe:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_safe_read>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
    1b02:	80 e2       	ldi	r24, 0x20	; 32
    1b04:	e8 ec       	ldi	r30, 0xC8	; 200
    1b06:	fd e2       	ldi	r31, 0x2D	; 45
    1b08:	ab ec       	ldi	r26, 0xCB	; 203
    1b0a:	b7 e2       	ldi	r27, 0x27	; 39
    1b0c:	01 90       	ld	r0, Z+
    1b0e:	0d 92       	st	X+, r0
    1b10:	8a 95       	dec	r24
    1b12:	e1 f7       	brne	.-8      	; 0x1b0c <udc_process_setup+0x218>
			eeprom_buffer_write[0] = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <eeprom_buffer_write>
			eeprom_safe_write();
    1b1a:	0e 94 9a 03 	call	0x734	; 0x734 <eeprom_safe_write>
			eeprom_safe_read();
    1b1e:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_safe_read>
		}
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1b22:	e9 e7       	ldi	r30, 0x79	; 121
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	88 ed       	ldi	r24, 0xD8	; 216
    1b2a:	f8 94       	cli
    1b2c:	84 bf       	out	0x34, r24	; 52
    1b2e:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		case 0xa8:  //Firmware Version Request
			udd_set_setup_payload(&firmver, udd_g_ctrlreq.req.wLength);
    1b30:	60 91 c0 25 	lds	r22, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1b34:	70 91 c1 25 	lds	r23, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1b38:	8a ea       	ldi	r24, 0xAA	; 170
    1b3a:	90 e2       	ldi	r25, 0x20	; 32
    1b3c:	8e d6       	rcall	.+3356   	; 0x285a <udd_set_setup_payload>
    1b3e:	5e c2       	rjmp	.+1212   	; 0x1ffc <udc_process_setup+0x708>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1b40:	91 11       	cpse	r25, r1
    1b42:	e1 c1       	rjmp	.+962    	; 0x1f06 <udc_process_setup+0x612>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1b44:	22 23       	and	r18, r18
    1b46:	0c f0       	brlt	.+2      	; 0x1b4a <udc_process_setup+0x256>
    1b48:	05 c1       	rjmp	.+522    	; 0x1d54 <udc_process_setup+0x460>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1b4a:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1b4e:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1b52:	21 15       	cp	r18, r1
    1b54:	31 05       	cpc	r19, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <udc_process_setup+0x266>
    1b58:	d6 c1       	rjmp	.+940    	; 0x1f06 <udc_process_setup+0x612>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b5a:	8f 71       	andi	r24, 0x1F	; 31
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <udc_process_setup+0x26c>
    1b5e:	a3 c0       	rjmp	.+326    	; 0x1ca6 <udc_process_setup+0x3b2>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b60:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1b64:	96 30       	cpi	r25, 0x06	; 6
    1b66:	79 f0       	breq	.+30     	; 0x1b86 <udc_process_setup+0x292>
    1b68:	98 30       	cpi	r25, 0x08	; 8
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <udc_process_setup+0x27a>
    1b6c:	92 c0       	rjmp	.+292    	; 0x1c92 <udc_process_setup+0x39e>
    1b6e:	91 11       	cpse	r25, r1
    1b70:	9a c0       	rjmp	.+308    	; 0x1ca6 <udc_process_setup+0x3b2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1b72:	22 30       	cpi	r18, 0x02	; 2
    1b74:	31 05       	cpc	r19, r1
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <udc_process_setup+0x286>
    1b78:	c6 c1       	rjmp	.+908    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	86 ec       	ldi	r24, 0xC6	; 198
    1b80:	90 e2       	ldi	r25, 0x20	; 32
    1b82:	6b d6       	rcall	.+3286   	; 0x285a <udd_set_setup_payload>
    1b84:	3d c2       	rjmp	.+1146   	; 0x2000 <udc_process_setup+0x70c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b86:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1b8a:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b8e:	29 2f       	mov	r18, r25
    1b90:	33 27       	eor	r19, r19
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	a9 f0       	breq	.+42     	; 0x1bc2 <udc_process_setup+0x2ce>
    1b98:	24 f4       	brge	.+8      	; 0x1ba2 <udc_process_setup+0x2ae>
    1b9a:	21 30       	cpi	r18, 0x01	; 1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	41 f0       	breq	.+16     	; 0x1bb0 <udc_process_setup+0x2bc>
    1ba0:	a9 c1       	rjmp	.+850    	; 0x1ef4 <udc_process_setup+0x600>
    1ba2:	23 30       	cpi	r18, 0x03	; 3
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	d9 f1       	breq	.+118    	; 0x1c1e <udc_process_setup+0x32a>
    1ba8:	2f 30       	cpi	r18, 0x0F	; 15
    1baa:	31 05       	cpc	r19, r1
    1bac:	51 f1       	breq	.+84     	; 0x1c02 <udc_process_setup+0x30e>
    1bae:	a2 c1       	rjmp	.+836    	; 0x1ef4 <udc_process_setup+0x600>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1bb0:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1bb4:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1bb8:	dc 01       	movw	r26, r24
    1bba:	6c 91       	ld	r22, X
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	4d d6       	rcall	.+3226   	; 0x285a <udd_set_setup_payload>
    1bc0:	59 c0       	rjmp	.+178    	; 0x1c74 <udc_process_setup+0x380>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1bc2:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1bc6:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1bca:	21 89       	ldd	r18, Z+17	; 0x11
    1bcc:	82 17       	cp	r24, r18
    1bce:	08 f0       	brcs	.+2      	; 0x1bd2 <udc_process_setup+0x2de>
    1bd0:	9a c1       	rjmp	.+820    	; 0x1f06 <udc_process_setup+0x612>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1bd2:	99 27       	eor	r25, r25
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1be0:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1be4:	e8 0f       	add	r30, r24
    1be6:	f9 1f       	adc	r31, r25
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1bec:	fc 01       	movw	r30, r24
    1bee:	62 81       	ldd	r22, Z+2	; 0x02
    1bf0:	73 81       	ldd	r23, Z+3	; 0x03
    1bf2:	33 d6       	rcall	.+3174   	; 0x285a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1bf4:	e0 91 c2 25 	lds	r30, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    1bf8:	f0 91 c3 25 	lds	r31, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	81 83       	std	Z+1, r24	; 0x01
    1c00:	39 c0       	rjmp	.+114    	; 0x1c74 <udc_process_setup+0x380>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1c02:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1c06:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <udc_process_setup+0x31c>
    1c0e:	7b c1       	rjmp	.+758    	; 0x1f06 <udc_process_setup+0x612>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1c10:	dc 01       	movw	r26, r24
    1c12:	12 96       	adiw	r26, 0x02	; 2
    1c14:	6d 91       	ld	r22, X+
    1c16:	7c 91       	ld	r23, X
    1c18:	13 97       	sbiw	r26, 0x03	; 3
    1c1a:	1f d6       	rcall	.+3134   	; 0x285a <udd_set_setup_payload>
    1c1c:	2b c0       	rjmp	.+86     	; 0x1c74 <udc_process_setup+0x380>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1c1e:	99 27       	eor	r25, r25
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	91 05       	cpc	r25, r1
    1c24:	71 f0       	breq	.+28     	; 0x1c42 <udc_process_setup+0x34e>
    1c26:	38 f0       	brcs	.+14     	; 0x1c36 <udc_process_setup+0x342>
    1c28:	02 97       	sbiw	r24, 0x02	; 2
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <udc_process_setup+0x33a>
    1c2c:	6c c1       	rjmp	.+728    	; 0x1f06 <udc_process_setup+0x612>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1c2e:	2a e8       	ldi	r18, 0x8A	; 138
    1c30:	30 e2       	ldi	r19, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1c32:	88 e0       	ldi	r24, 0x08	; 8
    1c34:	09 c0       	rjmp	.+18     	; 0x1c48 <udc_process_setup+0x354>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1c36:	64 e0       	ldi	r22, 0x04	; 4
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	8c e9       	ldi	r24, 0x9C	; 156
    1c3c:	90 e2       	ldi	r25, 0x20	; 32
    1c3e:	0d d6       	rcall	.+3098   	; 0x285a <udd_set_setup_payload>
    1c40:	19 c0       	rjmp	.+50     	; 0x1c74 <udc_process_setup+0x380>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1c42:	23 e9       	ldi	r18, 0x93	; 147
    1c44:	30 e2       	ldi	r19, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1c46:	87 e0       	ldi	r24, 0x07	; 7
    1c48:	42 2f       	mov	r20, r18
    1c4a:	aa e7       	ldi	r26, 0x7A	; 122
    1c4c:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1c4e:	e2 2f       	mov	r30, r18
    1c50:	f3 2f       	mov	r31, r19
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1c52:	21 91       	ld	r18, Z+
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	2d 93       	st	X+, r18
    1c58:	3d 93       	st	X+, r19
    1c5a:	9e 2f       	mov	r25, r30
    1c5c:	94 1b       	sub	r25, r20
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1c5e:	98 17       	cp	r25, r24
    1c60:	c0 f3       	brcs	.-16     	; 0x1c52 <udc_process_setup+0x35e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1c62:	68 2f       	mov	r22, r24
    1c64:	66 0f       	add	r22, r22
    1c66:	6e 5f       	subi	r22, 0xFE	; 254
    1c68:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	88 e7       	ldi	r24, 0x78	; 120
    1c70:	90 e2       	ldi	r25, 0x20	; 32
    1c72:	f3 d5       	rcall	.+3046   	; 0x285a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1c74:	ea eb       	ldi	r30, 0xBA	; 186
    1c76:	f5 e2       	ldi	r31, 0x25	; 37
    1c78:	86 81       	ldd	r24, Z+6	; 0x06
    1c7a:	97 81       	ldd	r25, Z+7	; 0x07
    1c7c:	22 85       	ldd	r18, Z+10	; 0x0a
    1c7e:	33 85       	ldd	r19, Z+11	; 0x0b
    1c80:	82 17       	cp	r24, r18
    1c82:	93 07       	cpc	r25, r19
    1c84:	08 f0       	brcs	.+2      	; 0x1c88 <udc_process_setup+0x394>
    1c86:	bc c1       	rjmp	.+888    	; 0x2000 <udc_process_setup+0x70c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1c88:	80 93 c4 25 	sts	0x25C4, r24	; 0x8025c4 <udd_g_ctrlreq+0xa>
    1c8c:	90 93 c5 25 	sts	0x25C5, r25	; 0x8025c5 <udd_g_ctrlreq+0xb>
    1c90:	b7 c1       	rjmp	.+878    	; 0x2000 <udc_process_setup+0x70c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1c92:	21 30       	cpi	r18, 0x01	; 1
    1c94:	31 05       	cpc	r19, r1
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <udc_process_setup+0x3a6>
    1c98:	36 c1       	rjmp	.+620    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	82 ec       	ldi	r24, 0xC2	; 194
    1ca0:	90 e2       	ldi	r25, 0x20	; 32
    1ca2:	db d5       	rcall	.+2998   	; 0x285a <udd_set_setup_payload>
    1ca4:	ad c1       	rjmp	.+858    	; 0x2000 <udc_process_setup+0x70c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	e1 f5       	brne	.+120    	; 0x1d22 <udc_process_setup+0x42e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1caa:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1cae:	9a 30       	cpi	r25, 0x0A	; 10
    1cb0:	c1 f5       	brne	.+112    	; 0x1d22 <udc_process_setup+0x42e>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1cb2:	21 30       	cpi	r18, 0x01	; 1
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <udc_process_setup+0x3c6>
    1cb8:	26 c1       	rjmp	.+588    	; 0x1f06 <udc_process_setup+0x612>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1cba:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1cbe:	88 23       	and	r24, r24
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <udc_process_setup+0x3d0>
    1cc2:	21 c1       	rjmp	.+578    	; 0x1f06 <udc_process_setup+0x612>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1cc4:	c0 91 be 25 	lds	r28, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1cc8:	d0 91 bf 25 	lds	r29, 0x25BF	; 0x8025bf <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ccc:	00 91 bf 20 	lds	r16, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1cd0:	10 91 c0 20 	lds	r17, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1cd4:	d8 01       	movw	r26, r16
    1cd6:	ed 91       	ld	r30, X+
    1cd8:	fc 91       	ld	r31, X
    1cda:	84 81       	ldd	r24, Z+4	; 0x04
    1cdc:	c8 17       	cp	r28, r24
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <udc_process_setup+0x3ee>
    1ce0:	12 c1       	rjmp	.+548    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	8c 2f       	mov	r24, r28
    1ce6:	fb dc       	rcall	.-1546   	; 0x16de <udc_update_iface_desc>
    1ce8:	88 23       	and	r24, r24
    1cea:	09 f4       	brne	.+2      	; 0x1cee <udc_process_setup+0x3fa>
    1cec:	0c c1       	rjmp	.+536    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1cee:	ce 01       	movw	r24, r28
    1cf0:	99 27       	eor	r25, r25
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	d8 01       	movw	r26, r16
    1cf8:	12 96       	adiw	r26, 0x02	; 2
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	13 97       	sbiw	r26, 0x03	; 3
    1d00:	e8 0f       	add	r30, r24
    1d02:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1d04:	01 90       	ld	r0, Z+
    1d06:	f0 81       	ld	r31, Z
    1d08:	e0 2d       	mov	r30, r0
    1d0a:	86 81       	ldd	r24, Z+6	; 0x06
    1d0c:	97 81       	ldd	r25, Z+7	; 0x07
    1d0e:	fc 01       	movw	r30, r24
    1d10:	09 95       	icall
    1d12:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	84 ec       	ldi	r24, 0xC4	; 196
    1d1c:	90 e2       	ldi	r25, 0x20	; 32
    1d1e:	9d d5       	rcall	.+2874   	; 0x285a <udd_set_setup_payload>
    1d20:	6f c1       	rjmp	.+734    	; 0x2000 <udc_process_setup+0x70c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <udc_process_setup+0x434>
    1d26:	ef c0       	rjmp	.+478    	; 0x1f06 <udc_process_setup+0x612>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d28:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1d2c:	81 11       	cpse	r24, r1
    1d2e:	e4 c0       	rjmp	.+456    	; 0x1ef8 <udc_process_setup+0x604>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1d30:	22 30       	cpi	r18, 0x02	; 2
    1d32:	31 05       	cpc	r19, r1
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <udc_process_setup+0x444>
    1d36:	e7 c0       	rjmp	.+462    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1d38:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1d3c:	01 d6       	rcall	.+3074   	; 0x2940 <udd_ep_is_halted>
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <udc_ep_status.5691>
    1d44:	90 93 bc 20 	sts	0x20BC, r25	; 0x8020bc <udc_ep_status.5691+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1d48:	62 e0       	ldi	r22, 0x02	; 2
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	8b eb       	ldi	r24, 0xBB	; 187
    1d4e:	90 e2       	ldi	r25, 0x20	; 32
    1d50:	84 d5       	rcall	.+2824   	; 0x285a <udd_set_setup_payload>
    1d52:	56 c1       	rjmp	.+684    	; 0x2000 <udc_process_setup+0x70c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1d54:	8f 71       	andi	r24, 0x1F	; 31
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <udc_process_setup+0x466>
    1d58:	83 c0       	rjmp	.+262    	; 0x1e60 <udc_process_setup+0x56c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d5a:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1d5e:	93 30       	cpi	r25, 0x03	; 3
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <udc_process_setup+0x470>
    1d62:	cc c0       	rjmp	.+408    	; 0x1efc <udc_process_setup+0x608>
    1d64:	18 f4       	brcc	.+6      	; 0x1d6c <udc_process_setup+0x478>
    1d66:	91 30       	cpi	r25, 0x01	; 1
    1d68:	a1 f0       	breq	.+40     	; 0x1d92 <udc_process_setup+0x49e>
    1d6a:	7a c0       	rjmp	.+244    	; 0x1e60 <udc_process_setup+0x56c>
    1d6c:	95 30       	cpi	r25, 0x05	; 5
    1d6e:	19 f0       	breq	.+6      	; 0x1d76 <udc_process_setup+0x482>
    1d70:	99 30       	cpi	r25, 0x09	; 9
    1d72:	39 f1       	breq	.+78     	; 0x1dc2 <udc_process_setup+0x4ce>
    1d74:	75 c0       	rjmp	.+234    	; 0x1e60 <udc_process_setup+0x56c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d76:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d7a:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d7e:	89 2b       	or	r24, r25
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <udc_process_setup+0x490>
    1d82:	c1 c0       	rjmp	.+386    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1d84:	89 e6       	ldi	r24, 0x69	; 105
    1d86:	9b e0       	ldi	r25, 0x0B	; 11
    1d88:	80 93 c6 25 	sts	0x25C6, r24	; 0x8025c6 <udd_g_ctrlreq+0xc>
    1d8c:	90 93 c7 25 	sts	0x25C7, r25	; 0x8025c7 <udd_g_ctrlreq+0xd>
    1d90:	37 c1       	rjmp	.+622    	; 0x2000 <udc_process_setup+0x70c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d92:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d96:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d9a:	89 2b       	or	r24, r25
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <udc_process_setup+0x4ac>
    1d9e:	b3 c0       	rjmp	.+358    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1da0:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1da4:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	09 f0       	breq	.+2      	; 0x1dae <udc_process_setup+0x4ba>
    1dac:	ac c0       	rjmp	.+344    	; 0x1f06 <udc_process_setup+0x612>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1dae:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udc_device_status>
    1db2:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <udc_device_status+0x1>
    1db6:	8d 7f       	andi	r24, 0xFD	; 253
    1db8:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udc_device_status>
    1dbc:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <udc_device_status+0x1>
    1dc0:	1f c1       	rjmp	.+574    	; 0x2000 <udc_process_setup+0x70c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1dc2:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1dc6:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1dca:	89 2b       	or	r24, r25
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <udc_process_setup+0x4dc>
    1dce:	9b c0       	rjmp	.+310    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1dd0:	41 d5       	rcall	.+2690   	; 0x2854 <udd_getaddress>
    1dd2:	88 23       	and	r24, r24
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <udc_process_setup+0x4e4>
    1dd6:	97 c0       	rjmp	.+302    	; 0x1f06 <udc_process_setup+0x612>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1dd8:	20 91 bc 25 	lds	r18, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1ddc:	30 91 bd 25 	lds	r19, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1de0:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1de2:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1de6:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1dea:	81 89       	ldd	r24, Z+17	; 0x11
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	82 17       	cp	r24, r18
    1df0:	93 07       	cpc	r25, r19
    1df2:	08 f4       	brcc	.+2      	; 0x1df6 <udc_process_setup+0x502>
    1df4:	88 c0       	rjmp	.+272    	; 0x1f06 <udc_process_setup+0x612>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1df6:	29 dd       	rcall	.-1454   	; 0x184a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1df8:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1dfc:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1e00:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1e04:	88 23       	and	r24, r24
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <udc_process_setup+0x516>
    1e08:	fb c0       	rjmp	.+502    	; 0x2000 <udc_process_setup+0x70c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1e0a:	99 27       	eor	r25, r25
    1e0c:	81 50       	subi	r24, 0x01	; 1
    1e0e:	90 4c       	sbci	r25, 0xC0	; 192
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1e1c:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1e20:	e8 0f       	add	r30, r24
    1e22:	f9 1f       	adc	r31, r25
    1e24:	e0 93 bf 20 	sts	0x20BF, r30	; 0x8020bf <udc_ptr_conf>
    1e28:	f0 93 c0 20 	sts	0x20C0, r31	; 0x8020c0 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	f0 81       	ld	r31, Z
    1e30:	e0 2d       	mov	r30, r0
    1e32:	84 81       	ldd	r24, Z+4	; 0x04
    1e34:	88 23       	and	r24, r24
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <udc_process_setup+0x546>
    1e38:	e3 c0       	rjmp	.+454    	; 0x2000 <udc_process_setup+0x70c>
    1e3a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	8c 2f       	mov	r24, r28
    1e40:	ca dc       	rcall	.-1644   	; 0x17d6 <udc_iface_enable>
    1e42:	88 23       	and	r24, r24
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <udc_process_setup+0x554>
    1e46:	5f c0       	rjmp	.+190    	; 0x1f06 <udc_process_setup+0x612>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1e48:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e4a:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1e4e:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1e52:	01 90       	ld	r0, Z+
    1e54:	f0 81       	ld	r31, Z
    1e56:	e0 2d       	mov	r30, r0
    1e58:	84 81       	ldd	r24, Z+4	; 0x04
    1e5a:	c8 17       	cp	r28, r24
    1e5c:	78 f3       	brcs	.-34     	; 0x1e3c <udc_process_setup+0x548>
    1e5e:	d0 c0       	rjmp	.+416    	; 0x2000 <udc_process_setup+0x70c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	e1 f4       	brne	.+56     	; 0x1e9c <udc_process_setup+0x5a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e64:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1e68:	9b 30       	cpi	r25, 0x0B	; 11
    1e6a:	c1 f4       	brne	.+48     	; 0x1e9c <udc_process_setup+0x5a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1e6c:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e70:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e74:	89 2b       	or	r24, r25
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <udc_process_setup+0x586>
    1e78:	46 c0       	rjmp	.+140    	; 0x1f06 <udc_process_setup+0x612>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1e7a:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1e7e:	88 23       	and	r24, r24
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <udc_process_setup+0x590>
    1e82:	41 c0       	rjmp	.+130    	; 0x1f06 <udc_process_setup+0x612>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e84:	ea eb       	ldi	r30, 0xBA	; 186
    1e86:	f5 e2       	ldi	r31, 0x25	; 37
    1e88:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1e8a:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1e8c:	8c 2f       	mov	r24, r28
    1e8e:	61 dc       	rcall	.-1854   	; 0x1752 <udc_iface_disable>
    1e90:	88 23       	and	r24, r24
    1e92:	c9 f1       	breq	.+114    	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1e94:	6d 2f       	mov	r22, r29
    1e96:	8c 2f       	mov	r24, r28
    1e98:	9e dc       	rcall	.-1732   	; 0x17d6 <udc_iface_enable>
    1e9a:	33 c0       	rjmp	.+102    	; 0x1f02 <udc_process_setup+0x60e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e9c:	82 30       	cpi	r24, 0x02	; 2
    1e9e:	99 f5       	brne	.+102    	; 0x1f06 <udc_process_setup+0x612>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ea0:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	19 f0       	breq	.+6      	; 0x1eae <udc_process_setup+0x5ba>
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	89 f0       	breq	.+34     	; 0x1ece <udc_process_setup+0x5da>
    1eac:	29 c0       	rjmp	.+82     	; 0x1f00 <udc_process_setup+0x60c>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1eae:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1eb2:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1eb6:	89 2b       	or	r24, r25
    1eb8:	31 f5       	brne	.+76     	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1eba:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1ebe:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1ec2:	89 2b       	or	r24, r25
    1ec4:	01 f5       	brne	.+64     	; 0x1f06 <udc_process_setup+0x612>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ec6:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1eca:	55 d5       	rcall	.+2730   	; 0x2976 <udd_ep_clear_halt>
    1ecc:	1a c0       	rjmp	.+52     	; 0x1f02 <udc_process_setup+0x60e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ece:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1ed2:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1ed6:	89 2b       	or	r24, r25
    1ed8:	b1 f4       	brne	.+44     	; 0x1f06 <udc_process_setup+0x612>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1eda:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1ede:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1ee2:	89 2b       	or	r24, r25
    1ee4:	81 f4       	brne	.+32     	; 0x1f06 <udc_process_setup+0x612>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ee6:	ca eb       	ldi	r28, 0xBA	; 186
    1ee8:	d5 e2       	ldi	r29, 0x25	; 37
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	33 d6       	rcall	.+3174   	; 0x2b54 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef0:	96 d6       	rcall	.+3372   	; 0x2c1e <udd_ep_set_halt>
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <udc_process_setup+0x60e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <udc_process_setup+0x60e>
				break;
			}
		}
#endif
	}
	return false;
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <udc_process_setup+0x60e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <udc_process_setup+0x60e>
				break;
			}
		}
#endif
	}
	return false;
    1f00:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1f02:	81 11       	cpse	r24, r1
    1f04:	7e c0       	rjmp	.+252    	; 0x2002 <udc_process_setup+0x70e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1f06:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1f0a:	8f 71       	andi	r24, 0x1F	; 31
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	71 f5       	brne	.+92     	; 0x1f6c <udc_process_setup+0x678>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1f10:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1f14:	88 23       	and	r24, r24
    1f16:	51 f1       	breq	.+84     	; 0x1f6c <udc_process_setup+0x678>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1f18:	00 91 be 25 	lds	r16, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1f1c:	10 91 bf 25 	lds	r17, 0x25BF	; 0x8025bf <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1f20:	c0 91 bf 20 	lds	r28, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1f24:	d0 91 c0 20 	lds	r29, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1f28:	e8 81       	ld	r30, Y
    1f2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f2c:	84 81       	ldd	r24, Z+4	; 0x04
    1f2e:	08 17       	cp	r16, r24
    1f30:	e8 f4       	brcc	.+58     	; 0x1f6c <udc_process_setup+0x678>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	80 2f       	mov	r24, r16
    1f36:	d3 db       	rcall	.-2138   	; 0x16de <udc_update_iface_desc>
    1f38:	88 23       	and	r24, r24
    1f3a:	c1 f0       	breq	.+48     	; 0x1f6c <udc_process_setup+0x678>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	ff 27       	eor	r31, r31
    1f40:	cf 01       	movw	r24, r30
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	ea 81       	ldd	r30, Y+2	; 0x02
    1f48:	fb 81       	ldd	r31, Y+3	; 0x03
    1f4a:	e8 0f       	add	r30, r24
    1f4c:	f9 1f       	adc	r31, r25
    1f4e:	c0 81       	ld	r28, Z
    1f50:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f52:	ee 81       	ldd	r30, Y+6	; 0x06
    1f54:	ff 81       	ldd	r31, Y+7	; 0x07
    1f56:	09 95       	icall
    1f58:	68 2f       	mov	r22, r24
    1f5a:	80 2f       	mov	r24, r16
    1f5c:	c0 db       	rcall	.-2176   	; 0x16de <udc_update_iface_desc>
    1f5e:	88 23       	and	r24, r24
    1f60:	29 f0       	breq	.+10     	; 0x1f6c <udc_process_setup+0x678>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1f62:	ec 81       	ldd	r30, Y+4	; 0x04
    1f64:	fd 81       	ldd	r31, Y+5	; 0x05
    1f66:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1f68:	81 11       	cpse	r24, r1
    1f6a:	4b c0       	rjmp	.+150    	; 0x2002 <udc_process_setup+0x70e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1f6c:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1f70:	8f 71       	andi	r24, 0x1F	; 31
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <udc_process_setup+0x684>
    1f76:	40 c0       	rjmp	.+128    	; 0x1ff8 <udc_process_setup+0x704>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1f78:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1f7c:	88 23       	and	r24, r24
    1f7e:	b1 f1       	breq	.+108    	; 0x1fec <udc_process_setup+0x6f8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f80:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1f84:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1f88:	ed 91       	ld	r30, X+
    1f8a:	fc 91       	ld	r31, X
    1f8c:	11 97       	sbiw	r26, 0x01	; 1
    1f8e:	84 81       	ldd	r24, Z+4	; 0x04
    1f90:	88 23       	and	r24, r24
    1f92:	71 f1       	breq	.+92     	; 0x1ff0 <udc_process_setup+0x6fc>
    1f94:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f96:	ec 2f       	mov	r30, r28
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	12 96       	adiw	r26, 0x02	; 2
    1fa0:	8d 91       	ld	r24, X+
    1fa2:	9c 91       	ld	r25, X
    1fa4:	13 97       	sbiw	r26, 0x03	; 3
    1fa6:	e8 0f       	add	r30, r24
    1fa8:	f9 1f       	adc	r31, r25
    1faa:	00 81       	ld	r16, Z
    1fac:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1fae:	d8 01       	movw	r26, r16
    1fb0:	16 96       	adiw	r26, 0x06	; 6
    1fb2:	ed 91       	ld	r30, X+
    1fb4:	fc 91       	ld	r31, X
    1fb6:	17 97       	sbiw	r26, 0x07	; 7
    1fb8:	09 95       	icall
    1fba:	68 2f       	mov	r22, r24
    1fbc:	8c 2f       	mov	r24, r28
    1fbe:	8f db       	rcall	.-2274   	; 0x16de <udc_update_iface_desc>
    1fc0:	88 23       	and	r24, r24
    1fc2:	f9 f0       	breq	.+62     	; 0x2002 <udc_process_setup+0x70e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1fc4:	d8 01       	movw	r26, r16
    1fc6:	14 96       	adiw	r26, 0x04	; 4
    1fc8:	ed 91       	ld	r30, X+
    1fca:	fc 91       	ld	r31, X
    1fcc:	15 97       	sbiw	r26, 0x05	; 5
    1fce:	09 95       	icall
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	17 c0       	rjmp	.+46     	; 0x2002 <udc_process_setup+0x70e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1fd4:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fd6:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1fda:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1fde:	ed 91       	ld	r30, X+
    1fe0:	fc 91       	ld	r31, X
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	94 81       	ldd	r25, Z+4	; 0x04
    1fe6:	c9 17       	cp	r28, r25
    1fe8:	b0 f2       	brcs	.-84     	; 0x1f96 <udc_process_setup+0x6a2>
    1fea:	0b c0       	rjmp	.+22     	; 0x2002 <udc_process_setup+0x70e>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	09 c0       	rjmp	.+18     	; 0x2002 <udc_process_setup+0x70e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	07 c0       	rjmp	.+14     	; 0x2002 <udc_process_setup+0x70e>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	05 c0       	rjmp	.+10     	; 0x2002 <udc_process_setup+0x70e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	03 c0       	rjmp	.+6      	; 0x2002 <udc_process_setup+0x70e>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	01 c0       	rjmp	.+2      	; 0x2002 <udc_process_setup+0x70e>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    2000:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    200c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    200e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2010:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2012:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2014:	60 83       	st	Z, r22
	ret                             // Return to caller
    2016:	08 95       	ret

00002018 <nvm_eeprom_read_buffer>:
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
	nvm_exec();
	NVM.CMD = old_cmd;
}
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	9c 01       	movw	r18, r24
    201e:	db 01       	movw	r26, r22
    2020:	e0 ec       	ldi	r30, 0xC0	; 192
    2022:	f1 e0       	ldi	r31, 0x01	; 1
    2024:	97 85       	ldd	r25, Z+15	; 0x0f
    2026:	99 23       	and	r25, r25
    2028:	ec f3       	brlt	.-6      	; 0x2024 <nvm_eeprom_read_buffer+0xc>
    202a:	cc ec       	ldi	r28, 0xCC	; 204
    202c:	d1 e0       	ldi	r29, 0x01	; 1
    202e:	98 81       	ld	r25, Y
    2030:	98 60       	ori	r25, 0x08	; 8
    2032:	98 83       	st	Y, r25
    2034:	b9 01       	movw	r22, r18
    2036:	70 5f       	subi	r23, 0xF0	; 240
    2038:	cd 01       	movw	r24, r26
    203a:	f4 d7       	rcall	.+4072   	; 0x3024 <memcpy>
    203c:	88 81       	ld	r24, Y
    203e:	87 7f       	andi	r24, 0xF7	; 247
    2040:	88 83       	st	Y, r24
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	08 95       	ret

00002048 <nvm_eeprom_load_byte_to_buffer>:
    2048:	e0 ec       	ldi	r30, 0xC0	; 192
    204a:	f1 e0       	ldi	r31, 0x01	; 1
    204c:	97 85       	ldd	r25, Z+15	; 0x0f
    204e:	99 23       	and	r25, r25
    2050:	ec f3       	brlt	.-6      	; 0x204c <nvm_eeprom_load_byte_to_buffer+0x4>
    2052:	ac ec       	ldi	r26, 0xCC	; 204
    2054:	b1 e0       	ldi	r27, 0x01	; 1
    2056:	9c 91       	ld	r25, X
    2058:	98 60       	ori	r25, 0x08	; 8
    205a:	9c 93       	st	X, r25
    205c:	e8 2f       	mov	r30, r24
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	f0 5f       	subi	r31, 0xF0	; 240
    2062:	60 83       	st	Z, r22
    2064:	8c 91       	ld	r24, X
    2066:	87 7f       	andi	r24, 0xF7	; 247
    2068:	8c 93       	st	X, r24
    206a:	08 95       	ret

0000206c <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    207a:	e0 ec       	ldi	r30, 0xC0	; 192
    207c:	f1 e0       	ldi	r31, 0x01	; 1
    207e:	87 85       	ldd	r24, Z+15	; 0x0f
    2080:	88 23       	and	r24, r24
    2082:	ec f3       	brlt	.-6      	; 0x207e <nvm_eeprom_load_page_to_buffer+0x12>
    2084:	78 01       	movw	r14, r16
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	e8 0e       	add	r14, r24
    208a:	f1 1c       	adc	r15, r1
    208c:	e8 01       	movw	r28, r16
    208e:	8c 2f       	mov	r24, r28
    2090:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    2092:	69 91       	ld	r22, Y+
    2094:	d9 df       	rcall	.-78     	; 0x2048 <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2096:	ce 15       	cp	r28, r14
    2098:	df 05       	cpc	r29, r15
    209a:	c9 f7       	brne	.-14     	; 0x208e <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	08 95       	ret

000020aa <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	e0 ec       	ldi	r30, 0xC0	; 192
    20b2:	f1 e0       	ldi	r31, 0x01	; 1
    20b4:	97 85       	ldd	r25, Z+15	; 0x0f
    20b6:	99 23       	and	r25, r25
    20b8:	ec f3       	brlt	.-6      	; 0x20b4 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    20ba:	20 e2       	ldi	r18, 0x20	; 32
    20bc:	82 9f       	mul	r24, r18
    20be:	c0 01       	movw	r24, r0
    20c0:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    20c2:	c0 ec       	ldi	r28, 0xC0	; 192
    20c4:	d1 e0       	ldi	r29, 0x01	; 1
    20c6:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    20c8:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    20ca:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    20cc:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    20ce:	85 e3       	ldi	r24, 0x35	; 53
    20d0:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	8b ec       	ldi	r24, 0xCB	; 203
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	99 df       	rcall	.-206    	; 0x200c <ccp_write_io>
	NVM.CMD = old_cmd;
    20da:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	1f 91       	pop	r17
    20e2:	08 95       	ret

000020e4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    20e4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    20e8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    20ea:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    20ec:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    20f0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    20f2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    20f6:	08 95       	ret

000020f8 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    20f8:	81 11       	cpse	r24, r1
    20fa:	22 c0       	rjmp	.+68     	; 0x2140 <udd_sleep_mode+0x48>
    20fc:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <udd_b_idle>
    2100:	99 23       	and	r25, r25
    2102:	d9 f0       	breq	.+54     	; 0x213a <udd_sleep_mode+0x42>
    2104:	90 91 eb 2d 	lds	r25, 0x2DEB	; 0x802deb <sleepmgr_locks+0x1>
    2108:	91 11       	cpse	r25, r1
    210a:	01 c0       	rjmp	.+2      	; 0x210e <udd_sleep_mode+0x16>
    210c:	ff cf       	rjmp	.-2      	; 0x210c <udd_sleep_mode+0x14>
    210e:	2f b7       	in	r18, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	ea ee       	ldi	r30, 0xEA	; 234
    2114:	fd e2       	ldi	r31, 0x2D	; 45
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	91 50       	subi	r25, 0x01	; 1
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	2f bf       	out	0x3f, r18	; 63
    211e:	0d c0       	rjmp	.+26     	; 0x213a <udd_sleep_mode+0x42>
    2120:	90 91 eb 2d 	lds	r25, 0x2DEB	; 0x802deb <sleepmgr_locks+0x1>
    2124:	9f 3f       	cpi	r25, 0xFF	; 255
    2126:	09 f4       	brne	.+2      	; 0x212a <udd_sleep_mode+0x32>
    2128:	ff cf       	rjmp	.-2      	; 0x2128 <udd_sleep_mode+0x30>
    212a:	2f b7       	in	r18, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	ea ee       	ldi	r30, 0xEA	; 234
    2130:	fd e2       	ldi	r31, 0x2D	; 45
    2132:	91 81       	ldd	r25, Z+1	; 0x01
    2134:	9f 5f       	subi	r25, 0xFF	; 255
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	2f bf       	out	0x3f, r18	; 63
    213a:	80 93 8c 23 	sts	0x238C, r24	; 0x80238c <udd_b_idle>
    213e:	08 95       	ret
    2140:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <udd_b_idle>
    2144:	99 23       	and	r25, r25
    2146:	61 f3       	breq	.-40     	; 0x2120 <udd_sleep_mode+0x28>
    2148:	f8 cf       	rjmp	.-16     	; 0x213a <udd_sleep_mode+0x42>

0000214a <udd_ctrl_init>:
    214a:	0f 93       	push	r16
    214c:	e8 ec       	ldi	r30, 0xC8	; 200
    214e:	f4 e0       	ldi	r31, 0x04	; 4
    2150:	80 81       	ld	r24, Z
    2152:	8f 7d       	andi	r24, 0xDF	; 223
    2154:	80 83       	st	Z, r24
    2156:	80 81       	ld	r24, Z
    2158:	8f 7d       	andi	r24, 0xDF	; 223
    215a:	80 83       	st	Z, r24
    215c:	e0 e2       	ldi	r30, 0x20	; 32
    215e:	f3 e2       	ldi	r31, 0x23	; 35
    2160:	02 e0       	ldi	r16, 0x02	; 2
    2162:	05 93       	las	Z, r16
    2164:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udd_sram+0x26>
    2168:	10 92 23 23 	sts	0x2323, r1	; 0x802323 <udd_sram+0x27>
    216c:	00 e2       	ldi	r16, 0x20	; 32
    216e:	06 93       	lac	Z, r16
    2170:	00 e4       	ldi	r16, 0x40	; 64
    2172:	06 93       	lac	Z, r16
    2174:	e8 e1       	ldi	r30, 0x18	; 24
    2176:	f3 e2       	ldi	r31, 0x23	; 35
    2178:	00 e2       	ldi	r16, 0x20	; 32
    217a:	06 93       	lac	Z, r16
    217c:	00 e4       	ldi	r16, 0x40	; 64
    217e:	06 93       	lac	Z, r16
    2180:	ea eb       	ldi	r30, 0xBA	; 186
    2182:	f5 e2       	ldi	r31, 0x25	; 37
    2184:	14 86       	std	Z+12, r1	; 0x0c
    2186:	15 86       	std	Z+13, r1	; 0x0d
    2188:	16 86       	std	Z+14, r1	; 0x0e
    218a:	17 86       	std	Z+15, r1	; 0x0f
    218c:	12 86       	std	Z+10, r1	; 0x0a
    218e:	13 86       	std	Z+11, r1	; 0x0b
    2190:	10 92 f9 22 	sts	0x22F9, r1	; 0x8022f9 <udd_ep_control_state>
    2194:	0f 91       	pop	r16
    2196:	08 95       	ret

00002198 <udd_ctrl_stall_data>:
    2198:	0f 93       	push	r16
    219a:	85 e0       	ldi	r24, 0x05	; 5
    219c:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    21a0:	e1 e2       	ldi	r30, 0x21	; 33
    21a2:	f3 e2       	ldi	r31, 0x23	; 35
    21a4:	04 e0       	ldi	r16, 0x04	; 4
    21a6:	05 93       	las	Z, r16
    21a8:	e9 e1       	ldi	r30, 0x19	; 25
    21aa:	f3 e2       	ldi	r31, 0x23	; 35
    21ac:	04 e0       	ldi	r16, 0x04	; 4
    21ae:	05 93       	las	Z, r16
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <udd_ctrl_send_zlp_in>:
    21b4:	0f 93       	push	r16
    21b6:	83 e0       	ldi	r24, 0x03	; 3
    21b8:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    21bc:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udd_sram+0x26>
    21c0:	10 92 23 23 	sts	0x2323, r1	; 0x802323 <udd_sram+0x27>
    21c4:	e0 e2       	ldi	r30, 0x20	; 32
    21c6:	f3 e2       	ldi	r31, 0x23	; 35
    21c8:	02 e0       	ldi	r16, 0x02	; 2
    21ca:	06 93       	lac	Z, r16
    21cc:	0f 91       	pop	r16
    21ce:	08 95       	ret

000021d0 <udd_ctrl_endofrequest>:
    21d0:	e0 91 c6 25 	lds	r30, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0xc>
    21d4:	f0 91 c7 25 	lds	r31, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0xd>
    21d8:	30 97       	sbiw	r30, 0x00	; 0
    21da:	09 f0       	breq	.+2      	; 0x21de <udd_ctrl_endofrequest+0xe>
    21dc:	09 95       	icall
    21de:	08 95       	ret

000021e0 <udd_ctrl_in_sent>:
    21e0:	0f 93       	push	r16
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	19 f4       	brne	.+6      	; 0x21f4 <udd_ctrl_in_sent+0x14>
    21ee:	f0 df       	rcall	.-32     	; 0x21d0 <udd_ctrl_endofrequest>
    21f0:	ac df       	rcall	.-168    	; 0x214a <udd_ctrl_init>
    21f2:	5e c0       	rjmp	.+188    	; 0x22b0 <udd_ctrl_in_sent+0xd0>
    21f4:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    21f8:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    21fc:	c0 91 c4 25 	lds	r28, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2200:	d0 91 c5 25 	lds	r29, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2204:	c8 1b       	sub	r28, r24
    2206:	d9 0b       	sbc	r29, r25
    2208:	71 f5       	brne	.+92     	; 0x2266 <udd_ctrl_in_sent+0x86>
    220a:	20 91 f7 22 	lds	r18, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    220e:	30 91 f8 22 	lds	r19, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2212:	82 0f       	add	r24, r18
    2214:	93 1f       	adc	r25, r19
    2216:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    221a:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    221e:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    2222:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    2226:	82 17       	cp	r24, r18
    2228:	93 07       	cpc	r25, r19
    222a:	21 f0       	breq	.+8      	; 0x2234 <udd_ctrl_in_sent+0x54>
    222c:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b_shortpacket.5259>
    2230:	88 23       	and	r24, r24
    2232:	41 f0       	breq	.+16     	; 0x2244 <udd_ctrl_in_sent+0x64>
    2234:	84 e0       	ldi	r24, 0x04	; 4
    2236:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    223a:	e8 e1       	ldi	r30, 0x18	; 24
    223c:	f3 e2       	ldi	r31, 0x23	; 35
    223e:	02 e0       	ldi	r16, 0x02	; 2
    2240:	06 93       	lac	Z, r16
    2242:	36 c0       	rjmp	.+108    	; 0x22b0 <udd_ctrl_in_sent+0xd0>
    2244:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0xe>
    2248:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0xf>
    224c:	30 97       	sbiw	r30, 0x00	; 0
    224e:	99 f0       	breq	.+38     	; 0x2276 <udd_ctrl_in_sent+0x96>
    2250:	09 95       	icall
    2252:	88 23       	and	r24, r24
    2254:	81 f0       	breq	.+32     	; 0x2276 <udd_ctrl_in_sent+0x96>
    2256:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    225a:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    225e:	c0 91 c4 25 	lds	r28, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2262:	d0 91 c5 25 	lds	r29, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2266:	c0 34       	cpi	r28, 0x40	; 64
    2268:	d1 05       	cpc	r29, r1
    226a:	28 f0       	brcs	.+10     	; 0x2276 <udd_ctrl_in_sent+0x96>
    226c:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b_shortpacket.5259>
    2270:	c0 e4       	ldi	r28, 0x40	; 64
    2272:	d0 e0       	ldi	r29, 0x00	; 0
    2274:	03 c0       	rjmp	.+6      	; 0x227c <udd_ctrl_in_sent+0x9c>
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <b_shortpacket.5259>
    227c:	ec ef       	ldi	r30, 0xFC	; 252
    227e:	f2 e2       	ldi	r31, 0x22	; 34
    2280:	c6 a3       	std	Z+38, r28	; 0x26
    2282:	d7 a3       	std	Z+39, r29	; 0x27
    2284:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2288:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    228c:	20 91 c2 25 	lds	r18, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    2290:	30 91 c3 25 	lds	r19, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    2294:	28 0f       	add	r18, r24
    2296:	39 1f       	adc	r19, r25
    2298:	20 a7       	std	Z+40, r18	; 0x28
    229a:	31 a7       	std	Z+41, r19	; 0x29
    229c:	c8 0f       	add	r28, r24
    229e:	d9 1f       	adc	r29, r25
    22a0:	c0 93 f5 22 	sts	0x22F5, r28	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    22a4:	d0 93 f6 22 	sts	0x22F6, r29	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    22a8:	e0 e2       	ldi	r30, 0x20	; 32
    22aa:	f3 e2       	ldi	r31, 0x23	; 35
    22ac:	02 e0       	ldi	r16, 0x02	; 2
    22ae:	06 93       	lac	Z, r16
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	0f 91       	pop	r16
    22b6:	08 95       	ret

000022b8 <udd_ep_get_size>:
    22b8:	fc 01       	movw	r30, r24
    22ba:	81 81       	ldd	r24, Z+1	; 0x01
    22bc:	e8 2f       	mov	r30, r24
    22be:	e7 70       	andi	r30, 0x07	; 7
    22c0:	8e 2f       	mov	r24, r30
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	fc 01       	movw	r30, r24
    22c6:	31 97       	sbiw	r30, 0x01	; 1
    22c8:	e7 30       	cpi	r30, 0x07	; 7
    22ca:	f1 05       	cpc	r31, r1
    22cc:	c0 f4       	brcc	.+48     	; 0x22fe <udd_ep_get_size+0x46>
    22ce:	e9 5e       	subi	r30, 0xE9	; 233
    22d0:	fe 4f       	sbci	r31, 0xFE	; 254
    22d2:	a2 c6       	rjmp	.+3396   	; 0x3018 <__tablejump2__>
    22d4:	80 e1       	ldi	r24, 0x10	; 16
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	08 95       	ret
    22da:	80 e2       	ldi	r24, 0x20	; 32
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	08 95       	ret
    22e0:	80 e4       	ldi	r24, 0x40	; 64
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	08 95       	ret
    22e6:	80 e8       	ldi	r24, 0x80	; 128
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	08 95       	ret
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	08 95       	ret
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	92 e0       	ldi	r25, 0x02	; 2
    22f6:	08 95       	ret
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	08 95       	ret
    22fe:	88 e0       	ldi	r24, 0x08	; 8
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	08 95       	ret

00002304 <udd_ep_get_job>:
    2304:	28 2f       	mov	r18, r24
    2306:	2f 70       	andi	r18, 0x0F	; 15
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	22 0f       	add	r18, r18
    230c:	33 1f       	adc	r19, r19
    230e:	08 2e       	mov	r0, r24
    2310:	00 0c       	add	r0, r0
    2312:	99 0b       	sbc	r25, r25
    2314:	88 27       	eor	r24, r24
    2316:	99 0f       	add	r25, r25
    2318:	88 1f       	adc	r24, r24
    231a:	99 27       	eor	r25, r25
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	02 97       	sbiw	r24, 0x02	; 2
    2322:	9c 01       	movw	r18, r24
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	22 0f       	add	r18, r18
    232e:	33 1f       	adc	r19, r19
    2330:	82 0f       	add	r24, r18
    2332:	93 1f       	adc	r25, r19
    2334:	87 5b       	subi	r24, 0xB7	; 183
    2336:	9d 4d       	sbci	r25, 0xDD	; 221
    2338:	08 95       	ret

0000233a <udd_ctrl_interrupt_tc_setup>:
    233a:	0f 93       	push	r16
    233c:	cf 93       	push	r28
    233e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2342:	80 ff       	sbrs	r24, 0
    2344:	62 c0       	rjmp	.+196    	; 0x240a <udd_ctrl_interrupt_tc_setup+0xd0>
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    234c:	e8 e1       	ldi	r30, 0x18	; 24
    234e:	f3 e2       	ldi	r31, 0x23	; 35
    2350:	00 e8       	ldi	r16, 0x80	; 128
    2352:	06 93       	lac	Z, r16
    2354:	e0 e2       	ldi	r30, 0x20	; 32
    2356:	f3 e2       	ldi	r31, 0x23	; 35
    2358:	00 e8       	ldi	r16, 0x80	; 128
    235a:	06 93       	lac	Z, r16
    235c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2360:	e8 e1       	ldi	r30, 0x18	; 24
    2362:	f3 e2       	ldi	r31, 0x23	; 35
    2364:	00 e1       	ldi	r16, 0x10	; 16
    2366:	06 93       	lac	Z, r16
    2368:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    236c:	88 23       	and	r24, r24
    236e:	29 f0       	breq	.+10     	; 0x237a <udd_ctrl_interrupt_tc_setup+0x40>
    2370:	83 50       	subi	r24, 0x03	; 3
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	08 f4       	brcc	.+2      	; 0x2378 <udd_ctrl_interrupt_tc_setup+0x3e>
    2376:	2c df       	rcall	.-424    	; 0x21d0 <udd_ctrl_endofrequest>
    2378:	e8 de       	rcall	.-560    	; 0x214a <udd_ctrl_init>
    237a:	80 91 1a 23 	lds	r24, 0x231A	; 0x80231a <udd_sram+0x1e>
    237e:	90 91 1b 23 	lds	r25, 0x231B	; 0x80231b <udd_sram+0x1f>
    2382:	08 97       	sbiw	r24, 0x08	; 8
    2384:	09 f0       	breq	.+2      	; 0x2388 <udd_ctrl_interrupt_tc_setup+0x4e>
    2386:	43 c0       	rjmp	.+134    	; 0x240e <udd_ctrl_interrupt_tc_setup+0xd4>
    2388:	88 e0       	ldi	r24, 0x08	; 8
    238a:	e5 eb       	ldi	r30, 0xB5	; 181
    238c:	f2 e2       	ldi	r31, 0x22	; 34
    238e:	aa eb       	ldi	r26, 0xBA	; 186
    2390:	b5 e2       	ldi	r27, 0x25	; 37
    2392:	01 90       	ld	r0, Z+
    2394:	0d 92       	st	X+, r0
    2396:	8a 95       	dec	r24
    2398:	e1 f7       	brne	.-8      	; 0x2392 <udd_ctrl_interrupt_tc_setup+0x58>
    239a:	e8 ec       	ldi	r30, 0xC8	; 200
    239c:	f4 e0       	ldi	r31, 0x04	; 4
    239e:	80 81       	ld	r24, Z
    23a0:	80 62       	ori	r24, 0x20	; 32
    23a2:	80 83       	st	Z, r24
    23a4:	80 81       	ld	r24, Z
    23a6:	80 62       	ori	r24, 0x20	; 32
    23a8:	80 83       	st	Z, r24
    23aa:	a4 da       	rcall	.-2744   	; 0x18f4 <udc_process_setup>
    23ac:	c8 2f       	mov	r28, r24
    23ae:	81 11       	cpse	r24, r1
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <udd_ctrl_interrupt_tc_setup+0x7e>
    23b2:	f2 de       	rcall	.-540    	; 0x2198 <udd_ctrl_stall_data>
    23b4:	c1 e0       	ldi	r28, 0x01	; 1
    23b6:	2c c0       	rjmp	.+88     	; 0x2410 <udd_ctrl_interrupt_tc_setup+0xd6>
    23b8:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    23bc:	88 23       	and	r24, r24
    23be:	6c f4       	brge	.+26     	; 0x23da <udd_ctrl_interrupt_tc_setup+0xa0>
    23c0:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    23c4:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    23c8:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    23cc:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    23d6:	04 df       	rcall	.-504    	; 0x21e0 <udd_ctrl_in_sent>
    23d8:	1b c0       	rjmp	.+54     	; 0x2410 <udd_ctrl_interrupt_tc_setup+0xd6>
    23da:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    23de:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    23e2:	89 2b       	or	r24, r25
    23e4:	11 f4       	brne	.+4      	; 0x23ea <udd_ctrl_interrupt_tc_setup+0xb0>
    23e6:	e6 de       	rcall	.-564    	; 0x21b4 <udd_ctrl_send_zlp_in>
    23e8:	13 c0       	rjmp	.+38     	; 0x2410 <udd_ctrl_interrupt_tc_setup+0xd6>
    23ea:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    23ee:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    23f2:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    23f6:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    2400:	e8 e1       	ldi	r30, 0x18	; 24
    2402:	f3 e2       	ldi	r31, 0x23	; 35
    2404:	02 e0       	ldi	r16, 0x02	; 2
    2406:	06 93       	lac	Z, r16
    2408:	03 c0       	rjmp	.+6      	; 0x2410 <udd_ctrl_interrupt_tc_setup+0xd6>
    240a:	c0 e0       	ldi	r28, 0x00	; 0
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <udd_ctrl_interrupt_tc_setup+0xd6>
    240e:	c1 e0       	ldi	r28, 0x01	; 1
    2410:	8c 2f       	mov	r24, r28
    2412:	cf 91       	pop	r28
    2414:	0f 91       	pop	r16
    2416:	08 95       	ret

00002418 <udd_ep_trans_complet>:
    2418:	8f 92       	push	r8
    241a:	9f 92       	push	r9
    241c:	af 92       	push	r10
    241e:	bf 92       	push	r11
    2420:	df 92       	push	r13
    2422:	ef 92       	push	r14
    2424:	ff 92       	push	r15
    2426:	0f 93       	push	r16
    2428:	1f 93       	push	r17
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	d8 2e       	mov	r13, r24
    2430:	69 df       	rcall	.-302    	; 0x2304 <udd_ep_get_job>
    2432:	8c 01       	movw	r16, r24
    2434:	bd 2c       	mov	r11, r13
    2436:	bb 1c       	adc	r11, r11
    2438:	bb 24       	eor	r11, r11
    243a:	bb 1c       	adc	r11, r11
    243c:	cd 2d       	mov	r28, r13
    243e:	cf 70       	andi	r28, 0x0F	; 15
    2440:	d0 e0       	ldi	r29, 0x00	; 0
    2442:	cc 0f       	add	r28, r28
    2444:	dd 1f       	adc	r29, r29
    2446:	cb 0d       	add	r28, r11
    2448:	d1 1d       	adc	r29, r1
    244a:	ce 01       	movw	r24, r28
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	9c 01       	movw	r18, r24
    245a:	28 5e       	subi	r18, 0xE8	; 232
    245c:	3c 4d       	sbci	r19, 0xDC	; 220
    245e:	79 01       	movw	r14, r18
    2460:	c9 01       	movw	r24, r18
    2462:	2a df       	rcall	.-428    	; 0x22b8 <udd_ep_get_size>
    2464:	4c 01       	movw	r8, r24
    2466:	bb 20       	and	r11, r11
    2468:	09 f4       	brne	.+2      	; 0x246c <udd_ep_trans_complet+0x54>
    246a:	79 c0       	rjmp	.+242    	; 0x255e <udd_ep_trans_complet+0x146>
    246c:	fe 01       	movw	r30, r28
    246e:	ee 0f       	add	r30, r30
    2470:	ff 1f       	adc	r31, r31
    2472:	ee 0f       	add	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	ee 0f       	add	r30, r30
    2478:	ff 1f       	adc	r31, r31
    247a:	e4 50       	subi	r30, 0x04	; 4
    247c:	fd 4d       	sbci	r31, 0xDD	; 221
    247e:	22 a1       	ldd	r18, Z+34	; 0x22
    2480:	33 a1       	ldd	r19, Z+35	; 0x23
    2482:	d8 01       	movw	r26, r16
    2484:	15 96       	adiw	r26, 0x05	; 5
    2486:	8d 91       	ld	r24, X+
    2488:	9c 91       	ld	r25, X
    248a:	16 97       	sbiw	r26, 0x06	; 6
    248c:	82 0f       	add	r24, r18
    248e:	93 1f       	adc	r25, r19
    2490:	15 96       	adiw	r26, 0x05	; 5
    2492:	8d 93       	st	X+, r24
    2494:	9c 93       	st	X, r25
    2496:	16 97       	sbiw	r26, 0x06	; 6
    2498:	13 96       	adiw	r26, 0x03	; 3
    249a:	2d 91       	ld	r18, X+
    249c:	3c 91       	ld	r19, X
    249e:	14 97       	sbiw	r26, 0x04	; 4
    24a0:	82 17       	cp	r24, r18
    24a2:	93 07       	cpc	r25, r19
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <udd_ep_trans_complet+0x90>
    24a6:	45 c0       	rjmp	.+138    	; 0x2532 <udd_ep_trans_complet+0x11a>
    24a8:	28 1b       	sub	r18, r24
    24aa:	39 0b       	sbc	r19, r25
    24ac:	21 15       	cp	r18, r1
    24ae:	b4 e0       	ldi	r27, 0x04	; 4
    24b0:	3b 07       	cpc	r19, r27
    24b2:	38 f0       	brcs	.+14     	; 0x24c2 <udd_ep_trans_complet+0xaa>
    24b4:	2f ef       	ldi	r18, 0xFF	; 255
    24b6:	33 e0       	ldi	r19, 0x03	; 3
    24b8:	c9 01       	movw	r24, r18
    24ba:	b4 01       	movw	r22, r8
    24bc:	86 d5       	rcall	.+2828   	; 0x2fca <__udivmodhi4>
    24be:	28 1b       	sub	r18, r24
    24c0:	39 0b       	sbc	r19, r25
    24c2:	f8 01       	movw	r30, r16
    24c4:	80 81       	ld	r24, Z
    24c6:	81 ff       	sbrs	r24, 1
    24c8:	09 c0       	rjmp	.+18     	; 0x24dc <udd_ep_trans_complet+0xc4>
    24ca:	c9 01       	movw	r24, r18
    24cc:	b4 01       	movw	r22, r8
    24ce:	7d d5       	rcall	.+2810   	; 0x2fca <__udivmodhi4>
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	89 2b       	or	r24, r25
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <udd_ep_trans_complet+0xc0>
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	84 2f       	mov	r24, r20
    24da:	01 c0       	rjmp	.+2      	; 0x24de <udd_ep_trans_complet+0xc6>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	d8 01       	movw	r26, r16
    24e0:	9c 91       	ld	r25, X
    24e2:	80 fb       	bst	r24, 0
    24e4:	91 f9       	bld	r25, 1
    24e6:	9c 93       	st	X, r25
    24e8:	fe 01       	movw	r30, r28
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	ee 0f       	add	r30, r30
    24f0:	ff 1f       	adc	r31, r31
    24f2:	ee 0f       	add	r30, r30
    24f4:	ff 1f       	adc	r31, r31
    24f6:	e4 50       	subi	r30, 0x04	; 4
    24f8:	fd 4d       	sbci	r31, 0xDD	; 221
    24fa:	12 a2       	std	Z+34, r1	; 0x22
    24fc:	13 a2       	std	Z+35, r1	; 0x23
    24fe:	26 8f       	std	Z+30, r18	; 0x1e
    2500:	37 8f       	std	Z+31, r19	; 0x1f
    2502:	11 96       	adiw	r26, 0x01	; 1
    2504:	2d 91       	ld	r18, X+
    2506:	3c 91       	ld	r19, X
    2508:	12 97       	sbiw	r26, 0x02	; 2
    250a:	15 96       	adiw	r26, 0x05	; 5
    250c:	8d 91       	ld	r24, X+
    250e:	9c 91       	ld	r25, X
    2510:	16 97       	sbiw	r26, 0x06	; 6
    2512:	82 0f       	add	r24, r18
    2514:	93 1f       	adc	r25, r19
    2516:	cc 0f       	add	r28, r28
    2518:	dd 1f       	adc	r29, r29
    251a:	cc 0f       	add	r28, r28
    251c:	dd 1f       	adc	r29, r29
    251e:	cc 0f       	add	r28, r28
    2520:	dd 1f       	adc	r29, r29
    2522:	c4 5e       	subi	r28, 0xE4	; 228
    2524:	dc 4d       	sbci	r29, 0xDC	; 220
    2526:	88 83       	st	Y, r24
    2528:	99 83       	std	Y+1, r25	; 0x01
    252a:	f7 01       	movw	r30, r14
    252c:	02 e0       	ldi	r16, 0x02	; 2
    252e:	06 93       	lac	Z, r16
    2530:	e4 c0       	rjmp	.+456    	; 0x26fa <udd_ep_trans_complet+0x2e2>
    2532:	d8 01       	movw	r26, r16
    2534:	8c 91       	ld	r24, X
    2536:	81 ff       	sbrs	r24, 1
    2538:	cd c0       	rjmp	.+410    	; 0x26d4 <udd_ep_trans_complet+0x2bc>
    253a:	8d 7f       	andi	r24, 0xFD	; 253
    253c:	8c 93       	st	X, r24
    253e:	cc 0f       	add	r28, r28
    2540:	dd 1f       	adc	r29, r29
    2542:	cc 0f       	add	r28, r28
    2544:	dd 1f       	adc	r29, r29
    2546:	cc 0f       	add	r28, r28
    2548:	dd 1f       	adc	r29, r29
    254a:	c4 50       	subi	r28, 0x04	; 4
    254c:	dd 4d       	sbci	r29, 0xDD	; 221
    254e:	1a a2       	std	Y+34, r1	; 0x22
    2550:	1b a2       	std	Y+35, r1	; 0x23
    2552:	1e 8e       	std	Y+30, r1	; 0x1e
    2554:	1f 8e       	std	Y+31, r1	; 0x1f
    2556:	f7 01       	movw	r30, r14
    2558:	02 e0       	ldi	r16, 0x02	; 2
    255a:	06 93       	lac	Z, r16
    255c:	ce c0       	rjmp	.+412    	; 0x26fa <udd_ep_trans_complet+0x2e2>
    255e:	fe 01       	movw	r30, r28
    2560:	ee 0f       	add	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	e4 50       	subi	r30, 0x04	; 4
    256e:	fd 4d       	sbci	r31, 0xDD	; 221
    2570:	a6 8c       	ldd	r10, Z+30	; 0x1e
    2572:	b7 8c       	ldd	r11, Z+31	; 0x1f
    2574:	d8 01       	movw	r26, r16
    2576:	8c 91       	ld	r24, X
    2578:	82 ff       	sbrs	r24, 2
    257a:	19 c0       	rjmp	.+50     	; 0x25ae <udd_ep_trans_complet+0x196>
    257c:	11 96       	adiw	r26, 0x01	; 1
    257e:	ed 91       	ld	r30, X+
    2580:	fc 91       	ld	r31, X
    2582:	12 97       	sbiw	r26, 0x02	; 2
    2584:	15 96       	adiw	r26, 0x05	; 5
    2586:	2d 91       	ld	r18, X+
    2588:	3c 91       	ld	r19, X
    258a:	16 97       	sbiw	r26, 0x06	; 6
    258c:	13 96       	adiw	r26, 0x03	; 3
    258e:	8d 91       	ld	r24, X+
    2590:	9c 91       	ld	r25, X
    2592:	14 97       	sbiw	r26, 0x04	; 4
    2594:	b4 01       	movw	r22, r8
    2596:	19 d5       	rcall	.+2610   	; 0x2fca <__udivmodhi4>
    2598:	b0 e4       	ldi	r27, 0x40	; 64
    259a:	db 9e       	mul	r13, r27
    259c:	b0 01       	movw	r22, r0
    259e:	11 24       	eor	r1, r1
    25a0:	67 57       	subi	r22, 0x77	; 119
    25a2:	7f 4d       	sbci	r23, 0xDF	; 223
    25a4:	ac 01       	movw	r20, r24
    25a6:	cf 01       	movw	r24, r30
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	3b d5       	rcall	.+2678   	; 0x3024 <memcpy>
    25ae:	f8 01       	movw	r30, r16
    25b0:	25 81       	ldd	r18, Z+5	; 0x05
    25b2:	36 81       	ldd	r19, Z+6	; 0x06
    25b4:	2a 0d       	add	r18, r10
    25b6:	3b 1d       	adc	r19, r11
    25b8:	25 83       	std	Z+5, r18	; 0x05
    25ba:	36 83       	std	Z+6, r19	; 0x06
    25bc:	83 81       	ldd	r24, Z+3	; 0x03
    25be:	94 81       	ldd	r25, Z+4	; 0x04
    25c0:	82 17       	cp	r24, r18
    25c2:	93 07       	cpc	r25, r19
    25c4:	68 f4       	brcc	.+26     	; 0x25e0 <udd_ep_trans_complet+0x1c8>
    25c6:	85 83       	std	Z+5, r24	; 0x05
    25c8:	96 83       	std	Z+6, r25	; 0x06
    25ca:	cc 0f       	add	r28, r28
    25cc:	dd 1f       	adc	r29, r29
    25ce:	cc 0f       	add	r28, r28
    25d0:	dd 1f       	adc	r29, r29
    25d2:	cc 0f       	add	r28, r28
    25d4:	dd 1f       	adc	r29, r29
    25d6:	c4 50       	subi	r28, 0x04	; 4
    25d8:	dd 4d       	sbci	r29, 0xDD	; 221
    25da:	8a a1       	ldd	r24, Y+34	; 0x22
    25dc:	9b a1       	ldd	r25, Y+35	; 0x23
    25de:	7a c0       	rjmp	.+244    	; 0x26d4 <udd_ep_trans_complet+0x2bc>
    25e0:	fe 01       	movw	r30, r28
    25e2:	ee 0f       	add	r30, r30
    25e4:	ff 1f       	adc	r31, r31
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	ee 0f       	add	r30, r30
    25ec:	ff 1f       	adc	r31, r31
    25ee:	e4 50       	subi	r30, 0x04	; 4
    25f0:	fd 4d       	sbci	r31, 0xDD	; 221
    25f2:	42 a1       	ldd	r20, Z+34	; 0x22
    25f4:	53 a1       	ldd	r21, Z+35	; 0x23
    25f6:	4a 15       	cp	r20, r10
    25f8:	5b 05       	cpc	r21, r11
    25fa:	09 f0       	breq	.+2      	; 0x25fe <udd_ep_trans_complet+0x1e6>
    25fc:	6b c0       	rjmp	.+214    	; 0x26d4 <udd_ep_trans_complet+0x2bc>
    25fe:	28 17       	cp	r18, r24
    2600:	39 07       	cpc	r19, r25
    2602:	09 f4       	brne	.+2      	; 0x2606 <udd_ep_trans_complet+0x1ee>
    2604:	67 c0       	rjmp	.+206    	; 0x26d4 <udd_ep_trans_complet+0x2bc>
    2606:	ac 01       	movw	r20, r24
    2608:	42 1b       	sub	r20, r18
    260a:	53 0b       	sbc	r21, r19
    260c:	9a 01       	movw	r18, r20
    260e:	21 15       	cp	r18, r1
    2610:	54 e0       	ldi	r21, 0x04	; 4
    2612:	35 07       	cpc	r19, r21
    2614:	50 f0       	brcs	.+20     	; 0x262a <udd_ep_trans_complet+0x212>
    2616:	2f ef       	ldi	r18, 0xFF	; 255
    2618:	33 e0       	ldi	r19, 0x03	; 3
    261a:	c9 01       	movw	r24, r18
    261c:	b4 01       	movw	r22, r8
    261e:	d5 d4       	rcall	.+2474   	; 0x2fca <__udivmodhi4>
    2620:	d9 01       	movw	r26, r18
    2622:	a8 1b       	sub	r26, r24
    2624:	b9 0b       	sbc	r27, r25
    2626:	cd 01       	movw	r24, r26
    2628:	07 c0       	rjmp	.+14     	; 0x2638 <udd_ep_trans_complet+0x220>
    262a:	c9 01       	movw	r24, r18
    262c:	b4 01       	movw	r22, r8
    262e:	cd d4       	rcall	.+2458   	; 0x2fca <__udivmodhi4>
    2630:	f9 01       	movw	r30, r18
    2632:	e8 1b       	sub	r30, r24
    2634:	f9 0b       	sbc	r31, r25
    2636:	cf 01       	movw	r24, r30
    2638:	fe 01       	movw	r30, r28
    263a:	ee 0f       	add	r30, r30
    263c:	ff 1f       	adc	r31, r31
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	e4 50       	subi	r30, 0x04	; 4
    2648:	fd 4d       	sbci	r31, 0xDD	; 221
    264a:	16 8e       	std	Z+30, r1	; 0x1e
    264c:	17 8e       	std	Z+31, r1	; 0x1f
    264e:	88 15       	cp	r24, r8
    2650:	99 05       	cpc	r25, r9
    2652:	00 f5       	brcc	.+64     	; 0x2694 <udd_ep_trans_complet+0x27c>
    2654:	d8 01       	movw	r26, r16
    2656:	8c 91       	ld	r24, X
    2658:	84 60       	ori	r24, 0x04	; 4
    265a:	8c 93       	st	X, r24
    265c:	b0 e4       	ldi	r27, 0x40	; 64
    265e:	db 9e       	mul	r13, r27
    2660:	c0 01       	movw	r24, r0
    2662:	11 24       	eor	r1, r1
    2664:	87 57       	subi	r24, 0x77	; 119
    2666:	9f 4d       	sbci	r25, 0xDF	; 223
    2668:	fe 01       	movw	r30, r28
    266a:	ee 0f       	add	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	e4 5e       	subi	r30, 0xE4	; 228
    2678:	fc 4d       	sbci	r31, 0xDC	; 220
    267a:	80 83       	st	Z, r24
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	cc 0f       	add	r28, r28
    2680:	dd 1f       	adc	r29, r29
    2682:	cc 0f       	add	r28, r28
    2684:	dd 1f       	adc	r29, r29
    2686:	cc 0f       	add	r28, r28
    2688:	dd 1f       	adc	r29, r29
    268a:	c4 50       	subi	r28, 0x04	; 4
    268c:	dd 4d       	sbci	r29, 0xDD	; 221
    268e:	8a a2       	std	Y+34, r8	; 0x22
    2690:	9b a2       	std	Y+35, r9	; 0x23
    2692:	1c c0       	rjmp	.+56     	; 0x26cc <udd_ep_trans_complet+0x2b4>
    2694:	f8 01       	movw	r30, r16
    2696:	41 81       	ldd	r20, Z+1	; 0x01
    2698:	52 81       	ldd	r21, Z+2	; 0x02
    269a:	25 81       	ldd	r18, Z+5	; 0x05
    269c:	36 81       	ldd	r19, Z+6	; 0x06
    269e:	24 0f       	add	r18, r20
    26a0:	35 1f       	adc	r19, r21
    26a2:	fe 01       	movw	r30, r28
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	e4 5e       	subi	r30, 0xE4	; 228
    26b2:	fc 4d       	sbci	r31, 0xDC	; 220
    26b4:	20 83       	st	Z, r18
    26b6:	31 83       	std	Z+1, r19	; 0x01
    26b8:	cc 0f       	add	r28, r28
    26ba:	dd 1f       	adc	r29, r29
    26bc:	cc 0f       	add	r28, r28
    26be:	dd 1f       	adc	r29, r29
    26c0:	cc 0f       	add	r28, r28
    26c2:	dd 1f       	adc	r29, r29
    26c4:	c4 50       	subi	r28, 0x04	; 4
    26c6:	dd 4d       	sbci	r29, 0xDD	; 221
    26c8:	8a a3       	std	Y+34, r24	; 0x22
    26ca:	9b a3       	std	Y+35, r25	; 0x23
    26cc:	f7 01       	movw	r30, r14
    26ce:	02 e0       	ldi	r16, 0x02	; 2
    26d0:	06 93       	lac	Z, r16
    26d2:	13 c0       	rjmp	.+38     	; 0x26fa <udd_ep_trans_complet+0x2e2>
    26d4:	d8 01       	movw	r26, r16
    26d6:	8c 91       	ld	r24, X
    26d8:	80 ff       	sbrs	r24, 0
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <udd_ep_trans_complet+0x2e2>
    26dc:	8e 7f       	andi	r24, 0xFE	; 254
    26de:	8c 93       	st	X, r24
    26e0:	17 96       	adiw	r26, 0x07	; 7
    26e2:	ed 91       	ld	r30, X+
    26e4:	fc 91       	ld	r31, X
    26e6:	18 97       	sbiw	r26, 0x08	; 8
    26e8:	30 97       	sbiw	r30, 0x00	; 0
    26ea:	39 f0       	breq	.+14     	; 0x26fa <udd_ep_trans_complet+0x2e2>
    26ec:	15 96       	adiw	r26, 0x05	; 5
    26ee:	6d 91       	ld	r22, X+
    26f0:	7c 91       	ld	r23, X
    26f2:	16 97       	sbiw	r26, 0x06	; 6
    26f4:	4d 2d       	mov	r20, r13
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	09 95       	icall
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	bf 90       	pop	r11
    270a:	af 90       	pop	r10
    270c:	9f 90       	pop	r9
    270e:	8f 90       	pop	r8
    2710:	08 95       	ret

00002712 <udd_attach>:
    2712:	cf 93       	push	r28
    2714:	cf b7       	in	r28, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	ee dc       	rcall	.-1572   	; 0x20f8 <udd_sleep_mode>
    271c:	ea ec       	ldi	r30, 0xCA	; 202
    271e:	f4 e0       	ldi	r31, 0x04	; 4
    2720:	80 e4       	ldi	r24, 0x40	; 64
    2722:	80 83       	st	Z, r24
    2724:	80 e2       	ldi	r24, 0x20	; 32
    2726:	80 83       	st	Z, r24
    2728:	e1 ec       	ldi	r30, 0xC1	; 193
    272a:	f4 e0       	ldi	r31, 0x04	; 4
    272c:	80 81       	ld	r24, Z
    272e:	81 60       	ori	r24, 0x01	; 1
    2730:	80 83       	st	Z, r24
    2732:	a9 ec       	ldi	r26, 0xC9	; 201
    2734:	b4 e0       	ldi	r27, 0x04	; 4
    2736:	8c 91       	ld	r24, X
    2738:	82 60       	ori	r24, 0x02	; 2
    273a:	8c 93       	st	X, r24
    273c:	e8 ec       	ldi	r30, 0xC8	; 200
    273e:	f4 e0       	ldi	r31, 0x04	; 4
    2740:	80 81       	ld	r24, Z
    2742:	80 64       	ori	r24, 0x40	; 64
    2744:	80 83       	st	Z, r24
    2746:	8c 91       	ld	r24, X
    2748:	81 60       	ori	r24, 0x01	; 1
    274a:	8c 93       	st	X, r24
    274c:	80 81       	ld	r24, Z
    274e:	80 68       	ori	r24, 0x80	; 128
    2750:	80 83       	st	Z, r24
    2752:	cf bf       	out	0x3f, r28	; 63
    2754:	cf 91       	pop	r28
    2756:	08 95       	ret

00002758 <udd_enable>:
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	c0 e6       	ldi	r28, 0x60	; 96
    275e:	d0 e0       	ldi	r29, 0x00	; 0
    2760:	18 82       	st	Y, r1
    2762:	80 e3       	ldi	r24, 0x30	; 48
    2764:	0e 94 c6 0a 	call	0x158c	; 0x158c <sysclk_enable_usb>
    2768:	e0 ec       	ldi	r30, 0xC0	; 192
    276a:	f4 e0       	ldi	r31, 0x04	; 4
    276c:	80 81       	ld	r24, Z
    276e:	80 64       	ori	r24, 0x40	; 64
    2770:	80 83       	st	Z, r24
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	88 83       	st	Y, r24
    2776:	cf b7       	in	r28, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	fc 01       	movw	r30, r24
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	ee 0f       	add	r30, r30
    2786:	ff 1f       	adc	r31, r31
    2788:	ee 0f       	add	r30, r30
    278a:	ff 1f       	adc	r31, r31
    278c:	e4 50       	subi	r30, 0x04	; 4
    278e:	fd 4d       	sbci	r31, 0xDD	; 221
    2790:	15 8e       	std	Z+29, r1	; 0x1d
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	8e 30       	cpi	r24, 0x0E	; 14
    2796:	91 05       	cpc	r25, r1
    2798:	91 f7       	brne	.-28     	; 0x277e <udd_enable+0x26>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	fc 01       	movw	r30, r24
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	ee 0f       	add	r30, r30
    27aa:	ff 1f       	adc	r31, r31
    27ac:	e8 0f       	add	r30, r24
    27ae:	f9 1f       	adc	r31, r25
    27b0:	e7 5b       	subi	r30, 0xB7	; 183
    27b2:	fd 4d       	sbci	r31, 0xDD	; 221
    27b4:	20 81       	ld	r18, Z
    27b6:	2e 7f       	andi	r18, 0xFE	; 254
    27b8:	20 83       	st	Z, r18
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	8c 30       	cpi	r24, 0x0C	; 12
    27be:	91 05       	cpc	r25, r1
    27c0:	71 f7       	brne	.-36     	; 0x279e <udd_enable+0x46>
    27c2:	6a e1       	ldi	r22, 0x1A	; 26
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	8d dc       	rcall	.-1766   	; 0x20e4 <nvm_read_byte>
    27ca:	8f 3f       	cpi	r24, 0xFF	; 255
    27cc:	19 f0       	breq	.+6      	; 0x27d4 <udd_enable+0x7c>
    27ce:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    27d2:	03 c0       	rjmp	.+6      	; 0x27da <udd_enable+0x82>
    27d4:	8f e1       	ldi	r24, 0x1F	; 31
    27d6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    27da:	6b e1       	ldi	r22, 0x1B	; 27
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	81 dc       	rcall	.-1790   	; 0x20e4 <nvm_read_byte>
    27e2:	8f 3f       	cpi	r24, 0xFF	; 255
    27e4:	19 f0       	breq	.+6      	; 0x27ec <udd_enable+0x94>
    27e6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    27ea:	03 c0       	rjmp	.+6      	; 0x27f2 <udd_enable+0x9a>
    27ec:	8f e1       	ldi	r24, 0x1F	; 31
    27ee:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    27f2:	e0 ec       	ldi	r30, 0xC0	; 192
    27f4:	f4 e0       	ldi	r31, 0x04	; 4
    27f6:	80 81       	ld	r24, Z
    27f8:	86 60       	ori	r24, 0x06	; 6
    27fa:	80 83       	st	Z, r24
    27fc:	80 81       	ld	r24, Z
    27fe:	80 68       	ori	r24, 0x80	; 128
    2800:	80 83       	st	Z, r24
    2802:	80 81       	ld	r24, Z
    2804:	80 61       	ori	r24, 0x10	; 16
    2806:	80 83       	st	Z, r24
    2808:	88 e1       	ldi	r24, 0x18	; 24
    280a:	93 e2       	ldi	r25, 0x23	; 35
    280c:	86 83       	std	Z+6, r24	; 0x06
    280e:	97 83       	std	Z+7, r25	; 0x07
    2810:	80 81       	ld	r24, Z
    2812:	80 62       	ori	r24, 0x20	; 32
    2814:	80 83       	st	Z, r24
    2816:	8f ef       	ldi	r24, 0xFF	; 255
    2818:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    281c:	e8 ec       	ldi	r30, 0xC8	; 200
    281e:	f4 e0       	ldi	r31, 0x04	; 4
    2820:	80 81       	ld	r24, Z
    2822:	82 60       	ori	r24, 0x02	; 2
    2824:	80 83       	st	Z, r24
    2826:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <udd_b_idle>
    282a:	80 91 ef 2d 	lds	r24, 0x2DEF	; 0x802def <sleepmgr_locks+0x5>
    282e:	8f 3f       	cpi	r24, 0xFF	; 255
    2830:	09 f4       	brne	.+2      	; 0x2834 <udd_enable+0xdc>
    2832:	ff cf       	rjmp	.-2      	; 0x2832 <udd_enable+0xda>
    2834:	9f b7       	in	r25, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	ea ee       	ldi	r30, 0xEA	; 234
    283a:	fd e2       	ldi	r31, 0x2D	; 45
    283c:	85 81       	ldd	r24, Z+5	; 0x05
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	85 83       	std	Z+5, r24	; 0x05
    2842:	9f bf       	out	0x3f, r25	; 63
    2844:	66 df       	rcall	.-308    	; 0x2712 <udd_attach>
    2846:	cf bf       	out	0x3f, r28	; 63
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	08 95       	ret

0000284e <udd_set_address>:
    284e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2852:	08 95       	ret

00002854 <udd_getaddress>:
    2854:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2858:	08 95       	ret

0000285a <udd_set_setup_payload>:
    285a:	ea eb       	ldi	r30, 0xBA	; 186
    285c:	f5 e2       	ldi	r31, 0x25	; 37
    285e:	80 87       	std	Z+8, r24	; 0x08
    2860:	91 87       	std	Z+9, r25	; 0x09
    2862:	62 87       	std	Z+10, r22	; 0x0a
    2864:	73 87       	std	Z+11, r23	; 0x0b
    2866:	08 95       	ret

00002868 <udd_ep_alloc>:
    2868:	28 2f       	mov	r18, r24
    286a:	2f 70       	andi	r18, 0x0F	; 15
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	22 0f       	add	r18, r18
    2870:	33 1f       	adc	r19, r19
    2872:	08 2e       	mov	r0, r24
    2874:	00 0c       	add	r0, r0
    2876:	99 0b       	sbc	r25, r25
    2878:	88 27       	eor	r24, r24
    287a:	99 0f       	add	r25, r25
    287c:	88 1f       	adc	r24, r24
    287e:	99 27       	eor	r25, r25
    2880:	82 0f       	add	r24, r18
    2882:	93 1f       	adc	r25, r19
    2884:	fc 01       	movw	r30, r24
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	ee 0f       	add	r30, r30
    2890:	ff 1f       	adc	r31, r31
    2892:	e4 50       	subi	r30, 0x04	; 4
    2894:	fd 4d       	sbci	r31, 0xDD	; 221
    2896:	25 8d       	ldd	r18, Z+29	; 0x1d
    2898:	20 7c       	andi	r18, 0xC0	; 192
    289a:	09 f0       	breq	.+2      	; 0x289e <udd_ep_alloc+0x36>
    289c:	4f c0       	rjmp	.+158    	; 0x293c <udd_ep_alloc+0xd4>
    289e:	63 70       	andi	r22, 0x03	; 3
    28a0:	61 30       	cpi	r22, 0x01	; 1
    28a2:	11 f0       	breq	.+4      	; 0x28a8 <udd_ep_alloc+0x40>
    28a4:	18 f4       	brcc	.+6      	; 0x28ac <udd_ep_alloc+0x44>
    28a6:	04 c0       	rjmp	.+8      	; 0x28b0 <udd_ep_alloc+0x48>
    28a8:	20 ec       	ldi	r18, 0xC0	; 192
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <udd_ep_alloc+0x4a>
    28ac:	20 e8       	ldi	r18, 0x80	; 128
    28ae:	01 c0       	rjmp	.+2      	; 0x28b2 <udd_ep_alloc+0x4a>
    28b0:	20 e4       	ldi	r18, 0x40	; 64
    28b2:	40 38       	cpi	r20, 0x80	; 128
    28b4:	51 05       	cpc	r21, r1
    28b6:	e9 f0       	breq	.+58     	; 0x28f2 <udd_ep_alloc+0x8a>
    28b8:	50 f4       	brcc	.+20     	; 0x28ce <udd_ep_alloc+0x66>
    28ba:	40 32       	cpi	r20, 0x20	; 32
    28bc:	51 05       	cpc	r21, r1
    28be:	a9 f0       	breq	.+42     	; 0x28ea <udd_ep_alloc+0x82>
    28c0:	40 34       	cpi	r20, 0x40	; 64
    28c2:	51 05       	cpc	r21, r1
    28c4:	a1 f0       	breq	.+40     	; 0x28ee <udd_ep_alloc+0x86>
    28c6:	40 31       	cpi	r20, 0x10	; 16
    28c8:	51 05       	cpc	r21, r1
    28ca:	d9 f4       	brne	.+54     	; 0x2902 <udd_ep_alloc+0x9a>
    28cc:	0c c0       	rjmp	.+24     	; 0x28e6 <udd_ep_alloc+0x7e>
    28ce:	41 15       	cp	r20, r1
    28d0:	32 e0       	ldi	r19, 0x02	; 2
    28d2:	53 07       	cpc	r21, r19
    28d4:	91 f0       	breq	.+36     	; 0x28fa <udd_ep_alloc+0x92>
    28d6:	4f 3f       	cpi	r20, 0xFF	; 255
    28d8:	33 e0       	ldi	r19, 0x03	; 3
    28da:	53 07       	cpc	r21, r19
    28dc:	81 f0       	breq	.+32     	; 0x28fe <udd_ep_alloc+0x96>
    28de:	41 15       	cp	r20, r1
    28e0:	51 40       	sbci	r21, 0x01	; 1
    28e2:	79 f4       	brne	.+30     	; 0x2902 <udd_ep_alloc+0x9a>
    28e4:	08 c0       	rjmp	.+16     	; 0x28f6 <udd_ep_alloc+0x8e>
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0d c0       	rjmp	.+26     	; 0x2904 <udd_ep_alloc+0x9c>
    28ea:	42 e0       	ldi	r20, 0x02	; 2
    28ec:	0b c0       	rjmp	.+22     	; 0x2904 <udd_ep_alloc+0x9c>
    28ee:	43 e0       	ldi	r20, 0x03	; 3
    28f0:	09 c0       	rjmp	.+18     	; 0x2904 <udd_ep_alloc+0x9c>
    28f2:	44 e0       	ldi	r20, 0x04	; 4
    28f4:	07 c0       	rjmp	.+14     	; 0x2904 <udd_ep_alloc+0x9c>
    28f6:	45 e0       	ldi	r20, 0x05	; 5
    28f8:	05 c0       	rjmp	.+10     	; 0x2904 <udd_ep_alloc+0x9c>
    28fa:	46 e0       	ldi	r20, 0x06	; 6
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <udd_ep_alloc+0x9c>
    28fe:	47 e0       	ldi	r20, 0x07	; 7
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <udd_ep_alloc+0x9c>
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	fc 01       	movw	r30, r24
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	e4 50       	subi	r30, 0x04	; 4
    2914:	fd 4d       	sbci	r31, 0xDD	; 221
    2916:	15 8e       	std	Z+29, r1	; 0x1d
    2918:	36 e0       	ldi	r19, 0x06	; 6
    291a:	34 8f       	std	Z+28, r19	; 0x1c
    291c:	24 2b       	or	r18, r20
    291e:	25 8f       	std	Z+29, r18	; 0x1d
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	fc 01       	movw	r30, r24
    292e:	e4 50       	subi	r30, 0x04	; 4
    2930:	fd 4d       	sbci	r31, 0xDD	; 221
    2932:	85 8d       	ldd	r24, Z+29	; 0x1d
    2934:	80 62       	ori	r24, 0x20	; 32
    2936:	85 8f       	std	Z+29, r24	; 0x1d
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	08 95       	ret
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	08 95       	ret

00002940 <udd_ep_is_halted>:
    2940:	e8 2f       	mov	r30, r24
    2942:	ef 70       	andi	r30, 0x0F	; 15
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	ee 0f       	add	r30, r30
    2948:	ff 1f       	adc	r31, r31
    294a:	08 2e       	mov	r0, r24
    294c:	00 0c       	add	r0, r0
    294e:	99 0b       	sbc	r25, r25
    2950:	88 27       	eor	r24, r24
    2952:	99 0f       	add	r25, r25
    2954:	88 1f       	adc	r24, r24
    2956:	99 27       	eor	r25, r25
    2958:	e8 0f       	add	r30, r24
    295a:	f9 1f       	adc	r31, r25
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	ee 0f       	add	r30, r30
    2962:	ff 1f       	adc	r31, r31
    2964:	ee 0f       	add	r30, r30
    2966:	ff 1f       	adc	r31, r31
    2968:	e4 50       	subi	r30, 0x04	; 4
    296a:	fd 4d       	sbci	r31, 0xDD	; 221
    296c:	85 8d       	ldd	r24, Z+29	; 0x1d
    296e:	82 fb       	bst	r24, 2
    2970:	88 27       	eor	r24, r24
    2972:	80 f9       	bld	r24, 0
    2974:	08 95       	ret

00002976 <udd_ep_clear_halt>:
    2976:	28 2f       	mov	r18, r24
    2978:	2f 70       	andi	r18, 0x0F	; 15
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	a9 01       	movw	r20, r18
    297e:	44 0f       	add	r20, r20
    2980:	55 1f       	adc	r21, r21
    2982:	28 2f       	mov	r18, r24
    2984:	08 2e       	mov	r0, r24
    2986:	00 0c       	add	r0, r0
    2988:	33 0b       	sbc	r19, r19
    298a:	22 27       	eor	r18, r18
    298c:	33 0f       	add	r19, r19
    298e:	22 1f       	adc	r18, r18
    2990:	33 27       	eor	r19, r19
    2992:	24 0f       	add	r18, r20
    2994:	35 1f       	adc	r19, r21
    2996:	f9 01       	movw	r30, r18
    2998:	ee 0f       	add	r30, r30
    299a:	ff 1f       	adc	r31, r31
    299c:	ee 0f       	add	r30, r30
    299e:	ff 1f       	adc	r31, r31
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	e4 50       	subi	r30, 0x04	; 4
    29a6:	fd 4d       	sbci	r31, 0xDD	; 221
    29a8:	95 8d       	ldd	r25, Z+29	; 0x1d
    29aa:	92 ff       	sbrs	r25, 2
    29ac:	17 c0       	rjmp	.+46     	; 0x29dc <udd_ep_clear_halt+0x66>
    29ae:	22 0f       	add	r18, r18
    29b0:	33 1f       	adc	r19, r19
    29b2:	22 0f       	add	r18, r18
    29b4:	33 1f       	adc	r19, r19
    29b6:	22 0f       	add	r18, r18
    29b8:	33 1f       	adc	r19, r19
    29ba:	f9 01       	movw	r30, r18
    29bc:	e4 50       	subi	r30, 0x04	; 4
    29be:	fd 4d       	sbci	r31, 0xDD	; 221
    29c0:	95 8d       	ldd	r25, Z+29	; 0x1d
    29c2:	9b 7f       	andi	r25, 0xFB	; 251
    29c4:	95 8f       	std	Z+29, r25	; 0x1d
    29c6:	9e dc       	rcall	.-1732   	; 0x2304 <udd_ep_get_job>
    29c8:	fc 01       	movw	r30, r24
    29ca:	80 81       	ld	r24, Z
    29cc:	80 ff       	sbrs	r24, 0
    29ce:	06 c0       	rjmp	.+12     	; 0x29dc <udd_ep_clear_halt+0x66>
    29d0:	8e 7f       	andi	r24, 0xFE	; 254
    29d2:	80 83       	st	Z, r24
    29d4:	07 80       	ldd	r0, Z+7	; 0x07
    29d6:	f0 85       	ldd	r31, Z+8	; 0x08
    29d8:	e0 2d       	mov	r30, r0
    29da:	09 95       	icall
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	08 95       	ret

000029e0 <udd_ep_run>:
    29e0:	7f 92       	push	r7
    29e2:	8f 92       	push	r8
    29e4:	9f 92       	push	r9
    29e6:	af 92       	push	r10
    29e8:	bf 92       	push	r11
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	98 2e       	mov	r9, r24
    29fc:	86 2e       	mov	r8, r22
    29fe:	6a 01       	movw	r12, r20
    2a00:	79 01       	movw	r14, r18
    2a02:	80 dc       	rcall	.-1792   	; 0x2304 <udd_ep_get_job>
    2a04:	5c 01       	movw	r10, r24
    2a06:	79 2c       	mov	r7, r9
    2a08:	77 1c       	adc	r7, r7
    2a0a:	77 24       	eor	r7, r7
    2a0c:	77 1c       	adc	r7, r7
    2a0e:	c9 2d       	mov	r28, r9
    2a10:	cf 70       	andi	r28, 0x0F	; 15
    2a12:	d0 e0       	ldi	r29, 0x00	; 0
    2a14:	cc 0f       	add	r28, r28
    2a16:	dd 1f       	adc	r29, r29
    2a18:	c7 0d       	add	r28, r7
    2a1a:	d1 1d       	adc	r29, r1
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ee 0f       	add	r30, r30
    2a20:	ff 1f       	adc	r31, r31
    2a22:	ee 0f       	add	r30, r30
    2a24:	ff 1f       	adc	r31, r31
    2a26:	ee 0f       	add	r30, r30
    2a28:	ff 1f       	adc	r31, r31
    2a2a:	e4 50       	subi	r30, 0x04	; 4
    2a2c:	fd 4d       	sbci	r31, 0xDD	; 221
    2a2e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a30:	80 7c       	andi	r24, 0xC0	; 192
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <udd_ep_run+0x56>
    2a34:	7d c0       	rjmp	.+250    	; 0x2b30 <udd_ep_run+0x150>
    2a36:	fe 01       	movw	r30, r28
    2a38:	ee 0f       	add	r30, r30
    2a3a:	ff 1f       	adc	r31, r31
    2a3c:	ee 0f       	add	r30, r30
    2a3e:	ff 1f       	adc	r31, r31
    2a40:	ee 0f       	add	r30, r30
    2a42:	ff 1f       	adc	r31, r31
    2a44:	e4 50       	subi	r30, 0x04	; 4
    2a46:	fd 4d       	sbci	r31, 0xDD	; 221
    2a48:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a4a:	80 7c       	andi	r24, 0xC0	; 192
    2a4c:	80 3c       	cpi	r24, 0xC0	; 192
    2a4e:	61 f0       	breq	.+24     	; 0x2a68 <udd_ep_run+0x88>
    2a50:	fe 01       	movw	r30, r28
    2a52:	ee 0f       	add	r30, r30
    2a54:	ff 1f       	adc	r31, r31
    2a56:	ee 0f       	add	r30, r30
    2a58:	ff 1f       	adc	r31, r31
    2a5a:	ee 0f       	add	r30, r30
    2a5c:	ff 1f       	adc	r31, r31
    2a5e:	e4 50       	subi	r30, 0x04	; 4
    2a60:	fd 4d       	sbci	r31, 0xDD	; 221
    2a62:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a64:	82 fd       	sbrc	r24, 2
    2a66:	66 c0       	rjmp	.+204    	; 0x2b34 <udd_ep_run+0x154>
    2a68:	8f b7       	in	r24, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	f5 01       	movw	r30, r10
    2a6e:	90 81       	ld	r25, Z
    2a70:	90 ff       	sbrs	r25, 0
    2a72:	03 c0       	rjmp	.+6      	; 0x2a7a <udd_ep_run+0x9a>
    2a74:	8f bf       	out	0x3f, r24	; 63
    2a76:	71 2c       	mov	r7, r1
    2a78:	5e c0       	rjmp	.+188    	; 0x2b36 <udd_ep_run+0x156>
    2a7a:	f5 01       	movw	r30, r10
    2a7c:	90 81       	ld	r25, Z
    2a7e:	91 60       	ori	r25, 0x01	; 1
    2a80:	90 83       	st	Z, r25
    2a82:	8f bf       	out	0x3f, r24	; 63
    2a84:	c1 82       	std	Z+1, r12	; 0x01
    2a86:	d2 82       	std	Z+2, r13	; 0x02
    2a88:	e3 82       	std	Z+3, r14	; 0x03
    2a8a:	f4 82       	std	Z+4, r15	; 0x04
    2a8c:	15 82       	std	Z+5, r1	; 0x05
    2a8e:	16 82       	std	Z+6, r1	; 0x06
    2a90:	07 83       	std	Z+7, r16	; 0x07
    2a92:	10 87       	std	Z+8, r17	; 0x08
    2a94:	81 10       	cpse	r8, r1
    2a96:	06 c0       	rjmp	.+12     	; 0x2aa4 <udd_ep_run+0xc4>
    2a98:	91 e0       	ldi	r25, 0x01	; 1
    2a9a:	e1 14       	cp	r14, r1
    2a9c:	f1 04       	cpc	r15, r1
    2a9e:	19 f0       	breq	.+6      	; 0x2aa6 <udd_ep_run+0xc6>
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	01 c0       	rjmp	.+2      	; 0x2aa6 <udd_ep_run+0xc6>
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	f5 01       	movw	r30, r10
    2aa8:	80 81       	ld	r24, Z
    2aaa:	90 fb       	bst	r25, 0
    2aac:	81 f9       	bld	r24, 1
    2aae:	8b 7f       	andi	r24, 0xFB	; 251
    2ab0:	80 83       	st	Z, r24
    2ab2:	77 20       	and	r7, r7
    2ab4:	59 f0       	breq	.+22     	; 0x2acc <udd_ep_run+0xec>
    2ab6:	cc 0f       	add	r28, r28
    2ab8:	dd 1f       	adc	r29, r29
    2aba:	cc 0f       	add	r28, r28
    2abc:	dd 1f       	adc	r29, r29
    2abe:	cc 0f       	add	r28, r28
    2ac0:	dd 1f       	adc	r29, r29
    2ac2:	c4 50       	subi	r28, 0x04	; 4
    2ac4:	dd 4d       	sbci	r29, 0xDD	; 221
    2ac6:	1a a2       	std	Y+34, r1	; 0x22
    2ac8:	1b a2       	std	Y+35, r1	; 0x23
    2aca:	2d c0       	rjmp	.+90     	; 0x2b26 <udd_ep_run+0x146>
    2acc:	fe 01       	movw	r30, r28
    2ace:	ee 0f       	add	r30, r30
    2ad0:	ff 1f       	adc	r31, r31
    2ad2:	ee 0f       	add	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	e4 50       	subi	r30, 0x04	; 4
    2adc:	fd 4d       	sbci	r31, 0xDD	; 221
    2ade:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ae0:	80 7c       	andi	r24, 0xC0	; 192
    2ae2:	80 3c       	cpi	r24, 0xC0	; 192
    2ae4:	a1 f4       	brne	.+40     	; 0x2b0e <udd_ep_run+0x12e>
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	88 5e       	subi	r24, 0xE8	; 232
    2af6:	9c 4d       	sbci	r25, 0xDC	; 220
    2af8:	df db       	rcall	.-2114   	; 0x22b8 <udd_ep_get_size>
    2afa:	bc 01       	movw	r22, r24
    2afc:	c7 01       	movw	r24, r14
    2afe:	65 d2       	rcall	.+1226   	; 0x2fca <__udivmodhi4>
    2b00:	89 2b       	or	r24, r25
    2b02:	29 f0       	breq	.+10     	; 0x2b0e <udd_ep_run+0x12e>
    2b04:	f5 01       	movw	r30, r10
    2b06:	80 81       	ld	r24, Z
    2b08:	8e 7f       	andi	r24, 0xFE	; 254
    2b0a:	80 83       	st	Z, r24
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <udd_ep_run+0x156>
    2b0e:	cc 0f       	add	r28, r28
    2b10:	dd 1f       	adc	r29, r29
    2b12:	cc 0f       	add	r28, r28
    2b14:	dd 1f       	adc	r29, r29
    2b16:	cc 0f       	add	r28, r28
    2b18:	dd 1f       	adc	r29, r29
    2b1a:	c4 50       	subi	r28, 0x04	; 4
    2b1c:	dd 4d       	sbci	r29, 0xDD	; 221
    2b1e:	1e 8e       	std	Y+30, r1	; 0x1e
    2b20:	1f 8e       	std	Y+31, r1	; 0x1f
    2b22:	1a a2       	std	Y+34, r1	; 0x22
    2b24:	1b a2       	std	Y+35, r1	; 0x23
    2b26:	89 2d       	mov	r24, r9
    2b28:	77 dc       	rcall	.-1810   	; 0x2418 <udd_ep_trans_complet>
    2b2a:	77 24       	eor	r7, r7
    2b2c:	73 94       	inc	r7
    2b2e:	03 c0       	rjmp	.+6      	; 0x2b36 <udd_ep_run+0x156>
    2b30:	71 2c       	mov	r7, r1
    2b32:	01 c0       	rjmp	.+2      	; 0x2b36 <udd_ep_run+0x156>
    2b34:	71 2c       	mov	r7, r1
    2b36:	87 2d       	mov	r24, r7
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	ff 90       	pop	r15
    2b42:	ef 90       	pop	r14
    2b44:	df 90       	pop	r13
    2b46:	cf 90       	pop	r12
    2b48:	bf 90       	pop	r11
    2b4a:	af 90       	pop	r10
    2b4c:	9f 90       	pop	r9
    2b4e:	8f 90       	pop	r8
    2b50:	7f 90       	pop	r7
    2b52:	08 95       	ret

00002b54 <udd_ep_abort>:
    2b54:	ff 92       	push	r15
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	18 2f       	mov	r17, r24
    2b60:	f8 2e       	mov	r15, r24
    2b62:	ff 1c       	adc	r15, r15
    2b64:	ff 24       	eor	r15, r15
    2b66:	ff 1c       	adc	r15, r15
    2b68:	c8 2f       	mov	r28, r24
    2b6a:	cf 70       	andi	r28, 0x0F	; 15
    2b6c:	d0 e0       	ldi	r29, 0x00	; 0
    2b6e:	cc 0f       	add	r28, r28
    2b70:	dd 1f       	adc	r29, r29
    2b72:	cf 0d       	add	r28, r15
    2b74:	d1 1d       	adc	r29, r1
    2b76:	c6 db       	rcall	.-2164   	; 0x2304 <udd_ep_get_job>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ee 0f       	add	r30, r30
    2b7e:	ff 1f       	adc	r31, r31
    2b80:	ee 0f       	add	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	ee 0f       	add	r30, r30
    2b86:	ff 1f       	adc	r31, r31
    2b88:	e8 5e       	subi	r30, 0xE8	; 232
    2b8a:	fc 4d       	sbci	r31, 0xDC	; 220
    2b8c:	02 e0       	ldi	r16, 0x02	; 2
    2b8e:	05 93       	las	Z, r16
    2b90:	8c 91       	ld	r24, X
    2b92:	80 ff       	sbrs	r24, 0
    2b94:	22 c0       	rjmp	.+68     	; 0x2bda <udd_ep_abort+0x86>
    2b96:	8e 7f       	andi	r24, 0xFE	; 254
    2b98:	8c 93       	st	X, r24
    2b9a:	17 96       	adiw	r26, 0x07	; 7
    2b9c:	ed 91       	ld	r30, X+
    2b9e:	fc 91       	ld	r31, X
    2ba0:	18 97       	sbiw	r26, 0x08	; 8
    2ba2:	30 97       	sbiw	r30, 0x00	; 0
    2ba4:	d1 f0       	breq	.+52     	; 0x2bda <udd_ep_abort+0x86>
    2ba6:	ff 20       	and	r15, r15
    2ba8:	59 f0       	breq	.+22     	; 0x2bc0 <udd_ep_abort+0x6c>
    2baa:	cc 0f       	add	r28, r28
    2bac:	dd 1f       	adc	r29, r29
    2bae:	cc 0f       	add	r28, r28
    2bb0:	dd 1f       	adc	r29, r29
    2bb2:	cc 0f       	add	r28, r28
    2bb4:	dd 1f       	adc	r29, r29
    2bb6:	c4 50       	subi	r28, 0x04	; 4
    2bb8:	dd 4d       	sbci	r29, 0xDD	; 221
    2bba:	6a a1       	ldd	r22, Y+34	; 0x22
    2bbc:	7b a1       	ldd	r23, Y+35	; 0x23
    2bbe:	0a c0       	rjmp	.+20     	; 0x2bd4 <udd_ep_abort+0x80>
    2bc0:	cc 0f       	add	r28, r28
    2bc2:	dd 1f       	adc	r29, r29
    2bc4:	cc 0f       	add	r28, r28
    2bc6:	dd 1f       	adc	r29, r29
    2bc8:	cc 0f       	add	r28, r28
    2bca:	dd 1f       	adc	r29, r29
    2bcc:	c4 50       	subi	r28, 0x04	; 4
    2bce:	dd 4d       	sbci	r29, 0xDD	; 221
    2bd0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2bd2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2bd4:	41 2f       	mov	r20, r17
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	09 95       	icall
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	ff 90       	pop	r15
    2be4:	08 95       	ret

00002be6 <udd_ep_free>:
    2be6:	cf 93       	push	r28
    2be8:	c8 2f       	mov	r28, r24
    2bea:	b4 df       	rcall	.-152    	; 0x2b54 <udd_ep_abort>
    2bec:	ec 2f       	mov	r30, r28
    2bee:	ef 70       	andi	r30, 0x0F	; 15
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	ee 0f       	add	r30, r30
    2bf4:	ff 1f       	adc	r31, r31
    2bf6:	8c 2f       	mov	r24, r28
    2bf8:	cc 0f       	add	r28, r28
    2bfa:	99 0b       	sbc	r25, r25
    2bfc:	88 27       	eor	r24, r24
    2bfe:	99 0f       	add	r25, r25
    2c00:	88 1f       	adc	r24, r24
    2c02:	99 27       	eor	r25, r25
    2c04:	e8 0f       	add	r30, r24
    2c06:	f9 1f       	adc	r31, r25
    2c08:	ee 0f       	add	r30, r30
    2c0a:	ff 1f       	adc	r31, r31
    2c0c:	ee 0f       	add	r30, r30
    2c0e:	ff 1f       	adc	r31, r31
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	e4 50       	subi	r30, 0x04	; 4
    2c16:	fd 4d       	sbci	r31, 0xDD	; 221
    2c18:	15 8e       	std	Z+29, r1	; 0x1d
    2c1a:	cf 91       	pop	r28
    2c1c:	08 95       	ret

00002c1e <udd_ep_set_halt>:
    2c1e:	0f 93       	push	r16
    2c20:	e8 2f       	mov	r30, r24
    2c22:	ef 70       	andi	r30, 0x0F	; 15
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	ee 0f       	add	r30, r30
    2c28:	ff 1f       	adc	r31, r31
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	08 2e       	mov	r0, r24
    2c2e:	00 0c       	add	r0, r0
    2c30:	33 0b       	sbc	r19, r19
    2c32:	22 27       	eor	r18, r18
    2c34:	33 0f       	add	r19, r19
    2c36:	22 1f       	adc	r18, r18
    2c38:	33 27       	eor	r19, r19
    2c3a:	e2 0f       	add	r30, r18
    2c3c:	f3 1f       	adc	r31, r19
    2c3e:	ee 0f       	add	r30, r30
    2c40:	ff 1f       	adc	r31, r31
    2c42:	ee 0f       	add	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	ee 0f       	add	r30, r30
    2c48:	ff 1f       	adc	r31, r31
    2c4a:	df 01       	movw	r26, r30
    2c4c:	a4 50       	subi	r26, 0x04	; 4
    2c4e:	bd 4d       	sbci	r27, 0xDD	; 221
    2c50:	5d 96       	adiw	r26, 0x1d	; 29
    2c52:	9c 91       	ld	r25, X
    2c54:	5d 97       	sbiw	r26, 0x1d	; 29
    2c56:	94 60       	ori	r25, 0x04	; 4
    2c58:	5d 96       	adiw	r26, 0x1d	; 29
    2c5a:	9c 93       	st	X, r25
    2c5c:	e8 5e       	subi	r30, 0xE8	; 232
    2c5e:	fc 4d       	sbci	r31, 0xDC	; 220
    2c60:	01 e0       	ldi	r16, 0x01	; 1
    2c62:	06 93       	lac	Z, r16
    2c64:	77 df       	rcall	.-274    	; 0x2b54 <udd_ep_abort>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2c6c:	1f 92       	push	r1
    2c6e:	0f 92       	push	r0
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	0f 92       	push	r0
    2c74:	11 24       	eor	r1, r1
    2c76:	0f 93       	push	r16
    2c78:	2f 93       	push	r18
    2c7a:	3f 93       	push	r19
    2c7c:	4f 93       	push	r20
    2c7e:	5f 93       	push	r21
    2c80:	6f 93       	push	r22
    2c82:	7f 93       	push	r23
    2c84:	8f 93       	push	r24
    2c86:	9f 93       	push	r25
    2c88:	af 93       	push	r26
    2c8a:	bf 93       	push	r27
    2c8c:	cf 93       	push	r28
    2c8e:	ef 93       	push	r30
    2c90:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2c92:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c96:	88 23       	and	r24, r24
    2c98:	44 f4       	brge	.+16     	; 0x2caa <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    2c9a:	80 e8       	ldi	r24, 0x80	; 128
    2c9c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2ca0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2ca4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2ca8:	8b c0       	rjmp	.+278    	; 0x2dc0 <__vector_125+0x154>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2caa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cae:	82 ff       	sbrs	r24, 2
    2cb0:	20 c0       	rjmp	.+64     	; 0x2cf2 <__vector_125+0x86>
		udd_ack_underflow_event();
    2cb2:	84 e0       	ldi	r24, 0x04	; 4
    2cb4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2cb8:	80 91 20 23 	lds	r24, 0x2320	; 0x802320 <udd_sram+0x24>
    2cbc:	86 ff       	sbrs	r24, 6
    2cbe:	80 c0       	rjmp	.+256    	; 0x2dc0 <__vector_125+0x154>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2cc0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2cc4:	81 fd       	sbrc	r24, 1
    2cc6:	7c c0       	rjmp	.+248    	; 0x2dc0 <__vector_125+0x154>
    2cc8:	38 db       	rcall	.-2448   	; 0x233a <udd_ctrl_interrupt_tc_setup>
    2cca:	81 11       	cpse	r24, r1
    2ccc:	79 c0       	rjmp	.+242    	; 0x2dc0 <__vector_125+0x154>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2cce:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	11 f4       	brne	.+4      	; 0x2cda <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2cd6:	6e da       	rcall	.-2852   	; 0x21b4 <udd_ctrl_send_zlp_in>
    2cd8:	73 c0       	rjmp	.+230    	; 0x2dc0 <__vector_125+0x154>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2cda:	84 30       	cpi	r24, 0x04	; 4
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <__vector_125+0x74>
    2cde:	70 c0       	rjmp	.+224    	; 0x2dc0 <__vector_125+0x154>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2ce0:	e1 e2       	ldi	r30, 0x21	; 33
    2ce2:	f3 e2       	ldi	r31, 0x23	; 35
    2ce4:	04 e0       	ldi	r16, 0x04	; 4
    2ce6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2ce8:	e9 e1       	ldi	r30, 0x19	; 25
    2cea:	f3 e2       	ldi	r31, 0x23	; 35
    2cec:	04 e0       	ldi	r16, 0x04	; 4
    2cee:	05 93       	las	Z, r16
    2cf0:	67 c0       	rjmp	.+206    	; 0x2dc0 <__vector_125+0x154>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2cf2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cf6:	81 ff       	sbrs	r24, 1
    2cf8:	5e c0       	rjmp	.+188    	; 0x2db6 <__vector_125+0x14a>
		udd_ack_overflow_event();
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2d00:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <udd_sram+0x1c>
    2d04:	86 ff       	sbrs	r24, 6
    2d06:	5c c0       	rjmp	.+184    	; 0x2dc0 <__vector_125+0x154>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2d08:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2d0c:	81 fd       	sbrc	r24, 1
    2d0e:	58 c0       	rjmp	.+176    	; 0x2dc0 <__vector_125+0x154>
    2d10:	14 db       	rcall	.-2520   	; 0x233a <udd_ctrl_interrupt_tc_setup>
    2d12:	81 11       	cpse	r24, r1
    2d14:	55 c0       	rjmp	.+170    	; 0x2dc0 <__vector_125+0x154>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2d16:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2d1a:	82 30       	cpi	r24, 0x02	; 2
    2d1c:	41 f4       	brne	.+16     	; 0x2d2e <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d1e:	84 e0       	ldi	r24, 0x04	; 4
    2d20:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2d24:	e8 e1       	ldi	r30, 0x18	; 24
    2d26:	f3 e2       	ldi	r31, 0x23	; 35
    2d28:	02 e0       	ldi	r16, 0x02	; 2
    2d2a:	06 93       	lac	Z, r16
    2d2c:	49 c0       	rjmp	.+146    	; 0x2dc0 <__vector_125+0x154>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2d2e:	83 30       	cpi	r24, 0x03	; 3
    2d30:	09 f0       	breq	.+2      	; 0x2d34 <__vector_125+0xc8>
    2d32:	46 c0       	rjmp	.+140    	; 0x2dc0 <__vector_125+0x154>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2d34:	e1 e2       	ldi	r30, 0x21	; 33
    2d36:	f3 e2       	ldi	r31, 0x23	; 35
    2d38:	04 e0       	ldi	r16, 0x04	; 4
    2d3a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2d3c:	e9 e1       	ldi	r30, 0x19	; 25
    2d3e:	f3 e2       	ldi	r31, 0x23	; 35
    2d40:	04 e0       	ldi	r16, 0x04	; 4
    2d42:	05 93       	las	Z, r16
    2d44:	3d c0       	rjmp	.+122    	; 0x2dc0 <__vector_125+0x154>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2d46:	80 e1       	ldi	r24, 0x10	; 16
    2d48:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2d4c:	c1 e0       	ldi	r28, 0x01	; 1
			udd_ep_abort(i);
    2d4e:	8c 2f       	mov	r24, r28
    2d50:	01 df       	rcall	.-510    	; 0x2b54 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2d52:	8c 2f       	mov	r24, r28
    2d54:	80 68       	ori	r24, 0x80	; 128
    2d56:	fe de       	rcall	.-516    	; 0x2b54 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2d58:	cf 5f       	subi	r28, 0xFF	; 255
    2d5a:	c6 30       	cpi	r28, 0x06	; 6
    2d5c:	c1 f7       	brne	.-16     	; 0x2d4e <__vector_125+0xe2>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2d5e:	0e 94 25 0c 	call	0x184a	; 0x184a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2d62:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2d66:	ec ef       	ldi	r30, 0xFC	; 252
    2d68:	f2 e2       	ldi	r31, 0x22	; 34
    2d6a:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
    2d6c:	96 e0       	ldi	r25, 0x06	; 6
    2d6e:	94 8f       	std	Z+28, r25	; 0x1c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2d70:	83 e4       	ldi	r24, 0x43	; 67
    2d72:	85 8f       	std	Z+29, r24	; 0x1d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2d74:	15 a2       	std	Z+37, r1	; 0x25
	udd_endpoint_clear_status(ep_ctrl);
    2d76:	94 a3       	std	Z+36, r25	; 0x24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2d78:	85 a3       	std	Z+37, r24	; 0x25
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2d7a:	85 eb       	ldi	r24, 0xB5	; 181
    2d7c:	92 e2       	ldi	r25, 0x22	; 34
    2d7e:	80 a3       	std	Z+32, r24	; 0x20
    2d80:	91 a3       	std	Z+33, r25	; 0x21
		// Reset endpoint control management
		udd_ctrl_init();
    2d82:	e3 d9       	rcall	.-3130   	; 0x214a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2d84:	1d c0       	rjmp	.+58     	; 0x2dc0 <__vector_125+0x154>
	}

	if (udd_is_suspend_event()) {
    2d86:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d8a:	86 ff       	sbrs	r24, 6
    2d8c:	08 c0       	rjmp	.+16     	; 0x2d9e <__vector_125+0x132>
		udd_ack_suspend_event();
    2d8e:	80 e4       	ldi	r24, 0x40	; 64
    2d90:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	b0 d9       	rcall	.-3232   	; 0x20f8 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2d98:	0e 94 56 04 	call	0x8ac	; 0x8ac <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2d9c:	11 c0       	rjmp	.+34     	; 0x2dc0 <__vector_125+0x154>
	}

	if (udd_is_resume_event()) {
    2d9e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2da2:	85 ff       	sbrs	r24, 5
    2da4:	0d c0       	rjmp	.+26     	; 0x2dc0 <__vector_125+0x154>
		udd_ack_resume_event();
    2da6:	80 e2       	ldi	r24, 0x20	; 32
    2da8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	a4 d9       	rcall	.-3256   	; 0x20f8 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2db0:	0e 94 57 04 	call	0x8ae	; 0x8ae <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2db4:	05 c0       	rjmp	.+10     	; 0x2dc0 <__vector_125+0x154>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2db6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2dba:	84 fd       	sbrc	r24, 4
    2dbc:	c4 cf       	rjmp	.-120    	; 0x2d46 <__vector_125+0xda>
    2dbe:	e3 cf       	rjmp	.-58     	; 0x2d86 <__vector_125+0x11a>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2dc0:	ff 91       	pop	r31
    2dc2:	ef 91       	pop	r30
    2dc4:	cf 91       	pop	r28
    2dc6:	bf 91       	pop	r27
    2dc8:	af 91       	pop	r26
    2dca:	9f 91       	pop	r25
    2dcc:	8f 91       	pop	r24
    2dce:	7f 91       	pop	r23
    2dd0:	6f 91       	pop	r22
    2dd2:	5f 91       	pop	r21
    2dd4:	4f 91       	pop	r20
    2dd6:	3f 91       	pop	r19
    2dd8:	2f 91       	pop	r18
    2dda:	0f 91       	pop	r16
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	0f 90       	pop	r0
    2de2:	1f 90       	pop	r1
    2de4:	18 95       	reti

00002de6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2de6:	1f 92       	push	r1
    2de8:	0f 92       	push	r0
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	0f 92       	push	r0
    2dee:	11 24       	eor	r1, r1
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	2f 93       	push	r18
    2df6:	3f 93       	push	r19
    2df8:	4f 93       	push	r20
    2dfa:	5f 93       	push	r21
    2dfc:	6f 93       	push	r22
    2dfe:	7f 93       	push	r23
    2e00:	8f 93       	push	r24
    2e02:	9f 93       	push	r25
    2e04:	af 93       	push	r26
    2e06:	bf 93       	push	r27
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	ef 93       	push	r30
    2e0e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2e10:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2e14:	81 fd       	sbrc	r24, 1
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2e18:	90 da       	rcall	.-2784   	; 0x233a <udd_ctrl_interrupt_tc_setup>
    2e1a:	81 11       	cpse	r24, r1
    2e1c:	c1 c0       	rjmp	.+386    	; 0x2fa0 <__vector_126+0x1ba>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2e24:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2e28:	81 95       	neg	r24
    2e2a:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2e2c:	e8 e1       	ldi	r30, 0x18	; 24
    2e2e:	f3 e2       	ldi	r31, 0x23	; 35
    2e30:	e8 1b       	sub	r30, r24
    2e32:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2e34:	20 81       	ld	r18, Z
    2e36:	31 81       	ldd	r19, Z+1	; 0x01
    2e38:	28 51       	subi	r18, 0x18	; 24
    2e3a:	33 42       	sbci	r19, 0x23	; 35
    2e3c:	36 95       	lsr	r19
    2e3e:	27 95       	ror	r18
    2e40:	36 95       	lsr	r19
    2e42:	27 95       	ror	r18
    2e44:	36 95       	lsr	r19
    2e46:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2e48:	82 2f       	mov	r24, r18
    2e4a:	86 95       	lsr	r24
    2e4c:	20 fd       	sbrc	r18, 0
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <__vector_126+0x6e>
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <__vector_126+0x70>
    2e54:	90 e8       	ldi	r25, 0x80	; 128
    2e56:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2e58:	e8 2f       	mov	r30, r24
    2e5a:	ef 70       	andi	r30, 0x0F	; 15
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	ee 0f       	add	r30, r30
    2e60:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2e62:	28 2f       	mov	r18, r24
    2e64:	08 2e       	mov	r0, r24
    2e66:	00 0c       	add	r0, r0
    2e68:	33 0b       	sbc	r19, r19
    2e6a:	22 27       	eor	r18, r18
    2e6c:	33 0f       	add	r19, r19
    2e6e:	22 1f       	adc	r18, r18
    2e70:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2e72:	e2 0f       	add	r30, r18
    2e74:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2e76:	df 01       	movw	r26, r30
    2e78:	aa 0f       	add	r26, r26
    2e7a:	bb 1f       	adc	r27, r27
    2e7c:	aa 0f       	add	r26, r26
    2e7e:	bb 1f       	adc	r27, r27
    2e80:	aa 0f       	add	r26, r26
    2e82:	bb 1f       	adc	r27, r27
    2e84:	a4 50       	subi	r26, 0x04	; 4
    2e86:	bd 4d       	sbci	r27, 0xDD	; 221
    2e88:	5c 96       	adiw	r26, 0x1c	; 28
    2e8a:	9c 91       	ld	r25, X
    2e8c:	95 ff       	sbrs	r25, 5
    2e8e:	88 c0       	rjmp	.+272    	; 0x2fa0 <__vector_126+0x1ba>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2e90:	ee 0f       	add	r30, r30
    2e92:	ff 1f       	adc	r31, r31
    2e94:	ee 0f       	add	r30, r30
    2e96:	ff 1f       	adc	r31, r31
    2e98:	ee 0f       	add	r30, r30
    2e9a:	ff 1f       	adc	r31, r31
    2e9c:	e8 5e       	subi	r30, 0xE8	; 232
    2e9e:	fc 4d       	sbci	r31, 0xDC	; 220
    2ea0:	00 e2       	ldi	r16, 0x20	; 32
    2ea2:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2ea4:	81 11       	cpse	r24, r1
    2ea6:	77 c0       	rjmp	.+238    	; 0x2f96 <__vector_126+0x1b0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ea8:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2eac:	84 30       	cpi	r24, 0x04	; 4
    2eae:	19 f4       	brne	.+6      	; 0x2eb6 <__vector_126+0xd0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2eb0:	8f d9       	rcall	.-3298   	; 0x21d0 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2eb2:	4b d9       	rcall	.-3434   	; 0x214a <udd_ctrl_init>
    2eb4:	75 c0       	rjmp	.+234    	; 0x2fa0 <__vector_126+0x1ba>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2eb6:	00 91 1a 23 	lds	r16, 0x231A	; 0x80231a <udd_sram+0x1e>
    2eba:	10 91 1b 23 	lds	r17, 0x231B	; 0x80231b <udd_sram+0x1f>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2ebe:	80 91 c4 25 	lds	r24, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2ec2:	90 91 c5 25 	lds	r25, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2ec6:	c0 91 f5 22 	lds	r28, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2eca:	d0 91 f6 22 	lds	r29, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2ece:	9e 01       	movw	r18, r28
    2ed0:	20 0f       	add	r18, r16
    2ed2:	31 1f       	adc	r19, r17
    2ed4:	82 17       	cp	r24, r18
    2ed6:	93 07       	cpc	r25, r19
    2ed8:	18 f4       	brcc	.+6      	; 0x2ee0 <__vector_126+0xfa>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2eda:	8c 01       	movw	r16, r24
    2edc:	0c 1b       	sub	r16, r28
    2ede:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2ee0:	80 91 c2 25 	lds	r24, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    2ee4:	90 91 c3 25 	lds	r25, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    2ee8:	a8 01       	movw	r20, r16
    2eea:	65 eb       	ldi	r22, 0xB5	; 181
    2eec:	72 e2       	ldi	r23, 0x22	; 34
    2eee:	8c 0f       	add	r24, r28
    2ef0:	9d 1f       	adc	r25, r29
    2ef2:	98 d0       	rcall	.+304    	; 0x3024 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2ef4:	c0 0f       	add	r28, r16
    2ef6:	d1 1f       	adc	r29, r17
    2ef8:	c0 93 f5 22 	sts	0x22F5, r28	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2efc:	d0 93 f6 22 	sts	0x22F6, r29	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2f00:	00 34       	cpi	r16, 0x40	; 64
    2f02:	11 05       	cpc	r17, r1
    2f04:	69 f4       	brne	.+26     	; 0x2f20 <__vector_126+0x13a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2f06:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2f0a:	90 91 f8 22 	lds	r25, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2f0e:	8c 0f       	add	r24, r28
    2f10:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2f12:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    2f16:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    2f1a:	82 17       	cp	r24, r18
    2f1c:	93 07       	cpc	r25, r19
    2f1e:	80 f0       	brcs	.+32     	; 0x2f40 <__vector_126+0x15a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2f20:	ea eb       	ldi	r30, 0xBA	; 186
    2f22:	f5 e2       	ldi	r31, 0x25	; 37
    2f24:	c2 87       	std	Z+10, r28	; 0x0a
    2f26:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2f28:	06 84       	ldd	r0, Z+14	; 0x0e
    2f2a:	f7 85       	ldd	r31, Z+15	; 0x0f
    2f2c:	e0 2d       	mov	r30, r0
    2f2e:	30 97       	sbiw	r30, 0x00	; 0
    2f30:	29 f0       	breq	.+10     	; 0x2f3c <__vector_126+0x156>
			if (!udd_g_ctrlreq.over_under_run()) {
    2f32:	09 95       	icall
    2f34:	81 11       	cpse	r24, r1
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <__vector_126+0x156>
				// Stall ZLP
				udd_ctrl_stall_data();
    2f38:	2f d9       	rcall	.-3490   	; 0x2198 <udd_ctrl_stall_data>
    2f3a:	32 c0       	rjmp	.+100    	; 0x2fa0 <__vector_126+0x1ba>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2f3c:	3b d9       	rcall	.-3466   	; 0x21b4 <udd_ctrl_send_zlp_in>
    2f3e:	30 c0       	rjmp	.+96     	; 0x2fa0 <__vector_126+0x1ba>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2f40:	80 91 c4 25 	lds	r24, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2f44:	90 91 c5 25 	lds	r25, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2f48:	c8 17       	cp	r28, r24
    2f4a:	d9 07       	cpc	r29, r25
    2f4c:	f9 f4       	brne	.+62     	; 0x2f8c <__vector_126+0x1a6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2f4e:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0xe>
    2f52:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0xf>
    2f56:	30 97       	sbiw	r30, 0x00	; 0
    2f58:	11 f4       	brne	.+4      	; 0x2f5e <__vector_126+0x178>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2f5a:	1e d9       	rcall	.-3524   	; 0x2198 <udd_ctrl_stall_data>
    2f5c:	21 c0       	rjmp	.+66     	; 0x2fa0 <__vector_126+0x1ba>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2f5e:	09 95       	icall
    2f60:	81 11       	cpse	r24, r1
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <__vector_126+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2f64:	19 d9       	rcall	.-3534   	; 0x2198 <udd_ctrl_stall_data>
    2f66:	1c c0       	rjmp	.+56     	; 0x2fa0 <__vector_126+0x1ba>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2f68:	20 91 f7 22 	lds	r18, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2f6c:	30 91 f8 22 	lds	r19, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2f70:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2f74:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2f78:	82 0f       	add	r24, r18
    2f7a:	93 1f       	adc	r25, r19
    2f7c:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2f80:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2f84:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2f88:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2f8c:	e8 e1       	ldi	r30, 0x18	; 24
    2f8e:	f3 e2       	ldi	r31, 0x23	; 35
    2f90:	02 e0       	ldi	r16, 0x02	; 2
    2f92:	06 93       	lac	Z, r16
    2f94:	05 c0       	rjmp	.+10     	; 0x2fa0 <__vector_126+0x1ba>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2f96:	80 38       	cpi	r24, 0x80	; 128
    2f98:	11 f4       	brne	.+4      	; 0x2f9e <__vector_126+0x1b8>
		udd_ctrl_in_sent();
    2f9a:	22 d9       	rcall	.-3516   	; 0x21e0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2f9c:	01 c0       	rjmp	.+2      	; 0x2fa0 <__vector_126+0x1ba>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2f9e:	3c da       	rcall	.-2952   	; 0x2418 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2fa0:	ff 91       	pop	r31
    2fa2:	ef 91       	pop	r30
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	bf 91       	pop	r27
    2faa:	af 91       	pop	r26
    2fac:	9f 91       	pop	r25
    2fae:	8f 91       	pop	r24
    2fb0:	7f 91       	pop	r23
    2fb2:	6f 91       	pop	r22
    2fb4:	5f 91       	pop	r21
    2fb6:	4f 91       	pop	r20
    2fb8:	3f 91       	pop	r19
    2fba:	2f 91       	pop	r18
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	0f 90       	pop	r0
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	0f 90       	pop	r0
    2fc6:	1f 90       	pop	r1
    2fc8:	18 95       	reti

00002fca <__udivmodhi4>:
    2fca:	aa 1b       	sub	r26, r26
    2fcc:	bb 1b       	sub	r27, r27
    2fce:	51 e1       	ldi	r21, 0x11	; 17
    2fd0:	07 c0       	rjmp	.+14     	; 0x2fe0 <__udivmodhi4_ep>

00002fd2 <__udivmodhi4_loop>:
    2fd2:	aa 1f       	adc	r26, r26
    2fd4:	bb 1f       	adc	r27, r27
    2fd6:	a6 17       	cp	r26, r22
    2fd8:	b7 07       	cpc	r27, r23
    2fda:	10 f0       	brcs	.+4      	; 0x2fe0 <__udivmodhi4_ep>
    2fdc:	a6 1b       	sub	r26, r22
    2fde:	b7 0b       	sbc	r27, r23

00002fe0 <__udivmodhi4_ep>:
    2fe0:	88 1f       	adc	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	5a 95       	dec	r21
    2fe6:	a9 f7       	brne	.-22     	; 0x2fd2 <__udivmodhi4_loop>
    2fe8:	80 95       	com	r24
    2fea:	90 95       	com	r25
    2fec:	bc 01       	movw	r22, r24
    2fee:	cd 01       	movw	r24, r26
    2ff0:	08 95       	ret

00002ff2 <__divmodhi4>:
    2ff2:	97 fb       	bst	r25, 7
    2ff4:	07 2e       	mov	r0, r23
    2ff6:	16 f4       	brtc	.+4      	; 0x2ffc <__divmodhi4+0xa>
    2ff8:	00 94       	com	r0
    2ffa:	06 d0       	rcall	.+12     	; 0x3008 <__divmodhi4_neg1>
    2ffc:	77 fd       	sbrc	r23, 7
    2ffe:	08 d0       	rcall	.+16     	; 0x3010 <__divmodhi4_neg2>
    3000:	e4 df       	rcall	.-56     	; 0x2fca <__udivmodhi4>
    3002:	07 fc       	sbrc	r0, 7
    3004:	05 d0       	rcall	.+10     	; 0x3010 <__divmodhi4_neg2>
    3006:	3e f4       	brtc	.+14     	; 0x3016 <__divmodhi4_exit>

00003008 <__divmodhi4_neg1>:
    3008:	90 95       	com	r25
    300a:	81 95       	neg	r24
    300c:	9f 4f       	sbci	r25, 0xFF	; 255
    300e:	08 95       	ret

00003010 <__divmodhi4_neg2>:
    3010:	70 95       	com	r23
    3012:	61 95       	neg	r22
    3014:	7f 4f       	sbci	r23, 0xFF	; 255

00003016 <__divmodhi4_exit>:
    3016:	08 95       	ret

00003018 <__tablejump2__>:
    3018:	ee 0f       	add	r30, r30
    301a:	ff 1f       	adc	r31, r31
    301c:	05 90       	lpm	r0, Z+
    301e:	f4 91       	lpm	r31, Z
    3020:	e0 2d       	mov	r30, r0
    3022:	09 94       	ijmp

00003024 <memcpy>:
    3024:	fb 01       	movw	r30, r22
    3026:	dc 01       	movw	r26, r24
    3028:	02 c0       	rjmp	.+4      	; 0x302e <memcpy+0xa>
    302a:	01 90       	ld	r0, Z+
    302c:	0d 92       	st	X+, r0
    302e:	41 50       	subi	r20, 0x01	; 1
    3030:	50 40       	sbci	r21, 0x00	; 0
    3032:	d8 f7       	brcc	.-10     	; 0x302a <memcpy+0x6>
    3034:	08 95       	ret

00003036 <_exit>:
    3036:	f8 94       	cli

00003038 <__stop_program>:
    3038:	ff cf       	rjmp	.-2      	; 0x3038 <__stop_program>
