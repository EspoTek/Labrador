
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00802000  00002f0e  00002fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000f04  008020ac  008020ac  00003050  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003080  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000510  00000000  00000000  000030c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c5aa  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f57  00000000  00000000  0000fb7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000983b  00000000  00000000  00011ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b88  00000000  00000000  0001b30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000302af  00000000  00000000  0001be94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000253a  00000000  00000000  0004c143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0004e680  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be5c  00000000  00000000  0004eab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__vector_6>
      1c:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_7>
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c1       	rjmp	.+586    	; 0x274 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c1       	rjmp	.+534    	; 0x274 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_24>
      64:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_25>
      68:	05 c1       	rjmp	.+522    	; 0x274 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop
      98:	ed c0       	rjmp	.+474    	; 0x274 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	eb c0       	rjmp	.+470    	; 0x274 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e9 c0       	rjmp	.+466    	; 0x274 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e7 c0       	rjmp	.+462    	; 0x274 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e5 c0       	rjmp	.+458    	; 0x274 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e3 c0       	rjmp	.+454    	; 0x274 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e1 c0       	rjmp	.+450    	; 0x274 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	df c0       	rjmp	.+446    	; 0x274 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dd c0       	rjmp	.+442    	; 0x274 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c0       	rjmp	.+438    	; 0x274 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d9 c0       	rjmp	.+434    	; 0x274 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d7 c0       	rjmp	.+430    	; 0x274 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d5 c0       	rjmp	.+426    	; 0x274 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d3 c0       	rjmp	.+422    	; 0x274 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d1 c0       	rjmp	.+418    	; 0x274 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cf c0       	rjmp	.+414    	; 0x274 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cd c0       	rjmp	.+410    	; 0x274 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cb c0       	rjmp	.+406    	; 0x274 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c9 c0       	rjmp	.+402    	; 0x274 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c7 c0       	rjmp	.+398    	; 0x274 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c5 c0       	rjmp	.+394    	; 0x274 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c3 c0       	rjmp	.+390    	; 0x274 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c1 c0       	rjmp	.+386    	; 0x274 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bf c0       	rjmp	.+382    	; 0x274 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	bd c0       	rjmp	.+378    	; 0x274 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	bb c0       	rjmp	.+374    	; 0x274 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b9 c0       	rjmp	.+370    	; 0x274 <__bad_interrupt>
     102:	00 00       	nop
     104:	b7 c0       	rjmp	.+366    	; 0x274 <__bad_interrupt>
     106:	00 00       	nop
     108:	b5 c0       	rjmp	.+362    	; 0x274 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b3 c0       	rjmp	.+358    	; 0x274 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b1 c0       	rjmp	.+354    	; 0x274 <__bad_interrupt>
     112:	00 00       	nop
     114:	af c0       	rjmp	.+350    	; 0x274 <__bad_interrupt>
     116:	00 00       	nop
     118:	ad c0       	rjmp	.+346    	; 0x274 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	db c4       	rjmp	.+2486   	; 0xad4 <__vector_71>
     11e:	00 00       	nop
     120:	a9 c0       	rjmp	.+338    	; 0x274 <__bad_interrupt>
     122:	00 00       	nop
     124:	a7 c0       	rjmp	.+334    	; 0x274 <__bad_interrupt>
     126:	00 00       	nop
     128:	a5 c0       	rjmp	.+330    	; 0x274 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a3 c0       	rjmp	.+326    	; 0x274 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a1 c0       	rjmp	.+322    	; 0x274 <__bad_interrupt>
     132:	00 00       	nop
     134:	9f c0       	rjmp	.+318    	; 0x274 <__bad_interrupt>
     136:	00 00       	nop
     138:	9d c0       	rjmp	.+314    	; 0x274 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	9b c0       	rjmp	.+310    	; 0x274 <__bad_interrupt>
     13e:	00 00       	nop
     140:	99 c0       	rjmp	.+306    	; 0x274 <__bad_interrupt>
     142:	00 00       	nop
     144:	97 c0       	rjmp	.+302    	; 0x274 <__bad_interrupt>
     146:	00 00       	nop
     148:	95 c0       	rjmp	.+298    	; 0x274 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_83>
     150:	91 c0       	rjmp	.+290    	; 0x274 <__bad_interrupt>
     152:	00 00       	nop
     154:	8f c0       	rjmp	.+286    	; 0x274 <__bad_interrupt>
     156:	00 00       	nop
     158:	8d c0       	rjmp	.+282    	; 0x274 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	8b c0       	rjmp	.+278    	; 0x274 <__bad_interrupt>
     15e:	00 00       	nop
     160:	89 c0       	rjmp	.+274    	; 0x274 <__bad_interrupt>
     162:	00 00       	nop
     164:	87 c0       	rjmp	.+270    	; 0x274 <__bad_interrupt>
     166:	00 00       	nop
     168:	85 c0       	rjmp	.+266    	; 0x274 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	83 c0       	rjmp	.+262    	; 0x274 <__bad_interrupt>
     16e:	00 00       	nop
     170:	81 c0       	rjmp	.+258    	; 0x274 <__bad_interrupt>
     172:	00 00       	nop
     174:	7f c0       	rjmp	.+254    	; 0x274 <__bad_interrupt>
     176:	00 00       	nop
     178:	7d c0       	rjmp	.+250    	; 0x274 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	7b c0       	rjmp	.+246    	; 0x274 <__bad_interrupt>
     17e:	00 00       	nop
     180:	79 c0       	rjmp	.+242    	; 0x274 <__bad_interrupt>
     182:	00 00       	nop
     184:	77 c0       	rjmp	.+238    	; 0x274 <__bad_interrupt>
     186:	00 00       	nop
     188:	75 c0       	rjmp	.+234    	; 0x274 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	73 c0       	rjmp	.+230    	; 0x274 <__bad_interrupt>
     18e:	00 00       	nop
     190:	71 c0       	rjmp	.+226    	; 0x274 <__bad_interrupt>
     192:	00 00       	nop
     194:	6f c0       	rjmp	.+222    	; 0x274 <__bad_interrupt>
     196:	00 00       	nop
     198:	6d c0       	rjmp	.+218    	; 0x274 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	6b c0       	rjmp	.+214    	; 0x274 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	69 c0       	rjmp	.+210    	; 0x274 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	67 c0       	rjmp	.+206    	; 0x274 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	65 c0       	rjmp	.+202    	; 0x274 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	63 c0       	rjmp	.+198    	; 0x274 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5f c0       	rjmp	.+190    	; 0x274 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5d c0       	rjmp	.+186    	; 0x274 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	5b c0       	rjmp	.+182    	; 0x274 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	59 c0       	rjmp	.+178    	; 0x274 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	57 c0       	rjmp	.+174    	; 0x274 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	55 c0       	rjmp	.+170    	; 0x274 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	53 c0       	rjmp	.+166    	; 0x274 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	51 c0       	rjmp	.+162    	; 0x274 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4f c0       	rjmp	.+158    	; 0x274 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4d c0       	rjmp	.+154    	; 0x274 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	4b c0       	rjmp	.+150    	; 0x274 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	49 c0       	rjmp	.+146    	; 0x274 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	47 c0       	rjmp	.+142    	; 0x274 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	45 c0       	rjmp	.+138    	; 0x274 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	43 c0       	rjmp	.+134    	; 0x274 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	41 c0       	rjmp	.+130    	; 0x274 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__vector_125>
     1f8:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__vector_126>
     1fc:	04 04       	cpc	r0, r4
     1fe:	06 04       	cpc	r0, r6
     200:	08 04       	cpc	r0, r8
     202:	0a 04       	cpc	r0, r10
     204:	0c 04       	cpc	r0, r12
     206:	0e 04       	cpc	r0, r14
     208:	10 04       	cpc	r1, r0
     20a:	12 04       	cpc	r1, r2
     20c:	8d 0c       	add	r8, r13
     20e:	b2 0c       	add	r11, r2
     210:	d5 0c       	add	r13, r5
     212:	f8 0c       	add	r15, r8
     214:	01 0d       	add	r16, r1
     216:	06 0d       	add	r16, r6
     218:	5c 0d       	add	r21, r12
     21a:	61 0d       	add	r22, r1
     21c:	68 0d       	add	r22, r8
     21e:	12 0d       	add	r17, r2
     220:	1c 0d       	add	r17, r12
     222:	26 0d       	add	r18, r6
     224:	34 0d       	add	r19, r4
     226:	37 0d       	add	r19, r7
     228:	3a 0d       	add	r19, r10
     22a:	45 0d       	add	r20, r5
     22c:	50 0d       	add	r21, r0
     22e:	d4 10       	cpse	r13, r4
     230:	d7 10       	cpse	r13, r7
     232:	da 10       	cpse	r13, r10
     234:	dd 10       	cpse	r13, r13
     236:	e0 10       	cpse	r14, r0
     238:	e3 10       	cpse	r14, r3
     23a:	e6 10       	cpse	r14, r6

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df e2       	ldi	r29, 0x2F	; 47
     246:	de bf       	out	0x3e, r29	; 62

00000248 <__do_copy_data>:
     248:	10 e2       	ldi	r17, 0x20	; 32
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	ee e0       	ldi	r30, 0x0E	; 14
     250:	ff e2       	ldi	r31, 0x2F	; 47
     252:	02 c0       	rjmp	.+4      	; 0x258 <__do_copy_data+0x10>
     254:	05 90       	lpm	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	ac 3a       	cpi	r26, 0xAC	; 172
     25a:	b1 07       	cpc	r27, r17
     25c:	d9 f7       	brne	.-10     	; 0x254 <__do_copy_data+0xc>

0000025e <__do_clear_bss>:
     25e:	2f e2       	ldi	r18, 0x2F	; 47
     260:	ac ea       	ldi	r26, 0xAC	; 172
     262:	b0 e2       	ldi	r27, 0x20	; 32
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a0 3b       	cpi	r26, 0xB0	; 176
     26a:	b2 07       	cpc	r27, r18
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>
     26e:	91 d2       	rcall	.+1314   	; 0x792 <main>
     270:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <_exit>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	8e 83       	std	Y+6, r24	; 0x06
     282:	8c e1       	ldi	r24, 0x1C	; 28
     284:	e1 d3       	rcall	.+1986   	; 0xa48 <ReadCalibrationByte>
     286:	e0 e6       	ldi	r30, 0x60	; 96
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	83 83       	std	Z+3, r24	; 0x03
     28c:	8b eb       	ldi	r24, 0xBB	; 187
     28e:	86 83       	std	Z+6, r24	; 0x06
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	85 83       	std	Z+5, r24	; 0x05
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	88 ed       	ldi	r24, 0xD8	; 216
     29a:	84 bf       	out	0x34, r24	; 52
     29c:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	88 83       	st	Y, r24
     2a4:	e0 e5       	ldi	r30, 0x50	; 80
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	81 81       	ldd	r24, Z+1	; 0x01
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	e9 f7       	brne	.-6      	; 0x2a8 <tiny_calibration_init+0x32>
     2ae:	e0 e5       	ldi	r30, 0x50	; 80
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	80 83       	st	Z, r24
     2b8:	88 e1       	ldi	r24, 0x18	; 24
     2ba:	85 83       	std	Z+5, r24	; 0x05
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	80 ff       	sbrs	r24, 0
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <tiny_calibration_init+0x46>
     2c2:	e0 e5       	ldi	r30, 0x50	; 80
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 83       	st	Z, r24
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	84 ff       	sbrs	r24, 4
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x56>
     2d2:	88 ed       	ldi	r24, 0xD8	; 216
     2d4:	84 bf       	out	0x34, r24	; 52
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <tiny_calibration_first_sof>:
     2e2:	e0 e7       	ldi	r30, 0x70	; 112
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	85 81       	ldd	r24, Z+5	; 0x05
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	85 83       	std	Z+5, r24	; 0x05
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	8f eb       	ldi	r24, 0xBF	; 191
     2f2:	9d e5       	ldi	r25, 0x5D	; 93
     2f4:	86 a3       	std	Z+38, r24	; 0x26
     2f6:	97 a3       	std	Z+39, r25	; 0x27
     2f8:	80 ee       	ldi	r24, 0xE0	; 224
     2fa:	9e e2       	ldi	r25, 0x2E	; 46
     2fc:	80 a3       	std	Z+32, r24	; 0x20
     2fe:	91 a3       	std	Z+33, r25	; 0x21
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
     304:	08 95       	ret

00000306 <tiny_calibration_maintain>:
     306:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     30a:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     30e:	81 3e       	cpi	r24, 0xE1	; 225
     310:	2e e2       	ldi	r18, 0x2E	; 46
     312:	92 07       	cpc	r25, r18
     314:	20 f0       	brcs	.+8      	; 0x31e <tiny_calibration_maintain+0x18>
     316:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <cali_value_negative_gradient>
     31a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     31e:	80 3e       	cpi	r24, 0xE0	; 224
     320:	2e e2       	ldi	r18, 0x2E	; 46
     322:	92 07       	cpc	r25, r18
     324:	20 f4       	brcc	.+8      	; 0x32e <tiny_calibration_maintain+0x28>
     326:	20 91 8f 23 	lds	r18, 0x238F	; 0x80238f <cali_value_positive_gradient>
     32a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     32e:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     332:	22 23       	and	r18, r18
     334:	31 f0       	breq	.+12     	; 0x342 <tiny_calibration_maintain+0x3c>
     336:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     340:	35 c0       	rjmp	.+106    	; 0x3ac <tiny_calibration_maintain+0xa6>
     342:	88 5f       	subi	r24, 0xF8	; 248
     344:	9a 42       	sbci	r25, 0x2A	; 42
     346:	81 3d       	cpi	r24, 0xD1	; 209
     348:	97 40       	sbci	r25, 0x07	; 7
     34a:	80 f1       	brcs	.+96     	; 0x3ac <tiny_calibration_maintain+0xa6>
     34c:	10 92 ac 20 	sts	0x20AC, r1	; 0x8020ac <__data_end>
     350:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     354:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     358:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     35c:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	a1 1d       	adc	r26, r1
     364:	b1 1d       	adc	r27, r1
     366:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <outOfRange>
     36a:	90 93 ae 20 	sts	0x20AE, r25	; 0x8020ae <outOfRange+0x1>
     36e:	a0 93 af 20 	sts	0x20AF, r26	; 0x8020af <outOfRange+0x2>
     372:	b0 93 b0 20 	sts	0x20B0, r27	; 0x8020b0 <outOfRange+0x3>
     376:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     37a:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     37e:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     382:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     386:	89 2f       	mov	r24, r25
     388:	9a 2f       	mov	r25, r26
     38a:	ab 2f       	mov	r26, r27
     38c:	bb 27       	eor	r27, r27
     38e:	ee e9       	ldi	r30, 0x9E	; 158
     390:	f3 e2       	ldi	r31, 0x23	; 35
     392:	84 8b       	std	Z+20, r24	; 0x14
     394:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     398:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     39c:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     3a0:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     3a4:	83 8b       	std	Z+19, r24	; 0x13
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3ac:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3b0:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b1 f4       	brne	.+44     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3b8:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3bc:	8f 3f       	cpi	r24, 0xFF	; 255
     3be:	91 f0       	breq	.+36     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3c0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3c4:	81 11       	cpse	r24, r1
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <tiny_calibration_maintain+0xce>
     3c8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3d2:	08 95       	ret
     3d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3dc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3e0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3e4:	08 95       	ret

000003e6 <tiny_calibration_safe_add>:
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	09 f4       	brne	.+2      	; 0x3ec <tiny_calibration_safe_add+0x6>
     3ea:	66 c0       	rjmp	.+204    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <tiny_calibration_safe_add+0xa>
     3ee:	9c 01       	movw	r18, r24
     3f0:	99 23       	and	r25, r25
     3f2:	34 f4       	brge	.+12     	; 0x400 <__FUSE_REGION_LENGTH__>
     3f4:	22 27       	eor	r18, r18
     3f6:	33 27       	eor	r19, r19
     3f8:	28 1b       	sub	r18, r24
     3fa:	39 0b       	sbc	r19, r25
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	e8 e6       	ldi	r30, 0x68	; 104
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	83 81       	ldd	r24, Z+3	; 0x03
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     40e:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     412:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     416:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     41a:	96 95       	lsr	r25
     41c:	98 2f       	mov	r25, r24
     41e:	88 27       	eor	r24, r24
     420:	97 95       	ror	r25
     422:	87 95       	ror	r24
     424:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     428:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     42c:	42 81       	ldd	r20, Z+2	; 0x02
     42e:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     432:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     436:	84 0f       	add	r24, r20
     438:	91 1d       	adc	r25, r1
     43a:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     43e:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     442:	00 00       	nop
     444:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     448:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	28 f4       	brcc	.+10     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
     452:	10 92 90 23 	sts	0x2390, r1	; 0x802390 <calTemp>
     456:	10 92 91 23 	sts	0x2391, r1	; 0x802391 <calTemp+0x1>
     45a:	08 95       	ret
     45c:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     460:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	81 15       	cp	r24, r1
     46a:	90 42       	sbci	r25, 0x20	; 32
     46c:	38 f0       	brcs	.+14     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	9f e1       	ldi	r25, 0x1F	; 31
     472:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     476:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     47a:	08 95       	ret
     47c:	55 23       	and	r21, r21
     47e:	59 f0       	breq	.+22     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     480:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     484:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     488:	82 1b       	sub	r24, r18
     48a:	93 0b       	sbc	r25, r19
     48c:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     490:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     496:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     49a:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     49e:	28 0f       	add	r18, r24
     4a0:	39 1f       	adc	r19, r25
     4a2:	20 93 90 23 	sts	0x2390, r18	; 0x802390 <calTemp>
     4a6:	30 93 91 23 	sts	0x2391, r19	; 0x802391 <calTemp+0x1>
     4aa:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     4ae:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     4b2:	8f 77       	andi	r24, 0x7F	; 127
     4b4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4b8:	08 95       	ret

000004ba <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4be:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4c2:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4c6:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4ca:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4ce:	9e 01       	movw	r18, r28
     4d0:	28 1b       	sub	r18, r24
     4d2:	39 0b       	sbc	r19, r25
     4d4:	20 93 93 23 	sts	0x2393, r18	; 0x802393 <gradient>
     4d8:	30 93 94 23 	sts	0x2394, r19	; 0x802394 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4dc:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     4e0:	81 11       	cpse	r24, r1
     4e2:	4d c0       	rjmp	.+154    	; 0x57e <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4e4:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     4e8:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     4ec:	8e 3c       	cpi	r24, 0xCE	; 206
     4ee:	9f 4f       	sbci	r25, 0xFF	; 255
     4f0:	e4 f4       	brge	.+56     	; 0x52a <tiny_calibration_find_values+0x70>
     4f2:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     4f6:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     4fa:	8b 36       	cpi	r24, 0x6B	; 107
     4fc:	9f 4f       	sbci	r25, 0xFF	; 255
     4fe:	ac f0       	brlt	.+42     	; 0x52a <tiny_calibration_find_values+0x70>
			if(inarow){
     500:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     504:	88 23       	and	r24, r24
     506:	31 f0       	breq	.+12     	; 0x514 <tiny_calibration_find_values+0x5a>
				inarow--;
     508:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     512:	35 c0       	rjmp	.+106    	; 0x57e <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     514:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     518:	80 93 92 23 	sts	0x2392, r24	; 0x802392 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 ac 20 	sts	0x20AC, r24	; 0x8020ac <__data_end>
				inarow = NUM_INAROW;
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     528:	2a c0       	rjmp	.+84     	; 0x57e <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     52a:	8c e0       	ldi	r24, 0x0C	; 12
     52c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     530:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     534:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     538:	8a 36       	cpi	r24, 0x6A	; 106
     53a:	9f 4f       	sbci	r25, 0xFF	; 255
     53c:	1c f0       	brlt	.+6      	; 0x544 <tiny_calibration_find_values+0x8a>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	02 c0       	rjmp	.+4      	; 0x548 <tiny_calibration_find_values+0x8e>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	80 93 8d 23 	sts	0x238D, r24	; 0x80238d <calChange>
     54c:	90 93 8e 23 	sts	0x238E, r25	; 0x80238e <calChange+0x1>
			calChange -= gradient / 48;
     550:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     554:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     558:	20 91 8d 23 	lds	r18, 0x238D	; 0x80238d <calChange>
     55c:	30 91 8e 23 	lds	r19, 0x238E	; 0x80238e <calChange+0x1>
     560:	60 e3       	ldi	r22, 0x30	; 48
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__divmodhi4>
     568:	26 1b       	sub	r18, r22
     56a:	37 0b       	sbc	r19, r23
     56c:	20 93 8d 23 	sts	0x238D, r18	; 0x80238d <calChange>
     570:	30 93 8e 23 	sts	0x238E, r19	; 0x80238e <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     574:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <calChange>
     578:	90 91 8e 23 	lds	r25, 0x238E	; 0x80238e <calChange+0x1>
     57c:	34 df       	rcall	.-408    	; 0x3e6 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     57e:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	29 f5       	brne	.+74     	; 0x5d0 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     586:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     58a:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     58e:	c3 97       	sbiw	r24, 0x33	; 51
     590:	94 f0       	brlt	.+36     	; 0x5b6 <tiny_calibration_find_values+0xfc>
			if(inarow){
     592:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     596:	88 23       	and	r24, r24
     598:	31 f0       	breq	.+12     	; 0x5a6 <tiny_calibration_find_values+0xec>
				inarow--;
     59a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5a4:	15 c0       	rjmp	.+42     	; 0x5d0 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5a6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5aa:	80 93 8f 23 	sts	0x238F, r24	; 0x80238f <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	80 93 ac 20 	sts	0x20AC, r24	; 0x8020ac <__data_end>
     5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5b6:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     5ba:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     5be:	87 39       	cpi	r24, 0x97	; 151
     5c0:	91 05       	cpc	r25, r1
     5c2:	1c f4       	brge	.+6      	; 0x5ca <tiny_calibration_find_values+0x110>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <tiny_calibration_find_values+0x114>
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	0b df       	rcall	.-490    	; 0x3e6 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5d0:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5d4:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5de:	86 17       	cp	r24, r22
     5e0:	97 07       	cpc	r25, r23
     5e2:	79 f0       	breq	.+30     	; 0x602 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5e4:	68 17       	cp	r22, r24
     5e6:	79 07       	cpc	r23, r25
     5e8:	28 f4       	brcc	.+10     	; 0x5f4 <magnitude_difference+0x16>
     5ea:	9c 01       	movw	r18, r24
     5ec:	26 1b       	sub	r18, r22
     5ee:	37 0b       	sbc	r19, r23
     5f0:	b9 01       	movw	r22, r18
     5f2:	09 c0       	rjmp	.+18     	; 0x606 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5f4:	86 17       	cp	r24, r22
     5f6:	97 07       	cpc	r25, r23
     5f8:	18 f4       	brcc	.+6      	; 0x600 <magnitude_difference+0x22>
     5fa:	68 1b       	sub	r22, r24
     5fc:	79 0b       	sbc	r23, r25
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <magnitude_difference+0x28>
     600:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	86 2f       	mov	r24, r22
     608:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     60a:	08 95       	ret

0000060c <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     614:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     618:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     61c:	89 2b       	or	r24, r25
     61e:	51 f0       	breq	.+20     	; 0x634 <tiny_calibration_layer2+0x28>
		layer2_counter--;
     620:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     624:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     62e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     632:	4d c0       	rjmp	.+154    	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	layer2_counter = LAYER2_INTERVAL;
     634:	80 e4       	ldi	r24, 0x40	; 64
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     63c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     640:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     644:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <tiny_calibration_layer2+0x42>
     64c:	40 c0       	rjmp	.+128    	; 0x6ce <tiny_calibration_layer2+0xc2>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     64e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     652:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	TRFCNT_temp = TRFCNT_temp % (global_mode > 5 ? PACKET_SIZE : HALFPACKET_SIZE);
     656:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <global_mode>
     65a:	26 30       	cpi	r18, 0x06	; 6
     65c:	18 f4       	brcc	.+6      	; 0x664 <tiny_calibration_layer2+0x58>
     65e:	67 e7       	ldi	r22, 0x77	; 119
     660:	71 e0       	ldi	r23, 0x01	; 1
     662:	02 c0       	rjmp	.+4      	; 0x668 <tiny_calibration_layer2+0x5c>
     664:	6e ee       	ldi	r22, 0xEE	; 238
     666:	72 e0       	ldi	r23, 0x02	; 2
     668:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__udivmodhi4>
     66c:	08 2f       	mov	r16, r24
     66e:	19 2f       	mov	r17, r25
     670:	c8 2f       	mov	r28, r24
     672:	d1 2f       	mov	r29, r17
	
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     674:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     678:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     67c:	8c 17       	cp	r24, r28
     67e:	9d 07       	cpc	r25, r29
     680:	80 f4       	brcc	.+32     	; 0x6a2 <tiny_calibration_layer2+0x96>
     682:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     686:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68a:	80 2f       	mov	r24, r16
     68c:	91 2f       	mov	r25, r17
     68e:	a7 df       	rcall	.-178    	; 0x5de <magnitude_difference>
     690:	02 97       	sbiw	r24, 0x02	; 2
     692:	38 f0       	brcs	.+14     	; 0x6a2 <tiny_calibration_layer2+0x96>
		TC_CALI.PERBUF = 24000;
     694:	80 ec       	ldi	r24, 0xC0	; 192
     696:	9d e5       	ldi	r25, 0x5D	; 93
     698:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     69c:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6a0:	16 c0       	rjmp	.+44     	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6a2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6a6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6aa:	c8 17       	cp	r28, r24
     6ac:	d9 07       	cpc	r29, r25
     6ae:	78 f4       	brcc	.+30     	; 0x6ce <tiny_calibration_layer2+0xc2>
     6b0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6b4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6b8:	80 2f       	mov	r24, r16
     6ba:	91 2f       	mov	r25, r17
     6bc:	90 df       	rcall	.-224    	; 0x5de <magnitude_difference>
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	30 f0       	brcs	.+12     	; 0x6ce <tiny_calibration_layer2+0xc2>
		TC_CALI.PERBUF = 23999;
     6c2:	8f eb       	ldi	r24, 0xBF	; 191
     6c4:	9d e5       	ldi	r25, 0x5D	; 93
     6c6:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ca:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6d8:	ac 01       	movw	r20, r24
     6da:	46 0f       	add	r20, r22
     6dc:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6de:	86 1b       	sub	r24, r22
     6e0:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6e2:	e0 e0       	ldi	r30, 0x00	; 0
     6e4:	fa e0       	ldi	r31, 0x0A	; 10
     6e6:	20 a1       	ldd	r18, Z+32	; 0x20
     6e8:	31 a1       	ldd	r19, Z+33	; 0x21
     6ea:	24 17       	cp	r18, r20
     6ec:	35 07       	cpc	r19, r21
     6ee:	d8 f7       	brcc	.-10     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
     6f0:	20 a1       	ldd	r18, Z+32	; 0x20
     6f2:	31 a1       	ldd	r19, Z+33	; 0x21
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	b0 f7       	brcc	.-20     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     6fa:	08 95       	ret

000006fc <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     6fc:	e0 e8       	ldi	r30, 0x80	; 128
     6fe:	f6 e0       	ldi	r31, 0x06	; 6
     700:	8f e0       	ldi	r24, 0x0F	; 15
     702:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	84 83       	std	Z+4, r24	; 0x04
     708:	08 95       	ret

0000070a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     70a:	08 95       	ret

0000070c <iso_callback>:
bool main_setup_in_received(void)
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	84 2f       	mov	r24, r20
	unsigned short offset = (ep - 0x81) * 125;
     712:	24 2f       	mov	r18, r20
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	21 58       	subi	r18, 0x81	; 129
     718:	31 09       	sbc	r19, r1
     71a:	9d e7       	ldi	r25, 0x7D	; 125
     71c:	92 9f       	mul	r25, r18
     71e:	b0 01       	movw	r22, r0
     720:	93 9f       	mul	r25, r19
     722:	70 0d       	add	r23, r0
     724:	11 24       	eor	r1, r1
	if (global_mode < 5){
     726:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <global_mode>
     72a:	95 30       	cpi	r25, 0x05	; 5
     72c:	d0 f4       	brcc	.+52     	; 0x762 <iso_callback+0x56>
		if(ep > 0x83) offset += 375; //Shift from range [375, 750]  to [750, 1125]  Don't do this in modes 6 and 7 because they use 750 byte long sub-buffers.
     72e:	44 38       	cpi	r20, 0x84	; 132
     730:	10 f0       	brcs	.+4      	; 0x736 <iso_callback+0x2a>
     732:	69 58       	subi	r22, 0x89	; 137
     734:	7e 4f       	sbci	r23, 0xFE	; 254
		udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + offset], 125, iso_callback);
     736:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <usb_state>
     73a:	47 e7       	ldi	r20, 0x77	; 119
     73c:	51 e0       	ldi	r21, 0x01	; 1
     73e:	94 9f       	mul	r25, r20
     740:	90 01       	movw	r18, r0
     742:	95 9f       	mul	r25, r21
     744:	30 0d       	add	r19, r0
     746:	11 24       	eor	r1, r1
     748:	62 0f       	add	r22, r18
     74a:	73 1f       	adc	r23, r19
     74c:	ab 01       	movw	r20, r22
     74e:	44 53       	subi	r20, 0x34	; 52
     750:	58 4d       	sbci	r21, 0xD8	; 216
     752:	06 e8       	ldi	r16, 0x86	; 134
     754:	13 e0       	ldi	r17, 0x03	; 3
     756:	2d e7       	ldi	r18, 0x7D	; 125
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <udd_ep_run>
     760:	15 c0       	rjmp	.+42     	; 0x78c <iso_callback+0x80>
	}
	else{
		udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE + offset], 125, iso_callback);
     762:	90 91 b9 20 	lds	r25, 0x20B9	; 0x8020b9 <usb_state>
     766:	2e ee       	ldi	r18, 0xEE	; 238
     768:	32 e0       	ldi	r19, 0x02	; 2
     76a:	92 9f       	mul	r25, r18
     76c:	a0 01       	movw	r20, r0
     76e:	93 9f       	mul	r25, r19
     770:	50 0d       	add	r21, r0
     772:	11 24       	eor	r1, r1
     774:	64 0f       	add	r22, r20
     776:	75 1f       	adc	r23, r21
     778:	ab 01       	movw	r20, r22
     77a:	44 53       	subi	r20, 0x34	; 52
     77c:	58 4d       	sbci	r21, 0xD8	; 216
     77e:	06 e8       	ldi	r16, 0x86	; 134
     780:	13 e0       	ldi	r17, 0x03	; 3
     782:	2d e7       	ldi	r18, 0x7D	; 125
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <udd_ep_run>
	}
	return;
}
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <main>:

const unsigned short firmver = FIRMWARE_VERSION_ID;


int main(void){
	irq_initialize_vectors();
     792:	87 e0       	ldi	r24, 0x07	; 7
     794:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     798:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     79a:	6d dd       	rcall	.-1318   	; 0x276 <tiny_calibration_init>
		
	board_init();
     79c:	b6 df       	rcall	.-148    	; 0x70a <board_init>
	udc_start();
     79e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <udc_start>
	tiny_dac_setup();
     7a2:	ab d1       	rcall	.+854    	; 0xafa <tiny_dac_setup>
	tiny_dma_setup();
     7a4:	ce d1       	rcall	.+924    	; 0xb42 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	57 d1       	rcall	.+686    	; 0xa5a <tiny_adc_setup>
	tiny_adc_pid_setup();
     7ac:	43 d1       	rcall	.+646    	; 0xa34 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     7ae:	8c e0       	ldi	r24, 0x0C	; 12
     7b0:	37 d1       	rcall	.+622    	; 0xa20 <tiny_adc_ch1setup>
	tiny_timer_setup();
     7b2:	c6 d5       	rcall	.+2956   	; 0x1340 <tiny_timer_setup>
	tiny_uart_setup();
     7b4:	81 d6       	rcall	.+3330   	; 0x14b8 <tiny_uart_setup>
	tiny_spi_setup();
     7b6:	9a d6       	rcall	.+3380   	; 0x14ec <tiny_spi_setup>
	tiny_dig_setup();
     7b8:	a1 df       	rcall	.-190    	; 0x6fc <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");

	strcpy(uds.header, "debug123");
     7ba:	89 e0       	ldi	r24, 0x09	; 9
     7bc:	e0 ea       	ldi	r30, 0xA0	; 160
     7be:	f0 e2       	ldi	r31, 0x20	; 32
     7c0:	ae e9       	ldi	r26, 0x9E	; 158
     7c2:	b3 e2       	ldi	r27, 0x23	; 35
     7c4:	01 90       	ld	r0, Z+
     7c6:	0d 92       	st	X+, r0
     7c8:	8a 95       	dec	r24
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <main+0x32>
	...
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			if(modeChanged){
     7e8:	80 91 b1 20 	lds	r24, 0x20B1	; 0x8020b1 <modeChanged>
     7ec:	88 23       	and	r24, r24
     7ee:	71 f3       	breq	.-36     	; 0x7cc <main+0x3a>
				switch(futureMode){
     7f0:	e0 91 ca 25 	lds	r30, 0x25CA	; 0x8025ca <futureMode>
     7f4:	8e 2f       	mov	r24, r30
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	88 30       	cpi	r24, 0x08	; 8
     7fa:	91 05       	cpc	r25, r1
     7fc:	a0 f4       	brcc	.+40     	; 0x826 <main+0x94>
     7fe:	fc 01       	movw	r30, r24
     800:	e2 50       	subi	r30, 0x02	; 2
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
     808:	c8 d1       	rcall	.+912    	; 0xb9a <tiny_dma_set_mode_0>
					break;
     80a:	0d c0       	rjmp	.+26     	; 0x826 <main+0x94>
					case 1:
					tiny_dma_set_mode_1();
     80c:	38 d2       	rcall	.+1136   	; 0xc7e <tiny_dma_set_mode_1>
					break;
     80e:	0b c0       	rjmp	.+22     	; 0x826 <main+0x94>
					case 2:
					tiny_dma_set_mode_2();
     810:	bf d2       	rcall	.+1406   	; 0xd90 <tiny_dma_set_mode_2>
					break;
     812:	09 c0       	rjmp	.+18     	; 0x826 <main+0x94>
					case 3:
					tiny_dma_set_mode_3();
     814:	43 d3       	rcall	.+1670   	; 0xe9c <tiny_dma_set_mode_3>
					break;
     816:	07 c0       	rjmp	.+14     	; 0x826 <main+0x94>
					case 4:
					tiny_dma_set_mode_4();
     818:	cf d3       	rcall	.+1950   	; 0xfb8 <tiny_dma_set_mode_4>
					break;
     81a:	05 c0       	rjmp	.+10     	; 0x826 <main+0x94>
					case 5:
					tiny_dma_set_mode_5();
     81c:	55 d4       	rcall	.+2218   	; 0x10c8 <tiny_dma_set_mode_5>
					break;
     81e:	03 c0       	rjmp	.+6      	; 0x826 <main+0x94>
					case 6:
					tiny_dma_set_mode_6();
     820:	54 d4       	rcall	.+2216   	; 0x10ca <tiny_dma_set_mode_6>
					break;
     822:	01 c0       	rjmp	.+2      	; 0x826 <main+0x94>
					case 7:
					tiny_dma_set_mode_7();
     824:	c5 d4       	rcall	.+2442   	; 0x11b0 <tiny_dma_set_mode_7>
					break;
				}
				modeChanged = 0;
     826:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <modeChanged>
     82a:	d0 cf       	rjmp	.-96     	; 0x7cc <main+0x3a>

0000082c <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     82c:	08 95       	ret

0000082e <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     82e:	08 95       	ret

00000830 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     834:	a0 e0       	ldi	r26, 0x00	; 0
     836:	b1 e0       	ldi	r27, 0x01	; 1
     838:	54 96       	adiw	r26, 0x14	; 20
     83a:	8c 91       	ld	r24, X
     83c:	54 97       	sbiw	r26, 0x14	; 20
     83e:	ee e9       	ldi	r30, 0x9E	; 158
     840:	f3 e2       	ldi	r31, 0x23	; 35
     842:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     844:	55 96       	adiw	r26, 0x15	; 21
     846:	8c 91       	ld	r24, X
     848:	55 97       	sbiw	r26, 0x15	; 21
     84a:	82 87       	std	Z+10, r24	; 0x0a
	uds.trfcntL1 = DMA.CH1.TRFCNTL;
     84c:	94 96       	adiw	r26, 0x24	; 36
     84e:	8c 91       	ld	r24, X
     850:	94 97       	sbiw	r26, 0x24	; 36
     852:	83 87       	std	Z+11, r24	; 0x0b
	uds.trfcntH1 = DMA.CH1.TRFCNTH;
     854:	95 96       	adiw	r26, 0x25	; 37
     856:	8c 91       	ld	r24, X
     858:	95 97       	sbiw	r26, 0x25	; 37
     85a:	84 87       	std	Z+12, r24	; 0x0c
	uds.counterL = TC_CALI.CNTL;
     85c:	c0 e0       	ldi	r28, 0x00	; 0
     85e:	da e0       	ldi	r29, 0x0A	; 10
     860:	88 a1       	ldd	r24, Y+32	; 0x20
     862:	85 8b       	std	Z+21, r24	; 0x15
	uds.counterH = TC_CALI.CNTH;
     864:	89 a1       	ldd	r24, Y+33	; 0x21
     866:	86 8b       	std	Z+22, r24	; 0x16
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     868:	54 96       	adiw	r26, 0x14	; 20
     86a:	8d 91       	ld	r24, X+
     86c:	9c 91       	ld	r25, X
     86e:	55 97       	sbiw	r26, 0x15	; 21
     870:	86 34       	cpi	r24, 0x46	; 70
     872:	91 40       	sbci	r25, 0x01	; 1
     874:	80 f0       	brcs	.+32     	; 0x896 <main_sof_action+0x66>
     876:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     87a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     87e:	89 3a       	cpi	r24, 0xA9	; 169
     880:	91 40       	sbci	r25, 0x01	; 1
     882:	48 f4       	brcc	.+18     	; 0x896 <main_sof_action+0x66>
		currentTrfcnt = DMA.CH0.TRFCNT;
     884:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     888:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     88c:	80 93 a8 2f 	sts	0x2FA8, r24	; 0x802fa8 <currentTrfcnt>
     890:	90 93 a9 2f 	sts	0x2FA9, r25	; 0x802fa9 <currentTrfcnt+0x1>
		asm("nop");
     894:	00 00       	nop
	}
	if(firstFrame){
     896:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <firstFrame>
     89a:	88 23       	and	r24, r24
     89c:	39 f0       	breq	.+14     	; 0x8ac <main_sof_action+0x7c>
		tiny_calibration_first_sof();
     89e:	21 dd       	rcall	.-1470   	; 0x2e2 <tiny_calibration_first_sof>
		firstFrame = 0;
     8a0:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <firstFrame>
		tcinit = 1;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <tcinit>
		return;
     8aa:	64 c0       	rjmp	.+200    	; 0x974 <main_sof_action+0x144>
	}
	else{
		if(tcinit){
     8ac:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <tcinit>
     8b0:	88 23       	and	r24, r24
     8b2:	b9 f1       	breq	.+110    	; 0x922 <main_sof_action+0xf2>
			if(calibration_values_found == 0x03){
     8b4:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	19 f4       	brne	.+6      	; 0x8c2 <main_sof_action+0x92>
				tiny_calibration_maintain();
     8bc:	24 dd       	rcall	.-1464   	; 0x306 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     8be:	a6 de       	rcall	.-692    	; 0x60c <tiny_calibration_layer2>
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <main_sof_action+0x94>
			} else tiny_calibration_find_values();
     8c2:	fb dd       	rcall	.-1034   	; 0x4ba <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     8c4:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <debug_divider>
     8c8:	81 11       	cpse	r24, r1
     8ca:	26 c0       	rjmp	.+76     	; 0x918 <main_sof_action+0xe8>
				debug_divider = 0;
     8cc:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     8d0:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <cntCntCnt>
     8d4:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <cntCntCnt+0x1>
     8d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8dc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e8 55       	subi	r30, 0x58	; 88
     8e6:	f2 4d       	sbci	r31, 0xD2	; 210
     8e8:	80 83       	st	Z, r24
     8ea:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     8ec:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <cntCntCnt>
     8f0:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <cntCntCnt+0x1>
     8f4:	8f 3f       	cpi	r24, 0xFF	; 255
     8f6:	91 05       	cpc	r25, r1
     8f8:	29 f4       	brne	.+10     	; 0x904 <main_sof_action+0xd4>
					cntCntCnt = 0;
     8fa:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <cntCntCnt>
     8fe:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <cntCntCnt+0x1>
     902:	0f c0       	rjmp	.+30     	; 0x922 <main_sof_action+0xf2>
				}
				else cntCntCnt++;
     904:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <cntCntCnt>
     908:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <cntCntCnt+0x1>
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <cntCntCnt>
     912:	90 93 b4 20 	sts	0x20B4, r25	; 0x8020b4 <cntCntCnt+0x1>
     916:	05 c0       	rjmp	.+10     	; 0x922 <main_sof_action+0xf2>
			}
			else debug_divider++;
     918:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <debug_divider>
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     922:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <debugOnNextEnd>
     926:	88 23       	and	r24, r24
     928:	51 f0       	breq	.+20     	; 0x93e <main_sof_action+0x10e>
		currentTrfcnt = DMA.CH0.TRFCNT;
     92a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     92e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     932:	80 93 a8 2f 	sts	0x2FA8, r24	; 0x802fa8 <currentTrfcnt>
     936:	90 93 a9 2f 	sts	0x2FA9, r25	; 0x802fa9 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     93a:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <debugOnNextEnd>
	}
	if(global_mode < 5){
     93e:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     942:	85 30       	cpi	r24, 0x05	; 5
     944:	60 f4       	brcc	.+24     	; 0x95e <main_sof_action+0x12e>
		usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     946:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     94a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	27 37       	cpi	r18, 0x77	; 119
     952:	31 40       	sbci	r19, 0x01	; 1
     954:	08 f0       	brcs	.+2      	; 0x958 <main_sof_action+0x128>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <usb_state>
     95c:	0b c0       	rjmp	.+22     	; 0x974 <main_sof_action+0x144>
	}
	else{
		usb_state = (DMA.CH0.TRFCNT < 750) ? 1 : 0;
     95e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     962:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	2e 3e       	cpi	r18, 0xEE	; 238
     96a:	32 40       	sbci	r19, 0x02	; 2
     96c:	08 f0       	brcs	.+2      	; 0x970 <main_sof_action+0x140>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <usb_state>
	}
	return;
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <main_vendor_enable>:

bool main_vendor_enable(void)
{
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
	main_b_vendor_enable = true;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <main_b_vendor_enable>
	firstFrame = 1;
     984:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <firstFrame>
	udd_ep_run(0x81, false, (uint8_t *)&isoBuf[0], 125, iso_callback);
     988:	06 e8       	ldi	r16, 0x86	; 134
     98a:	13 e0       	ldi	r17, 0x03	; 3
     98c:	2d e7       	ldi	r18, 0x7D	; 125
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	4c ec       	ldi	r20, 0xCC	; 204
     992:	57 e2       	ldi	r21, 0x27	; 39
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	81 e8       	ldi	r24, 0x81	; 129
     998:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <udd_ep_run>
	udd_ep_run(0x82, false, (uint8_t *)&isoBuf[125], 125, iso_callback);
     99c:	2d e7       	ldi	r18, 0x7D	; 125
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	49 e4       	ldi	r20, 0x49	; 73
     9a2:	58 e2       	ldi	r21, 0x28	; 40
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	82 e8       	ldi	r24, 0x82	; 130
     9a8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <udd_ep_run>
	udd_ep_run(0x83, false, (uint8_t *)&isoBuf[250], 125, iso_callback);
     9ac:	2d e7       	ldi	r18, 0x7D	; 125
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	46 ec       	ldi	r20, 0xC6	; 198
     9b2:	58 e2       	ldi	r21, 0x28	; 40
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	83 e8       	ldi	r24, 0x83	; 131
     9b8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <udd_ep_run>
	udd_ep_run(0x84, false, (uint8_t *)&isoBuf[375], 125, iso_callback);
     9bc:	2d e7       	ldi	r18, 0x7D	; 125
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	43 e4       	ldi	r20, 0x43	; 67
     9c2:	59 e2       	ldi	r21, 0x29	; 41
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	84 e8       	ldi	r24, 0x84	; 132
     9c8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <udd_ep_run>
	udd_ep_run(0x85, false, (uint8_t *)&isoBuf[500], 125, iso_callback);
     9cc:	2d e7       	ldi	r18, 0x7D	; 125
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 ec       	ldi	r20, 0xC0	; 192
     9d2:	59 e2       	ldi	r21, 0x29	; 41
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	85 e8       	ldi	r24, 0x85	; 133
     9d8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <udd_ep_run>
	udd_ep_run(0x86, false, (uint8_t *)&isoBuf[625], 125, iso_callback);
     9dc:	2d e7       	ldi	r18, 0x7D	; 125
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	4d e3       	ldi	r20, 0x3D	; 61
     9e2:	5a e2       	ldi	r21, 0x2A	; 42
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	86 e8       	ldi	r24, 0x86	; 134
     9e8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <udd_ep_run>
	return true;
}
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     9f4:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <main_b_vendor_enable>
     9f8:	08 95       	ret

000009fa <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	08 95       	ret

000009fe <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	08 95       	ret

00000a02 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     a02:	e0 e0       	ldi	r30, 0x00	; 0
     a04:	f2 e0       	ldi	r31, 0x02	; 2
     a06:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a08:	98 2f       	mov	r25, r24
     a0a:	9c 71       	andi	r25, 0x1C	; 28
     a0c:	93 68       	ori	r25, 0x83	; 131
     a0e:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     a10:	88 1f       	adc	r24, r24
     a12:	88 27       	eor	r24, r24
     a14:	88 1f       	adc	r24, r24
     a16:	88 0f       	add	r24, r24
     a18:	81 a3       	std	Z+33, r24	; 0x21
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a1a:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     a1c:	16 a2       	std	Z+38, r1	; 0x26
     a1e:	08 95       	ret

00000a20 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     a20:	e0 e0       	ldi	r30, 0x00	; 0
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a26:	83 68       	ori	r24, 0x83	; 131
     a28:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     a2a:	80 e1       	ldi	r24, 0x10	; 16
     a2c:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a2e:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     a30:	16 aa       	std	Z+54, r1	; 0x36
     a32:	08 95       	ret

00000a34 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f2 e0       	ldi	r31, 0x02	; 2
     a38:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a3a:	83 e8       	ldi	r24, 0x83	; 131
     a3c:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     a3e:	8f e2       	ldi	r24, 0x2F	; 47
     a40:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a42:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     a44:	16 a6       	std	Z+46, r1	; 0x2e
     a46:	08 95       	ret

00000a48 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     a48:	aa ec       	ldi	r26, 0xCA	; 202
     a4a:	b1 e0       	ldi	r27, 0x01	; 1
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     a50:	e8 2f       	mov	r30, r24
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     a56:	1c 92       	st	X, r1

	return( result );
}
     a58:	08 95       	ret

00000a5a <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     a5e:	e0 e7       	ldi	r30, 0x70	; 112
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	9d 7f       	andi	r25, 0xFD	; 253
     a66:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     a68:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a6c:	62 30       	cpi	r22, 0x02	; 2
     a6e:	31 f1       	breq	.+76     	; 0xabc <tiny_adc_setup+0x62>
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f2 e0       	ldi	r31, 0x02	; 2
     a74:	9c e1       	ldi	r25, 0x1C	; 28
     a76:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a78:	90 e4       	ldi	r25, 0x40	; 64
     a7a:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a7c:	81 11       	cpse	r24, r1
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <tiny_adc_setup+0x2a>
     a80:	80 e4       	ldi	r24, 0x40	; 64
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <tiny_adc_setup+0x2c>
     a84:	80 ec       	ldi	r24, 0xC0	; 192
     a86:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     a8a:	61 30       	cpi	r22, 0x01	; 1
     a8c:	11 f0       	breq	.+4      	; 0xa92 <tiny_adc_setup+0x38>
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <tiny_adc_setup+0x3a>
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	c0 e0       	ldi	r28, 0x00	; 0
     a96:	d2 e0       	ldi	r29, 0x02	; 2
     a98:	8c 83       	std	Y+4, r24	; 0x04
	#else
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
	#endif
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     a9a:	80 e2       	ldi	r24, 0x20	; 32
     a9c:	d5 df       	rcall	.-86     	; 0xa48 <ReadCalibrationByte>
     a9e:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     aa0:	81 e2       	ldi	r24, 0x21	; 33
     aa2:	d2 df       	rcall	.-92     	; 0xa48 <ReadCalibrationByte>
     aa4:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     aa6:	18 8e       	std	Y+24, r1	; 0x18
     aa8:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     aae:	c2 df       	rcall	.-124    	; 0xa34 <tiny_adc_pid_setup>
     ab0:	0e c0       	rjmp	.+28     	; 0xace <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ab2:	80 ec       	ldi	r24, 0xC0	; 192
     ab4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     ab8:	84 e0       	ldi	r24, 0x04	; 4
     aba:	ec cf       	rjmp	.-40     	; 0xa94 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     abc:	e0 e0       	ldi	r30, 0x00	; 0
     abe:	f2 e0       	ldi	r31, 0x02	; 2
     ac0:	9e e1       	ldi	r25, 0x1E	; 30
     ac2:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     ac4:	90 e4       	ldi	r25, 0x40	; 64
     ac6:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ac8:	81 11       	cpse	r24, r1
     aca:	f3 cf       	rjmp	.-26     	; 0xab2 <tiny_adc_setup+0x58>
     acc:	d9 cf       	rjmp	.-78     	; 0xa80 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     aee:	8f 91       	pop	r24
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     afe:	e0 e7       	ldi	r30, 0x70	; 112
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	8b 7f       	andi	r24, 0xFB	; 251
     b06:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     b08:	c0 e2       	ldi	r28, 0x20	; 32
     b0a:	d3 e0       	ldi	r29, 0x03	; 3
     b0c:	8d e0       	ldi	r24, 0x0D	; 13
     b0e:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     b10:	80 e4       	ldi	r24, 0x40	; 64
     b12:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     b14:	89 e0       	ldi	r24, 0x09	; 9
     b16:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     b18:	83 e3       	ldi	r24, 0x33	; 51
     b1a:	96 df       	rcall	.-212    	; 0xa48 <ReadCalibrationByte>
     b1c:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     b1e:	82 e3       	ldi	r24, 0x32	; 50
     b20:	93 df       	rcall	.-218    	; 0xa48 <ReadCalibrationByte>
     b22:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     b24:	87 e3       	ldi	r24, 0x37	; 55
     b26:	90 df       	rcall	.-224    	; 0xa48 <ReadCalibrationByte>
     b28:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     b2a:	86 e3       	ldi	r24, 0x36	; 54
     b2c:	8d df       	rcall	.-230    	; 0xa48 <ReadCalibrationByte>
     b2e:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     b30:	e0 e2       	ldi	r30, 0x20	; 32
     b32:	f6 e0       	ldi	r31, 0x06	; 6
     b34:	80 81       	ld	r24, Z
     b36:	83 60       	ori	r24, 0x03	; 3
     b38:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     b3a:	14 82       	std	Z+4, r1	; 0x04
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <tiny_dma_setup>:
		median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
		
}

void tiny_dma_loop_mode_7(void){
     b42:	e0 e7       	ldi	r30, 0x70	; 112
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8e 7f       	andi	r24, 0xFE	; 254
     b4a:	80 83       	st	Z, r24
     b4c:	83 e8       	ldi	r24, 0x83	; 131
     b4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     b52:	08 95       	ret

00000b54 <tiny_dma_flush>:
     b54:	e0 e0       	ldi	r30, 0x00	; 0
     b56:	f1 e0       	ldi	r31, 0x01	; 1
     b58:	10 8a       	std	Z+16, r1	; 0x10
     b5a:	80 e4       	ldi	r24, 0x40	; 64
     b5c:	80 8b       	std	Z+16, r24	; 0x10
     b5e:	10 a2       	std	Z+32, r1	; 0x20
     b60:	80 a3       	std	Z+32, r24	; 0x20
     b62:	10 aa       	std	Z+48, r1	; 0x30
     b64:	80 ab       	std	Z+48, r24	; 0x30
     b66:	e0 e4       	ldi	r30, 0x40	; 64
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	10 82       	st	Z, r1
     b6c:	80 83       	st	Z, r24
     b6e:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <b1_state>
     b72:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <b2_state>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <usb_state>
     b7c:	10 92 9c 23 	sts	0x239C, r1	; 0x80239c <dma_ch0_ran>
     b80:	10 92 9d 23 	sts	0x239D, r1	; 0x80239d <dma_ch0_ran+0x1>
     b84:	10 92 9a 23 	sts	0x239A, r1	; 0x80239a <dma_ch1_ran>
     b88:	10 92 9b 23 	sts	0x239B, r1	; 0x80239b <dma_ch1_ran+0x1>
     b8c:	08 95       	ret

00000b8e <tiny_dma_delayed_set>:
     b8e:	80 93 ca 25 	sts	0x25CA, r24	; 0x8025ca <futureMode>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <modeChanged>
     b98:	08 95       	ret

00000b9a <tiny_dma_set_mode_0>:
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     ba2:	d8 df       	rcall	.-80     	; 0xb54 <tiny_dma_flush>
     ba4:	c0 e0       	ldi	r28, 0x00	; 0
     ba6:	d1 e0       	ldi	r29, 0x01	; 1
     ba8:	1e aa       	std	Y+54, r1	; 0x36
     baa:	84 e2       	ldi	r24, 0x24	; 36
     bac:	88 ab       	std	Y+48, r24	; 0x30
     bae:	19 aa       	std	Y+49, r1	; 0x31
     bb0:	49 e5       	ldi	r20, 0x59	; 89
     bb2:	4a ab       	std	Y+50, r20	; 0x32
     bb4:	32 e0       	ldi	r19, 0x02	; 2
     bb6:	3b ab       	std	Y+51, r19	; 0x33
     bb8:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     bbc:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     bc0:	6c ab       	std	Y+52, r22	; 0x34
     bc2:	7d ab       	std	Y+53, r23	; 0x35
     bc4:	6b ec       	ldi	r22, 0xCB	; 203
     bc6:	75 e2       	ldi	r23, 0x25	; 37
     bc8:	68 af       	std	Y+56, r22	; 0x38
     bca:	79 af       	std	Y+57, r23	; 0x39
     bcc:	1a ae       	std	Y+58, r1	; 0x3a
     bce:	9b e3       	ldi	r25, 0x3B	; 59
     bd0:	9c af       	std	Y+60, r25	; 0x3c
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bd8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bdc:	28 a9       	ldd	r18, Y+48	; 0x30
     bde:	20 68       	ori	r18, 0x80	; 128
     be0:	28 ab       	std	Y+48, r18	; 0x30
     be2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     be6:	e0 e4       	ldi	r30, 0x40	; 64
     be8:	f1 e0       	ldi	r31, 0x01	; 1
     bea:	80 83       	st	Z, r24
     bec:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bf0:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     bf4:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bf8:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     bfc:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     c00:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c04:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c08:	4a eb       	ldi	r20, 0xBA	; 186
     c0a:	53 e2       	ldi	r21, 0x23	; 35
     c0c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c10:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c14:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c18:	29 e3       	ldi	r18, 0x39	; 57
     c1a:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c1e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c22:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c26:	90 81       	ld	r25, Z
     c28:	90 68       	ori	r25, 0x80	; 128
     c2a:	90 83       	st	Z, r25
     c2c:	18 8a       	std	Y+16, r1	; 0x10
     c2e:	90 e4       	ldi	r25, 0x40	; 64
     c30:	98 8b       	std	Y+16, r25	; 0x10
     c32:	88 8b       	std	Y+16, r24	; 0x10
     c34:	19 8a       	std	Y+17, r1	; 0x11
     c36:	95 e9       	ldi	r25, 0x95	; 149
     c38:	9a 8b       	std	Y+18, r25	; 0x12
     c3a:	90 e1       	ldi	r25, 0x10	; 16
     c3c:	9b 8b       	std	Y+19, r25	; 0x13
     c3e:	4e ee       	ldi	r20, 0xEE	; 238
     c40:	52 e0       	ldi	r21, 0x02	; 2
     c42:	4c 8b       	std	Y+20, r20	; 0x14
     c44:	5d 8b       	std	Y+21, r21	; 0x15
     c46:	88 8f       	std	Y+24, r24	; 0x18
     c48:	39 8f       	std	Y+25, r19	; 0x19
     c4a:	1a 8e       	std	Y+26, r1	; 0x1a
     c4c:	8c ec       	ldi	r24, 0xCC	; 204
     c4e:	97 e2       	ldi	r25, 0x27	; 39
     c50:	8c 8f       	std	Y+28, r24	; 0x1c
     c52:	9d 8f       	std	Y+29, r25	; 0x1d
     c54:	1e 8e       	std	Y+30, r1	; 0x1e
     c56:	68 ec       	ldi	r22, 0xC8	; 200
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	84 ef       	ldi	r24, 0xF4	; 244
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	3c dd       	rcall	.-1416   	; 0x6d8 <tiny_calibration_synchronise_phase>
     c60:	88 ec       	ldi	r24, 0xC8	; 200
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     c68:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     c72:	88 89       	ldd	r24, Y+16	; 0x10
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	88 8b       	std	Y+16, r24	; 0x10
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <tiny_dma_set_mode_1>:
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	11 e0       	ldi	r17, 0x01	; 1
     c86:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     c8a:	64 df       	rcall	.-312    	; 0xb54 <tiny_dma_flush>
     c8c:	c0 e0       	ldi	r28, 0x00	; 0
     c8e:	d1 e0       	ldi	r29, 0x01	; 1
     c90:	18 aa       	std	Y+48, r1	; 0x30
     c92:	80 e4       	ldi	r24, 0x40	; 64
     c94:	88 ab       	std	Y+48, r24	; 0x30
     c96:	84 e0       	ldi	r24, 0x04	; 4
     c98:	88 ab       	std	Y+48, r24	; 0x30
     c9a:	19 aa       	std	Y+49, r1	; 0x31
     c9c:	1a aa       	std	Y+50, r1	; 0x32
     c9e:	4b e4       	ldi	r20, 0x4B	; 75
     ca0:	4b ab       	std	Y+51, r20	; 0x33
     ca2:	1c aa       	std	Y+52, r1	; 0x34
     ca4:	1d aa       	std	Y+53, r1	; 0x35
     ca6:	1e aa       	std	Y+54, r1	; 0x36
     ca8:	8a e0       	ldi	r24, 0x0A	; 10
     caa:	90 e2       	ldi	r25, 0x20	; 32
     cac:	88 af       	std	Y+56, r24	; 0x38
     cae:	99 af       	std	Y+57, r25	; 0x39
     cb0:	1a ae       	std	Y+58, r1	; 0x3a
     cb2:	70 ea       	ldi	r23, 0xA0	; 160
     cb4:	7c af       	std	Y+60, r23	; 0x3c
     cb6:	68 e0       	ldi	r22, 0x08	; 8
     cb8:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     cbc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     cc0:	88 a9       	ldd	r24, Y+48	; 0x30
     cc2:	80 6a       	ori	r24, 0xA0	; 160
     cc4:	88 ab       	std	Y+48, r24	; 0x30
     cc6:	e0 ea       	ldi	r30, 0xA0	; 160
     cc8:	f8 e0       	ldi	r31, 0x08	; 8
     cca:	85 e5       	ldi	r24, 0x55	; 85
     ccc:	80 83       	st	Z, r24
     cce:	80 83       	st	Z, r24
     cd0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     cd4:	e0 e4       	ldi	r30, 0x40	; 64
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	84 e2       	ldi	r24, 0x24	; 36
     cda:	80 83       	st	Z, r24
     cdc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ce0:	99 e5       	ldi	r25, 0x59	; 89
     ce2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ce6:	32 e0       	ldi	r19, 0x02	; 2
     ce8:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     cec:	a0 91 0b 20 	lds	r26, 0x200B	; 0x80200b <auxDacBufLen>
     cf0:	b0 91 0c 20 	lds	r27, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     cf4:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cf8:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     cfc:	ab ec       	ldi	r26, 0xCB	; 203
     cfe:	b5 e2       	ldi	r27, 0x25	; 37
     d00:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d04:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d08:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d0c:	9b e3       	ldi	r25, 0x3B	; 59
     d0e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d18:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d1c:	20 81       	ld	r18, Z
     d1e:	20 68       	ori	r18, 0x80	; 128
     d20:	20 83       	st	Z, r18
     d22:	88 a3       	std	Y+32, r24	; 0x20
     d24:	99 a3       	std	Y+33, r25	; 0x21
     d26:	25 e9       	ldi	r18, 0x95	; 149
     d28:	2a a3       	std	Y+34, r18	; 0x22
     d2a:	4b a3       	std	Y+35, r20	; 0x23
     d2c:	4e ee       	ldi	r20, 0xEE	; 238
     d2e:	52 e0       	ldi	r21, 0x02	; 2
     d30:	4c a3       	std	Y+36, r20	; 0x24
     d32:	5d a3       	std	Y+37, r21	; 0x25
     d34:	78 a7       	std	Y+40, r23	; 0x28
     d36:	69 a7       	std	Y+41, r22	; 0x29
     d38:	1a a6       	std	Y+42, r1	; 0x2a
     d3a:	6a eb       	ldi	r22, 0xBA	; 186
     d3c:	7a e2       	ldi	r23, 0x2A	; 42
     d3e:	6c a7       	std	Y+44, r22	; 0x2c
     d40:	7d a7       	std	Y+45, r23	; 0x2d
     d42:	1e a6       	std	Y+46, r1	; 0x2e
     d44:	88 8b       	std	Y+16, r24	; 0x10
     d46:	99 8b       	std	Y+17, r25	; 0x11
     d48:	2a 8b       	std	Y+18, r18	; 0x12
     d4a:	90 e1       	ldi	r25, 0x10	; 16
     d4c:	9b 8b       	std	Y+19, r25	; 0x13
     d4e:	4c 8b       	std	Y+20, r20	; 0x14
     d50:	5d 8b       	std	Y+21, r21	; 0x15
     d52:	88 8f       	std	Y+24, r24	; 0x18
     d54:	39 8f       	std	Y+25, r19	; 0x19
     d56:	1a 8e       	std	Y+26, r1	; 0x1a
     d58:	8c ec       	ldi	r24, 0xCC	; 204
     d5a:	97 e2       	ldi	r25, 0x27	; 39
     d5c:	8c 8f       	std	Y+28, r24	; 0x1c
     d5e:	9d 8f       	std	Y+29, r25	; 0x1d
     d60:	1e 8e       	std	Y+30, r1	; 0x1e
     d62:	68 ec       	ldi	r22, 0xC8	; 200
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	84 ef       	ldi	r24, 0xF4	; 244
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	b6 dc       	rcall	.-1684   	; 0x6d8 <tiny_calibration_synchronise_phase>
     d6c:	88 ec       	ldi	r24, 0xC8	; 200
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     d74:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     d78:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <median_TRFCNT_delay>
     d7c:	88 a1       	ldd	r24, Y+32	; 0x20
     d7e:	80 68       	ori	r24, 0x80	; 128
     d80:	88 a3       	std	Y+32, r24	; 0x20
     d82:	88 89       	ldd	r24, Y+16	; 0x10
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	88 8b       	std	Y+16, r24	; 0x10
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	08 95       	ret

00000d90 <tiny_dma_set_mode_2>:
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	12 e0       	ldi	r17, 0x02	; 2
     d98:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     d9c:	db de       	rcall	.-586    	; 0xb54 <tiny_dma_flush>
     d9e:	c0 e0       	ldi	r28, 0x00	; 0
     da0:	d1 e0       	ldi	r29, 0x01	; 1
     da2:	1e aa       	std	Y+54, r1	; 0x36
     da4:	84 e2       	ldi	r24, 0x24	; 36
     da6:	88 ab       	std	Y+48, r24	; 0x30
     da8:	19 aa       	std	Y+49, r1	; 0x31
     daa:	39 e5       	ldi	r19, 0x59	; 89
     dac:	3a ab       	std	Y+50, r19	; 0x32
     dae:	1b ab       	std	Y+51, r17	; 0x33
     db0:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     db4:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     db8:	4c ab       	std	Y+52, r20	; 0x34
     dba:	5d ab       	std	Y+53, r21	; 0x35
     dbc:	4b ec       	ldi	r20, 0xCB	; 203
     dbe:	55 e2       	ldi	r21, 0x25	; 37
     dc0:	48 af       	std	Y+56, r20	; 0x38
     dc2:	59 af       	std	Y+57, r21	; 0x39
     dc4:	1a ae       	std	Y+58, r1	; 0x3a
     dc6:	9b e3       	ldi	r25, 0x3B	; 59
     dc8:	9c af       	std	Y+60, r25	; 0x3c
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     dd0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     dd4:	28 a9       	ldd	r18, Y+48	; 0x30
     dd6:	20 68       	ori	r18, 0x80	; 128
     dd8:	28 ab       	std	Y+48, r18	; 0x30
     dda:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     dde:	e0 e4       	ldi	r30, 0x40	; 64
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	80 83       	st	Z, r24
     de4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     de8:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     dec:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     df0:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     df4:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     df8:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     dfc:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e00:	2a eb       	ldi	r18, 0xBA	; 186
     e02:	33 e2       	ldi	r19, 0x23	; 35
     e04:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e08:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e0c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e10:	29 e3       	ldi	r18, 0x39	; 57
     e12:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e16:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e1a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e1e:	90 81       	ld	r25, Z
     e20:	90 68       	ori	r25, 0x80	; 128
     e22:	90 83       	st	Z, r25
     e24:	18 8a       	std	Y+16, r1	; 0x10
     e26:	90 e4       	ldi	r25, 0x40	; 64
     e28:	98 8b       	std	Y+16, r25	; 0x10
     e2a:	88 8b       	std	Y+16, r24	; 0x10
     e2c:	19 8a       	std	Y+17, r1	; 0x11
     e2e:	45 e9       	ldi	r20, 0x95	; 149
     e30:	4a 8b       	std	Y+18, r20	; 0x12
     e32:	90 e1       	ldi	r25, 0x10	; 16
     e34:	9b 8b       	std	Y+19, r25	; 0x13
     e36:	2e ee       	ldi	r18, 0xEE	; 238
     e38:	32 e0       	ldi	r19, 0x02	; 2
     e3a:	2c 8b       	std	Y+20, r18	; 0x14
     e3c:	3d 8b       	std	Y+21, r19	; 0x15
     e3e:	88 8f       	std	Y+24, r24	; 0x18
     e40:	19 8f       	std	Y+25, r17	; 0x19
     e42:	1a 8e       	std	Y+26, r1	; 0x1a
     e44:	6c ec       	ldi	r22, 0xCC	; 204
     e46:	77 e2       	ldi	r23, 0x27	; 39
     e48:	6c 8f       	std	Y+28, r22	; 0x1c
     e4a:	7d 8f       	std	Y+29, r23	; 0x1d
     e4c:	1e 8e       	std	Y+30, r1	; 0x1e
     e4e:	88 a3       	std	Y+32, r24	; 0x20
     e50:	19 a2       	std	Y+33, r1	; 0x21
     e52:	4a a3       	std	Y+34, r20	; 0x22
     e54:	9b a3       	std	Y+35, r25	; 0x23
     e56:	2c a3       	std	Y+36, r18	; 0x24
     e58:	3d a3       	std	Y+37, r19	; 0x25
     e5a:	84 e3       	ldi	r24, 0x34	; 52
     e5c:	88 a7       	std	Y+40, r24	; 0x28
     e5e:	19 a7       	std	Y+41, r17	; 0x29
     e60:	1a a6       	std	Y+42, r1	; 0x2a
     e62:	8a eb       	ldi	r24, 0xBA	; 186
     e64:	9a e2       	ldi	r25, 0x2A	; 42
     e66:	8c a7       	std	Y+44, r24	; 0x2c
     e68:	9d a7       	std	Y+45, r25	; 0x2d
     e6a:	1e a6       	std	Y+46, r1	; 0x2e
     e6c:	68 ec       	ldi	r22, 0xC8	; 200
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	84 ef       	ldi	r24, 0xF4	; 244
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	31 dc       	rcall	.-1950   	; 0x6d8 <tiny_calibration_synchronise_phase>
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     e7e:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     e88:	88 89       	ldd	r24, Y+16	; 0x10
     e8a:	80 68       	ori	r24, 0x80	; 128
     e8c:	88 8b       	std	Y+16, r24	; 0x10
     e8e:	88 a1       	ldd	r24, Y+32	; 0x20
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	88 a3       	std	Y+32, r24	; 0x20
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	08 95       	ret

00000e9c <tiny_dma_set_mode_3>:
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	13 e0       	ldi	r17, 0x03	; 3
     ea4:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     ea8:	55 de       	rcall	.-854    	; 0xb54 <tiny_dma_flush>
     eaa:	c0 e0       	ldi	r28, 0x00	; 0
     eac:	d1 e0       	ldi	r29, 0x01	; 1
     eae:	18 a2       	std	Y+32, r1	; 0x20
     eb0:	50 e4       	ldi	r21, 0x40	; 64
     eb2:	58 a3       	std	Y+32, r21	; 0x20
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	88 a3       	std	Y+32, r24	; 0x20
     eb8:	19 a2       	std	Y+33, r1	; 0x21
     eba:	1a a2       	std	Y+34, r1	; 0x22
     ebc:	4b e4       	ldi	r20, 0x4B	; 75
     ebe:	4b a3       	std	Y+35, r20	; 0x23
     ec0:	1c a2       	std	Y+36, r1	; 0x24
     ec2:	1d a2       	std	Y+37, r1	; 0x25
     ec4:	1e a2       	std	Y+38, r1	; 0x26
     ec6:	8a e0       	ldi	r24, 0x0A	; 10
     ec8:	90 e2       	ldi	r25, 0x20	; 32
     eca:	88 a7       	std	Y+40, r24	; 0x28
     ecc:	99 a7       	std	Y+41, r25	; 0x29
     ece:	1a a6       	std	Y+42, r1	; 0x2a
     ed0:	30 ea       	ldi	r19, 0xA0	; 160
     ed2:	3c a7       	std	Y+44, r19	; 0x2c
     ed4:	28 e0       	ldi	r18, 0x08	; 8
     ed6:	2d a7       	std	Y+45, r18	; 0x2d
     ed8:	1e a6       	std	Y+46, r1	; 0x2e
     eda:	88 a1       	ldd	r24, Y+32	; 0x20
     edc:	80 6a       	ori	r24, 0xA0	; 160
     ede:	88 a3       	std	Y+32, r24	; 0x20
     ee0:	85 e5       	ldi	r24, 0x55	; 85
     ee2:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     ee6:	1e aa       	std	Y+54, r1	; 0x36
     ee8:	84 e2       	ldi	r24, 0x24	; 36
     eea:	88 ab       	std	Y+48, r24	; 0x30
     eec:	19 aa       	std	Y+49, r1	; 0x31
     eee:	69 e5       	ldi	r22, 0x59	; 89
     ef0:	6a ab       	std	Y+50, r22	; 0x32
     ef2:	1b ab       	std	Y+51, r17	; 0x33
     ef4:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <dacBuf_len>
     ef8:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <dacBuf_len+0x1>
     efc:	ec ab       	std	Y+52, r30	; 0x34
     efe:	fd ab       	std	Y+53, r31	; 0x35
     f00:	ea eb       	ldi	r30, 0xBA	; 186
     f02:	f3 e2       	ldi	r31, 0x23	; 35
     f04:	e8 af       	std	Y+56, r30	; 0x38
     f06:	f9 af       	std	Y+57, r31	; 0x39
     f08:	1a ae       	std	Y+58, r1	; 0x3a
     f0a:	99 e3       	ldi	r25, 0x39	; 57
     f0c:	9c af       	std	Y+60, r25	; 0x3c
     f0e:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f12:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f16:	98 a9       	ldd	r25, Y+48	; 0x30
     f18:	90 68       	ori	r25, 0x80	; 128
     f1a:	98 ab       	std	Y+48, r25	; 0x30
     f1c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f20:	e0 e4       	ldi	r30, 0x40	; 64
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	80 83       	st	Z, r24
     f26:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f2a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f34:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     f38:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     f3c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f40:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f44:	6b ec       	ldi	r22, 0xCB	; 203
     f46:	75 e2       	ldi	r23, 0x25	; 37
     f48:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f4c:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f50:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f54:	9b e3       	ldi	r25, 0x3B	; 59
     f56:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f5a:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f5e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f62:	90 81       	ld	r25, Z
     f64:	90 68       	ori	r25, 0x80	; 128
     f66:	90 83       	st	Z, r25
     f68:	18 8a       	std	Y+16, r1	; 0x10
     f6a:	58 8b       	std	Y+16, r21	; 0x10
     f6c:	88 8b       	std	Y+16, r24	; 0x10
     f6e:	19 8a       	std	Y+17, r1	; 0x11
     f70:	85 e9       	ldi	r24, 0x95	; 149
     f72:	8a 8b       	std	Y+18, r24	; 0x12
     f74:	4b 8b       	std	Y+19, r20	; 0x13
     f76:	8e ee       	ldi	r24, 0xEE	; 238
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	8c 8b       	std	Y+20, r24	; 0x14
     f7c:	9d 8b       	std	Y+21, r25	; 0x15
     f7e:	38 8f       	std	Y+24, r19	; 0x18
     f80:	29 8f       	std	Y+25, r18	; 0x19
     f82:	1a 8e       	std	Y+26, r1	; 0x1a
     f84:	8c ec       	ldi	r24, 0xCC	; 204
     f86:	97 e2       	ldi	r25, 0x27	; 39
     f88:	8c 8f       	std	Y+28, r24	; 0x1c
     f8a:	9d 8f       	std	Y+29, r25	; 0x1d
     f8c:	1e 8e       	std	Y+30, r1	; 0x1e
     f8e:	68 ec       	ldi	r22, 0xC8	; 200
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	84 ef       	ldi	r24, 0xF4	; 244
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	a0 db       	rcall	.-2240   	; 0x6d8 <tiny_calibration_synchronise_phase>
     f98:	88 ec       	ldi	r24, 0xC8	; 200
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     fa0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     faa:	88 89       	ldd	r24, Y+16	; 0x10
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	88 8b       	std	Y+16, r24	; 0x10
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	08 95       	ret

00000fb8 <tiny_dma_set_mode_4>:
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	14 e0       	ldi	r17, 0x04	; 4
     fc0:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     fc4:	c7 dd       	rcall	.-1138   	; 0xb54 <tiny_dma_flush>
     fc6:	c0 e0       	ldi	r28, 0x00	; 0
     fc8:	d1 e0       	ldi	r29, 0x01	; 1
     fca:	18 aa       	std	Y+48, r1	; 0x30
     fcc:	80 e4       	ldi	r24, 0x40	; 64
     fce:	88 ab       	std	Y+48, r24	; 0x30
     fd0:	18 ab       	std	Y+48, r17	; 0x30
     fd2:	19 aa       	std	Y+49, r1	; 0x31
     fd4:	1a aa       	std	Y+50, r1	; 0x32
     fd6:	3b e4       	ldi	r19, 0x4B	; 75
     fd8:	3b ab       	std	Y+51, r19	; 0x33
     fda:	1c aa       	std	Y+52, r1	; 0x34
     fdc:	1d aa       	std	Y+53, r1	; 0x35
     fde:	1e aa       	std	Y+54, r1	; 0x36
     fe0:	8a e0       	ldi	r24, 0x0A	; 10
     fe2:	90 e2       	ldi	r25, 0x20	; 32
     fe4:	88 af       	std	Y+56, r24	; 0x38
     fe6:	99 af       	std	Y+57, r25	; 0x39
     fe8:	1a ae       	std	Y+58, r1	; 0x3a
     fea:	50 ea       	ldi	r21, 0xA0	; 160
     fec:	5c af       	std	Y+60, r21	; 0x3c
     fee:	88 e0       	ldi	r24, 0x08	; 8
     ff0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ff4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ff8:	98 a9       	ldd	r25, Y+48	; 0x30
     ffa:	90 6a       	ori	r25, 0xA0	; 160
     ffc:	98 ab       	std	Y+48, r25	; 0x30
     ffe:	95 e5       	ldi	r25, 0x55	; 85
    1000:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1004:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1008:	e0 e4       	ldi	r30, 0x40	; 64
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	94 e2       	ldi	r25, 0x24	; 36
    100e:	90 83       	st	Z, r25
    1010:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1014:	29 e5       	ldi	r18, 0x59	; 89
    1016:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    101a:	22 e0       	ldi	r18, 0x02	; 2
    101c:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1020:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
    1024:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1028:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    102c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1030:	6b ec       	ldi	r22, 0xCB	; 203
    1032:	75 e2       	ldi	r23, 0x25	; 37
    1034:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1038:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    103c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1040:	2b e3       	ldi	r18, 0x3B	; 59
    1042:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1046:	23 e0       	ldi	r18, 0x03	; 3
    1048:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    104c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1050:	20 81       	ld	r18, Z
    1052:	20 68       	ori	r18, 0x80	; 128
    1054:	20 83       	st	Z, r18
    1056:	98 8b       	std	Y+16, r25	; 0x10
    1058:	19 8a       	std	Y+17, r1	; 0x11
    105a:	45 e9       	ldi	r20, 0x95	; 149
    105c:	4a 8b       	std	Y+18, r20	; 0x12
    105e:	3b 8b       	std	Y+19, r19	; 0x13
    1060:	2e ee       	ldi	r18, 0xEE	; 238
    1062:	32 e0       	ldi	r19, 0x02	; 2
    1064:	2c 8b       	std	Y+20, r18	; 0x14
    1066:	3d 8b       	std	Y+21, r19	; 0x15
    1068:	58 8f       	std	Y+24, r21	; 0x18
    106a:	89 8f       	std	Y+25, r24	; 0x19
    106c:	1a 8e       	std	Y+26, r1	; 0x1a
    106e:	6c ec       	ldi	r22, 0xCC	; 204
    1070:	77 e2       	ldi	r23, 0x27	; 39
    1072:	6c 8f       	std	Y+28, r22	; 0x1c
    1074:	7d 8f       	std	Y+29, r23	; 0x1d
    1076:	1e 8e       	std	Y+30, r1	; 0x1e
    1078:	98 a3       	std	Y+32, r25	; 0x20
    107a:	19 a2       	std	Y+33, r1	; 0x21
    107c:	4a a3       	std	Y+34, r20	; 0x22
    107e:	9a e4       	ldi	r25, 0x4A	; 74
    1080:	9b a3       	std	Y+35, r25	; 0x23
    1082:	2c a3       	std	Y+36, r18	; 0x24
    1084:	3d a3       	std	Y+37, r19	; 0x25
    1086:	93 ec       	ldi	r25, 0xC3	; 195
    1088:	98 a7       	std	Y+40, r25	; 0x28
    108a:	89 a7       	std	Y+41, r24	; 0x29
    108c:	1a a6       	std	Y+42, r1	; 0x2a
    108e:	8a eb       	ldi	r24, 0xBA	; 186
    1090:	9a e2       	ldi	r25, 0x2A	; 42
    1092:	8c a7       	std	Y+44, r24	; 0x2c
    1094:	9d a7       	std	Y+45, r25	; 0x2d
    1096:	1e a6       	std	Y+46, r1	; 0x2e
    1098:	68 ec       	ldi	r22, 0xC8	; 200
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	84 ef       	ldi	r24, 0xF4	; 244
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	1b db       	rcall	.-2506   	; 0x6d8 <tiny_calibration_synchronise_phase>
    10a2:	88 ec       	ldi	r24, 0xC8	; 200
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    10aa:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    10b4:	88 89       	ldd	r24, Y+16	; 0x10
    10b6:	80 68       	ori	r24, 0x80	; 128
    10b8:	88 8b       	std	Y+16, r24	; 0x10
    10ba:	88 a1       	ldd	r24, Y+32	; 0x20
    10bc:	80 68       	ori	r24, 0x80	; 128
    10be:	88 a3       	std	Y+32, r24	; 0x20
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	08 95       	ret

000010c8 <tiny_dma_set_mode_5>:
    10c8:	ff cf       	rjmp	.-2      	; 0x10c8 <tiny_dma_set_mode_5>

000010ca <tiny_dma_set_mode_6>:
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	86 e0       	ldi	r24, 0x06	; 6
    10d0:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    10d4:	3f dd       	rcall	.-1410   	; 0xb54 <tiny_dma_flush>
    10d6:	c0 e0       	ldi	r28, 0x00	; 0
    10d8:	d1 e0       	ldi	r29, 0x01	; 1
    10da:	1e aa       	std	Y+54, r1	; 0x36
    10dc:	84 e2       	ldi	r24, 0x24	; 36
    10de:	88 ab       	std	Y+48, r24	; 0x30
    10e0:	19 aa       	std	Y+49, r1	; 0x31
    10e2:	39 e5       	ldi	r19, 0x59	; 89
    10e4:	3a ab       	std	Y+50, r19	; 0x32
    10e6:	93 e0       	ldi	r25, 0x03	; 3
    10e8:	9b ab       	std	Y+51, r25	; 0x33
    10ea:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    10ee:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    10f2:	4c ab       	std	Y+52, r20	; 0x34
    10f4:	5d ab       	std	Y+53, r21	; 0x35
    10f6:	4a eb       	ldi	r20, 0xBA	; 186
    10f8:	53 e2       	ldi	r21, 0x23	; 35
    10fa:	48 af       	std	Y+56, r20	; 0x38
    10fc:	59 af       	std	Y+57, r21	; 0x39
    10fe:	1a ae       	std	Y+58, r1	; 0x3a
    1100:	29 e3       	ldi	r18, 0x39	; 57
    1102:	2c af       	std	Y+60, r18	; 0x3c
    1104:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1108:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    110c:	28 a9       	ldd	r18, Y+48	; 0x30
    110e:	20 68       	ori	r18, 0x80	; 128
    1110:	28 ab       	std	Y+48, r18	; 0x30
    1112:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1116:	e0 e4       	ldi	r30, 0x40	; 64
    1118:	f1 e0       	ldi	r31, 0x01	; 1
    111a:	80 83       	st	Z, r24
    111c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1120:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1124:	32 e0       	ldi	r19, 0x02	; 2
    1126:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    112a:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    112e:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1132:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1136:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    113a:	4b ec       	ldi	r20, 0xCB	; 203
    113c:	55 e2       	ldi	r21, 0x25	; 37
    113e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1142:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1146:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    114a:	2b e3       	ldi	r18, 0x3B	; 59
    114c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1150:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1154:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1158:	20 81       	ld	r18, Z
    115a:	20 68       	ori	r18, 0x80	; 128
    115c:	20 83       	st	Z, r18
    115e:	18 8a       	std	Y+16, r1	; 0x10
    1160:	20 e4       	ldi	r18, 0x40	; 64
    1162:	28 8b       	std	Y+16, r18	; 0x10
    1164:	88 8b       	std	Y+16, r24	; 0x10
    1166:	99 8b       	std	Y+17, r25	; 0x11
    1168:	95 e9       	ldi	r25, 0x95	; 149
    116a:	9a 8b       	std	Y+18, r25	; 0x12
    116c:	90 e1       	ldi	r25, 0x10	; 16
    116e:	9b 8b       	std	Y+19, r25	; 0x13
    1170:	4c ed       	ldi	r20, 0xDC	; 220
    1172:	55 e0       	ldi	r21, 0x05	; 5
    1174:	4c 8b       	std	Y+20, r20	; 0x14
    1176:	5d 8b       	std	Y+21, r21	; 0x15
    1178:	88 8f       	std	Y+24, r24	; 0x18
    117a:	39 8f       	std	Y+25, r19	; 0x19
    117c:	1a 8e       	std	Y+26, r1	; 0x1a
    117e:	8c ec       	ldi	r24, 0xCC	; 204
    1180:	97 e2       	ldi	r25, 0x27	; 39
    1182:	8c 8f       	std	Y+28, r24	; 0x1c
    1184:	9d 8f       	std	Y+29, r25	; 0x1d
    1186:	1e 8e       	std	Y+30, r1	; 0x1e
    1188:	68 ec       	ldi	r22, 0xC8	; 200
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	84 ef       	ldi	r24, 0xF4	; 244
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	a3 da       	rcall	.-2746   	; 0x6d8 <tiny_calibration_synchronise_phase>
    1192:	80 e9       	ldi	r24, 0x90	; 144
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    119a:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    11a4:	88 89       	ldd	r24, Y+16	; 0x10
    11a6:	80 68       	ori	r24, 0x80	; 128
    11a8:	88 8b       	std	Y+16, r24	; 0x10
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <tiny_dma_set_mode_7>:
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	87 e0       	ldi	r24, 0x07	; 7
    11b6:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    11ba:	cc dc       	rcall	.-1640   	; 0xb54 <tiny_dma_flush>
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
    11be:	d1 e0       	ldi	r29, 0x01	; 1
    11c0:	1e aa       	std	Y+54, r1	; 0x36
    11c2:	94 e2       	ldi	r25, 0x24	; 36
    11c4:	98 ab       	std	Y+48, r25	; 0x30
    11c6:	19 aa       	std	Y+49, r1	; 0x31
    11c8:	39 e5       	ldi	r19, 0x59	; 89
    11ca:	3a ab       	std	Y+50, r19	; 0x32
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	8b ab       	std	Y+51, r24	; 0x33
    11d0:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    11d4:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    11d8:	4c ab       	std	Y+52, r20	; 0x34
    11da:	5d ab       	std	Y+53, r21	; 0x35
    11dc:	4a eb       	ldi	r20, 0xBA	; 186
    11de:	53 e2       	ldi	r21, 0x23	; 35
    11e0:	48 af       	std	Y+56, r20	; 0x38
    11e2:	59 af       	std	Y+57, r21	; 0x39
    11e4:	1a ae       	std	Y+58, r1	; 0x3a
    11e6:	29 e3       	ldi	r18, 0x39	; 57
    11e8:	2c af       	std	Y+60, r18	; 0x3c
    11ea:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    11ee:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    11f2:	28 a9       	ldd	r18, Y+48	; 0x30
    11f4:	20 68       	ori	r18, 0x80	; 128
    11f6:	28 ab       	std	Y+48, r18	; 0x30
    11f8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    11fc:	e0 e4       	ldi	r30, 0x40	; 64
    11fe:	f1 e0       	ldi	r31, 0x01	; 1
    1200:	90 83       	st	Z, r25
    1202:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1206:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    120a:	32 e0       	ldi	r19, 0x02	; 2
    120c:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1210:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    1214:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1218:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    121c:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1220:	4b ec       	ldi	r20, 0xCB	; 203
    1222:	55 e2       	ldi	r21, 0x25	; 37
    1224:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1228:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    122c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1230:	2b e3       	ldi	r18, 0x3B	; 59
    1232:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1236:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    123a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    123e:	20 81       	ld	r18, Z
    1240:	20 68       	ori	r18, 0x80	; 128
    1242:	20 83       	st	Z, r18
    1244:	18 8a       	std	Y+16, r1	; 0x10
    1246:	20 e4       	ldi	r18, 0x40	; 64
    1248:	28 8b       	std	Y+16, r18	; 0x10
    124a:	25 e2       	ldi	r18, 0x25	; 37
    124c:	28 8b       	std	Y+16, r18	; 0x10
    124e:	89 8b       	std	Y+17, r24	; 0x11
    1250:	85 e9       	ldi	r24, 0x95	; 149
    1252:	8a 8b       	std	Y+18, r24	; 0x12
    1254:	80 e1       	ldi	r24, 0x10	; 16
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	4c ed       	ldi	r20, 0xDC	; 220
    125a:	55 e0       	ldi	r21, 0x05	; 5
    125c:	4c 8b       	std	Y+20, r20	; 0x14
    125e:	5d 8b       	std	Y+21, r21	; 0x15
    1260:	98 8f       	std	Y+24, r25	; 0x18
    1262:	39 8f       	std	Y+25, r19	; 0x19
    1264:	1a 8e       	std	Y+26, r1	; 0x1a
    1266:	8c ec       	ldi	r24, 0xCC	; 204
    1268:	97 e2       	ldi	r25, 0x27	; 39
    126a:	8c 8f       	std	Y+28, r24	; 0x1c
    126c:	9d 8f       	std	Y+29, r25	; 0x1d
    126e:	1e 8e       	std	Y+30, r1	; 0x1e
    1270:	68 ec       	ldi	r22, 0xC8	; 200
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	84 ef       	ldi	r24, 0xF4	; 244
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	2f da       	rcall	.-2978   	; 0x6d8 <tiny_calibration_synchronise_phase>
    127a:	80 e9       	ldi	r24, 0x90	; 144
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    1282:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    128c:	88 89       	ldd	r24, Y+16	; 0x10
    128e:	80 68       	ori	r24, 0x80	; 128
    1290:	88 8b       	std	Y+16, r24	; 0x10
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <__vector_6>:
}

ISR(DMA_CH0_vect){
    1298:	1f 92       	push	r1
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	0f 92       	push	r0
    12a0:	11 24       	eor	r1, r1
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
	DMA.INTFLAGS = 0x01;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch0_ran++;
    12b0:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    12b4:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	80 93 9c 23 	sts	0x239C, r24	; 0x80239c <dma_ch0_ran>
    12be:	90 93 9d 23 	sts	0x239D, r25	; 0x80239d <dma_ch0_ran+0x1>
	uds.dma_ch0_cntL = dma_ch0_ran & 0xff;
    12c2:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    12c6:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    12ca:	ee e9       	ldi	r30, 0x9E	; 158
    12cc:	f3 e2       	ldi	r31, 0x23	; 35
    12ce:	87 8b       	std	Z+23, r24	; 0x17
	uds.dma_ch0_cntH = (dma_ch0_ran >> 8) & 0xff;
    12d0:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    12d4:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    12d8:	90 8f       	std	Z+24, r25	; 0x18
}
    12da:	ff 91       	pop	r31
    12dc:	ef 91       	pop	r30
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_7>:

ISR(DMA_CH1_vect){
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
	DMA.INTFLAGS = 0x02;
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch1_ran++;
    1304:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    1308:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	80 93 9a 23 	sts	0x239A, r24	; 0x80239a <dma_ch1_ran>
    1312:	90 93 9b 23 	sts	0x239B, r25	; 0x80239b <dma_ch1_ran+0x1>
	uds.dma_ch1_cntL = dma_ch1_ran & 0xff;
    1316:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    131a:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    131e:	ee e9       	ldi	r30, 0x9E	; 158
    1320:	f3 e2       	ldi	r31, 0x23	; 35
    1322:	81 8f       	std	Z+25, r24	; 0x19
	uds.dma_ch1_cntH = (dma_ch1_ran >> 8) & 0xff;
    1324:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    1328:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    132c:	92 8f       	std	Z+26, r25	; 0x1a
}
    132e:	ff 91       	pop	r31
    1330:	ef 91       	pop	r30
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1340:	e0 e7       	ldi	r30, 0x70	; 112
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	83 81       	ldd	r24, Z+3	; 0x03
    1346:	8c 7f       	andi	r24, 0xFC	; 252
    1348:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	8c 7f       	andi	r24, 0xFC	; 252
    134e:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1350:	80 81       	ld	r24, Z
    1352:	8d 7f       	andi	r24, 0xFD	; 253
    1354:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    1356:	e0 e8       	ldi	r30, 0x80	; 128
    1358:	f1 e0       	ldi	r31, 0x01	; 1
    135a:	80 ec       	ldi	r24, 0xC0	; 192
    135c:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    135e:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1360:	88 ec       	ldi	r24, 0xC8	; 200
    1362:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1364:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1366:	a0 e0       	ldi	r26, 0x00	; 0
    1368:	b8 e0       	ldi	r27, 0x08	; 8
    136a:	34 e0       	ldi	r19, 0x04	; 4
    136c:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    136e:	23 e0       	ldi	r18, 0x03	; 3
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	2c 93       	st	X, r18
    1374:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1376:	14 96       	adiw	r26, 0x04	; 4
    1378:	1c 92       	st	X, r1
    137a:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    137c:	85 ed       	ldi	r24, 0xD5	; 213
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	96 96       	adiw	r26, 0x26	; 38
    1382:	8d 93       	st	X+, r24
    1384:	9c 93       	st	X, r25
    1386:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1388:	16 96       	adiw	r26, 0x06	; 6
    138a:	1c 92       	st	X, r1
    138c:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    138e:	e0 e4       	ldi	r30, 0x40	; 64
    1390:	f8 e0       	ldi	r31, 0x08	; 8
    1392:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1394:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1396:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    1398:	86 a3       	std	Z+38, r24	; 0x26
    139a:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    139c:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    139e:	e0 e6       	ldi	r30, 0x60	; 96
    13a0:	f6 e0       	ldi	r31, 0x06	; 6
    13a2:	80 81       	ld	r24, Z
    13a4:	80 61       	ori	r24, 0x10	; 16
    13a6:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    13a8:	e0 e4       	ldi	r30, 0x40	; 64
    13aa:	f9 e0       	ldi	r31, 0x09	; 9
    13ac:	83 e1       	ldi	r24, 0x13	; 19
    13ae:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    13b0:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    13b6:	a6 a3       	std	Z+38, r26	; 0x26
    13b8:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    13ba:	10 a6       	std	Z+40, r1	; 0x28
    13bc:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 83       	st	Z, r24
    13c2:	08 95       	ret

000013c4 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	1f 92       	push	r1
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    13ee:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    13f2:	87 30       	cpi	r24, 0x07	; 7
    13f4:	31 f4       	brne	.+12     	; 0x1402 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    13f6:	e0 e0       	ldi	r30, 0x00	; 0
    13f8:	f2 e0       	ldi	r31, 0x02	; 2
    13fa:	84 a5       	ldd	r24, Z+44	; 0x2c
    13fc:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    13fe:	95 a5       	ldd	r25, Z+45	; 0x2d
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1402:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    1406:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <PSU_target>
    140a:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    140c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1410:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	0c f4       	brge	.+2      	; 0x141c <__vector_83+0x58>
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	99 23       	and	r25, r25
    141e:	c9 f0       	breq	.+50     	; 0x1452 <__vector_83+0x8e>
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	2a 3f       	cpi	r18, 0xFA	; 250
    1424:	37 40       	sbci	r19, 0x07	; 7
    1426:	08 f0       	brcs	.+2      	; 0x142a <__vector_83+0x66>
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	99 23       	and	r25, r25
    142c:	91 f0       	breq	.+36     	; 0x1452 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    142e:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1432:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1436:	89 30       	cpi	r24, 0x09	; 9
    1438:	1c f4       	brge	.+6      	; 0x1440 <__vector_83+0x7c>
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <__vector_83+0x80>
    1440:	86 e0       	ldi	r24, 0x06	; 6
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	82 0f       	add	r24, r18
    1446:	93 1f       	adc	r25, r19
    1448:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    144c:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1450:	23 c0       	rjmp	.+70     	; 0x1498 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1452:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1456:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	8f 3f       	cpi	r24, 0xFF	; 255
    145e:	0c f0       	brlt	.+2      	; 0x1462 <__vector_83+0x9e>
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	99 23       	and	r25, r25
    1464:	c9 f0       	breq	.+50     	; 0x1498 <__vector_83+0xd4>
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	27 30       	cpi	r18, 0x07	; 7
    146a:	31 05       	cpc	r19, r1
    146c:	08 f4       	brcc	.+2      	; 0x1470 <__vector_83+0xac>
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	99 23       	and	r25, r25
    1472:	91 f0       	breq	.+36     	; 0x1498 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1474:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1478:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    147c:	88 3f       	cpi	r24, 0xF8	; 248
    147e:	1c f0       	brlt	.+6      	; 0x1486 <__vector_83+0xc2>
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <__vector_83+0xc6>
    1486:	86 e0       	ldi	r24, 0x06	; 6
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	48 1b       	sub	r20, r24
    148e:	59 0b       	sbc	r21, r25
    1490:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1494:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1498:	0f 90       	pop	r0
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	9f 91       	pop	r25
    14a4:	8f 91       	pop	r24
    14a6:	5f 91       	pop	r21
    14a8:	4f 91       	pop	r20
    14aa:	3f 91       	pop	r19
    14ac:	2f 91       	pop	r18
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	0f 90       	pop	r0
    14b4:	1f 90       	pop	r1
    14b6:	18 95       	reti

000014b8 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    14b8:	e0 e7       	ldi	r30, 0x70	; 112
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	83 81       	ldd	r24, Z+3	; 0x03
    14be:	8f 7e       	andi	r24, 0xEF	; 239
    14c0:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    14c2:	e0 e4       	ldi	r30, 0x40	; 64
    14c4:	f6 e0       	ldi	r31, 0x06	; 6
    14c6:	80 81       	ld	r24, Z
    14c8:	8a 6a       	ori	r24, 0xAA	; 170
    14ca:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14d0:	88 e5       	ldi	r24, 0x58	; 88
    14d2:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLA = USART_RXCINTLVL_HI_gc;
    14d4:	e0 ea       	ldi	r30, 0xA0	; 160
    14d6:	f8 e0       	ldi	r31, 0x08	; 8
    14d8:	80 e3       	ldi	r24, 0x30	; 48
    14da:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    14dc:	84 ec       	ldi	r24, 0xC4	; 196
    14de:	85 83       	std	Z+5, r24	; 0x05
	#if OVERCLOCK == 48
		USARTC0.BAUDCTRLA = 7;  	//BSEL = fper/(2fbaud) -1;  48/(2*3) - 1 = 7
    14e0:	87 e0       	ldi	r24, 0x07	; 7
    14e2:	86 83       	std	Z+6, r24	; 0x06
	#else
		USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
	#endif
	USARTC0.BAUDCTRLB = 0x00;// USART_BSCALE0_bm goes to 1.5MHz for some reason;
    14e4:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    14e6:	88 e1       	ldi	r24, 0x18	; 24
    14e8:	84 83       	std	Z+4, r24	; 0x04
    14ea:	08 95       	ret

000014ec <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    14ec:	e0 e7       	ldi	r30, 0x70	; 112
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	83 81       	ldd	r24, Z+3	; 0x03
    14f2:	87 7f       	andi	r24, 0xF7	; 247
    14f4:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    14f6:	e0 ec       	ldi	r30, 0xC0	; 192
    14f8:	f8 e0       	ldi	r31, 0x08	; 8
    14fa:	80 e4       	ldi	r24, 0x40	; 64
    14fc:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    14fe:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1500:	88 e5       	ldi	r24, 0x58	; 88
    1502:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1506:	08 95       	ret

00001508 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
	asm("nop");
    1512:	00 00       	nop
}
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <__vector_25>:

ISR(USARTC0_RXC_vect){
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	8f 93       	push	r24
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
	unsigned char temp = USARTC0.DATA;
    152e:	e0 ea       	ldi	r30, 0xA0	; 160
    1530:	f8 e0       	ldi	r31, 0x08	; 8
    1532:	80 81       	ld	r24, Z
	USARTC0.DATA = temp;
    1534:	80 83       	st	Z, r24
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	8f 91       	pop	r24
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1546:	9f b7       	in	r25, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	e8 2f       	mov	r30, r24
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	e0 59       	subi	r30, 0x90	; 144
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	60 95       	com	r22
    1554:	80 81       	ld	r24, Z
    1556:	68 23       	and	r22, r24
    1558:	60 83       	st	Z, r22
    155a:	9f bf       	out	0x3f, r25	; 63
    155c:	08 95       	ret

0000155e <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    155e:	86 30       	cpi	r24, 0x06	; 6
    1560:	11 f0       	breq	.+4      	; 0x1566 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1566:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1568:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    156c:	81 fd       	sbrc	r24, 1
    156e:	26 c0       	rjmp	.+76     	; 0x15bc <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1570:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1572:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1574:	e0 e5       	ldi	r30, 0x50	; 80
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	82 60       	ori	r24, 0x02	; 2
    157c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    157e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1580:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1582:	81 ff       	sbrs	r24, 1
    1584:	fd cf       	rjmp	.-6      	; 0x1580 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1586:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1588:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    158a:	a0 e5       	ldi	r26, 0x50	; 80
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	16 96       	adiw	r26, 0x06	; 6
    1590:	8c 91       	ld	r24, X
    1592:	16 97       	sbiw	r26, 0x06	; 6
    1594:	89 7f       	andi	r24, 0xF9	; 249
    1596:	16 96       	adiw	r26, 0x06	; 6
    1598:	8c 93       	st	X, r24
    159a:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    159c:	e0 e6       	ldi	r30, 0x60	; 96
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 e8       	ldi	r24, 0x80	; 128
    15a2:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    15a4:	8b eb       	ldi	r24, 0xBB	; 187
    15a6:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    15a8:	16 96       	adiw	r26, 0x06	; 6
    15aa:	8c 91       	ld	r24, X
    15ac:	16 97       	sbiw	r26, 0x06	; 6
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	16 96       	adiw	r26, 0x06	; 6
    15b2:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    15b4:	80 81       	ld	r24, Z
    15b6:	81 60       	ori	r24, 0x01	; 1
    15b8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15ba:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    15bc:	63 60       	ori	r22, 0x03	; 3
    15be:	84 e4       	ldi	r24, 0x44	; 68
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	f4 d4       	rcall	.+2536   	; 0x1fac <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    15c4:	60 e4       	ldi	r22, 0x40	; 64
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	be cf       	rjmp	.-132    	; 0x1546 <sysclk_enable_module>
    15ca:	08 95       	ret

000015cc <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    15cc:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <udi_vendor_alternate_setting>
    15d0:	08 95       	ret

000015d2 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    15d2:	1c d1       	rcall	.+568    	; 0x180c <udc_get_interface_desc>
    15d4:	fc 01       	movw	r30, r24
    15d6:	83 81       	ldd	r24, Z+3	; 0x03
    15d8:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    15dc:	81 11       	cpse	r24, r1
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    15e0:	cc c9       	rjmp	.-3176   	; 0x97a <main_vendor_enable>
    15e2:	08 95       	ret
			return false;
		}
	}
	return true;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
}
    15e6:	08 95       	ret

000015e8 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    15e8:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <udi_vendor_alternate_setting>
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    15f0:	01 ca       	rjmp	.-3070   	; 0x9f4 <main_vendor_disable>
    15f2:	08 95       	ret

000015f4 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    15f4:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    15f8:	88 23       	and	r24, r24
    15fa:	4c f4       	brge	.+18     	; 0x160e <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15fc:	80 76       	andi	r24, 0x60	; 96
    15fe:	80 34       	cpi	r24, 0x40	; 64
    1600:	a9 f4       	brne	.+42     	; 0x162c <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1602:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1606:	81 11       	cpse	r24, r1
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    160a:	f9 c9       	rjmp	.-3086   	; 0x9fe <main_setup_in_received>
    160c:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    160e:	80 76       	andi	r24, 0x60	; 96
    1610:	80 34       	cpi	r24, 0x40	; 64
    1612:	81 f4       	brne	.+32     	; 0x1634 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1614:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1618:	81 11       	cpse	r24, r1
    161a:	0e c0       	rjmp	.+28     	; 0x1638 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    161c:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1620:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1624:	89 2b       	or	r24, r25
    1626:	51 f0       	breq	.+20     	; 0x163c <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1628:	e8 c9       	rjmp	.-3120   	; 0x9fa <main_setup_out_received>
    162a:	08 95       	ret
		}
	}
	return false; // Not supported request
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	08 95       	ret
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	08 95       	ret
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	08 95       	ret
    163c:	80 e0       	ldi	r24, 0x00	; 0
}
    163e:	08 95       	ret

00001640 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1640:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1644:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1648:	01 90       	ld	r0, Z+
    164a:	f0 81       	ld	r31, Z
    164c:	e0 2d       	mov	r30, r0
    164e:	22 81       	ldd	r18, Z+2	; 0x02
    1650:	33 81       	ldd	r19, Z+3	; 0x03
    1652:	2e 0f       	add	r18, r30
    1654:	3f 1f       	adc	r19, r31
    1656:	fc 01       	movw	r30, r24
    1658:	40 81       	ld	r20, Z
    165a:	e4 0f       	add	r30, r20
    165c:	f1 1d       	adc	r31, r1
    165e:	e2 17       	cp	r30, r18
    1660:	f3 07       	cpc	r31, r19
    1662:	b8 f4       	brcc	.+46     	; 0x1692 <udc_next_desc_in_iface+0x52>
    1664:	81 81       	ldd	r24, Z+1	; 0x01
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	b9 f0       	breq	.+46     	; 0x1698 <udc_next_desc_in_iface+0x58>
    166a:	86 13       	cpse	r24, r22
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <udc_next_desc_in_iface+0x40>
    166e:	05 c0       	rjmp	.+10     	; 0x167a <udc_next_desc_in_iface+0x3a>
    1670:	81 81       	ldd	r24, Z+1	; 0x01
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	a1 f0       	breq	.+40     	; 0x169e <udc_next_desc_in_iface+0x5e>
    1676:	86 13       	cpse	r24, r22
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <udc_next_desc_in_iface+0x40>
    167a:	8e 2f       	mov	r24, r30
    167c:	9f 2f       	mov	r25, r31
    167e:	08 95       	ret
    1680:	80 81       	ld	r24, Z
    1682:	e8 0f       	add	r30, r24
    1684:	f1 1d       	adc	r31, r1
    1686:	e2 17       	cp	r30, r18
    1688:	f3 07       	cpc	r31, r19
    168a:	90 f3       	brcs	.-28     	; 0x1670 <udc_next_desc_in_iface+0x30>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	08 95       	ret
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	08 95       	ret
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	08 95       	ret
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	08 95       	ret

000016a4 <udc_valid_address>:
    16a4:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    16a8:	8f 77       	andi	r24, 0x7F	; 127
    16aa:	0c 94 91 13 	jmp	0x2722	; 0x2722 <udd_set_address>
    16ae:	08 95       	ret

000016b0 <udc_update_iface_desc>:
    16b0:	90 91 c4 20 	lds	r25, 0x20C4	; 0x8020c4 <udc_num_configuration>
    16b4:	99 23       	and	r25, r25
    16b6:	81 f1       	breq	.+96     	; 0x1718 <udc_update_iface_desc+0x68>
    16b8:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    16bc:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    16c0:	01 90       	ld	r0, Z+
    16c2:	f0 81       	ld	r31, Z
    16c4:	e0 2d       	mov	r30, r0
    16c6:	94 81       	ldd	r25, Z+4	; 0x04
    16c8:	89 17       	cp	r24, r25
    16ca:	40 f5       	brcc	.+80     	; 0x171c <udc_update_iface_desc+0x6c>
    16cc:	e0 93 c0 20 	sts	0x20C0, r30	; 0x8020c0 <udc_ptr_iface>
    16d0:	f0 93 c1 20 	sts	0x20C1, r31	; 0x8020c1 <udc_ptr_iface+0x1>
    16d4:	22 81       	ldd	r18, Z+2	; 0x02
    16d6:	33 81       	ldd	r19, Z+3	; 0x03
    16d8:	2e 0f       	add	r18, r30
    16da:	3f 1f       	adc	r19, r31
    16dc:	e2 17       	cp	r30, r18
    16de:	f3 07       	cpc	r31, r19
    16e0:	f8 f4       	brcc	.+62     	; 0x1720 <udc_update_iface_desc+0x70>
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	94 30       	cpi	r25, 0x04	; 4
    16e6:	61 f4       	brne	.+24     	; 0x1700 <udc_update_iface_desc+0x50>
    16e8:	92 81       	ldd	r25, Z+2	; 0x02
    16ea:	98 13       	cpse	r25, r24
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <udc_update_iface_desc+0x50>
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	96 13       	cpse	r25, r22
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <udc_update_iface_desc+0x50>
    16f4:	e0 93 c0 20 	sts	0x20C0, r30	; 0x8020c0 <udc_ptr_iface>
    16f8:	f0 93 c1 20 	sts	0x20C1, r31	; 0x8020c1 <udc_ptr_iface+0x1>
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	08 95       	ret
    1700:	90 81       	ld	r25, Z
    1702:	e9 0f       	add	r30, r25
    1704:	f1 1d       	adc	r31, r1
    1706:	e2 17       	cp	r30, r18
    1708:	f3 07       	cpc	r31, r19
    170a:	58 f3       	brcs	.-42     	; 0x16e2 <udc_update_iface_desc+0x32>
    170c:	e0 93 c0 20 	sts	0x20C0, r30	; 0x8020c0 <udc_ptr_iface>
    1710:	f0 93 c1 20 	sts	0x20C1, r31	; 0x8020c1 <udc_ptr_iface+0x1>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	08 95       	ret
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	08 95       	ret

00001724 <udc_iface_disable>:
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	c8 2f       	mov	r28, r24
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	be df       	rcall	.-132    	; 0x16b0 <udc_update_iface_desc>
    1734:	18 2f       	mov	r17, r24
    1736:	88 23       	and	r24, r24
    1738:	81 f1       	breq	.+96     	; 0x179a <udc_iface_disable+0x76>
    173a:	a0 91 c2 20 	lds	r26, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    173e:	b0 91 c3 20 	lds	r27, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1742:	ec 2f       	mov	r30, r28
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	ee 0f       	add	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	12 96       	adiw	r26, 0x02	; 2
    174c:	8d 91       	ld	r24, X+
    174e:	9c 91       	ld	r25, X
    1750:	13 97       	sbiw	r26, 0x03	; 3
    1752:	e8 0f       	add	r30, r24
    1754:	f9 1f       	adc	r31, r25
    1756:	e0 80       	ld	r14, Z
    1758:	f1 80       	ldd	r15, Z+1	; 0x01
    175a:	d7 01       	movw	r26, r14
    175c:	16 96       	adiw	r26, 0x06	; 6
    175e:	ed 91       	ld	r30, X+
    1760:	fc 91       	ld	r31, X
    1762:	17 97       	sbiw	r26, 0x07	; 7
    1764:	09 95       	icall
    1766:	68 2f       	mov	r22, r24
    1768:	8c 2f       	mov	r24, r28
    176a:	a2 df       	rcall	.-188    	; 0x16b0 <udc_update_iface_desc>
    176c:	18 2f       	mov	r17, r24
    176e:	88 23       	and	r24, r24
    1770:	a1 f0       	breq	.+40     	; 0x179a <udc_iface_disable+0x76>
    1772:	c0 91 c0 20 	lds	r28, 0x20C0	; 0x8020c0 <udc_ptr_iface>
    1776:	d0 91 c1 20 	lds	r29, 0x20C1	; 0x8020c1 <udc_ptr_iface+0x1>
    177a:	65 e0       	ldi	r22, 0x05	; 5
    177c:	ce 01       	movw	r24, r28
    177e:	60 df       	rcall	.-320    	; 0x1640 <udc_next_desc_in_iface>
    1780:	ec 01       	movw	r28, r24
    1782:	89 2b       	or	r24, r25
    1784:	21 f0       	breq	.+8      	; 0x178e <udc_iface_disable+0x6a>
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	0e 94 5d 15 	call	0x2aba	; 0x2aba <udd_ep_free>
    178c:	f6 cf       	rjmp	.-20     	; 0x177a <udc_iface_disable+0x56>
    178e:	d7 01       	movw	r26, r14
    1790:	12 96       	adiw	r26, 0x02	; 2
    1792:	ed 91       	ld	r30, X+
    1794:	fc 91       	ld	r31, X
    1796:	13 97       	sbiw	r26, 0x03	; 3
    1798:	09 95       	icall
    179a:	81 2f       	mov	r24, r17
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <udc_iface_enable>:
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	18 2f       	mov	r17, r24
    17b0:	7f df       	rcall	.-258    	; 0x16b0 <udc_update_iface_desc>
    17b2:	88 23       	and	r24, r24
    17b4:	39 f1       	breq	.+78     	; 0x1804 <udc_iface_enable+0x5c>
    17b6:	c0 91 c0 20 	lds	r28, 0x20C0	; 0x8020c0 <udc_ptr_iface>
    17ba:	d0 91 c1 20 	lds	r29, 0x20C1	; 0x8020c1 <udc_ptr_iface+0x1>
    17be:	65 e0       	ldi	r22, 0x05	; 5
    17c0:	ce 01       	movw	r24, r28
    17c2:	3e df       	rcall	.-388    	; 0x1640 <udc_next_desc_in_iface>
    17c4:	ec 01       	movw	r28, r24
    17c6:	89 2b       	or	r24, r25
    17c8:	41 f0       	breq	.+16     	; 0x17da <udc_iface_enable+0x32>
    17ca:	4c 81       	ldd	r20, Y+4	; 0x04
    17cc:	5d 81       	ldd	r21, Y+5	; 0x05
    17ce:	6b 81       	ldd	r22, Y+3	; 0x03
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	b4 d7       	rcall	.+3944   	; 0x273c <udd_ep_alloc>
    17d4:	81 11       	cpse	r24, r1
    17d6:	f3 cf       	rjmp	.-26     	; 0x17be <udc_iface_enable+0x16>
    17d8:	15 c0       	rjmp	.+42     	; 0x1804 <udc_iface_enable+0x5c>
    17da:	a0 91 c2 20 	lds	r26, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    17de:	b0 91 c3 20 	lds	r27, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    17e2:	e1 2f       	mov	r30, r17
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	12 96       	adiw	r26, 0x02	; 2
    17ec:	8d 91       	ld	r24, X+
    17ee:	9c 91       	ld	r25, X
    17f0:	13 97       	sbiw	r26, 0x03	; 3
    17f2:	e8 0f       	add	r30, r24
    17f4:	f9 1f       	adc	r31, r25
    17f6:	01 90       	ld	r0, Z+
    17f8:	f0 81       	ld	r31, Z
    17fa:	e0 2d       	mov	r30, r0
    17fc:	01 90       	ld	r0, Z+
    17fe:	f0 81       	ld	r31, Z
    1800:	e0 2d       	mov	r30, r0
    1802:	09 95       	icall
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	08 95       	ret

0000180c <udc_get_interface_desc>:
    180c:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_ptr_iface>
    1810:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <udc_ptr_iface+0x1>
    1814:	08 95       	ret

00001816 <udc_start>:
    1816:	0a c7       	rjmp	.+3604   	; 0x262c <udd_enable>
    1818:	08 95       	ret

0000181a <udc_reset>:
    181a:	cf 93       	push	r28
    181c:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udc_num_configuration>
    1820:	88 23       	and	r24, r24
    1822:	c1 f0       	breq	.+48     	; 0x1854 <udc_reset+0x3a>
    1824:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1828:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    182c:	01 90       	ld	r0, Z+
    182e:	f0 81       	ld	r31, Z
    1830:	e0 2d       	mov	r30, r0
    1832:	84 81       	ldd	r24, Z+4	; 0x04
    1834:	88 23       	and	r24, r24
    1836:	71 f0       	breq	.+28     	; 0x1854 <udc_reset+0x3a>
    1838:	c0 e0       	ldi	r28, 0x00	; 0
    183a:	8c 2f       	mov	r24, r28
    183c:	73 df       	rcall	.-282    	; 0x1724 <udc_iface_disable>
    183e:	cf 5f       	subi	r28, 0xFF	; 255
    1840:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1844:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1848:	01 90       	ld	r0, Z+
    184a:	f0 81       	ld	r31, Z
    184c:	e0 2d       	mov	r30, r0
    184e:	84 81       	ldd	r24, Z+4	; 0x04
    1850:	c8 17       	cp	r28, r24
    1852:	98 f3       	brcs	.-26     	; 0x183a <udc_reset+0x20>
    1854:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <udc_num_configuration>
    1858:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <udc_device_status>
    185c:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <udc_device_status+0x1>
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1864:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1866:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udc_num_configuration>
    186a:	88 23       	and	r24, r24
    186c:	49 f1       	breq	.+82     	; 0x18c0 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    186e:	a0 91 c2 20 	lds	r26, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1872:	b0 91 c3 20 	lds	r27, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    187c:	84 81       	ldd	r24, Z+4	; 0x04
    187e:	88 23       	and	r24, r24
    1880:	f9 f0       	breq	.+62     	; 0x18c0 <udc_sof_notify+0x5c>
    1882:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1884:	ec 2f       	mov	r30, r28
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	e8 0f       	add	r30, r24
    1896:	f9 1f       	adc	r31, r25
    1898:	01 90       	ld	r0, Z+
    189a:	f0 81       	ld	r31, Z
    189c:	e0 2d       	mov	r30, r0
    189e:	00 84       	ldd	r0, Z+8	; 0x08
    18a0:	f1 85       	ldd	r31, Z+9	; 0x09
    18a2:	e0 2d       	mov	r30, r0
    18a4:	30 97       	sbiw	r30, 0x00	; 0
    18a6:	09 f0       	breq	.+2      	; 0x18aa <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    18a8:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    18aa:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18ac:	a0 91 c2 20 	lds	r26, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    18b0:	b0 91 c3 20 	lds	r27, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    18b4:	ed 91       	ld	r30, X+
    18b6:	fc 91       	ld	r31, X
    18b8:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18ba:	84 81       	ldd	r24, Z+4	; 0x04
    18bc:	c8 17       	cp	r28, r24
    18be:	10 f3       	brcs	.-60     	; 0x1884 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    18c0:	cf 91       	pop	r28
    18c2:	08 95       	ret

000018c4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    18cc:	ea eb       	ldi	r30, 0xBA	; 186
    18ce:	f5 e2       	ldi	r31, 0x25	; 37
    18d0:	12 86       	std	Z+10, r1	; 0x0a
    18d2:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    18d4:	14 86       	std	Z+12, r1	; 0x0c
    18d6:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    18d8:	16 86       	std	Z+14, r1	; 0x0e
    18da:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	88 23       	and	r24, r24
    18e2:	3c f4       	brge	.+14     	; 0x18f2 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    18e4:	40 91 c0 25 	lds	r20, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    18e8:	50 91 c1 25 	lds	r21, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    18ec:	45 2b       	or	r20, r21
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <udc_process_setup+0x2e>
    18f0:	51 c3       	rjmp	.+1698   	; 0x1f94 <udc_process_setup+0x6d0>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    18f2:	98 2f       	mov	r25, r24
    18f4:	90 76       	andi	r25, 0x60	; 96
    18f6:	90 34       	cpi	r25, 0x40	; 64
    18f8:	09 f0       	breq	.+2      	; 0x18fc <udc_process_setup+0x38>
    18fa:	f2 c0       	rjmp	.+484    	; 0x1ae0 <udc_process_setup+0x21c>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    18fc:	e0 91 bb 25 	lds	r30, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1900:	4e 2f       	mov	r20, r30
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	fa 01       	movw	r30, r20
    1906:	e0 5a       	subi	r30, 0xA0	; 160
    1908:	f1 09       	sbc	r31, r1
    190a:	e9 30       	cpi	r30, 0x09	; 9
    190c:	f1 05       	cpc	r31, r1
    190e:	08 f0       	brcs	.+2      	; 0x1912 <udc_process_setup+0x4e>
    1910:	e7 c0       	rjmp	.+462    	; 0x1ae0 <udc_process_setup+0x21c>
    1912:	ea 5f       	subi	r30, 0xFA	; 250
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    1920:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1924:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1928:	ee e9       	ldi	r30, 0x9E	; 158
    192a:	f3 e2       	ldi	r31, 0x23	; 35
    192c:	85 87       	std	Z+13, r24	; 0x0d
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    192e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1932:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1936:	96 87       	std	Z+14, r25	; 0x0e
			uds.calValNeg = cali_value_negative_gradient;
    1938:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <cali_value_negative_gradient>
    193c:	87 87       	std	Z+15, r24	; 0x0f
			uds.calValPos = cali_value_positive_gradient;
    193e:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <cali_value_positive_gradient>
    1942:	80 8b       	std	Z+16, r24	; 0x10
			uds.CALA = DFLLRC2M.CALA;
    1944:	a8 e6       	ldi	r26, 0x68	; 104
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	12 96       	adiw	r26, 0x02	; 2
    194a:	8c 91       	ld	r24, X
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	81 8b       	std	Z+17, r24	; 0x11
			uds.CALB = DFLLRC2M.CALB;
    1950:	13 96       	adiw	r26, 0x03	; 3
    1952:	8c 91       	ld	r24, X
    1954:	82 8b       	std	Z+18, r24	; 0x12
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    1956:	60 91 c0 25 	lds	r22, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    195a:	70 91 c1 25 	lds	r23, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    195e:	cf 01       	movw	r24, r30
    1960:	e6 d6       	rcall	.+3532   	; 0x272e <udd_set_setup_payload>
    1962:	1c c3       	rjmp	.+1592   	; 0x1f9c <udc_process_setup+0x6d8>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1964:	e0 e0       	ldi	r30, 0x00	; 0
    1966:	f8 e0       	ldi	r31, 0x08	; 8
    1968:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    196a:	ca eb       	ldi	r28, 0xBA	; 186
    196c:	d5 e2       	ldi	r29, 0x25	; 37
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	9b 81       	ldd	r25, Y+3	; 0x03
    1972:	86 ab       	std	Z+54, r24	; 0x36
    1974:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	8f 70       	andi	r24, 0x0F	; 15
    197a:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    197c:	6e 81       	ldd	r22, Y+6	; 0x06
    197e:	7f 81       	ldd	r23, Y+7	; 0x07
    1980:	8a eb       	ldi	r24, 0xBA	; 186
    1982:	93 e2       	ldi	r25, 0x23	; 35
    1984:	d4 d6       	rcall	.+3496   	; 0x272e <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	9f 81       	ldd	r25, Y+7	; 0x07
    198a:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    198e:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1992:	82 17       	cp	r24, r18
    1994:	93 07       	cpc	r25, r19
    1996:	09 f4       	brne	.+2      	; 0x199a <udc_process_setup+0xd6>
    1998:	01 c3       	rjmp	.+1538   	; 0x1f9c <udc_process_setup+0x6d8>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    199a:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    199e:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				tiny_dma_delayed_set(global_mode);
    19a2:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19a6:	f3 d8       	rcall	.-3610   	; 0xb8e <tiny_dma_delayed_set>
    19a8:	f9 c2       	rjmp	.+1522   	; 0x1f9c <udc_process_setup+0x6d8>
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    19aa:	e0 e4       	ldi	r30, 0x40	; 64
    19ac:	f8 e0       	ldi	r31, 0x08	; 8
    19ae:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    19b0:	ca eb       	ldi	r28, 0xBA	; 186
    19b2:	d5 e2       	ldi	r29, 0x25	; 37
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	86 ab       	std	Z+54, r24	; 0x36
    19ba:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	8f 70       	andi	r24, 0x0F	; 15
    19c0:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    19c2:	6e 81       	ldd	r22, Y+6	; 0x06
    19c4:	7f 81       	ldd	r23, Y+7	; 0x07
    19c6:	8b ec       	ldi	r24, 0xCB	; 203
    19c8:	95 e2       	ldi	r25, 0x25	; 37
    19ca:	b1 d6       	rcall	.+3426   	; 0x272e <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    19d4:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    19d8:	82 17       	cp	r24, r18
    19da:	93 07       	cpc	r25, r19
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <udc_process_setup+0x11c>
    19de:	de c2       	rjmp	.+1468   	; 0x1f9c <udc_process_setup+0x6d8>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    19e0:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    19e4:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				tiny_dma_delayed_set(global_mode);
    19e8:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19ec:	d0 d8       	rcall	.-3680   	; 0xb8e <tiny_dma_delayed_set>
    19ee:	d6 c2       	rjmp	.+1452   	; 0x1f9c <udc_process_setup+0x6d8>
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    19f0:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    19f4:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    19f8:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    19fc:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <PSU_target>
    1a00:	cd c2       	rjmp	.+1434   	; 0x1f9c <udc_process_setup+0x6d8>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1a02:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a06:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1a0a:	c8 c2       	rjmp	.+1424   	; 0x1f9c <udc_process_setup+0x6d8>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1a0c:	e0 91 bc 25 	lds	r30, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a10:	f0 91 bd 25 	lds	r31, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1a14:	e8 30       	cpi	r30, 0x08	; 8
    1a16:	f1 05       	cpc	r31, r1
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <udc_process_setup+0x158>
    1a1a:	62 c0       	rjmp	.+196    	; 0x1ae0 <udc_process_setup+0x21c>
    1a1c:	e1 5f       	subi	r30, 0xF1	; 241
    1a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a20:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	18 d8       	rcall	.-4048   	; 0xa5a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a2a:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a2e:	0e 94 01 05 	call	0xa02	; 0xa02 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(0);
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	ac d8       	rcall	.-3752   	; 0xb8e <tiny_dma_delayed_set>
    1a36:	b2 c2       	rjmp	.+1380   	; 0x1f9c <udc_process_setup+0x6d8>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	0e d8       	rcall	.-4068   	; 0xa5a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a3e:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a42:	0e 94 01 05 	call	0xa02	; 0xa02 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(1);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	a2 d8       	rcall	.-3772   	; 0xb8e <tiny_dma_delayed_set>
    1a4a:	a8 c2       	rjmp	.+1360   	; 0x1f9c <udc_process_setup+0x6d8>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	04 d8       	rcall	.-4088   	; 0xa5a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a52:	ca eb       	ldi	r28, 0xBA	; 186
    1a54:	d5 e2       	ldi	r29, 0x25	; 37
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	0e 94 01 05 	call	0xa02	; 0xa02 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	0e 94 10 05 	call	0xa20	; 0xa20 <tiny_adc_ch1setup>
					tiny_dma_delayed_set(2);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	94 d8       	rcall	.-3800   	; 0xb8e <tiny_dma_delayed_set>
    1a66:	9a c2       	rjmp	.+1332   	; 0x1f9c <udc_process_setup+0x6d8>
					break;
				case 3:  //Mode 3
					tiny_dma_delayed_set(3);
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	91 d8       	rcall	.-3806   	; 0xb8e <tiny_dma_delayed_set>
    1a6c:	97 c2       	rjmp	.+1326   	; 0x1f9c <udc_process_setup+0x6d8>
					break;
				case 4:  //Mode 4
					tiny_dma_delayed_set(4);
    1a6e:	84 e0       	ldi	r24, 0x04	; 4
    1a70:	8e d8       	rcall	.-3812   	; 0xb8e <tiny_dma_delayed_set>
    1a72:	94 c2       	rjmp	.+1320   	; 0x1f9c <udc_process_setup+0x6d8>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	0e 94 2d 05 	call	0xa5a	; 0xa5a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a7c:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a80:	0e 94 01 05 	call	0xa02	; 0xa02 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(5);
    1a84:	85 e0       	ldi	r24, 0x05	; 5
    1a86:	83 d8       	rcall	.-3834   	; 0xb8e <tiny_dma_delayed_set>
    1a88:	89 c2       	rjmp	.+1298   	; 0x1f9c <udc_process_setup+0x6d8>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a92:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a96:	0e 94 01 05 	call	0xa02	; 0xa02 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(6);
    1a9a:	86 e0       	ldi	r24, 0x06	; 6
    1a9c:	78 d8       	rcall	.-3856   	; 0xb8e <tiny_dma_delayed_set>
    1a9e:	7e c2       	rjmp	.+1276   	; 0x1f9c <udc_process_setup+0x6d8>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1aa0:	62 e0       	ldi	r22, 0x02	; 2
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1aa8:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	0e 94 01 05 	call	0xa02	; 0xa02 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(7);
    1ab2:	87 e0       	ldi	r24, 0x07	; 7
    1ab4:	6c d8       	rcall	.-3880   	; 0xb8e <tiny_dma_delayed_set>
    1ab6:	72 c2       	rjmp	.+1252   	; 0x1f9c <udc_process_setup+0x6d8>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1ab8:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1abc:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1ac0:	6d c2       	rjmp	.+1242   	; 0x1f9c <udc_process_setup+0x6d8>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1ac2:	e9 e7       	ldi	r30, 0x79	; 121
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	88 ed       	ldi	r24, 0xD8	; 216
    1aca:	f8 94       	cli
    1acc:	84 bf       	out	0x34, r24	; 52
    1ace:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		case 0xa8:  //Firmware Version Request
			udd_set_setup_payload(&firmver, udd_g_ctrlreq.req.wLength);
    1ad0:	60 91 c0 25 	lds	r22, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1ad4:	70 91 c1 25 	lds	r23, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1ad8:	8a ea       	ldi	r24, 0xAA	; 170
    1ada:	90 e2       	ldi	r25, 0x20	; 32
    1adc:	28 d6       	rcall	.+3152   	; 0x272e <udd_set_setup_payload>
    1ade:	5e c2       	rjmp	.+1212   	; 0x1f9c <udc_process_setup+0x6d8>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1ae0:	91 11       	cpse	r25, r1
    1ae2:	e1 c1       	rjmp	.+962    	; 0x1ea6 <udc_process_setup+0x5e2>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1ae4:	22 23       	and	r18, r18
    1ae6:	0c f0       	brlt	.+2      	; 0x1aea <udc_process_setup+0x226>
    1ae8:	05 c1       	rjmp	.+522    	; 0x1cf4 <udc_process_setup+0x430>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1aea:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1aee:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1af2:	21 15       	cp	r18, r1
    1af4:	31 05       	cpc	r19, r1
    1af6:	09 f4       	brne	.+2      	; 0x1afa <udc_process_setup+0x236>
    1af8:	d6 c1       	rjmp	.+940    	; 0x1ea6 <udc_process_setup+0x5e2>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1afa:	8f 71       	andi	r24, 0x1F	; 31
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <udc_process_setup+0x23c>
    1afe:	a3 c0       	rjmp	.+326    	; 0x1c46 <udc_process_setup+0x382>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b00:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1b04:	96 30       	cpi	r25, 0x06	; 6
    1b06:	79 f0       	breq	.+30     	; 0x1b26 <udc_process_setup+0x262>
    1b08:	98 30       	cpi	r25, 0x08	; 8
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <udc_process_setup+0x24a>
    1b0c:	92 c0       	rjmp	.+292    	; 0x1c32 <udc_process_setup+0x36e>
    1b0e:	91 11       	cpse	r25, r1
    1b10:	9a c0       	rjmp	.+308    	; 0x1c46 <udc_process_setup+0x382>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1b12:	22 30       	cpi	r18, 0x02	; 2
    1b14:	31 05       	cpc	r19, r1
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <udc_process_setup+0x256>
    1b18:	c6 c1       	rjmp	.+908    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e2       	ldi	r25, 0x20	; 32
    1b22:	05 d6       	rcall	.+3082   	; 0x272e <udd_set_setup_payload>
    1b24:	3d c2       	rjmp	.+1146   	; 0x1fa0 <udc_process_setup+0x6dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b26:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1b2a:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b2e:	29 2f       	mov	r18, r25
    1b30:	33 27       	eor	r19, r19
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	a9 f0       	breq	.+42     	; 0x1b62 <udc_process_setup+0x29e>
    1b38:	24 f4       	brge	.+8      	; 0x1b42 <udc_process_setup+0x27e>
    1b3a:	21 30       	cpi	r18, 0x01	; 1
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	41 f0       	breq	.+16     	; 0x1b50 <udc_process_setup+0x28c>
    1b40:	a9 c1       	rjmp	.+850    	; 0x1e94 <udc_process_setup+0x5d0>
    1b42:	23 30       	cpi	r18, 0x03	; 3
    1b44:	31 05       	cpc	r19, r1
    1b46:	d9 f1       	breq	.+118    	; 0x1bbe <udc_process_setup+0x2fa>
    1b48:	2f 30       	cpi	r18, 0x0F	; 15
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	51 f1       	breq	.+84     	; 0x1ba2 <udc_process_setup+0x2de>
    1b4e:	a2 c1       	rjmp	.+836    	; 0x1e94 <udc_process_setup+0x5d0>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1b50:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1b54:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1b58:	dc 01       	movw	r26, r24
    1b5a:	6c 91       	ld	r22, X
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	e7 d5       	rcall	.+3022   	; 0x272e <udd_set_setup_payload>
    1b60:	59 c0       	rjmp	.+178    	; 0x1c14 <udc_process_setup+0x350>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1b62:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1b66:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1b6a:	21 89       	ldd	r18, Z+17	; 0x11
    1b6c:	82 17       	cp	r24, r18
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <udc_process_setup+0x2ae>
    1b70:	9a c1       	rjmp	.+820    	; 0x1ea6 <udc_process_setup+0x5e2>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1b72:	99 27       	eor	r25, r25
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1b80:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1b84:	e8 0f       	add	r30, r24
    1b86:	f9 1f       	adc	r31, r25
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	62 81       	ldd	r22, Z+2	; 0x02
    1b90:	73 81       	ldd	r23, Z+3	; 0x03
    1b92:	cd d5       	rcall	.+2970   	; 0x272e <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1b94:	e0 91 c2 25 	lds	r30, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    1b98:	f0 91 c3 25 	lds	r31, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	81 83       	std	Z+1, r24	; 0x01
    1ba0:	39 c0       	rjmp	.+114    	; 0x1c14 <udc_process_setup+0x350>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1ba2:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1ba6:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <udc_process_setup+0x2ec>
    1bae:	7b c1       	rjmp	.+758    	; 0x1ea6 <udc_process_setup+0x5e2>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	6d 91       	ld	r22, X+
    1bb6:	7c 91       	ld	r23, X
    1bb8:	13 97       	sbiw	r26, 0x03	; 3
    1bba:	b9 d5       	rcall	.+2930   	; 0x272e <udd_set_setup_payload>
    1bbc:	2b c0       	rjmp	.+86     	; 0x1c14 <udc_process_setup+0x350>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1bbe:	99 27       	eor	r25, r25
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	71 f0       	breq	.+28     	; 0x1be2 <udc_process_setup+0x31e>
    1bc6:	38 f0       	brcs	.+14     	; 0x1bd6 <udc_process_setup+0x312>
    1bc8:	02 97       	sbiw	r24, 0x02	; 2
    1bca:	09 f0       	breq	.+2      	; 0x1bce <udc_process_setup+0x30a>
    1bcc:	6c c1       	rjmp	.+728    	; 0x1ea6 <udc_process_setup+0x5e2>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1bce:	2a e8       	ldi	r18, 0x8A	; 138
    1bd0:	30 e2       	ldi	r19, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1bd2:	88 e0       	ldi	r24, 0x08	; 8
    1bd4:	09 c0       	rjmp	.+18     	; 0x1be8 <udc_process_setup+0x324>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1bd6:	64 e0       	ldi	r22, 0x04	; 4
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	8c e9       	ldi	r24, 0x9C	; 156
    1bdc:	90 e2       	ldi	r25, 0x20	; 32
    1bde:	a7 d5       	rcall	.+2894   	; 0x272e <udd_set_setup_payload>
    1be0:	19 c0       	rjmp	.+50     	; 0x1c14 <udc_process_setup+0x350>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1be2:	23 e9       	ldi	r18, 0x93	; 147
    1be4:	30 e2       	ldi	r19, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1be6:	87 e0       	ldi	r24, 0x07	; 7
    1be8:	42 2f       	mov	r20, r18
    1bea:	aa e7       	ldi	r26, 0x7A	; 122
    1bec:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1bee:	e2 2f       	mov	r30, r18
    1bf0:	f3 2f       	mov	r31, r19
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1bf2:	21 91       	ld	r18, Z+
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	2d 93       	st	X+, r18
    1bf8:	3d 93       	st	X+, r19
    1bfa:	9e 2f       	mov	r25, r30
    1bfc:	94 1b       	sub	r25, r20
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1bfe:	98 17       	cp	r25, r24
    1c00:	c0 f3       	brcs	.-16     	; 0x1bf2 <udc_process_setup+0x32e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1c02:	68 2f       	mov	r22, r24
    1c04:	66 0f       	add	r22, r22
    1c06:	6e 5f       	subi	r22, 0xFE	; 254
    1c08:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	88 e7       	ldi	r24, 0x78	; 120
    1c10:	90 e2       	ldi	r25, 0x20	; 32
    1c12:	8d d5       	rcall	.+2842   	; 0x272e <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1c14:	ea eb       	ldi	r30, 0xBA	; 186
    1c16:	f5 e2       	ldi	r31, 0x25	; 37
    1c18:	86 81       	ldd	r24, Z+6	; 0x06
    1c1a:	97 81       	ldd	r25, Z+7	; 0x07
    1c1c:	22 85       	ldd	r18, Z+10	; 0x0a
    1c1e:	33 85       	ldd	r19, Z+11	; 0x0b
    1c20:	82 17       	cp	r24, r18
    1c22:	93 07       	cpc	r25, r19
    1c24:	08 f0       	brcs	.+2      	; 0x1c28 <udc_process_setup+0x364>
    1c26:	bc c1       	rjmp	.+888    	; 0x1fa0 <udc_process_setup+0x6dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1c28:	80 93 c4 25 	sts	0x25C4, r24	; 0x8025c4 <udd_g_ctrlreq+0xa>
    1c2c:	90 93 c5 25 	sts	0x25C5, r25	; 0x8025c5 <udd_g_ctrlreq+0xb>
    1c30:	b7 c1       	rjmp	.+878    	; 0x1fa0 <udc_process_setup+0x6dc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1c32:	21 30       	cpi	r18, 0x01	; 1
    1c34:	31 05       	cpc	r19, r1
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <udc_process_setup+0x376>
    1c38:	36 c1       	rjmp	.+620    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	84 ec       	ldi	r24, 0xC4	; 196
    1c40:	90 e2       	ldi	r25, 0x20	; 32
    1c42:	75 d5       	rcall	.+2794   	; 0x272e <udd_set_setup_payload>
    1c44:	ad c1       	rjmp	.+858    	; 0x1fa0 <udc_process_setup+0x6dc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	e1 f5       	brne	.+120    	; 0x1cc2 <udc_process_setup+0x3fe>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c4a:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1c4e:	9a 30       	cpi	r25, 0x0A	; 10
    1c50:	c1 f5       	brne	.+112    	; 0x1cc2 <udc_process_setup+0x3fe>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1c52:	21 30       	cpi	r18, 0x01	; 1
    1c54:	31 05       	cpc	r19, r1
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <udc_process_setup+0x396>
    1c58:	26 c1       	rjmp	.+588    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c5a:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udc_num_configuration>
    1c5e:	88 23       	and	r24, r24
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <udc_process_setup+0x3a0>
    1c62:	21 c1       	rjmp	.+578    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c64:	c0 91 be 25 	lds	r28, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1c68:	d0 91 bf 25 	lds	r29, 0x25BF	; 0x8025bf <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c6c:	00 91 c2 20 	lds	r16, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1c70:	10 91 c3 20 	lds	r17, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1c74:	d8 01       	movw	r26, r16
    1c76:	ed 91       	ld	r30, X+
    1c78:	fc 91       	ld	r31, X
    1c7a:	84 81       	ldd	r24, Z+4	; 0x04
    1c7c:	c8 17       	cp	r28, r24
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <udc_process_setup+0x3be>
    1c80:	12 c1       	rjmp	.+548    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	8c 2f       	mov	r24, r28
    1c86:	14 dd       	rcall	.-1496   	; 0x16b0 <udc_update_iface_desc>
    1c88:	88 23       	and	r24, r24
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <udc_process_setup+0x3ca>
    1c8c:	0c c1       	rjmp	.+536    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c8e:	ce 01       	movw	r24, r28
    1c90:	99 27       	eor	r25, r25
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	d8 01       	movw	r26, r16
    1c98:	12 96       	adiw	r26, 0x02	; 2
    1c9a:	ed 91       	ld	r30, X+
    1c9c:	fc 91       	ld	r31, X
    1c9e:	13 97       	sbiw	r26, 0x03	; 3
    1ca0:	e8 0f       	add	r30, r24
    1ca2:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1ca4:	01 90       	ld	r0, Z+
    1ca6:	f0 81       	ld	r31, Z
    1ca8:	e0 2d       	mov	r30, r0
    1caa:	86 81       	ldd	r24, Z+6	; 0x06
    1cac:	97 81       	ldd	r25, Z+7	; 0x07
    1cae:	fc 01       	movw	r30, r24
    1cb0:	09 95       	icall
    1cb2:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	86 ec       	ldi	r24, 0xC6	; 198
    1cbc:	90 e2       	ldi	r25, 0x20	; 32
    1cbe:	37 d5       	rcall	.+2670   	; 0x272e <udd_set_setup_payload>
    1cc0:	6f c1       	rjmp	.+734    	; 0x1fa0 <udc_process_setup+0x6dc>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1cc2:	82 30       	cpi	r24, 0x02	; 2
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <udc_process_setup+0x404>
    1cc6:	ef c0       	rjmp	.+478    	; 0x1ea6 <udc_process_setup+0x5e2>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cc8:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	e4 c0       	rjmp	.+456    	; 0x1e98 <udc_process_setup+0x5d4>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1cd0:	22 30       	cpi	r18, 0x02	; 2
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <udc_process_setup+0x414>
    1cd6:	e7 c0       	rjmp	.+462    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1cd8:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1cdc:	9b d5       	rcall	.+2870   	; 0x2814 <udd_ep_is_halted>
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <udc_ep_status.5555>
    1ce4:	90 93 bf 20 	sts	0x20BF, r25	; 0x8020bf <udc_ep_status.5555+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	8e eb       	ldi	r24, 0xBE	; 190
    1cee:	90 e2       	ldi	r25, 0x20	; 32
    1cf0:	1e d5       	rcall	.+2620   	; 0x272e <udd_set_setup_payload>
    1cf2:	56 c1       	rjmp	.+684    	; 0x1fa0 <udc_process_setup+0x6dc>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1cf4:	8f 71       	andi	r24, 0x1F	; 31
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <udc_process_setup+0x436>
    1cf8:	83 c0       	rjmp	.+262    	; 0x1e00 <udc_process_setup+0x53c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cfa:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1cfe:	93 30       	cpi	r25, 0x03	; 3
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <udc_process_setup+0x440>
    1d02:	cc c0       	rjmp	.+408    	; 0x1e9c <udc_process_setup+0x5d8>
    1d04:	18 f4       	brcc	.+6      	; 0x1d0c <udc_process_setup+0x448>
    1d06:	91 30       	cpi	r25, 0x01	; 1
    1d08:	a1 f0       	breq	.+40     	; 0x1d32 <udc_process_setup+0x46e>
    1d0a:	7a c0       	rjmp	.+244    	; 0x1e00 <udc_process_setup+0x53c>
    1d0c:	95 30       	cpi	r25, 0x05	; 5
    1d0e:	19 f0       	breq	.+6      	; 0x1d16 <udc_process_setup+0x452>
    1d10:	99 30       	cpi	r25, 0x09	; 9
    1d12:	39 f1       	breq	.+78     	; 0x1d62 <udc_process_setup+0x49e>
    1d14:	75 c0       	rjmp	.+234    	; 0x1e00 <udc_process_setup+0x53c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d16:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d1a:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d1e:	89 2b       	or	r24, r25
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <udc_process_setup+0x460>
    1d22:	c1 c0       	rjmp	.+386    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1d24:	82 e5       	ldi	r24, 0x52	; 82
    1d26:	9b e0       	ldi	r25, 0x0B	; 11
    1d28:	80 93 c6 25 	sts	0x25C6, r24	; 0x8025c6 <udd_g_ctrlreq+0xc>
    1d2c:	90 93 c7 25 	sts	0x25C7, r25	; 0x8025c7 <udd_g_ctrlreq+0xd>
    1d30:	37 c1       	rjmp	.+622    	; 0x1fa0 <udc_process_setup+0x6dc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d32:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d36:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d3a:	89 2b       	or	r24, r25
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <udc_process_setup+0x47c>
    1d3e:	b3 c0       	rjmp	.+358    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1d40:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d44:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <udc_process_setup+0x48a>
    1d4c:	ac c0       	rjmp	.+344    	; 0x1ea6 <udc_process_setup+0x5e2>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1d4e:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <udc_device_status>
    1d52:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <udc_device_status+0x1>
    1d56:	8d 7f       	andi	r24, 0xFD	; 253
    1d58:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <udc_device_status>
    1d5c:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <udc_device_status+0x1>
    1d60:	1f c1       	rjmp	.+574    	; 0x1fa0 <udc_process_setup+0x6dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1d62:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d66:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d6a:	89 2b       	or	r24, r25
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <udc_process_setup+0x4ac>
    1d6e:	9b c0       	rjmp	.+310    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1d70:	db d4       	rcall	.+2486   	; 0x2728 <udd_getaddress>
    1d72:	88 23       	and	r24, r24
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <udc_process_setup+0x4b4>
    1d76:	97 c0       	rjmp	.+302    	; 0x1ea6 <udc_process_setup+0x5e2>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d78:	20 91 bc 25 	lds	r18, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d7c:	30 91 bd 25 	lds	r19, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1d80:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1d82:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1d86:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d8a:	81 89       	ldd	r24, Z+17	; 0x11
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	82 17       	cp	r24, r18
    1d90:	93 07       	cpc	r25, r19
    1d92:	08 f4       	brcc	.+2      	; 0x1d96 <udc_process_setup+0x4d2>
    1d94:	88 c0       	rjmp	.+272    	; 0x1ea6 <udc_process_setup+0x5e2>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1d96:	41 dd       	rcall	.-1406   	; 0x181a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1d98:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d9c:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1da0:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1da4:	88 23       	and	r24, r24
    1da6:	09 f4       	brne	.+2      	; 0x1daa <udc_process_setup+0x4e6>
    1da8:	fb c0       	rjmp	.+502    	; 0x1fa0 <udc_process_setup+0x6dc>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1daa:	99 27       	eor	r25, r25
    1dac:	81 50       	subi	r24, 0x01	; 1
    1dae:	90 4c       	sbci	r25, 0xC0	; 192
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1dbc:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1dc0:	e8 0f       	add	r30, r24
    1dc2:	f9 1f       	adc	r31, r25
    1dc4:	e0 93 c2 20 	sts	0x20C2, r30	; 0x8020c2 <udc_ptr_conf>
    1dc8:	f0 93 c3 20 	sts	0x20C3, r31	; 0x8020c3 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dcc:	01 90       	ld	r0, Z+
    1dce:	f0 81       	ld	r31, Z
    1dd0:	e0 2d       	mov	r30, r0
    1dd2:	84 81       	ldd	r24, Z+4	; 0x04
    1dd4:	88 23       	and	r24, r24
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <udc_process_setup+0x516>
    1dd8:	e3 c0       	rjmp	.+454    	; 0x1fa0 <udc_process_setup+0x6dc>
    1dda:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	8c 2f       	mov	r24, r28
    1de0:	e3 dc       	rcall	.-1594   	; 0x17a8 <udc_iface_enable>
    1de2:	88 23       	and	r24, r24
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <udc_process_setup+0x524>
    1de6:	5f c0       	rjmp	.+190    	; 0x1ea6 <udc_process_setup+0x5e2>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1de8:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dea:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1dee:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1df2:	01 90       	ld	r0, Z+
    1df4:	f0 81       	ld	r31, Z
    1df6:	e0 2d       	mov	r30, r0
    1df8:	84 81       	ldd	r24, Z+4	; 0x04
    1dfa:	c8 17       	cp	r28, r24
    1dfc:	78 f3       	brcs	.-34     	; 0x1ddc <udc_process_setup+0x518>
    1dfe:	d0 c0       	rjmp	.+416    	; 0x1fa0 <udc_process_setup+0x6dc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	e1 f4       	brne	.+56     	; 0x1e3c <udc_process_setup+0x578>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e04:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1e08:	9b 30       	cpi	r25, 0x0B	; 11
    1e0a:	c1 f4       	brne	.+48     	; 0x1e3c <udc_process_setup+0x578>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1e0c:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e10:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e14:	89 2b       	or	r24, r25
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <udc_process_setup+0x556>
    1e18:	46 c0       	rjmp	.+140    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1e1a:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udc_num_configuration>
    1e1e:	88 23       	and	r24, r24
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <udc_process_setup+0x560>
    1e22:	41 c0       	rjmp	.+130    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e24:	ea eb       	ldi	r30, 0xBA	; 186
    1e26:	f5 e2       	ldi	r31, 0x25	; 37
    1e28:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1e2a:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1e2c:	8c 2f       	mov	r24, r28
    1e2e:	7a dc       	rcall	.-1804   	; 0x1724 <udc_iface_disable>
    1e30:	88 23       	and	r24, r24
    1e32:	c9 f1       	breq	.+114    	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1e34:	6d 2f       	mov	r22, r29
    1e36:	8c 2f       	mov	r24, r28
    1e38:	b7 dc       	rcall	.-1682   	; 0x17a8 <udc_iface_enable>
    1e3a:	33 c0       	rjmp	.+102    	; 0x1ea2 <udc_process_setup+0x5de>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e3c:	82 30       	cpi	r24, 0x02	; 2
    1e3e:	99 f5       	brne	.+102    	; 0x1ea6 <udc_process_setup+0x5e2>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e40:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	19 f0       	breq	.+6      	; 0x1e4e <udc_process_setup+0x58a>
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	89 f0       	breq	.+34     	; 0x1e6e <udc_process_setup+0x5aa>
    1e4c:	29 c0       	rjmp	.+82     	; 0x1ea0 <udc_process_setup+0x5dc>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e4e:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e52:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e56:	89 2b       	or	r24, r25
    1e58:	31 f5       	brne	.+76     	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e5a:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1e5e:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1e62:	89 2b       	or	r24, r25
    1e64:	01 f5       	brne	.+64     	; 0x1ea6 <udc_process_setup+0x5e2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e66:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1e6a:	ef d4       	rcall	.+2526   	; 0x284a <udd_ep_clear_halt>
    1e6c:	1a c0       	rjmp	.+52     	; 0x1ea2 <udc_process_setup+0x5de>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e6e:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e72:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e76:	89 2b       	or	r24, r25
    1e78:	b1 f4       	brne	.+44     	; 0x1ea6 <udc_process_setup+0x5e2>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e7a:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1e7e:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1e82:	89 2b       	or	r24, r25
    1e84:	81 f4       	brne	.+32     	; 0x1ea6 <udc_process_setup+0x5e2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e86:	ca eb       	ldi	r28, 0xBA	; 186
    1e88:	d5 e2       	ldi	r29, 0x25	; 37
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	cd d5       	rcall	.+2970   	; 0x2a28 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	30 d6       	rcall	.+3168   	; 0x2af2 <udd_ep_set_halt>
    1e92:	07 c0       	rjmp	.+14     	; 0x1ea2 <udc_process_setup+0x5de>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	05 c0       	rjmp	.+10     	; 0x1ea2 <udc_process_setup+0x5de>
				break;
			}
		}
#endif
	}
	return false;
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	03 c0       	rjmp	.+6      	; 0x1ea2 <udc_process_setup+0x5de>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	01 c0       	rjmp	.+2      	; 0x1ea2 <udc_process_setup+0x5de>
				break;
			}
		}
#endif
	}
	return false;
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1ea2:	81 11       	cpse	r24, r1
    1ea4:	7e c0       	rjmp	.+252    	; 0x1fa2 <udc_process_setup+0x6de>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1ea6:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1eaa:	8f 71       	andi	r24, 0x1F	; 31
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	71 f5       	brne	.+92     	; 0x1f0c <udc_process_setup+0x648>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1eb0:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udc_num_configuration>
    1eb4:	88 23       	and	r24, r24
    1eb6:	51 f1       	breq	.+84     	; 0x1f0c <udc_process_setup+0x648>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1eb8:	00 91 be 25 	lds	r16, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1ebc:	10 91 bf 25 	lds	r17, 0x25BF	; 0x8025bf <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ec0:	c0 91 c2 20 	lds	r28, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1ec4:	d0 91 c3 20 	lds	r29, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1ec8:	e8 81       	ld	r30, Y
    1eca:	f9 81       	ldd	r31, Y+1	; 0x01
    1ecc:	84 81       	ldd	r24, Z+4	; 0x04
    1ece:	08 17       	cp	r16, r24
    1ed0:	e8 f4       	brcc	.+58     	; 0x1f0c <udc_process_setup+0x648>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	80 2f       	mov	r24, r16
    1ed6:	ec db       	rcall	.-2088   	; 0x16b0 <udc_update_iface_desc>
    1ed8:	88 23       	and	r24, r24
    1eda:	c1 f0       	breq	.+48     	; 0x1f0c <udc_process_setup+0x648>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1edc:	f8 01       	movw	r30, r16
    1ede:	ff 27       	eor	r31, r31
    1ee0:	cf 01       	movw	r24, r30
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eea:	e8 0f       	add	r30, r24
    1eec:	f9 1f       	adc	r31, r25
    1eee:	c0 81       	ld	r28, Z
    1ef0:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ef2:	ee 81       	ldd	r30, Y+6	; 0x06
    1ef4:	ff 81       	ldd	r31, Y+7	; 0x07
    1ef6:	09 95       	icall
    1ef8:	68 2f       	mov	r22, r24
    1efa:	80 2f       	mov	r24, r16
    1efc:	d9 db       	rcall	.-2126   	; 0x16b0 <udc_update_iface_desc>
    1efe:	88 23       	and	r24, r24
    1f00:	29 f0       	breq	.+10     	; 0x1f0c <udc_process_setup+0x648>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1f02:	ec 81       	ldd	r30, Y+4	; 0x04
    1f04:	fd 81       	ldd	r31, Y+5	; 0x05
    1f06:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1f08:	81 11       	cpse	r24, r1
    1f0a:	4b c0       	rjmp	.+150    	; 0x1fa2 <udc_process_setup+0x6de>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1f0c:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1f10:	8f 71       	andi	r24, 0x1F	; 31
    1f12:	82 30       	cpi	r24, 0x02	; 2
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <udc_process_setup+0x654>
    1f16:	40 c0       	rjmp	.+128    	; 0x1f98 <udc_process_setup+0x6d4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1f18:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udc_num_configuration>
    1f1c:	88 23       	and	r24, r24
    1f1e:	b1 f1       	breq	.+108    	; 0x1f8c <udc_process_setup+0x6c8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f20:	a0 91 c2 20 	lds	r26, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1f24:	b0 91 c3 20 	lds	r27, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1f28:	ed 91       	ld	r30, X+
    1f2a:	fc 91       	ld	r31, X
    1f2c:	11 97       	sbiw	r26, 0x01	; 1
    1f2e:	84 81       	ldd	r24, Z+4	; 0x04
    1f30:	88 23       	and	r24, r24
    1f32:	71 f1       	breq	.+92     	; 0x1f90 <udc_process_setup+0x6cc>
    1f34:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f36:	ec 2f       	mov	r30, r28
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	12 96       	adiw	r26, 0x02	; 2
    1f40:	8d 91       	ld	r24, X+
    1f42:	9c 91       	ld	r25, X
    1f44:	13 97       	sbiw	r26, 0x03	; 3
    1f46:	e8 0f       	add	r30, r24
    1f48:	f9 1f       	adc	r31, r25
    1f4a:	00 81       	ld	r16, Z
    1f4c:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f4e:	d8 01       	movw	r26, r16
    1f50:	16 96       	adiw	r26, 0x06	; 6
    1f52:	ed 91       	ld	r30, X+
    1f54:	fc 91       	ld	r31, X
    1f56:	17 97       	sbiw	r26, 0x07	; 7
    1f58:	09 95       	icall
    1f5a:	68 2f       	mov	r22, r24
    1f5c:	8c 2f       	mov	r24, r28
    1f5e:	a8 db       	rcall	.-2224   	; 0x16b0 <udc_update_iface_desc>
    1f60:	88 23       	and	r24, r24
    1f62:	f9 f0       	breq	.+62     	; 0x1fa2 <udc_process_setup+0x6de>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1f64:	d8 01       	movw	r26, r16
    1f66:	14 96       	adiw	r26, 0x04	; 4
    1f68:	ed 91       	ld	r30, X+
    1f6a:	fc 91       	ld	r31, X
    1f6c:	15 97       	sbiw	r26, 0x05	; 5
    1f6e:	09 95       	icall
    1f70:	81 11       	cpse	r24, r1
    1f72:	17 c0       	rjmp	.+46     	; 0x1fa2 <udc_process_setup+0x6de>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1f74:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f76:	a0 91 c2 20 	lds	r26, 0x20C2	; 0x8020c2 <udc_ptr_conf>
    1f7a:	b0 91 c3 20 	lds	r27, 0x20C3	; 0x8020c3 <udc_ptr_conf+0x1>
    1f7e:	ed 91       	ld	r30, X+
    1f80:	fc 91       	ld	r31, X
    1f82:	11 97       	sbiw	r26, 0x01	; 1
    1f84:	94 81       	ldd	r25, Z+4	; 0x04
    1f86:	c9 17       	cp	r28, r25
    1f88:	b0 f2       	brcs	.-84     	; 0x1f36 <udc_process_setup+0x672>
    1f8a:	0b c0       	rjmp	.+22     	; 0x1fa2 <udc_process_setup+0x6de>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	09 c0       	rjmp	.+18     	; 0x1fa2 <udc_process_setup+0x6de>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	07 c0       	rjmp	.+14     	; 0x1fa2 <udc_process_setup+0x6de>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <udc_process_setup+0x6de>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <udc_process_setup+0x6de>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <udc_process_setup+0x6de>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	08 95       	ret

00001fac <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1fac:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1fae:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1fb0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1fb2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1fb4:	60 83       	st	Z, r22
	ret                             // Return to caller
    1fb6:	08 95       	ret

00001fb8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1fb8:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1fbc:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1fbe:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1fc0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1fc4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1fc6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1fca:	08 95       	ret

00001fcc <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1fcc:	81 11       	cpse	r24, r1
    1fce:	22 c0       	rjmp	.+68     	; 0x2014 <udd_sleep_mode+0x48>
    1fd0:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <udd_b_idle>
    1fd4:	99 23       	and	r25, r25
    1fd6:	d9 f0       	breq	.+54     	; 0x200e <udd_sleep_mode+0x42>
    1fd8:	90 91 ab 2f 	lds	r25, 0x2FAB	; 0x802fab <sleepmgr_locks+0x1>
    1fdc:	91 11       	cpse	r25, r1
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <udd_sleep_mode+0x16>
    1fe0:	ff cf       	rjmp	.-2      	; 0x1fe0 <udd_sleep_mode+0x14>
    1fe2:	2f b7       	in	r18, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	ea ea       	ldi	r30, 0xAA	; 170
    1fe8:	ff e2       	ldi	r31, 0x2F	; 47
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	91 50       	subi	r25, 0x01	; 1
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	2f bf       	out	0x3f, r18	; 63
    1ff2:	0d c0       	rjmp	.+26     	; 0x200e <udd_sleep_mode+0x42>
    1ff4:	90 91 ab 2f 	lds	r25, 0x2FAB	; 0x802fab <sleepmgr_locks+0x1>
    1ff8:	9f 3f       	cpi	r25, 0xFF	; 255
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <udd_sleep_mode+0x32>
    1ffc:	ff cf       	rjmp	.-2      	; 0x1ffc <udd_sleep_mode+0x30>
    1ffe:	2f b7       	in	r18, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	ea ea       	ldi	r30, 0xAA	; 170
    2004:	ff e2       	ldi	r31, 0x2F	; 47
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	9f 5f       	subi	r25, 0xFF	; 255
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	2f bf       	out	0x3f, r18	; 63
    200e:	80 93 8c 23 	sts	0x238C, r24	; 0x80238c <udd_b_idle>
    2012:	08 95       	ret
    2014:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <udd_b_idle>
    2018:	99 23       	and	r25, r25
    201a:	61 f3       	breq	.-40     	; 0x1ff4 <udd_sleep_mode+0x28>
    201c:	f8 cf       	rjmp	.-16     	; 0x200e <udd_sleep_mode+0x42>

0000201e <udd_ctrl_init>:
    201e:	0f 93       	push	r16
    2020:	e8 ec       	ldi	r30, 0xC8	; 200
    2022:	f4 e0       	ldi	r31, 0x04	; 4
    2024:	80 81       	ld	r24, Z
    2026:	8f 7d       	andi	r24, 0xDF	; 223
    2028:	80 83       	st	Z, r24
    202a:	80 81       	ld	r24, Z
    202c:	8f 7d       	andi	r24, 0xDF	; 223
    202e:	80 83       	st	Z, r24
    2030:	e0 e2       	ldi	r30, 0x20	; 32
    2032:	f3 e2       	ldi	r31, 0x23	; 35
    2034:	02 e0       	ldi	r16, 0x02	; 2
    2036:	05 93       	las	Z, r16
    2038:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udd_sram+0x26>
    203c:	10 92 23 23 	sts	0x2323, r1	; 0x802323 <udd_sram+0x27>
    2040:	00 e2       	ldi	r16, 0x20	; 32
    2042:	06 93       	lac	Z, r16
    2044:	00 e4       	ldi	r16, 0x40	; 64
    2046:	06 93       	lac	Z, r16
    2048:	e8 e1       	ldi	r30, 0x18	; 24
    204a:	f3 e2       	ldi	r31, 0x23	; 35
    204c:	00 e2       	ldi	r16, 0x20	; 32
    204e:	06 93       	lac	Z, r16
    2050:	00 e4       	ldi	r16, 0x40	; 64
    2052:	06 93       	lac	Z, r16
    2054:	ea eb       	ldi	r30, 0xBA	; 186
    2056:	f5 e2       	ldi	r31, 0x25	; 37
    2058:	14 86       	std	Z+12, r1	; 0x0c
    205a:	15 86       	std	Z+13, r1	; 0x0d
    205c:	16 86       	std	Z+14, r1	; 0x0e
    205e:	17 86       	std	Z+15, r1	; 0x0f
    2060:	12 86       	std	Z+10, r1	; 0x0a
    2062:	13 86       	std	Z+11, r1	; 0x0b
    2064:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ep_control_state>
    2068:	0f 91       	pop	r16
    206a:	08 95       	ret

0000206c <udd_ctrl_stall_data>:
    206c:	0f 93       	push	r16
    206e:	85 e0       	ldi	r24, 0x05	; 5
    2070:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <udd_ep_control_state>
    2074:	e1 e2       	ldi	r30, 0x21	; 33
    2076:	f3 e2       	ldi	r31, 0x23	; 35
    2078:	04 e0       	ldi	r16, 0x04	; 4
    207a:	05 93       	las	Z, r16
    207c:	e9 e1       	ldi	r30, 0x19	; 25
    207e:	f3 e2       	ldi	r31, 0x23	; 35
    2080:	04 e0       	ldi	r16, 0x04	; 4
    2082:	05 93       	las	Z, r16
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

00002088 <udd_ctrl_send_zlp_in>:
    2088:	0f 93       	push	r16
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <udd_ep_control_state>
    2090:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udd_sram+0x26>
    2094:	10 92 23 23 	sts	0x2323, r1	; 0x802323 <udd_sram+0x27>
    2098:	e0 e2       	ldi	r30, 0x20	; 32
    209a:	f3 e2       	ldi	r31, 0x23	; 35
    209c:	02 e0       	ldi	r16, 0x02	; 2
    209e:	06 93       	lac	Z, r16
    20a0:	0f 91       	pop	r16
    20a2:	08 95       	ret

000020a4 <udd_ctrl_endofrequest>:
    20a4:	e0 91 c6 25 	lds	r30, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0xc>
    20a8:	f0 91 c7 25 	lds	r31, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0xd>
    20ac:	30 97       	sbiw	r30, 0x00	; 0
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <udd_ctrl_endofrequest+0xe>
    20b0:	09 95       	icall
    20b2:	08 95       	ret

000020b4 <udd_ctrl_in_sent>:
    20b4:	0f 93       	push	r16
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ep_control_state>
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	19 f4       	brne	.+6      	; 0x20c8 <udd_ctrl_in_sent+0x14>
    20c2:	f0 df       	rcall	.-32     	; 0x20a4 <udd_ctrl_endofrequest>
    20c4:	ac df       	rcall	.-168    	; 0x201e <udd_ctrl_init>
    20c6:	5e c0       	rjmp	.+188    	; 0x2184 <udd_ctrl_in_sent+0xd0>
    20c8:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    20cc:	90 91 f8 22 	lds	r25, 0x22F8	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
    20d0:	c0 91 c4 25 	lds	r28, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    20d4:	d0 91 c5 25 	lds	r29, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    20d8:	c8 1b       	sub	r28, r24
    20da:	d9 0b       	sbc	r29, r25
    20dc:	71 f5       	brne	.+92     	; 0x213a <udd_ctrl_in_sent+0x86>
    20de:	20 91 f9 22 	lds	r18, 0x22F9	; 0x8022f9 <udd_ctrl_prev_payload_nb_trans>
    20e2:	30 91 fa 22 	lds	r19, 0x22FA	; 0x8022fa <udd_ctrl_prev_payload_nb_trans+0x1>
    20e6:	82 0f       	add	r24, r18
    20e8:	93 1f       	adc	r25, r19
    20ea:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ctrl_prev_payload_nb_trans>
    20ee:	90 93 fa 22 	sts	0x22FA, r25	; 0x8022fa <udd_ctrl_prev_payload_nb_trans+0x1>
    20f2:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    20f6:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    20fa:	82 17       	cp	r24, r18
    20fc:	93 07       	cpc	r25, r19
    20fe:	21 f0       	breq	.+8      	; 0x2108 <udd_ctrl_in_sent+0x54>
    2100:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b_shortpacket.5259>
    2104:	88 23       	and	r24, r24
    2106:	41 f0       	breq	.+16     	; 0x2118 <udd_ctrl_in_sent+0x64>
    2108:	84 e0       	ldi	r24, 0x04	; 4
    210a:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <udd_ep_control_state>
    210e:	e8 e1       	ldi	r30, 0x18	; 24
    2110:	f3 e2       	ldi	r31, 0x23	; 35
    2112:	02 e0       	ldi	r16, 0x02	; 2
    2114:	06 93       	lac	Z, r16
    2116:	36 c0       	rjmp	.+108    	; 0x2184 <udd_ctrl_in_sent+0xd0>
    2118:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0xe>
    211c:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0xf>
    2120:	30 97       	sbiw	r30, 0x00	; 0
    2122:	99 f0       	breq	.+38     	; 0x214a <udd_ctrl_in_sent+0x96>
    2124:	09 95       	icall
    2126:	88 23       	and	r24, r24
    2128:	81 f0       	breq	.+32     	; 0x214a <udd_ctrl_in_sent+0x96>
    212a:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    212e:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
    2132:	c0 91 c4 25 	lds	r28, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2136:	d0 91 c5 25 	lds	r29, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    213a:	c0 34       	cpi	r28, 0x40	; 64
    213c:	d1 05       	cpc	r29, r1
    213e:	28 f0       	brcs	.+10     	; 0x214a <udd_ctrl_in_sent+0x96>
    2140:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <b_shortpacket.5259>
    2144:	c0 e4       	ldi	r28, 0x40	; 64
    2146:	d0 e0       	ldi	r29, 0x00	; 0
    2148:	03 c0       	rjmp	.+6      	; 0x2150 <udd_ctrl_in_sent+0x9c>
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <b_shortpacket.5259>
    2150:	ec ef       	ldi	r30, 0xFC	; 252
    2152:	f2 e2       	ldi	r31, 0x22	; 34
    2154:	c6 a3       	std	Z+38, r28	; 0x26
    2156:	d7 a3       	std	Z+39, r29	; 0x27
    2158:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    215c:	90 91 f8 22 	lds	r25, 0x22F8	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
    2160:	20 91 c2 25 	lds	r18, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    2164:	30 91 c3 25 	lds	r19, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    2168:	28 0f       	add	r18, r24
    216a:	39 1f       	adc	r19, r25
    216c:	20 a7       	std	Z+40, r18	; 0x28
    216e:	31 a7       	std	Z+41, r19	; 0x29
    2170:	c8 0f       	add	r28, r24
    2172:	d9 1f       	adc	r29, r25
    2174:	c0 93 f7 22 	sts	0x22F7, r28	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    2178:	d0 93 f8 22 	sts	0x22F8, r29	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
    217c:	e0 e2       	ldi	r30, 0x20	; 32
    217e:	f3 e2       	ldi	r31, 0x23	; 35
    2180:	02 e0       	ldi	r16, 0x02	; 2
    2182:	06 93       	lac	Z, r16
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	0f 91       	pop	r16
    218a:	08 95       	ret

0000218c <udd_ep_get_size>:
    218c:	fc 01       	movw	r30, r24
    218e:	81 81       	ldd	r24, Z+1	; 0x01
    2190:	e8 2f       	mov	r30, r24
    2192:	e7 70       	andi	r30, 0x07	; 7
    2194:	8e 2f       	mov	r24, r30
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	fc 01       	movw	r30, r24
    219a:	31 97       	sbiw	r30, 0x01	; 1
    219c:	e7 30       	cpi	r30, 0x07	; 7
    219e:	f1 05       	cpc	r31, r1
    21a0:	c0 f4       	brcc	.+48     	; 0x21d2 <udd_ep_get_size+0x46>
    21a2:	e9 5e       	subi	r30, 0xE9	; 233
    21a4:	fe 4f       	sbci	r31, 0xFE	; 254
    21a6:	a2 c6       	rjmp	.+3396   	; 0x2eec <__tablejump2__>
    21a8:	80 e1       	ldi	r24, 0x10	; 16
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	08 95       	ret
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	08 95       	ret
    21b4:	80 e4       	ldi	r24, 0x40	; 64
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	08 95       	ret
    21ba:	80 e8       	ldi	r24, 0x80	; 128
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	08 95       	ret
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	91 e0       	ldi	r25, 0x01	; 1
    21c4:	08 95       	ret
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	92 e0       	ldi	r25, 0x02	; 2
    21ca:	08 95       	ret
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
    21ce:	93 e0       	ldi	r25, 0x03	; 3
    21d0:	08 95       	ret
    21d2:	88 e0       	ldi	r24, 0x08	; 8
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	08 95       	ret

000021d8 <udd_ep_get_job>:
    21d8:	28 2f       	mov	r18, r24
    21da:	2f 70       	andi	r18, 0x0F	; 15
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	22 0f       	add	r18, r18
    21e0:	33 1f       	adc	r19, r19
    21e2:	08 2e       	mov	r0, r24
    21e4:	00 0c       	add	r0, r0
    21e6:	99 0b       	sbc	r25, r25
    21e8:	88 27       	eor	r24, r24
    21ea:	99 0f       	add	r25, r25
    21ec:	88 1f       	adc	r24, r24
    21ee:	99 27       	eor	r25, r25
    21f0:	82 0f       	add	r24, r18
    21f2:	93 1f       	adc	r25, r19
    21f4:	02 97       	sbiw	r24, 0x02	; 2
    21f6:	9c 01       	movw	r18, r24
    21f8:	22 0f       	add	r18, r18
    21fa:	33 1f       	adc	r19, r19
    21fc:	22 0f       	add	r18, r18
    21fe:	33 1f       	adc	r19, r19
    2200:	22 0f       	add	r18, r18
    2202:	33 1f       	adc	r19, r19
    2204:	82 0f       	add	r24, r18
    2206:	93 1f       	adc	r25, r19
    2208:	85 5b       	subi	r24, 0xB5	; 181
    220a:	9d 4d       	sbci	r25, 0xDD	; 221
    220c:	08 95       	ret

0000220e <udd_ctrl_interrupt_tc_setup>:
    220e:	0f 93       	push	r16
    2210:	cf 93       	push	r28
    2212:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2216:	80 ff       	sbrs	r24, 0
    2218:	62 c0       	rjmp	.+196    	; 0x22de <udd_ctrl_interrupt_tc_setup+0xd0>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2220:	e8 e1       	ldi	r30, 0x18	; 24
    2222:	f3 e2       	ldi	r31, 0x23	; 35
    2224:	00 e8       	ldi	r16, 0x80	; 128
    2226:	06 93       	lac	Z, r16
    2228:	e0 e2       	ldi	r30, 0x20	; 32
    222a:	f3 e2       	ldi	r31, 0x23	; 35
    222c:	00 e8       	ldi	r16, 0x80	; 128
    222e:	06 93       	lac	Z, r16
    2230:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2234:	e8 e1       	ldi	r30, 0x18	; 24
    2236:	f3 e2       	ldi	r31, 0x23	; 35
    2238:	00 e1       	ldi	r16, 0x10	; 16
    223a:	06 93       	lac	Z, r16
    223c:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ep_control_state>
    2240:	88 23       	and	r24, r24
    2242:	29 f0       	breq	.+10     	; 0x224e <udd_ctrl_interrupt_tc_setup+0x40>
    2244:	83 50       	subi	r24, 0x03	; 3
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	08 f4       	brcc	.+2      	; 0x224c <udd_ctrl_interrupt_tc_setup+0x3e>
    224a:	2c df       	rcall	.-424    	; 0x20a4 <udd_ctrl_endofrequest>
    224c:	e8 de       	rcall	.-560    	; 0x201e <udd_ctrl_init>
    224e:	80 91 1a 23 	lds	r24, 0x231A	; 0x80231a <udd_sram+0x1e>
    2252:	90 91 1b 23 	lds	r25, 0x231B	; 0x80231b <udd_sram+0x1f>
    2256:	08 97       	sbiw	r24, 0x08	; 8
    2258:	09 f0       	breq	.+2      	; 0x225c <udd_ctrl_interrupt_tc_setup+0x4e>
    225a:	43 c0       	rjmp	.+134    	; 0x22e2 <udd_ctrl_interrupt_tc_setup+0xd4>
    225c:	88 e0       	ldi	r24, 0x08	; 8
    225e:	e7 eb       	ldi	r30, 0xB7	; 183
    2260:	f2 e2       	ldi	r31, 0x22	; 34
    2262:	aa eb       	ldi	r26, 0xBA	; 186
    2264:	b5 e2       	ldi	r27, 0x25	; 37
    2266:	01 90       	ld	r0, Z+
    2268:	0d 92       	st	X+, r0
    226a:	8a 95       	dec	r24
    226c:	e1 f7       	brne	.-8      	; 0x2266 <udd_ctrl_interrupt_tc_setup+0x58>
    226e:	e8 ec       	ldi	r30, 0xC8	; 200
    2270:	f4 e0       	ldi	r31, 0x04	; 4
    2272:	80 81       	ld	r24, Z
    2274:	80 62       	ori	r24, 0x20	; 32
    2276:	80 83       	st	Z, r24
    2278:	80 81       	ld	r24, Z
    227a:	80 62       	ori	r24, 0x20	; 32
    227c:	80 83       	st	Z, r24
    227e:	22 db       	rcall	.-2492   	; 0x18c4 <udc_process_setup>
    2280:	c8 2f       	mov	r28, r24
    2282:	81 11       	cpse	r24, r1
    2284:	03 c0       	rjmp	.+6      	; 0x228c <udd_ctrl_interrupt_tc_setup+0x7e>
    2286:	f2 de       	rcall	.-540    	; 0x206c <udd_ctrl_stall_data>
    2288:	c1 e0       	ldi	r28, 0x01	; 1
    228a:	2c c0       	rjmp	.+88     	; 0x22e4 <udd_ctrl_interrupt_tc_setup+0xd6>
    228c:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    2290:	88 23       	and	r24, r24
    2292:	6c f4       	brge	.+26     	; 0x22ae <udd_ctrl_interrupt_tc_setup+0xa0>
    2294:	10 92 f9 22 	sts	0x22F9, r1	; 0x8022f9 <udd_ctrl_prev_payload_nb_trans>
    2298:	10 92 fa 22 	sts	0x22FA, r1	; 0x8022fa <udd_ctrl_prev_payload_nb_trans+0x1>
    229c:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    22a0:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <udd_ep_control_state>
    22aa:	04 df       	rcall	.-504    	; 0x20b4 <udd_ctrl_in_sent>
    22ac:	1b c0       	rjmp	.+54     	; 0x22e4 <udd_ctrl_interrupt_tc_setup+0xd6>
    22ae:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    22b2:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    22b6:	89 2b       	or	r24, r25
    22b8:	11 f4       	brne	.+4      	; 0x22be <udd_ctrl_interrupt_tc_setup+0xb0>
    22ba:	e6 de       	rcall	.-564    	; 0x2088 <udd_ctrl_send_zlp_in>
    22bc:	13 c0       	rjmp	.+38     	; 0x22e4 <udd_ctrl_interrupt_tc_setup+0xd6>
    22be:	10 92 f9 22 	sts	0x22F9, r1	; 0x8022f9 <udd_ctrl_prev_payload_nb_trans>
    22c2:	10 92 fa 22 	sts	0x22FA, r1	; 0x8022fa <udd_ctrl_prev_payload_nb_trans+0x1>
    22c6:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    22ca:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <udd_ep_control_state>
    22d4:	e8 e1       	ldi	r30, 0x18	; 24
    22d6:	f3 e2       	ldi	r31, 0x23	; 35
    22d8:	02 e0       	ldi	r16, 0x02	; 2
    22da:	06 93       	lac	Z, r16
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <udd_ctrl_interrupt_tc_setup+0xd6>
    22de:	c0 e0       	ldi	r28, 0x00	; 0
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <udd_ctrl_interrupt_tc_setup+0xd6>
    22e2:	c1 e0       	ldi	r28, 0x01	; 1
    22e4:	8c 2f       	mov	r24, r28
    22e6:	cf 91       	pop	r28
    22e8:	0f 91       	pop	r16
    22ea:	08 95       	ret

000022ec <udd_ep_trans_complet>:
    22ec:	8f 92       	push	r8
    22ee:	9f 92       	push	r9
    22f0:	af 92       	push	r10
    22f2:	bf 92       	push	r11
    22f4:	df 92       	push	r13
    22f6:	ef 92       	push	r14
    22f8:	ff 92       	push	r15
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	d8 2e       	mov	r13, r24
    2304:	69 df       	rcall	.-302    	; 0x21d8 <udd_ep_get_job>
    2306:	8c 01       	movw	r16, r24
    2308:	bd 2c       	mov	r11, r13
    230a:	bb 1c       	adc	r11, r11
    230c:	bb 24       	eor	r11, r11
    230e:	bb 1c       	adc	r11, r11
    2310:	cd 2d       	mov	r28, r13
    2312:	cf 70       	andi	r28, 0x0F	; 15
    2314:	d0 e0       	ldi	r29, 0x00	; 0
    2316:	cc 0f       	add	r28, r28
    2318:	dd 1f       	adc	r29, r29
    231a:	cb 0d       	add	r28, r11
    231c:	d1 1d       	adc	r29, r1
    231e:	ce 01       	movw	r24, r28
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	9c 01       	movw	r18, r24
    232e:	28 5e       	subi	r18, 0xE8	; 232
    2330:	3c 4d       	sbci	r19, 0xDC	; 220
    2332:	79 01       	movw	r14, r18
    2334:	c9 01       	movw	r24, r18
    2336:	2a df       	rcall	.-428    	; 0x218c <udd_ep_get_size>
    2338:	4c 01       	movw	r8, r24
    233a:	bb 20       	and	r11, r11
    233c:	09 f4       	brne	.+2      	; 0x2340 <udd_ep_trans_complet+0x54>
    233e:	79 c0       	rjmp	.+242    	; 0x2432 <udd_ep_trans_complet+0x146>
    2340:	fe 01       	movw	r30, r28
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	e4 50       	subi	r30, 0x04	; 4
    2350:	fd 4d       	sbci	r31, 0xDD	; 221
    2352:	22 a1       	ldd	r18, Z+34	; 0x22
    2354:	33 a1       	ldd	r19, Z+35	; 0x23
    2356:	d8 01       	movw	r26, r16
    2358:	15 96       	adiw	r26, 0x05	; 5
    235a:	8d 91       	ld	r24, X+
    235c:	9c 91       	ld	r25, X
    235e:	16 97       	sbiw	r26, 0x06	; 6
    2360:	82 0f       	add	r24, r18
    2362:	93 1f       	adc	r25, r19
    2364:	15 96       	adiw	r26, 0x05	; 5
    2366:	8d 93       	st	X+, r24
    2368:	9c 93       	st	X, r25
    236a:	16 97       	sbiw	r26, 0x06	; 6
    236c:	13 96       	adiw	r26, 0x03	; 3
    236e:	2d 91       	ld	r18, X+
    2370:	3c 91       	ld	r19, X
    2372:	14 97       	sbiw	r26, 0x04	; 4
    2374:	82 17       	cp	r24, r18
    2376:	93 07       	cpc	r25, r19
    2378:	09 f4       	brne	.+2      	; 0x237c <udd_ep_trans_complet+0x90>
    237a:	45 c0       	rjmp	.+138    	; 0x2406 <udd_ep_trans_complet+0x11a>
    237c:	28 1b       	sub	r18, r24
    237e:	39 0b       	sbc	r19, r25
    2380:	21 15       	cp	r18, r1
    2382:	b4 e0       	ldi	r27, 0x04	; 4
    2384:	3b 07       	cpc	r19, r27
    2386:	38 f0       	brcs	.+14     	; 0x2396 <udd_ep_trans_complet+0xaa>
    2388:	2f ef       	ldi	r18, 0xFF	; 255
    238a:	33 e0       	ldi	r19, 0x03	; 3
    238c:	c9 01       	movw	r24, r18
    238e:	b4 01       	movw	r22, r8
    2390:	86 d5       	rcall	.+2828   	; 0x2e9e <__udivmodhi4>
    2392:	28 1b       	sub	r18, r24
    2394:	39 0b       	sbc	r19, r25
    2396:	f8 01       	movw	r30, r16
    2398:	80 81       	ld	r24, Z
    239a:	81 ff       	sbrs	r24, 1
    239c:	09 c0       	rjmp	.+18     	; 0x23b0 <udd_ep_trans_complet+0xc4>
    239e:	c9 01       	movw	r24, r18
    23a0:	b4 01       	movw	r22, r8
    23a2:	7d d5       	rcall	.+2810   	; 0x2e9e <__udivmodhi4>
    23a4:	41 e0       	ldi	r20, 0x01	; 1
    23a6:	89 2b       	or	r24, r25
    23a8:	09 f0       	breq	.+2      	; 0x23ac <udd_ep_trans_complet+0xc0>
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	84 2f       	mov	r24, r20
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <udd_ep_trans_complet+0xc6>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	d8 01       	movw	r26, r16
    23b4:	9c 91       	ld	r25, X
    23b6:	80 fb       	bst	r24, 0
    23b8:	91 f9       	bld	r25, 1
    23ba:	9c 93       	st	X, r25
    23bc:	fe 01       	movw	r30, r28
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	e4 50       	subi	r30, 0x04	; 4
    23cc:	fd 4d       	sbci	r31, 0xDD	; 221
    23ce:	12 a2       	std	Z+34, r1	; 0x22
    23d0:	13 a2       	std	Z+35, r1	; 0x23
    23d2:	26 8f       	std	Z+30, r18	; 0x1e
    23d4:	37 8f       	std	Z+31, r19	; 0x1f
    23d6:	11 96       	adiw	r26, 0x01	; 1
    23d8:	2d 91       	ld	r18, X+
    23da:	3c 91       	ld	r19, X
    23dc:	12 97       	sbiw	r26, 0x02	; 2
    23de:	15 96       	adiw	r26, 0x05	; 5
    23e0:	8d 91       	ld	r24, X+
    23e2:	9c 91       	ld	r25, X
    23e4:	16 97       	sbiw	r26, 0x06	; 6
    23e6:	82 0f       	add	r24, r18
    23e8:	93 1f       	adc	r25, r19
    23ea:	cc 0f       	add	r28, r28
    23ec:	dd 1f       	adc	r29, r29
    23ee:	cc 0f       	add	r28, r28
    23f0:	dd 1f       	adc	r29, r29
    23f2:	cc 0f       	add	r28, r28
    23f4:	dd 1f       	adc	r29, r29
    23f6:	c4 5e       	subi	r28, 0xE4	; 228
    23f8:	dc 4d       	sbci	r29, 0xDC	; 220
    23fa:	88 83       	st	Y, r24
    23fc:	99 83       	std	Y+1, r25	; 0x01
    23fe:	f7 01       	movw	r30, r14
    2400:	02 e0       	ldi	r16, 0x02	; 2
    2402:	06 93       	lac	Z, r16
    2404:	e4 c0       	rjmp	.+456    	; 0x25ce <udd_ep_trans_complet+0x2e2>
    2406:	d8 01       	movw	r26, r16
    2408:	8c 91       	ld	r24, X
    240a:	81 ff       	sbrs	r24, 1
    240c:	cd c0       	rjmp	.+410    	; 0x25a8 <udd_ep_trans_complet+0x2bc>
    240e:	8d 7f       	andi	r24, 0xFD	; 253
    2410:	8c 93       	st	X, r24
    2412:	cc 0f       	add	r28, r28
    2414:	dd 1f       	adc	r29, r29
    2416:	cc 0f       	add	r28, r28
    2418:	dd 1f       	adc	r29, r29
    241a:	cc 0f       	add	r28, r28
    241c:	dd 1f       	adc	r29, r29
    241e:	c4 50       	subi	r28, 0x04	; 4
    2420:	dd 4d       	sbci	r29, 0xDD	; 221
    2422:	1a a2       	std	Y+34, r1	; 0x22
    2424:	1b a2       	std	Y+35, r1	; 0x23
    2426:	1e 8e       	std	Y+30, r1	; 0x1e
    2428:	1f 8e       	std	Y+31, r1	; 0x1f
    242a:	f7 01       	movw	r30, r14
    242c:	02 e0       	ldi	r16, 0x02	; 2
    242e:	06 93       	lac	Z, r16
    2430:	ce c0       	rjmp	.+412    	; 0x25ce <udd_ep_trans_complet+0x2e2>
    2432:	fe 01       	movw	r30, r28
    2434:	ee 0f       	add	r30, r30
    2436:	ff 1f       	adc	r31, r31
    2438:	ee 0f       	add	r30, r30
    243a:	ff 1f       	adc	r31, r31
    243c:	ee 0f       	add	r30, r30
    243e:	ff 1f       	adc	r31, r31
    2440:	e4 50       	subi	r30, 0x04	; 4
    2442:	fd 4d       	sbci	r31, 0xDD	; 221
    2444:	a6 8c       	ldd	r10, Z+30	; 0x1e
    2446:	b7 8c       	ldd	r11, Z+31	; 0x1f
    2448:	d8 01       	movw	r26, r16
    244a:	8c 91       	ld	r24, X
    244c:	82 ff       	sbrs	r24, 2
    244e:	19 c0       	rjmp	.+50     	; 0x2482 <udd_ep_trans_complet+0x196>
    2450:	11 96       	adiw	r26, 0x01	; 1
    2452:	ed 91       	ld	r30, X+
    2454:	fc 91       	ld	r31, X
    2456:	12 97       	sbiw	r26, 0x02	; 2
    2458:	15 96       	adiw	r26, 0x05	; 5
    245a:	2d 91       	ld	r18, X+
    245c:	3c 91       	ld	r19, X
    245e:	16 97       	sbiw	r26, 0x06	; 6
    2460:	13 96       	adiw	r26, 0x03	; 3
    2462:	8d 91       	ld	r24, X+
    2464:	9c 91       	ld	r25, X
    2466:	14 97       	sbiw	r26, 0x04	; 4
    2468:	b4 01       	movw	r22, r8
    246a:	19 d5       	rcall	.+2610   	; 0x2e9e <__udivmodhi4>
    246c:	b0 e4       	ldi	r27, 0x40	; 64
    246e:	db 9e       	mul	r13, r27
    2470:	b0 01       	movw	r22, r0
    2472:	11 24       	eor	r1, r1
    2474:	65 57       	subi	r22, 0x75	; 117
    2476:	7f 4d       	sbci	r23, 0xDF	; 223
    2478:	ac 01       	movw	r20, r24
    247a:	cf 01       	movw	r24, r30
    247c:	82 0f       	add	r24, r18
    247e:	93 1f       	adc	r25, r19
    2480:	3b d5       	rcall	.+2678   	; 0x2ef8 <memcpy>
    2482:	f8 01       	movw	r30, r16
    2484:	25 81       	ldd	r18, Z+5	; 0x05
    2486:	36 81       	ldd	r19, Z+6	; 0x06
    2488:	2a 0d       	add	r18, r10
    248a:	3b 1d       	adc	r19, r11
    248c:	25 83       	std	Z+5, r18	; 0x05
    248e:	36 83       	std	Z+6, r19	; 0x06
    2490:	83 81       	ldd	r24, Z+3	; 0x03
    2492:	94 81       	ldd	r25, Z+4	; 0x04
    2494:	82 17       	cp	r24, r18
    2496:	93 07       	cpc	r25, r19
    2498:	68 f4       	brcc	.+26     	; 0x24b4 <udd_ep_trans_complet+0x1c8>
    249a:	85 83       	std	Z+5, r24	; 0x05
    249c:	96 83       	std	Z+6, r25	; 0x06
    249e:	cc 0f       	add	r28, r28
    24a0:	dd 1f       	adc	r29, r29
    24a2:	cc 0f       	add	r28, r28
    24a4:	dd 1f       	adc	r29, r29
    24a6:	cc 0f       	add	r28, r28
    24a8:	dd 1f       	adc	r29, r29
    24aa:	c4 50       	subi	r28, 0x04	; 4
    24ac:	dd 4d       	sbci	r29, 0xDD	; 221
    24ae:	8a a1       	ldd	r24, Y+34	; 0x22
    24b0:	9b a1       	ldd	r25, Y+35	; 0x23
    24b2:	7a c0       	rjmp	.+244    	; 0x25a8 <udd_ep_trans_complet+0x2bc>
    24b4:	fe 01       	movw	r30, r28
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	ee 0f       	add	r30, r30
    24bc:	ff 1f       	adc	r31, r31
    24be:	ee 0f       	add	r30, r30
    24c0:	ff 1f       	adc	r31, r31
    24c2:	e4 50       	subi	r30, 0x04	; 4
    24c4:	fd 4d       	sbci	r31, 0xDD	; 221
    24c6:	42 a1       	ldd	r20, Z+34	; 0x22
    24c8:	53 a1       	ldd	r21, Z+35	; 0x23
    24ca:	4a 15       	cp	r20, r10
    24cc:	5b 05       	cpc	r21, r11
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <udd_ep_trans_complet+0x1e6>
    24d0:	6b c0       	rjmp	.+214    	; 0x25a8 <udd_ep_trans_complet+0x2bc>
    24d2:	28 17       	cp	r18, r24
    24d4:	39 07       	cpc	r19, r25
    24d6:	09 f4       	brne	.+2      	; 0x24da <udd_ep_trans_complet+0x1ee>
    24d8:	67 c0       	rjmp	.+206    	; 0x25a8 <udd_ep_trans_complet+0x2bc>
    24da:	ac 01       	movw	r20, r24
    24dc:	42 1b       	sub	r20, r18
    24de:	53 0b       	sbc	r21, r19
    24e0:	9a 01       	movw	r18, r20
    24e2:	21 15       	cp	r18, r1
    24e4:	54 e0       	ldi	r21, 0x04	; 4
    24e6:	35 07       	cpc	r19, r21
    24e8:	50 f0       	brcs	.+20     	; 0x24fe <udd_ep_trans_complet+0x212>
    24ea:	2f ef       	ldi	r18, 0xFF	; 255
    24ec:	33 e0       	ldi	r19, 0x03	; 3
    24ee:	c9 01       	movw	r24, r18
    24f0:	b4 01       	movw	r22, r8
    24f2:	d5 d4       	rcall	.+2474   	; 0x2e9e <__udivmodhi4>
    24f4:	d9 01       	movw	r26, r18
    24f6:	a8 1b       	sub	r26, r24
    24f8:	b9 0b       	sbc	r27, r25
    24fa:	cd 01       	movw	r24, r26
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <udd_ep_trans_complet+0x220>
    24fe:	c9 01       	movw	r24, r18
    2500:	b4 01       	movw	r22, r8
    2502:	cd d4       	rcall	.+2458   	; 0x2e9e <__udivmodhi4>
    2504:	f9 01       	movw	r30, r18
    2506:	e8 1b       	sub	r30, r24
    2508:	f9 0b       	sbc	r31, r25
    250a:	cf 01       	movw	r24, r30
    250c:	fe 01       	movw	r30, r28
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	ee 0f       	add	r30, r30
    2514:	ff 1f       	adc	r31, r31
    2516:	ee 0f       	add	r30, r30
    2518:	ff 1f       	adc	r31, r31
    251a:	e4 50       	subi	r30, 0x04	; 4
    251c:	fd 4d       	sbci	r31, 0xDD	; 221
    251e:	16 8e       	std	Z+30, r1	; 0x1e
    2520:	17 8e       	std	Z+31, r1	; 0x1f
    2522:	88 15       	cp	r24, r8
    2524:	99 05       	cpc	r25, r9
    2526:	00 f5       	brcc	.+64     	; 0x2568 <udd_ep_trans_complet+0x27c>
    2528:	d8 01       	movw	r26, r16
    252a:	8c 91       	ld	r24, X
    252c:	84 60       	ori	r24, 0x04	; 4
    252e:	8c 93       	st	X, r24
    2530:	b0 e4       	ldi	r27, 0x40	; 64
    2532:	db 9e       	mul	r13, r27
    2534:	c0 01       	movw	r24, r0
    2536:	11 24       	eor	r1, r1
    2538:	85 57       	subi	r24, 0x75	; 117
    253a:	9f 4d       	sbci	r25, 0xDF	; 223
    253c:	fe 01       	movw	r30, r28
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	e4 5e       	subi	r30, 0xE4	; 228
    254c:	fc 4d       	sbci	r31, 0xDC	; 220
    254e:	80 83       	st	Z, r24
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	cc 0f       	add	r28, r28
    2554:	dd 1f       	adc	r29, r29
    2556:	cc 0f       	add	r28, r28
    2558:	dd 1f       	adc	r29, r29
    255a:	cc 0f       	add	r28, r28
    255c:	dd 1f       	adc	r29, r29
    255e:	c4 50       	subi	r28, 0x04	; 4
    2560:	dd 4d       	sbci	r29, 0xDD	; 221
    2562:	8a a2       	std	Y+34, r8	; 0x22
    2564:	9b a2       	std	Y+35, r9	; 0x23
    2566:	1c c0       	rjmp	.+56     	; 0x25a0 <udd_ep_trans_complet+0x2b4>
    2568:	f8 01       	movw	r30, r16
    256a:	41 81       	ldd	r20, Z+1	; 0x01
    256c:	52 81       	ldd	r21, Z+2	; 0x02
    256e:	25 81       	ldd	r18, Z+5	; 0x05
    2570:	36 81       	ldd	r19, Z+6	; 0x06
    2572:	24 0f       	add	r18, r20
    2574:	35 1f       	adc	r19, r21
    2576:	fe 01       	movw	r30, r28
    2578:	ee 0f       	add	r30, r30
    257a:	ff 1f       	adc	r31, r31
    257c:	ee 0f       	add	r30, r30
    257e:	ff 1f       	adc	r31, r31
    2580:	ee 0f       	add	r30, r30
    2582:	ff 1f       	adc	r31, r31
    2584:	e4 5e       	subi	r30, 0xE4	; 228
    2586:	fc 4d       	sbci	r31, 0xDC	; 220
    2588:	20 83       	st	Z, r18
    258a:	31 83       	std	Z+1, r19	; 0x01
    258c:	cc 0f       	add	r28, r28
    258e:	dd 1f       	adc	r29, r29
    2590:	cc 0f       	add	r28, r28
    2592:	dd 1f       	adc	r29, r29
    2594:	cc 0f       	add	r28, r28
    2596:	dd 1f       	adc	r29, r29
    2598:	c4 50       	subi	r28, 0x04	; 4
    259a:	dd 4d       	sbci	r29, 0xDD	; 221
    259c:	8a a3       	std	Y+34, r24	; 0x22
    259e:	9b a3       	std	Y+35, r25	; 0x23
    25a0:	f7 01       	movw	r30, r14
    25a2:	02 e0       	ldi	r16, 0x02	; 2
    25a4:	06 93       	lac	Z, r16
    25a6:	13 c0       	rjmp	.+38     	; 0x25ce <udd_ep_trans_complet+0x2e2>
    25a8:	d8 01       	movw	r26, r16
    25aa:	8c 91       	ld	r24, X
    25ac:	80 ff       	sbrs	r24, 0
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <udd_ep_trans_complet+0x2e2>
    25b0:	8e 7f       	andi	r24, 0xFE	; 254
    25b2:	8c 93       	st	X, r24
    25b4:	17 96       	adiw	r26, 0x07	; 7
    25b6:	ed 91       	ld	r30, X+
    25b8:	fc 91       	ld	r31, X
    25ba:	18 97       	sbiw	r26, 0x08	; 8
    25bc:	30 97       	sbiw	r30, 0x00	; 0
    25be:	39 f0       	breq	.+14     	; 0x25ce <udd_ep_trans_complet+0x2e2>
    25c0:	15 96       	adiw	r26, 0x05	; 5
    25c2:	6d 91       	ld	r22, X+
    25c4:	7c 91       	ld	r23, X
    25c6:	16 97       	sbiw	r26, 0x06	; 6
    25c8:	4d 2d       	mov	r20, r13
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	09 95       	icall
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	bf 90       	pop	r11
    25de:	af 90       	pop	r10
    25e0:	9f 90       	pop	r9
    25e2:	8f 90       	pop	r8
    25e4:	08 95       	ret

000025e6 <udd_attach>:
    25e6:	cf 93       	push	r28
    25e8:	cf b7       	in	r28, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	ee dc       	rcall	.-1572   	; 0x1fcc <udd_sleep_mode>
    25f0:	ea ec       	ldi	r30, 0xCA	; 202
    25f2:	f4 e0       	ldi	r31, 0x04	; 4
    25f4:	80 e4       	ldi	r24, 0x40	; 64
    25f6:	80 83       	st	Z, r24
    25f8:	80 e2       	ldi	r24, 0x20	; 32
    25fa:	80 83       	st	Z, r24
    25fc:	e1 ec       	ldi	r30, 0xC1	; 193
    25fe:	f4 e0       	ldi	r31, 0x04	; 4
    2600:	80 81       	ld	r24, Z
    2602:	81 60       	ori	r24, 0x01	; 1
    2604:	80 83       	st	Z, r24
    2606:	a9 ec       	ldi	r26, 0xC9	; 201
    2608:	b4 e0       	ldi	r27, 0x04	; 4
    260a:	8c 91       	ld	r24, X
    260c:	82 60       	ori	r24, 0x02	; 2
    260e:	8c 93       	st	X, r24
    2610:	e8 ec       	ldi	r30, 0xC8	; 200
    2612:	f4 e0       	ldi	r31, 0x04	; 4
    2614:	80 81       	ld	r24, Z
    2616:	80 64       	ori	r24, 0x40	; 64
    2618:	80 83       	st	Z, r24
    261a:	8c 91       	ld	r24, X
    261c:	81 60       	ori	r24, 0x01	; 1
    261e:	8c 93       	st	X, r24
    2620:	80 81       	ld	r24, Z
    2622:	80 68       	ori	r24, 0x80	; 128
    2624:	80 83       	st	Z, r24
    2626:	cf bf       	out	0x3f, r28	; 63
    2628:	cf 91       	pop	r28
    262a:	08 95       	ret

0000262c <udd_enable>:
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	c0 e6       	ldi	r28, 0x60	; 96
    2632:	d0 e0       	ldi	r29, 0x00	; 0
    2634:	18 82       	st	Y, r1
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	0e 94 af 0a 	call	0x155e	; 0x155e <sysclk_enable_usb>
    263c:	e0 ec       	ldi	r30, 0xC0	; 192
    263e:	f4 e0       	ldi	r31, 0x04	; 4
    2640:	80 81       	ld	r24, Z
    2642:	80 64       	ori	r24, 0x40	; 64
    2644:	80 83       	st	Z, r24
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	88 83       	st	Y, r24
    264a:	cf b7       	in	r28, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	fc 01       	movw	r30, r24
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	e4 50       	subi	r30, 0x04	; 4
    2662:	fd 4d       	sbci	r31, 0xDD	; 221
    2664:	15 8e       	std	Z+29, r1	; 0x1d
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	8e 30       	cpi	r24, 0x0E	; 14
    266a:	91 05       	cpc	r25, r1
    266c:	91 f7       	brne	.-28     	; 0x2652 <udd_enable+0x26>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	fc 01       	movw	r30, r24
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	ee 0f       	add	r30, r30
    267e:	ff 1f       	adc	r31, r31
    2680:	e8 0f       	add	r30, r24
    2682:	f9 1f       	adc	r31, r25
    2684:	e5 5b       	subi	r30, 0xB5	; 181
    2686:	fd 4d       	sbci	r31, 0xDD	; 221
    2688:	20 81       	ld	r18, Z
    268a:	2e 7f       	andi	r18, 0xFE	; 254
    268c:	20 83       	st	Z, r18
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	8c 30       	cpi	r24, 0x0C	; 12
    2692:	91 05       	cpc	r25, r1
    2694:	71 f7       	brne	.-36     	; 0x2672 <udd_enable+0x46>
    2696:	6a e1       	ldi	r22, 0x1A	; 26
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	8d dc       	rcall	.-1766   	; 0x1fb8 <nvm_read_byte>
    269e:	8f 3f       	cpi	r24, 0xFF	; 255
    26a0:	19 f0       	breq	.+6      	; 0x26a8 <udd_enable+0x7c>
    26a2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    26a6:	03 c0       	rjmp	.+6      	; 0x26ae <udd_enable+0x82>
    26a8:	8f e1       	ldi	r24, 0x1F	; 31
    26aa:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    26ae:	6b e1       	ldi	r22, 0x1B	; 27
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	81 dc       	rcall	.-1790   	; 0x1fb8 <nvm_read_byte>
    26b6:	8f 3f       	cpi	r24, 0xFF	; 255
    26b8:	19 f0       	breq	.+6      	; 0x26c0 <udd_enable+0x94>
    26ba:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    26be:	03 c0       	rjmp	.+6      	; 0x26c6 <udd_enable+0x9a>
    26c0:	8f e1       	ldi	r24, 0x1F	; 31
    26c2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    26c6:	e0 ec       	ldi	r30, 0xC0	; 192
    26c8:	f4 e0       	ldi	r31, 0x04	; 4
    26ca:	80 81       	ld	r24, Z
    26cc:	86 60       	ori	r24, 0x06	; 6
    26ce:	80 83       	st	Z, r24
    26d0:	80 81       	ld	r24, Z
    26d2:	80 68       	ori	r24, 0x80	; 128
    26d4:	80 83       	st	Z, r24
    26d6:	80 81       	ld	r24, Z
    26d8:	80 61       	ori	r24, 0x10	; 16
    26da:	80 83       	st	Z, r24
    26dc:	88 e1       	ldi	r24, 0x18	; 24
    26de:	93 e2       	ldi	r25, 0x23	; 35
    26e0:	86 83       	std	Z+6, r24	; 0x06
    26e2:	97 83       	std	Z+7, r25	; 0x07
    26e4:	80 81       	ld	r24, Z
    26e6:	80 62       	ori	r24, 0x20	; 32
    26e8:	80 83       	st	Z, r24
    26ea:	8f ef       	ldi	r24, 0xFF	; 255
    26ec:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    26f0:	e8 ec       	ldi	r30, 0xC8	; 200
    26f2:	f4 e0       	ldi	r31, 0x04	; 4
    26f4:	80 81       	ld	r24, Z
    26f6:	82 60       	ori	r24, 0x02	; 2
    26f8:	80 83       	st	Z, r24
    26fa:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <udd_b_idle>
    26fe:	80 91 af 2f 	lds	r24, 0x2FAF	; 0x802faf <sleepmgr_locks+0x5>
    2702:	8f 3f       	cpi	r24, 0xFF	; 255
    2704:	09 f4       	brne	.+2      	; 0x2708 <udd_enable+0xdc>
    2706:	ff cf       	rjmp	.-2      	; 0x2706 <udd_enable+0xda>
    2708:	9f b7       	in	r25, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	ea ea       	ldi	r30, 0xAA	; 170
    270e:	ff e2       	ldi	r31, 0x2F	; 47
    2710:	85 81       	ldd	r24, Z+5	; 0x05
    2712:	8f 5f       	subi	r24, 0xFF	; 255
    2714:	85 83       	std	Z+5, r24	; 0x05
    2716:	9f bf       	out	0x3f, r25	; 63
    2718:	66 df       	rcall	.-308    	; 0x25e6 <udd_attach>
    271a:	cf bf       	out	0x3f, r28	; 63
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	08 95       	ret

00002722 <udd_set_address>:
    2722:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2726:	08 95       	ret

00002728 <udd_getaddress>:
    2728:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    272c:	08 95       	ret

0000272e <udd_set_setup_payload>:
    272e:	ea eb       	ldi	r30, 0xBA	; 186
    2730:	f5 e2       	ldi	r31, 0x25	; 37
    2732:	80 87       	std	Z+8, r24	; 0x08
    2734:	91 87       	std	Z+9, r25	; 0x09
    2736:	62 87       	std	Z+10, r22	; 0x0a
    2738:	73 87       	std	Z+11, r23	; 0x0b
    273a:	08 95       	ret

0000273c <udd_ep_alloc>:
    273c:	28 2f       	mov	r18, r24
    273e:	2f 70       	andi	r18, 0x0F	; 15
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	22 0f       	add	r18, r18
    2744:	33 1f       	adc	r19, r19
    2746:	08 2e       	mov	r0, r24
    2748:	00 0c       	add	r0, r0
    274a:	99 0b       	sbc	r25, r25
    274c:	88 27       	eor	r24, r24
    274e:	99 0f       	add	r25, r25
    2750:	88 1f       	adc	r24, r24
    2752:	99 27       	eor	r25, r25
    2754:	82 0f       	add	r24, r18
    2756:	93 1f       	adc	r25, r19
    2758:	fc 01       	movw	r30, r24
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	ee 0f       	add	r30, r30
    2760:	ff 1f       	adc	r31, r31
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31
    2766:	e4 50       	subi	r30, 0x04	; 4
    2768:	fd 4d       	sbci	r31, 0xDD	; 221
    276a:	25 8d       	ldd	r18, Z+29	; 0x1d
    276c:	20 7c       	andi	r18, 0xC0	; 192
    276e:	09 f0       	breq	.+2      	; 0x2772 <udd_ep_alloc+0x36>
    2770:	4f c0       	rjmp	.+158    	; 0x2810 <udd_ep_alloc+0xd4>
    2772:	63 70       	andi	r22, 0x03	; 3
    2774:	61 30       	cpi	r22, 0x01	; 1
    2776:	11 f0       	breq	.+4      	; 0x277c <udd_ep_alloc+0x40>
    2778:	18 f4       	brcc	.+6      	; 0x2780 <udd_ep_alloc+0x44>
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <udd_ep_alloc+0x48>
    277c:	20 ec       	ldi	r18, 0xC0	; 192
    277e:	03 c0       	rjmp	.+6      	; 0x2786 <udd_ep_alloc+0x4a>
    2780:	20 e8       	ldi	r18, 0x80	; 128
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <udd_ep_alloc+0x4a>
    2784:	20 e4       	ldi	r18, 0x40	; 64
    2786:	40 38       	cpi	r20, 0x80	; 128
    2788:	51 05       	cpc	r21, r1
    278a:	e9 f0       	breq	.+58     	; 0x27c6 <udd_ep_alloc+0x8a>
    278c:	50 f4       	brcc	.+20     	; 0x27a2 <udd_ep_alloc+0x66>
    278e:	40 32       	cpi	r20, 0x20	; 32
    2790:	51 05       	cpc	r21, r1
    2792:	a9 f0       	breq	.+42     	; 0x27be <udd_ep_alloc+0x82>
    2794:	40 34       	cpi	r20, 0x40	; 64
    2796:	51 05       	cpc	r21, r1
    2798:	a1 f0       	breq	.+40     	; 0x27c2 <udd_ep_alloc+0x86>
    279a:	40 31       	cpi	r20, 0x10	; 16
    279c:	51 05       	cpc	r21, r1
    279e:	d9 f4       	brne	.+54     	; 0x27d6 <udd_ep_alloc+0x9a>
    27a0:	0c c0       	rjmp	.+24     	; 0x27ba <udd_ep_alloc+0x7e>
    27a2:	41 15       	cp	r20, r1
    27a4:	32 e0       	ldi	r19, 0x02	; 2
    27a6:	53 07       	cpc	r21, r19
    27a8:	91 f0       	breq	.+36     	; 0x27ce <udd_ep_alloc+0x92>
    27aa:	4f 3f       	cpi	r20, 0xFF	; 255
    27ac:	33 e0       	ldi	r19, 0x03	; 3
    27ae:	53 07       	cpc	r21, r19
    27b0:	81 f0       	breq	.+32     	; 0x27d2 <udd_ep_alloc+0x96>
    27b2:	41 15       	cp	r20, r1
    27b4:	51 40       	sbci	r21, 0x01	; 1
    27b6:	79 f4       	brne	.+30     	; 0x27d6 <udd_ep_alloc+0x9a>
    27b8:	08 c0       	rjmp	.+16     	; 0x27ca <udd_ep_alloc+0x8e>
    27ba:	41 e0       	ldi	r20, 0x01	; 1
    27bc:	0d c0       	rjmp	.+26     	; 0x27d8 <udd_ep_alloc+0x9c>
    27be:	42 e0       	ldi	r20, 0x02	; 2
    27c0:	0b c0       	rjmp	.+22     	; 0x27d8 <udd_ep_alloc+0x9c>
    27c2:	43 e0       	ldi	r20, 0x03	; 3
    27c4:	09 c0       	rjmp	.+18     	; 0x27d8 <udd_ep_alloc+0x9c>
    27c6:	44 e0       	ldi	r20, 0x04	; 4
    27c8:	07 c0       	rjmp	.+14     	; 0x27d8 <udd_ep_alloc+0x9c>
    27ca:	45 e0       	ldi	r20, 0x05	; 5
    27cc:	05 c0       	rjmp	.+10     	; 0x27d8 <udd_ep_alloc+0x9c>
    27ce:	46 e0       	ldi	r20, 0x06	; 6
    27d0:	03 c0       	rjmp	.+6      	; 0x27d8 <udd_ep_alloc+0x9c>
    27d2:	47 e0       	ldi	r20, 0x07	; 7
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <udd_ep_alloc+0x9c>
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	fc 01       	movw	r30, r24
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ee 0f       	add	r30, r30
    27e0:	ff 1f       	adc	r31, r31
    27e2:	ee 0f       	add	r30, r30
    27e4:	ff 1f       	adc	r31, r31
    27e6:	e4 50       	subi	r30, 0x04	; 4
    27e8:	fd 4d       	sbci	r31, 0xDD	; 221
    27ea:	15 8e       	std	Z+29, r1	; 0x1d
    27ec:	36 e0       	ldi	r19, 0x06	; 6
    27ee:	34 8f       	std	Z+28, r19	; 0x1c
    27f0:	24 2b       	or	r18, r20
    27f2:	25 8f       	std	Z+29, r18	; 0x1d
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	fc 01       	movw	r30, r24
    2802:	e4 50       	subi	r30, 0x04	; 4
    2804:	fd 4d       	sbci	r31, 0xDD	; 221
    2806:	85 8d       	ldd	r24, Z+29	; 0x1d
    2808:	80 62       	ori	r24, 0x20	; 32
    280a:	85 8f       	std	Z+29, r24	; 0x1d
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	08 95       	ret
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	08 95       	ret

00002814 <udd_ep_is_halted>:
    2814:	e8 2f       	mov	r30, r24
    2816:	ef 70       	andi	r30, 0x0F	; 15
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	08 2e       	mov	r0, r24
    2820:	00 0c       	add	r0, r0
    2822:	99 0b       	sbc	r25, r25
    2824:	88 27       	eor	r24, r24
    2826:	99 0f       	add	r25, r25
    2828:	88 1f       	adc	r24, r24
    282a:	99 27       	eor	r25, r25
    282c:	e8 0f       	add	r30, r24
    282e:	f9 1f       	adc	r31, r25
    2830:	ee 0f       	add	r30, r30
    2832:	ff 1f       	adc	r31, r31
    2834:	ee 0f       	add	r30, r30
    2836:	ff 1f       	adc	r31, r31
    2838:	ee 0f       	add	r30, r30
    283a:	ff 1f       	adc	r31, r31
    283c:	e4 50       	subi	r30, 0x04	; 4
    283e:	fd 4d       	sbci	r31, 0xDD	; 221
    2840:	85 8d       	ldd	r24, Z+29	; 0x1d
    2842:	82 fb       	bst	r24, 2
    2844:	88 27       	eor	r24, r24
    2846:	80 f9       	bld	r24, 0
    2848:	08 95       	ret

0000284a <udd_ep_clear_halt>:
    284a:	28 2f       	mov	r18, r24
    284c:	2f 70       	andi	r18, 0x0F	; 15
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	a9 01       	movw	r20, r18
    2852:	44 0f       	add	r20, r20
    2854:	55 1f       	adc	r21, r21
    2856:	28 2f       	mov	r18, r24
    2858:	08 2e       	mov	r0, r24
    285a:	00 0c       	add	r0, r0
    285c:	33 0b       	sbc	r19, r19
    285e:	22 27       	eor	r18, r18
    2860:	33 0f       	add	r19, r19
    2862:	22 1f       	adc	r18, r18
    2864:	33 27       	eor	r19, r19
    2866:	24 0f       	add	r18, r20
    2868:	35 1f       	adc	r19, r21
    286a:	f9 01       	movw	r30, r18
    286c:	ee 0f       	add	r30, r30
    286e:	ff 1f       	adc	r31, r31
    2870:	ee 0f       	add	r30, r30
    2872:	ff 1f       	adc	r31, r31
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	e4 50       	subi	r30, 0x04	; 4
    287a:	fd 4d       	sbci	r31, 0xDD	; 221
    287c:	95 8d       	ldd	r25, Z+29	; 0x1d
    287e:	92 ff       	sbrs	r25, 2
    2880:	17 c0       	rjmp	.+46     	; 0x28b0 <udd_ep_clear_halt+0x66>
    2882:	22 0f       	add	r18, r18
    2884:	33 1f       	adc	r19, r19
    2886:	22 0f       	add	r18, r18
    2888:	33 1f       	adc	r19, r19
    288a:	22 0f       	add	r18, r18
    288c:	33 1f       	adc	r19, r19
    288e:	f9 01       	movw	r30, r18
    2890:	e4 50       	subi	r30, 0x04	; 4
    2892:	fd 4d       	sbci	r31, 0xDD	; 221
    2894:	95 8d       	ldd	r25, Z+29	; 0x1d
    2896:	9b 7f       	andi	r25, 0xFB	; 251
    2898:	95 8f       	std	Z+29, r25	; 0x1d
    289a:	9e dc       	rcall	.-1732   	; 0x21d8 <udd_ep_get_job>
    289c:	fc 01       	movw	r30, r24
    289e:	80 81       	ld	r24, Z
    28a0:	80 ff       	sbrs	r24, 0
    28a2:	06 c0       	rjmp	.+12     	; 0x28b0 <udd_ep_clear_halt+0x66>
    28a4:	8e 7f       	andi	r24, 0xFE	; 254
    28a6:	80 83       	st	Z, r24
    28a8:	07 80       	ldd	r0, Z+7	; 0x07
    28aa:	f0 85       	ldd	r31, Z+8	; 0x08
    28ac:	e0 2d       	mov	r30, r0
    28ae:	09 95       	icall
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	08 95       	ret

000028b4 <udd_ep_run>:
    28b4:	7f 92       	push	r7
    28b6:	8f 92       	push	r8
    28b8:	9f 92       	push	r9
    28ba:	af 92       	push	r10
    28bc:	bf 92       	push	r11
    28be:	cf 92       	push	r12
    28c0:	df 92       	push	r13
    28c2:	ef 92       	push	r14
    28c4:	ff 92       	push	r15
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	98 2e       	mov	r9, r24
    28d0:	86 2e       	mov	r8, r22
    28d2:	6a 01       	movw	r12, r20
    28d4:	79 01       	movw	r14, r18
    28d6:	80 dc       	rcall	.-1792   	; 0x21d8 <udd_ep_get_job>
    28d8:	5c 01       	movw	r10, r24
    28da:	79 2c       	mov	r7, r9
    28dc:	77 1c       	adc	r7, r7
    28de:	77 24       	eor	r7, r7
    28e0:	77 1c       	adc	r7, r7
    28e2:	c9 2d       	mov	r28, r9
    28e4:	cf 70       	andi	r28, 0x0F	; 15
    28e6:	d0 e0       	ldi	r29, 0x00	; 0
    28e8:	cc 0f       	add	r28, r28
    28ea:	dd 1f       	adc	r29, r29
    28ec:	c7 0d       	add	r28, r7
    28ee:	d1 1d       	adc	r29, r1
    28f0:	fe 01       	movw	r30, r28
    28f2:	ee 0f       	add	r30, r30
    28f4:	ff 1f       	adc	r31, r31
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	e4 50       	subi	r30, 0x04	; 4
    2900:	fd 4d       	sbci	r31, 0xDD	; 221
    2902:	85 8d       	ldd	r24, Z+29	; 0x1d
    2904:	80 7c       	andi	r24, 0xC0	; 192
    2906:	09 f4       	brne	.+2      	; 0x290a <udd_ep_run+0x56>
    2908:	7d c0       	rjmp	.+250    	; 0x2a04 <udd_ep_run+0x150>
    290a:	fe 01       	movw	r30, r28
    290c:	ee 0f       	add	r30, r30
    290e:	ff 1f       	adc	r31, r31
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	e4 50       	subi	r30, 0x04	; 4
    291a:	fd 4d       	sbci	r31, 0xDD	; 221
    291c:	85 8d       	ldd	r24, Z+29	; 0x1d
    291e:	80 7c       	andi	r24, 0xC0	; 192
    2920:	80 3c       	cpi	r24, 0xC0	; 192
    2922:	61 f0       	breq	.+24     	; 0x293c <udd_ep_run+0x88>
    2924:	fe 01       	movw	r30, r28
    2926:	ee 0f       	add	r30, r30
    2928:	ff 1f       	adc	r31, r31
    292a:	ee 0f       	add	r30, r30
    292c:	ff 1f       	adc	r31, r31
    292e:	ee 0f       	add	r30, r30
    2930:	ff 1f       	adc	r31, r31
    2932:	e4 50       	subi	r30, 0x04	; 4
    2934:	fd 4d       	sbci	r31, 0xDD	; 221
    2936:	85 8d       	ldd	r24, Z+29	; 0x1d
    2938:	82 fd       	sbrc	r24, 2
    293a:	66 c0       	rjmp	.+204    	; 0x2a08 <udd_ep_run+0x154>
    293c:	8f b7       	in	r24, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	f5 01       	movw	r30, r10
    2942:	90 81       	ld	r25, Z
    2944:	90 ff       	sbrs	r25, 0
    2946:	03 c0       	rjmp	.+6      	; 0x294e <udd_ep_run+0x9a>
    2948:	8f bf       	out	0x3f, r24	; 63
    294a:	71 2c       	mov	r7, r1
    294c:	5e c0       	rjmp	.+188    	; 0x2a0a <udd_ep_run+0x156>
    294e:	f5 01       	movw	r30, r10
    2950:	90 81       	ld	r25, Z
    2952:	91 60       	ori	r25, 0x01	; 1
    2954:	90 83       	st	Z, r25
    2956:	8f bf       	out	0x3f, r24	; 63
    2958:	c1 82       	std	Z+1, r12	; 0x01
    295a:	d2 82       	std	Z+2, r13	; 0x02
    295c:	e3 82       	std	Z+3, r14	; 0x03
    295e:	f4 82       	std	Z+4, r15	; 0x04
    2960:	15 82       	std	Z+5, r1	; 0x05
    2962:	16 82       	std	Z+6, r1	; 0x06
    2964:	07 83       	std	Z+7, r16	; 0x07
    2966:	10 87       	std	Z+8, r17	; 0x08
    2968:	81 10       	cpse	r8, r1
    296a:	06 c0       	rjmp	.+12     	; 0x2978 <udd_ep_run+0xc4>
    296c:	91 e0       	ldi	r25, 0x01	; 1
    296e:	e1 14       	cp	r14, r1
    2970:	f1 04       	cpc	r15, r1
    2972:	19 f0       	breq	.+6      	; 0x297a <udd_ep_run+0xc6>
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	01 c0       	rjmp	.+2      	; 0x297a <udd_ep_run+0xc6>
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	f5 01       	movw	r30, r10
    297c:	80 81       	ld	r24, Z
    297e:	90 fb       	bst	r25, 0
    2980:	81 f9       	bld	r24, 1
    2982:	8b 7f       	andi	r24, 0xFB	; 251
    2984:	80 83       	st	Z, r24
    2986:	77 20       	and	r7, r7
    2988:	59 f0       	breq	.+22     	; 0x29a0 <udd_ep_run+0xec>
    298a:	cc 0f       	add	r28, r28
    298c:	dd 1f       	adc	r29, r29
    298e:	cc 0f       	add	r28, r28
    2990:	dd 1f       	adc	r29, r29
    2992:	cc 0f       	add	r28, r28
    2994:	dd 1f       	adc	r29, r29
    2996:	c4 50       	subi	r28, 0x04	; 4
    2998:	dd 4d       	sbci	r29, 0xDD	; 221
    299a:	1a a2       	std	Y+34, r1	; 0x22
    299c:	1b a2       	std	Y+35, r1	; 0x23
    299e:	2d c0       	rjmp	.+90     	; 0x29fa <udd_ep_run+0x146>
    29a0:	fe 01       	movw	r30, r28
    29a2:	ee 0f       	add	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	e4 50       	subi	r30, 0x04	; 4
    29b0:	fd 4d       	sbci	r31, 0xDD	; 221
    29b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    29b4:	80 7c       	andi	r24, 0xC0	; 192
    29b6:	80 3c       	cpi	r24, 0xC0	; 192
    29b8:	a1 f4       	brne	.+40     	; 0x29e2 <udd_ep_run+0x12e>
    29ba:	ce 01       	movw	r24, r28
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	88 5e       	subi	r24, 0xE8	; 232
    29ca:	9c 4d       	sbci	r25, 0xDC	; 220
    29cc:	df db       	rcall	.-2114   	; 0x218c <udd_ep_get_size>
    29ce:	bc 01       	movw	r22, r24
    29d0:	c7 01       	movw	r24, r14
    29d2:	65 d2       	rcall	.+1226   	; 0x2e9e <__udivmodhi4>
    29d4:	89 2b       	or	r24, r25
    29d6:	29 f0       	breq	.+10     	; 0x29e2 <udd_ep_run+0x12e>
    29d8:	f5 01       	movw	r30, r10
    29da:	80 81       	ld	r24, Z
    29dc:	8e 7f       	andi	r24, 0xFE	; 254
    29de:	80 83       	st	Z, r24
    29e0:	14 c0       	rjmp	.+40     	; 0x2a0a <udd_ep_run+0x156>
    29e2:	cc 0f       	add	r28, r28
    29e4:	dd 1f       	adc	r29, r29
    29e6:	cc 0f       	add	r28, r28
    29e8:	dd 1f       	adc	r29, r29
    29ea:	cc 0f       	add	r28, r28
    29ec:	dd 1f       	adc	r29, r29
    29ee:	c4 50       	subi	r28, 0x04	; 4
    29f0:	dd 4d       	sbci	r29, 0xDD	; 221
    29f2:	1e 8e       	std	Y+30, r1	; 0x1e
    29f4:	1f 8e       	std	Y+31, r1	; 0x1f
    29f6:	1a a2       	std	Y+34, r1	; 0x22
    29f8:	1b a2       	std	Y+35, r1	; 0x23
    29fa:	89 2d       	mov	r24, r9
    29fc:	77 dc       	rcall	.-1810   	; 0x22ec <udd_ep_trans_complet>
    29fe:	77 24       	eor	r7, r7
    2a00:	73 94       	inc	r7
    2a02:	03 c0       	rjmp	.+6      	; 0x2a0a <udd_ep_run+0x156>
    2a04:	71 2c       	mov	r7, r1
    2a06:	01 c0       	rjmp	.+2      	; 0x2a0a <udd_ep_run+0x156>
    2a08:	71 2c       	mov	r7, r1
    2a0a:	87 2d       	mov	r24, r7
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	bf 90       	pop	r11
    2a1e:	af 90       	pop	r10
    2a20:	9f 90       	pop	r9
    2a22:	8f 90       	pop	r8
    2a24:	7f 90       	pop	r7
    2a26:	08 95       	ret

00002a28 <udd_ep_abort>:
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	18 2f       	mov	r17, r24
    2a34:	f8 2e       	mov	r15, r24
    2a36:	ff 1c       	adc	r15, r15
    2a38:	ff 24       	eor	r15, r15
    2a3a:	ff 1c       	adc	r15, r15
    2a3c:	c8 2f       	mov	r28, r24
    2a3e:	cf 70       	andi	r28, 0x0F	; 15
    2a40:	d0 e0       	ldi	r29, 0x00	; 0
    2a42:	cc 0f       	add	r28, r28
    2a44:	dd 1f       	adc	r29, r29
    2a46:	cf 0d       	add	r28, r15
    2a48:	d1 1d       	adc	r29, r1
    2a4a:	c6 db       	rcall	.-2164   	; 0x21d8 <udd_ep_get_job>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ee 0f       	add	r30, r30
    2a52:	ff 1f       	adc	r31, r31
    2a54:	ee 0f       	add	r30, r30
    2a56:	ff 1f       	adc	r31, r31
    2a58:	ee 0f       	add	r30, r30
    2a5a:	ff 1f       	adc	r31, r31
    2a5c:	e8 5e       	subi	r30, 0xE8	; 232
    2a5e:	fc 4d       	sbci	r31, 0xDC	; 220
    2a60:	02 e0       	ldi	r16, 0x02	; 2
    2a62:	05 93       	las	Z, r16
    2a64:	8c 91       	ld	r24, X
    2a66:	80 ff       	sbrs	r24, 0
    2a68:	22 c0       	rjmp	.+68     	; 0x2aae <udd_ep_abort+0x86>
    2a6a:	8e 7f       	andi	r24, 0xFE	; 254
    2a6c:	8c 93       	st	X, r24
    2a6e:	17 96       	adiw	r26, 0x07	; 7
    2a70:	ed 91       	ld	r30, X+
    2a72:	fc 91       	ld	r31, X
    2a74:	18 97       	sbiw	r26, 0x08	; 8
    2a76:	30 97       	sbiw	r30, 0x00	; 0
    2a78:	d1 f0       	breq	.+52     	; 0x2aae <udd_ep_abort+0x86>
    2a7a:	ff 20       	and	r15, r15
    2a7c:	59 f0       	breq	.+22     	; 0x2a94 <udd_ep_abort+0x6c>
    2a7e:	cc 0f       	add	r28, r28
    2a80:	dd 1f       	adc	r29, r29
    2a82:	cc 0f       	add	r28, r28
    2a84:	dd 1f       	adc	r29, r29
    2a86:	cc 0f       	add	r28, r28
    2a88:	dd 1f       	adc	r29, r29
    2a8a:	c4 50       	subi	r28, 0x04	; 4
    2a8c:	dd 4d       	sbci	r29, 0xDD	; 221
    2a8e:	6a a1       	ldd	r22, Y+34	; 0x22
    2a90:	7b a1       	ldd	r23, Y+35	; 0x23
    2a92:	0a c0       	rjmp	.+20     	; 0x2aa8 <udd_ep_abort+0x80>
    2a94:	cc 0f       	add	r28, r28
    2a96:	dd 1f       	adc	r29, r29
    2a98:	cc 0f       	add	r28, r28
    2a9a:	dd 1f       	adc	r29, r29
    2a9c:	cc 0f       	add	r28, r28
    2a9e:	dd 1f       	adc	r29, r29
    2aa0:	c4 50       	subi	r28, 0x04	; 4
    2aa2:	dd 4d       	sbci	r29, 0xDD	; 221
    2aa4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2aa6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2aa8:	41 2f       	mov	r20, r17
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	09 95       	icall
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	08 95       	ret

00002aba <udd_ep_free>:
    2aba:	cf 93       	push	r28
    2abc:	c8 2f       	mov	r28, r24
    2abe:	b4 df       	rcall	.-152    	; 0x2a28 <udd_ep_abort>
    2ac0:	ec 2f       	mov	r30, r28
    2ac2:	ef 70       	andi	r30, 0x0F	; 15
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	ee 0f       	add	r30, r30
    2ac8:	ff 1f       	adc	r31, r31
    2aca:	8c 2f       	mov	r24, r28
    2acc:	cc 0f       	add	r28, r28
    2ace:	99 0b       	sbc	r25, r25
    2ad0:	88 27       	eor	r24, r24
    2ad2:	99 0f       	add	r25, r25
    2ad4:	88 1f       	adc	r24, r24
    2ad6:	99 27       	eor	r25, r25
    2ad8:	e8 0f       	add	r30, r24
    2ada:	f9 1f       	adc	r31, r25
    2adc:	ee 0f       	add	r30, r30
    2ade:	ff 1f       	adc	r31, r31
    2ae0:	ee 0f       	add	r30, r30
    2ae2:	ff 1f       	adc	r31, r31
    2ae4:	ee 0f       	add	r30, r30
    2ae6:	ff 1f       	adc	r31, r31
    2ae8:	e4 50       	subi	r30, 0x04	; 4
    2aea:	fd 4d       	sbci	r31, 0xDD	; 221
    2aec:	15 8e       	std	Z+29, r1	; 0x1d
    2aee:	cf 91       	pop	r28
    2af0:	08 95       	ret

00002af2 <udd_ep_set_halt>:
    2af2:	0f 93       	push	r16
    2af4:	e8 2f       	mov	r30, r24
    2af6:	ef 70       	andi	r30, 0x0F	; 15
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	ee 0f       	add	r30, r30
    2afc:	ff 1f       	adc	r31, r31
    2afe:	28 2f       	mov	r18, r24
    2b00:	08 2e       	mov	r0, r24
    2b02:	00 0c       	add	r0, r0
    2b04:	33 0b       	sbc	r19, r19
    2b06:	22 27       	eor	r18, r18
    2b08:	33 0f       	add	r19, r19
    2b0a:	22 1f       	adc	r18, r18
    2b0c:	33 27       	eor	r19, r19
    2b0e:	e2 0f       	add	r30, r18
    2b10:	f3 1f       	adc	r31, r19
    2b12:	ee 0f       	add	r30, r30
    2b14:	ff 1f       	adc	r31, r31
    2b16:	ee 0f       	add	r30, r30
    2b18:	ff 1f       	adc	r31, r31
    2b1a:	ee 0f       	add	r30, r30
    2b1c:	ff 1f       	adc	r31, r31
    2b1e:	df 01       	movw	r26, r30
    2b20:	a4 50       	subi	r26, 0x04	; 4
    2b22:	bd 4d       	sbci	r27, 0xDD	; 221
    2b24:	5d 96       	adiw	r26, 0x1d	; 29
    2b26:	9c 91       	ld	r25, X
    2b28:	5d 97       	sbiw	r26, 0x1d	; 29
    2b2a:	94 60       	ori	r25, 0x04	; 4
    2b2c:	5d 96       	adiw	r26, 0x1d	; 29
    2b2e:	9c 93       	st	X, r25
    2b30:	e8 5e       	subi	r30, 0xE8	; 232
    2b32:	fc 4d       	sbci	r31, 0xDC	; 220
    2b34:	01 e0       	ldi	r16, 0x01	; 1
    2b36:	06 93       	lac	Z, r16
    2b38:	77 df       	rcall	.-274    	; 0x2a28 <udd_ep_abort>
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	0f 91       	pop	r16
    2b3e:	08 95       	ret

00002b40 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2b40:	1f 92       	push	r1
    2b42:	0f 92       	push	r0
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	0f 92       	push	r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	0f 93       	push	r16
    2b4c:	2f 93       	push	r18
    2b4e:	3f 93       	push	r19
    2b50:	4f 93       	push	r20
    2b52:	5f 93       	push	r21
    2b54:	6f 93       	push	r22
    2b56:	7f 93       	push	r23
    2b58:	8f 93       	push	r24
    2b5a:	9f 93       	push	r25
    2b5c:	af 93       	push	r26
    2b5e:	bf 93       	push	r27
    2b60:	cf 93       	push	r28
    2b62:	ef 93       	push	r30
    2b64:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2b66:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b6a:	88 23       	and	r24, r24
    2b6c:	44 f4       	brge	.+16     	; 0x2b7e <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    2b6e:	80 e8       	ldi	r24, 0x80	; 128
    2b70:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2b74:	0e 94 32 0c 	call	0x1864	; 0x1864 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2b78:	0e 94 18 04 	call	0x830	; 0x830 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b7c:	8b c0       	rjmp	.+278    	; 0x2c94 <__vector_125+0x154>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2b7e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b82:	82 ff       	sbrs	r24, 2
    2b84:	20 c0       	rjmp	.+64     	; 0x2bc6 <__vector_125+0x86>
		udd_ack_underflow_event();
    2b86:	84 e0       	ldi	r24, 0x04	; 4
    2b88:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2b8c:	80 91 20 23 	lds	r24, 0x2320	; 0x802320 <udd_sram+0x24>
    2b90:	86 ff       	sbrs	r24, 6
    2b92:	80 c0       	rjmp	.+256    	; 0x2c94 <__vector_125+0x154>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b94:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b98:	81 fd       	sbrc	r24, 1
    2b9a:	7c c0       	rjmp	.+248    	; 0x2c94 <__vector_125+0x154>
    2b9c:	38 db       	rcall	.-2448   	; 0x220e <udd_ctrl_interrupt_tc_setup>
    2b9e:	81 11       	cpse	r24, r1
    2ba0:	79 c0       	rjmp	.+242    	; 0x2c94 <__vector_125+0x154>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2ba2:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ep_control_state>
    2ba6:	81 30       	cpi	r24, 0x01	; 1
    2ba8:	11 f4       	brne	.+4      	; 0x2bae <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2baa:	6e da       	rcall	.-2852   	; 0x2088 <udd_ctrl_send_zlp_in>
    2bac:	73 c0       	rjmp	.+230    	; 0x2c94 <__vector_125+0x154>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2bae:	84 30       	cpi	r24, 0x04	; 4
    2bb0:	09 f0       	breq	.+2      	; 0x2bb4 <__vector_125+0x74>
    2bb2:	70 c0       	rjmp	.+224    	; 0x2c94 <__vector_125+0x154>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2bb4:	e1 e2       	ldi	r30, 0x21	; 33
    2bb6:	f3 e2       	ldi	r31, 0x23	; 35
    2bb8:	04 e0       	ldi	r16, 0x04	; 4
    2bba:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2bbc:	e9 e1       	ldi	r30, 0x19	; 25
    2bbe:	f3 e2       	ldi	r31, 0x23	; 35
    2bc0:	04 e0       	ldi	r16, 0x04	; 4
    2bc2:	05 93       	las	Z, r16
    2bc4:	67 c0       	rjmp	.+206    	; 0x2c94 <__vector_125+0x154>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2bc6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2bca:	81 ff       	sbrs	r24, 1
    2bcc:	5e c0       	rjmp	.+188    	; 0x2c8a <__vector_125+0x14a>
		udd_ack_overflow_event();
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2bd4:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <udd_sram+0x1c>
    2bd8:	86 ff       	sbrs	r24, 6
    2bda:	5c c0       	rjmp	.+184    	; 0x2c94 <__vector_125+0x154>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2bdc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2be0:	81 fd       	sbrc	r24, 1
    2be2:	58 c0       	rjmp	.+176    	; 0x2c94 <__vector_125+0x154>
    2be4:	14 db       	rcall	.-2520   	; 0x220e <udd_ctrl_interrupt_tc_setup>
    2be6:	81 11       	cpse	r24, r1
    2be8:	55 c0       	rjmp	.+170    	; 0x2c94 <__vector_125+0x154>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2bea:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ep_control_state>
    2bee:	82 30       	cpi	r24, 0x02	; 2
    2bf0:	41 f4       	brne	.+16     	; 0x2c02 <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2bf2:	84 e0       	ldi	r24, 0x04	; 4
    2bf4:	80 93 fb 22 	sts	0x22FB, r24	; 0x8022fb <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2bf8:	e8 e1       	ldi	r30, 0x18	; 24
    2bfa:	f3 e2       	ldi	r31, 0x23	; 35
    2bfc:	02 e0       	ldi	r16, 0x02	; 2
    2bfe:	06 93       	lac	Z, r16
    2c00:	49 c0       	rjmp	.+146    	; 0x2c94 <__vector_125+0x154>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2c02:	83 30       	cpi	r24, 0x03	; 3
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <__vector_125+0xc8>
    2c06:	46 c0       	rjmp	.+140    	; 0x2c94 <__vector_125+0x154>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2c08:	e1 e2       	ldi	r30, 0x21	; 33
    2c0a:	f3 e2       	ldi	r31, 0x23	; 35
    2c0c:	04 e0       	ldi	r16, 0x04	; 4
    2c0e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c10:	e9 e1       	ldi	r30, 0x19	; 25
    2c12:	f3 e2       	ldi	r31, 0x23	; 35
    2c14:	04 e0       	ldi	r16, 0x04	; 4
    2c16:	05 93       	las	Z, r16
    2c18:	3d c0       	rjmp	.+122    	; 0x2c94 <__vector_125+0x154>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2c1a:	80 e1       	ldi	r24, 0x10	; 16
    2c1c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2c20:	c1 e0       	ldi	r28, 0x01	; 1
			udd_ep_abort(i);
    2c22:	8c 2f       	mov	r24, r28
    2c24:	01 df       	rcall	.-510    	; 0x2a28 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2c26:	8c 2f       	mov	r24, r28
    2c28:	80 68       	ori	r24, 0x80	; 128
    2c2a:	fe de       	rcall	.-516    	; 0x2a28 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2c2c:	cf 5f       	subi	r28, 0xFF	; 255
    2c2e:	c6 30       	cpi	r28, 0x06	; 6
    2c30:	c1 f7       	brne	.-16     	; 0x2c22 <__vector_125+0xe2>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2c32:	0e 94 0d 0c 	call	0x181a	; 0x181a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2c36:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c3a:	ec ef       	ldi	r30, 0xFC	; 252
    2c3c:	f2 e2       	ldi	r31, 0x22	; 34
    2c3e:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
    2c40:	96 e0       	ldi	r25, 0x06	; 6
    2c42:	94 8f       	std	Z+28, r25	; 0x1c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c44:	83 e4       	ldi	r24, 0x43	; 67
    2c46:	85 8f       	std	Z+29, r24	; 0x1d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c48:	15 a2       	std	Z+37, r1	; 0x25
	udd_endpoint_clear_status(ep_ctrl);
    2c4a:	94 a3       	std	Z+36, r25	; 0x24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c4c:	85 a3       	std	Z+37, r24	; 0x25
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2c4e:	87 eb       	ldi	r24, 0xB7	; 183
    2c50:	92 e2       	ldi	r25, 0x22	; 34
    2c52:	80 a3       	std	Z+32, r24	; 0x20
    2c54:	91 a3       	std	Z+33, r25	; 0x21
		// Reset endpoint control management
		udd_ctrl_init();
    2c56:	e3 d9       	rcall	.-3130   	; 0x201e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2c58:	1d c0       	rjmp	.+58     	; 0x2c94 <__vector_125+0x154>
	}

	if (udd_is_suspend_event()) {
    2c5a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c5e:	86 ff       	sbrs	r24, 6
    2c60:	08 c0       	rjmp	.+16     	; 0x2c72 <__vector_125+0x132>
		udd_ack_suspend_event();
    2c62:	80 e4       	ldi	r24, 0x40	; 64
    2c64:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	b0 d9       	rcall	.-3232   	; 0x1fcc <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2c6c:	0e 94 16 04 	call	0x82c	; 0x82c <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2c70:	11 c0       	rjmp	.+34     	; 0x2c94 <__vector_125+0x154>
	}

	if (udd_is_resume_event()) {
    2c72:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c76:	85 ff       	sbrs	r24, 5
    2c78:	0d c0       	rjmp	.+26     	; 0x2c94 <__vector_125+0x154>
		udd_ack_resume_event();
    2c7a:	80 e2       	ldi	r24, 0x20	; 32
    2c7c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	a4 d9       	rcall	.-3256   	; 0x1fcc <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2c84:	0e 94 17 04 	call	0x82e	; 0x82e <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2c88:	05 c0       	rjmp	.+10     	; 0x2c94 <__vector_125+0x154>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2c8a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c8e:	84 fd       	sbrc	r24, 4
    2c90:	c4 cf       	rjmp	.-120    	; 0x2c1a <__vector_125+0xda>
    2c92:	e3 cf       	rjmp	.-58     	; 0x2c5a <__vector_125+0x11a>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2c94:	ff 91       	pop	r31
    2c96:	ef 91       	pop	r30
    2c98:	cf 91       	pop	r28
    2c9a:	bf 91       	pop	r27
    2c9c:	af 91       	pop	r26
    2c9e:	9f 91       	pop	r25
    2ca0:	8f 91       	pop	r24
    2ca2:	7f 91       	pop	r23
    2ca4:	6f 91       	pop	r22
    2ca6:	5f 91       	pop	r21
    2ca8:	4f 91       	pop	r20
    2caa:	3f 91       	pop	r19
    2cac:	2f 91       	pop	r18
    2cae:	0f 91       	pop	r16
    2cb0:	0f 90       	pop	r0
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	0f 90       	pop	r0
    2cb6:	1f 90       	pop	r1
    2cb8:	18 95       	reti

00002cba <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2cba:	1f 92       	push	r1
    2cbc:	0f 92       	push	r0
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	0f 92       	push	r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	0f 93       	push	r16
    2cc6:	1f 93       	push	r17
    2cc8:	2f 93       	push	r18
    2cca:	3f 93       	push	r19
    2ccc:	4f 93       	push	r20
    2cce:	5f 93       	push	r21
    2cd0:	6f 93       	push	r22
    2cd2:	7f 93       	push	r23
    2cd4:	8f 93       	push	r24
    2cd6:	9f 93       	push	r25
    2cd8:	af 93       	push	r26
    2cda:	bf 93       	push	r27
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	ef 93       	push	r30
    2ce2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2ce4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ce8:	81 fd       	sbrc	r24, 1
    2cea:	03 c0       	rjmp	.+6      	; 0x2cf2 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2cec:	90 da       	rcall	.-2784   	; 0x220e <udd_ctrl_interrupt_tc_setup>
    2cee:	81 11       	cpse	r24, r1
    2cf0:	c1 c0       	rjmp	.+386    	; 0x2e74 <__vector_126+0x1ba>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2cf8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2cfc:	81 95       	neg	r24
    2cfe:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2d00:	e8 e1       	ldi	r30, 0x18	; 24
    2d02:	f3 e2       	ldi	r31, 0x23	; 35
    2d04:	e8 1b       	sub	r30, r24
    2d06:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2d08:	20 81       	ld	r18, Z
    2d0a:	31 81       	ldd	r19, Z+1	; 0x01
    2d0c:	28 51       	subi	r18, 0x18	; 24
    2d0e:	33 42       	sbci	r19, 0x23	; 35
    2d10:	36 95       	lsr	r19
    2d12:	27 95       	ror	r18
    2d14:	36 95       	lsr	r19
    2d16:	27 95       	ror	r18
    2d18:	36 95       	lsr	r19
    2d1a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2d1c:	82 2f       	mov	r24, r18
    2d1e:	86 95       	lsr	r24
    2d20:	20 fd       	sbrc	r18, 0
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <__vector_126+0x6e>
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	01 c0       	rjmp	.+2      	; 0x2d2a <__vector_126+0x70>
    2d28:	90 e8       	ldi	r25, 0x80	; 128
    2d2a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d2c:	e8 2f       	mov	r30, r24
    2d2e:	ef 70       	andi	r30, 0x0F	; 15
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	ee 0f       	add	r30, r30
    2d34:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2d36:	28 2f       	mov	r18, r24
    2d38:	08 2e       	mov	r0, r24
    2d3a:	00 0c       	add	r0, r0
    2d3c:	33 0b       	sbc	r19, r19
    2d3e:	22 27       	eor	r18, r18
    2d40:	33 0f       	add	r19, r19
    2d42:	22 1f       	adc	r18, r18
    2d44:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2d4a:	df 01       	movw	r26, r30
    2d4c:	aa 0f       	add	r26, r26
    2d4e:	bb 1f       	adc	r27, r27
    2d50:	aa 0f       	add	r26, r26
    2d52:	bb 1f       	adc	r27, r27
    2d54:	aa 0f       	add	r26, r26
    2d56:	bb 1f       	adc	r27, r27
    2d58:	a4 50       	subi	r26, 0x04	; 4
    2d5a:	bd 4d       	sbci	r27, 0xDD	; 221
    2d5c:	5c 96       	adiw	r26, 0x1c	; 28
    2d5e:	9c 91       	ld	r25, X
    2d60:	95 ff       	sbrs	r25, 5
    2d62:	88 c0       	rjmp	.+272    	; 0x2e74 <__vector_126+0x1ba>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2d64:	ee 0f       	add	r30, r30
    2d66:	ff 1f       	adc	r31, r31
    2d68:	ee 0f       	add	r30, r30
    2d6a:	ff 1f       	adc	r31, r31
    2d6c:	ee 0f       	add	r30, r30
    2d6e:	ff 1f       	adc	r31, r31
    2d70:	e8 5e       	subi	r30, 0xE8	; 232
    2d72:	fc 4d       	sbci	r31, 0xDC	; 220
    2d74:	00 e2       	ldi	r16, 0x20	; 32
    2d76:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2d78:	81 11       	cpse	r24, r1
    2d7a:	77 c0       	rjmp	.+238    	; 0x2e6a <__vector_126+0x1b0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2d7c:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ep_control_state>
    2d80:	84 30       	cpi	r24, 0x04	; 4
    2d82:	19 f4       	brne	.+6      	; 0x2d8a <__vector_126+0xd0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2d84:	8f d9       	rcall	.-3298   	; 0x20a4 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2d86:	4b d9       	rcall	.-3434   	; 0x201e <udd_ctrl_init>
    2d88:	75 c0       	rjmp	.+234    	; 0x2e74 <__vector_126+0x1ba>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2d8a:	00 91 1a 23 	lds	r16, 0x231A	; 0x80231a <udd_sram+0x1e>
    2d8e:	10 91 1b 23 	lds	r17, 0x231B	; 0x80231b <udd_sram+0x1f>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2d92:	80 91 c4 25 	lds	r24, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2d96:	90 91 c5 25 	lds	r25, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2d9a:	c0 91 f7 22 	lds	r28, 0x22F7	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    2d9e:	d0 91 f8 22 	lds	r29, 0x22F8	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
    2da2:	9e 01       	movw	r18, r28
    2da4:	20 0f       	add	r18, r16
    2da6:	31 1f       	adc	r19, r17
    2da8:	82 17       	cp	r24, r18
    2daa:	93 07       	cpc	r25, r19
    2dac:	18 f4       	brcc	.+6      	; 0x2db4 <__vector_126+0xfa>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2dae:	8c 01       	movw	r16, r24
    2db0:	0c 1b       	sub	r16, r28
    2db2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2db4:	80 91 c2 25 	lds	r24, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    2db8:	90 91 c3 25 	lds	r25, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    2dbc:	a8 01       	movw	r20, r16
    2dbe:	67 eb       	ldi	r22, 0xB7	; 183
    2dc0:	72 e2       	ldi	r23, 0x22	; 34
    2dc2:	8c 0f       	add	r24, r28
    2dc4:	9d 1f       	adc	r25, r29
    2dc6:	98 d0       	rcall	.+304    	; 0x2ef8 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2dc8:	c0 0f       	add	r28, r16
    2dca:	d1 1f       	adc	r29, r17
    2dcc:	c0 93 f7 22 	sts	0x22F7, r28	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    2dd0:	d0 93 f8 22 	sts	0x22F8, r29	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2dd4:	00 34       	cpi	r16, 0x40	; 64
    2dd6:	11 05       	cpc	r17, r1
    2dd8:	69 f4       	brne	.+26     	; 0x2df4 <__vector_126+0x13a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2dda:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ctrl_prev_payload_nb_trans>
    2dde:	90 91 fa 22 	lds	r25, 0x22FA	; 0x8022fa <udd_ctrl_prev_payload_nb_trans+0x1>
    2de2:	8c 0f       	add	r24, r28
    2de4:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2de6:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    2dea:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    2dee:	82 17       	cp	r24, r18
    2df0:	93 07       	cpc	r25, r19
    2df2:	80 f0       	brcs	.+32     	; 0x2e14 <__vector_126+0x15a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2df4:	ea eb       	ldi	r30, 0xBA	; 186
    2df6:	f5 e2       	ldi	r31, 0x25	; 37
    2df8:	c2 87       	std	Z+10, r28	; 0x0a
    2dfa:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2dfc:	06 84       	ldd	r0, Z+14	; 0x0e
    2dfe:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e00:	e0 2d       	mov	r30, r0
    2e02:	30 97       	sbiw	r30, 0x00	; 0
    2e04:	29 f0       	breq	.+10     	; 0x2e10 <__vector_126+0x156>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e06:	09 95       	icall
    2e08:	81 11       	cpse	r24, r1
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <__vector_126+0x156>
				// Stall ZLP
				udd_ctrl_stall_data();
    2e0c:	2f d9       	rcall	.-3490   	; 0x206c <udd_ctrl_stall_data>
    2e0e:	32 c0       	rjmp	.+100    	; 0x2e74 <__vector_126+0x1ba>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2e10:	3b d9       	rcall	.-3466   	; 0x2088 <udd_ctrl_send_zlp_in>
    2e12:	30 c0       	rjmp	.+96     	; 0x2e74 <__vector_126+0x1ba>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e14:	80 91 c4 25 	lds	r24, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2e18:	90 91 c5 25 	lds	r25, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2e1c:	c8 17       	cp	r28, r24
    2e1e:	d9 07       	cpc	r29, r25
    2e20:	f9 f4       	brne	.+62     	; 0x2e60 <__vector_126+0x1a6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2e22:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0xe>
    2e26:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0xf>
    2e2a:	30 97       	sbiw	r30, 0x00	; 0
    2e2c:	11 f4       	brne	.+4      	; 0x2e32 <__vector_126+0x178>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2e2e:	1e d9       	rcall	.-3524   	; 0x206c <udd_ctrl_stall_data>
    2e30:	21 c0       	rjmp	.+66     	; 0x2e74 <__vector_126+0x1ba>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2e32:	09 95       	icall
    2e34:	81 11       	cpse	r24, r1
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <__vector_126+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2e38:	19 d9       	rcall	.-3534   	; 0x206c <udd_ctrl_stall_data>
    2e3a:	1c c0       	rjmp	.+56     	; 0x2e74 <__vector_126+0x1ba>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2e3c:	20 91 f9 22 	lds	r18, 0x22F9	; 0x8022f9 <udd_ctrl_prev_payload_nb_trans>
    2e40:	30 91 fa 22 	lds	r19, 0x22FA	; 0x8022fa <udd_ctrl_prev_payload_nb_trans+0x1>
    2e44:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    2e48:	90 91 f8 22 	lds	r25, 0x22F8	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
    2e4c:	82 0f       	add	r24, r18
    2e4e:	93 1f       	adc	r25, r19
    2e50:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ctrl_prev_payload_nb_trans>
    2e54:	90 93 fa 22 	sts	0x22FA, r25	; 0x8022fa <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2e58:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_payload_nb_trans>
    2e5c:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2e60:	e8 e1       	ldi	r30, 0x18	; 24
    2e62:	f3 e2       	ldi	r31, 0x23	; 35
    2e64:	02 e0       	ldi	r16, 0x02	; 2
    2e66:	06 93       	lac	Z, r16
    2e68:	05 c0       	rjmp	.+10     	; 0x2e74 <__vector_126+0x1ba>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2e6a:	80 38       	cpi	r24, 0x80	; 128
    2e6c:	11 f4       	brne	.+4      	; 0x2e72 <__vector_126+0x1b8>
		udd_ctrl_in_sent();
    2e6e:	22 d9       	rcall	.-3516   	; 0x20b4 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <__vector_126+0x1ba>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2e72:	3c da       	rcall	.-2952   	; 0x22ec <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2e74:	ff 91       	pop	r31
    2e76:	ef 91       	pop	r30
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	bf 91       	pop	r27
    2e7e:	af 91       	pop	r26
    2e80:	9f 91       	pop	r25
    2e82:	8f 91       	pop	r24
    2e84:	7f 91       	pop	r23
    2e86:	6f 91       	pop	r22
    2e88:	5f 91       	pop	r21
    2e8a:	4f 91       	pop	r20
    2e8c:	3f 91       	pop	r19
    2e8e:	2f 91       	pop	r18
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	0f 90       	pop	r0
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	0f 90       	pop	r0
    2e9a:	1f 90       	pop	r1
    2e9c:	18 95       	reti

00002e9e <__udivmodhi4>:
    2e9e:	aa 1b       	sub	r26, r26
    2ea0:	bb 1b       	sub	r27, r27
    2ea2:	51 e1       	ldi	r21, 0x11	; 17
    2ea4:	07 c0       	rjmp	.+14     	; 0x2eb4 <__udivmodhi4_ep>

00002ea6 <__udivmodhi4_loop>:
    2ea6:	aa 1f       	adc	r26, r26
    2ea8:	bb 1f       	adc	r27, r27
    2eaa:	a6 17       	cp	r26, r22
    2eac:	b7 07       	cpc	r27, r23
    2eae:	10 f0       	brcs	.+4      	; 0x2eb4 <__udivmodhi4_ep>
    2eb0:	a6 1b       	sub	r26, r22
    2eb2:	b7 0b       	sbc	r27, r23

00002eb4 <__udivmodhi4_ep>:
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	5a 95       	dec	r21
    2eba:	a9 f7       	brne	.-22     	; 0x2ea6 <__udivmodhi4_loop>
    2ebc:	80 95       	com	r24
    2ebe:	90 95       	com	r25
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	cd 01       	movw	r24, r26
    2ec4:	08 95       	ret

00002ec6 <__divmodhi4>:
    2ec6:	97 fb       	bst	r25, 7
    2ec8:	07 2e       	mov	r0, r23
    2eca:	16 f4       	brtc	.+4      	; 0x2ed0 <__divmodhi4+0xa>
    2ecc:	00 94       	com	r0
    2ece:	06 d0       	rcall	.+12     	; 0x2edc <__divmodhi4_neg1>
    2ed0:	77 fd       	sbrc	r23, 7
    2ed2:	08 d0       	rcall	.+16     	; 0x2ee4 <__divmodhi4_neg2>
    2ed4:	e4 df       	rcall	.-56     	; 0x2e9e <__udivmodhi4>
    2ed6:	07 fc       	sbrc	r0, 7
    2ed8:	05 d0       	rcall	.+10     	; 0x2ee4 <__divmodhi4_neg2>
    2eda:	3e f4       	brtc	.+14     	; 0x2eea <__divmodhi4_exit>

00002edc <__divmodhi4_neg1>:
    2edc:	90 95       	com	r25
    2ede:	81 95       	neg	r24
    2ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee2:	08 95       	ret

00002ee4 <__divmodhi4_neg2>:
    2ee4:	70 95       	com	r23
    2ee6:	61 95       	neg	r22
    2ee8:	7f 4f       	sbci	r23, 0xFF	; 255

00002eea <__divmodhi4_exit>:
    2eea:	08 95       	ret

00002eec <__tablejump2__>:
    2eec:	ee 0f       	add	r30, r30
    2eee:	ff 1f       	adc	r31, r31
    2ef0:	05 90       	lpm	r0, Z+
    2ef2:	f4 91       	lpm	r31, Z
    2ef4:	e0 2d       	mov	r30, r0
    2ef6:	09 94       	ijmp

00002ef8 <memcpy>:
    2ef8:	fb 01       	movw	r30, r22
    2efa:	dc 01       	movw	r26, r24
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <memcpy+0xa>
    2efe:	01 90       	ld	r0, Z+
    2f00:	0d 92       	st	X+, r0
    2f02:	41 50       	subi	r20, 0x01	; 1
    2f04:	50 40       	sbci	r21, 0x00	; 0
    2f06:	d8 f7       	brcc	.-10     	; 0x2efe <memcpy+0x6>
    2f08:	08 95       	ret

00002f0a <_exit>:
    2f0a:	f8 94       	cli

00002f0c <__stop_program>:
    2f0c:	ff cf       	rjmp	.-2      	; 0x2f0c <__stop_program>
