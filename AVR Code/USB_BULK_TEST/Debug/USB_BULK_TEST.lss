
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00802000  00002f0c  00002fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000f06  008020aa  008020aa  0000304a  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000304a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000510  00000000  00000000  000030c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c56d  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f50  00000000  00000000  0000fb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009849  00000000  00000000  00011a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b8c  00000000  00000000  0001b2d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030279  00000000  00000000  0001be64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002560  00000000  00000000  0004c0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0004e640  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be4a  00000000  00000000  0004ea70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1c c1       	rjmp	.+568    	; 0x23a <__ctors_end>
       2:	00 00       	nop
       4:	36 c1       	rjmp	.+620    	; 0x272 <__bad_interrupt>
       6:	00 00       	nop
       8:	34 c1       	rjmp	.+616    	; 0x272 <__bad_interrupt>
       a:	00 00       	nop
       c:	32 c1       	rjmp	.+612    	; 0x272 <__bad_interrupt>
       e:	00 00       	nop
      10:	30 c1       	rjmp	.+608    	; 0x272 <__bad_interrupt>
      12:	00 00       	nop
      14:	2e c1       	rjmp	.+604    	; 0x272 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_6>
      1c:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_7>
      20:	28 c1       	rjmp	.+592    	; 0x272 <__bad_interrupt>
      22:	00 00       	nop
      24:	26 c1       	rjmp	.+588    	; 0x272 <__bad_interrupt>
      26:	00 00       	nop
      28:	24 c1       	rjmp	.+584    	; 0x272 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	22 c1       	rjmp	.+580    	; 0x272 <__bad_interrupt>
      2e:	00 00       	nop
      30:	20 c1       	rjmp	.+576    	; 0x272 <__bad_interrupt>
      32:	00 00       	nop
      34:	1e c1       	rjmp	.+572    	; 0x272 <__bad_interrupt>
      36:	00 00       	nop
      38:	1c c1       	rjmp	.+568    	; 0x272 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1a c1       	rjmp	.+564    	; 0x272 <__bad_interrupt>
      3e:	00 00       	nop
      40:	18 c1       	rjmp	.+560    	; 0x272 <__bad_interrupt>
      42:	00 00       	nop
      44:	16 c1       	rjmp	.+556    	; 0x272 <__bad_interrupt>
      46:	00 00       	nop
      48:	14 c1       	rjmp	.+552    	; 0x272 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	12 c1       	rjmp	.+548    	; 0x272 <__bad_interrupt>
      4e:	00 00       	nop
      50:	10 c1       	rjmp	.+544    	; 0x272 <__bad_interrupt>
      52:	00 00       	nop
      54:	0e c1       	rjmp	.+540    	; 0x272 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c c1       	rjmp	.+536    	; 0x272 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0a c1       	rjmp	.+532    	; 0x272 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_24>
      64:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_25>
      68:	04 c1       	rjmp	.+520    	; 0x272 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	02 c1       	rjmp	.+516    	; 0x272 <__bad_interrupt>
      6e:	00 00       	nop
      70:	00 c1       	rjmp	.+512    	; 0x272 <__bad_interrupt>
      72:	00 00       	nop
      74:	fe c0       	rjmp	.+508    	; 0x272 <__bad_interrupt>
      76:	00 00       	nop
      78:	fc c0       	rjmp	.+504    	; 0x272 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fa c0       	rjmp	.+500    	; 0x272 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f8 c0       	rjmp	.+496    	; 0x272 <__bad_interrupt>
      82:	00 00       	nop
      84:	f6 c0       	rjmp	.+492    	; 0x272 <__bad_interrupt>
      86:	00 00       	nop
      88:	f4 c0       	rjmp	.+488    	; 0x272 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f2 c0       	rjmp	.+484    	; 0x272 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f0 c0       	rjmp	.+480    	; 0x272 <__bad_interrupt>
      92:	00 00       	nop
      94:	ee c0       	rjmp	.+476    	; 0x272 <__bad_interrupt>
      96:	00 00       	nop
      98:	ec c0       	rjmp	.+472    	; 0x272 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ea c0       	rjmp	.+468    	; 0x272 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e8 c0       	rjmp	.+464    	; 0x272 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e6 c0       	rjmp	.+460    	; 0x272 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e4 c0       	rjmp	.+456    	; 0x272 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e2 c0       	rjmp	.+452    	; 0x272 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e0 c0       	rjmp	.+448    	; 0x272 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	de c0       	rjmp	.+444    	; 0x272 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dc c0       	rjmp	.+440    	; 0x272 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	da c0       	rjmp	.+436    	; 0x272 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d8 c0       	rjmp	.+432    	; 0x272 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d6 c0       	rjmp	.+428    	; 0x272 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d4 c0       	rjmp	.+424    	; 0x272 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d2 c0       	rjmp	.+420    	; 0x272 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d0 c0       	rjmp	.+416    	; 0x272 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ce c0       	rjmp	.+412    	; 0x272 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cc c0       	rjmp	.+408    	; 0x272 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ca c0       	rjmp	.+404    	; 0x272 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c8 c0       	rjmp	.+400    	; 0x272 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 c0       	rjmp	.+396    	; 0x272 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c4 c0       	rjmp	.+392    	; 0x272 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c2 c0       	rjmp	.+388    	; 0x272 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c0 c0       	rjmp	.+384    	; 0x272 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	be c0       	rjmp	.+380    	; 0x272 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	bc c0       	rjmp	.+376    	; 0x272 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ba c0       	rjmp	.+372    	; 0x272 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b8 c0       	rjmp	.+368    	; 0x272 <__bad_interrupt>
     102:	00 00       	nop
     104:	b6 c0       	rjmp	.+364    	; 0x272 <__bad_interrupt>
     106:	00 00       	nop
     108:	b4 c0       	rjmp	.+360    	; 0x272 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b2 c0       	rjmp	.+356    	; 0x272 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b0 c0       	rjmp	.+352    	; 0x272 <__bad_interrupt>
     112:	00 00       	nop
     114:	ae c0       	rjmp	.+348    	; 0x272 <__bad_interrupt>
     116:	00 00       	nop
     118:	ac c0       	rjmp	.+344    	; 0x272 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e2 c4       	rjmp	.+2500   	; 0xae2 <__vector_71>
     11e:	00 00       	nop
     120:	a8 c0       	rjmp	.+336    	; 0x272 <__bad_interrupt>
     122:	00 00       	nop
     124:	a6 c0       	rjmp	.+332    	; 0x272 <__bad_interrupt>
     126:	00 00       	nop
     128:	a4 c0       	rjmp	.+328    	; 0x272 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a2 c0       	rjmp	.+324    	; 0x272 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a0 c0       	rjmp	.+320    	; 0x272 <__bad_interrupt>
     132:	00 00       	nop
     134:	9e c0       	rjmp	.+316    	; 0x272 <__bad_interrupt>
     136:	00 00       	nop
     138:	9c c0       	rjmp	.+312    	; 0x272 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	9a c0       	rjmp	.+308    	; 0x272 <__bad_interrupt>
     13e:	00 00       	nop
     140:	98 c0       	rjmp	.+304    	; 0x272 <__bad_interrupt>
     142:	00 00       	nop
     144:	96 c0       	rjmp	.+300    	; 0x272 <__bad_interrupt>
     146:	00 00       	nop
     148:	94 c0       	rjmp	.+296    	; 0x272 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__vector_83>
     150:	90 c0       	rjmp	.+288    	; 0x272 <__bad_interrupt>
     152:	00 00       	nop
     154:	8e c0       	rjmp	.+284    	; 0x272 <__bad_interrupt>
     156:	00 00       	nop
     158:	8c c0       	rjmp	.+280    	; 0x272 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	8a c0       	rjmp	.+276    	; 0x272 <__bad_interrupt>
     15e:	00 00       	nop
     160:	88 c0       	rjmp	.+272    	; 0x272 <__bad_interrupt>
     162:	00 00       	nop
     164:	86 c0       	rjmp	.+268    	; 0x272 <__bad_interrupt>
     166:	00 00       	nop
     168:	84 c0       	rjmp	.+264    	; 0x272 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	82 c0       	rjmp	.+260    	; 0x272 <__bad_interrupt>
     16e:	00 00       	nop
     170:	80 c0       	rjmp	.+256    	; 0x272 <__bad_interrupt>
     172:	00 00       	nop
     174:	7e c0       	rjmp	.+252    	; 0x272 <__bad_interrupt>
     176:	00 00       	nop
     178:	7c c0       	rjmp	.+248    	; 0x272 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	7a c0       	rjmp	.+244    	; 0x272 <__bad_interrupt>
     17e:	00 00       	nop
     180:	78 c0       	rjmp	.+240    	; 0x272 <__bad_interrupt>
     182:	00 00       	nop
     184:	76 c0       	rjmp	.+236    	; 0x272 <__bad_interrupt>
     186:	00 00       	nop
     188:	74 c0       	rjmp	.+232    	; 0x272 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	72 c0       	rjmp	.+228    	; 0x272 <__bad_interrupt>
     18e:	00 00       	nop
     190:	70 c0       	rjmp	.+224    	; 0x272 <__bad_interrupt>
     192:	00 00       	nop
     194:	6e c0       	rjmp	.+220    	; 0x272 <__bad_interrupt>
     196:	00 00       	nop
     198:	6c c0       	rjmp	.+216    	; 0x272 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	6a c0       	rjmp	.+212    	; 0x272 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	68 c0       	rjmp	.+208    	; 0x272 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	66 c0       	rjmp	.+204    	; 0x272 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	64 c0       	rjmp	.+200    	; 0x272 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	62 c0       	rjmp	.+196    	; 0x272 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	60 c0       	rjmp	.+192    	; 0x272 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5e c0       	rjmp	.+188    	; 0x272 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5c c0       	rjmp	.+184    	; 0x272 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	5a c0       	rjmp	.+180    	; 0x272 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	58 c0       	rjmp	.+176    	; 0x272 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	56 c0       	rjmp	.+172    	; 0x272 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	54 c0       	rjmp	.+168    	; 0x272 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	52 c0       	rjmp	.+164    	; 0x272 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	50 c0       	rjmp	.+160    	; 0x272 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4e c0       	rjmp	.+156    	; 0x272 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4c c0       	rjmp	.+152    	; 0x272 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	4a c0       	rjmp	.+148    	; 0x272 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	48 c0       	rjmp	.+144    	; 0x272 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	46 c0       	rjmp	.+140    	; 0x272 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	44 c0       	rjmp	.+136    	; 0x272 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	42 c0       	rjmp	.+132    	; 0x272 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	40 c0       	rjmp	.+128    	; 0x272 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__vector_125>
     1f8:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__vector_126>
     1fc:	05 04       	cpc	r0, r5
     1fe:	07 04       	cpc	r0, r7
     200:	09 04       	cpc	r0, r9
     202:	0b 04       	cpc	r0, r11
     204:	0d 04       	cpc	r0, r13
     206:	0f 04       	cpc	r0, r15
     208:	11 04       	cpc	r1, r1
     20a:	13 04       	cpc	r1, r3
     20c:	94 0c       	add	r9, r4
     20e:	b9 0c       	add	r11, r9
     210:	dc 0c       	add	r13, r12
     212:	ff 0c       	add	r15, r15
     214:	08 0d       	add	r16, r8
     216:	0d 0d       	add	r16, r13
     218:	63 0d       	add	r22, r3
     21a:	68 0d       	add	r22, r8
     21c:	19 0d       	add	r17, r9
     21e:	23 0d       	add	r18, r3
     220:	2d 0d       	add	r18, r13
     222:	3b 0d       	add	r19, r11
     224:	3e 0d       	add	r19, r14
     226:	41 0d       	add	r20, r1
     228:	4c 0d       	add	r20, r12
     22a:	57 0d       	add	r21, r7
     22c:	d3 10       	cpse	r13, r3
     22e:	d6 10       	cpse	r13, r6
     230:	d9 10       	cpse	r13, r9
     232:	dc 10       	cpse	r13, r12
     234:	df 10       	cpse	r13, r15
     236:	e2 10       	cpse	r14, r2
     238:	e5 10       	cpse	r14, r5

0000023a <__ctors_end>:
     23a:	11 24       	eor	r1, r1
     23c:	1f be       	out	0x3f, r1	; 63
     23e:	cf ef       	ldi	r28, 0xFF	; 255
     240:	cd bf       	out	0x3d, r28	; 61
     242:	df e2       	ldi	r29, 0x2F	; 47
     244:	de bf       	out	0x3e, r29	; 62

00000246 <__do_copy_data>:
     246:	10 e2       	ldi	r17, 0x20	; 32
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e2       	ldi	r27, 0x20	; 32
     24c:	ec e0       	ldi	r30, 0x0C	; 12
     24e:	ff e2       	ldi	r31, 0x2F	; 47
     250:	02 c0       	rjmp	.+4      	; 0x256 <__do_copy_data+0x10>
     252:	05 90       	lpm	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	aa 3a       	cpi	r26, 0xAA	; 170
     258:	b1 07       	cpc	r27, r17
     25a:	d9 f7       	brne	.-10     	; 0x252 <__do_copy_data+0xc>

0000025c <__do_clear_bss>:
     25c:	2f e2       	ldi	r18, 0x2F	; 47
     25e:	aa ea       	ldi	r26, 0xAA	; 170
     260:	b0 e2       	ldi	r27, 0x20	; 32
     262:	01 c0       	rjmp	.+2      	; 0x266 <.do_clear_bss_start>

00000264 <.do_clear_bss_loop>:
     264:	1d 92       	st	X+, r1

00000266 <.do_clear_bss_start>:
     266:	a0 3b       	cpi	r26, 0xB0	; 176
     268:	b2 07       	cpc	r27, r18
     26a:	e1 f7       	brne	.-8      	; 0x264 <.do_clear_bss_loop>
     26c:	93 d2       	rcall	.+1318   	; 0x794 <main>
     26e:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <_exit>

00000272 <__bad_interrupt>:
     272:	c6 ce       	rjmp	.-628    	; 0x0 <__vectors>

00000274 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	14 e0       	ldi	r17, 0x04	; 4
     280:	1e 83       	std	Y+6, r17	; 0x06
     282:	8c e1       	ldi	r24, 0x1C	; 28
     284:	e8 d3       	rcall	.+2000   	; 0xa56 <ReadCalibrationByte>
     286:	e0 e6       	ldi	r30, 0x60	; 96
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	83 83       	std	Z+3, r24	; 0x03
     28c:	8b eb       	ldi	r24, 0xBB	; 187
     28e:	86 83       	std	Z+6, r24	; 0x06
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	85 83       	std	Z+5, r24	; 0x05
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	88 ed       	ldi	r24, 0xD8	; 216
     29a:	84 bf       	out	0x34, r24	; 52
     29c:	10 93 41 00 	sts	0x0041, r17	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	88 83       	st	Y, r24
     2a4:	e0 e5       	ldi	r30, 0x50	; 80
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	81 81       	ldd	r24, Z+1	; 0x01
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	e9 f7       	brne	.-6      	; 0x2a8 <tiny_calibration_init+0x34>
     2ae:	e0 e5       	ldi	r30, 0x50	; 80
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	80 83       	st	Z, r24
     2b8:	88 e1       	ldi	r24, 0x18	; 24
     2ba:	85 83       	std	Z+5, r24	; 0x05
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	80 ff       	sbrs	r24, 0
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <tiny_calibration_init+0x48>
     2c2:	e0 e5       	ldi	r30, 0x50	; 80
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 83       	st	Z, r24
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	84 ff       	sbrs	r24, 4
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x58>
     2d2:	88 ed       	ldi	r24, 0xD8	; 216
     2d4:	84 bf       	out	0x34, r24	; 52
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	08 95       	ret

000002e4 <tiny_calibration_first_sof>:
     2e4:	e0 e7       	ldi	r30, 0x70	; 112
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	85 81       	ldd	r24, Z+5	; 0x05
     2ea:	8e 7f       	andi	r24, 0xFE	; 254
     2ec:	85 83       	std	Z+5, r24	; 0x05
     2ee:	e0 e0       	ldi	r30, 0x00	; 0
     2f0:	fa e0       	ldi	r31, 0x0A	; 10
     2f2:	8f eb       	ldi	r24, 0xBF	; 191
     2f4:	9d e5       	ldi	r25, 0x5D	; 93
     2f6:	86 a3       	std	Z+38, r24	; 0x26
     2f8:	97 a3       	std	Z+39, r25	; 0x27
     2fa:	80 ee       	ldi	r24, 0xE0	; 224
     2fc:	9e e2       	ldi	r25, 0x2E	; 46
     2fe:	80 a3       	std	Z+32, r24	; 0x20
     300:	91 a3       	std	Z+33, r25	; 0x21
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 83       	st	Z, r24
     306:	08 95       	ret

00000308 <tiny_calibration_maintain>:
     308:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     30c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     310:	81 3e       	cpi	r24, 0xE1	; 225
     312:	2e e2       	ldi	r18, 0x2E	; 46
     314:	92 07       	cpc	r25, r18
     316:	20 f0       	brcs	.+8      	; 0x320 <tiny_calibration_maintain+0x18>
     318:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <cali_value_negative_gradient>
     31c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     320:	80 3e       	cpi	r24, 0xE0	; 224
     322:	2e e2       	ldi	r18, 0x2E	; 46
     324:	92 07       	cpc	r25, r18
     326:	20 f4       	brcc	.+8      	; 0x330 <tiny_calibration_maintain+0x28>
     328:	20 91 8f 23 	lds	r18, 0x238F	; 0x80238f <cali_value_positive_gradient>
     32c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     330:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     334:	22 23       	and	r18, r18
     336:	31 f0       	breq	.+12     	; 0x344 <tiny_calibration_maintain+0x3c>
     338:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     33c:	81 50       	subi	r24, 0x01	; 1
     33e:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     342:	35 c0       	rjmp	.+106    	; 0x3ae <tiny_calibration_maintain+0xa6>
     344:	88 5f       	subi	r24, 0xF8	; 248
     346:	9a 42       	sbci	r25, 0x2A	; 42
     348:	81 3d       	cpi	r24, 0xD1	; 209
     34a:	97 40       	sbci	r25, 0x07	; 7
     34c:	80 f1       	brcs	.+96     	; 0x3ae <tiny_calibration_maintain+0xa6>
     34e:	10 92 aa 20 	sts	0x20AA, r1	; 0x8020aa <__data_end>
     352:	80 91 ab 20 	lds	r24, 0x20AB	; 0x8020ab <outOfRange>
     356:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <outOfRange+0x1>
     35a:	a0 91 ad 20 	lds	r26, 0x20AD	; 0x8020ad <outOfRange+0x2>
     35e:	b0 91 ae 20 	lds	r27, 0x20AE	; 0x8020ae <outOfRange+0x3>
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	a1 1d       	adc	r26, r1
     366:	b1 1d       	adc	r27, r1
     368:	80 93 ab 20 	sts	0x20AB, r24	; 0x8020ab <outOfRange>
     36c:	90 93 ac 20 	sts	0x20AC, r25	; 0x8020ac <outOfRange+0x1>
     370:	a0 93 ad 20 	sts	0x20AD, r26	; 0x8020ad <outOfRange+0x2>
     374:	b0 93 ae 20 	sts	0x20AE, r27	; 0x8020ae <outOfRange+0x3>
     378:	80 91 ab 20 	lds	r24, 0x20AB	; 0x8020ab <outOfRange>
     37c:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <outOfRange+0x1>
     380:	a0 91 ad 20 	lds	r26, 0x20AD	; 0x8020ad <outOfRange+0x2>
     384:	b0 91 ae 20 	lds	r27, 0x20AE	; 0x8020ae <outOfRange+0x3>
     388:	89 2f       	mov	r24, r25
     38a:	9a 2f       	mov	r25, r26
     38c:	ab 2f       	mov	r26, r27
     38e:	bb 27       	eor	r27, r27
     390:	ee e9       	ldi	r30, 0x9E	; 158
     392:	f3 e2       	ldi	r31, 0x23	; 35
     394:	84 8b       	std	Z+20, r24	; 0x14
     396:	80 91 ab 20 	lds	r24, 0x20AB	; 0x8020ab <outOfRange>
     39a:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <outOfRange+0x1>
     39e:	a0 91 ad 20 	lds	r26, 0x20AD	; 0x8020ad <outOfRange+0x2>
     3a2:	b0 91 ae 20 	lds	r27, 0x20AE	; 0x8020ae <outOfRange+0x3>
     3a6:	83 8b       	std	Z+19, r24	; 0x13
     3a8:	86 e0       	ldi	r24, 0x06	; 6
     3aa:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3ae:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3b2:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	b1 f4       	brne	.+44     	; 0x3e6 <tiny_calibration_maintain+0xde>
     3ba:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3be:	8f 3f       	cpi	r24, 0xFF	; 255
     3c0:	91 f0       	breq	.+36     	; 0x3e6 <tiny_calibration_maintain+0xde>
     3c2:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3c6:	81 11       	cpse	r24, r1
     3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <tiny_calibration_maintain+0xce>
     3ca:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3ce:	81 50       	subi	r24, 0x01	; 1
     3d0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3d4:	08 95       	ret
     3d6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3da:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3de:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3e2:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3e6:	08 95       	ret

000003e8 <tiny_calibration_safe_add>:
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	09 f4       	brne	.+2      	; 0x3ee <tiny_calibration_safe_add+0x6>
     3ec:	66 c0       	rjmp	.+204    	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
     3ee:	0c f0       	brlt	.+2      	; 0x3f2 <tiny_calibration_safe_add+0xa>
     3f0:	9c 01       	movw	r18, r24
     3f2:	99 23       	and	r25, r25
     3f4:	34 f4       	brge	.+12     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     3f6:	22 27       	eor	r18, r18
     3f8:	33 27       	eor	r19, r19
     3fa:	28 1b       	sub	r18, r24
     3fc:	39 0b       	sbc	r19, r25
     3fe:	51 e0       	ldi	r21, 0x01	; 1
     400:	01 c0       	rjmp	.+2      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	e8 e6       	ldi	r30, 0x68	; 104
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	83 81       	ldd	r24, Z+3	; 0x03
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     410:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     414:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     418:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     41c:	96 95       	lsr	r25
     41e:	98 2f       	mov	r25, r24
     420:	88 27       	eor	r24, r24
     422:	97 95       	ror	r25
     424:	87 95       	ror	r24
     426:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     42a:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     42e:	42 81       	ldd	r20, Z+2	; 0x02
     430:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     434:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     438:	84 0f       	add	r24, r20
     43a:	91 1d       	adc	r25, r1
     43c:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     440:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     444:	00 00       	nop
     446:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     44a:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     44e:	82 17       	cp	r24, r18
     450:	93 07       	cpc	r25, r19
     452:	28 f4       	brcc	.+10     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     454:	10 92 90 23 	sts	0x2390, r1	; 0x802390 <calTemp>
     458:	10 92 91 23 	sts	0x2391, r1	; 0x802391 <calTemp+0x1>
     45c:	08 95       	ret
     45e:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     462:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     466:	82 0f       	add	r24, r18
     468:	93 1f       	adc	r25, r19
     46a:	81 15       	cp	r24, r1
     46c:	90 42       	sbci	r25, 0x20	; 32
     46e:	38 f0       	brcs	.+14     	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	9f e1       	ldi	r25, 0x1F	; 31
     474:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     478:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     47c:	08 95       	ret
     47e:	55 23       	and	r21, r21
     480:	59 f0       	breq	.+22     	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
     482:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     486:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     48a:	82 1b       	sub	r24, r18
     48c:	93 0b       	sbc	r25, r19
     48e:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     492:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     496:	0a c0       	rjmp	.+20     	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
     498:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     49c:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     4a0:	28 0f       	add	r18, r24
     4a2:	39 1f       	adc	r19, r25
     4a4:	20 93 90 23 	sts	0x2390, r18	; 0x802390 <calTemp>
     4a8:	30 93 91 23 	sts	0x2391, r19	; 0x802391 <calTemp+0x1>
     4ac:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     4b0:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     4b4:	8f 77       	andi	r24, 0x7F	; 127
     4b6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4ba:	08 95       	ret

000004bc <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4c0:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4c4:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4c8:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4cc:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4d0:	9e 01       	movw	r18, r28
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	20 93 93 23 	sts	0x2393, r18	; 0x802393 <gradient>
     4da:	30 93 94 23 	sts	0x2394, r19	; 0x802394 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4de:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <__data_end>
     4e2:	81 11       	cpse	r24, r1
     4e4:	4d c0       	rjmp	.+154    	; 0x580 <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4e6:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     4ea:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     4ee:	8e 3c       	cpi	r24, 0xCE	; 206
     4f0:	9f 4f       	sbci	r25, 0xFF	; 255
     4f2:	e4 f4       	brge	.+56     	; 0x52c <tiny_calibration_find_values+0x70>
     4f4:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     4f8:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     4fc:	8b 36       	cpi	r24, 0x6B	; 107
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	ac f0       	brlt	.+42     	; 0x52c <tiny_calibration_find_values+0x70>
			if(inarow){
     502:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     506:	88 23       	and	r24, r24
     508:	31 f0       	breq	.+12     	; 0x516 <tiny_calibration_find_values+0x5a>
				inarow--;
     50a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     50e:	81 50       	subi	r24, 0x01	; 1
     510:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     514:	35 c0       	rjmp	.+106    	; 0x580 <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     516:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     51a:	80 93 92 23 	sts	0x2392, r24	; 0x802392 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 aa 20 	sts	0x20AA, r24	; 0x8020aa <__data_end>
				inarow = NUM_INAROW;
     524:	8c e0       	ldi	r24, 0x0C	; 12
     526:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     52a:	2a c0       	rjmp	.+84     	; 0x580 <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     52c:	8c e0       	ldi	r24, 0x0C	; 12
     52e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     532:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     536:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     53a:	8a 36       	cpi	r24, 0x6A	; 106
     53c:	9f 4f       	sbci	r25, 0xFF	; 255
     53e:	1c f0       	brlt	.+6      	; 0x546 <tiny_calibration_find_values+0x8a>
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	02 c0       	rjmp	.+4      	; 0x54a <tiny_calibration_find_values+0x8e>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	80 93 8d 23 	sts	0x238D, r24	; 0x80238d <calChange>
     54e:	90 93 8e 23 	sts	0x238E, r25	; 0x80238e <calChange+0x1>
			calChange -= gradient / 48;
     552:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     556:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     55a:	20 91 8d 23 	lds	r18, 0x238D	; 0x80238d <calChange>
     55e:	30 91 8e 23 	lds	r19, 0x238E	; 0x80238e <calChange+0x1>
     562:	60 e3       	ldi	r22, 0x30	; 48
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__divmodhi4>
     56a:	26 1b       	sub	r18, r22
     56c:	37 0b       	sbc	r19, r23
     56e:	20 93 8d 23 	sts	0x238D, r18	; 0x80238d <calChange>
     572:	30 93 8e 23 	sts	0x238E, r19	; 0x80238e <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     576:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <calChange>
     57a:	90 91 8e 23 	lds	r25, 0x238E	; 0x80238e <calChange+0x1>
     57e:	34 df       	rcall	.-408    	; 0x3e8 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     580:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <__data_end>
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	29 f5       	brne	.+74     	; 0x5d2 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     588:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     58c:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     590:	c3 97       	sbiw	r24, 0x33	; 51
     592:	94 f0       	brlt	.+36     	; 0x5b8 <tiny_calibration_find_values+0xfc>
			if(inarow){
     594:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     598:	88 23       	and	r24, r24
     59a:	31 f0       	breq	.+12     	; 0x5a8 <tiny_calibration_find_values+0xec>
				inarow--;
     59c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     5a0:	81 50       	subi	r24, 0x01	; 1
     5a2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5a6:	15 c0       	rjmp	.+42     	; 0x5d2 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5a8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5ac:	80 93 8f 23 	sts	0x238F, r24	; 0x80238f <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5b0:	83 e0       	ldi	r24, 0x03	; 3
     5b2:	80 93 aa 20 	sts	0x20AA, r24	; 0x8020aa <__data_end>
     5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5b8:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     5bc:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     5c0:	87 39       	cpi	r24, 0x97	; 151
     5c2:	91 05       	cpc	r25, r1
     5c4:	1c f4       	brge	.+6      	; 0x5cc <tiny_calibration_find_values+0x110>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <tiny_calibration_find_values+0x114>
     5cc:	8f ef       	ldi	r24, 0xFF	; 255
     5ce:	9f ef       	ldi	r25, 0xFF	; 255
     5d0:	0b df       	rcall	.-490    	; 0x3e8 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5d2:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5d6:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5e0:	86 17       	cp	r24, r22
     5e2:	97 07       	cpc	r25, r23
     5e4:	79 f0       	breq	.+30     	; 0x604 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5e6:	68 17       	cp	r22, r24
     5e8:	79 07       	cpc	r23, r25
     5ea:	28 f4       	brcc	.+10     	; 0x5f6 <magnitude_difference+0x16>
     5ec:	9c 01       	movw	r18, r24
     5ee:	26 1b       	sub	r18, r22
     5f0:	37 0b       	sbc	r19, r23
     5f2:	b9 01       	movw	r22, r18
     5f4:	09 c0       	rjmp	.+18     	; 0x608 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5f6:	86 17       	cp	r24, r22
     5f8:	97 07       	cpc	r25, r23
     5fa:	18 f4       	brcc	.+6      	; 0x602 <magnitude_difference+0x22>
     5fc:	68 1b       	sub	r22, r24
     5fe:	79 0b       	sbc	r23, r25
     600:	03 c0       	rjmp	.+6      	; 0x608 <magnitude_difference+0x28>
     602:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	86 2f       	mov	r24, r22
     60a:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     60c:	08 95       	ret

0000060e <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     616:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     61a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     61e:	89 2b       	or	r24, r25
     620:	51 f0       	breq	.+20     	; 0x636 <tiny_calibration_layer2+0x28>
		layer2_counter--;
     622:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     626:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     630:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     634:	4d c0       	rjmp	.+154    	; 0x6d0 <tiny_calibration_layer2+0xc2>
	}
	layer2_counter = LAYER2_INTERVAL;
     636:	80 e4       	ldi	r24, 0x40	; 64
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     63e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     642:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     646:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	09 f4       	brne	.+2      	; 0x650 <tiny_calibration_layer2+0x42>
     64e:	40 c0       	rjmp	.+128    	; 0x6d0 <tiny_calibration_layer2+0xc2>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     650:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     654:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	TRFCNT_temp = TRFCNT_temp % (global_mode > 5 ? PACKET_SIZE : HALFPACKET_SIZE);
     658:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <global_mode>
     65c:	26 30       	cpi	r18, 0x06	; 6
     65e:	18 f4       	brcc	.+6      	; 0x666 <tiny_calibration_layer2+0x58>
     660:	67 e7       	ldi	r22, 0x77	; 119
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	02 c0       	rjmp	.+4      	; 0x66a <tiny_calibration_layer2+0x5c>
     666:	6e ee       	ldi	r22, 0xEE	; 238
     668:	72 e0       	ldi	r23, 0x02	; 2
     66a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodhi4>
     66e:	08 2f       	mov	r16, r24
     670:	19 2f       	mov	r17, r25
     672:	c8 2f       	mov	r28, r24
     674:	d1 2f       	mov	r29, r17
	
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     676:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     67a:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     67e:	8c 17       	cp	r24, r28
     680:	9d 07       	cpc	r25, r29
     682:	80 f4       	brcc	.+32     	; 0x6a4 <tiny_calibration_layer2+0x96>
     684:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     688:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68c:	80 2f       	mov	r24, r16
     68e:	91 2f       	mov	r25, r17
     690:	a7 df       	rcall	.-178    	; 0x5e0 <magnitude_difference>
     692:	02 97       	sbiw	r24, 0x02	; 2
     694:	38 f0       	brcs	.+14     	; 0x6a4 <tiny_calibration_layer2+0x96>
		TC_CALI.PERBUF = 24000;
     696:	80 ec       	ldi	r24, 0xC0	; 192
     698:	9d e5       	ldi	r25, 0x5D	; 93
     69a:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     69e:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6a2:	16 c0       	rjmp	.+44     	; 0x6d0 <tiny_calibration_layer2+0xc2>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6a4:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6a8:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6ac:	c8 17       	cp	r28, r24
     6ae:	d9 07       	cpc	r29, r25
     6b0:	78 f4       	brcc	.+30     	; 0x6d0 <tiny_calibration_layer2+0xc2>
     6b2:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6b6:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6ba:	80 2f       	mov	r24, r16
     6bc:	91 2f       	mov	r25, r17
     6be:	90 df       	rcall	.-224    	; 0x5e0 <magnitude_difference>
     6c0:	02 97       	sbiw	r24, 0x02	; 2
     6c2:	30 f0       	brcs	.+12     	; 0x6d0 <tiny_calibration_layer2+0xc2>
		TC_CALI.PERBUF = 23999;
     6c4:	8f eb       	ldi	r24, 0xBF	; 191
     6c6:	9d e5       	ldi	r25, 0x5D	; 93
     6c8:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6cc:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6da:	ac 01       	movw	r20, r24
     6dc:	46 0f       	add	r20, r22
     6de:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6e0:	86 1b       	sub	r24, r22
     6e2:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6e4:	e0 e0       	ldi	r30, 0x00	; 0
     6e6:	fa e0       	ldi	r31, 0x0A	; 10
     6e8:	20 a1       	ldd	r18, Z+32	; 0x20
     6ea:	31 a1       	ldd	r19, Z+33	; 0x21
     6ec:	24 17       	cp	r18, r20
     6ee:	35 07       	cpc	r19, r21
     6f0:	d8 f7       	brcc	.-10     	; 0x6e8 <tiny_calibration_synchronise_phase+0xe>
     6f2:	20 a1       	ldd	r18, Z+32	; 0x20
     6f4:	31 a1       	ldd	r19, Z+33	; 0x21
     6f6:	82 17       	cp	r24, r18
     6f8:	93 07       	cpc	r25, r19
     6fa:	b0 f7       	brcc	.-20     	; 0x6e8 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     6fc:	08 95       	ret

000006fe <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     6fe:	e0 e8       	ldi	r30, 0x80	; 128
     700:	f6 e0       	ldi	r31, 0x06	; 6
     702:	8f e0       	ldi	r24, 0x0F	; 15
     704:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	84 83       	std	Z+4, r24	; 0x04
     70a:	08 95       	ret

0000070c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     70c:	08 95       	ret

0000070e <iso_callback>:
bool main_setup_in_received(void)
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	84 2f       	mov	r24, r20
	unsigned short offset = (ep - 0x81) * 125;
     714:	24 2f       	mov	r18, r20
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	21 58       	subi	r18, 0x81	; 129
     71a:	31 09       	sbc	r19, r1
     71c:	9d e7       	ldi	r25, 0x7D	; 125
     71e:	92 9f       	mul	r25, r18
     720:	b0 01       	movw	r22, r0
     722:	93 9f       	mul	r25, r19
     724:	70 0d       	add	r23, r0
     726:	11 24       	eor	r1, r1
	if (global_mode < 5){
     728:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <global_mode>
     72c:	95 30       	cpi	r25, 0x05	; 5
     72e:	d0 f4       	brcc	.+52     	; 0x764 <iso_callback+0x56>
		if(ep > 0x83) offset += 375; //Shift from range [375, 750]  to [750, 1125]  Don't do this in modes 6 and 7 because they use 750 byte long sub-buffers.
     730:	44 38       	cpi	r20, 0x84	; 132
     732:	10 f0       	brcs	.+4      	; 0x738 <iso_callback+0x2a>
     734:	69 58       	subi	r22, 0x89	; 137
     736:	7e 4f       	sbci	r23, 0xFE	; 254
		udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + offset], 125, iso_callback);
     738:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <usb_state>
     73c:	47 e7       	ldi	r20, 0x77	; 119
     73e:	51 e0       	ldi	r21, 0x01	; 1
     740:	94 9f       	mul	r25, r20
     742:	90 01       	movw	r18, r0
     744:	95 9f       	mul	r25, r21
     746:	30 0d       	add	r19, r0
     748:	11 24       	eor	r1, r1
     74a:	62 0f       	add	r22, r18
     74c:	73 1f       	adc	r23, r19
     74e:	ab 01       	movw	r20, r22
     750:	44 53       	subi	r20, 0x34	; 52
     752:	58 4d       	sbci	r21, 0xD8	; 216
     754:	07 e8       	ldi	r16, 0x87	; 135
     756:	13 e0       	ldi	r17, 0x03	; 3
     758:	2d e7       	ldi	r18, 0x7D	; 125
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <udd_ep_run>
     762:	15 c0       	rjmp	.+42     	; 0x78e <iso_callback+0x80>
	}
	else{
		udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE + offset], 125, iso_callback);
     764:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <usb_state>
     768:	2e ee       	ldi	r18, 0xEE	; 238
     76a:	32 e0       	ldi	r19, 0x02	; 2
     76c:	92 9f       	mul	r25, r18
     76e:	a0 01       	movw	r20, r0
     770:	93 9f       	mul	r25, r19
     772:	50 0d       	add	r21, r0
     774:	11 24       	eor	r1, r1
     776:	64 0f       	add	r22, r20
     778:	75 1f       	adc	r23, r21
     77a:	ab 01       	movw	r20, r22
     77c:	44 53       	subi	r20, 0x34	; 52
     77e:	58 4d       	sbci	r21, 0xD8	; 216
     780:	07 e8       	ldi	r16, 0x87	; 135
     782:	13 e0       	ldi	r17, 0x03	; 3
     784:	2d e7       	ldi	r18, 0x7D	; 125
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <udd_ep_run>
	}
	return;
}
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <main>:
volatile unsigned char modeChanged = 0;

unified_debug uds;

int main(void){
	irq_initialize_vectors();
     794:	87 e0       	ldi	r24, 0x07	; 7
     796:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     79a:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     79c:	6b dd       	rcall	.-1322   	; 0x274 <tiny_calibration_init>
		
	board_init();
     79e:	b6 df       	rcall	.-148    	; 0x70c <board_init>
	udc_start();
     7a0:	0e 94 12 0c 	call	0x1824	; 0x1824 <udc_start>
	tiny_dac_setup();
     7a4:	b1 d1       	rcall	.+866    	; 0xb08 <tiny_dac_setup>
	tiny_dma_setup();
     7a6:	d4 d1       	rcall	.+936    	; 0xb50 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	5d d1       	rcall	.+698    	; 0xa68 <tiny_adc_setup>
	tiny_adc_pid_setup();
     7ae:	49 d1       	rcall	.+658    	; 0xa42 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     7b0:	8c e0       	ldi	r24, 0x0C	; 12
     7b2:	3d d1       	rcall	.+634    	; 0xa2e <tiny_adc_ch1setup>
	tiny_timer_setup();
     7b4:	cc d5       	rcall	.+2968   	; 0x134e <tiny_timer_setup>
	tiny_uart_setup();
     7b6:	87 d6       	rcall	.+3342   	; 0x14c6 <tiny_uart_setup>
	tiny_spi_setup();
     7b8:	a0 d6       	rcall	.+3392   	; 0x14fa <tiny_spi_setup>
	tiny_dig_setup();
     7ba:	a1 df       	rcall	.-190    	; 0x6fe <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");

	strcpy(uds.header, "debug123");
     7bc:	89 e0       	ldi	r24, 0x09	; 9
     7be:	e0 ea       	ldi	r30, 0xA0	; 160
     7c0:	f0 e2       	ldi	r31, 0x20	; 32
     7c2:	ae e9       	ldi	r26, 0x9E	; 158
     7c4:	b3 e2       	ldi	r27, 0x23	; 35
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0x32>
	...
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			if(modeChanged){
     7ea:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <modeChanged>
     7ee:	88 23       	and	r24, r24
     7f0:	71 f3       	breq	.-36     	; 0x7ce <main+0x3a>
				switch(futureMode){
     7f2:	e0 91 ca 25 	lds	r30, 0x25CA	; 0x8025ca <futureMode>
     7f6:	8e 2f       	mov	r24, r30
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	88 30       	cpi	r24, 0x08	; 8
     7fc:	91 05       	cpc	r25, r1
     7fe:	a0 f4       	brcc	.+40     	; 0x828 <main+0x94>
     800:	fc 01       	movw	r30, r24
     802:	e2 50       	subi	r30, 0x02	; 2
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
     80a:	ce d1       	rcall	.+924    	; 0xba8 <tiny_dma_set_mode_0>
					break;
     80c:	0d c0       	rjmp	.+26     	; 0x828 <main+0x94>
					case 1:
					tiny_dma_set_mode_1();
     80e:	3e d2       	rcall	.+1148   	; 0xc8c <tiny_dma_set_mode_1>
					break;
     810:	0b c0       	rjmp	.+22     	; 0x828 <main+0x94>
					case 2:
					tiny_dma_set_mode_2();
     812:	c5 d2       	rcall	.+1418   	; 0xd9e <tiny_dma_set_mode_2>
					break;
     814:	09 c0       	rjmp	.+18     	; 0x828 <main+0x94>
					case 3:
					tiny_dma_set_mode_3();
     816:	49 d3       	rcall	.+1682   	; 0xeaa <tiny_dma_set_mode_3>
					break;
     818:	07 c0       	rjmp	.+14     	; 0x828 <main+0x94>
					case 4:
					tiny_dma_set_mode_4();
     81a:	d5 d3       	rcall	.+1962   	; 0xfc6 <tiny_dma_set_mode_4>
					break;
     81c:	05 c0       	rjmp	.+10     	; 0x828 <main+0x94>
					case 5:
					tiny_dma_set_mode_5();
     81e:	5b d4       	rcall	.+2230   	; 0x10d6 <tiny_dma_set_mode_5>
					break;
     820:	03 c0       	rjmp	.+6      	; 0x828 <main+0x94>
					case 6:
					tiny_dma_set_mode_6();
     822:	5a d4       	rcall	.+2228   	; 0x10d8 <tiny_dma_set_mode_6>
					break;
     824:	01 c0       	rjmp	.+2      	; 0x828 <main+0x94>
					case 7:
					tiny_dma_set_mode_7();
     826:	cb d4       	rcall	.+2454   	; 0x11be <tiny_dma_set_mode_7>
					break;
				}
				modeChanged = 0;
     828:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <modeChanged>
     82c:	d0 cf       	rjmp	.-96     	; 0x7ce <main+0x3a>

0000082e <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     82e:	08 95       	ret

00000830 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     830:	08 95       	ret

00000832 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     836:	a0 e0       	ldi	r26, 0x00	; 0
     838:	b1 e0       	ldi	r27, 0x01	; 1
     83a:	54 96       	adiw	r26, 0x14	; 20
     83c:	8c 91       	ld	r24, X
     83e:	54 97       	sbiw	r26, 0x14	; 20
     840:	ee e9       	ldi	r30, 0x9E	; 158
     842:	f3 e2       	ldi	r31, 0x23	; 35
     844:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     846:	55 96       	adiw	r26, 0x15	; 21
     848:	8c 91       	ld	r24, X
     84a:	55 97       	sbiw	r26, 0x15	; 21
     84c:	82 87       	std	Z+10, r24	; 0x0a
	uds.trfcntL1 = DMA.CH1.TRFCNTL;
     84e:	94 96       	adiw	r26, 0x24	; 36
     850:	8c 91       	ld	r24, X
     852:	94 97       	sbiw	r26, 0x24	; 36
     854:	83 87       	std	Z+11, r24	; 0x0b
	uds.trfcntH1 = DMA.CH1.TRFCNTH;
     856:	95 96       	adiw	r26, 0x25	; 37
     858:	8c 91       	ld	r24, X
     85a:	95 97       	sbiw	r26, 0x25	; 37
     85c:	84 87       	std	Z+12, r24	; 0x0c
	uds.counterL = TC_CALI.CNTL;
     85e:	c0 e0       	ldi	r28, 0x00	; 0
     860:	da e0       	ldi	r29, 0x0A	; 10
     862:	88 a1       	ldd	r24, Y+32	; 0x20
     864:	85 8b       	std	Z+21, r24	; 0x15
	uds.counterH = TC_CALI.CNTH;
     866:	89 a1       	ldd	r24, Y+33	; 0x21
     868:	86 8b       	std	Z+22, r24	; 0x16
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     86a:	54 96       	adiw	r26, 0x14	; 20
     86c:	8d 91       	ld	r24, X+
     86e:	9c 91       	ld	r25, X
     870:	55 97       	sbiw	r26, 0x15	; 21
     872:	86 34       	cpi	r24, 0x46	; 70
     874:	91 40       	sbci	r25, 0x01	; 1
     876:	80 f0       	brcs	.+32     	; 0x898 <main_sof_action+0x66>
     878:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     87c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     880:	89 3a       	cpi	r24, 0xA9	; 169
     882:	91 40       	sbci	r25, 0x01	; 1
     884:	48 f4       	brcc	.+18     	; 0x898 <main_sof_action+0x66>
		currentTrfcnt = DMA.CH0.TRFCNT;
     886:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     88a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     88e:	80 93 a8 2f 	sts	0x2FA8, r24	; 0x802fa8 <currentTrfcnt>
     892:	90 93 a9 2f 	sts	0x2FA9, r25	; 0x802fa9 <currentTrfcnt+0x1>
		asm("nop");
     896:	00 00       	nop
	}
	if(firstFrame){
     898:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <firstFrame>
     89c:	88 23       	and	r24, r24
     89e:	39 f0       	breq	.+14     	; 0x8ae <main_sof_action+0x7c>
		tiny_calibration_first_sof();
     8a0:	21 dd       	rcall	.-1470   	; 0x2e4 <tiny_calibration_first_sof>
		firstFrame = 0;
     8a2:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <firstFrame>
		tcinit = 1;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <tcinit>
		return;
     8ac:	64 c0       	rjmp	.+200    	; 0x976 <main_sof_action+0x144>
	}
	else{
		if(tcinit){
     8ae:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <tcinit>
     8b2:	88 23       	and	r24, r24
     8b4:	b9 f1       	breq	.+110    	; 0x924 <main_sof_action+0xf2>
			if(calibration_values_found == 0x03){
     8b6:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <__data_end>
     8ba:	83 30       	cpi	r24, 0x03	; 3
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <main_sof_action+0x92>
				tiny_calibration_maintain();
     8be:	24 dd       	rcall	.-1464   	; 0x308 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     8c0:	a6 de       	rcall	.-692    	; 0x60e <tiny_calibration_layer2>
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <main_sof_action+0x94>
			} else tiny_calibration_find_values();
     8c4:	fb dd       	rcall	.-1034   	; 0x4bc <tiny_calibration_find_values>
			if(debug_divider == DEBUG_DIVISION){
     8c6:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <debug_divider>
     8ca:	81 11       	cpse	r24, r1
     8cc:	26 c0       	rjmp	.+76     	; 0x91a <main_sof_action+0xe8>
				debug_divider = 0;
     8ce:	10 92 b0 20 	sts	0x20B0, r1	; 0x8020b0 <debug_divider>
				cntCnt[cntCntCnt] = DMA.CH0.TRFCNT;
     8d2:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <cntCntCnt>
     8d6:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <cntCntCnt+0x1>
     8da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	e8 55       	subi	r30, 0x58	; 88
     8e8:	f2 4d       	sbci	r31, 0xD2	; 210
     8ea:	80 83       	st	Z, r24
     8ec:	91 83       	std	Z+1, r25	; 0x01
				if(cntCntCnt == (CNT_CNT_MAX - 1)){
     8ee:	80 91 b1 20 	lds	r24, 0x20B1	; 0x8020b1 <cntCntCnt>
     8f2:	90 91 b2 20 	lds	r25, 0x20B2	; 0x8020b2 <cntCntCnt+0x1>
     8f6:	8f 3f       	cpi	r24, 0xFF	; 255
     8f8:	91 05       	cpc	r25, r1
     8fa:	29 f4       	brne	.+10     	; 0x906 <main_sof_action+0xd4>
					cntCntCnt = 0;
     8fc:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <cntCntCnt>
     900:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <cntCntCnt+0x1>
     904:	0f c0       	rjmp	.+30     	; 0x924 <main_sof_action+0xf2>
				}
				else cntCntCnt++;
     906:	80 91 b1 20 	lds	r24, 0x20B1	; 0x8020b1 <cntCntCnt>
     90a:	90 91 b2 20 	lds	r25, 0x20B2	; 0x8020b2 <cntCntCnt+0x1>
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <cntCntCnt>
     914:	90 93 b2 20 	sts	0x20B2, r25	; 0x8020b2 <cntCntCnt+0x1>
     918:	05 c0       	rjmp	.+10     	; 0x924 <main_sof_action+0xf2>
			}
			else debug_divider++;
     91a:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <debug_divider>
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <debug_divider>
		}
	}
	
	if(debugOnNextEnd){
     924:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <debugOnNextEnd>
     928:	88 23       	and	r24, r24
     92a:	51 f0       	breq	.+20     	; 0x940 <main_sof_action+0x10e>
		currentTrfcnt = DMA.CH0.TRFCNT;
     92c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     930:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     934:	80 93 a8 2f 	sts	0x2FA8, r24	; 0x802fa8 <currentTrfcnt>
     938:	90 93 a9 2f 	sts	0x2FA9, r25	; 0x802fa9 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     93c:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <debugOnNextEnd>
	}
	if(global_mode < 5){
     940:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     944:	85 30       	cpi	r24, 0x05	; 5
     946:	60 f4       	brcc	.+24     	; 0x960 <main_sof_action+0x12e>
		usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     948:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     94c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	27 37       	cpi	r18, 0x77	; 119
     954:	31 40       	sbci	r19, 0x01	; 1
     956:	08 f0       	brcs	.+2      	; 0x95a <main_sof_action+0x128>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <usb_state>
     95e:	0b c0       	rjmp	.+22     	; 0x976 <main_sof_action+0x144>
	}
	else{
		usb_state = (DMA.CH0.TRFCNT < 750) ? 1 : 0;
     960:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     964:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	2e 3e       	cpi	r18, 0xEE	; 238
     96c:	32 40       	sbci	r19, 0x02	; 2
     96e:	08 f0       	brcs	.+2      	; 0x972 <main_sof_action+0x140>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <usb_state>
	}
	return;
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <main_vendor_enable>:

bool main_vendor_enable(void)
{
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
	main_b_vendor_enable = true;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <main_b_vendor_enable>
	firstFrame = 1;
     986:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <firstFrame>
	udd_ep_run(0x81, false, (uint8_t *)&isoBuf[0], 125, iso_callback);
     98a:	07 e8       	ldi	r16, 0x87	; 135
     98c:	13 e0       	ldi	r17, 0x03	; 3
     98e:	2d e7       	ldi	r18, 0x7D	; 125
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	4c ec       	ldi	r20, 0xCC	; 204
     994:	57 e2       	ldi	r21, 0x27	; 39
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	81 e8       	ldi	r24, 0x81	; 129
     99a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <udd_ep_run>
	udd_ep_run(0x82, false, (uint8_t *)&isoBuf[125], 125, iso_callback);
     99e:	2d e7       	ldi	r18, 0x7D	; 125
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	49 e4       	ldi	r20, 0x49	; 73
     9a4:	58 e2       	ldi	r21, 0x28	; 40
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	82 e8       	ldi	r24, 0x82	; 130
     9aa:	0e 94 59 14 	call	0x28b2	; 0x28b2 <udd_ep_run>
	udd_ep_run(0x83, false, (uint8_t *)&isoBuf[250], 125, iso_callback);
     9ae:	2d e7       	ldi	r18, 0x7D	; 125
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	46 ec       	ldi	r20, 0xC6	; 198
     9b4:	58 e2       	ldi	r21, 0x28	; 40
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	83 e8       	ldi	r24, 0x83	; 131
     9ba:	0e 94 59 14 	call	0x28b2	; 0x28b2 <udd_ep_run>
	udd_ep_run(0x84, false, (uint8_t *)&isoBuf[375], 125, iso_callback);
     9be:	2d e7       	ldi	r18, 0x7D	; 125
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	43 e4       	ldi	r20, 0x43	; 67
     9c4:	59 e2       	ldi	r21, 0x29	; 41
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	84 e8       	ldi	r24, 0x84	; 132
     9ca:	0e 94 59 14 	call	0x28b2	; 0x28b2 <udd_ep_run>
	udd_ep_run(0x85, false, (uint8_t *)&isoBuf[500], 125, iso_callback);
     9ce:	2d e7       	ldi	r18, 0x7D	; 125
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 ec       	ldi	r20, 0xC0	; 192
     9d4:	59 e2       	ldi	r21, 0x29	; 41
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	85 e8       	ldi	r24, 0x85	; 133
     9da:	0e 94 59 14 	call	0x28b2	; 0x28b2 <udd_ep_run>
	udd_ep_run(0x86, false, (uint8_t *)&isoBuf[625], 125, iso_callback);
     9de:	2d e7       	ldi	r18, 0x7D	; 125
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	4d e3       	ldi	r20, 0x3D	; 61
     9e4:	5a e2       	ldi	r21, 0x2A	; 42
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	86 e8       	ldi	r24, 0x86	; 134
     9ea:	0e 94 59 14 	call	0x28b2	; 0x28b2 <udd_ep_run>
	return true;
}
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     9f6:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <main_b_vendor_enable>
     9fa:	08 95       	ret

000009fc <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	08 95       	ret

00000a00 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	08 95       	ret

00000a04 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     a04:	e0 e0       	ldi	r30, 0x00	; 0
     a06:	f2 e0       	ldi	r31, 0x02	; 2
     a08:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a0a:	98 2f       	mov	r25, r24
     a0c:	9c 71       	andi	r25, 0x1C	; 28
     a0e:	93 68       	ori	r25, 0x83	; 131
     a10:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     a12:	88 23       	and	r24, r24
     a14:	1c f4       	brge	.+6      	; 0xa1c <tiny_adc_ch0setup+0x18>
     a16:	90 e1       	ldi	r25, 0x10	; 16
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <tiny_adc_ch0setup+0x1c>
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	89 2b       	or	r24, r25
     a22:	e0 e0       	ldi	r30, 0x00	; 0
     a24:	f2 e0       	ldi	r31, 0x02	; 2
     a26:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a28:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     a2a:	16 a2       	std	Z+38, r1	; 0x26
     a2c:	08 95       	ret

00000a2e <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     a2e:	e0 e0       	ldi	r30, 0x00	; 0
     a30:	f2 e0       	ldi	r31, 0x02	; 2
     a32:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a34:	83 68       	ori	r24, 0x83	; 131
     a36:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     a38:	80 e1       	ldi	r24, 0x10	; 16
     a3a:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a3c:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     a3e:	16 aa       	std	Z+54, r1	; 0x36
     a40:	08 95       	ret

00000a42 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     a42:	e0 e0       	ldi	r30, 0x00	; 0
     a44:	f2 e0       	ldi	r31, 0x02	; 2
     a46:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a48:	83 e8       	ldi	r24, 0x83	; 131
     a4a:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     a4c:	8f e2       	ldi	r24, 0x2F	; 47
     a4e:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a50:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     a52:	16 a6       	std	Z+46, r1	; 0x2e
     a54:	08 95       	ret

00000a56 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     a56:	aa ec       	ldi	r26, 0xCA	; 202
     a58:	b1 e0       	ldi	r27, 0x01	; 1
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     a5e:	e8 2f       	mov	r30, r24
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     a64:	1c 92       	st	X, r1

	return( result );
}
     a66:	08 95       	ret

00000a68 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     a6c:	e0 e7       	ldi	r30, 0x70	; 112
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	9d 7f       	andi	r25, 0xFD	; 253
     a74:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     a76:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a7a:	62 30       	cpi	r22, 0x02	; 2
     a7c:	31 f1       	breq	.+76     	; 0xaca <tiny_adc_setup+0x62>
     a7e:	e0 e0       	ldi	r30, 0x00	; 0
     a80:	f2 e0       	ldi	r31, 0x02	; 2
     a82:	9c e1       	ldi	r25, 0x1C	; 28
     a84:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a86:	90 e4       	ldi	r25, 0x40	; 64
     a88:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a8a:	81 11       	cpse	r24, r1
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <tiny_adc_setup+0x2a>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <tiny_adc_setup+0x2c>
     a92:	80 ec       	ldi	r24, 0xC0	; 192
     a94:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
	#else
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     a98:	61 30       	cpi	r22, 0x01	; 1
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <tiny_adc_setup+0x38>
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <tiny_adc_setup+0x3a>
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	c0 e0       	ldi	r28, 0x00	; 0
     aa4:	d2 e0       	ldi	r29, 0x02	; 2
     aa6:	8c 83       	std	Y+4, r24	; 0x04
	#endif
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     aa8:	80 e2       	ldi	r24, 0x20	; 32
     aaa:	d5 df       	rcall	.-86     	; 0xa56 <ReadCalibrationByte>
     aac:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     aae:	81 e2       	ldi	r24, 0x21	; 33
     ab0:	d2 df       	rcall	.-92     	; 0xa56 <ReadCalibrationByte>
     ab2:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     ab4:	18 8e       	std	Y+24, r1	; 0x18
     ab6:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     abc:	c2 df       	rcall	.-124    	; 0xa42 <tiny_adc_pid_setup>
     abe:	0e c0       	rjmp	.+28     	; 0xadc <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ac0:	80 ec       	ldi	r24, 0xC0	; 192
     ac2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
	#else
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	ec cf       	rjmp	.-40     	; 0xaa2 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     aca:	e0 e0       	ldi	r30, 0x00	; 0
     acc:	f2 e0       	ldi	r31, 0x02	; 2
     ace:	9e e1       	ldi	r25, 0x1E	; 30
     ad0:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     ad2:	90 e4       	ldi	r25, 0x40	; 64
     ad4:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ad6:	81 11       	cpse	r24, r1
     ad8:	f3 cf       	rjmp	.-26     	; 0xac0 <tiny_adc_setup+0x58>
     ada:	d9 cf       	rjmp	.-78     	; 0xa8e <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     ae2:	1f 92       	push	r1
     ae4:	0f 92       	push	r0
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	0f 92       	push	r0
     aea:	11 24       	eor	r1, r1
     aec:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     afc:	8f 91       	pop	r24
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     b0c:	e0 e7       	ldi	r30, 0x70	; 112
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	82 81       	ldd	r24, Z+2	; 0x02
     b12:	8b 7f       	andi	r24, 0xFB	; 251
     b14:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     b16:	c0 e2       	ldi	r28, 0x20	; 32
     b18:	d3 e0       	ldi	r29, 0x03	; 3
     b1a:	8d e0       	ldi	r24, 0x0D	; 13
     b1c:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     b1e:	80 e4       	ldi	r24, 0x40	; 64
     b20:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     b22:	89 e0       	ldi	r24, 0x09	; 9
     b24:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     b26:	83 e3       	ldi	r24, 0x33	; 51
     b28:	96 df       	rcall	.-212    	; 0xa56 <ReadCalibrationByte>
     b2a:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     b2c:	82 e3       	ldi	r24, 0x32	; 50
     b2e:	93 df       	rcall	.-218    	; 0xa56 <ReadCalibrationByte>
     b30:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     b32:	87 e3       	ldi	r24, 0x37	; 55
     b34:	90 df       	rcall	.-224    	; 0xa56 <ReadCalibrationByte>
     b36:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     b38:	86 e3       	ldi	r24, 0x36	; 54
     b3a:	8d df       	rcall	.-230    	; 0xa56 <ReadCalibrationByte>
     b3c:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     b3e:	e0 e2       	ldi	r30, 0x20	; 32
     b40:	f6 e0       	ldi	r31, 0x06	; 6
     b42:	80 81       	ld	r24, Z
     b44:	83 60       	ori	r24, 0x03	; 3
     b46:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     b48:	14 82       	std	Z+4, r1	; 0x04
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <tiny_dma_setup>:
		median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
		
}

void tiny_dma_loop_mode_7(void){
     b50:	e0 e7       	ldi	r30, 0x70	; 112
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8e 7f       	andi	r24, 0xFE	; 254
     b58:	80 83       	st	Z, r24
     b5a:	83 e8       	ldi	r24, 0x83	; 131
     b5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     b60:	08 95       	ret

00000b62 <tiny_dma_flush>:
     b62:	e0 e0       	ldi	r30, 0x00	; 0
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	10 8a       	std	Z+16, r1	; 0x10
     b68:	80 e4       	ldi	r24, 0x40	; 64
     b6a:	80 8b       	std	Z+16, r24	; 0x10
     b6c:	10 a2       	std	Z+32, r1	; 0x20
     b6e:	80 a3       	std	Z+32, r24	; 0x20
     b70:	10 aa       	std	Z+48, r1	; 0x30
     b72:	80 ab       	std	Z+48, r24	; 0x30
     b74:	e0 e4       	ldi	r30, 0x40	; 64
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	10 82       	st	Z, r1
     b7a:	80 83       	st	Z, r24
     b7c:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <b1_state>
     b80:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <b2_state>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <usb_state>
     b8a:	10 92 9c 23 	sts	0x239C, r1	; 0x80239c <dma_ch0_ran>
     b8e:	10 92 9d 23 	sts	0x239D, r1	; 0x80239d <dma_ch0_ran+0x1>
     b92:	10 92 9a 23 	sts	0x239A, r1	; 0x80239a <dma_ch1_ran>
     b96:	10 92 9b 23 	sts	0x239B, r1	; 0x80239b <dma_ch1_ran+0x1>
     b9a:	08 95       	ret

00000b9c <tiny_dma_delayed_set>:
     b9c:	80 93 ca 25 	sts	0x25CA, r24	; 0x8025ca <futureMode>
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 af 20 	sts	0x20AF, r24	; 0x8020af <modeChanged>
     ba6:	08 95       	ret

00000ba8 <tiny_dma_set_mode_0>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     bb0:	d8 df       	rcall	.-80     	; 0xb62 <tiny_dma_flush>
     bb2:	c0 e0       	ldi	r28, 0x00	; 0
     bb4:	d1 e0       	ldi	r29, 0x01	; 1
     bb6:	1e aa       	std	Y+54, r1	; 0x36
     bb8:	84 e2       	ldi	r24, 0x24	; 36
     bba:	88 ab       	std	Y+48, r24	; 0x30
     bbc:	19 aa       	std	Y+49, r1	; 0x31
     bbe:	49 e5       	ldi	r20, 0x59	; 89
     bc0:	4a ab       	std	Y+50, r20	; 0x32
     bc2:	32 e0       	ldi	r19, 0x02	; 2
     bc4:	3b ab       	std	Y+51, r19	; 0x33
     bc6:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     bca:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     bce:	6c ab       	std	Y+52, r22	; 0x34
     bd0:	7d ab       	std	Y+53, r23	; 0x35
     bd2:	6b ec       	ldi	r22, 0xCB	; 203
     bd4:	75 e2       	ldi	r23, 0x25	; 37
     bd6:	68 af       	std	Y+56, r22	; 0x38
     bd8:	79 af       	std	Y+57, r23	; 0x39
     bda:	1a ae       	std	Y+58, r1	; 0x3a
     bdc:	9b e3       	ldi	r25, 0x3B	; 59
     bde:	9c af       	std	Y+60, r25	; 0x3c
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     be6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bea:	28 a9       	ldd	r18, Y+48	; 0x30
     bec:	20 68       	ori	r18, 0x80	; 128
     bee:	28 ab       	std	Y+48, r18	; 0x30
     bf0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f1 e0       	ldi	r31, 0x01	; 1
     bf8:	80 83       	st	Z, r24
     bfa:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bfe:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c02:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c06:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     c0a:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     c0e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c12:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c16:	4a eb       	ldi	r20, 0xBA	; 186
     c18:	53 e2       	ldi	r21, 0x23	; 35
     c1a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c1e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c22:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c26:	29 e3       	ldi	r18, 0x39	; 57
     c28:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c2c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c30:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c34:	90 81       	ld	r25, Z
     c36:	90 68       	ori	r25, 0x80	; 128
     c38:	90 83       	st	Z, r25
     c3a:	18 8a       	std	Y+16, r1	; 0x10
     c3c:	90 e4       	ldi	r25, 0x40	; 64
     c3e:	98 8b       	std	Y+16, r25	; 0x10
     c40:	88 8b       	std	Y+16, r24	; 0x10
     c42:	19 8a       	std	Y+17, r1	; 0x11
     c44:	95 e9       	ldi	r25, 0x95	; 149
     c46:	9a 8b       	std	Y+18, r25	; 0x12
     c48:	90 e1       	ldi	r25, 0x10	; 16
     c4a:	9b 8b       	std	Y+19, r25	; 0x13
     c4c:	4e ee       	ldi	r20, 0xEE	; 238
     c4e:	52 e0       	ldi	r21, 0x02	; 2
     c50:	4c 8b       	std	Y+20, r20	; 0x14
     c52:	5d 8b       	std	Y+21, r21	; 0x15
     c54:	88 8f       	std	Y+24, r24	; 0x18
     c56:	39 8f       	std	Y+25, r19	; 0x19
     c58:	1a 8e       	std	Y+26, r1	; 0x1a
     c5a:	8c ec       	ldi	r24, 0xCC	; 204
     c5c:	97 e2       	ldi	r25, 0x27	; 39
     c5e:	8c 8f       	std	Y+28, r24	; 0x1c
     c60:	9d 8f       	std	Y+29, r25	; 0x1d
     c62:	1e 8e       	std	Y+30, r1	; 0x1e
     c64:	68 ec       	ldi	r22, 0xC8	; 200
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	84 ef       	ldi	r24, 0xF4	; 244
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	36 dd       	rcall	.-1428   	; 0x6da <tiny_calibration_synchronise_phase>
     c6e:	88 ec       	ldi	r24, 0xC8	; 200
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     c76:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     c80:	88 89       	ldd	r24, Y+16	; 0x10
     c82:	80 68       	ori	r24, 0x80	; 128
     c84:	88 8b       	std	Y+16, r24	; 0x10
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <tiny_dma_set_mode_1>:
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	11 e0       	ldi	r17, 0x01	; 1
     c94:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     c98:	64 df       	rcall	.-312    	; 0xb62 <tiny_dma_flush>
     c9a:	c0 e0       	ldi	r28, 0x00	; 0
     c9c:	d1 e0       	ldi	r29, 0x01	; 1
     c9e:	18 aa       	std	Y+48, r1	; 0x30
     ca0:	80 e4       	ldi	r24, 0x40	; 64
     ca2:	88 ab       	std	Y+48, r24	; 0x30
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	88 ab       	std	Y+48, r24	; 0x30
     ca8:	19 aa       	std	Y+49, r1	; 0x31
     caa:	1a aa       	std	Y+50, r1	; 0x32
     cac:	4b e4       	ldi	r20, 0x4B	; 75
     cae:	4b ab       	std	Y+51, r20	; 0x33
     cb0:	1c aa       	std	Y+52, r1	; 0x34
     cb2:	1d aa       	std	Y+53, r1	; 0x35
     cb4:	1e aa       	std	Y+54, r1	; 0x36
     cb6:	8a e0       	ldi	r24, 0x0A	; 10
     cb8:	90 e2       	ldi	r25, 0x20	; 32
     cba:	88 af       	std	Y+56, r24	; 0x38
     cbc:	99 af       	std	Y+57, r25	; 0x39
     cbe:	1a ae       	std	Y+58, r1	; 0x3a
     cc0:	70 ea       	ldi	r23, 0xA0	; 160
     cc2:	7c af       	std	Y+60, r23	; 0x3c
     cc4:	68 e0       	ldi	r22, 0x08	; 8
     cc6:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     cca:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     cce:	88 a9       	ldd	r24, Y+48	; 0x30
     cd0:	80 6a       	ori	r24, 0xA0	; 160
     cd2:	88 ab       	std	Y+48, r24	; 0x30
     cd4:	e0 ea       	ldi	r30, 0xA0	; 160
     cd6:	f8 e0       	ldi	r31, 0x08	; 8
     cd8:	85 e5       	ldi	r24, 0x55	; 85
     cda:	80 83       	st	Z, r24
     cdc:	80 83       	st	Z, r24
     cde:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ce2:	e0 e4       	ldi	r30, 0x40	; 64
     ce4:	f1 e0       	ldi	r31, 0x01	; 1
     ce6:	84 e2       	ldi	r24, 0x24	; 36
     ce8:	80 83       	st	Z, r24
     cea:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     cee:	99 e5       	ldi	r25, 0x59	; 89
     cf0:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     cf4:	32 e0       	ldi	r19, 0x02	; 2
     cf6:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     cfa:	a0 91 0b 20 	lds	r26, 0x200B	; 0x80200b <auxDacBufLen>
     cfe:	b0 91 0c 20 	lds	r27, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     d02:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d06:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     d0a:	ab ec       	ldi	r26, 0xCB	; 203
     d0c:	b5 e2       	ldi	r27, 0x25	; 37
     d0e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d12:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d16:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d1a:	9b e3       	ldi	r25, 0x3B	; 59
     d1c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d26:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d2a:	20 81       	ld	r18, Z
     d2c:	20 68       	ori	r18, 0x80	; 128
     d2e:	20 83       	st	Z, r18
     d30:	88 a3       	std	Y+32, r24	; 0x20
     d32:	99 a3       	std	Y+33, r25	; 0x21
     d34:	25 e9       	ldi	r18, 0x95	; 149
     d36:	2a a3       	std	Y+34, r18	; 0x22
     d38:	4b a3       	std	Y+35, r20	; 0x23
     d3a:	4e ee       	ldi	r20, 0xEE	; 238
     d3c:	52 e0       	ldi	r21, 0x02	; 2
     d3e:	4c a3       	std	Y+36, r20	; 0x24
     d40:	5d a3       	std	Y+37, r21	; 0x25
     d42:	78 a7       	std	Y+40, r23	; 0x28
     d44:	69 a7       	std	Y+41, r22	; 0x29
     d46:	1a a6       	std	Y+42, r1	; 0x2a
     d48:	6a eb       	ldi	r22, 0xBA	; 186
     d4a:	7a e2       	ldi	r23, 0x2A	; 42
     d4c:	6c a7       	std	Y+44, r22	; 0x2c
     d4e:	7d a7       	std	Y+45, r23	; 0x2d
     d50:	1e a6       	std	Y+46, r1	; 0x2e
     d52:	88 8b       	std	Y+16, r24	; 0x10
     d54:	99 8b       	std	Y+17, r25	; 0x11
     d56:	2a 8b       	std	Y+18, r18	; 0x12
     d58:	90 e1       	ldi	r25, 0x10	; 16
     d5a:	9b 8b       	std	Y+19, r25	; 0x13
     d5c:	4c 8b       	std	Y+20, r20	; 0x14
     d5e:	5d 8b       	std	Y+21, r21	; 0x15
     d60:	88 8f       	std	Y+24, r24	; 0x18
     d62:	39 8f       	std	Y+25, r19	; 0x19
     d64:	1a 8e       	std	Y+26, r1	; 0x1a
     d66:	8c ec       	ldi	r24, 0xCC	; 204
     d68:	97 e2       	ldi	r25, 0x27	; 39
     d6a:	8c 8f       	std	Y+28, r24	; 0x1c
     d6c:	9d 8f       	std	Y+29, r25	; 0x1d
     d6e:	1e 8e       	std	Y+30, r1	; 0x1e
     d70:	68 ec       	ldi	r22, 0xC8	; 200
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	84 ef       	ldi	r24, 0xF4	; 244
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	b0 dc       	rcall	.-1696   	; 0x6da <tiny_calibration_synchronise_phase>
     d7a:	88 ec       	ldi	r24, 0xC8	; 200
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     d82:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     d86:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <median_TRFCNT_delay>
     d8a:	88 a1       	ldd	r24, Y+32	; 0x20
     d8c:	80 68       	ori	r24, 0x80	; 128
     d8e:	88 a3       	std	Y+32, r24	; 0x20
     d90:	88 89       	ldd	r24, Y+16	; 0x10
     d92:	80 68       	ori	r24, 0x80	; 128
     d94:	88 8b       	std	Y+16, r24	; 0x10
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	08 95       	ret

00000d9e <tiny_dma_set_mode_2>:
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	12 e0       	ldi	r17, 0x02	; 2
     da6:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     daa:	db de       	rcall	.-586    	; 0xb62 <tiny_dma_flush>
     dac:	c0 e0       	ldi	r28, 0x00	; 0
     dae:	d1 e0       	ldi	r29, 0x01	; 1
     db0:	1e aa       	std	Y+54, r1	; 0x36
     db2:	84 e2       	ldi	r24, 0x24	; 36
     db4:	88 ab       	std	Y+48, r24	; 0x30
     db6:	19 aa       	std	Y+49, r1	; 0x31
     db8:	39 e5       	ldi	r19, 0x59	; 89
     dba:	3a ab       	std	Y+50, r19	; 0x32
     dbc:	1b ab       	std	Y+51, r17	; 0x33
     dbe:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     dc2:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     dc6:	4c ab       	std	Y+52, r20	; 0x34
     dc8:	5d ab       	std	Y+53, r21	; 0x35
     dca:	4b ec       	ldi	r20, 0xCB	; 203
     dcc:	55 e2       	ldi	r21, 0x25	; 37
     dce:	48 af       	std	Y+56, r20	; 0x38
     dd0:	59 af       	std	Y+57, r21	; 0x39
     dd2:	1a ae       	std	Y+58, r1	; 0x3a
     dd4:	9b e3       	ldi	r25, 0x3B	; 59
     dd6:	9c af       	std	Y+60, r25	; 0x3c
     dd8:	93 e0       	ldi	r25, 0x03	; 3
     dda:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     dde:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     de2:	28 a9       	ldd	r18, Y+48	; 0x30
     de4:	20 68       	ori	r18, 0x80	; 128
     de6:	28 ab       	std	Y+48, r18	; 0x30
     de8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     dec:	e0 e4       	ldi	r30, 0x40	; 64
     dee:	f1 e0       	ldi	r31, 0x01	; 1
     df0:	80 83       	st	Z, r24
     df2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     df6:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     dfa:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dfe:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     e02:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     e06:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     e0a:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e0e:	2a eb       	ldi	r18, 0xBA	; 186
     e10:	33 e2       	ldi	r19, 0x23	; 35
     e12:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e16:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e1a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e1e:	29 e3       	ldi	r18, 0x39	; 57
     e20:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e24:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e28:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e2c:	90 81       	ld	r25, Z
     e2e:	90 68       	ori	r25, 0x80	; 128
     e30:	90 83       	st	Z, r25
     e32:	18 8a       	std	Y+16, r1	; 0x10
     e34:	90 e4       	ldi	r25, 0x40	; 64
     e36:	98 8b       	std	Y+16, r25	; 0x10
     e38:	88 8b       	std	Y+16, r24	; 0x10
     e3a:	19 8a       	std	Y+17, r1	; 0x11
     e3c:	45 e9       	ldi	r20, 0x95	; 149
     e3e:	4a 8b       	std	Y+18, r20	; 0x12
     e40:	90 e1       	ldi	r25, 0x10	; 16
     e42:	9b 8b       	std	Y+19, r25	; 0x13
     e44:	2e ee       	ldi	r18, 0xEE	; 238
     e46:	32 e0       	ldi	r19, 0x02	; 2
     e48:	2c 8b       	std	Y+20, r18	; 0x14
     e4a:	3d 8b       	std	Y+21, r19	; 0x15
     e4c:	88 8f       	std	Y+24, r24	; 0x18
     e4e:	19 8f       	std	Y+25, r17	; 0x19
     e50:	1a 8e       	std	Y+26, r1	; 0x1a
     e52:	6c ec       	ldi	r22, 0xCC	; 204
     e54:	77 e2       	ldi	r23, 0x27	; 39
     e56:	6c 8f       	std	Y+28, r22	; 0x1c
     e58:	7d 8f       	std	Y+29, r23	; 0x1d
     e5a:	1e 8e       	std	Y+30, r1	; 0x1e
     e5c:	88 a3       	std	Y+32, r24	; 0x20
     e5e:	19 a2       	std	Y+33, r1	; 0x21
     e60:	4a a3       	std	Y+34, r20	; 0x22
     e62:	9b a3       	std	Y+35, r25	; 0x23
     e64:	2c a3       	std	Y+36, r18	; 0x24
     e66:	3d a3       	std	Y+37, r19	; 0x25
     e68:	84 e3       	ldi	r24, 0x34	; 52
     e6a:	88 a7       	std	Y+40, r24	; 0x28
     e6c:	19 a7       	std	Y+41, r17	; 0x29
     e6e:	1a a6       	std	Y+42, r1	; 0x2a
     e70:	8a eb       	ldi	r24, 0xBA	; 186
     e72:	9a e2       	ldi	r25, 0x2A	; 42
     e74:	8c a7       	std	Y+44, r24	; 0x2c
     e76:	9d a7       	std	Y+45, r25	; 0x2d
     e78:	1e a6       	std	Y+46, r1	; 0x2e
     e7a:	68 ec       	ldi	r22, 0xC8	; 200
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	84 ef       	ldi	r24, 0xF4	; 244
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	2b dc       	rcall	.-1962   	; 0x6da <tiny_calibration_synchronise_phase>
     e84:	88 ec       	ldi	r24, 0xC8	; 200
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     e8c:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     e96:	88 89       	ldd	r24, Y+16	; 0x10
     e98:	80 68       	ori	r24, 0x80	; 128
     e9a:	88 8b       	std	Y+16, r24	; 0x10
     e9c:	88 a1       	ldd	r24, Y+32	; 0x20
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	88 a3       	std	Y+32, r24	; 0x20
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	08 95       	ret

00000eaa <tiny_dma_set_mode_3>:
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	13 e0       	ldi	r17, 0x03	; 3
     eb2:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     eb6:	55 de       	rcall	.-854    	; 0xb62 <tiny_dma_flush>
     eb8:	c0 e0       	ldi	r28, 0x00	; 0
     eba:	d1 e0       	ldi	r29, 0x01	; 1
     ebc:	18 a2       	std	Y+32, r1	; 0x20
     ebe:	50 e4       	ldi	r21, 0x40	; 64
     ec0:	58 a3       	std	Y+32, r21	; 0x20
     ec2:	84 e0       	ldi	r24, 0x04	; 4
     ec4:	88 a3       	std	Y+32, r24	; 0x20
     ec6:	19 a2       	std	Y+33, r1	; 0x21
     ec8:	1a a2       	std	Y+34, r1	; 0x22
     eca:	4b e4       	ldi	r20, 0x4B	; 75
     ecc:	4b a3       	std	Y+35, r20	; 0x23
     ece:	1c a2       	std	Y+36, r1	; 0x24
     ed0:	1d a2       	std	Y+37, r1	; 0x25
     ed2:	1e a2       	std	Y+38, r1	; 0x26
     ed4:	8a e0       	ldi	r24, 0x0A	; 10
     ed6:	90 e2       	ldi	r25, 0x20	; 32
     ed8:	88 a7       	std	Y+40, r24	; 0x28
     eda:	99 a7       	std	Y+41, r25	; 0x29
     edc:	1a a6       	std	Y+42, r1	; 0x2a
     ede:	30 ea       	ldi	r19, 0xA0	; 160
     ee0:	3c a7       	std	Y+44, r19	; 0x2c
     ee2:	28 e0       	ldi	r18, 0x08	; 8
     ee4:	2d a7       	std	Y+45, r18	; 0x2d
     ee6:	1e a6       	std	Y+46, r1	; 0x2e
     ee8:	88 a1       	ldd	r24, Y+32	; 0x20
     eea:	80 6a       	ori	r24, 0xA0	; 160
     eec:	88 a3       	std	Y+32, r24	; 0x20
     eee:	85 e5       	ldi	r24, 0x55	; 85
     ef0:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     ef4:	1e aa       	std	Y+54, r1	; 0x36
     ef6:	84 e2       	ldi	r24, 0x24	; 36
     ef8:	88 ab       	std	Y+48, r24	; 0x30
     efa:	19 aa       	std	Y+49, r1	; 0x31
     efc:	69 e5       	ldi	r22, 0x59	; 89
     efe:	6a ab       	std	Y+50, r22	; 0x32
     f00:	1b ab       	std	Y+51, r17	; 0x33
     f02:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <dacBuf_len>
     f06:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <dacBuf_len+0x1>
     f0a:	ec ab       	std	Y+52, r30	; 0x34
     f0c:	fd ab       	std	Y+53, r31	; 0x35
     f0e:	ea eb       	ldi	r30, 0xBA	; 186
     f10:	f3 e2       	ldi	r31, 0x23	; 35
     f12:	e8 af       	std	Y+56, r30	; 0x38
     f14:	f9 af       	std	Y+57, r31	; 0x39
     f16:	1a ae       	std	Y+58, r1	; 0x3a
     f18:	99 e3       	ldi	r25, 0x39	; 57
     f1a:	9c af       	std	Y+60, r25	; 0x3c
     f1c:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f20:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f24:	98 a9       	ldd	r25, Y+48	; 0x30
     f26:	90 68       	ori	r25, 0x80	; 128
     f28:	98 ab       	std	Y+48, r25	; 0x30
     f2a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f2e:	e0 e4       	ldi	r30, 0x40	; 64
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	80 83       	st	Z, r24
     f34:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f38:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f42:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     f46:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     f4a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f4e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f52:	6b ec       	ldi	r22, 0xCB	; 203
     f54:	75 e2       	ldi	r23, 0x25	; 37
     f56:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f5a:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f5e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f62:	9b e3       	ldi	r25, 0x3B	; 59
     f64:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f68:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f6c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f70:	90 81       	ld	r25, Z
     f72:	90 68       	ori	r25, 0x80	; 128
     f74:	90 83       	st	Z, r25
     f76:	18 8a       	std	Y+16, r1	; 0x10
     f78:	58 8b       	std	Y+16, r21	; 0x10
     f7a:	88 8b       	std	Y+16, r24	; 0x10
     f7c:	19 8a       	std	Y+17, r1	; 0x11
     f7e:	85 e9       	ldi	r24, 0x95	; 149
     f80:	8a 8b       	std	Y+18, r24	; 0x12
     f82:	4b 8b       	std	Y+19, r20	; 0x13
     f84:	8e ee       	ldi	r24, 0xEE	; 238
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	8c 8b       	std	Y+20, r24	; 0x14
     f8a:	9d 8b       	std	Y+21, r25	; 0x15
     f8c:	38 8f       	std	Y+24, r19	; 0x18
     f8e:	29 8f       	std	Y+25, r18	; 0x19
     f90:	1a 8e       	std	Y+26, r1	; 0x1a
     f92:	8c ec       	ldi	r24, 0xCC	; 204
     f94:	97 e2       	ldi	r25, 0x27	; 39
     f96:	8c 8f       	std	Y+28, r24	; 0x1c
     f98:	9d 8f       	std	Y+29, r25	; 0x1d
     f9a:	1e 8e       	std	Y+30, r1	; 0x1e
     f9c:	68 ec       	ldi	r22, 0xC8	; 200
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	84 ef       	ldi	r24, 0xF4	; 244
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	9a db       	rcall	.-2252   	; 0x6da <tiny_calibration_synchronise_phase>
     fa6:	88 ec       	ldi	r24, 0xC8	; 200
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     fae:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     fb8:	88 89       	ldd	r24, Y+16	; 0x10
     fba:	80 68       	ori	r24, 0x80	; 128
     fbc:	88 8b       	std	Y+16, r24	; 0x10
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	08 95       	ret

00000fc6 <tiny_dma_set_mode_4>:
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	14 e0       	ldi	r17, 0x04	; 4
     fce:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     fd2:	c7 dd       	rcall	.-1138   	; 0xb62 <tiny_dma_flush>
     fd4:	c0 e0       	ldi	r28, 0x00	; 0
     fd6:	d1 e0       	ldi	r29, 0x01	; 1
     fd8:	18 aa       	std	Y+48, r1	; 0x30
     fda:	80 e4       	ldi	r24, 0x40	; 64
     fdc:	88 ab       	std	Y+48, r24	; 0x30
     fde:	18 ab       	std	Y+48, r17	; 0x30
     fe0:	19 aa       	std	Y+49, r1	; 0x31
     fe2:	1a aa       	std	Y+50, r1	; 0x32
     fe4:	3b e4       	ldi	r19, 0x4B	; 75
     fe6:	3b ab       	std	Y+51, r19	; 0x33
     fe8:	1c aa       	std	Y+52, r1	; 0x34
     fea:	1d aa       	std	Y+53, r1	; 0x35
     fec:	1e aa       	std	Y+54, r1	; 0x36
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	90 e2       	ldi	r25, 0x20	; 32
     ff2:	88 af       	std	Y+56, r24	; 0x38
     ff4:	99 af       	std	Y+57, r25	; 0x39
     ff6:	1a ae       	std	Y+58, r1	; 0x3a
     ff8:	50 ea       	ldi	r21, 0xA0	; 160
     ffa:	5c af       	std	Y+60, r21	; 0x3c
     ffc:	88 e0       	ldi	r24, 0x08	; 8
     ffe:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1002:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1006:	98 a9       	ldd	r25, Y+48	; 0x30
    1008:	90 6a       	ori	r25, 0xA0	; 160
    100a:	98 ab       	std	Y+48, r25	; 0x30
    100c:	95 e5       	ldi	r25, 0x55	; 85
    100e:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1012:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1016:	e0 e4       	ldi	r30, 0x40	; 64
    1018:	f1 e0       	ldi	r31, 0x01	; 1
    101a:	94 e2       	ldi	r25, 0x24	; 36
    101c:	90 83       	st	Z, r25
    101e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1022:	29 e5       	ldi	r18, 0x59	; 89
    1024:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1028:	22 e0       	ldi	r18, 0x02	; 2
    102a:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    102e:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
    1032:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1036:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    103a:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    103e:	6b ec       	ldi	r22, 0xCB	; 203
    1040:	75 e2       	ldi	r23, 0x25	; 37
    1042:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1046:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    104a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    104e:	2b e3       	ldi	r18, 0x3B	; 59
    1050:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1054:	23 e0       	ldi	r18, 0x03	; 3
    1056:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    105a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    105e:	20 81       	ld	r18, Z
    1060:	20 68       	ori	r18, 0x80	; 128
    1062:	20 83       	st	Z, r18
    1064:	98 8b       	std	Y+16, r25	; 0x10
    1066:	19 8a       	std	Y+17, r1	; 0x11
    1068:	45 e9       	ldi	r20, 0x95	; 149
    106a:	4a 8b       	std	Y+18, r20	; 0x12
    106c:	3b 8b       	std	Y+19, r19	; 0x13
    106e:	2e ee       	ldi	r18, 0xEE	; 238
    1070:	32 e0       	ldi	r19, 0x02	; 2
    1072:	2c 8b       	std	Y+20, r18	; 0x14
    1074:	3d 8b       	std	Y+21, r19	; 0x15
    1076:	58 8f       	std	Y+24, r21	; 0x18
    1078:	89 8f       	std	Y+25, r24	; 0x19
    107a:	1a 8e       	std	Y+26, r1	; 0x1a
    107c:	6c ec       	ldi	r22, 0xCC	; 204
    107e:	77 e2       	ldi	r23, 0x27	; 39
    1080:	6c 8f       	std	Y+28, r22	; 0x1c
    1082:	7d 8f       	std	Y+29, r23	; 0x1d
    1084:	1e 8e       	std	Y+30, r1	; 0x1e
    1086:	98 a3       	std	Y+32, r25	; 0x20
    1088:	19 a2       	std	Y+33, r1	; 0x21
    108a:	4a a3       	std	Y+34, r20	; 0x22
    108c:	9a e4       	ldi	r25, 0x4A	; 74
    108e:	9b a3       	std	Y+35, r25	; 0x23
    1090:	2c a3       	std	Y+36, r18	; 0x24
    1092:	3d a3       	std	Y+37, r19	; 0x25
    1094:	93 ec       	ldi	r25, 0xC3	; 195
    1096:	98 a7       	std	Y+40, r25	; 0x28
    1098:	89 a7       	std	Y+41, r24	; 0x29
    109a:	1a a6       	std	Y+42, r1	; 0x2a
    109c:	8a eb       	ldi	r24, 0xBA	; 186
    109e:	9a e2       	ldi	r25, 0x2A	; 42
    10a0:	8c a7       	std	Y+44, r24	; 0x2c
    10a2:	9d a7       	std	Y+45, r25	; 0x2d
    10a4:	1e a6       	std	Y+46, r1	; 0x2e
    10a6:	68 ec       	ldi	r22, 0xC8	; 200
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	84 ef       	ldi	r24, 0xF4	; 244
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	15 db       	rcall	.-2518   	; 0x6da <tiny_calibration_synchronise_phase>
    10b0:	88 ec       	ldi	r24, 0xC8	; 200
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    10b8:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    10c2:	88 89       	ldd	r24, Y+16	; 0x10
    10c4:	80 68       	ori	r24, 0x80	; 128
    10c6:	88 8b       	std	Y+16, r24	; 0x10
    10c8:	88 a1       	ldd	r24, Y+32	; 0x20
    10ca:	80 68       	ori	r24, 0x80	; 128
    10cc:	88 a3       	std	Y+32, r24	; 0x20
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	08 95       	ret

000010d6 <tiny_dma_set_mode_5>:
    10d6:	ff cf       	rjmp	.-2      	; 0x10d6 <tiny_dma_set_mode_5>

000010d8 <tiny_dma_set_mode_6>:
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	86 e0       	ldi	r24, 0x06	; 6
    10de:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    10e2:	3f dd       	rcall	.-1410   	; 0xb62 <tiny_dma_flush>
    10e4:	c0 e0       	ldi	r28, 0x00	; 0
    10e6:	d1 e0       	ldi	r29, 0x01	; 1
    10e8:	1e aa       	std	Y+54, r1	; 0x36
    10ea:	84 e2       	ldi	r24, 0x24	; 36
    10ec:	88 ab       	std	Y+48, r24	; 0x30
    10ee:	19 aa       	std	Y+49, r1	; 0x31
    10f0:	39 e5       	ldi	r19, 0x59	; 89
    10f2:	3a ab       	std	Y+50, r19	; 0x32
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	9b ab       	std	Y+51, r25	; 0x33
    10f8:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    10fc:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1100:	4c ab       	std	Y+52, r20	; 0x34
    1102:	5d ab       	std	Y+53, r21	; 0x35
    1104:	4a eb       	ldi	r20, 0xBA	; 186
    1106:	53 e2       	ldi	r21, 0x23	; 35
    1108:	48 af       	std	Y+56, r20	; 0x38
    110a:	59 af       	std	Y+57, r21	; 0x39
    110c:	1a ae       	std	Y+58, r1	; 0x3a
    110e:	29 e3       	ldi	r18, 0x39	; 57
    1110:	2c af       	std	Y+60, r18	; 0x3c
    1112:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1116:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    111a:	28 a9       	ldd	r18, Y+48	; 0x30
    111c:	20 68       	ori	r18, 0x80	; 128
    111e:	28 ab       	std	Y+48, r18	; 0x30
    1120:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1124:	e0 e4       	ldi	r30, 0x40	; 64
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	80 83       	st	Z, r24
    112a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    112e:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1132:	32 e0       	ldi	r19, 0x02	; 2
    1134:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1138:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    113c:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1140:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1144:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1148:	4b ec       	ldi	r20, 0xCB	; 203
    114a:	55 e2       	ldi	r21, 0x25	; 37
    114c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1150:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1154:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1158:	2b e3       	ldi	r18, 0x3B	; 59
    115a:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    115e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1162:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1166:	20 81       	ld	r18, Z
    1168:	20 68       	ori	r18, 0x80	; 128
    116a:	20 83       	st	Z, r18
    116c:	18 8a       	std	Y+16, r1	; 0x10
    116e:	20 e4       	ldi	r18, 0x40	; 64
    1170:	28 8b       	std	Y+16, r18	; 0x10
    1172:	88 8b       	std	Y+16, r24	; 0x10
    1174:	99 8b       	std	Y+17, r25	; 0x11
    1176:	95 e9       	ldi	r25, 0x95	; 149
    1178:	9a 8b       	std	Y+18, r25	; 0x12
    117a:	90 e1       	ldi	r25, 0x10	; 16
    117c:	9b 8b       	std	Y+19, r25	; 0x13
    117e:	4c ed       	ldi	r20, 0xDC	; 220
    1180:	55 e0       	ldi	r21, 0x05	; 5
    1182:	4c 8b       	std	Y+20, r20	; 0x14
    1184:	5d 8b       	std	Y+21, r21	; 0x15
    1186:	88 8f       	std	Y+24, r24	; 0x18
    1188:	39 8f       	std	Y+25, r19	; 0x19
    118a:	1a 8e       	std	Y+26, r1	; 0x1a
    118c:	8c ec       	ldi	r24, 0xCC	; 204
    118e:	97 e2       	ldi	r25, 0x27	; 39
    1190:	8c 8f       	std	Y+28, r24	; 0x1c
    1192:	9d 8f       	std	Y+29, r25	; 0x1d
    1194:	1e 8e       	std	Y+30, r1	; 0x1e
    1196:	68 ec       	ldi	r22, 0xC8	; 200
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	84 ef       	ldi	r24, 0xF4	; 244
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	9d da       	rcall	.-2758   	; 0x6da <tiny_calibration_synchronise_phase>
    11a0:	80 e9       	ldi	r24, 0x90	; 144
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    11a8:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    11b2:	88 89       	ldd	r24, Y+16	; 0x10
    11b4:	80 68       	ori	r24, 0x80	; 128
    11b6:	88 8b       	std	Y+16, r24	; 0x10
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <tiny_dma_set_mode_7>:
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	87 e0       	ldi	r24, 0x07	; 7
    11c4:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    11c8:	cc dc       	rcall	.-1640   	; 0xb62 <tiny_dma_flush>
    11ca:	c0 e0       	ldi	r28, 0x00	; 0
    11cc:	d1 e0       	ldi	r29, 0x01	; 1
    11ce:	1e aa       	std	Y+54, r1	; 0x36
    11d0:	94 e2       	ldi	r25, 0x24	; 36
    11d2:	98 ab       	std	Y+48, r25	; 0x30
    11d4:	19 aa       	std	Y+49, r1	; 0x31
    11d6:	39 e5       	ldi	r19, 0x59	; 89
    11d8:	3a ab       	std	Y+50, r19	; 0x32
    11da:	83 e0       	ldi	r24, 0x03	; 3
    11dc:	8b ab       	std	Y+51, r24	; 0x33
    11de:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    11e2:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    11e6:	4c ab       	std	Y+52, r20	; 0x34
    11e8:	5d ab       	std	Y+53, r21	; 0x35
    11ea:	4a eb       	ldi	r20, 0xBA	; 186
    11ec:	53 e2       	ldi	r21, 0x23	; 35
    11ee:	48 af       	std	Y+56, r20	; 0x38
    11f0:	59 af       	std	Y+57, r21	; 0x39
    11f2:	1a ae       	std	Y+58, r1	; 0x3a
    11f4:	29 e3       	ldi	r18, 0x39	; 57
    11f6:	2c af       	std	Y+60, r18	; 0x3c
    11f8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    11fc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1200:	28 a9       	ldd	r18, Y+48	; 0x30
    1202:	20 68       	ori	r18, 0x80	; 128
    1204:	28 ab       	std	Y+48, r18	; 0x30
    1206:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    120a:	e0 e4       	ldi	r30, 0x40	; 64
    120c:	f1 e0       	ldi	r31, 0x01	; 1
    120e:	90 83       	st	Z, r25
    1210:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1214:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1218:	32 e0       	ldi	r19, 0x02	; 2
    121a:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    121e:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    1222:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1226:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    122a:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    122e:	4b ec       	ldi	r20, 0xCB	; 203
    1230:	55 e2       	ldi	r21, 0x25	; 37
    1232:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1236:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    123a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    123e:	2b e3       	ldi	r18, 0x3B	; 59
    1240:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1244:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1248:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    124c:	20 81       	ld	r18, Z
    124e:	20 68       	ori	r18, 0x80	; 128
    1250:	20 83       	st	Z, r18
    1252:	18 8a       	std	Y+16, r1	; 0x10
    1254:	20 e4       	ldi	r18, 0x40	; 64
    1256:	28 8b       	std	Y+16, r18	; 0x10
    1258:	25 e2       	ldi	r18, 0x25	; 37
    125a:	28 8b       	std	Y+16, r18	; 0x10
    125c:	89 8b       	std	Y+17, r24	; 0x11
    125e:	85 e9       	ldi	r24, 0x95	; 149
    1260:	8a 8b       	std	Y+18, r24	; 0x12
    1262:	80 e1       	ldi	r24, 0x10	; 16
    1264:	8b 8b       	std	Y+19, r24	; 0x13
    1266:	4c ed       	ldi	r20, 0xDC	; 220
    1268:	55 e0       	ldi	r21, 0x05	; 5
    126a:	4c 8b       	std	Y+20, r20	; 0x14
    126c:	5d 8b       	std	Y+21, r21	; 0x15
    126e:	98 8f       	std	Y+24, r25	; 0x18
    1270:	39 8f       	std	Y+25, r19	; 0x19
    1272:	1a 8e       	std	Y+26, r1	; 0x1a
    1274:	8c ec       	ldi	r24, 0xCC	; 204
    1276:	97 e2       	ldi	r25, 0x27	; 39
    1278:	8c 8f       	std	Y+28, r24	; 0x1c
    127a:	9d 8f       	std	Y+29, r25	; 0x1d
    127c:	1e 8e       	std	Y+30, r1	; 0x1e
    127e:	68 ec       	ldi	r22, 0xC8	; 200
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	84 ef       	ldi	r24, 0xF4	; 244
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	29 da       	rcall	.-2990   	; 0x6da <tiny_calibration_synchronise_phase>
    1288:	80 e9       	ldi	r24, 0x90	; 144
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    1290:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    129a:	88 89       	ldd	r24, Y+16	; 0x10
    129c:	80 68       	ori	r24, 0x80	; 128
    129e:	88 8b       	std	Y+16, r24	; 0x10
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <__vector_6>:
}

ISR(DMA_CH0_vect){
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	8f 93       	push	r24
    12b2:	9f 93       	push	r25
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
	DMA.INTFLAGS = 0x01;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch0_ran++;
    12be:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    12c2:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	80 93 9c 23 	sts	0x239C, r24	; 0x80239c <dma_ch0_ran>
    12cc:	90 93 9d 23 	sts	0x239D, r25	; 0x80239d <dma_ch0_ran+0x1>
	uds.dma_ch0_cntL = dma_ch0_ran & 0xff;
    12d0:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    12d4:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    12d8:	ee e9       	ldi	r30, 0x9E	; 158
    12da:	f3 e2       	ldi	r31, 0x23	; 35
    12dc:	87 8b       	std	Z+23, r24	; 0x17
	uds.dma_ch0_cntH = (dma_ch0_ran >> 8) & 0xff;
    12de:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <dma_ch0_ran>
    12e2:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <dma_ch0_ran+0x1>
    12e6:	90 8f       	std	Z+24, r25	; 0x18
}
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_7>:

ISR(DMA_CH1_vect){
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	ef 93       	push	r30
    130a:	ff 93       	push	r31
	DMA.INTFLAGS = 0x02;
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch1_ran++;
    1312:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    1316:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	80 93 9a 23 	sts	0x239A, r24	; 0x80239a <dma_ch1_ran>
    1320:	90 93 9b 23 	sts	0x239B, r25	; 0x80239b <dma_ch1_ran+0x1>
	uds.dma_ch1_cntL = dma_ch1_ran & 0xff;
    1324:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    1328:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    132c:	ee e9       	ldi	r30, 0x9E	; 158
    132e:	f3 e2       	ldi	r31, 0x23	; 35
    1330:	81 8f       	std	Z+25, r24	; 0x19
	uds.dma_ch1_cntH = (dma_ch1_ran >> 8) & 0xff;
    1332:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <dma_ch1_ran>
    1336:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <dma_ch1_ran+0x1>
    133a:	92 8f       	std	Z+26, r25	; 0x1a
}
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    134e:	e0 e7       	ldi	r30, 0x70	; 112
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	83 81       	ldd	r24, Z+3	; 0x03
    1354:	8c 7f       	andi	r24, 0xFC	; 252
    1356:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    1358:	84 81       	ldd	r24, Z+4	; 0x04
    135a:	8c 7f       	andi	r24, 0xFC	; 252
    135c:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    135e:	80 81       	ld	r24, Z
    1360:	8d 7f       	andi	r24, 0xFD	; 253
    1362:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    1364:	e0 e8       	ldi	r30, 0x80	; 128
    1366:	f1 e0       	ldi	r31, 0x01	; 1
    1368:	80 ec       	ldi	r24, 0xC0	; 192
    136a:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    136c:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    136e:	88 ec       	ldi	r24, 0xC8	; 200
    1370:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1372:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1374:	a0 e0       	ldi	r26, 0x00	; 0
    1376:	b8 e0       	ldi	r27, 0x08	; 8
    1378:	34 e0       	ldi	r19, 0x04	; 4
    137a:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    137c:	23 e0       	ldi	r18, 0x03	; 3
    137e:	11 96       	adiw	r26, 0x01	; 1
    1380:	2c 93       	st	X, r18
    1382:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1384:	14 96       	adiw	r26, 0x04	; 4
    1386:	1c 92       	st	X, r1
    1388:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    138a:	85 ed       	ldi	r24, 0xD5	; 213
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	96 96       	adiw	r26, 0x26	; 38
    1390:	8d 93       	st	X+, r24
    1392:	9c 93       	st	X, r25
    1394:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1396:	16 96       	adiw	r26, 0x06	; 6
    1398:	1c 92       	st	X, r1
    139a:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    139c:	e0 e4       	ldi	r30, 0x40	; 64
    139e:	f8 e0       	ldi	r31, 0x08	; 8
    13a0:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    13a2:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    13a4:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    13a6:	86 a3       	std	Z+38, r24	; 0x26
    13a8:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    13aa:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    13ac:	e0 e6       	ldi	r30, 0x60	; 96
    13ae:	f6 e0       	ldi	r31, 0x06	; 6
    13b0:	80 81       	ld	r24, Z
    13b2:	80 61       	ori	r24, 0x10	; 16
    13b4:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    13b6:	e0 e4       	ldi	r30, 0x40	; 64
    13b8:	f9 e0       	ldi	r31, 0x09	; 9
    13ba:	83 e1       	ldi	r24, 0x13	; 19
    13bc:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    13be:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    13c4:	a6 a3       	std	Z+38, r26	; 0x26
    13c6:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    13c8:	10 a6       	std	Z+40, r1	; 0x28
    13ca:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 83       	st	Z, r24
    13d0:	08 95       	ret

000013d2 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    13d2:	1f 92       	push	r1
    13d4:	0f 92       	push	r0
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	0f 92       	push	r0
    13da:	11 24       	eor	r1, r1
    13dc:	2f 93       	push	r18
    13de:	3f 93       	push	r19
    13e0:	4f 93       	push	r20
    13e2:	5f 93       	push	r21
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	1f 92       	push	r1
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    13fc:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    1400:	87 30       	cpi	r24, 0x07	; 7
    1402:	31 f4       	brne	.+12     	; 0x1410 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    1404:	e0 e0       	ldi	r30, 0x00	; 0
    1406:	f2 e0       	ldi	r31, 0x02	; 2
    1408:	84 a5       	ldd	r24, Z+44	; 0x2c
    140a:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    140c:	95 a5       	ldd	r25, Z+45	; 0x2d
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1410:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    1414:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <PSU_target>
    1418:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    141a:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    141e:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	0c f4       	brge	.+2      	; 0x142a <__vector_83+0x58>
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	99 23       	and	r25, r25
    142c:	c9 f0       	breq	.+50     	; 0x1460 <__vector_83+0x8e>
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	2a 3f       	cpi	r18, 0xFA	; 250
    1432:	37 40       	sbci	r19, 0x07	; 7
    1434:	08 f0       	brcs	.+2      	; 0x1438 <__vector_83+0x66>
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	99 23       	and	r25, r25
    143a:	91 f0       	breq	.+36     	; 0x1460 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    143c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1440:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1444:	89 30       	cpi	r24, 0x09	; 9
    1446:	1c f4       	brge	.+6      	; 0x144e <__vector_83+0x7c>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <__vector_83+0x80>
    144e:	86 e0       	ldi	r24, 0x06	; 6
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	82 0f       	add	r24, r18
    1454:	93 1f       	adc	r25, r19
    1456:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    145a:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    145e:	23 c0       	rjmp	.+70     	; 0x14a6 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1460:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1464:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	8f 3f       	cpi	r24, 0xFF	; 255
    146c:	0c f0       	brlt	.+2      	; 0x1470 <__vector_83+0x9e>
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	99 23       	and	r25, r25
    1472:	c9 f0       	breq	.+50     	; 0x14a6 <__vector_83+0xd4>
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	27 30       	cpi	r18, 0x07	; 7
    1478:	31 05       	cpc	r19, r1
    147a:	08 f4       	brcc	.+2      	; 0x147e <__vector_83+0xac>
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	99 23       	and	r25, r25
    1480:	91 f0       	breq	.+36     	; 0x14a6 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1482:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1486:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    148a:	88 3f       	cpi	r24, 0xF8	; 248
    148c:	1c f0       	brlt	.+6      	; 0x1494 <__vector_83+0xc2>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <__vector_83+0xc6>
    1494:	86 e0       	ldi	r24, 0x06	; 6
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	48 1b       	sub	r20, r24
    149c:	59 0b       	sbc	r21, r25
    149e:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    14a2:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	5f 91       	pop	r21
    14b6:	4f 91       	pop	r20
    14b8:	3f 91       	pop	r19
    14ba:	2f 91       	pop	r18
    14bc:	0f 90       	pop	r0
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	0f 90       	pop	r0
    14c2:	1f 90       	pop	r1
    14c4:	18 95       	reti

000014c6 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    14c6:	e0 e7       	ldi	r30, 0x70	; 112
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	83 81       	ldd	r24, Z+3	; 0x03
    14cc:	8f 7e       	andi	r24, 0xEF	; 239
    14ce:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    14d0:	e0 e4       	ldi	r30, 0x40	; 64
    14d2:	f6 e0       	ldi	r31, 0x06	; 6
    14d4:	80 81       	ld	r24, Z
    14d6:	8a 6a       	ori	r24, 0xAA	; 170
    14d8:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14de:	88 e5       	ldi	r24, 0x58	; 88
    14e0:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLA = USART_RXCINTLVL_HI_gc;
    14e2:	e0 ea       	ldi	r30, 0xA0	; 160
    14e4:	f8 e0       	ldi	r31, 0x08	; 8
    14e6:	80 e3       	ldi	r24, 0x30	; 48
    14e8:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    14ea:	84 ec       	ldi	r24, 0xC4	; 196
    14ec:	85 83       	std	Z+5, r24	; 0x05
	#if OVERCLOCK == 48
		USARTC0.BAUDCTRLA = 7;  	//BSEL = fper/(2fbaud) -1;  48/(2*3) - 1 = 7
	#else
		USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	86 83       	std	Z+6, r24	; 0x06
	#endif
	USARTC0.BAUDCTRLB = 0x00;// USART_BSCALE0_bm goes to 1.5MHz for some reason;
    14f2:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    14f4:	88 e1       	ldi	r24, 0x18	; 24
    14f6:	84 83       	std	Z+4, r24	; 0x04
    14f8:	08 95       	ret

000014fa <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    14fa:	e0 e7       	ldi	r30, 0x70	; 112
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	83 81       	ldd	r24, Z+3	; 0x03
    1500:	87 7f       	andi	r24, 0xF7	; 247
    1502:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1504:	e0 ec       	ldi	r30, 0xC0	; 192
    1506:	f8 e0       	ldi	r31, 0x08	; 8
    1508:	80 e4       	ldi	r24, 0x40	; 64
    150a:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    150c:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    150e:	88 e5       	ldi	r24, 0x58	; 88
    1510:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1514:	08 95       	ret

00001516 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
	asm("nop");
    1520:	00 00       	nop
}
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_25>:

ISR(USARTC0_RXC_vect){
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	8f 93       	push	r24
    1538:	ef 93       	push	r30
    153a:	ff 93       	push	r31
	unsigned char temp = USARTC0.DATA;
    153c:	e0 ea       	ldi	r30, 0xA0	; 160
    153e:	f8 e0       	ldi	r31, 0x08	; 8
    1540:	80 81       	ld	r24, Z
	USARTC0.DATA = temp;
    1542:	80 83       	st	Z, r24
    1544:	ff 91       	pop	r31
    1546:	ef 91       	pop	r30
    1548:	8f 91       	pop	r24
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1554:	9f b7       	in	r25, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	e8 2f       	mov	r30, r24
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	e0 59       	subi	r30, 0x90	; 144
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	60 95       	com	r22
    1562:	80 81       	ld	r24, Z
    1564:	68 23       	and	r22, r24
    1566:	60 83       	st	Z, r22
    1568:	9f bf       	out	0x3f, r25	; 63
    156a:	08 95       	ret

0000156c <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    156c:	86 30       	cpi	r24, 0x06	; 6
    156e:	11 f0       	breq	.+4      	; 0x1574 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1574:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1576:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    157a:	81 fd       	sbrc	r24, 1
    157c:	26 c0       	rjmp	.+76     	; 0x15ca <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    157e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1580:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1582:	e0 e5       	ldi	r30, 0x50	; 80
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	82 60       	ori	r24, 0x02	; 2
    158a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    158c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    158e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1590:	81 ff       	sbrs	r24, 1
    1592:	fd cf       	rjmp	.-6      	; 0x158e <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1594:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1596:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1598:	a0 e5       	ldi	r26, 0x50	; 80
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	16 96       	adiw	r26, 0x06	; 6
    159e:	8c 91       	ld	r24, X
    15a0:	16 97       	sbiw	r26, 0x06	; 6
    15a2:	89 7f       	andi	r24, 0xF9	; 249
    15a4:	16 96       	adiw	r26, 0x06	; 6
    15a6:	8c 93       	st	X, r24
    15a8:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    15aa:	e0 e6       	ldi	r30, 0x60	; 96
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 e8       	ldi	r24, 0x80	; 128
    15b0:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    15b2:	8b eb       	ldi	r24, 0xBB	; 187
    15b4:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    15b6:	16 96       	adiw	r26, 0x06	; 6
    15b8:	8c 91       	ld	r24, X
    15ba:	16 97       	sbiw	r26, 0x06	; 6
    15bc:	84 60       	ori	r24, 0x04	; 4
    15be:	16 96       	adiw	r26, 0x06	; 6
    15c0:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    15c2:	80 81       	ld	r24, Z
    15c4:	81 60       	ori	r24, 0x01	; 1
    15c6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15c8:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    15ca:	63 60       	ori	r22, 0x03	; 3
    15cc:	84 e4       	ldi	r24, 0x44	; 68
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	ec d4       	rcall	.+2520   	; 0x1faa <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    15d2:	60 e4       	ldi	r22, 0x40	; 64
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	be cf       	rjmp	.-132    	; 0x1554 <sysclk_enable_module>
    15d8:	08 95       	ret

000015da <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    15da:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <udi_vendor_alternate_setting>
    15de:	08 95       	ret

000015e0 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    15e0:	1c d1       	rcall	.+568    	; 0x181a <udc_get_interface_desc>
    15e2:	fc 01       	movw	r30, r24
    15e4:	83 81       	ldd	r24, Z+3	; 0x03
    15e6:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    15ea:	81 11       	cpse	r24, r1
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    15ee:	c6 c9       	rjmp	.-3188   	; 0x97c <main_vendor_enable>
    15f0:	08 95       	ret
			return false;
		}
	}
	return true;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
}
    15f4:	08 95       	ret

000015f6 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    15f6:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <udi_vendor_alternate_setting>
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    15fe:	fb c9       	rjmp	.-3082   	; 0x9f6 <main_vendor_disable>
    1600:	08 95       	ret

00001602 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1602:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1606:	88 23       	and	r24, r24
    1608:	4c f4       	brge	.+18     	; 0x161c <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    160a:	80 76       	andi	r24, 0x60	; 96
    160c:	80 34       	cpi	r24, 0x40	; 64
    160e:	a9 f4       	brne	.+42     	; 0x163a <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1610:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1614:	81 11       	cpse	r24, r1
    1616:	13 c0       	rjmp	.+38     	; 0x163e <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1618:	f3 c9       	rjmp	.-3098   	; 0xa00 <main_setup_in_received>
    161a:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    161c:	80 76       	andi	r24, 0x60	; 96
    161e:	80 34       	cpi	r24, 0x40	; 64
    1620:	81 f4       	brne	.+32     	; 0x1642 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1622:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1626:	81 11       	cpse	r24, r1
    1628:	0e c0       	rjmp	.+28     	; 0x1646 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    162a:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    162e:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1632:	89 2b       	or	r24, r25
    1634:	51 f0       	breq	.+20     	; 0x164a <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1636:	e2 c9       	rjmp	.-3132   	; 0x9fc <main_setup_out_received>
    1638:	08 95       	ret
		}
	}
	return false; // Not supported request
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	08 95       	ret
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	08 95       	ret
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	08 95       	ret
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	08 95       	ret
    164a:	80 e0       	ldi	r24, 0x00	; 0
}
    164c:	08 95       	ret

0000164e <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    164e:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1652:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1656:	01 90       	ld	r0, Z+
    1658:	f0 81       	ld	r31, Z
    165a:	e0 2d       	mov	r30, r0
    165c:	22 81       	ldd	r18, Z+2	; 0x02
    165e:	33 81       	ldd	r19, Z+3	; 0x03
    1660:	2e 0f       	add	r18, r30
    1662:	3f 1f       	adc	r19, r31
    1664:	fc 01       	movw	r30, r24
    1666:	40 81       	ld	r20, Z
    1668:	e4 0f       	add	r30, r20
    166a:	f1 1d       	adc	r31, r1
    166c:	e2 17       	cp	r30, r18
    166e:	f3 07       	cpc	r31, r19
    1670:	b8 f4       	brcc	.+46     	; 0x16a0 <udc_next_desc_in_iface+0x52>
    1672:	81 81       	ldd	r24, Z+1	; 0x01
    1674:	84 30       	cpi	r24, 0x04	; 4
    1676:	b9 f0       	breq	.+46     	; 0x16a6 <udc_next_desc_in_iface+0x58>
    1678:	86 13       	cpse	r24, r22
    167a:	09 c0       	rjmp	.+18     	; 0x168e <udc_next_desc_in_iface+0x40>
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <udc_next_desc_in_iface+0x3a>
    167e:	81 81       	ldd	r24, Z+1	; 0x01
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	a1 f0       	breq	.+40     	; 0x16ac <udc_next_desc_in_iface+0x5e>
    1684:	86 13       	cpse	r24, r22
    1686:	03 c0       	rjmp	.+6      	; 0x168e <udc_next_desc_in_iface+0x40>
    1688:	8e 2f       	mov	r24, r30
    168a:	9f 2f       	mov	r25, r31
    168c:	08 95       	ret
    168e:	80 81       	ld	r24, Z
    1690:	e8 0f       	add	r30, r24
    1692:	f1 1d       	adc	r31, r1
    1694:	e2 17       	cp	r30, r18
    1696:	f3 07       	cpc	r31, r19
    1698:	90 f3       	brcs	.-28     	; 0x167e <udc_next_desc_in_iface+0x30>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	08 95       	ret
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	08 95       	ret
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	08 95       	ret
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	08 95       	ret

000016b2 <udc_valid_address>:
    16b2:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    16b6:	8f 77       	andi	r24, 0x7F	; 127
    16b8:	0c 94 90 13 	jmp	0x2720	; 0x2720 <udd_set_address>
    16bc:	08 95       	ret

000016be <udc_update_iface_desc>:
    16be:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <udc_num_configuration>
    16c2:	99 23       	and	r25, r25
    16c4:	81 f1       	breq	.+96     	; 0x1726 <udc_update_iface_desc+0x68>
    16c6:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    16ca:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    16ce:	01 90       	ld	r0, Z+
    16d0:	f0 81       	ld	r31, Z
    16d2:	e0 2d       	mov	r30, r0
    16d4:	94 81       	ldd	r25, Z+4	; 0x04
    16d6:	89 17       	cp	r24, r25
    16d8:	40 f5       	brcc	.+80     	; 0x172a <udc_update_iface_desc+0x6c>
    16da:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    16de:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    16e2:	22 81       	ldd	r18, Z+2	; 0x02
    16e4:	33 81       	ldd	r19, Z+3	; 0x03
    16e6:	2e 0f       	add	r18, r30
    16e8:	3f 1f       	adc	r19, r31
    16ea:	e2 17       	cp	r30, r18
    16ec:	f3 07       	cpc	r31, r19
    16ee:	f8 f4       	brcc	.+62     	; 0x172e <udc_update_iface_desc+0x70>
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	94 30       	cpi	r25, 0x04	; 4
    16f4:	61 f4       	brne	.+24     	; 0x170e <udc_update_iface_desc+0x50>
    16f6:	92 81       	ldd	r25, Z+2	; 0x02
    16f8:	98 13       	cpse	r25, r24
    16fa:	09 c0       	rjmp	.+18     	; 0x170e <udc_update_iface_desc+0x50>
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	96 13       	cpse	r25, r22
    1700:	06 c0       	rjmp	.+12     	; 0x170e <udc_update_iface_desc+0x50>
    1702:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    1706:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	08 95       	ret
    170e:	90 81       	ld	r25, Z
    1710:	e9 0f       	add	r30, r25
    1712:	f1 1d       	adc	r31, r1
    1714:	e2 17       	cp	r30, r18
    1716:	f3 07       	cpc	r31, r19
    1718:	58 f3       	brcs	.-42     	; 0x16f0 <udc_update_iface_desc+0x32>
    171a:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <udc_ptr_iface>
    171e:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <udc_ptr_iface+0x1>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	08 95       	ret
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	08 95       	ret
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	08 95       	ret
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	08 95       	ret

00001732 <udc_iface_disable>:
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	c8 2f       	mov	r28, r24
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	be df       	rcall	.-132    	; 0x16be <udc_update_iface_desc>
    1742:	18 2f       	mov	r17, r24
    1744:	88 23       	and	r24, r24
    1746:	81 f1       	breq	.+96     	; 0x17a8 <udc_iface_disable+0x76>
    1748:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    174c:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1750:	ec 2f       	mov	r30, r28
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	12 96       	adiw	r26, 0x02	; 2
    175a:	8d 91       	ld	r24, X+
    175c:	9c 91       	ld	r25, X
    175e:	13 97       	sbiw	r26, 0x03	; 3
    1760:	e8 0f       	add	r30, r24
    1762:	f9 1f       	adc	r31, r25
    1764:	e0 80       	ld	r14, Z
    1766:	f1 80       	ldd	r15, Z+1	; 0x01
    1768:	d7 01       	movw	r26, r14
    176a:	16 96       	adiw	r26, 0x06	; 6
    176c:	ed 91       	ld	r30, X+
    176e:	fc 91       	ld	r31, X
    1770:	17 97       	sbiw	r26, 0x07	; 7
    1772:	09 95       	icall
    1774:	68 2f       	mov	r22, r24
    1776:	8c 2f       	mov	r24, r28
    1778:	a2 df       	rcall	.-188    	; 0x16be <udc_update_iface_desc>
    177a:	18 2f       	mov	r17, r24
    177c:	88 23       	and	r24, r24
    177e:	a1 f0       	breq	.+40     	; 0x17a8 <udc_iface_disable+0x76>
    1780:	c0 91 be 20 	lds	r28, 0x20BE	; 0x8020be <udc_ptr_iface>
    1784:	d0 91 bf 20 	lds	r29, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    1788:	65 e0       	ldi	r22, 0x05	; 5
    178a:	ce 01       	movw	r24, r28
    178c:	60 df       	rcall	.-320    	; 0x164e <udc_next_desc_in_iface>
    178e:	ec 01       	movw	r28, r24
    1790:	89 2b       	or	r24, r25
    1792:	21 f0       	breq	.+8      	; 0x179c <udc_iface_disable+0x6a>
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <udd_ep_free>
    179a:	f6 cf       	rjmp	.-20     	; 0x1788 <udc_iface_disable+0x56>
    179c:	d7 01       	movw	r26, r14
    179e:	12 96       	adiw	r26, 0x02	; 2
    17a0:	ed 91       	ld	r30, X+
    17a2:	fc 91       	ld	r31, X
    17a4:	13 97       	sbiw	r26, 0x03	; 3
    17a6:	09 95       	icall
    17a8:	81 2f       	mov	r24, r17
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	08 95       	ret

000017b6 <udc_iface_enable>:
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	18 2f       	mov	r17, r24
    17be:	7f df       	rcall	.-258    	; 0x16be <udc_update_iface_desc>
    17c0:	88 23       	and	r24, r24
    17c2:	39 f1       	breq	.+78     	; 0x1812 <udc_iface_enable+0x5c>
    17c4:	c0 91 be 20 	lds	r28, 0x20BE	; 0x8020be <udc_ptr_iface>
    17c8:	d0 91 bf 20 	lds	r29, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    17cc:	65 e0       	ldi	r22, 0x05	; 5
    17ce:	ce 01       	movw	r24, r28
    17d0:	3e df       	rcall	.-388    	; 0x164e <udc_next_desc_in_iface>
    17d2:	ec 01       	movw	r28, r24
    17d4:	89 2b       	or	r24, r25
    17d6:	41 f0       	breq	.+16     	; 0x17e8 <udc_iface_enable+0x32>
    17d8:	4c 81       	ldd	r20, Y+4	; 0x04
    17da:	5d 81       	ldd	r21, Y+5	; 0x05
    17dc:	6b 81       	ldd	r22, Y+3	; 0x03
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	ac d7       	rcall	.+3928   	; 0x273a <udd_ep_alloc>
    17e2:	81 11       	cpse	r24, r1
    17e4:	f3 cf       	rjmp	.-26     	; 0x17cc <udc_iface_enable+0x16>
    17e6:	15 c0       	rjmp	.+42     	; 0x1812 <udc_iface_enable+0x5c>
    17e8:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    17ec:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    17f0:	e1 2f       	mov	r30, r17
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	ee 0f       	add	r30, r30
    17f6:	ff 1f       	adc	r31, r31
    17f8:	12 96       	adiw	r26, 0x02	; 2
    17fa:	8d 91       	ld	r24, X+
    17fc:	9c 91       	ld	r25, X
    17fe:	13 97       	sbiw	r26, 0x03	; 3
    1800:	e8 0f       	add	r30, r24
    1802:	f9 1f       	adc	r31, r25
    1804:	01 90       	ld	r0, Z+
    1806:	f0 81       	ld	r31, Z
    1808:	e0 2d       	mov	r30, r0
    180a:	01 90       	ld	r0, Z+
    180c:	f0 81       	ld	r31, Z
    180e:	e0 2d       	mov	r30, r0
    1810:	09 95       	icall
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	08 95       	ret

0000181a <udc_get_interface_desc>:
    181a:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_ptr_iface>
    181e:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <udc_ptr_iface+0x1>
    1822:	08 95       	ret

00001824 <udc_start>:
    1824:	02 c7       	rjmp	.+3588   	; 0x262a <udd_enable>
    1826:	08 95       	ret

00001828 <udc_reset>:
    1828:	cf 93       	push	r28
    182a:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    182e:	88 23       	and	r24, r24
    1830:	c1 f0       	breq	.+48     	; 0x1862 <udc_reset+0x3a>
    1832:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1836:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    183a:	01 90       	ld	r0, Z+
    183c:	f0 81       	ld	r31, Z
    183e:	e0 2d       	mov	r30, r0
    1840:	84 81       	ldd	r24, Z+4	; 0x04
    1842:	88 23       	and	r24, r24
    1844:	71 f0       	breq	.+28     	; 0x1862 <udc_reset+0x3a>
    1846:	c0 e0       	ldi	r28, 0x00	; 0
    1848:	8c 2f       	mov	r24, r28
    184a:	73 df       	rcall	.-282    	; 0x1732 <udc_iface_disable>
    184c:	cf 5f       	subi	r28, 0xFF	; 255
    184e:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1852:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1856:	01 90       	ld	r0, Z+
    1858:	f0 81       	ld	r31, Z
    185a:	e0 2d       	mov	r30, r0
    185c:	84 81       	ldd	r24, Z+4	; 0x04
    185e:	c8 17       	cp	r28, r24
    1860:	98 f3       	brcs	.-26     	; 0x1848 <udc_reset+0x20>
    1862:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_num_configuration>
    1866:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <udc_device_status>
    186a:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <udc_device_status+0x1>
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1872:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1874:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1878:	88 23       	and	r24, r24
    187a:	49 f1       	breq	.+82     	; 0x18ce <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    187c:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1880:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1884:	ed 91       	ld	r30, X+
    1886:	fc 91       	ld	r31, X
    1888:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    188a:	84 81       	ldd	r24, Z+4	; 0x04
    188c:	88 23       	and	r24, r24
    188e:	f9 f0       	breq	.+62     	; 0x18ce <udc_sof_notify+0x5c>
    1890:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1892:	ec 2f       	mov	r30, r28
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	12 96       	adiw	r26, 0x02	; 2
    189c:	8d 91       	ld	r24, X+
    189e:	9c 91       	ld	r25, X
    18a0:	13 97       	sbiw	r26, 0x03	; 3
    18a2:	e8 0f       	add	r30, r24
    18a4:	f9 1f       	adc	r31, r25
    18a6:	01 90       	ld	r0, Z+
    18a8:	f0 81       	ld	r31, Z
    18aa:	e0 2d       	mov	r30, r0
    18ac:	00 84       	ldd	r0, Z+8	; 0x08
    18ae:	f1 85       	ldd	r31, Z+9	; 0x09
    18b0:	e0 2d       	mov	r30, r0
    18b2:	30 97       	sbiw	r30, 0x00	; 0
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    18b6:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    18b8:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18ba:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    18be:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    18c2:	ed 91       	ld	r30, X+
    18c4:	fc 91       	ld	r31, X
    18c6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18c8:	84 81       	ldd	r24, Z+4	; 0x04
    18ca:	c8 17       	cp	r28, r24
    18cc:	10 f3       	brcs	.-60     	; 0x1892 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    18da:	ea eb       	ldi	r30, 0xBA	; 186
    18dc:	f5 e2       	ldi	r31, 0x25	; 37
    18de:	12 86       	std	Z+10, r1	; 0x0a
    18e0:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    18e2:	14 86       	std	Z+12, r1	; 0x0c
    18e4:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    18e6:	16 86       	std	Z+14, r1	; 0x0e
    18e8:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    18ea:	80 81       	ld	r24, Z
    18ec:	28 2f       	mov	r18, r24
    18ee:	88 23       	and	r24, r24
    18f0:	3c f4       	brge	.+14     	; 0x1900 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    18f2:	40 91 c0 25 	lds	r20, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    18f6:	50 91 c1 25 	lds	r21, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    18fa:	45 2b       	or	r20, r21
    18fc:	09 f4       	brne	.+2      	; 0x1900 <udc_process_setup+0x2e>
    18fe:	49 c3       	rjmp	.+1682   	; 0x1f92 <udc_process_setup+0x6c0>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1900:	98 2f       	mov	r25, r24
    1902:	90 76       	andi	r25, 0x60	; 96
    1904:	90 34       	cpi	r25, 0x40	; 64
    1906:	09 f0       	breq	.+2      	; 0x190a <udc_process_setup+0x38>
    1908:	ea c0       	rjmp	.+468    	; 0x1ade <udc_process_setup+0x20c>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    190a:	e0 91 bb 25 	lds	r30, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    190e:	4e 2f       	mov	r20, r30
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	fa 01       	movw	r30, r20
    1914:	e0 5a       	subi	r30, 0xA0	; 160
    1916:	f1 09       	sbc	r31, r1
    1918:	e8 30       	cpi	r30, 0x08	; 8
    191a:	f1 05       	cpc	r31, r1
    191c:	08 f0       	brcs	.+2      	; 0x1920 <udc_process_setup+0x4e>
    191e:	df c0       	rjmp	.+446    	; 0x1ade <udc_process_setup+0x20c>
    1920:	ea 5f       	subi	r30, 0xFA	; 250
    1922:	fe 4f       	sbci	r31, 0xFE	; 254
    1924:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    192e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1932:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1936:	ee e9       	ldi	r30, 0x9E	; 158
    1938:	f3 e2       	ldi	r31, 0x23	; 35
    193a:	85 87       	std	Z+13, r24	; 0x0d
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    193c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1940:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1944:	96 87       	std	Z+14, r25	; 0x0e
			uds.calValNeg = cali_value_negative_gradient;
    1946:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <cali_value_negative_gradient>
    194a:	87 87       	std	Z+15, r24	; 0x0f
			uds.calValPos = cali_value_positive_gradient;
    194c:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <cali_value_positive_gradient>
    1950:	80 8b       	std	Z+16, r24	; 0x10
			uds.CALA = DFLLRC2M.CALA;
    1952:	a8 e6       	ldi	r26, 0x68	; 104
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	12 96       	adiw	r26, 0x02	; 2
    1958:	8c 91       	ld	r24, X
    195a:	12 97       	sbiw	r26, 0x02	; 2
    195c:	81 8b       	std	Z+17, r24	; 0x11
			uds.CALB = DFLLRC2M.CALB;
    195e:	13 96       	adiw	r26, 0x03	; 3
    1960:	8c 91       	ld	r24, X
    1962:	82 8b       	std	Z+18, r24	; 0x12
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    1964:	60 91 c0 25 	lds	r22, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1968:	70 91 c1 25 	lds	r23, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    196c:	cf 01       	movw	r24, r30
    196e:	de d6       	rcall	.+3516   	; 0x272c <udd_set_setup_payload>
    1970:	14 c3       	rjmp	.+1576   	; 0x1f9a <udc_process_setup+0x6c8>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1972:	e0 e0       	ldi	r30, 0x00	; 0
    1974:	f8 e0       	ldi	r31, 0x08	; 8
    1976:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1978:	ca eb       	ldi	r28, 0xBA	; 186
    197a:	d5 e2       	ldi	r29, 0x25	; 37
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	9b 81       	ldd	r25, Y+3	; 0x03
    1980:	86 ab       	std	Z+54, r24	; 0x36
    1982:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	8f 70       	andi	r24, 0x0F	; 15
    1988:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    198a:	6e 81       	ldd	r22, Y+6	; 0x06
    198c:	7f 81       	ldd	r23, Y+7	; 0x07
    198e:	8a eb       	ldi	r24, 0xBA	; 186
    1990:	93 e2       	ldi	r25, 0x23	; 35
    1992:	cc d6       	rcall	.+3480   	; 0x272c <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1994:	8e 81       	ldd	r24, Y+6	; 0x06
    1996:	9f 81       	ldd	r25, Y+7	; 0x07
    1998:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    199c:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    19a0:	82 17       	cp	r24, r18
    19a2:	93 07       	cpc	r25, r19
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <udc_process_setup+0xd6>
    19a6:	f9 c2       	rjmp	.+1522   	; 0x1f9a <udc_process_setup+0x6c8>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    19a8:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    19ac:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				tiny_dma_delayed_set(global_mode);
    19b0:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19b4:	f3 d8       	rcall	.-3610   	; 0xb9c <tiny_dma_delayed_set>
    19b6:	f1 c2       	rjmp	.+1506   	; 0x1f9a <udc_process_setup+0x6c8>
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    19b8:	e0 e4       	ldi	r30, 0x40	; 64
    19ba:	f8 e0       	ldi	r31, 0x08	; 8
    19bc:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    19be:	ca eb       	ldi	r28, 0xBA	; 186
    19c0:	d5 e2       	ldi	r29, 0x25	; 37
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	86 ab       	std	Z+54, r24	; 0x36
    19c8:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	8f 70       	andi	r24, 0x0F	; 15
    19ce:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    19d0:	6e 81       	ldd	r22, Y+6	; 0x06
    19d2:	7f 81       	ldd	r23, Y+7	; 0x07
    19d4:	8b ec       	ldi	r24, 0xCB	; 203
    19d6:	95 e2       	ldi	r25, 0x25	; 37
    19d8:	a9 d6       	rcall	.+3410   	; 0x272c <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    19da:	8e 81       	ldd	r24, Y+6	; 0x06
    19dc:	9f 81       	ldd	r25, Y+7	; 0x07
    19de:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    19e2:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    19e6:	82 17       	cp	r24, r18
    19e8:	93 07       	cpc	r25, r19
    19ea:	09 f4       	brne	.+2      	; 0x19ee <udc_process_setup+0x11c>
    19ec:	d6 c2       	rjmp	.+1452   	; 0x1f9a <udc_process_setup+0x6c8>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    19ee:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    19f2:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				tiny_dma_delayed_set(global_mode);
    19f6:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19fa:	d0 d8       	rcall	.-3680   	; 0xb9c <tiny_dma_delayed_set>
    19fc:	ce c2       	rjmp	.+1436   	; 0x1f9a <udc_process_setup+0x6c8>
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    19fe:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1a02:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1a06:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a0a:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <PSU_target>
    1a0e:	c5 c2       	rjmp	.+1418   	; 0x1f9a <udc_process_setup+0x6c8>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1a10:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a14:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1a18:	c0 c2       	rjmp	.+1408   	; 0x1f9a <udc_process_setup+0x6c8>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1a1a:	e0 91 bc 25 	lds	r30, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a1e:	f0 91 bd 25 	lds	r31, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1a22:	e8 30       	cpi	r30, 0x08	; 8
    1a24:	f1 05       	cpc	r31, r1
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <udc_process_setup+0x158>
    1a28:	5a c0       	rjmp	.+180    	; 0x1ade <udc_process_setup+0x20c>
    1a2a:	e2 5f       	subi	r30, 0xF2	; 242
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2e:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	18 d8       	rcall	.-4048   	; 0xa68 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a38:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a3c:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(0);
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	ac d8       	rcall	.-3752   	; 0xb9c <tiny_dma_delayed_set>
    1a44:	aa c2       	rjmp	.+1364   	; 0x1f9a <udc_process_setup+0x6c8>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	0e d8       	rcall	.-4068   	; 0xa68 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a4c:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a50:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(1);
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	a2 d8       	rcall	.-3772   	; 0xb9c <tiny_dma_delayed_set>
    1a58:	a0 c2       	rjmp	.+1344   	; 0x1f9a <udc_process_setup+0x6c8>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	04 d8       	rcall	.-4088   	; 0xa68 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a60:	ca eb       	ldi	r28, 0xBA	; 186
    1a62:	d5 e2       	ldi	r29, 0x25	; 37
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	0e 94 17 05 	call	0xa2e	; 0xa2e <tiny_adc_ch1setup>
					tiny_dma_delayed_set(2);
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	94 d8       	rcall	.-3800   	; 0xb9c <tiny_dma_delayed_set>
    1a74:	92 c2       	rjmp	.+1316   	; 0x1f9a <udc_process_setup+0x6c8>
					break;
				case 3:  //Mode 3
					tiny_dma_delayed_set(3);
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	91 d8       	rcall	.-3806   	; 0xb9c <tiny_dma_delayed_set>
    1a7a:	8f c2       	rjmp	.+1310   	; 0x1f9a <udc_process_setup+0x6c8>
					break;
				case 4:  //Mode 4
					tiny_dma_delayed_set(4);
    1a7c:	84 e0       	ldi	r24, 0x04	; 4
    1a7e:	8e d8       	rcall	.-3812   	; 0xb9c <tiny_dma_delayed_set>
    1a80:	8c c2       	rjmp	.+1304   	; 0x1f9a <udc_process_setup+0x6c8>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	0e 94 34 05 	call	0xa68	; 0xa68 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a8a:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a8e:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(5);
    1a92:	85 e0       	ldi	r24, 0x05	; 5
    1a94:	83 d8       	rcall	.-3834   	; 0xb9c <tiny_dma_delayed_set>
    1a96:	81 c2       	rjmp	.+1282   	; 0x1f9a <udc_process_setup+0x6c8>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	0e 94 34 05 	call	0xa68	; 0xa68 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1aa0:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1aa4:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(6);
    1aa8:	86 e0       	ldi	r24, 0x06	; 6
    1aaa:	78 d8       	rcall	.-3856   	; 0xb9c <tiny_dma_delayed_set>
    1aac:	76 c2       	rjmp	.+1260   	; 0x1f9a <udc_process_setup+0x6c8>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0e 94 34 05 	call	0xa68	; 0xa68 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1ab6:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1aba:	80 68       	ori	r24, 0x80	; 128
    1abc:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(7);
    1ac0:	87 e0       	ldi	r24, 0x07	; 7
    1ac2:	6c d8       	rcall	.-3880   	; 0xb9c <tiny_dma_delayed_set>
    1ac4:	6a c2       	rjmp	.+1236   	; 0x1f9a <udc_process_setup+0x6c8>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1ac6:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1aca:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1ace:	65 c2       	rjmp	.+1226   	; 0x1f9a <udc_process_setup+0x6c8>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1ad0:	e9 e7       	ldi	r30, 0x79	; 121
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	88 ed       	ldi	r24, 0xD8	; 216
    1ad8:	f8 94       	cli
    1ada:	84 bf       	out	0x34, r24	; 52
    1adc:	90 83       	st	Z, r25
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1ade:	91 11       	cpse	r25, r1
    1ae0:	e1 c1       	rjmp	.+962    	; 0x1ea4 <udc_process_setup+0x5d2>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1ae2:	22 23       	and	r18, r18
    1ae4:	0c f0       	brlt	.+2      	; 0x1ae8 <udc_process_setup+0x216>
    1ae6:	05 c1       	rjmp	.+522    	; 0x1cf2 <udc_process_setup+0x420>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1ae8:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1aec:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1af0:	21 15       	cp	r18, r1
    1af2:	31 05       	cpc	r19, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <udc_process_setup+0x226>
    1af6:	d6 c1       	rjmp	.+940    	; 0x1ea4 <udc_process_setup+0x5d2>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1af8:	8f 71       	andi	r24, 0x1F	; 31
    1afa:	09 f0       	breq	.+2      	; 0x1afe <udc_process_setup+0x22c>
    1afc:	a3 c0       	rjmp	.+326    	; 0x1c44 <udc_process_setup+0x372>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1afe:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1b02:	96 30       	cpi	r25, 0x06	; 6
    1b04:	79 f0       	breq	.+30     	; 0x1b24 <udc_process_setup+0x252>
    1b06:	98 30       	cpi	r25, 0x08	; 8
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <udc_process_setup+0x23a>
    1b0a:	92 c0       	rjmp	.+292    	; 0x1c30 <udc_process_setup+0x35e>
    1b0c:	91 11       	cpse	r25, r1
    1b0e:	9a c0       	rjmp	.+308    	; 0x1c44 <udc_process_setup+0x372>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <udc_process_setup+0x246>
    1b16:	c6 c1       	rjmp	.+908    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	86 ec       	ldi	r24, 0xC6	; 198
    1b1e:	90 e2       	ldi	r25, 0x20	; 32
    1b20:	05 d6       	rcall	.+3082   	; 0x272c <udd_set_setup_payload>
    1b22:	3d c2       	rjmp	.+1146   	; 0x1f9e <udc_process_setup+0x6cc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b24:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1b28:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b2c:	29 2f       	mov	r18, r25
    1b2e:	33 27       	eor	r19, r19
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	a9 f0       	breq	.+42     	; 0x1b60 <udc_process_setup+0x28e>
    1b36:	24 f4       	brge	.+8      	; 0x1b40 <udc_process_setup+0x26e>
    1b38:	21 30       	cpi	r18, 0x01	; 1
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	41 f0       	breq	.+16     	; 0x1b4e <udc_process_setup+0x27c>
    1b3e:	a9 c1       	rjmp	.+850    	; 0x1e92 <udc_process_setup+0x5c0>
    1b40:	23 30       	cpi	r18, 0x03	; 3
    1b42:	31 05       	cpc	r19, r1
    1b44:	d9 f1       	breq	.+118    	; 0x1bbc <udc_process_setup+0x2ea>
    1b46:	2f 30       	cpi	r18, 0x0F	; 15
    1b48:	31 05       	cpc	r19, r1
    1b4a:	51 f1       	breq	.+84     	; 0x1ba0 <udc_process_setup+0x2ce>
    1b4c:	a2 c1       	rjmp	.+836    	; 0x1e92 <udc_process_setup+0x5c0>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1b4e:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1b52:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1b56:	dc 01       	movw	r26, r24
    1b58:	6c 91       	ld	r22, X
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	e7 d5       	rcall	.+3022   	; 0x272c <udd_set_setup_payload>
    1b5e:	59 c0       	rjmp	.+178    	; 0x1c12 <udc_process_setup+0x340>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1b60:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1b64:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1b68:	21 89       	ldd	r18, Z+17	; 0x11
    1b6a:	82 17       	cp	r24, r18
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <udc_process_setup+0x29e>
    1b6e:	9a c1       	rjmp	.+820    	; 0x1ea4 <udc_process_setup+0x5d2>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1b70:	99 27       	eor	r25, r25
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1b7e:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1b82:	e8 0f       	add	r30, r24
    1b84:	f9 1f       	adc	r31, r25
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	62 81       	ldd	r22, Z+2	; 0x02
    1b8e:	73 81       	ldd	r23, Z+3	; 0x03
    1b90:	cd d5       	rcall	.+2970   	; 0x272c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1b92:	e0 91 c2 25 	lds	r30, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    1b96:	f0 91 c3 25 	lds	r31, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	81 83       	std	Z+1, r24	; 0x01
    1b9e:	39 c0       	rjmp	.+114    	; 0x1c12 <udc_process_setup+0x340>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1ba0:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1ba4:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	09 f4       	brne	.+2      	; 0x1bae <udc_process_setup+0x2dc>
    1bac:	7b c1       	rjmp	.+758    	; 0x1ea4 <udc_process_setup+0x5d2>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1bae:	dc 01       	movw	r26, r24
    1bb0:	12 96       	adiw	r26, 0x02	; 2
    1bb2:	6d 91       	ld	r22, X+
    1bb4:	7c 91       	ld	r23, X
    1bb6:	13 97       	sbiw	r26, 0x03	; 3
    1bb8:	b9 d5       	rcall	.+2930   	; 0x272c <udd_set_setup_payload>
    1bba:	2b c0       	rjmp	.+86     	; 0x1c12 <udc_process_setup+0x340>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1bbc:	99 27       	eor	r25, r25
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	71 f0       	breq	.+28     	; 0x1be0 <udc_process_setup+0x30e>
    1bc4:	38 f0       	brcs	.+14     	; 0x1bd4 <udc_process_setup+0x302>
    1bc6:	02 97       	sbiw	r24, 0x02	; 2
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <udc_process_setup+0x2fa>
    1bca:	6c c1       	rjmp	.+728    	; 0x1ea4 <udc_process_setup+0x5d2>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1bcc:	2a e8       	ldi	r18, 0x8A	; 138
    1bce:	30 e2       	ldi	r19, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1bd0:	88 e0       	ldi	r24, 0x08	; 8
    1bd2:	09 c0       	rjmp	.+18     	; 0x1be6 <udc_process_setup+0x314>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1bd4:	64 e0       	ldi	r22, 0x04	; 4
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	8c e9       	ldi	r24, 0x9C	; 156
    1bda:	90 e2       	ldi	r25, 0x20	; 32
    1bdc:	a7 d5       	rcall	.+2894   	; 0x272c <udd_set_setup_payload>
    1bde:	19 c0       	rjmp	.+50     	; 0x1c12 <udc_process_setup+0x340>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1be0:	23 e9       	ldi	r18, 0x93	; 147
    1be2:	30 e2       	ldi	r19, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1be4:	87 e0       	ldi	r24, 0x07	; 7
    1be6:	42 2f       	mov	r20, r18
    1be8:	aa e7       	ldi	r26, 0x7A	; 122
    1bea:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1bec:	e2 2f       	mov	r30, r18
    1bee:	f3 2f       	mov	r31, r19
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1bf0:	21 91       	ld	r18, Z+
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	2d 93       	st	X+, r18
    1bf6:	3d 93       	st	X+, r19
    1bf8:	9e 2f       	mov	r25, r30
    1bfa:	94 1b       	sub	r25, r20
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1bfc:	98 17       	cp	r25, r24
    1bfe:	c0 f3       	brcs	.-16     	; 0x1bf0 <udc_process_setup+0x31e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1c00:	68 2f       	mov	r22, r24
    1c02:	66 0f       	add	r22, r22
    1c04:	6e 5f       	subi	r22, 0xFE	; 254
    1c06:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	88 e7       	ldi	r24, 0x78	; 120
    1c0e:	90 e2       	ldi	r25, 0x20	; 32
    1c10:	8d d5       	rcall	.+2842   	; 0x272c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1c12:	ea eb       	ldi	r30, 0xBA	; 186
    1c14:	f5 e2       	ldi	r31, 0x25	; 37
    1c16:	86 81       	ldd	r24, Z+6	; 0x06
    1c18:	97 81       	ldd	r25, Z+7	; 0x07
    1c1a:	22 85       	ldd	r18, Z+10	; 0x0a
    1c1c:	33 85       	ldd	r19, Z+11	; 0x0b
    1c1e:	82 17       	cp	r24, r18
    1c20:	93 07       	cpc	r25, r19
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <udc_process_setup+0x354>
    1c24:	bc c1       	rjmp	.+888    	; 0x1f9e <udc_process_setup+0x6cc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1c26:	80 93 c4 25 	sts	0x25C4, r24	; 0x8025c4 <udd_g_ctrlreq+0xa>
    1c2a:	90 93 c5 25 	sts	0x25C5, r25	; 0x8025c5 <udd_g_ctrlreq+0xb>
    1c2e:	b7 c1       	rjmp	.+878    	; 0x1f9e <udc_process_setup+0x6cc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1c30:	21 30       	cpi	r18, 0x01	; 1
    1c32:	31 05       	cpc	r19, r1
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <udc_process_setup+0x366>
    1c36:	36 c1       	rjmp	.+620    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	82 ec       	ldi	r24, 0xC2	; 194
    1c3e:	90 e2       	ldi	r25, 0x20	; 32
    1c40:	75 d5       	rcall	.+2794   	; 0x272c <udd_set_setup_payload>
    1c42:	ad c1       	rjmp	.+858    	; 0x1f9e <udc_process_setup+0x6cc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	e1 f5       	brne	.+120    	; 0x1cc0 <udc_process_setup+0x3ee>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c48:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1c4c:	9a 30       	cpi	r25, 0x0A	; 10
    1c4e:	c1 f5       	brne	.+112    	; 0x1cc0 <udc_process_setup+0x3ee>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1c50:	21 30       	cpi	r18, 0x01	; 1
    1c52:	31 05       	cpc	r19, r1
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <udc_process_setup+0x386>
    1c56:	26 c1       	rjmp	.+588    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c58:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1c5c:	88 23       	and	r24, r24
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <udc_process_setup+0x390>
    1c60:	21 c1       	rjmp	.+578    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c62:	c0 91 be 25 	lds	r28, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1c66:	d0 91 bf 25 	lds	r29, 0x25BF	; 0x8025bf <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c6a:	00 91 c0 20 	lds	r16, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1c6e:	10 91 c1 20 	lds	r17, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1c72:	d8 01       	movw	r26, r16
    1c74:	ed 91       	ld	r30, X+
    1c76:	fc 91       	ld	r31, X
    1c78:	84 81       	ldd	r24, Z+4	; 0x04
    1c7a:	c8 17       	cp	r28, r24
    1c7c:	08 f0       	brcs	.+2      	; 0x1c80 <udc_process_setup+0x3ae>
    1c7e:	12 c1       	rjmp	.+548    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	8c 2f       	mov	r24, r28
    1c84:	1c dd       	rcall	.-1480   	; 0x16be <udc_update_iface_desc>
    1c86:	88 23       	and	r24, r24
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <udc_process_setup+0x3ba>
    1c8a:	0c c1       	rjmp	.+536    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	99 27       	eor	r25, r25
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	d8 01       	movw	r26, r16
    1c96:	12 96       	adiw	r26, 0x02	; 2
    1c98:	ed 91       	ld	r30, X+
    1c9a:	fc 91       	ld	r31, X
    1c9c:	13 97       	sbiw	r26, 0x03	; 3
    1c9e:	e8 0f       	add	r30, r24
    1ca0:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1ca2:	01 90       	ld	r0, Z+
    1ca4:	f0 81       	ld	r31, Z
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	86 81       	ldd	r24, Z+6	; 0x06
    1caa:	97 81       	ldd	r25, Z+7	; 0x07
    1cac:	fc 01       	movw	r30, r24
    1cae:	09 95       	icall
    1cb0:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	84 ec       	ldi	r24, 0xC4	; 196
    1cba:	90 e2       	ldi	r25, 0x20	; 32
    1cbc:	37 d5       	rcall	.+2670   	; 0x272c <udd_set_setup_payload>
    1cbe:	6f c1       	rjmp	.+734    	; 0x1f9e <udc_process_setup+0x6cc>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <udc_process_setup+0x3f4>
    1cc4:	ef c0       	rjmp	.+478    	; 0x1ea4 <udc_process_setup+0x5d2>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cc6:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	e4 c0       	rjmp	.+456    	; 0x1e96 <udc_process_setup+0x5c4>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <udc_process_setup+0x404>
    1cd4:	e7 c0       	rjmp	.+462    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1cd6:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1cda:	9b d5       	rcall	.+2870   	; 0x2812 <udd_ep_is_halted>
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <udc_ep_status.5554>
    1ce2:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <udc_ep_status.5554+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1ce6:	62 e0       	ldi	r22, 0x02	; 2
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	8c eb       	ldi	r24, 0xBC	; 188
    1cec:	90 e2       	ldi	r25, 0x20	; 32
    1cee:	1e d5       	rcall	.+2620   	; 0x272c <udd_set_setup_payload>
    1cf0:	56 c1       	rjmp	.+684    	; 0x1f9e <udc_process_setup+0x6cc>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1cf2:	8f 71       	andi	r24, 0x1F	; 31
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <udc_process_setup+0x426>
    1cf6:	83 c0       	rjmp	.+262    	; 0x1dfe <udc_process_setup+0x52c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cf8:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1cfc:	93 30       	cpi	r25, 0x03	; 3
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <udc_process_setup+0x430>
    1d00:	cc c0       	rjmp	.+408    	; 0x1e9a <udc_process_setup+0x5c8>
    1d02:	18 f4       	brcc	.+6      	; 0x1d0a <udc_process_setup+0x438>
    1d04:	91 30       	cpi	r25, 0x01	; 1
    1d06:	a1 f0       	breq	.+40     	; 0x1d30 <udc_process_setup+0x45e>
    1d08:	7a c0       	rjmp	.+244    	; 0x1dfe <udc_process_setup+0x52c>
    1d0a:	95 30       	cpi	r25, 0x05	; 5
    1d0c:	19 f0       	breq	.+6      	; 0x1d14 <udc_process_setup+0x442>
    1d0e:	99 30       	cpi	r25, 0x09	; 9
    1d10:	39 f1       	breq	.+78     	; 0x1d60 <udc_process_setup+0x48e>
    1d12:	75 c0       	rjmp	.+234    	; 0x1dfe <udc_process_setup+0x52c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d14:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d18:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d1c:	89 2b       	or	r24, r25
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <udc_process_setup+0x450>
    1d20:	c1 c0       	rjmp	.+386    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1d22:	89 e5       	ldi	r24, 0x59	; 89
    1d24:	9b e0       	ldi	r25, 0x0B	; 11
    1d26:	80 93 c6 25 	sts	0x25C6, r24	; 0x8025c6 <udd_g_ctrlreq+0xc>
    1d2a:	90 93 c7 25 	sts	0x25C7, r25	; 0x8025c7 <udd_g_ctrlreq+0xd>
    1d2e:	37 c1       	rjmp	.+622    	; 0x1f9e <udc_process_setup+0x6cc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d30:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d34:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d38:	89 2b       	or	r24, r25
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <udc_process_setup+0x46c>
    1d3c:	b3 c0       	rjmp	.+358    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1d3e:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d42:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <udc_process_setup+0x47a>
    1d4a:	ac c0       	rjmp	.+344    	; 0x1ea4 <udc_process_setup+0x5d2>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1d4c:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udc_device_status>
    1d50:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <udc_device_status+0x1>
    1d54:	8d 7f       	andi	r24, 0xFD	; 253
    1d56:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udc_device_status>
    1d5a:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <udc_device_status+0x1>
    1d5e:	1f c1       	rjmp	.+574    	; 0x1f9e <udc_process_setup+0x6cc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1d60:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d64:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d68:	89 2b       	or	r24, r25
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <udc_process_setup+0x49c>
    1d6c:	9b c0       	rjmp	.+310    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1d6e:	db d4       	rcall	.+2486   	; 0x2726 <udd_getaddress>
    1d70:	88 23       	and	r24, r24
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <udc_process_setup+0x4a4>
    1d74:	97 c0       	rjmp	.+302    	; 0x1ea4 <udc_process_setup+0x5d2>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d76:	20 91 bc 25 	lds	r18, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d7a:	30 91 bd 25 	lds	r19, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1d7e:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1d80:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1d84:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d88:	81 89       	ldd	r24, Z+17	; 0x11
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	82 17       	cp	r24, r18
    1d8e:	93 07       	cpc	r25, r19
    1d90:	08 f4       	brcc	.+2      	; 0x1d94 <udc_process_setup+0x4c2>
    1d92:	88 c0       	rjmp	.+272    	; 0x1ea4 <udc_process_setup+0x5d2>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1d94:	49 dd       	rcall	.-1390   	; 0x1828 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1d96:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d9a:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1d9e:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1da2:	88 23       	and	r24, r24
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <udc_process_setup+0x4d6>
    1da6:	fb c0       	rjmp	.+502    	; 0x1f9e <udc_process_setup+0x6cc>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1da8:	99 27       	eor	r25, r25
    1daa:	81 50       	subi	r24, 0x01	; 1
    1dac:	90 4c       	sbci	r25, 0xC0	; 192
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1dba:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1dbe:	e8 0f       	add	r30, r24
    1dc0:	f9 1f       	adc	r31, r25
    1dc2:	e0 93 c0 20 	sts	0x20C0, r30	; 0x8020c0 <udc_ptr_conf>
    1dc6:	f0 93 c1 20 	sts	0x20C1, r31	; 0x8020c1 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dca:	01 90       	ld	r0, Z+
    1dcc:	f0 81       	ld	r31, Z
    1dce:	e0 2d       	mov	r30, r0
    1dd0:	84 81       	ldd	r24, Z+4	; 0x04
    1dd2:	88 23       	and	r24, r24
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <udc_process_setup+0x506>
    1dd6:	e3 c0       	rjmp	.+454    	; 0x1f9e <udc_process_setup+0x6cc>
    1dd8:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	8c 2f       	mov	r24, r28
    1dde:	eb dc       	rcall	.-1578   	; 0x17b6 <udc_iface_enable>
    1de0:	88 23       	and	r24, r24
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <udc_process_setup+0x514>
    1de4:	5f c0       	rjmp	.+190    	; 0x1ea4 <udc_process_setup+0x5d2>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1de6:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1de8:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1dec:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1df0:	01 90       	ld	r0, Z+
    1df2:	f0 81       	ld	r31, Z
    1df4:	e0 2d       	mov	r30, r0
    1df6:	84 81       	ldd	r24, Z+4	; 0x04
    1df8:	c8 17       	cp	r28, r24
    1dfa:	78 f3       	brcs	.-34     	; 0x1dda <udc_process_setup+0x508>
    1dfc:	d0 c0       	rjmp	.+416    	; 0x1f9e <udc_process_setup+0x6cc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	e1 f4       	brne	.+56     	; 0x1e3a <udc_process_setup+0x568>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e02:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1e06:	9b 30       	cpi	r25, 0x0B	; 11
    1e08:	c1 f4       	brne	.+48     	; 0x1e3a <udc_process_setup+0x568>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1e0a:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e0e:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e12:	89 2b       	or	r24, r25
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <udc_process_setup+0x546>
    1e16:	46 c0       	rjmp	.+140    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1e18:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1e1c:	88 23       	and	r24, r24
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <udc_process_setup+0x550>
    1e20:	41 c0       	rjmp	.+130    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e22:	ea eb       	ldi	r30, 0xBA	; 186
    1e24:	f5 e2       	ldi	r31, 0x25	; 37
    1e26:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1e28:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1e2a:	8c 2f       	mov	r24, r28
    1e2c:	82 dc       	rcall	.-1788   	; 0x1732 <udc_iface_disable>
    1e2e:	88 23       	and	r24, r24
    1e30:	c9 f1       	breq	.+114    	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1e32:	6d 2f       	mov	r22, r29
    1e34:	8c 2f       	mov	r24, r28
    1e36:	bf dc       	rcall	.-1666   	; 0x17b6 <udc_iface_enable>
    1e38:	33 c0       	rjmp	.+102    	; 0x1ea0 <udc_process_setup+0x5ce>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e3a:	82 30       	cpi	r24, 0x02	; 2
    1e3c:	99 f5       	brne	.+102    	; 0x1ea4 <udc_process_setup+0x5d2>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e3e:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	19 f0       	breq	.+6      	; 0x1e4c <udc_process_setup+0x57a>
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	89 f0       	breq	.+34     	; 0x1e6c <udc_process_setup+0x59a>
    1e4a:	29 c0       	rjmp	.+82     	; 0x1e9e <udc_process_setup+0x5cc>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e4c:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e50:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e54:	89 2b       	or	r24, r25
    1e56:	31 f5       	brne	.+76     	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e58:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1e5c:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1e60:	89 2b       	or	r24, r25
    1e62:	01 f5       	brne	.+64     	; 0x1ea4 <udc_process_setup+0x5d2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e64:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1e68:	ef d4       	rcall	.+2526   	; 0x2848 <udd_ep_clear_halt>
    1e6a:	1a c0       	rjmp	.+52     	; 0x1ea0 <udc_process_setup+0x5ce>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e6c:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e70:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e74:	89 2b       	or	r24, r25
    1e76:	b1 f4       	brne	.+44     	; 0x1ea4 <udc_process_setup+0x5d2>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e78:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1e7c:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1e80:	89 2b       	or	r24, r25
    1e82:	81 f4       	brne	.+32     	; 0x1ea4 <udc_process_setup+0x5d2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e84:	ca eb       	ldi	r28, 0xBA	; 186
    1e86:	d5 e2       	ldi	r29, 0x25	; 37
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	cd d5       	rcall	.+2970   	; 0x2a26 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	30 d6       	rcall	.+3168   	; 0x2af0 <udd_ep_set_halt>
    1e90:	07 c0       	rjmp	.+14     	; 0x1ea0 <udc_process_setup+0x5ce>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	05 c0       	rjmp	.+10     	; 0x1ea0 <udc_process_setup+0x5ce>
				break;
			}
		}
#endif
	}
	return false;
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <udc_process_setup+0x5ce>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	01 c0       	rjmp	.+2      	; 0x1ea0 <udc_process_setup+0x5ce>
				break;
			}
		}
#endif
	}
	return false;
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	7e c0       	rjmp	.+252    	; 0x1fa0 <udc_process_setup+0x6ce>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1ea4:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1ea8:	8f 71       	andi	r24, 0x1F	; 31
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	71 f5       	brne	.+92     	; 0x1f0a <udc_process_setup+0x638>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1eae:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1eb2:	88 23       	and	r24, r24
    1eb4:	51 f1       	breq	.+84     	; 0x1f0a <udc_process_setup+0x638>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1eb6:	00 91 be 25 	lds	r16, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1eba:	10 91 bf 25 	lds	r17, 0x25BF	; 0x8025bf <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ebe:	c0 91 c0 20 	lds	r28, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1ec2:	d0 91 c1 20 	lds	r29, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1ec6:	e8 81       	ld	r30, Y
    1ec8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eca:	84 81       	ldd	r24, Z+4	; 0x04
    1ecc:	08 17       	cp	r16, r24
    1ece:	e8 f4       	brcc	.+58     	; 0x1f0a <udc_process_setup+0x638>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	80 2f       	mov	r24, r16
    1ed4:	f4 db       	rcall	.-2072   	; 0x16be <udc_update_iface_desc>
    1ed6:	88 23       	and	r24, r24
    1ed8:	c1 f0       	breq	.+48     	; 0x1f0a <udc_process_setup+0x638>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1eda:	f8 01       	movw	r30, r16
    1edc:	ff 27       	eor	r31, r31
    1ede:	cf 01       	movw	r24, r30
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee8:	e8 0f       	add	r30, r24
    1eea:	f9 1f       	adc	r31, r25
    1eec:	c0 81       	ld	r28, Z
    1eee:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ef0:	ee 81       	ldd	r30, Y+6	; 0x06
    1ef2:	ff 81       	ldd	r31, Y+7	; 0x07
    1ef4:	09 95       	icall
    1ef6:	68 2f       	mov	r22, r24
    1ef8:	80 2f       	mov	r24, r16
    1efa:	e1 db       	rcall	.-2110   	; 0x16be <udc_update_iface_desc>
    1efc:	88 23       	and	r24, r24
    1efe:	29 f0       	breq	.+10     	; 0x1f0a <udc_process_setup+0x638>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1f00:	ec 81       	ldd	r30, Y+4	; 0x04
    1f02:	fd 81       	ldd	r31, Y+5	; 0x05
    1f04:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1f06:	81 11       	cpse	r24, r1
    1f08:	4b c0       	rjmp	.+150    	; 0x1fa0 <udc_process_setup+0x6ce>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1f0a:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1f0e:	8f 71       	andi	r24, 0x1F	; 31
    1f10:	82 30       	cpi	r24, 0x02	; 2
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <udc_process_setup+0x644>
    1f14:	40 c0       	rjmp	.+128    	; 0x1f96 <udc_process_setup+0x6c4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1f16:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1f1a:	88 23       	and	r24, r24
    1f1c:	b1 f1       	breq	.+108    	; 0x1f8a <udc_process_setup+0x6b8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f1e:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1f22:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1f26:	ed 91       	ld	r30, X+
    1f28:	fc 91       	ld	r31, X
    1f2a:	11 97       	sbiw	r26, 0x01	; 1
    1f2c:	84 81       	ldd	r24, Z+4	; 0x04
    1f2e:	88 23       	and	r24, r24
    1f30:	71 f1       	breq	.+92     	; 0x1f8e <udc_process_setup+0x6bc>
    1f32:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f34:	ec 2f       	mov	r30, r28
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	12 96       	adiw	r26, 0x02	; 2
    1f3e:	8d 91       	ld	r24, X+
    1f40:	9c 91       	ld	r25, X
    1f42:	13 97       	sbiw	r26, 0x03	; 3
    1f44:	e8 0f       	add	r30, r24
    1f46:	f9 1f       	adc	r31, r25
    1f48:	00 81       	ld	r16, Z
    1f4a:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f4c:	d8 01       	movw	r26, r16
    1f4e:	16 96       	adiw	r26, 0x06	; 6
    1f50:	ed 91       	ld	r30, X+
    1f52:	fc 91       	ld	r31, X
    1f54:	17 97       	sbiw	r26, 0x07	; 7
    1f56:	09 95       	icall
    1f58:	68 2f       	mov	r22, r24
    1f5a:	8c 2f       	mov	r24, r28
    1f5c:	b0 db       	rcall	.-2208   	; 0x16be <udc_update_iface_desc>
    1f5e:	88 23       	and	r24, r24
    1f60:	f9 f0       	breq	.+62     	; 0x1fa0 <udc_process_setup+0x6ce>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1f62:	d8 01       	movw	r26, r16
    1f64:	14 96       	adiw	r26, 0x04	; 4
    1f66:	ed 91       	ld	r30, X+
    1f68:	fc 91       	ld	r31, X
    1f6a:	15 97       	sbiw	r26, 0x05	; 5
    1f6c:	09 95       	icall
    1f6e:	81 11       	cpse	r24, r1
    1f70:	17 c0       	rjmp	.+46     	; 0x1fa0 <udc_process_setup+0x6ce>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1f72:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f74:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <udc_ptr_conf>
    1f78:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <udc_ptr_conf+0x1>
    1f7c:	ed 91       	ld	r30, X+
    1f7e:	fc 91       	ld	r31, X
    1f80:	11 97       	sbiw	r26, 0x01	; 1
    1f82:	94 81       	ldd	r25, Z+4	; 0x04
    1f84:	c9 17       	cp	r28, r25
    1f86:	b0 f2       	brcs	.-84     	; 0x1f34 <udc_process_setup+0x662>
    1f88:	0b c0       	rjmp	.+22     	; 0x1fa0 <udc_process_setup+0x6ce>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	09 c0       	rjmp	.+18     	; 0x1fa0 <udc_process_setup+0x6ce>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <udc_process_setup+0x6ce>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	05 c0       	rjmp	.+10     	; 0x1fa0 <udc_process_setup+0x6ce>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <udc_process_setup+0x6ce>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <udc_process_setup+0x6ce>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	08 95       	ret

00001faa <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1faa:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1fac:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1fae:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1fb0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1fb2:	60 83       	st	Z, r22
	ret                             // Return to caller
    1fb4:	08 95       	ret

00001fb6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1fb6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1fba:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1fbc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1fbe:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1fc2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1fc4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1fc8:	08 95       	ret

00001fca <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1fca:	81 11       	cpse	r24, r1
    1fcc:	22 c0       	rjmp	.+68     	; 0x2012 <udd_sleep_mode+0x48>
    1fce:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <udd_b_idle>
    1fd2:	99 23       	and	r25, r25
    1fd4:	d9 f0       	breq	.+54     	; 0x200c <udd_sleep_mode+0x42>
    1fd6:	90 91 ab 2f 	lds	r25, 0x2FAB	; 0x802fab <sleepmgr_locks+0x1>
    1fda:	91 11       	cpse	r25, r1
    1fdc:	01 c0       	rjmp	.+2      	; 0x1fe0 <udd_sleep_mode+0x16>
    1fde:	ff cf       	rjmp	.-2      	; 0x1fde <udd_sleep_mode+0x14>
    1fe0:	2f b7       	in	r18, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	ea ea       	ldi	r30, 0xAA	; 170
    1fe6:	ff e2       	ldi	r31, 0x2F	; 47
    1fe8:	91 81       	ldd	r25, Z+1	; 0x01
    1fea:	91 50       	subi	r25, 0x01	; 1
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	2f bf       	out	0x3f, r18	; 63
    1ff0:	0d c0       	rjmp	.+26     	; 0x200c <udd_sleep_mode+0x42>
    1ff2:	90 91 ab 2f 	lds	r25, 0x2FAB	; 0x802fab <sleepmgr_locks+0x1>
    1ff6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <udd_sleep_mode+0x32>
    1ffa:	ff cf       	rjmp	.-2      	; 0x1ffa <udd_sleep_mode+0x30>
    1ffc:	2f b7       	in	r18, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	ea ea       	ldi	r30, 0xAA	; 170
    2002:	ff e2       	ldi	r31, 0x2F	; 47
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	9f 5f       	subi	r25, 0xFF	; 255
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	2f bf       	out	0x3f, r18	; 63
    200c:	80 93 8c 23 	sts	0x238C, r24	; 0x80238c <udd_b_idle>
    2010:	08 95       	ret
    2012:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <udd_b_idle>
    2016:	99 23       	and	r25, r25
    2018:	61 f3       	breq	.-40     	; 0x1ff2 <udd_sleep_mode+0x28>
    201a:	f8 cf       	rjmp	.-16     	; 0x200c <udd_sleep_mode+0x42>

0000201c <udd_ctrl_init>:
    201c:	0f 93       	push	r16
    201e:	e8 ec       	ldi	r30, 0xC8	; 200
    2020:	f4 e0       	ldi	r31, 0x04	; 4
    2022:	80 81       	ld	r24, Z
    2024:	8f 7d       	andi	r24, 0xDF	; 223
    2026:	80 83       	st	Z, r24
    2028:	80 81       	ld	r24, Z
    202a:	8f 7d       	andi	r24, 0xDF	; 223
    202c:	80 83       	st	Z, r24
    202e:	e0 e2       	ldi	r30, 0x20	; 32
    2030:	f3 e2       	ldi	r31, 0x23	; 35
    2032:	02 e0       	ldi	r16, 0x02	; 2
    2034:	05 93       	las	Z, r16
    2036:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udd_sram+0x26>
    203a:	10 92 23 23 	sts	0x2323, r1	; 0x802323 <udd_sram+0x27>
    203e:	00 e2       	ldi	r16, 0x20	; 32
    2040:	06 93       	lac	Z, r16
    2042:	00 e4       	ldi	r16, 0x40	; 64
    2044:	06 93       	lac	Z, r16
    2046:	e8 e1       	ldi	r30, 0x18	; 24
    2048:	f3 e2       	ldi	r31, 0x23	; 35
    204a:	00 e2       	ldi	r16, 0x20	; 32
    204c:	06 93       	lac	Z, r16
    204e:	00 e4       	ldi	r16, 0x40	; 64
    2050:	06 93       	lac	Z, r16
    2052:	ea eb       	ldi	r30, 0xBA	; 186
    2054:	f5 e2       	ldi	r31, 0x25	; 37
    2056:	14 86       	std	Z+12, r1	; 0x0c
    2058:	15 86       	std	Z+13, r1	; 0x0d
    205a:	16 86       	std	Z+14, r1	; 0x0e
    205c:	17 86       	std	Z+15, r1	; 0x0f
    205e:	12 86       	std	Z+10, r1	; 0x0a
    2060:	13 86       	std	Z+11, r1	; 0x0b
    2062:	10 92 f9 22 	sts	0x22F9, r1	; 0x8022f9 <udd_ep_control_state>
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret

0000206a <udd_ctrl_stall_data>:
    206a:	0f 93       	push	r16
    206c:	85 e0       	ldi	r24, 0x05	; 5
    206e:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    2072:	e1 e2       	ldi	r30, 0x21	; 33
    2074:	f3 e2       	ldi	r31, 0x23	; 35
    2076:	04 e0       	ldi	r16, 0x04	; 4
    2078:	05 93       	las	Z, r16
    207a:	e9 e1       	ldi	r30, 0x19	; 25
    207c:	f3 e2       	ldi	r31, 0x23	; 35
    207e:	04 e0       	ldi	r16, 0x04	; 4
    2080:	05 93       	las	Z, r16
    2082:	0f 91       	pop	r16
    2084:	08 95       	ret

00002086 <udd_ctrl_send_zlp_in>:
    2086:	0f 93       	push	r16
    2088:	83 e0       	ldi	r24, 0x03	; 3
    208a:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    208e:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udd_sram+0x26>
    2092:	10 92 23 23 	sts	0x2323, r1	; 0x802323 <udd_sram+0x27>
    2096:	e0 e2       	ldi	r30, 0x20	; 32
    2098:	f3 e2       	ldi	r31, 0x23	; 35
    209a:	02 e0       	ldi	r16, 0x02	; 2
    209c:	06 93       	lac	Z, r16
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <udd_ctrl_endofrequest>:
    20a2:	e0 91 c6 25 	lds	r30, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0xc>
    20a6:	f0 91 c7 25 	lds	r31, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0xd>
    20aa:	30 97       	sbiw	r30, 0x00	; 0
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <udd_ctrl_endofrequest+0xe>
    20ae:	09 95       	icall
    20b0:	08 95       	ret

000020b2 <udd_ctrl_in_sent>:
    20b2:	0f 93       	push	r16
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    20bc:	83 30       	cpi	r24, 0x03	; 3
    20be:	19 f4       	brne	.+6      	; 0x20c6 <udd_ctrl_in_sent+0x14>
    20c0:	f0 df       	rcall	.-32     	; 0x20a2 <udd_ctrl_endofrequest>
    20c2:	ac df       	rcall	.-168    	; 0x201c <udd_ctrl_init>
    20c4:	5e c0       	rjmp	.+188    	; 0x2182 <udd_ctrl_in_sent+0xd0>
    20c6:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    20ca:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    20ce:	c0 91 c4 25 	lds	r28, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    20d2:	d0 91 c5 25 	lds	r29, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    20d6:	c8 1b       	sub	r28, r24
    20d8:	d9 0b       	sbc	r29, r25
    20da:	71 f5       	brne	.+92     	; 0x2138 <udd_ctrl_in_sent+0x86>
    20dc:	20 91 f7 22 	lds	r18, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    20e0:	30 91 f8 22 	lds	r19, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    20e4:	82 0f       	add	r24, r18
    20e6:	93 1f       	adc	r25, r19
    20e8:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    20ec:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    20f0:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    20f4:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    20f8:	82 17       	cp	r24, r18
    20fa:	93 07       	cpc	r25, r19
    20fc:	21 f0       	breq	.+8      	; 0x2106 <udd_ctrl_in_sent+0x54>
    20fe:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b_shortpacket.5259>
    2102:	88 23       	and	r24, r24
    2104:	41 f0       	breq	.+16     	; 0x2116 <udd_ctrl_in_sent+0x64>
    2106:	84 e0       	ldi	r24, 0x04	; 4
    2108:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    210c:	e8 e1       	ldi	r30, 0x18	; 24
    210e:	f3 e2       	ldi	r31, 0x23	; 35
    2110:	02 e0       	ldi	r16, 0x02	; 2
    2112:	06 93       	lac	Z, r16
    2114:	36 c0       	rjmp	.+108    	; 0x2182 <udd_ctrl_in_sent+0xd0>
    2116:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0xe>
    211a:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0xf>
    211e:	30 97       	sbiw	r30, 0x00	; 0
    2120:	99 f0       	breq	.+38     	; 0x2148 <udd_ctrl_in_sent+0x96>
    2122:	09 95       	icall
    2124:	88 23       	and	r24, r24
    2126:	81 f0       	breq	.+32     	; 0x2148 <udd_ctrl_in_sent+0x96>
    2128:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    212c:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2130:	c0 91 c4 25 	lds	r28, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2134:	d0 91 c5 25 	lds	r29, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2138:	c0 34       	cpi	r28, 0x40	; 64
    213a:	d1 05       	cpc	r29, r1
    213c:	28 f0       	brcs	.+10     	; 0x2148 <udd_ctrl_in_sent+0x96>
    213e:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b_shortpacket.5259>
    2142:	c0 e4       	ldi	r28, 0x40	; 64
    2144:	d0 e0       	ldi	r29, 0x00	; 0
    2146:	03 c0       	rjmp	.+6      	; 0x214e <udd_ctrl_in_sent+0x9c>
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <b_shortpacket.5259>
    214e:	ec ef       	ldi	r30, 0xFC	; 252
    2150:	f2 e2       	ldi	r31, 0x22	; 34
    2152:	c6 a3       	std	Z+38, r28	; 0x26
    2154:	d7 a3       	std	Z+39, r29	; 0x27
    2156:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    215a:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    215e:	20 91 c2 25 	lds	r18, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    2162:	30 91 c3 25 	lds	r19, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    2166:	28 0f       	add	r18, r24
    2168:	39 1f       	adc	r19, r25
    216a:	20 a7       	std	Z+40, r18	; 0x28
    216c:	31 a7       	std	Z+41, r19	; 0x29
    216e:	c8 0f       	add	r28, r24
    2170:	d9 1f       	adc	r29, r25
    2172:	c0 93 f5 22 	sts	0x22F5, r28	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2176:	d0 93 f6 22 	sts	0x22F6, r29	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    217a:	e0 e2       	ldi	r30, 0x20	; 32
    217c:	f3 e2       	ldi	r31, 0x23	; 35
    217e:	02 e0       	ldi	r16, 0x02	; 2
    2180:	06 93       	lac	Z, r16
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	0f 91       	pop	r16
    2188:	08 95       	ret

0000218a <udd_ep_get_size>:
    218a:	fc 01       	movw	r30, r24
    218c:	81 81       	ldd	r24, Z+1	; 0x01
    218e:	e8 2f       	mov	r30, r24
    2190:	e7 70       	andi	r30, 0x07	; 7
    2192:	8e 2f       	mov	r24, r30
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	fc 01       	movw	r30, r24
    2198:	31 97       	sbiw	r30, 0x01	; 1
    219a:	e7 30       	cpi	r30, 0x07	; 7
    219c:	f1 05       	cpc	r31, r1
    219e:	c0 f4       	brcc	.+48     	; 0x21d0 <udd_ep_get_size+0x46>
    21a0:	ea 5e       	subi	r30, 0xEA	; 234
    21a2:	fe 4f       	sbci	r31, 0xFE	; 254
    21a4:	a2 c6       	rjmp	.+3396   	; 0x2eea <__tablejump2__>
    21a6:	80 e1       	ldi	r24, 0x10	; 16
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	08 95       	ret
    21ac:	80 e2       	ldi	r24, 0x20	; 32
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	08 95       	ret
    21b2:	80 e4       	ldi	r24, 0x40	; 64
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	08 95       	ret
    21b8:	80 e8       	ldi	r24, 0x80	; 128
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	08 95       	ret
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	08 95       	ret
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	92 e0       	ldi	r25, 0x02	; 2
    21c8:	08 95       	ret
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	93 e0       	ldi	r25, 0x03	; 3
    21ce:	08 95       	ret
    21d0:	88 e0       	ldi	r24, 0x08	; 8
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	08 95       	ret

000021d6 <udd_ep_get_job>:
    21d6:	28 2f       	mov	r18, r24
    21d8:	2f 70       	andi	r18, 0x0F	; 15
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	22 0f       	add	r18, r18
    21de:	33 1f       	adc	r19, r19
    21e0:	08 2e       	mov	r0, r24
    21e2:	00 0c       	add	r0, r0
    21e4:	99 0b       	sbc	r25, r25
    21e6:	88 27       	eor	r24, r24
    21e8:	99 0f       	add	r25, r25
    21ea:	88 1f       	adc	r24, r24
    21ec:	99 27       	eor	r25, r25
    21ee:	82 0f       	add	r24, r18
    21f0:	93 1f       	adc	r25, r19
    21f2:	02 97       	sbiw	r24, 0x02	; 2
    21f4:	9c 01       	movw	r18, r24
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	22 0f       	add	r18, r18
    21fc:	33 1f       	adc	r19, r19
    21fe:	22 0f       	add	r18, r18
    2200:	33 1f       	adc	r19, r19
    2202:	82 0f       	add	r24, r18
    2204:	93 1f       	adc	r25, r19
    2206:	87 5b       	subi	r24, 0xB7	; 183
    2208:	9d 4d       	sbci	r25, 0xDD	; 221
    220a:	08 95       	ret

0000220c <udd_ctrl_interrupt_tc_setup>:
    220c:	0f 93       	push	r16
    220e:	cf 93       	push	r28
    2210:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2214:	80 ff       	sbrs	r24, 0
    2216:	62 c0       	rjmp	.+196    	; 0x22dc <udd_ctrl_interrupt_tc_setup+0xd0>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    221e:	e8 e1       	ldi	r30, 0x18	; 24
    2220:	f3 e2       	ldi	r31, 0x23	; 35
    2222:	00 e8       	ldi	r16, 0x80	; 128
    2224:	06 93       	lac	Z, r16
    2226:	e0 e2       	ldi	r30, 0x20	; 32
    2228:	f3 e2       	ldi	r31, 0x23	; 35
    222a:	00 e8       	ldi	r16, 0x80	; 128
    222c:	06 93       	lac	Z, r16
    222e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2232:	e8 e1       	ldi	r30, 0x18	; 24
    2234:	f3 e2       	ldi	r31, 0x23	; 35
    2236:	00 e1       	ldi	r16, 0x10	; 16
    2238:	06 93       	lac	Z, r16
    223a:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    223e:	88 23       	and	r24, r24
    2240:	29 f0       	breq	.+10     	; 0x224c <udd_ctrl_interrupt_tc_setup+0x40>
    2242:	83 50       	subi	r24, 0x03	; 3
    2244:	82 30       	cpi	r24, 0x02	; 2
    2246:	08 f4       	brcc	.+2      	; 0x224a <udd_ctrl_interrupt_tc_setup+0x3e>
    2248:	2c df       	rcall	.-424    	; 0x20a2 <udd_ctrl_endofrequest>
    224a:	e8 de       	rcall	.-560    	; 0x201c <udd_ctrl_init>
    224c:	80 91 1a 23 	lds	r24, 0x231A	; 0x80231a <udd_sram+0x1e>
    2250:	90 91 1b 23 	lds	r25, 0x231B	; 0x80231b <udd_sram+0x1f>
    2254:	08 97       	sbiw	r24, 0x08	; 8
    2256:	09 f0       	breq	.+2      	; 0x225a <udd_ctrl_interrupt_tc_setup+0x4e>
    2258:	43 c0       	rjmp	.+134    	; 0x22e0 <udd_ctrl_interrupt_tc_setup+0xd4>
    225a:	88 e0       	ldi	r24, 0x08	; 8
    225c:	e5 eb       	ldi	r30, 0xB5	; 181
    225e:	f2 e2       	ldi	r31, 0x22	; 34
    2260:	aa eb       	ldi	r26, 0xBA	; 186
    2262:	b5 e2       	ldi	r27, 0x25	; 37
    2264:	01 90       	ld	r0, Z+
    2266:	0d 92       	st	X+, r0
    2268:	8a 95       	dec	r24
    226a:	e1 f7       	brne	.-8      	; 0x2264 <udd_ctrl_interrupt_tc_setup+0x58>
    226c:	e8 ec       	ldi	r30, 0xC8	; 200
    226e:	f4 e0       	ldi	r31, 0x04	; 4
    2270:	80 81       	ld	r24, Z
    2272:	80 62       	ori	r24, 0x20	; 32
    2274:	80 83       	st	Z, r24
    2276:	80 81       	ld	r24, Z
    2278:	80 62       	ori	r24, 0x20	; 32
    227a:	80 83       	st	Z, r24
    227c:	2a db       	rcall	.-2476   	; 0x18d2 <udc_process_setup>
    227e:	c8 2f       	mov	r28, r24
    2280:	81 11       	cpse	r24, r1
    2282:	03 c0       	rjmp	.+6      	; 0x228a <udd_ctrl_interrupt_tc_setup+0x7e>
    2284:	f2 de       	rcall	.-540    	; 0x206a <udd_ctrl_stall_data>
    2286:	c1 e0       	ldi	r28, 0x01	; 1
    2288:	2c c0       	rjmp	.+88     	; 0x22e2 <udd_ctrl_interrupt_tc_setup+0xd6>
    228a:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    228e:	88 23       	and	r24, r24
    2290:	6c f4       	brge	.+26     	; 0x22ac <udd_ctrl_interrupt_tc_setup+0xa0>
    2292:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2296:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    229a:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    229e:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    22a2:	82 e0       	ldi	r24, 0x02	; 2
    22a4:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    22a8:	04 df       	rcall	.-504    	; 0x20b2 <udd_ctrl_in_sent>
    22aa:	1b c0       	rjmp	.+54     	; 0x22e2 <udd_ctrl_interrupt_tc_setup+0xd6>
    22ac:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    22b0:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    22b4:	89 2b       	or	r24, r25
    22b6:	11 f4       	brne	.+4      	; 0x22bc <udd_ctrl_interrupt_tc_setup+0xb0>
    22b8:	e6 de       	rcall	.-564    	; 0x2086 <udd_ctrl_send_zlp_in>
    22ba:	13 c0       	rjmp	.+38     	; 0x22e2 <udd_ctrl_interrupt_tc_setup+0xd6>
    22bc:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    22c0:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    22c4:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    22c8:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    22d2:	e8 e1       	ldi	r30, 0x18	; 24
    22d4:	f3 e2       	ldi	r31, 0x23	; 35
    22d6:	02 e0       	ldi	r16, 0x02	; 2
    22d8:	06 93       	lac	Z, r16
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <udd_ctrl_interrupt_tc_setup+0xd6>
    22dc:	c0 e0       	ldi	r28, 0x00	; 0
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <udd_ctrl_interrupt_tc_setup+0xd6>
    22e0:	c1 e0       	ldi	r28, 0x01	; 1
    22e2:	8c 2f       	mov	r24, r28
    22e4:	cf 91       	pop	r28
    22e6:	0f 91       	pop	r16
    22e8:	08 95       	ret

000022ea <udd_ep_trans_complet>:
    22ea:	8f 92       	push	r8
    22ec:	9f 92       	push	r9
    22ee:	af 92       	push	r10
    22f0:	bf 92       	push	r11
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	d8 2e       	mov	r13, r24
    2302:	69 df       	rcall	.-302    	; 0x21d6 <udd_ep_get_job>
    2304:	8c 01       	movw	r16, r24
    2306:	bd 2c       	mov	r11, r13
    2308:	bb 1c       	adc	r11, r11
    230a:	bb 24       	eor	r11, r11
    230c:	bb 1c       	adc	r11, r11
    230e:	cd 2d       	mov	r28, r13
    2310:	cf 70       	andi	r28, 0x0F	; 15
    2312:	d0 e0       	ldi	r29, 0x00	; 0
    2314:	cc 0f       	add	r28, r28
    2316:	dd 1f       	adc	r29, r29
    2318:	cb 0d       	add	r28, r11
    231a:	d1 1d       	adc	r29, r1
    231c:	ce 01       	movw	r24, r28
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	9c 01       	movw	r18, r24
    232c:	28 5e       	subi	r18, 0xE8	; 232
    232e:	3c 4d       	sbci	r19, 0xDC	; 220
    2330:	79 01       	movw	r14, r18
    2332:	c9 01       	movw	r24, r18
    2334:	2a df       	rcall	.-428    	; 0x218a <udd_ep_get_size>
    2336:	4c 01       	movw	r8, r24
    2338:	bb 20       	and	r11, r11
    233a:	09 f4       	brne	.+2      	; 0x233e <udd_ep_trans_complet+0x54>
    233c:	79 c0       	rjmp	.+242    	; 0x2430 <udd_ep_trans_complet+0x146>
    233e:	fe 01       	movw	r30, r28
    2340:	ee 0f       	add	r30, r30
    2342:	ff 1f       	adc	r31, r31
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31
    234c:	e4 50       	subi	r30, 0x04	; 4
    234e:	fd 4d       	sbci	r31, 0xDD	; 221
    2350:	22 a1       	ldd	r18, Z+34	; 0x22
    2352:	33 a1       	ldd	r19, Z+35	; 0x23
    2354:	d8 01       	movw	r26, r16
    2356:	15 96       	adiw	r26, 0x05	; 5
    2358:	8d 91       	ld	r24, X+
    235a:	9c 91       	ld	r25, X
    235c:	16 97       	sbiw	r26, 0x06	; 6
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	15 96       	adiw	r26, 0x05	; 5
    2364:	8d 93       	st	X+, r24
    2366:	9c 93       	st	X, r25
    2368:	16 97       	sbiw	r26, 0x06	; 6
    236a:	13 96       	adiw	r26, 0x03	; 3
    236c:	2d 91       	ld	r18, X+
    236e:	3c 91       	ld	r19, X
    2370:	14 97       	sbiw	r26, 0x04	; 4
    2372:	82 17       	cp	r24, r18
    2374:	93 07       	cpc	r25, r19
    2376:	09 f4       	brne	.+2      	; 0x237a <udd_ep_trans_complet+0x90>
    2378:	45 c0       	rjmp	.+138    	; 0x2404 <udd_ep_trans_complet+0x11a>
    237a:	28 1b       	sub	r18, r24
    237c:	39 0b       	sbc	r19, r25
    237e:	21 15       	cp	r18, r1
    2380:	b4 e0       	ldi	r27, 0x04	; 4
    2382:	3b 07       	cpc	r19, r27
    2384:	38 f0       	brcs	.+14     	; 0x2394 <udd_ep_trans_complet+0xaa>
    2386:	2f ef       	ldi	r18, 0xFF	; 255
    2388:	33 e0       	ldi	r19, 0x03	; 3
    238a:	c9 01       	movw	r24, r18
    238c:	b4 01       	movw	r22, r8
    238e:	86 d5       	rcall	.+2828   	; 0x2e9c <__udivmodhi4>
    2390:	28 1b       	sub	r18, r24
    2392:	39 0b       	sbc	r19, r25
    2394:	f8 01       	movw	r30, r16
    2396:	80 81       	ld	r24, Z
    2398:	81 ff       	sbrs	r24, 1
    239a:	09 c0       	rjmp	.+18     	; 0x23ae <udd_ep_trans_complet+0xc4>
    239c:	c9 01       	movw	r24, r18
    239e:	b4 01       	movw	r22, r8
    23a0:	7d d5       	rcall	.+2810   	; 0x2e9c <__udivmodhi4>
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	89 2b       	or	r24, r25
    23a6:	09 f0       	breq	.+2      	; 0x23aa <udd_ep_trans_complet+0xc0>
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	84 2f       	mov	r24, r20
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <udd_ep_trans_complet+0xc6>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	d8 01       	movw	r26, r16
    23b2:	9c 91       	ld	r25, X
    23b4:	80 fb       	bst	r24, 0
    23b6:	91 f9       	bld	r25, 1
    23b8:	9c 93       	st	X, r25
    23ba:	fe 01       	movw	r30, r28
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ee 0f       	add	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	e4 50       	subi	r30, 0x04	; 4
    23ca:	fd 4d       	sbci	r31, 0xDD	; 221
    23cc:	12 a2       	std	Z+34, r1	; 0x22
    23ce:	13 a2       	std	Z+35, r1	; 0x23
    23d0:	26 8f       	std	Z+30, r18	; 0x1e
    23d2:	37 8f       	std	Z+31, r19	; 0x1f
    23d4:	11 96       	adiw	r26, 0x01	; 1
    23d6:	2d 91       	ld	r18, X+
    23d8:	3c 91       	ld	r19, X
    23da:	12 97       	sbiw	r26, 0x02	; 2
    23dc:	15 96       	adiw	r26, 0x05	; 5
    23de:	8d 91       	ld	r24, X+
    23e0:	9c 91       	ld	r25, X
    23e2:	16 97       	sbiw	r26, 0x06	; 6
    23e4:	82 0f       	add	r24, r18
    23e6:	93 1f       	adc	r25, r19
    23e8:	cc 0f       	add	r28, r28
    23ea:	dd 1f       	adc	r29, r29
    23ec:	cc 0f       	add	r28, r28
    23ee:	dd 1f       	adc	r29, r29
    23f0:	cc 0f       	add	r28, r28
    23f2:	dd 1f       	adc	r29, r29
    23f4:	c4 5e       	subi	r28, 0xE4	; 228
    23f6:	dc 4d       	sbci	r29, 0xDC	; 220
    23f8:	88 83       	st	Y, r24
    23fa:	99 83       	std	Y+1, r25	; 0x01
    23fc:	f7 01       	movw	r30, r14
    23fe:	02 e0       	ldi	r16, 0x02	; 2
    2400:	06 93       	lac	Z, r16
    2402:	e4 c0       	rjmp	.+456    	; 0x25cc <udd_ep_trans_complet+0x2e2>
    2404:	d8 01       	movw	r26, r16
    2406:	8c 91       	ld	r24, X
    2408:	81 ff       	sbrs	r24, 1
    240a:	cd c0       	rjmp	.+410    	; 0x25a6 <udd_ep_trans_complet+0x2bc>
    240c:	8d 7f       	andi	r24, 0xFD	; 253
    240e:	8c 93       	st	X, r24
    2410:	cc 0f       	add	r28, r28
    2412:	dd 1f       	adc	r29, r29
    2414:	cc 0f       	add	r28, r28
    2416:	dd 1f       	adc	r29, r29
    2418:	cc 0f       	add	r28, r28
    241a:	dd 1f       	adc	r29, r29
    241c:	c4 50       	subi	r28, 0x04	; 4
    241e:	dd 4d       	sbci	r29, 0xDD	; 221
    2420:	1a a2       	std	Y+34, r1	; 0x22
    2422:	1b a2       	std	Y+35, r1	; 0x23
    2424:	1e 8e       	std	Y+30, r1	; 0x1e
    2426:	1f 8e       	std	Y+31, r1	; 0x1f
    2428:	f7 01       	movw	r30, r14
    242a:	02 e0       	ldi	r16, 0x02	; 2
    242c:	06 93       	lac	Z, r16
    242e:	ce c0       	rjmp	.+412    	; 0x25cc <udd_ep_trans_complet+0x2e2>
    2430:	fe 01       	movw	r30, r28
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	e4 50       	subi	r30, 0x04	; 4
    2440:	fd 4d       	sbci	r31, 0xDD	; 221
    2442:	a6 8c       	ldd	r10, Z+30	; 0x1e
    2444:	b7 8c       	ldd	r11, Z+31	; 0x1f
    2446:	d8 01       	movw	r26, r16
    2448:	8c 91       	ld	r24, X
    244a:	82 ff       	sbrs	r24, 2
    244c:	19 c0       	rjmp	.+50     	; 0x2480 <udd_ep_trans_complet+0x196>
    244e:	11 96       	adiw	r26, 0x01	; 1
    2450:	ed 91       	ld	r30, X+
    2452:	fc 91       	ld	r31, X
    2454:	12 97       	sbiw	r26, 0x02	; 2
    2456:	15 96       	adiw	r26, 0x05	; 5
    2458:	2d 91       	ld	r18, X+
    245a:	3c 91       	ld	r19, X
    245c:	16 97       	sbiw	r26, 0x06	; 6
    245e:	13 96       	adiw	r26, 0x03	; 3
    2460:	8d 91       	ld	r24, X+
    2462:	9c 91       	ld	r25, X
    2464:	14 97       	sbiw	r26, 0x04	; 4
    2466:	b4 01       	movw	r22, r8
    2468:	19 d5       	rcall	.+2610   	; 0x2e9c <__udivmodhi4>
    246a:	b0 e4       	ldi	r27, 0x40	; 64
    246c:	db 9e       	mul	r13, r27
    246e:	b0 01       	movw	r22, r0
    2470:	11 24       	eor	r1, r1
    2472:	67 57       	subi	r22, 0x77	; 119
    2474:	7f 4d       	sbci	r23, 0xDF	; 223
    2476:	ac 01       	movw	r20, r24
    2478:	cf 01       	movw	r24, r30
    247a:	82 0f       	add	r24, r18
    247c:	93 1f       	adc	r25, r19
    247e:	3b d5       	rcall	.+2678   	; 0x2ef6 <memcpy>
    2480:	f8 01       	movw	r30, r16
    2482:	25 81       	ldd	r18, Z+5	; 0x05
    2484:	36 81       	ldd	r19, Z+6	; 0x06
    2486:	2a 0d       	add	r18, r10
    2488:	3b 1d       	adc	r19, r11
    248a:	25 83       	std	Z+5, r18	; 0x05
    248c:	36 83       	std	Z+6, r19	; 0x06
    248e:	83 81       	ldd	r24, Z+3	; 0x03
    2490:	94 81       	ldd	r25, Z+4	; 0x04
    2492:	82 17       	cp	r24, r18
    2494:	93 07       	cpc	r25, r19
    2496:	68 f4       	brcc	.+26     	; 0x24b2 <udd_ep_trans_complet+0x1c8>
    2498:	85 83       	std	Z+5, r24	; 0x05
    249a:	96 83       	std	Z+6, r25	; 0x06
    249c:	cc 0f       	add	r28, r28
    249e:	dd 1f       	adc	r29, r29
    24a0:	cc 0f       	add	r28, r28
    24a2:	dd 1f       	adc	r29, r29
    24a4:	cc 0f       	add	r28, r28
    24a6:	dd 1f       	adc	r29, r29
    24a8:	c4 50       	subi	r28, 0x04	; 4
    24aa:	dd 4d       	sbci	r29, 0xDD	; 221
    24ac:	8a a1       	ldd	r24, Y+34	; 0x22
    24ae:	9b a1       	ldd	r25, Y+35	; 0x23
    24b0:	7a c0       	rjmp	.+244    	; 0x25a6 <udd_ep_trans_complet+0x2bc>
    24b2:	fe 01       	movw	r30, r28
    24b4:	ee 0f       	add	r30, r30
    24b6:	ff 1f       	adc	r31, r31
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	e4 50       	subi	r30, 0x04	; 4
    24c2:	fd 4d       	sbci	r31, 0xDD	; 221
    24c4:	42 a1       	ldd	r20, Z+34	; 0x22
    24c6:	53 a1       	ldd	r21, Z+35	; 0x23
    24c8:	4a 15       	cp	r20, r10
    24ca:	5b 05       	cpc	r21, r11
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <udd_ep_trans_complet+0x1e6>
    24ce:	6b c0       	rjmp	.+214    	; 0x25a6 <udd_ep_trans_complet+0x2bc>
    24d0:	28 17       	cp	r18, r24
    24d2:	39 07       	cpc	r19, r25
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <udd_ep_trans_complet+0x1ee>
    24d6:	67 c0       	rjmp	.+206    	; 0x25a6 <udd_ep_trans_complet+0x2bc>
    24d8:	ac 01       	movw	r20, r24
    24da:	42 1b       	sub	r20, r18
    24dc:	53 0b       	sbc	r21, r19
    24de:	9a 01       	movw	r18, r20
    24e0:	21 15       	cp	r18, r1
    24e2:	54 e0       	ldi	r21, 0x04	; 4
    24e4:	35 07       	cpc	r19, r21
    24e6:	50 f0       	brcs	.+20     	; 0x24fc <udd_ep_trans_complet+0x212>
    24e8:	2f ef       	ldi	r18, 0xFF	; 255
    24ea:	33 e0       	ldi	r19, 0x03	; 3
    24ec:	c9 01       	movw	r24, r18
    24ee:	b4 01       	movw	r22, r8
    24f0:	d5 d4       	rcall	.+2474   	; 0x2e9c <__udivmodhi4>
    24f2:	d9 01       	movw	r26, r18
    24f4:	a8 1b       	sub	r26, r24
    24f6:	b9 0b       	sbc	r27, r25
    24f8:	cd 01       	movw	r24, r26
    24fa:	07 c0       	rjmp	.+14     	; 0x250a <udd_ep_trans_complet+0x220>
    24fc:	c9 01       	movw	r24, r18
    24fe:	b4 01       	movw	r22, r8
    2500:	cd d4       	rcall	.+2458   	; 0x2e9c <__udivmodhi4>
    2502:	f9 01       	movw	r30, r18
    2504:	e8 1b       	sub	r30, r24
    2506:	f9 0b       	sbc	r31, r25
    2508:	cf 01       	movw	r24, r30
    250a:	fe 01       	movw	r30, r28
    250c:	ee 0f       	add	r30, r30
    250e:	ff 1f       	adc	r31, r31
    2510:	ee 0f       	add	r30, r30
    2512:	ff 1f       	adc	r31, r31
    2514:	ee 0f       	add	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	e4 50       	subi	r30, 0x04	; 4
    251a:	fd 4d       	sbci	r31, 0xDD	; 221
    251c:	16 8e       	std	Z+30, r1	; 0x1e
    251e:	17 8e       	std	Z+31, r1	; 0x1f
    2520:	88 15       	cp	r24, r8
    2522:	99 05       	cpc	r25, r9
    2524:	00 f5       	brcc	.+64     	; 0x2566 <udd_ep_trans_complet+0x27c>
    2526:	d8 01       	movw	r26, r16
    2528:	8c 91       	ld	r24, X
    252a:	84 60       	ori	r24, 0x04	; 4
    252c:	8c 93       	st	X, r24
    252e:	b0 e4       	ldi	r27, 0x40	; 64
    2530:	db 9e       	mul	r13, r27
    2532:	c0 01       	movw	r24, r0
    2534:	11 24       	eor	r1, r1
    2536:	87 57       	subi	r24, 0x77	; 119
    2538:	9f 4d       	sbci	r25, 0xDF	; 223
    253a:	fe 01       	movw	r30, r28
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	ee 0f       	add	r30, r30
    2542:	ff 1f       	adc	r31, r31
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	e4 5e       	subi	r30, 0xE4	; 228
    254a:	fc 4d       	sbci	r31, 0xDC	; 220
    254c:	80 83       	st	Z, r24
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	cc 0f       	add	r28, r28
    2552:	dd 1f       	adc	r29, r29
    2554:	cc 0f       	add	r28, r28
    2556:	dd 1f       	adc	r29, r29
    2558:	cc 0f       	add	r28, r28
    255a:	dd 1f       	adc	r29, r29
    255c:	c4 50       	subi	r28, 0x04	; 4
    255e:	dd 4d       	sbci	r29, 0xDD	; 221
    2560:	8a a2       	std	Y+34, r8	; 0x22
    2562:	9b a2       	std	Y+35, r9	; 0x23
    2564:	1c c0       	rjmp	.+56     	; 0x259e <udd_ep_trans_complet+0x2b4>
    2566:	f8 01       	movw	r30, r16
    2568:	41 81       	ldd	r20, Z+1	; 0x01
    256a:	52 81       	ldd	r21, Z+2	; 0x02
    256c:	25 81       	ldd	r18, Z+5	; 0x05
    256e:	36 81       	ldd	r19, Z+6	; 0x06
    2570:	24 0f       	add	r18, r20
    2572:	35 1f       	adc	r19, r21
    2574:	fe 01       	movw	r30, r28
    2576:	ee 0f       	add	r30, r30
    2578:	ff 1f       	adc	r31, r31
    257a:	ee 0f       	add	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	ee 0f       	add	r30, r30
    2580:	ff 1f       	adc	r31, r31
    2582:	e4 5e       	subi	r30, 0xE4	; 228
    2584:	fc 4d       	sbci	r31, 0xDC	; 220
    2586:	20 83       	st	Z, r18
    2588:	31 83       	std	Z+1, r19	; 0x01
    258a:	cc 0f       	add	r28, r28
    258c:	dd 1f       	adc	r29, r29
    258e:	cc 0f       	add	r28, r28
    2590:	dd 1f       	adc	r29, r29
    2592:	cc 0f       	add	r28, r28
    2594:	dd 1f       	adc	r29, r29
    2596:	c4 50       	subi	r28, 0x04	; 4
    2598:	dd 4d       	sbci	r29, 0xDD	; 221
    259a:	8a a3       	std	Y+34, r24	; 0x22
    259c:	9b a3       	std	Y+35, r25	; 0x23
    259e:	f7 01       	movw	r30, r14
    25a0:	02 e0       	ldi	r16, 0x02	; 2
    25a2:	06 93       	lac	Z, r16
    25a4:	13 c0       	rjmp	.+38     	; 0x25cc <udd_ep_trans_complet+0x2e2>
    25a6:	d8 01       	movw	r26, r16
    25a8:	8c 91       	ld	r24, X
    25aa:	80 ff       	sbrs	r24, 0
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <udd_ep_trans_complet+0x2e2>
    25ae:	8e 7f       	andi	r24, 0xFE	; 254
    25b0:	8c 93       	st	X, r24
    25b2:	17 96       	adiw	r26, 0x07	; 7
    25b4:	ed 91       	ld	r30, X+
    25b6:	fc 91       	ld	r31, X
    25b8:	18 97       	sbiw	r26, 0x08	; 8
    25ba:	30 97       	sbiw	r30, 0x00	; 0
    25bc:	39 f0       	breq	.+14     	; 0x25cc <udd_ep_trans_complet+0x2e2>
    25be:	15 96       	adiw	r26, 0x05	; 5
    25c0:	6d 91       	ld	r22, X+
    25c2:	7c 91       	ld	r23, X
    25c4:	16 97       	sbiw	r26, 0x06	; 6
    25c6:	4d 2d       	mov	r20, r13
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	09 95       	icall
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	1f 91       	pop	r17
    25d2:	0f 91       	pop	r16
    25d4:	ff 90       	pop	r15
    25d6:	ef 90       	pop	r14
    25d8:	df 90       	pop	r13
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	9f 90       	pop	r9
    25e0:	8f 90       	pop	r8
    25e2:	08 95       	ret

000025e4 <udd_attach>:
    25e4:	cf 93       	push	r28
    25e6:	cf b7       	in	r28, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	ee dc       	rcall	.-1572   	; 0x1fca <udd_sleep_mode>
    25ee:	ea ec       	ldi	r30, 0xCA	; 202
    25f0:	f4 e0       	ldi	r31, 0x04	; 4
    25f2:	80 e4       	ldi	r24, 0x40	; 64
    25f4:	80 83       	st	Z, r24
    25f6:	80 e2       	ldi	r24, 0x20	; 32
    25f8:	80 83       	st	Z, r24
    25fa:	e1 ec       	ldi	r30, 0xC1	; 193
    25fc:	f4 e0       	ldi	r31, 0x04	; 4
    25fe:	80 81       	ld	r24, Z
    2600:	81 60       	ori	r24, 0x01	; 1
    2602:	80 83       	st	Z, r24
    2604:	a9 ec       	ldi	r26, 0xC9	; 201
    2606:	b4 e0       	ldi	r27, 0x04	; 4
    2608:	8c 91       	ld	r24, X
    260a:	82 60       	ori	r24, 0x02	; 2
    260c:	8c 93       	st	X, r24
    260e:	e8 ec       	ldi	r30, 0xC8	; 200
    2610:	f4 e0       	ldi	r31, 0x04	; 4
    2612:	80 81       	ld	r24, Z
    2614:	80 64       	ori	r24, 0x40	; 64
    2616:	80 83       	st	Z, r24
    2618:	8c 91       	ld	r24, X
    261a:	81 60       	ori	r24, 0x01	; 1
    261c:	8c 93       	st	X, r24
    261e:	80 81       	ld	r24, Z
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	80 83       	st	Z, r24
    2624:	cf bf       	out	0x3f, r28	; 63
    2626:	cf 91       	pop	r28
    2628:	08 95       	ret

0000262a <udd_enable>:
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	c0 e6       	ldi	r28, 0x60	; 96
    2630:	d0 e0       	ldi	r29, 0x00	; 0
    2632:	18 82       	st	Y, r1
    2634:	80 e3       	ldi	r24, 0x30	; 48
    2636:	0e 94 b6 0a 	call	0x156c	; 0x156c <sysclk_enable_usb>
    263a:	e0 ec       	ldi	r30, 0xC0	; 192
    263c:	f4 e0       	ldi	r31, 0x04	; 4
    263e:	80 81       	ld	r24, Z
    2640:	80 64       	ori	r24, 0x40	; 64
    2642:	80 83       	st	Z, r24
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	88 83       	st	Y, r24
    2648:	cf b7       	in	r28, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	fc 01       	movw	r30, r24
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	ee 0f       	add	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	e4 50       	subi	r30, 0x04	; 4
    2660:	fd 4d       	sbci	r31, 0xDD	; 221
    2662:	15 8e       	std	Z+29, r1	; 0x1d
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	8e 30       	cpi	r24, 0x0E	; 14
    2668:	91 05       	cpc	r25, r1
    266a:	91 f7       	brne	.-28     	; 0x2650 <udd_enable+0x26>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	fc 01       	movw	r30, r24
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	e8 0f       	add	r30, r24
    2680:	f9 1f       	adc	r31, r25
    2682:	e7 5b       	subi	r30, 0xB7	; 183
    2684:	fd 4d       	sbci	r31, 0xDD	; 221
    2686:	20 81       	ld	r18, Z
    2688:	2e 7f       	andi	r18, 0xFE	; 254
    268a:	20 83       	st	Z, r18
    268c:	01 96       	adiw	r24, 0x01	; 1
    268e:	8c 30       	cpi	r24, 0x0C	; 12
    2690:	91 05       	cpc	r25, r1
    2692:	71 f7       	brne	.-36     	; 0x2670 <udd_enable+0x46>
    2694:	6a e1       	ldi	r22, 0x1A	; 26
    2696:	70 e0       	ldi	r23, 0x00	; 0
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	8d dc       	rcall	.-1766   	; 0x1fb6 <nvm_read_byte>
    269c:	8f 3f       	cpi	r24, 0xFF	; 255
    269e:	19 f0       	breq	.+6      	; 0x26a6 <udd_enable+0x7c>
    26a0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <udd_enable+0x82>
    26a6:	8f e1       	ldi	r24, 0x1F	; 31
    26a8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    26ac:	6b e1       	ldi	r22, 0x1B	; 27
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	81 dc       	rcall	.-1790   	; 0x1fb6 <nvm_read_byte>
    26b4:	8f 3f       	cpi	r24, 0xFF	; 255
    26b6:	19 f0       	breq	.+6      	; 0x26be <udd_enable+0x94>
    26b8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <udd_enable+0x9a>
    26be:	8f e1       	ldi	r24, 0x1F	; 31
    26c0:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    26c4:	e0 ec       	ldi	r30, 0xC0	; 192
    26c6:	f4 e0       	ldi	r31, 0x04	; 4
    26c8:	80 81       	ld	r24, Z
    26ca:	86 60       	ori	r24, 0x06	; 6
    26cc:	80 83       	st	Z, r24
    26ce:	80 81       	ld	r24, Z
    26d0:	80 68       	ori	r24, 0x80	; 128
    26d2:	80 83       	st	Z, r24
    26d4:	80 81       	ld	r24, Z
    26d6:	80 61       	ori	r24, 0x10	; 16
    26d8:	80 83       	st	Z, r24
    26da:	88 e1       	ldi	r24, 0x18	; 24
    26dc:	93 e2       	ldi	r25, 0x23	; 35
    26de:	86 83       	std	Z+6, r24	; 0x06
    26e0:	97 83       	std	Z+7, r25	; 0x07
    26e2:	80 81       	ld	r24, Z
    26e4:	80 62       	ori	r24, 0x20	; 32
    26e6:	80 83       	st	Z, r24
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    26ee:	e8 ec       	ldi	r30, 0xC8	; 200
    26f0:	f4 e0       	ldi	r31, 0x04	; 4
    26f2:	80 81       	ld	r24, Z
    26f4:	82 60       	ori	r24, 0x02	; 2
    26f6:	80 83       	st	Z, r24
    26f8:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <udd_b_idle>
    26fc:	80 91 af 2f 	lds	r24, 0x2FAF	; 0x802faf <sleepmgr_locks+0x5>
    2700:	8f 3f       	cpi	r24, 0xFF	; 255
    2702:	09 f4       	brne	.+2      	; 0x2706 <udd_enable+0xdc>
    2704:	ff cf       	rjmp	.-2      	; 0x2704 <udd_enable+0xda>
    2706:	9f b7       	in	r25, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	ea ea       	ldi	r30, 0xAA	; 170
    270c:	ff e2       	ldi	r31, 0x2F	; 47
    270e:	85 81       	ldd	r24, Z+5	; 0x05
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	85 83       	std	Z+5, r24	; 0x05
    2714:	9f bf       	out	0x3f, r25	; 63
    2716:	66 df       	rcall	.-308    	; 0x25e4 <udd_attach>
    2718:	cf bf       	out	0x3f, r28	; 63
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	08 95       	ret

00002720 <udd_set_address>:
    2720:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2724:	08 95       	ret

00002726 <udd_getaddress>:
    2726:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    272a:	08 95       	ret

0000272c <udd_set_setup_payload>:
    272c:	ea eb       	ldi	r30, 0xBA	; 186
    272e:	f5 e2       	ldi	r31, 0x25	; 37
    2730:	80 87       	std	Z+8, r24	; 0x08
    2732:	91 87       	std	Z+9, r25	; 0x09
    2734:	62 87       	std	Z+10, r22	; 0x0a
    2736:	73 87       	std	Z+11, r23	; 0x0b
    2738:	08 95       	ret

0000273a <udd_ep_alloc>:
    273a:	28 2f       	mov	r18, r24
    273c:	2f 70       	andi	r18, 0x0F	; 15
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	22 0f       	add	r18, r18
    2742:	33 1f       	adc	r19, r19
    2744:	08 2e       	mov	r0, r24
    2746:	00 0c       	add	r0, r0
    2748:	99 0b       	sbc	r25, r25
    274a:	88 27       	eor	r24, r24
    274c:	99 0f       	add	r25, r25
    274e:	88 1f       	adc	r24, r24
    2750:	99 27       	eor	r25, r25
    2752:	82 0f       	add	r24, r18
    2754:	93 1f       	adc	r25, r19
    2756:	fc 01       	movw	r30, r24
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	ee 0f       	add	r30, r30
    275e:	ff 1f       	adc	r31, r31
    2760:	ee 0f       	add	r30, r30
    2762:	ff 1f       	adc	r31, r31
    2764:	e4 50       	subi	r30, 0x04	; 4
    2766:	fd 4d       	sbci	r31, 0xDD	; 221
    2768:	25 8d       	ldd	r18, Z+29	; 0x1d
    276a:	20 7c       	andi	r18, 0xC0	; 192
    276c:	09 f0       	breq	.+2      	; 0x2770 <udd_ep_alloc+0x36>
    276e:	4f c0       	rjmp	.+158    	; 0x280e <udd_ep_alloc+0xd4>
    2770:	63 70       	andi	r22, 0x03	; 3
    2772:	61 30       	cpi	r22, 0x01	; 1
    2774:	11 f0       	breq	.+4      	; 0x277a <udd_ep_alloc+0x40>
    2776:	18 f4       	brcc	.+6      	; 0x277e <udd_ep_alloc+0x44>
    2778:	04 c0       	rjmp	.+8      	; 0x2782 <udd_ep_alloc+0x48>
    277a:	20 ec       	ldi	r18, 0xC0	; 192
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <udd_ep_alloc+0x4a>
    277e:	20 e8       	ldi	r18, 0x80	; 128
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <udd_ep_alloc+0x4a>
    2782:	20 e4       	ldi	r18, 0x40	; 64
    2784:	40 38       	cpi	r20, 0x80	; 128
    2786:	51 05       	cpc	r21, r1
    2788:	e9 f0       	breq	.+58     	; 0x27c4 <udd_ep_alloc+0x8a>
    278a:	50 f4       	brcc	.+20     	; 0x27a0 <udd_ep_alloc+0x66>
    278c:	40 32       	cpi	r20, 0x20	; 32
    278e:	51 05       	cpc	r21, r1
    2790:	a9 f0       	breq	.+42     	; 0x27bc <udd_ep_alloc+0x82>
    2792:	40 34       	cpi	r20, 0x40	; 64
    2794:	51 05       	cpc	r21, r1
    2796:	a1 f0       	breq	.+40     	; 0x27c0 <udd_ep_alloc+0x86>
    2798:	40 31       	cpi	r20, 0x10	; 16
    279a:	51 05       	cpc	r21, r1
    279c:	d9 f4       	brne	.+54     	; 0x27d4 <udd_ep_alloc+0x9a>
    279e:	0c c0       	rjmp	.+24     	; 0x27b8 <udd_ep_alloc+0x7e>
    27a0:	41 15       	cp	r20, r1
    27a2:	32 e0       	ldi	r19, 0x02	; 2
    27a4:	53 07       	cpc	r21, r19
    27a6:	91 f0       	breq	.+36     	; 0x27cc <udd_ep_alloc+0x92>
    27a8:	4f 3f       	cpi	r20, 0xFF	; 255
    27aa:	33 e0       	ldi	r19, 0x03	; 3
    27ac:	53 07       	cpc	r21, r19
    27ae:	81 f0       	breq	.+32     	; 0x27d0 <udd_ep_alloc+0x96>
    27b0:	41 15       	cp	r20, r1
    27b2:	51 40       	sbci	r21, 0x01	; 1
    27b4:	79 f4       	brne	.+30     	; 0x27d4 <udd_ep_alloc+0x9a>
    27b6:	08 c0       	rjmp	.+16     	; 0x27c8 <udd_ep_alloc+0x8e>
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <udd_ep_alloc+0x9c>
    27bc:	42 e0       	ldi	r20, 0x02	; 2
    27be:	0b c0       	rjmp	.+22     	; 0x27d6 <udd_ep_alloc+0x9c>
    27c0:	43 e0       	ldi	r20, 0x03	; 3
    27c2:	09 c0       	rjmp	.+18     	; 0x27d6 <udd_ep_alloc+0x9c>
    27c4:	44 e0       	ldi	r20, 0x04	; 4
    27c6:	07 c0       	rjmp	.+14     	; 0x27d6 <udd_ep_alloc+0x9c>
    27c8:	45 e0       	ldi	r20, 0x05	; 5
    27ca:	05 c0       	rjmp	.+10     	; 0x27d6 <udd_ep_alloc+0x9c>
    27cc:	46 e0       	ldi	r20, 0x06	; 6
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <udd_ep_alloc+0x9c>
    27d0:	47 e0       	ldi	r20, 0x07	; 7
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <udd_ep_alloc+0x9c>
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	fc 01       	movw	r30, r24
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	ee 0f       	add	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	e4 50       	subi	r30, 0x04	; 4
    27e6:	fd 4d       	sbci	r31, 0xDD	; 221
    27e8:	15 8e       	std	Z+29, r1	; 0x1d
    27ea:	36 e0       	ldi	r19, 0x06	; 6
    27ec:	34 8f       	std	Z+28, r19	; 0x1c
    27ee:	24 2b       	or	r18, r20
    27f0:	25 8f       	std	Z+29, r18	; 0x1d
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	fc 01       	movw	r30, r24
    2800:	e4 50       	subi	r30, 0x04	; 4
    2802:	fd 4d       	sbci	r31, 0xDD	; 221
    2804:	85 8d       	ldd	r24, Z+29	; 0x1d
    2806:	80 62       	ori	r24, 0x20	; 32
    2808:	85 8f       	std	Z+29, r24	; 0x1d
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	08 95       	ret
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	08 95       	ret

00002812 <udd_ep_is_halted>:
    2812:	e8 2f       	mov	r30, r24
    2814:	ef 70       	andi	r30, 0x0F	; 15
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	08 2e       	mov	r0, r24
    281e:	00 0c       	add	r0, r0
    2820:	99 0b       	sbc	r25, r25
    2822:	88 27       	eor	r24, r24
    2824:	99 0f       	add	r25, r25
    2826:	88 1f       	adc	r24, r24
    2828:	99 27       	eor	r25, r25
    282a:	e8 0f       	add	r30, r24
    282c:	f9 1f       	adc	r31, r25
    282e:	ee 0f       	add	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	e4 50       	subi	r30, 0x04	; 4
    283c:	fd 4d       	sbci	r31, 0xDD	; 221
    283e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2840:	82 fb       	bst	r24, 2
    2842:	88 27       	eor	r24, r24
    2844:	80 f9       	bld	r24, 0
    2846:	08 95       	ret

00002848 <udd_ep_clear_halt>:
    2848:	28 2f       	mov	r18, r24
    284a:	2f 70       	andi	r18, 0x0F	; 15
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	a9 01       	movw	r20, r18
    2850:	44 0f       	add	r20, r20
    2852:	55 1f       	adc	r21, r21
    2854:	28 2f       	mov	r18, r24
    2856:	08 2e       	mov	r0, r24
    2858:	00 0c       	add	r0, r0
    285a:	33 0b       	sbc	r19, r19
    285c:	22 27       	eor	r18, r18
    285e:	33 0f       	add	r19, r19
    2860:	22 1f       	adc	r18, r18
    2862:	33 27       	eor	r19, r19
    2864:	24 0f       	add	r18, r20
    2866:	35 1f       	adc	r19, r21
    2868:	f9 01       	movw	r30, r18
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	e4 50       	subi	r30, 0x04	; 4
    2878:	fd 4d       	sbci	r31, 0xDD	; 221
    287a:	95 8d       	ldd	r25, Z+29	; 0x1d
    287c:	92 ff       	sbrs	r25, 2
    287e:	17 c0       	rjmp	.+46     	; 0x28ae <udd_ep_clear_halt+0x66>
    2880:	22 0f       	add	r18, r18
    2882:	33 1f       	adc	r19, r19
    2884:	22 0f       	add	r18, r18
    2886:	33 1f       	adc	r19, r19
    2888:	22 0f       	add	r18, r18
    288a:	33 1f       	adc	r19, r19
    288c:	f9 01       	movw	r30, r18
    288e:	e4 50       	subi	r30, 0x04	; 4
    2890:	fd 4d       	sbci	r31, 0xDD	; 221
    2892:	95 8d       	ldd	r25, Z+29	; 0x1d
    2894:	9b 7f       	andi	r25, 0xFB	; 251
    2896:	95 8f       	std	Z+29, r25	; 0x1d
    2898:	9e dc       	rcall	.-1732   	; 0x21d6 <udd_ep_get_job>
    289a:	fc 01       	movw	r30, r24
    289c:	80 81       	ld	r24, Z
    289e:	80 ff       	sbrs	r24, 0
    28a0:	06 c0       	rjmp	.+12     	; 0x28ae <udd_ep_clear_halt+0x66>
    28a2:	8e 7f       	andi	r24, 0xFE	; 254
    28a4:	80 83       	st	Z, r24
    28a6:	07 80       	ldd	r0, Z+7	; 0x07
    28a8:	f0 85       	ldd	r31, Z+8	; 0x08
    28aa:	e0 2d       	mov	r30, r0
    28ac:	09 95       	icall
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	08 95       	ret

000028b2 <udd_ep_run>:
    28b2:	7f 92       	push	r7
    28b4:	8f 92       	push	r8
    28b6:	9f 92       	push	r9
    28b8:	af 92       	push	r10
    28ba:	bf 92       	push	r11
    28bc:	cf 92       	push	r12
    28be:	df 92       	push	r13
    28c0:	ef 92       	push	r14
    28c2:	ff 92       	push	r15
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	98 2e       	mov	r9, r24
    28ce:	86 2e       	mov	r8, r22
    28d0:	6a 01       	movw	r12, r20
    28d2:	79 01       	movw	r14, r18
    28d4:	80 dc       	rcall	.-1792   	; 0x21d6 <udd_ep_get_job>
    28d6:	5c 01       	movw	r10, r24
    28d8:	79 2c       	mov	r7, r9
    28da:	77 1c       	adc	r7, r7
    28dc:	77 24       	eor	r7, r7
    28de:	77 1c       	adc	r7, r7
    28e0:	c9 2d       	mov	r28, r9
    28e2:	cf 70       	andi	r28, 0x0F	; 15
    28e4:	d0 e0       	ldi	r29, 0x00	; 0
    28e6:	cc 0f       	add	r28, r28
    28e8:	dd 1f       	adc	r29, r29
    28ea:	c7 0d       	add	r28, r7
    28ec:	d1 1d       	adc	r29, r1
    28ee:	fe 01       	movw	r30, r28
    28f0:	ee 0f       	add	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	ee 0f       	add	r30, r30
    28f6:	ff 1f       	adc	r31, r31
    28f8:	ee 0f       	add	r30, r30
    28fa:	ff 1f       	adc	r31, r31
    28fc:	e4 50       	subi	r30, 0x04	; 4
    28fe:	fd 4d       	sbci	r31, 0xDD	; 221
    2900:	85 8d       	ldd	r24, Z+29	; 0x1d
    2902:	80 7c       	andi	r24, 0xC0	; 192
    2904:	09 f4       	brne	.+2      	; 0x2908 <udd_ep_run+0x56>
    2906:	7d c0       	rjmp	.+250    	; 0x2a02 <udd_ep_run+0x150>
    2908:	fe 01       	movw	r30, r28
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	ee 0f       	add	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	e4 50       	subi	r30, 0x04	; 4
    2918:	fd 4d       	sbci	r31, 0xDD	; 221
    291a:	85 8d       	ldd	r24, Z+29	; 0x1d
    291c:	80 7c       	andi	r24, 0xC0	; 192
    291e:	80 3c       	cpi	r24, 0xC0	; 192
    2920:	61 f0       	breq	.+24     	; 0x293a <udd_ep_run+0x88>
    2922:	fe 01       	movw	r30, r28
    2924:	ee 0f       	add	r30, r30
    2926:	ff 1f       	adc	r31, r31
    2928:	ee 0f       	add	r30, r30
    292a:	ff 1f       	adc	r31, r31
    292c:	ee 0f       	add	r30, r30
    292e:	ff 1f       	adc	r31, r31
    2930:	e4 50       	subi	r30, 0x04	; 4
    2932:	fd 4d       	sbci	r31, 0xDD	; 221
    2934:	85 8d       	ldd	r24, Z+29	; 0x1d
    2936:	82 fd       	sbrc	r24, 2
    2938:	66 c0       	rjmp	.+204    	; 0x2a06 <udd_ep_run+0x154>
    293a:	8f b7       	in	r24, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	f5 01       	movw	r30, r10
    2940:	90 81       	ld	r25, Z
    2942:	90 ff       	sbrs	r25, 0
    2944:	03 c0       	rjmp	.+6      	; 0x294c <udd_ep_run+0x9a>
    2946:	8f bf       	out	0x3f, r24	; 63
    2948:	71 2c       	mov	r7, r1
    294a:	5e c0       	rjmp	.+188    	; 0x2a08 <udd_ep_run+0x156>
    294c:	f5 01       	movw	r30, r10
    294e:	90 81       	ld	r25, Z
    2950:	91 60       	ori	r25, 0x01	; 1
    2952:	90 83       	st	Z, r25
    2954:	8f bf       	out	0x3f, r24	; 63
    2956:	c1 82       	std	Z+1, r12	; 0x01
    2958:	d2 82       	std	Z+2, r13	; 0x02
    295a:	e3 82       	std	Z+3, r14	; 0x03
    295c:	f4 82       	std	Z+4, r15	; 0x04
    295e:	15 82       	std	Z+5, r1	; 0x05
    2960:	16 82       	std	Z+6, r1	; 0x06
    2962:	07 83       	std	Z+7, r16	; 0x07
    2964:	10 87       	std	Z+8, r17	; 0x08
    2966:	81 10       	cpse	r8, r1
    2968:	06 c0       	rjmp	.+12     	; 0x2976 <udd_ep_run+0xc4>
    296a:	91 e0       	ldi	r25, 0x01	; 1
    296c:	e1 14       	cp	r14, r1
    296e:	f1 04       	cpc	r15, r1
    2970:	19 f0       	breq	.+6      	; 0x2978 <udd_ep_run+0xc6>
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	01 c0       	rjmp	.+2      	; 0x2978 <udd_ep_run+0xc6>
    2976:	91 e0       	ldi	r25, 0x01	; 1
    2978:	f5 01       	movw	r30, r10
    297a:	80 81       	ld	r24, Z
    297c:	90 fb       	bst	r25, 0
    297e:	81 f9       	bld	r24, 1
    2980:	8b 7f       	andi	r24, 0xFB	; 251
    2982:	80 83       	st	Z, r24
    2984:	77 20       	and	r7, r7
    2986:	59 f0       	breq	.+22     	; 0x299e <udd_ep_run+0xec>
    2988:	cc 0f       	add	r28, r28
    298a:	dd 1f       	adc	r29, r29
    298c:	cc 0f       	add	r28, r28
    298e:	dd 1f       	adc	r29, r29
    2990:	cc 0f       	add	r28, r28
    2992:	dd 1f       	adc	r29, r29
    2994:	c4 50       	subi	r28, 0x04	; 4
    2996:	dd 4d       	sbci	r29, 0xDD	; 221
    2998:	1a a2       	std	Y+34, r1	; 0x22
    299a:	1b a2       	std	Y+35, r1	; 0x23
    299c:	2d c0       	rjmp	.+90     	; 0x29f8 <udd_ep_run+0x146>
    299e:	fe 01       	movw	r30, r28
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	ee 0f       	add	r30, r30
    29a6:	ff 1f       	adc	r31, r31
    29a8:	ee 0f       	add	r30, r30
    29aa:	ff 1f       	adc	r31, r31
    29ac:	e4 50       	subi	r30, 0x04	; 4
    29ae:	fd 4d       	sbci	r31, 0xDD	; 221
    29b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    29b2:	80 7c       	andi	r24, 0xC0	; 192
    29b4:	80 3c       	cpi	r24, 0xC0	; 192
    29b6:	a1 f4       	brne	.+40     	; 0x29e0 <udd_ep_run+0x12e>
    29b8:	ce 01       	movw	r24, r28
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	88 5e       	subi	r24, 0xE8	; 232
    29c8:	9c 4d       	sbci	r25, 0xDC	; 220
    29ca:	df db       	rcall	.-2114   	; 0x218a <udd_ep_get_size>
    29cc:	bc 01       	movw	r22, r24
    29ce:	c7 01       	movw	r24, r14
    29d0:	65 d2       	rcall	.+1226   	; 0x2e9c <__udivmodhi4>
    29d2:	89 2b       	or	r24, r25
    29d4:	29 f0       	breq	.+10     	; 0x29e0 <udd_ep_run+0x12e>
    29d6:	f5 01       	movw	r30, r10
    29d8:	80 81       	ld	r24, Z
    29da:	8e 7f       	andi	r24, 0xFE	; 254
    29dc:	80 83       	st	Z, r24
    29de:	14 c0       	rjmp	.+40     	; 0x2a08 <udd_ep_run+0x156>
    29e0:	cc 0f       	add	r28, r28
    29e2:	dd 1f       	adc	r29, r29
    29e4:	cc 0f       	add	r28, r28
    29e6:	dd 1f       	adc	r29, r29
    29e8:	cc 0f       	add	r28, r28
    29ea:	dd 1f       	adc	r29, r29
    29ec:	c4 50       	subi	r28, 0x04	; 4
    29ee:	dd 4d       	sbci	r29, 0xDD	; 221
    29f0:	1e 8e       	std	Y+30, r1	; 0x1e
    29f2:	1f 8e       	std	Y+31, r1	; 0x1f
    29f4:	1a a2       	std	Y+34, r1	; 0x22
    29f6:	1b a2       	std	Y+35, r1	; 0x23
    29f8:	89 2d       	mov	r24, r9
    29fa:	77 dc       	rcall	.-1810   	; 0x22ea <udd_ep_trans_complet>
    29fc:	77 24       	eor	r7, r7
    29fe:	73 94       	inc	r7
    2a00:	03 c0       	rjmp	.+6      	; 0x2a08 <udd_ep_run+0x156>
    2a02:	71 2c       	mov	r7, r1
    2a04:	01 c0       	rjmp	.+2      	; 0x2a08 <udd_ep_run+0x156>
    2a06:	71 2c       	mov	r7, r1
    2a08:	87 2d       	mov	r24, r7
    2a0a:	df 91       	pop	r29
    2a0c:	cf 91       	pop	r28
    2a0e:	1f 91       	pop	r17
    2a10:	0f 91       	pop	r16
    2a12:	ff 90       	pop	r15
    2a14:	ef 90       	pop	r14
    2a16:	df 90       	pop	r13
    2a18:	cf 90       	pop	r12
    2a1a:	bf 90       	pop	r11
    2a1c:	af 90       	pop	r10
    2a1e:	9f 90       	pop	r9
    2a20:	8f 90       	pop	r8
    2a22:	7f 90       	pop	r7
    2a24:	08 95       	ret

00002a26 <udd_ep_abort>:
    2a26:	ff 92       	push	r15
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	18 2f       	mov	r17, r24
    2a32:	f8 2e       	mov	r15, r24
    2a34:	ff 1c       	adc	r15, r15
    2a36:	ff 24       	eor	r15, r15
    2a38:	ff 1c       	adc	r15, r15
    2a3a:	c8 2f       	mov	r28, r24
    2a3c:	cf 70       	andi	r28, 0x0F	; 15
    2a3e:	d0 e0       	ldi	r29, 0x00	; 0
    2a40:	cc 0f       	add	r28, r28
    2a42:	dd 1f       	adc	r29, r29
    2a44:	cf 0d       	add	r28, r15
    2a46:	d1 1d       	adc	r29, r1
    2a48:	c6 db       	rcall	.-2164   	; 0x21d6 <udd_ep_get_job>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ee 0f       	add	r30, r30
    2a50:	ff 1f       	adc	r31, r31
    2a52:	ee 0f       	add	r30, r30
    2a54:	ff 1f       	adc	r31, r31
    2a56:	ee 0f       	add	r30, r30
    2a58:	ff 1f       	adc	r31, r31
    2a5a:	e8 5e       	subi	r30, 0xE8	; 232
    2a5c:	fc 4d       	sbci	r31, 0xDC	; 220
    2a5e:	02 e0       	ldi	r16, 0x02	; 2
    2a60:	05 93       	las	Z, r16
    2a62:	8c 91       	ld	r24, X
    2a64:	80 ff       	sbrs	r24, 0
    2a66:	22 c0       	rjmp	.+68     	; 0x2aac <udd_ep_abort+0x86>
    2a68:	8e 7f       	andi	r24, 0xFE	; 254
    2a6a:	8c 93       	st	X, r24
    2a6c:	17 96       	adiw	r26, 0x07	; 7
    2a6e:	ed 91       	ld	r30, X+
    2a70:	fc 91       	ld	r31, X
    2a72:	18 97       	sbiw	r26, 0x08	; 8
    2a74:	30 97       	sbiw	r30, 0x00	; 0
    2a76:	d1 f0       	breq	.+52     	; 0x2aac <udd_ep_abort+0x86>
    2a78:	ff 20       	and	r15, r15
    2a7a:	59 f0       	breq	.+22     	; 0x2a92 <udd_ep_abort+0x6c>
    2a7c:	cc 0f       	add	r28, r28
    2a7e:	dd 1f       	adc	r29, r29
    2a80:	cc 0f       	add	r28, r28
    2a82:	dd 1f       	adc	r29, r29
    2a84:	cc 0f       	add	r28, r28
    2a86:	dd 1f       	adc	r29, r29
    2a88:	c4 50       	subi	r28, 0x04	; 4
    2a8a:	dd 4d       	sbci	r29, 0xDD	; 221
    2a8c:	6a a1       	ldd	r22, Y+34	; 0x22
    2a8e:	7b a1       	ldd	r23, Y+35	; 0x23
    2a90:	0a c0       	rjmp	.+20     	; 0x2aa6 <udd_ep_abort+0x80>
    2a92:	cc 0f       	add	r28, r28
    2a94:	dd 1f       	adc	r29, r29
    2a96:	cc 0f       	add	r28, r28
    2a98:	dd 1f       	adc	r29, r29
    2a9a:	cc 0f       	add	r28, r28
    2a9c:	dd 1f       	adc	r29, r29
    2a9e:	c4 50       	subi	r28, 0x04	; 4
    2aa0:	dd 4d       	sbci	r29, 0xDD	; 221
    2aa2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2aa4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2aa6:	41 2f       	mov	r20, r17
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	09 95       	icall
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	ff 90       	pop	r15
    2ab6:	08 95       	ret

00002ab8 <udd_ep_free>:
    2ab8:	cf 93       	push	r28
    2aba:	c8 2f       	mov	r28, r24
    2abc:	b4 df       	rcall	.-152    	; 0x2a26 <udd_ep_abort>
    2abe:	ec 2f       	mov	r30, r28
    2ac0:	ef 70       	andi	r30, 0x0F	; 15
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	ee 0f       	add	r30, r30
    2ac6:	ff 1f       	adc	r31, r31
    2ac8:	8c 2f       	mov	r24, r28
    2aca:	cc 0f       	add	r28, r28
    2acc:	99 0b       	sbc	r25, r25
    2ace:	88 27       	eor	r24, r24
    2ad0:	99 0f       	add	r25, r25
    2ad2:	88 1f       	adc	r24, r24
    2ad4:	99 27       	eor	r25, r25
    2ad6:	e8 0f       	add	r30, r24
    2ad8:	f9 1f       	adc	r31, r25
    2ada:	ee 0f       	add	r30, r30
    2adc:	ff 1f       	adc	r31, r31
    2ade:	ee 0f       	add	r30, r30
    2ae0:	ff 1f       	adc	r31, r31
    2ae2:	ee 0f       	add	r30, r30
    2ae4:	ff 1f       	adc	r31, r31
    2ae6:	e4 50       	subi	r30, 0x04	; 4
    2ae8:	fd 4d       	sbci	r31, 0xDD	; 221
    2aea:	15 8e       	std	Z+29, r1	; 0x1d
    2aec:	cf 91       	pop	r28
    2aee:	08 95       	ret

00002af0 <udd_ep_set_halt>:
    2af0:	0f 93       	push	r16
    2af2:	e8 2f       	mov	r30, r24
    2af4:	ef 70       	andi	r30, 0x0F	; 15
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	28 2f       	mov	r18, r24
    2afe:	08 2e       	mov	r0, r24
    2b00:	00 0c       	add	r0, r0
    2b02:	33 0b       	sbc	r19, r19
    2b04:	22 27       	eor	r18, r18
    2b06:	33 0f       	add	r19, r19
    2b08:	22 1f       	adc	r18, r18
    2b0a:	33 27       	eor	r19, r19
    2b0c:	e2 0f       	add	r30, r18
    2b0e:	f3 1f       	adc	r31, r19
    2b10:	ee 0f       	add	r30, r30
    2b12:	ff 1f       	adc	r31, r31
    2b14:	ee 0f       	add	r30, r30
    2b16:	ff 1f       	adc	r31, r31
    2b18:	ee 0f       	add	r30, r30
    2b1a:	ff 1f       	adc	r31, r31
    2b1c:	df 01       	movw	r26, r30
    2b1e:	a4 50       	subi	r26, 0x04	; 4
    2b20:	bd 4d       	sbci	r27, 0xDD	; 221
    2b22:	5d 96       	adiw	r26, 0x1d	; 29
    2b24:	9c 91       	ld	r25, X
    2b26:	5d 97       	sbiw	r26, 0x1d	; 29
    2b28:	94 60       	ori	r25, 0x04	; 4
    2b2a:	5d 96       	adiw	r26, 0x1d	; 29
    2b2c:	9c 93       	st	X, r25
    2b2e:	e8 5e       	subi	r30, 0xE8	; 232
    2b30:	fc 4d       	sbci	r31, 0xDC	; 220
    2b32:	01 e0       	ldi	r16, 0x01	; 1
    2b34:	06 93       	lac	Z, r16
    2b36:	77 df       	rcall	.-274    	; 0x2a26 <udd_ep_abort>
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	0f 91       	pop	r16
    2b3c:	08 95       	ret

00002b3e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2b3e:	1f 92       	push	r1
    2b40:	0f 92       	push	r0
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	0f 92       	push	r0
    2b46:	11 24       	eor	r1, r1
    2b48:	0f 93       	push	r16
    2b4a:	2f 93       	push	r18
    2b4c:	3f 93       	push	r19
    2b4e:	4f 93       	push	r20
    2b50:	5f 93       	push	r21
    2b52:	6f 93       	push	r22
    2b54:	7f 93       	push	r23
    2b56:	8f 93       	push	r24
    2b58:	9f 93       	push	r25
    2b5a:	af 93       	push	r26
    2b5c:	bf 93       	push	r27
    2b5e:	cf 93       	push	r28
    2b60:	ef 93       	push	r30
    2b62:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2b64:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b68:	88 23       	and	r24, r24
    2b6a:	44 f4       	brge	.+16     	; 0x2b7c <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    2b6c:	80 e8       	ldi	r24, 0x80	; 128
    2b6e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2b72:	0e 94 39 0c 	call	0x1872	; 0x1872 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2b76:	0e 94 19 04 	call	0x832	; 0x832 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2b7a:	8b c0       	rjmp	.+278    	; 0x2c92 <__vector_125+0x154>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2b7c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2b80:	82 ff       	sbrs	r24, 2
    2b82:	20 c0       	rjmp	.+64     	; 0x2bc4 <__vector_125+0x86>
		udd_ack_underflow_event();
    2b84:	84 e0       	ldi	r24, 0x04	; 4
    2b86:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2b8a:	80 91 20 23 	lds	r24, 0x2320	; 0x802320 <udd_sram+0x24>
    2b8e:	86 ff       	sbrs	r24, 6
    2b90:	80 c0       	rjmp	.+256    	; 0x2c92 <__vector_125+0x154>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2b92:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2b96:	81 fd       	sbrc	r24, 1
    2b98:	7c c0       	rjmp	.+248    	; 0x2c92 <__vector_125+0x154>
    2b9a:	38 db       	rcall	.-2448   	; 0x220c <udd_ctrl_interrupt_tc_setup>
    2b9c:	81 11       	cpse	r24, r1
    2b9e:	79 c0       	rjmp	.+242    	; 0x2c92 <__vector_125+0x154>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2ba0:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2ba4:	81 30       	cpi	r24, 0x01	; 1
    2ba6:	11 f4       	brne	.+4      	; 0x2bac <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2ba8:	6e da       	rcall	.-2852   	; 0x2086 <udd_ctrl_send_zlp_in>
    2baa:	73 c0       	rjmp	.+230    	; 0x2c92 <__vector_125+0x154>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2bac:	84 30       	cpi	r24, 0x04	; 4
    2bae:	09 f0       	breq	.+2      	; 0x2bb2 <__vector_125+0x74>
    2bb0:	70 c0       	rjmp	.+224    	; 0x2c92 <__vector_125+0x154>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2bb2:	e1 e2       	ldi	r30, 0x21	; 33
    2bb4:	f3 e2       	ldi	r31, 0x23	; 35
    2bb6:	04 e0       	ldi	r16, 0x04	; 4
    2bb8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2bba:	e9 e1       	ldi	r30, 0x19	; 25
    2bbc:	f3 e2       	ldi	r31, 0x23	; 35
    2bbe:	04 e0       	ldi	r16, 0x04	; 4
    2bc0:	05 93       	las	Z, r16
    2bc2:	67 c0       	rjmp	.+206    	; 0x2c92 <__vector_125+0x154>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2bc4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2bc8:	81 ff       	sbrs	r24, 1
    2bca:	5e c0       	rjmp	.+188    	; 0x2c88 <__vector_125+0x14a>
		udd_ack_overflow_event();
    2bcc:	82 e0       	ldi	r24, 0x02	; 2
    2bce:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2bd2:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <udd_sram+0x1c>
    2bd6:	86 ff       	sbrs	r24, 6
    2bd8:	5c c0       	rjmp	.+184    	; 0x2c92 <__vector_125+0x154>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2bda:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bde:	81 fd       	sbrc	r24, 1
    2be0:	58 c0       	rjmp	.+176    	; 0x2c92 <__vector_125+0x154>
    2be2:	14 db       	rcall	.-2520   	; 0x220c <udd_ctrl_interrupt_tc_setup>
    2be4:	81 11       	cpse	r24, r1
    2be6:	55 c0       	rjmp	.+170    	; 0x2c92 <__vector_125+0x154>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2be8:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2bec:	82 30       	cpi	r24, 0x02	; 2
    2bee:	41 f4       	brne	.+16     	; 0x2c00 <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2bf0:	84 e0       	ldi	r24, 0x04	; 4
    2bf2:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2bf6:	e8 e1       	ldi	r30, 0x18	; 24
    2bf8:	f3 e2       	ldi	r31, 0x23	; 35
    2bfa:	02 e0       	ldi	r16, 0x02	; 2
    2bfc:	06 93       	lac	Z, r16
    2bfe:	49 c0       	rjmp	.+146    	; 0x2c92 <__vector_125+0x154>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2c00:	83 30       	cpi	r24, 0x03	; 3
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <__vector_125+0xc8>
    2c04:	46 c0       	rjmp	.+140    	; 0x2c92 <__vector_125+0x154>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2c06:	e1 e2       	ldi	r30, 0x21	; 33
    2c08:	f3 e2       	ldi	r31, 0x23	; 35
    2c0a:	04 e0       	ldi	r16, 0x04	; 4
    2c0c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c0e:	e9 e1       	ldi	r30, 0x19	; 25
    2c10:	f3 e2       	ldi	r31, 0x23	; 35
    2c12:	04 e0       	ldi	r16, 0x04	; 4
    2c14:	05 93       	las	Z, r16
    2c16:	3d c0       	rjmp	.+122    	; 0x2c92 <__vector_125+0x154>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2c18:	80 e1       	ldi	r24, 0x10	; 16
    2c1a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2c1e:	c1 e0       	ldi	r28, 0x01	; 1
			udd_ep_abort(i);
    2c20:	8c 2f       	mov	r24, r28
    2c22:	01 df       	rcall	.-510    	; 0x2a26 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2c24:	8c 2f       	mov	r24, r28
    2c26:	80 68       	ori	r24, 0x80	; 128
    2c28:	fe de       	rcall	.-516    	; 0x2a26 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2c2a:	cf 5f       	subi	r28, 0xFF	; 255
    2c2c:	c6 30       	cpi	r28, 0x06	; 6
    2c2e:	c1 f7       	brne	.-16     	; 0x2c20 <__vector_125+0xe2>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2c30:	0e 94 14 0c 	call	0x1828	; 0x1828 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2c34:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c38:	ec ef       	ldi	r30, 0xFC	; 252
    2c3a:	f2 e2       	ldi	r31, 0x22	; 34
    2c3c:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
    2c3e:	96 e0       	ldi	r25, 0x06	; 6
    2c40:	94 8f       	std	Z+28, r25	; 0x1c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c42:	83 e4       	ldi	r24, 0x43	; 67
    2c44:	85 8f       	std	Z+29, r24	; 0x1d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c46:	15 a2       	std	Z+37, r1	; 0x25
	udd_endpoint_clear_status(ep_ctrl);
    2c48:	94 a3       	std	Z+36, r25	; 0x24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c4a:	85 a3       	std	Z+37, r24	; 0x25
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2c4c:	85 eb       	ldi	r24, 0xB5	; 181
    2c4e:	92 e2       	ldi	r25, 0x22	; 34
    2c50:	80 a3       	std	Z+32, r24	; 0x20
    2c52:	91 a3       	std	Z+33, r25	; 0x21
		// Reset endpoint control management
		udd_ctrl_init();
    2c54:	e3 d9       	rcall	.-3130   	; 0x201c <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2c56:	1d c0       	rjmp	.+58     	; 0x2c92 <__vector_125+0x154>
	}

	if (udd_is_suspend_event()) {
    2c58:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c5c:	86 ff       	sbrs	r24, 6
    2c5e:	08 c0       	rjmp	.+16     	; 0x2c70 <__vector_125+0x132>
		udd_ack_suspend_event();
    2c60:	80 e4       	ldi	r24, 0x40	; 64
    2c62:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	b0 d9       	rcall	.-3232   	; 0x1fca <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2c6a:	0e 94 17 04 	call	0x82e	; 0x82e <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2c6e:	11 c0       	rjmp	.+34     	; 0x2c92 <__vector_125+0x154>
	}

	if (udd_is_resume_event()) {
    2c70:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c74:	85 ff       	sbrs	r24, 5
    2c76:	0d c0       	rjmp	.+26     	; 0x2c92 <__vector_125+0x154>
		udd_ack_resume_event();
    2c78:	80 e2       	ldi	r24, 0x20	; 32
    2c7a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	a4 d9       	rcall	.-3256   	; 0x1fca <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2c82:	0e 94 18 04 	call	0x830	; 0x830 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2c86:	05 c0       	rjmp	.+10     	; 0x2c92 <__vector_125+0x154>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2c88:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c8c:	84 fd       	sbrc	r24, 4
    2c8e:	c4 cf       	rjmp	.-120    	; 0x2c18 <__vector_125+0xda>
    2c90:	e3 cf       	rjmp	.-58     	; 0x2c58 <__vector_125+0x11a>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2c92:	ff 91       	pop	r31
    2c94:	ef 91       	pop	r30
    2c96:	cf 91       	pop	r28
    2c98:	bf 91       	pop	r27
    2c9a:	af 91       	pop	r26
    2c9c:	9f 91       	pop	r25
    2c9e:	8f 91       	pop	r24
    2ca0:	7f 91       	pop	r23
    2ca2:	6f 91       	pop	r22
    2ca4:	5f 91       	pop	r21
    2ca6:	4f 91       	pop	r20
    2ca8:	3f 91       	pop	r19
    2caa:	2f 91       	pop	r18
    2cac:	0f 91       	pop	r16
    2cae:	0f 90       	pop	r0
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	0f 90       	pop	r0
    2cb4:	1f 90       	pop	r1
    2cb6:	18 95       	reti

00002cb8 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2cb8:	1f 92       	push	r1
    2cba:	0f 92       	push	r0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	0f 92       	push	r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	2f 93       	push	r18
    2cc8:	3f 93       	push	r19
    2cca:	4f 93       	push	r20
    2ccc:	5f 93       	push	r21
    2cce:	6f 93       	push	r22
    2cd0:	7f 93       	push	r23
    2cd2:	8f 93       	push	r24
    2cd4:	9f 93       	push	r25
    2cd6:	af 93       	push	r26
    2cd8:	bf 93       	push	r27
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	ef 93       	push	r30
    2ce0:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2ce2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2ce6:	81 fd       	sbrc	r24, 1
    2ce8:	03 c0       	rjmp	.+6      	; 0x2cf0 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2cea:	90 da       	rcall	.-2784   	; 0x220c <udd_ctrl_interrupt_tc_setup>
    2cec:	81 11       	cpse	r24, r1
    2cee:	c1 c0       	rjmp	.+386    	; 0x2e72 <__vector_126+0x1ba>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2cf6:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2cfa:	81 95       	neg	r24
    2cfc:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2cfe:	e8 e1       	ldi	r30, 0x18	; 24
    2d00:	f3 e2       	ldi	r31, 0x23	; 35
    2d02:	e8 1b       	sub	r30, r24
    2d04:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2d06:	20 81       	ld	r18, Z
    2d08:	31 81       	ldd	r19, Z+1	; 0x01
    2d0a:	28 51       	subi	r18, 0x18	; 24
    2d0c:	33 42       	sbci	r19, 0x23	; 35
    2d0e:	36 95       	lsr	r19
    2d10:	27 95       	ror	r18
    2d12:	36 95       	lsr	r19
    2d14:	27 95       	ror	r18
    2d16:	36 95       	lsr	r19
    2d18:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2d1a:	82 2f       	mov	r24, r18
    2d1c:	86 95       	lsr	r24
    2d1e:	20 fd       	sbrc	r18, 0
    2d20:	02 c0       	rjmp	.+4      	; 0x2d26 <__vector_126+0x6e>
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	01 c0       	rjmp	.+2      	; 0x2d28 <__vector_126+0x70>
    2d26:	90 e8       	ldi	r25, 0x80	; 128
    2d28:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d2a:	e8 2f       	mov	r30, r24
    2d2c:	ef 70       	andi	r30, 0x0F	; 15
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	ee 0f       	add	r30, r30
    2d32:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2d34:	28 2f       	mov	r18, r24
    2d36:	08 2e       	mov	r0, r24
    2d38:	00 0c       	add	r0, r0
    2d3a:	33 0b       	sbc	r19, r19
    2d3c:	22 27       	eor	r18, r18
    2d3e:	33 0f       	add	r19, r19
    2d40:	22 1f       	adc	r18, r18
    2d42:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d44:	e2 0f       	add	r30, r18
    2d46:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2d48:	df 01       	movw	r26, r30
    2d4a:	aa 0f       	add	r26, r26
    2d4c:	bb 1f       	adc	r27, r27
    2d4e:	aa 0f       	add	r26, r26
    2d50:	bb 1f       	adc	r27, r27
    2d52:	aa 0f       	add	r26, r26
    2d54:	bb 1f       	adc	r27, r27
    2d56:	a4 50       	subi	r26, 0x04	; 4
    2d58:	bd 4d       	sbci	r27, 0xDD	; 221
    2d5a:	5c 96       	adiw	r26, 0x1c	; 28
    2d5c:	9c 91       	ld	r25, X
    2d5e:	95 ff       	sbrs	r25, 5
    2d60:	88 c0       	rjmp	.+272    	; 0x2e72 <__vector_126+0x1ba>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2d62:	ee 0f       	add	r30, r30
    2d64:	ff 1f       	adc	r31, r31
    2d66:	ee 0f       	add	r30, r30
    2d68:	ff 1f       	adc	r31, r31
    2d6a:	ee 0f       	add	r30, r30
    2d6c:	ff 1f       	adc	r31, r31
    2d6e:	e8 5e       	subi	r30, 0xE8	; 232
    2d70:	fc 4d       	sbci	r31, 0xDC	; 220
    2d72:	00 e2       	ldi	r16, 0x20	; 32
    2d74:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2d76:	81 11       	cpse	r24, r1
    2d78:	77 c0       	rjmp	.+238    	; 0x2e68 <__vector_126+0x1b0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2d7a:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2d7e:	84 30       	cpi	r24, 0x04	; 4
    2d80:	19 f4       	brne	.+6      	; 0x2d88 <__vector_126+0xd0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2d82:	8f d9       	rcall	.-3298   	; 0x20a2 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2d84:	4b d9       	rcall	.-3434   	; 0x201c <udd_ctrl_init>
    2d86:	75 c0       	rjmp	.+234    	; 0x2e72 <__vector_126+0x1ba>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2d88:	00 91 1a 23 	lds	r16, 0x231A	; 0x80231a <udd_sram+0x1e>
    2d8c:	10 91 1b 23 	lds	r17, 0x231B	; 0x80231b <udd_sram+0x1f>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2d90:	80 91 c4 25 	lds	r24, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2d94:	90 91 c5 25 	lds	r25, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2d98:	c0 91 f5 22 	lds	r28, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2d9c:	d0 91 f6 22 	lds	r29, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2da0:	9e 01       	movw	r18, r28
    2da2:	20 0f       	add	r18, r16
    2da4:	31 1f       	adc	r19, r17
    2da6:	82 17       	cp	r24, r18
    2da8:	93 07       	cpc	r25, r19
    2daa:	18 f4       	brcc	.+6      	; 0x2db2 <__vector_126+0xfa>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2dac:	8c 01       	movw	r16, r24
    2dae:	0c 1b       	sub	r16, r28
    2db0:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2db2:	80 91 c2 25 	lds	r24, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    2db6:	90 91 c3 25 	lds	r25, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    2dba:	a8 01       	movw	r20, r16
    2dbc:	65 eb       	ldi	r22, 0xB5	; 181
    2dbe:	72 e2       	ldi	r23, 0x22	; 34
    2dc0:	8c 0f       	add	r24, r28
    2dc2:	9d 1f       	adc	r25, r29
    2dc4:	98 d0       	rcall	.+304    	; 0x2ef6 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2dc6:	c0 0f       	add	r28, r16
    2dc8:	d1 1f       	adc	r29, r17
    2dca:	c0 93 f5 22 	sts	0x22F5, r28	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2dce:	d0 93 f6 22 	sts	0x22F6, r29	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2dd2:	00 34       	cpi	r16, 0x40	; 64
    2dd4:	11 05       	cpc	r17, r1
    2dd6:	69 f4       	brne	.+26     	; 0x2df2 <__vector_126+0x13a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2dd8:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2ddc:	90 91 f8 22 	lds	r25, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2de0:	8c 0f       	add	r24, r28
    2de2:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2de4:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    2de8:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    2dec:	82 17       	cp	r24, r18
    2dee:	93 07       	cpc	r25, r19
    2df0:	80 f0       	brcs	.+32     	; 0x2e12 <__vector_126+0x15a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2df2:	ea eb       	ldi	r30, 0xBA	; 186
    2df4:	f5 e2       	ldi	r31, 0x25	; 37
    2df6:	c2 87       	std	Z+10, r28	; 0x0a
    2df8:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2dfa:	06 84       	ldd	r0, Z+14	; 0x0e
    2dfc:	f7 85       	ldd	r31, Z+15	; 0x0f
    2dfe:	e0 2d       	mov	r30, r0
    2e00:	30 97       	sbiw	r30, 0x00	; 0
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <__vector_126+0x156>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e04:	09 95       	icall
    2e06:	81 11       	cpse	r24, r1
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <__vector_126+0x156>
				// Stall ZLP
				udd_ctrl_stall_data();
    2e0a:	2f d9       	rcall	.-3490   	; 0x206a <udd_ctrl_stall_data>
    2e0c:	32 c0       	rjmp	.+100    	; 0x2e72 <__vector_126+0x1ba>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2e0e:	3b d9       	rcall	.-3466   	; 0x2086 <udd_ctrl_send_zlp_in>
    2e10:	30 c0       	rjmp	.+96     	; 0x2e72 <__vector_126+0x1ba>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e12:	80 91 c4 25 	lds	r24, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2e16:	90 91 c5 25 	lds	r25, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2e1a:	c8 17       	cp	r28, r24
    2e1c:	d9 07       	cpc	r29, r25
    2e1e:	f9 f4       	brne	.+62     	; 0x2e5e <__vector_126+0x1a6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2e20:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0xe>
    2e24:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0xf>
    2e28:	30 97       	sbiw	r30, 0x00	; 0
    2e2a:	11 f4       	brne	.+4      	; 0x2e30 <__vector_126+0x178>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2e2c:	1e d9       	rcall	.-3524   	; 0x206a <udd_ctrl_stall_data>
    2e2e:	21 c0       	rjmp	.+66     	; 0x2e72 <__vector_126+0x1ba>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2e30:	09 95       	icall
    2e32:	81 11       	cpse	r24, r1
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <__vector_126+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2e36:	19 d9       	rcall	.-3534   	; 0x206a <udd_ctrl_stall_data>
    2e38:	1c c0       	rjmp	.+56     	; 0x2e72 <__vector_126+0x1ba>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2e3a:	20 91 f7 22 	lds	r18, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2e3e:	30 91 f8 22 	lds	r19, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2e42:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2e46:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2e4a:	82 0f       	add	r24, r18
    2e4c:	93 1f       	adc	r25, r19
    2e4e:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2e52:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2e56:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2e5a:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2e5e:	e8 e1       	ldi	r30, 0x18	; 24
    2e60:	f3 e2       	ldi	r31, 0x23	; 35
    2e62:	02 e0       	ldi	r16, 0x02	; 2
    2e64:	06 93       	lac	Z, r16
    2e66:	05 c0       	rjmp	.+10     	; 0x2e72 <__vector_126+0x1ba>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2e68:	80 38       	cpi	r24, 0x80	; 128
    2e6a:	11 f4       	brne	.+4      	; 0x2e70 <__vector_126+0x1b8>
		udd_ctrl_in_sent();
    2e6c:	22 d9       	rcall	.-3516   	; 0x20b2 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <__vector_126+0x1ba>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2e70:	3c da       	rcall	.-2952   	; 0x22ea <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2e72:	ff 91       	pop	r31
    2e74:	ef 91       	pop	r30
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	bf 91       	pop	r27
    2e7c:	af 91       	pop	r26
    2e7e:	9f 91       	pop	r25
    2e80:	8f 91       	pop	r24
    2e82:	7f 91       	pop	r23
    2e84:	6f 91       	pop	r22
    2e86:	5f 91       	pop	r21
    2e88:	4f 91       	pop	r20
    2e8a:	3f 91       	pop	r19
    2e8c:	2f 91       	pop	r18
    2e8e:	1f 91       	pop	r17
    2e90:	0f 91       	pop	r16
    2e92:	0f 90       	pop	r0
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	0f 90       	pop	r0
    2e98:	1f 90       	pop	r1
    2e9a:	18 95       	reti

00002e9c <__udivmodhi4>:
    2e9c:	aa 1b       	sub	r26, r26
    2e9e:	bb 1b       	sub	r27, r27
    2ea0:	51 e1       	ldi	r21, 0x11	; 17
    2ea2:	07 c0       	rjmp	.+14     	; 0x2eb2 <__udivmodhi4_ep>

00002ea4 <__udivmodhi4_loop>:
    2ea4:	aa 1f       	adc	r26, r26
    2ea6:	bb 1f       	adc	r27, r27
    2ea8:	a6 17       	cp	r26, r22
    2eaa:	b7 07       	cpc	r27, r23
    2eac:	10 f0       	brcs	.+4      	; 0x2eb2 <__udivmodhi4_ep>
    2eae:	a6 1b       	sub	r26, r22
    2eb0:	b7 0b       	sbc	r27, r23

00002eb2 <__udivmodhi4_ep>:
    2eb2:	88 1f       	adc	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	5a 95       	dec	r21
    2eb8:	a9 f7       	brne	.-22     	; 0x2ea4 <__udivmodhi4_loop>
    2eba:	80 95       	com	r24
    2ebc:	90 95       	com	r25
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	08 95       	ret

00002ec4 <__divmodhi4>:
    2ec4:	97 fb       	bst	r25, 7
    2ec6:	07 2e       	mov	r0, r23
    2ec8:	16 f4       	brtc	.+4      	; 0x2ece <__divmodhi4+0xa>
    2eca:	00 94       	com	r0
    2ecc:	06 d0       	rcall	.+12     	; 0x2eda <__divmodhi4_neg1>
    2ece:	77 fd       	sbrc	r23, 7
    2ed0:	08 d0       	rcall	.+16     	; 0x2ee2 <__divmodhi4_neg2>
    2ed2:	e4 df       	rcall	.-56     	; 0x2e9c <__udivmodhi4>
    2ed4:	07 fc       	sbrc	r0, 7
    2ed6:	05 d0       	rcall	.+10     	; 0x2ee2 <__divmodhi4_neg2>
    2ed8:	3e f4       	brtc	.+14     	; 0x2ee8 <__divmodhi4_exit>

00002eda <__divmodhi4_neg1>:
    2eda:	90 95       	com	r25
    2edc:	81 95       	neg	r24
    2ede:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee0:	08 95       	ret

00002ee2 <__divmodhi4_neg2>:
    2ee2:	70 95       	com	r23
    2ee4:	61 95       	neg	r22
    2ee6:	7f 4f       	sbci	r23, 0xFF	; 255

00002ee8 <__divmodhi4_exit>:
    2ee8:	08 95       	ret

00002eea <__tablejump2__>:
    2eea:	ee 0f       	add	r30, r30
    2eec:	ff 1f       	adc	r31, r31
    2eee:	05 90       	lpm	r0, Z+
    2ef0:	f4 91       	lpm	r31, Z
    2ef2:	e0 2d       	mov	r30, r0
    2ef4:	09 94       	ijmp

00002ef6 <memcpy>:
    2ef6:	fb 01       	movw	r30, r22
    2ef8:	dc 01       	movw	r26, r24
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <memcpy+0xa>
    2efc:	01 90       	ld	r0, Z+
    2efe:	0d 92       	st	X+, r0
    2f00:	41 50       	subi	r20, 0x01	; 1
    2f02:	50 40       	sbci	r21, 0x00	; 0
    2f04:	d8 f7       	brcc	.-10     	; 0x2efc <memcpy+0x6>
    2f06:	08 95       	ret

00002f08 <_exit>:
    2f08:	f8 94       	cli

00002f0a <__stop_program>:
    2f0a:	ff cf       	rjmp	.-2      	; 0x2f0a <__stop_program>
