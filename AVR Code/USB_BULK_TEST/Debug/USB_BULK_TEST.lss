
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00802000  00002f3e  00002fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b44  0080208c  0080208c  00003060  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  000030d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db18  00000000  00000000  000036d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024be  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ac63  00000000  00000000  000136a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f28  00000000  00000000  0001e30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030168  00000000  00000000  0001f234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037be  00000000  00000000  0004f39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00052b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c3d5  00000000  00000000  00053078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_6>
      1c:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_7>
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c1       	rjmp	.+586    	; 0x274 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c1       	rjmp	.+534    	; 0x274 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__vector_24>
      64:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_25>
      68:	05 c1       	rjmp	.+522    	; 0x274 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop
      98:	ed c0       	rjmp	.+474    	; 0x274 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	eb c0       	rjmp	.+470    	; 0x274 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e9 c0       	rjmp	.+466    	; 0x274 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e7 c0       	rjmp	.+462    	; 0x274 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e5 c0       	rjmp	.+458    	; 0x274 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e3 c0       	rjmp	.+454    	; 0x274 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e1 c0       	rjmp	.+450    	; 0x274 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	df c0       	rjmp	.+446    	; 0x274 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dd c0       	rjmp	.+442    	; 0x274 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c0       	rjmp	.+438    	; 0x274 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d9 c0       	rjmp	.+434    	; 0x274 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d7 c0       	rjmp	.+430    	; 0x274 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d5 c0       	rjmp	.+426    	; 0x274 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d3 c0       	rjmp	.+422    	; 0x274 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d1 c0       	rjmp	.+418    	; 0x274 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cf c0       	rjmp	.+414    	; 0x274 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cd c0       	rjmp	.+410    	; 0x274 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cb c0       	rjmp	.+406    	; 0x274 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c9 c0       	rjmp	.+402    	; 0x274 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c7 c0       	rjmp	.+398    	; 0x274 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c5 c0       	rjmp	.+394    	; 0x274 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c3 c0       	rjmp	.+390    	; 0x274 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c1 c0       	rjmp	.+386    	; 0x274 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bf c0       	rjmp	.+382    	; 0x274 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	bd c0       	rjmp	.+378    	; 0x274 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	bb c0       	rjmp	.+374    	; 0x274 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b9 c0       	rjmp	.+370    	; 0x274 <__bad_interrupt>
     102:	00 00       	nop
     104:	b7 c0       	rjmp	.+366    	; 0x274 <__bad_interrupt>
     106:	00 00       	nop
     108:	b5 c0       	rjmp	.+362    	; 0x274 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b3 c0       	rjmp	.+358    	; 0x274 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b1 c0       	rjmp	.+354    	; 0x274 <__bad_interrupt>
     112:	00 00       	nop
     114:	af c0       	rjmp	.+350    	; 0x274 <__bad_interrupt>
     116:	00 00       	nop
     118:	ad c0       	rjmp	.+346    	; 0x274 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b0 c4       	rjmp	.+2400   	; 0xa7e <__vector_71>
     11e:	00 00       	nop
     120:	a9 c0       	rjmp	.+338    	; 0x274 <__bad_interrupt>
     122:	00 00       	nop
     124:	a7 c0       	rjmp	.+334    	; 0x274 <__bad_interrupt>
     126:	00 00       	nop
     128:	a5 c0       	rjmp	.+330    	; 0x274 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a3 c0       	rjmp	.+326    	; 0x274 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a1 c0       	rjmp	.+322    	; 0x274 <__bad_interrupt>
     132:	00 00       	nop
     134:	9f c0       	rjmp	.+318    	; 0x274 <__bad_interrupt>
     136:	00 00       	nop
     138:	9d c0       	rjmp	.+314    	; 0x274 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	9b c0       	rjmp	.+310    	; 0x274 <__bad_interrupt>
     13e:	00 00       	nop
     140:	99 c0       	rjmp	.+306    	; 0x274 <__bad_interrupt>
     142:	00 00       	nop
     144:	97 c0       	rjmp	.+302    	; 0x274 <__bad_interrupt>
     146:	00 00       	nop
     148:	95 c0       	rjmp	.+298    	; 0x274 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_83>
     150:	91 c0       	rjmp	.+290    	; 0x274 <__bad_interrupt>
     152:	00 00       	nop
     154:	8f c0       	rjmp	.+286    	; 0x274 <__bad_interrupt>
     156:	00 00       	nop
     158:	8d c0       	rjmp	.+282    	; 0x274 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	8b c0       	rjmp	.+278    	; 0x274 <__bad_interrupt>
     15e:	00 00       	nop
     160:	89 c0       	rjmp	.+274    	; 0x274 <__bad_interrupt>
     162:	00 00       	nop
     164:	87 c0       	rjmp	.+270    	; 0x274 <__bad_interrupt>
     166:	00 00       	nop
     168:	85 c0       	rjmp	.+266    	; 0x274 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	83 c0       	rjmp	.+262    	; 0x274 <__bad_interrupt>
     16e:	00 00       	nop
     170:	81 c0       	rjmp	.+258    	; 0x274 <__bad_interrupt>
     172:	00 00       	nop
     174:	7f c0       	rjmp	.+254    	; 0x274 <__bad_interrupt>
     176:	00 00       	nop
     178:	7d c0       	rjmp	.+250    	; 0x274 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	7b c0       	rjmp	.+246    	; 0x274 <__bad_interrupt>
     17e:	00 00       	nop
     180:	79 c0       	rjmp	.+242    	; 0x274 <__bad_interrupt>
     182:	00 00       	nop
     184:	77 c0       	rjmp	.+238    	; 0x274 <__bad_interrupt>
     186:	00 00       	nop
     188:	75 c0       	rjmp	.+234    	; 0x274 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	73 c0       	rjmp	.+230    	; 0x274 <__bad_interrupt>
     18e:	00 00       	nop
     190:	71 c0       	rjmp	.+226    	; 0x274 <__bad_interrupt>
     192:	00 00       	nop
     194:	6f c0       	rjmp	.+222    	; 0x274 <__bad_interrupt>
     196:	00 00       	nop
     198:	6d c0       	rjmp	.+218    	; 0x274 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	6b c0       	rjmp	.+214    	; 0x274 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	69 c0       	rjmp	.+210    	; 0x274 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	67 c0       	rjmp	.+206    	; 0x274 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	65 c0       	rjmp	.+202    	; 0x274 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	63 c0       	rjmp	.+198    	; 0x274 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5f c0       	rjmp	.+190    	; 0x274 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5d c0       	rjmp	.+186    	; 0x274 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	5b c0       	rjmp	.+182    	; 0x274 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	59 c0       	rjmp	.+178    	; 0x274 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	57 c0       	rjmp	.+174    	; 0x274 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	55 c0       	rjmp	.+170    	; 0x274 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	53 c0       	rjmp	.+166    	; 0x274 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	51 c0       	rjmp	.+162    	; 0x274 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4f c0       	rjmp	.+158    	; 0x274 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4d c0       	rjmp	.+154    	; 0x274 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	4b c0       	rjmp	.+150    	; 0x274 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	49 c0       	rjmp	.+146    	; 0x274 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	47 c0       	rjmp	.+142    	; 0x274 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	45 c0       	rjmp	.+138    	; 0x274 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	43 c0       	rjmp	.+134    	; 0x274 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	41 c0       	rjmp	.+130    	; 0x274 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__vector_125>
     1f8:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__vector_126>
     1fc:	30 04       	cpc	r3, r0
     1fe:	32 04       	cpc	r3, r2
     200:	34 04       	cpc	r3, r4
     202:	36 04       	cpc	r3, r6
     204:	38 04       	cpc	r3, r8
     206:	3a 04       	cpc	r3, r10
     208:	3c 04       	cpc	r3, r12
     20a:	3e 04       	cpc	r3, r14
     20c:	62 0c       	add	r6, r2
     20e:	87 0c       	add	r8, r7
     210:	aa 0c       	add	r10, r10
     212:	cd 0c       	add	r12, r13
     214:	d6 0c       	add	r13, r6
     216:	db 0c       	add	r13, r11
     218:	31 0d       	add	r19, r1
     21a:	36 0d       	add	r19, r6
     21c:	55 0d       	add	r21, r5
     21e:	e7 0c       	add	r14, r7
     220:	f1 0c       	add	r15, r1
     222:	fb 0c       	add	r15, r11
     224:	09 0d       	add	r16, r9
     226:	0c 0d       	add	r16, r12
     228:	0f 0d       	add	r16, r15
     22a:	1a 0d       	add	r17, r10
     22c:	25 0d       	add	r18, r5
     22e:	27 11       	cpse	r18, r7
     230:	2a 11       	cpse	r18, r10
     232:	2d 11       	cpse	r18, r13
     234:	30 11       	cpse	r19, r0
     236:	33 11       	cpse	r19, r3
     238:	36 11       	cpse	r19, r6
     23a:	39 11       	cpse	r19, r9

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df e2       	ldi	r29, 0x2F	; 47
     246:	de bf       	out	0x3e, r29	; 62

00000248 <__do_copy_data>:
     248:	10 e2       	ldi	r17, 0x20	; 32
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	ee e3       	ldi	r30, 0x3E	; 62
     250:	ff e2       	ldi	r31, 0x2F	; 47
     252:	02 c0       	rjmp	.+4      	; 0x258 <__do_copy_data+0x10>
     254:	05 90       	lpm	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	ac 38       	cpi	r26, 0x8C	; 140
     25a:	b1 07       	cpc	r27, r17
     25c:	d9 f7       	brne	.-10     	; 0x254 <__do_copy_data+0xc>

0000025e <__do_clear_bss>:
     25e:	2b e2       	ldi	r18, 0x2B	; 43
     260:	ac e8       	ldi	r26, 0x8C	; 140
     262:	b0 e2       	ldi	r27, 0x20	; 32
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a0 3d       	cpi	r26, 0xD0	; 208
     26a:	b2 07       	cpc	r27, r18
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>
     26e:	ac d2       	rcall	.+1368   	; 0x7c8 <main>
     270:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <_exit>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	8e 83       	std	Y+6, r24	; 0x06
     282:	8c e1       	ldi	r24, 0x1C	; 28
     284:	b6 d3       	rcall	.+1900   	; 0x9f2 <ReadCalibrationByte>
     286:	e0 e6       	ldi	r30, 0x60	; 96
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	83 83       	std	Z+3, r24	; 0x03
     28c:	8b eb       	ldi	r24, 0xBB	; 187
     28e:	86 83       	std	Z+6, r24	; 0x06
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	85 83       	std	Z+5, r24	; 0x05
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	88 ed       	ldi	r24, 0xD8	; 216
     29a:	84 bf       	out	0x34, r24	; 52
     29c:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	88 83       	st	Y, r24
     2a4:	e0 e5       	ldi	r30, 0x50	; 80
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	81 81       	ldd	r24, Z+1	; 0x01
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	e9 f7       	brne	.-6      	; 0x2a8 <tiny_calibration_init+0x32>
     2ae:	e0 e5       	ldi	r30, 0x50	; 80
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	80 83       	st	Z, r24
     2b8:	88 e1       	ldi	r24, 0x18	; 24
     2ba:	85 83       	std	Z+5, r24	; 0x05
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	80 ff       	sbrs	r24, 0
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <tiny_calibration_init+0x46>
     2c2:	e0 e5       	ldi	r30, 0x50	; 80
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 83       	st	Z, r24
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	84 ff       	sbrs	r24, 4
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x56>
     2d2:	88 ed       	ldi	r24, 0xD8	; 216
     2d4:	84 bf       	out	0x34, r24	; 52
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <tiny_calibration_first_sof>:
     2e2:	e0 e7       	ldi	r30, 0x70	; 112
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	85 81       	ldd	r24, Z+5	; 0x05
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	85 83       	std	Z+5, r24	; 0x05
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	8f eb       	ldi	r24, 0xBF	; 191
     2f2:	9d e5       	ldi	r25, 0x5D	; 93
     2f4:	86 a3       	std	Z+38, r24	; 0x26
     2f6:	97 a3       	std	Z+39, r25	; 0x27
     2f8:	80 ee       	ldi	r24, 0xE0	; 224
     2fa:	9e e2       	ldi	r25, 0x2E	; 46
     2fc:	80 a3       	std	Z+32, r24	; 0x20
     2fe:	91 a3       	std	Z+33, r25	; 0x21
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
     304:	08 95       	ret

00000306 <tiny_calibration_maintain>:
     306:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     30a:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     30e:	81 3e       	cpi	r24, 0xE1	; 225
     310:	2e e2       	ldi	r18, 0x2E	; 46
     312:	92 07       	cpc	r25, r18
     314:	20 f0       	brcs	.+8      	; 0x31e <tiny_calibration_maintain+0x18>
     316:	20 91 72 21 	lds	r18, 0x2172	; 0x802172 <cali_value_negative_gradient>
     31a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     31e:	80 3e       	cpi	r24, 0xE0	; 224
     320:	2e e2       	ldi	r18, 0x2E	; 46
     322:	92 07       	cpc	r25, r18
     324:	20 f4       	brcc	.+8      	; 0x32e <tiny_calibration_maintain+0x28>
     326:	20 91 6f 21 	lds	r18, 0x216F	; 0x80216f <cali_value_positive_gradient>
     32a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     32e:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     332:	22 23       	and	r18, r18
     334:	31 f0       	breq	.+12     	; 0x342 <tiny_calibration_maintain+0x3c>
     336:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     340:	35 c0       	rjmp	.+106    	; 0x3ac <tiny_calibration_maintain+0xa6>
     342:	88 5f       	subi	r24, 0xF8	; 248
     344:	9a 42       	sbci	r25, 0x2A	; 42
     346:	81 3d       	cpi	r24, 0xD1	; 209
     348:	97 40       	sbci	r25, 0x07	; 7
     34a:	80 f1       	brcs	.+96     	; 0x3ac <tiny_calibration_maintain+0xa6>
     34c:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <__data_end>
     350:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     354:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     358:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     35c:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	a1 1d       	adc	r26, r1
     364:	b1 1d       	adc	r27, r1
     366:	80 93 8d 20 	sts	0x208D, r24	; 0x80208d <outOfRange>
     36a:	90 93 8e 20 	sts	0x208E, r25	; 0x80208e <outOfRange+0x1>
     36e:	a0 93 8f 20 	sts	0x208F, r26	; 0x80208f <outOfRange+0x2>
     372:	b0 93 90 20 	sts	0x2090, r27	; 0x802090 <outOfRange+0x3>
     376:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     37a:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     37e:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     382:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     386:	89 2f       	mov	r24, r25
     388:	9a 2f       	mov	r25, r26
     38a:	ab 2f       	mov	r26, r27
     38c:	bb 27       	eor	r27, r27
     38e:	ee e7       	ldi	r30, 0x7E	; 126
     390:	f1 e2       	ldi	r31, 0x21	; 33
     392:	84 8b       	std	Z+20, r24	; 0x14
     394:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     398:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     39c:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     3a0:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     3a4:	83 8b       	std	Z+19, r24	; 0x13
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3ac:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3b0:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b1 f4       	brne	.+44     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3b8:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3bc:	8f 3f       	cpi	r24, 0xFF	; 255
     3be:	91 f0       	breq	.+36     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3c0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3c4:	81 11       	cpse	r24, r1
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <tiny_calibration_maintain+0xce>
     3c8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3d2:	08 95       	ret
     3d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3dc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3e0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3e4:	08 95       	ret

000003e6 <tiny_calibration_safe_add>:
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	09 f4       	brne	.+2      	; 0x3ec <tiny_calibration_safe_add+0x6>
     3ea:	66 c0       	rjmp	.+204    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <tiny_calibration_safe_add+0xa>
     3ee:	9c 01       	movw	r18, r24
     3f0:	99 23       	and	r25, r25
     3f2:	34 f4       	brge	.+12     	; 0x400 <__FUSE_REGION_LENGTH__>
     3f4:	22 27       	eor	r18, r18
     3f6:	33 27       	eor	r19, r19
     3f8:	28 1b       	sub	r18, r24
     3fa:	39 0b       	sbc	r19, r25
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	e8 e6       	ldi	r30, 0x68	; 104
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	83 81       	ldd	r24, Z+3	; 0x03
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     40e:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     412:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     416:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     41a:	96 95       	lsr	r25
     41c:	98 2f       	mov	r25, r24
     41e:	88 27       	eor	r24, r24
     420:	97 95       	ror	r25
     422:	87 95       	ror	r24
     424:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     428:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     42c:	42 81       	ldd	r20, Z+2	; 0x02
     42e:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     432:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     436:	84 0f       	add	r24, r20
     438:	91 1d       	adc	r25, r1
     43a:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     43e:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     442:	00 00       	nop
     444:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     448:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	28 f4       	brcc	.+10     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
     452:	10 92 70 21 	sts	0x2170, r1	; 0x802170 <calTemp>
     456:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <calTemp+0x1>
     45a:	08 95       	ret
     45c:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     460:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	81 15       	cp	r24, r1
     46a:	90 42       	sbci	r25, 0x20	; 32
     46c:	38 f0       	brcs	.+14     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	9f e1       	ldi	r25, 0x1F	; 31
     472:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     476:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     47a:	08 95       	ret
     47c:	55 23       	and	r21, r21
     47e:	59 f0       	breq	.+22     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     480:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     484:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     488:	82 1b       	sub	r24, r18
     48a:	93 0b       	sbc	r25, r19
     48c:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     490:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     496:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     49a:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     49e:	28 0f       	add	r18, r24
     4a0:	39 1f       	adc	r19, r25
     4a2:	20 93 70 21 	sts	0x2170, r18	; 0x802170 <calTemp>
     4a6:	30 93 71 21 	sts	0x2171, r19	; 0x802171 <calTemp+0x1>
     4aa:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     4ae:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     4b2:	8f 77       	andi	r24, 0x7F	; 127
     4b4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4b8:	08 95       	ret

000004ba <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4be:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4c2:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4c6:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4ca:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4ce:	9e 01       	movw	r18, r28
     4d0:	28 1b       	sub	r18, r24
     4d2:	39 0b       	sbc	r19, r25
     4d4:	20 93 73 21 	sts	0x2173, r18	; 0x802173 <gradient>
     4d8:	30 93 74 21 	sts	0x2174, r19	; 0x802174 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4dc:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     4e0:	81 11       	cpse	r24, r1
     4e2:	4d c0       	rjmp	.+154    	; 0x57e <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4e4:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     4e8:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     4ec:	8e 3c       	cpi	r24, 0xCE	; 206
     4ee:	9f 4f       	sbci	r25, 0xFF	; 255
     4f0:	e4 f4       	brge	.+56     	; 0x52a <tiny_calibration_find_values+0x70>
     4f2:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     4f6:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     4fa:	8b 36       	cpi	r24, 0x6B	; 107
     4fc:	9f 4f       	sbci	r25, 0xFF	; 255
     4fe:	ac f0       	brlt	.+42     	; 0x52a <tiny_calibration_find_values+0x70>
			if(inarow){
     500:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     504:	88 23       	and	r24, r24
     506:	31 f0       	breq	.+12     	; 0x514 <tiny_calibration_find_values+0x5a>
				inarow--;
     508:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     512:	35 c0       	rjmp	.+106    	; 0x57e <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     514:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     518:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <__data_end>
				inarow = NUM_INAROW;
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     528:	2a c0       	rjmp	.+84     	; 0x57e <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     52a:	8c e0       	ldi	r24, 0x0C	; 12
     52c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     530:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     534:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     538:	8a 36       	cpi	r24, 0x6A	; 106
     53a:	9f 4f       	sbci	r25, 0xFF	; 255
     53c:	1c f0       	brlt	.+6      	; 0x544 <tiny_calibration_find_values+0x8a>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	02 c0       	rjmp	.+4      	; 0x548 <tiny_calibration_find_values+0x8e>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <calChange>
     54c:	90 93 6e 21 	sts	0x216E, r25	; 0x80216e <calChange+0x1>
			calChange -= gradient / 48;
     550:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     554:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     558:	20 91 6d 21 	lds	r18, 0x216D	; 0x80216d <calChange>
     55c:	30 91 6e 21 	lds	r19, 0x216E	; 0x80216e <calChange+0x1>
     560:	60 e3       	ldi	r22, 0x30	; 48
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__divmodhi4>
     568:	26 1b       	sub	r18, r22
     56a:	37 0b       	sbc	r19, r23
     56c:	20 93 6d 21 	sts	0x216D, r18	; 0x80216d <calChange>
     570:	30 93 6e 21 	sts	0x216E, r19	; 0x80216e <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     574:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <calChange>
     578:	90 91 6e 21 	lds	r25, 0x216E	; 0x80216e <calChange+0x1>
     57c:	34 df       	rcall	.-408    	; 0x3e6 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     57e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	29 f5       	brne	.+74     	; 0x5d0 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     586:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     58a:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     58e:	c3 97       	sbiw	r24, 0x33	; 51
     590:	94 f0       	brlt	.+36     	; 0x5b6 <tiny_calibration_find_values+0xfc>
			if(inarow){
     592:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     596:	88 23       	and	r24, r24
     598:	31 f0       	breq	.+12     	; 0x5a6 <tiny_calibration_find_values+0xec>
				inarow--;
     59a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5a4:	15 c0       	rjmp	.+42     	; 0x5d0 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5a6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5aa:	80 93 6f 21 	sts	0x216F, r24	; 0x80216f <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <__data_end>
     5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5b6:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     5ba:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     5be:	87 39       	cpi	r24, 0x97	; 151
     5c0:	91 05       	cpc	r25, r1
     5c2:	1c f4       	brge	.+6      	; 0x5ca <tiny_calibration_find_values+0x110>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <tiny_calibration_find_values+0x114>
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	0b df       	rcall	.-490    	; 0x3e6 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5d0:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5d4:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5de:	86 17       	cp	r24, r22
     5e0:	97 07       	cpc	r25, r23
     5e2:	79 f0       	breq	.+30     	; 0x602 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5e4:	68 17       	cp	r22, r24
     5e6:	79 07       	cpc	r23, r25
     5e8:	28 f4       	brcc	.+10     	; 0x5f4 <magnitude_difference+0x16>
     5ea:	9c 01       	movw	r18, r24
     5ec:	26 1b       	sub	r18, r22
     5ee:	37 0b       	sbc	r19, r23
     5f0:	b9 01       	movw	r22, r18
     5f2:	09 c0       	rjmp	.+18     	; 0x606 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5f4:	86 17       	cp	r24, r22
     5f6:	97 07       	cpc	r25, r23
     5f8:	18 f4       	brcc	.+6      	; 0x600 <magnitude_difference+0x22>
     5fa:	68 1b       	sub	r22, r24
     5fc:	79 0b       	sbc	r23, r25
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <magnitude_difference+0x28>
     600:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	86 2f       	mov	r24, r22
     608:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     60a:	08 95       	ret

0000060c <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     614:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     618:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     61c:	89 2b       	or	r24, r25
     61e:	51 f0       	breq	.+20     	; 0x634 <tiny_calibration_layer2+0x28>
		layer2_counter--;
     620:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     624:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     62e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     632:	4d c0       	rjmp	.+154    	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	layer2_counter = LAYER2_INTERVAL;
     634:	80 e4       	ldi	r24, 0x40	; 64
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     63c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     640:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     644:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <tiny_calibration_layer2+0x42>
     64c:	40 c0       	rjmp	.+128    	; 0x6ce <tiny_calibration_layer2+0xc2>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     64e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     652:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	TRFCNT_temp = TRFCNT_temp % (global_mode > 5 ? PACKET_SIZE : HALFPACKET_SIZE);
     656:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <global_mode>
     65a:	26 30       	cpi	r18, 0x06	; 6
     65c:	18 f4       	brcc	.+6      	; 0x664 <tiny_calibration_layer2+0x58>
     65e:	67 e7       	ldi	r22, 0x77	; 119
     660:	71 e0       	ldi	r23, 0x01	; 1
     662:	02 c0       	rjmp	.+4      	; 0x668 <tiny_calibration_layer2+0x5c>
     664:	6e ee       	ldi	r22, 0xEE	; 238
     666:	72 e0       	ldi	r23, 0x02	; 2
     668:	0e 94 67 17 	call	0x2ece	; 0x2ece <__udivmodhi4>
     66c:	08 2f       	mov	r16, r24
     66e:	19 2f       	mov	r17, r25
     670:	c8 2f       	mov	r28, r24
     672:	d1 2f       	mov	r29, r17
	
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     674:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     678:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     67c:	8c 17       	cp	r24, r28
     67e:	9d 07       	cpc	r25, r29
     680:	80 f4       	brcc	.+32     	; 0x6a2 <tiny_calibration_layer2+0x96>
     682:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     686:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68a:	80 2f       	mov	r24, r16
     68c:	91 2f       	mov	r25, r17
     68e:	a7 df       	rcall	.-178    	; 0x5de <magnitude_difference>
     690:	02 97       	sbiw	r24, 0x02	; 2
     692:	38 f0       	brcs	.+14     	; 0x6a2 <tiny_calibration_layer2+0x96>
		TC_CALI.PERBUF = 24000;
     694:	80 ec       	ldi	r24, 0xC0	; 192
     696:	9d e5       	ldi	r25, 0x5D	; 93
     698:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     69c:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6a0:	16 c0       	rjmp	.+44     	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6a2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6a6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6aa:	c8 17       	cp	r28, r24
     6ac:	d9 07       	cpc	r29, r25
     6ae:	78 f4       	brcc	.+30     	; 0x6ce <tiny_calibration_layer2+0xc2>
     6b0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6b4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6b8:	80 2f       	mov	r24, r16
     6ba:	91 2f       	mov	r25, r17
     6bc:	90 df       	rcall	.-224    	; 0x5de <magnitude_difference>
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	30 f0       	brcs	.+12     	; 0x6ce <tiny_calibration_layer2+0xc2>
		TC_CALI.PERBUF = 23999;
     6c2:	8f eb       	ldi	r24, 0xBF	; 191
     6c4:	9d e5       	ldi	r25, 0x5D	; 93
     6c6:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ca:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6d8:	ac 01       	movw	r20, r24
     6da:	46 0f       	add	r20, r22
     6dc:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6de:	86 1b       	sub	r24, r22
     6e0:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6e2:	e0 e0       	ldi	r30, 0x00	; 0
     6e4:	fa e0       	ldi	r31, 0x0A	; 10
     6e6:	20 a1       	ldd	r18, Z+32	; 0x20
     6e8:	31 a1       	ldd	r19, Z+33	; 0x21
     6ea:	24 17       	cp	r18, r20
     6ec:	35 07       	cpc	r19, r21
     6ee:	d8 f7       	brcc	.-10     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
     6f0:	20 a1       	ldd	r18, Z+32	; 0x20
     6f2:	31 a1       	ldd	r19, Z+33	; 0x21
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	b0 f7       	brcc	.-20     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     6fa:	08 95       	ret

000006fc <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     6fc:	e0 e8       	ldi	r30, 0x80	; 128
     6fe:	f6 e0       	ldi	r31, 0x06	; 6
     700:	8f e0       	ldi	r24, 0x0F	; 15
     702:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	84 83       	std	Z+4, r24	; 0x04
     708:	08 95       	ret

0000070a <eeprom_safe_read>:
 *  Author: Esposch
 */ 
#include <asf.h>
#include "tiny_eeprom.h"

void eeprom_safe_read(){
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     710:	c0 e4       	ldi	r28, 0x40	; 64
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     716:	80 e4       	ldi	r24, 0x40	; 64
     718:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_read_buffer(EEPROM_CURRENT_PAGE*EEPROM_PAGE_SIZE, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     71a:	40 e2       	ldi	r20, 0x20	; 32
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	68 ea       	ldi	r22, 0xA8	; 168
     720:	7b e2       	ldi	r23, 0x2B	; 43
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <nvm_eeprom_read_buffer>
	CLK.PSCTRL = previous_clk_settings;
     72a:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	08 95       	ret

00000734 <eeprom_safe_write>:

void eeprom_safe_write(){
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     73a:	c0 e4       	ldi	r28, 0x40	; 64
     73c:	d0 e0       	ldi	r29, 0x00	; 0
     73e:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     740:	80 e4       	ldi	r24, 0x40	; 64
     742:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_load_page_to_buffer(eeprom_buffer_write);
     744:	8b ea       	ldi	r24, 0xAB	; 171
     746:	95 e2       	ldi	r25, 0x25	; 37
     748:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <nvm_eeprom_load_page_to_buffer>
	nvm_eeprom_atomic_write_page(EEPROM_CURRENT_PAGE);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 12 10 	call	0x2024	; 0x2024 <nvm_eeprom_atomic_write_page>
	CLK.PSCTRL = previous_clk_settings;
     752:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     75c:	08 95       	ret

0000075e <iso_callback>:
bool main_setup_in_received(void)
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
		else{
			udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE + offset], 125, iso_callback);
		}
		return;
	#else
			if (global_mode < 1){
     762:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     766:	81 11       	cpse	r24, r1
     768:	14 c0       	rjmp	.+40     	; 0x792 <iso_callback+0x34>
		udd_ep_run(0x81, false, (uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], PACKET_SIZE, iso_callback);
     76a:	20 91 96 20 	lds	r18, 0x2096	; 0x802096 <usb_state>
     76e:	87 e7       	ldi	r24, 0x77	; 119
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	28 9f       	mul	r18, r24
     774:	a0 01       	movw	r20, r0
     776:	29 9f       	mul	r18, r25
     778:	50 0d       	add	r21, r0
     77a:	11 24       	eor	r1, r1
     77c:	44 53       	subi	r20, 0x34	; 52
     77e:	5a 4d       	sbci	r21, 0xDA	; 218
     780:	0f ea       	ldi	r16, 0xAF	; 175
     782:	13 e0       	ldi	r17, 0x03	; 3
     784:	2e ee       	ldi	r18, 0xEE	; 238
     786:	32 e0       	ldi	r19, 0x02	; 2
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	81 e8       	ldi	r24, 0x81	; 129
     78c:	0e 94 7f 14 	call	0x28fe	; 0x28fe <udd_ep_run>
     790:	13 c0       	rjmp	.+38     	; 0x7b8 <iso_callback+0x5a>
			}
			else{
		udd_ep_run(0x81, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE], PACKET_SIZE, iso_callback);
     792:	20 91 96 20 	lds	r18, 0x2096	; 0x802096 <usb_state>
     796:	8e ee       	ldi	r24, 0xEE	; 238
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	28 9f       	mul	r18, r24
     79c:	a0 01       	movw	r20, r0
     79e:	29 9f       	mul	r18, r25
     7a0:	50 0d       	add	r21, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	44 53       	subi	r20, 0x34	; 52
     7a6:	5a 4d       	sbci	r21, 0xDA	; 218
     7a8:	0f ea       	ldi	r16, 0xAF	; 175
     7aa:	13 e0       	ldi	r17, 0x03	; 3
     7ac:	2e ee       	ldi	r18, 0xEE	; 238
     7ae:	32 e0       	ldi	r19, 0x02	; 2
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	81 e8       	ldi	r24, 0x81	; 129
     7b4:	0e 94 7f 14 	call	0x28fe	; 0x28fe <udd_ep_run>
			}

	#endif
}
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <jump_to_bootloader>:
volatile unsigned char eeprom_buffer_write[EEPROM_PAGE_SIZE];
volatile unsigned char eeprom_buffer_read[EEPROM_PAGE_SIZE];

void jump_to_bootloader(){
	void(* start_bootloader)(void) = (void (*)(void))((BOOT_SECTION_START + ATMEL_DFU_OFFSET)>>1);
	EIND = BOOT_SECTION_START>>17;
     7be:	1c be       	out	0x3c, r1	; 60
	start_bootloader();
     7c0:	ee ef       	ldi	r30, 0xFE	; 254
     7c2:	f0 e4       	ldi	r31, 0x40	; 64
     7c4:	09 95       	icall
     7c6:	08 95       	ret

000007c8 <main>:
}

int main(void){	
	eeprom_safe_read();
     7c8:	a0 df       	rcall	.-192    	; 0x70a <eeprom_safe_read>
	if(eeprom_buffer_read[0]){
     7ca:	80 91 a8 2b 	lds	r24, 0x2BA8	; 0x802ba8 <eeprom_buffer_read>
     7ce:	88 23       	and	r24, r24
     7d0:	69 f0       	breq	.+26     	; 0x7ec <main+0x24>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     7d2:	80 e2       	ldi	r24, 0x20	; 32
     7d4:	e8 ea       	ldi	r30, 0xA8	; 168
     7d6:	fb e2       	ldi	r31, 0x2B	; 43
     7d8:	ab ea       	ldi	r26, 0xAB	; 171
     7da:	b5 e2       	ldi	r27, 0x25	; 37
     7dc:	01 90       	ld	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	8a 95       	dec	r24
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <main+0x14>
			eeprom_buffer_write[0] = 0;
     7e4:	10 92 ab 25 	sts	0x25AB, r1	; 0x8025ab <eeprom_buffer_write>
			eeprom_safe_write();
     7e8:	a5 df       	rcall	.-182    	; 0x734 <eeprom_safe_write>
			//eeprom_safe_read();
			jump_to_bootloader();
     7ea:	e9 df       	rcall	.-46     	; 0x7be <jump_to_bootloader>
	}
	
	irq_initialize_vectors();
     7ec:	87 e0       	ldi	r24, 0x07	; 7
     7ee:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     7f2:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     7f4:	40 dd       	rcall	.-1408   	; 0x276 <tiny_calibration_init>
		
	board_init();
     7f6:	b2 df       	rcall	.-156    	; 0x75c <board_init>
	udc_start();
     7f8:	e3 d7       	rcall	.+4038   	; 0x17c0 <udc_start>
	tiny_dac_setup();
     7fa:	54 d1       	rcall	.+680    	; 0xaa4 <tiny_dac_setup>
	tiny_dma_setup();
     7fc:	77 d1       	rcall	.+750    	; 0xaec <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	00 d1       	rcall	.+512    	; 0xa04 <tiny_adc_setup>
	tiny_adc_pid_setup();
     804:	ec d0       	rcall	.+472    	; 0x9de <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     806:	8c e0       	ldi	r24, 0x0C	; 12
     808:	e0 d0       	rcall	.+448    	; 0x9ca <tiny_adc_ch1setup>
	tiny_timer_setup();
     80a:	6f d5       	rcall	.+2782   	; 0x12ea <tiny_timer_setup>
	tiny_uart_setup();
     80c:	2a d6       	rcall	.+3156   	; 0x1462 <tiny_uart_setup>
	tiny_spi_setup();
     80e:	43 d6       	rcall	.+3206   	; 0x1496 <tiny_spi_setup>
	tiny_dig_setup();
     810:	75 df       	rcall	.-278    	; 0x6fc <tiny_dig_setup>
	//USARTC0.DATA = 0x55;
	//asm("nop");
	


	strcpy(uds.header, "debug123");
     812:	89 e0       	ldi	r24, 0x09	; 9
     814:	e0 e8       	ldi	r30, 0x80	; 128
     816:	f0 e2       	ldi	r31, 0x20	; 32
     818:	ae e7       	ldi	r26, 0x7E	; 126
     81a:	b1 e2       	ldi	r27, 0x21	; 33
     81c:	01 90       	ld	r0, Z+
     81e:	0d 92       	st	X+, r0
     820:	8a 95       	dec	r24
     822:	e1 f7       	brne	.-8      	; 0x81c <main+0x54>
	...
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			if(modeChanged){
     840:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <modeChanged>
     844:	88 23       	and	r24, r24
     846:	71 f3       	breq	.-36     	; 0x824 <main+0x5c>
				switch(futureMode){
     848:	e0 91 aa 23 	lds	r30, 0x23AA	; 0x8023aa <futureMode>
     84c:	8e 2f       	mov	r24, r30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	88 30       	cpi	r24, 0x08	; 8
     852:	91 05       	cpc	r25, r1
     854:	a0 f4       	brcc	.+40     	; 0x87e <main+0xb6>
     856:	fc 01       	movw	r30, r24
     858:	e2 50       	subi	r30, 0x02	; 2
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
     860:	71 d1       	rcall	.+738    	; 0xb44 <tiny_dma_set_mode_0>
					break;
     862:	0d c0       	rjmp	.+26     	; 0x87e <main+0xb6>
					case 1:
					tiny_dma_set_mode_1();
     864:	e1 d1       	rcall	.+962    	; 0xc28 <tiny_dma_set_mode_1>
					break;
     866:	0b c0       	rjmp	.+22     	; 0x87e <main+0xb6>
					case 2:
					tiny_dma_set_mode_2();
     868:	68 d2       	rcall	.+1232   	; 0xd3a <tiny_dma_set_mode_2>
					break;
     86a:	09 c0       	rjmp	.+18     	; 0x87e <main+0xb6>
					case 3:
					tiny_dma_set_mode_3();
     86c:	ec d2       	rcall	.+1496   	; 0xe46 <tiny_dma_set_mode_3>
					break;
     86e:	07 c0       	rjmp	.+14     	; 0x87e <main+0xb6>
					case 4:
					tiny_dma_set_mode_4();
     870:	78 d3       	rcall	.+1776   	; 0xf62 <tiny_dma_set_mode_4>
					break;
     872:	05 c0       	rjmp	.+10     	; 0x87e <main+0xb6>
					case 5:
					tiny_dma_set_mode_5();
     874:	fe d3       	rcall	.+2044   	; 0x1072 <tiny_dma_set_mode_5>
					break;
     876:	03 c0       	rjmp	.+6      	; 0x87e <main+0xb6>
					case 6:
					tiny_dma_set_mode_6();
     878:	fd d3       	rcall	.+2042   	; 0x1074 <tiny_dma_set_mode_6>
					break;
     87a:	01 c0       	rjmp	.+2      	; 0x87e <main+0xb6>
					case 7:
					tiny_dma_set_mode_7();
     87c:	6e d4       	rcall	.+2268   	; 0x115a <tiny_dma_set_mode_7>
					break;
				}
				modeChanged = 0;
     87e:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <modeChanged>
     882:	d0 cf       	rjmp	.-96     	; 0x824 <main+0x5c>

00000884 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     884:	08 95       	ret

00000886 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     886:	08 95       	ret

00000888 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b1 e0       	ldi	r27, 0x01	; 1
     890:	54 96       	adiw	r26, 0x14	; 20
     892:	8c 91       	ld	r24, X
     894:	54 97       	sbiw	r26, 0x14	; 20
     896:	ee e7       	ldi	r30, 0x7E	; 126
     898:	f1 e2       	ldi	r31, 0x21	; 33
     89a:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     89c:	55 96       	adiw	r26, 0x15	; 21
     89e:	8c 91       	ld	r24, X
     8a0:	55 97       	sbiw	r26, 0x15	; 21
     8a2:	82 87       	std	Z+10, r24	; 0x0a
	uds.trfcntL1 = DMA.CH1.TRFCNTL;
     8a4:	94 96       	adiw	r26, 0x24	; 36
     8a6:	8c 91       	ld	r24, X
     8a8:	94 97       	sbiw	r26, 0x24	; 36
     8aa:	83 87       	std	Z+11, r24	; 0x0b
	uds.trfcntH1 = DMA.CH1.TRFCNTH;
     8ac:	95 96       	adiw	r26, 0x25	; 37
     8ae:	8c 91       	ld	r24, X
     8b0:	95 97       	sbiw	r26, 0x25	; 37
     8b2:	84 87       	std	Z+12, r24	; 0x0c
	uds.counterL = TC_CALI.CNTL;
     8b4:	c0 e0       	ldi	r28, 0x00	; 0
     8b6:	da e0       	ldi	r29, 0x0A	; 10
     8b8:	88 a1       	ldd	r24, Y+32	; 0x20
     8ba:	85 8b       	std	Z+21, r24	; 0x15
	uds.counterH = TC_CALI.CNTH;
     8bc:	89 a1       	ldd	r24, Y+33	; 0x21
     8be:	86 8b       	std	Z+22, r24	; 0x16
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     8c0:	54 96       	adiw	r26, 0x14	; 20
     8c2:	8d 91       	ld	r24, X+
     8c4:	9c 91       	ld	r25, X
     8c6:	55 97       	sbiw	r26, 0x15	; 21
     8c8:	86 34       	cpi	r24, 0x46	; 70
     8ca:	91 40       	sbci	r25, 0x01	; 1
     8cc:	80 f0       	brcs	.+32     	; 0x8ee <main_sof_action+0x66>
     8ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8d2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8d6:	89 3a       	cpi	r24, 0xA9	; 169
     8d8:	91 40       	sbci	r25, 0x01	; 1
     8da:	48 f4       	brcc	.+18     	; 0x8ee <main_sof_action+0x66>
		currentTrfcnt = DMA.CH0.TRFCNT;
     8dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8e0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8e4:	80 93 c8 2b 	sts	0x2BC8, r24	; 0x802bc8 <currentTrfcnt>
     8e8:	90 93 c9 2b 	sts	0x2BC9, r25	; 0x802bc9 <currentTrfcnt+0x1>
		asm("nop");
     8ec:	00 00       	nop
	}
	if(firstFrame){
     8ee:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <firstFrame>
     8f2:	88 23       	and	r24, r24
     8f4:	39 f0       	breq	.+14     	; 0x904 <main_sof_action+0x7c>
		tiny_calibration_first_sof();
     8f6:	f5 dc       	rcall	.-1558   	; 0x2e2 <tiny_calibration_first_sof>
		firstFrame = 0;
     8f8:	10 92 94 20 	sts	0x2094, r1	; 0x802094 <firstFrame>
		tcinit = 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <tcinit>
		return;
     902:	35 c0       	rjmp	.+106    	; 0x96e <main_sof_action+0xe6>
	}
	else{
		if(tcinit){
     904:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <tcinit>
     908:	88 23       	and	r24, r24
     90a:	41 f0       	breq	.+16     	; 0x91c <main_sof_action+0x94>
			if(calibration_values_found == 0x03){
     90c:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	19 f4       	brne	.+6      	; 0x91a <main_sof_action+0x92>
				tiny_calibration_maintain();
     914:	f8 dc       	rcall	.-1552   	; 0x306 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     916:	7a de       	rcall	.-780    	; 0x60c <tiny_calibration_layer2>
     918:	01 c0       	rjmp	.+2      	; 0x91c <main_sof_action+0x94>
			} else tiny_calibration_find_values();
     91a:	cf dd       	rcall	.-1122   	; 0x4ba <tiny_calibration_find_values>
			}
			else debug_divider++;*/
		}
	}
	
	if(debugOnNextEnd){
     91c:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <debugOnNextEnd>
     920:	88 23       	and	r24, r24
     922:	51 f0       	breq	.+20     	; 0x938 <main_sof_action+0xb0>
		currentTrfcnt = DMA.CH0.TRFCNT;
     924:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     928:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     92c:	80 93 c8 2b 	sts	0x2BC8, r24	; 0x802bc8 <currentTrfcnt>
     930:	90 93 c9 2b 	sts	0x2BC9, r25	; 0x802bc9 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     934:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <debugOnNextEnd>
	}
	if(global_mode < 5){
     938:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     93c:	85 30       	cpi	r24, 0x05	; 5
     93e:	60 f4       	brcc	.+24     	; 0x958 <main_sof_action+0xd0>
		usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     940:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     944:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	27 37       	cpi	r18, 0x77	; 119
     94c:	31 40       	sbci	r19, 0x01	; 1
     94e:	08 f0       	brcs	.+2      	; 0x952 <main_sof_action+0xca>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <usb_state>
     956:	0b c0       	rjmp	.+22     	; 0x96e <main_sof_action+0xe6>
	}
	else{
		usb_state = (DMA.CH0.TRFCNT < 750) ? 1 : 0;
     958:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     95c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	2e 3e       	cpi	r18, 0xEE	; 238
     964:	32 40       	sbci	r19, 0x02	; 2
     966:	08 f0       	brcs	.+2      	; 0x96a <main_sof_action+0xe2>
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <usb_state>
	}
	return;
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <main_vendor_enable>:

bool main_vendor_enable(void)
{
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
	main_b_vendor_enable = true;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 99 20 	sts	0x2099, r24	; 0x802099 <main_b_vendor_enable>
	firstFrame = 1;
     97e:	80 93 94 20 	sts	0x2094, r24	; 0x802094 <firstFrame>
	udd_ep_run(0x81, false, (uint8_t *)&isoBuf[0], 125, iso_callback);
     982:	0f ea       	ldi	r16, 0xAF	; 175
     984:	13 e0       	ldi	r17, 0x03	; 3
     986:	2d e7       	ldi	r18, 0x7D	; 125
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	4c ec       	ldi	r20, 0xCC	; 204
     98c:	55 e2       	ldi	r21, 0x25	; 37
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	81 e8       	ldi	r24, 0x81	; 129
     992:	0e 94 7f 14 	call	0x28fe	; 0x28fe <udd_ep_run>
	udd_ep_run(0x84, false, (uint8_t *)&isoBuf[375], 125, iso_callback);
	udd_ep_run(0x85, false, (uint8_t *)&isoBuf[500], 125, iso_callback);
	udd_ep_run(0x86, false, (uint8_t *)&isoBuf[625], 125, iso_callback);
	#endif
	return true;
}
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	08 95       	ret

0000099e <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     99e:	10 92 99 20 	sts	0x2099, r1	; 0x802099 <main_b_vendor_enable>
     9a2:	08 95       	ret

000009a4 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	08 95       	ret

000009a8 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	08 95       	ret

000009ac <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     9ac:	e0 e0       	ldi	r30, 0x00	; 0
     9ae:	f2 e0       	ldi	r31, 0x02	; 2
     9b0:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     9b2:	98 2f       	mov	r25, r24
     9b4:	9c 71       	andi	r25, 0x1C	; 28
     9b6:	93 68       	ori	r25, 0x83	; 131
     9b8:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     9ba:	88 1f       	adc	r24, r24
     9bc:	88 27       	eor	r24, r24
     9be:	88 1f       	adc	r24, r24
     9c0:	88 0f       	add	r24, r24
     9c2:	81 a3       	std	Z+33, r24	; 0x21
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9c4:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     9c6:	16 a2       	std	Z+38, r1	; 0x26
     9c8:	08 95       	ret

000009ca <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     9ca:	e0 e0       	ldi	r30, 0x00	; 0
     9cc:	f2 e0       	ldi	r31, 0x02	; 2
     9ce:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     9d0:	83 68       	ori	r24, 0x83	; 131
     9d2:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     9d4:	80 e1       	ldi	r24, 0x10	; 16
     9d6:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9d8:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     9da:	16 aa       	std	Z+54, r1	; 0x36
     9dc:	08 95       	ret

000009de <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     9de:	e0 e0       	ldi	r30, 0x00	; 0
     9e0:	f2 e0       	ldi	r31, 0x02	; 2
     9e2:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     9e4:	83 e8       	ldi	r24, 0x83	; 131
     9e6:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     9e8:	8f e2       	ldi	r24, 0x2F	; 47
     9ea:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9ec:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     9ee:	16 a6       	std	Z+46, r1	; 0x2e
     9f0:	08 95       	ret

000009f2 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     9f2:	aa ec       	ldi	r26, 0xCA	; 202
     9f4:	b1 e0       	ldi	r27, 0x01	; 1
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     9fa:	e8 2f       	mov	r30, r24
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     a00:	1c 92       	st	X, r1

	return( result );
}
     a02:	08 95       	ret

00000a04 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     a08:	e0 e7       	ldi	r30, 0x70	; 112
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	9d 7f       	andi	r25, 0xFD	; 253
     a10:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     a12:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a16:	62 30       	cpi	r22, 0x02	; 2
     a18:	31 f1       	breq	.+76     	; 0xa66 <tiny_adc_setup+0x62>
     a1a:	e0 e0       	ldi	r30, 0x00	; 0
     a1c:	f2 e0       	ldi	r31, 0x02	; 2
     a1e:	9c e1       	ldi	r25, 0x1C	; 28
     a20:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a22:	90 e4       	ldi	r25, 0x40	; 64
     a24:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a26:	81 11       	cpse	r24, r1
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <tiny_adc_setup+0x2a>
     a2a:	80 e4       	ldi	r24, 0x40	; 64
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <tiny_adc_setup+0x2c>
     a2e:	80 ec       	ldi	r24, 0xC0	; 192
     a30:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     a34:	61 30       	cpi	r22, 0x01	; 1
     a36:	11 f0       	breq	.+4      	; 0xa3c <tiny_adc_setup+0x38>
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <tiny_adc_setup+0x3a>
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	c0 e0       	ldi	r28, 0x00	; 0
     a40:	d2 e0       	ldi	r29, 0x02	; 2
     a42:	8c 83       	std	Y+4, r24	; 0x04
	#else
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
	#endif
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     a44:	80 e2       	ldi	r24, 0x20	; 32
     a46:	d5 df       	rcall	.-86     	; 0x9f2 <ReadCalibrationByte>
     a48:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     a4a:	81 e2       	ldi	r24, 0x21	; 33
     a4c:	d2 df       	rcall	.-92     	; 0x9f2 <ReadCalibrationByte>
     a4e:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     a50:	18 8e       	std	Y+24, r1	; 0x18
     a52:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     a58:	c2 df       	rcall	.-124    	; 0x9de <tiny_adc_pid_setup>
     a5a:	0e c0       	rjmp	.+28     	; 0xa78 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a5c:	80 ec       	ldi	r24, 0xC0	; 192
     a5e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	ec cf       	rjmp	.-40     	; 0xa3e <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a66:	e0 e0       	ldi	r30, 0x00	; 0
     a68:	f2 e0       	ldi	r31, 0x02	; 2
     a6a:	9e e1       	ldi	r25, 0x1E	; 30
     a6c:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a6e:	90 e4       	ldi	r25, 0x40	; 64
     a70:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a72:	81 11       	cpse	r24, r1
     a74:	f3 cf       	rjmp	.-26     	; 0xa5c <tiny_adc_setup+0x58>
     a76:	d9 cf       	rjmp	.-78     	; 0xa2a <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     a98:	8f 91       	pop	r24
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     aa8:	e0 e7       	ldi	r30, 0x70	; 112
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	82 81       	ldd	r24, Z+2	; 0x02
     aae:	8b 7f       	andi	r24, 0xFB	; 251
     ab0:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     ab2:	c0 e2       	ldi	r28, 0x20	; 32
     ab4:	d3 e0       	ldi	r29, 0x03	; 3
     ab6:	8d e0       	ldi	r24, 0x0D	; 13
     ab8:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     aba:	80 e4       	ldi	r24, 0x40	; 64
     abc:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     abe:	89 e0       	ldi	r24, 0x09	; 9
     ac0:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     ac2:	83 e3       	ldi	r24, 0x33	; 51
     ac4:	96 df       	rcall	.-212    	; 0x9f2 <ReadCalibrationByte>
     ac6:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     ac8:	82 e3       	ldi	r24, 0x32	; 50
     aca:	93 df       	rcall	.-218    	; 0x9f2 <ReadCalibrationByte>
     acc:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     ace:	87 e3       	ldi	r24, 0x37	; 55
     ad0:	90 df       	rcall	.-224    	; 0x9f2 <ReadCalibrationByte>
     ad2:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     ad4:	86 e3       	ldi	r24, 0x36	; 54
     ad6:	8d df       	rcall	.-230    	; 0x9f2 <ReadCalibrationByte>
     ad8:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     ada:	e0 e2       	ldi	r30, 0x20	; 32
     adc:	f6 e0       	ldi	r31, 0x06	; 6
     ade:	80 81       	ld	r24, Z
     ae0:	83 60       	ori	r24, 0x03	; 3
     ae2:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     ae4:	14 82       	std	Z+4, r1	; 0x04
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <tiny_dma_setup>:
		median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
		
}

void tiny_dma_loop_mode_7(void){
     aec:	e0 e7       	ldi	r30, 0x70	; 112
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8e 7f       	andi	r24, 0xFE	; 254
     af4:	80 83       	st	Z, r24
     af6:	83 e8       	ldi	r24, 0x83	; 131
     af8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     afc:	08 95       	ret

00000afe <tiny_dma_flush>:
     afe:	e0 e0       	ldi	r30, 0x00	; 0
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	10 8a       	std	Z+16, r1	; 0x10
     b04:	80 e4       	ldi	r24, 0x40	; 64
     b06:	80 8b       	std	Z+16, r24	; 0x10
     b08:	10 a2       	std	Z+32, r1	; 0x20
     b0a:	80 a3       	std	Z+32, r24	; 0x20
     b0c:	10 aa       	std	Z+48, r1	; 0x30
     b0e:	80 ab       	std	Z+48, r24	; 0x30
     b10:	e0 e4       	ldi	r30, 0x40	; 64
     b12:	f1 e0       	ldi	r31, 0x01	; 1
     b14:	10 82       	st	Z, r1
     b16:	80 83       	st	Z, r24
     b18:	10 92 98 20 	sts	0x2098, r1	; 0x802098 <b1_state>
     b1c:	10 92 97 20 	sts	0x2097, r1	; 0x802097 <b2_state>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <usb_state>
     b26:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <dma_ch0_ran>
     b2a:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <dma_ch0_ran+0x1>
     b2e:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <dma_ch1_ran>
     b32:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <dma_ch1_ran+0x1>
     b36:	08 95       	ret

00000b38 <tiny_dma_delayed_set>:
     b38:	80 93 aa 23 	sts	0x23AA, r24	; 0x8023aa <futureMode>
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <modeChanged>
     b42:	08 95       	ret

00000b44 <tiny_dma_set_mode_0>:
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     b4c:	d8 df       	rcall	.-80     	; 0xafe <tiny_dma_flush>
     b4e:	c0 e0       	ldi	r28, 0x00	; 0
     b50:	d1 e0       	ldi	r29, 0x01	; 1
     b52:	1e aa       	std	Y+54, r1	; 0x36
     b54:	84 e2       	ldi	r24, 0x24	; 36
     b56:	88 ab       	std	Y+48, r24	; 0x30
     b58:	19 aa       	std	Y+49, r1	; 0x31
     b5a:	49 e5       	ldi	r20, 0x59	; 89
     b5c:	4a ab       	std	Y+50, r20	; 0x32
     b5e:	32 e0       	ldi	r19, 0x02	; 2
     b60:	3b ab       	std	Y+51, r19	; 0x33
     b62:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     b66:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     b6a:	6c ab       	std	Y+52, r22	; 0x34
     b6c:	7d ab       	std	Y+53, r23	; 0x35
     b6e:	6b ea       	ldi	r22, 0xAB	; 171
     b70:	73 e2       	ldi	r23, 0x23	; 35
     b72:	68 af       	std	Y+56, r22	; 0x38
     b74:	79 af       	std	Y+57, r23	; 0x39
     b76:	1a ae       	std	Y+58, r1	; 0x3a
     b78:	9b e3       	ldi	r25, 0x3B	; 59
     b7a:	9c af       	std	Y+60, r25	; 0x3c
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b82:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b86:	28 a9       	ldd	r18, Y+48	; 0x30
     b88:	20 68       	ori	r18, 0x80	; 128
     b8a:	28 ab       	std	Y+48, r18	; 0x30
     b8c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b90:	e0 e4       	ldi	r30, 0x40	; 64
     b92:	f1 e0       	ldi	r31, 0x01	; 1
     b94:	80 83       	st	Z, r24
     b96:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b9a:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b9e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ba2:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     ba6:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     baa:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bae:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bb2:	4a e9       	ldi	r20, 0x9A	; 154
     bb4:	51 e2       	ldi	r21, 0x21	; 33
     bb6:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     bba:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     bbe:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bc2:	29 e3       	ldi	r18, 0x39	; 57
     bc4:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bc8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     bcc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     bd0:	90 81       	ld	r25, Z
     bd2:	90 68       	ori	r25, 0x80	; 128
     bd4:	90 83       	st	Z, r25
     bd6:	18 8a       	std	Y+16, r1	; 0x10
     bd8:	90 e4       	ldi	r25, 0x40	; 64
     bda:	98 8b       	std	Y+16, r25	; 0x10
     bdc:	88 8b       	std	Y+16, r24	; 0x10
     bde:	19 8a       	std	Y+17, r1	; 0x11
     be0:	95 e9       	ldi	r25, 0x95	; 149
     be2:	9a 8b       	std	Y+18, r25	; 0x12
     be4:	90 e1       	ldi	r25, 0x10	; 16
     be6:	9b 8b       	std	Y+19, r25	; 0x13
     be8:	4e ee       	ldi	r20, 0xEE	; 238
     bea:	52 e0       	ldi	r21, 0x02	; 2
     bec:	4c 8b       	std	Y+20, r20	; 0x14
     bee:	5d 8b       	std	Y+21, r21	; 0x15
     bf0:	88 8f       	std	Y+24, r24	; 0x18
     bf2:	39 8f       	std	Y+25, r19	; 0x19
     bf4:	1a 8e       	std	Y+26, r1	; 0x1a
     bf6:	8c ec       	ldi	r24, 0xCC	; 204
     bf8:	95 e2       	ldi	r25, 0x25	; 37
     bfa:	8c 8f       	std	Y+28, r24	; 0x1c
     bfc:	9d 8f       	std	Y+29, r25	; 0x1d
     bfe:	1e 8e       	std	Y+30, r1	; 0x1e
     c00:	68 ec       	ldi	r22, 0xC8	; 200
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	84 ef       	ldi	r24, 0xF4	; 244
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	67 dd       	rcall	.-1330   	; 0x6d8 <tiny_calibration_synchronise_phase>
     c0a:	88 ec       	ldi	r24, 0xC8	; 200
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     c12:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     c1c:	88 89       	ldd	r24, Y+16	; 0x10
     c1e:	80 68       	ori	r24, 0x80	; 128
     c20:	88 8b       	std	Y+16, r24	; 0x10
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <tiny_dma_set_mode_1>:
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	11 e0       	ldi	r17, 0x01	; 1
     c30:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     c34:	64 df       	rcall	.-312    	; 0xafe <tiny_dma_flush>
     c36:	c0 e0       	ldi	r28, 0x00	; 0
     c38:	d1 e0       	ldi	r29, 0x01	; 1
     c3a:	18 aa       	std	Y+48, r1	; 0x30
     c3c:	80 e4       	ldi	r24, 0x40	; 64
     c3e:	88 ab       	std	Y+48, r24	; 0x30
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	88 ab       	std	Y+48, r24	; 0x30
     c44:	19 aa       	std	Y+49, r1	; 0x31
     c46:	1a aa       	std	Y+50, r1	; 0x32
     c48:	4b e4       	ldi	r20, 0x4B	; 75
     c4a:	4b ab       	std	Y+51, r20	; 0x33
     c4c:	1c aa       	std	Y+52, r1	; 0x34
     c4e:	1d aa       	std	Y+53, r1	; 0x35
     c50:	1e aa       	std	Y+54, r1	; 0x36
     c52:	8a e0       	ldi	r24, 0x0A	; 10
     c54:	90 e2       	ldi	r25, 0x20	; 32
     c56:	88 af       	std	Y+56, r24	; 0x38
     c58:	99 af       	std	Y+57, r25	; 0x39
     c5a:	1a ae       	std	Y+58, r1	; 0x3a
     c5c:	70 ea       	ldi	r23, 0xA0	; 160
     c5e:	7c af       	std	Y+60, r23	; 0x3c
     c60:	68 e0       	ldi	r22, 0x08	; 8
     c62:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     c66:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     c6a:	88 a9       	ldd	r24, Y+48	; 0x30
     c6c:	80 6a       	ori	r24, 0xA0	; 160
     c6e:	88 ab       	std	Y+48, r24	; 0x30
     c70:	e0 ea       	ldi	r30, 0xA0	; 160
     c72:	f8 e0       	ldi	r31, 0x08	; 8
     c74:	85 e5       	ldi	r24, 0x55	; 85
     c76:	80 83       	st	Z, r24
     c78:	80 83       	st	Z, r24
     c7a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c7e:	e0 e4       	ldi	r30, 0x40	; 64
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	84 e2       	ldi	r24, 0x24	; 36
     c84:	80 83       	st	Z, r24
     c86:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c8a:	99 e5       	ldi	r25, 0x59	; 89
     c8c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c90:	32 e0       	ldi	r19, 0x02	; 2
     c92:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c96:	a0 91 0b 20 	lds	r26, 0x200B	; 0x80200b <auxDacBufLen>
     c9a:	b0 91 0c 20 	lds	r27, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     c9e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ca2:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     ca6:	ab ea       	ldi	r26, 0xAB	; 171
     ca8:	b3 e2       	ldi	r27, 0x23	; 35
     caa:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     cae:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     cb2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     cb6:	9b e3       	ldi	r25, 0x3B	; 59
     cb8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     cc2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     cc6:	20 81       	ld	r18, Z
     cc8:	20 68       	ori	r18, 0x80	; 128
     cca:	20 83       	st	Z, r18
     ccc:	88 a3       	std	Y+32, r24	; 0x20
     cce:	99 a3       	std	Y+33, r25	; 0x21
     cd0:	25 e9       	ldi	r18, 0x95	; 149
     cd2:	2a a3       	std	Y+34, r18	; 0x22
     cd4:	4b a3       	std	Y+35, r20	; 0x23
     cd6:	4e ee       	ldi	r20, 0xEE	; 238
     cd8:	52 e0       	ldi	r21, 0x02	; 2
     cda:	4c a3       	std	Y+36, r20	; 0x24
     cdc:	5d a3       	std	Y+37, r21	; 0x25
     cde:	78 a7       	std	Y+40, r23	; 0x28
     ce0:	69 a7       	std	Y+41, r22	; 0x29
     ce2:	1a a6       	std	Y+42, r1	; 0x2a
     ce4:	6a eb       	ldi	r22, 0xBA	; 186
     ce6:	78 e2       	ldi	r23, 0x28	; 40
     ce8:	6c a7       	std	Y+44, r22	; 0x2c
     cea:	7d a7       	std	Y+45, r23	; 0x2d
     cec:	1e a6       	std	Y+46, r1	; 0x2e
     cee:	88 8b       	std	Y+16, r24	; 0x10
     cf0:	99 8b       	std	Y+17, r25	; 0x11
     cf2:	2a 8b       	std	Y+18, r18	; 0x12
     cf4:	90 e1       	ldi	r25, 0x10	; 16
     cf6:	9b 8b       	std	Y+19, r25	; 0x13
     cf8:	4c 8b       	std	Y+20, r20	; 0x14
     cfa:	5d 8b       	std	Y+21, r21	; 0x15
     cfc:	88 8f       	std	Y+24, r24	; 0x18
     cfe:	39 8f       	std	Y+25, r19	; 0x19
     d00:	1a 8e       	std	Y+26, r1	; 0x1a
     d02:	8c ec       	ldi	r24, 0xCC	; 204
     d04:	95 e2       	ldi	r25, 0x25	; 37
     d06:	8c 8f       	std	Y+28, r24	; 0x1c
     d08:	9d 8f       	std	Y+29, r25	; 0x1d
     d0a:	1e 8e       	std	Y+30, r1	; 0x1e
     d0c:	68 ec       	ldi	r22, 0xC8	; 200
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	84 ef       	ldi	r24, 0xF4	; 244
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	e1 dc       	rcall	.-1598   	; 0x6d8 <tiny_calibration_synchronise_phase>
     d16:	88 ec       	ldi	r24, 0xC8	; 200
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     d1e:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     d22:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <median_TRFCNT_delay>
     d26:	88 a1       	ldd	r24, Y+32	; 0x20
     d28:	80 68       	ori	r24, 0x80	; 128
     d2a:	88 a3       	std	Y+32, r24	; 0x20
     d2c:	88 89       	ldd	r24, Y+16	; 0x10
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	88 8b       	std	Y+16, r24	; 0x10
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	08 95       	ret

00000d3a <tiny_dma_set_mode_2>:
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	12 e0       	ldi	r17, 0x02	; 2
     d42:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     d46:	db de       	rcall	.-586    	; 0xafe <tiny_dma_flush>
     d48:	c0 e0       	ldi	r28, 0x00	; 0
     d4a:	d1 e0       	ldi	r29, 0x01	; 1
     d4c:	1e aa       	std	Y+54, r1	; 0x36
     d4e:	84 e2       	ldi	r24, 0x24	; 36
     d50:	88 ab       	std	Y+48, r24	; 0x30
     d52:	19 aa       	std	Y+49, r1	; 0x31
     d54:	39 e5       	ldi	r19, 0x59	; 89
     d56:	3a ab       	std	Y+50, r19	; 0x32
     d58:	1b ab       	std	Y+51, r17	; 0x33
     d5a:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     d5e:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     d62:	4c ab       	std	Y+52, r20	; 0x34
     d64:	5d ab       	std	Y+53, r21	; 0x35
     d66:	4b ea       	ldi	r20, 0xAB	; 171
     d68:	53 e2       	ldi	r21, 0x23	; 35
     d6a:	48 af       	std	Y+56, r20	; 0x38
     d6c:	59 af       	std	Y+57, r21	; 0x39
     d6e:	1a ae       	std	Y+58, r1	; 0x3a
     d70:	9b e3       	ldi	r25, 0x3B	; 59
     d72:	9c af       	std	Y+60, r25	; 0x3c
     d74:	93 e0       	ldi	r25, 0x03	; 3
     d76:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     d7a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     d7e:	28 a9       	ldd	r18, Y+48	; 0x30
     d80:	20 68       	ori	r18, 0x80	; 128
     d82:	28 ab       	std	Y+48, r18	; 0x30
     d84:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     d88:	e0 e4       	ldi	r30, 0x40	; 64
     d8a:	f1 e0       	ldi	r31, 0x01	; 1
     d8c:	80 83       	st	Z, r24
     d8e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d92:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     d96:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d9a:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     d9e:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     da2:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     da6:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     daa:	2a e9       	ldi	r18, 0x9A	; 154
     dac:	31 e2       	ldi	r19, 0x21	; 33
     dae:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     db2:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     db6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     dba:	29 e3       	ldi	r18, 0x39	; 57
     dbc:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     dc0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     dc4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     dc8:	90 81       	ld	r25, Z
     dca:	90 68       	ori	r25, 0x80	; 128
     dcc:	90 83       	st	Z, r25
     dce:	18 8a       	std	Y+16, r1	; 0x10
     dd0:	90 e4       	ldi	r25, 0x40	; 64
     dd2:	98 8b       	std	Y+16, r25	; 0x10
     dd4:	88 8b       	std	Y+16, r24	; 0x10
     dd6:	19 8a       	std	Y+17, r1	; 0x11
     dd8:	45 e9       	ldi	r20, 0x95	; 149
     dda:	4a 8b       	std	Y+18, r20	; 0x12
     ddc:	90 e1       	ldi	r25, 0x10	; 16
     dde:	9b 8b       	std	Y+19, r25	; 0x13
     de0:	2e ee       	ldi	r18, 0xEE	; 238
     de2:	32 e0       	ldi	r19, 0x02	; 2
     de4:	2c 8b       	std	Y+20, r18	; 0x14
     de6:	3d 8b       	std	Y+21, r19	; 0x15
     de8:	88 8f       	std	Y+24, r24	; 0x18
     dea:	19 8f       	std	Y+25, r17	; 0x19
     dec:	1a 8e       	std	Y+26, r1	; 0x1a
     dee:	6c ec       	ldi	r22, 0xCC	; 204
     df0:	75 e2       	ldi	r23, 0x25	; 37
     df2:	6c 8f       	std	Y+28, r22	; 0x1c
     df4:	7d 8f       	std	Y+29, r23	; 0x1d
     df6:	1e 8e       	std	Y+30, r1	; 0x1e
     df8:	88 a3       	std	Y+32, r24	; 0x20
     dfa:	19 a2       	std	Y+33, r1	; 0x21
     dfc:	4a a3       	std	Y+34, r20	; 0x22
     dfe:	9b a3       	std	Y+35, r25	; 0x23
     e00:	2c a3       	std	Y+36, r18	; 0x24
     e02:	3d a3       	std	Y+37, r19	; 0x25
     e04:	84 e3       	ldi	r24, 0x34	; 52
     e06:	88 a7       	std	Y+40, r24	; 0x28
     e08:	19 a7       	std	Y+41, r17	; 0x29
     e0a:	1a a6       	std	Y+42, r1	; 0x2a
     e0c:	8a eb       	ldi	r24, 0xBA	; 186
     e0e:	98 e2       	ldi	r25, 0x28	; 40
     e10:	8c a7       	std	Y+44, r24	; 0x2c
     e12:	9d a7       	std	Y+45, r25	; 0x2d
     e14:	1e a6       	std	Y+46, r1	; 0x2e
     e16:	68 ec       	ldi	r22, 0xC8	; 200
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	84 ef       	ldi	r24, 0xF4	; 244
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	5c dc       	rcall	.-1864   	; 0x6d8 <tiny_calibration_synchronise_phase>
     e20:	88 ec       	ldi	r24, 0xC8	; 200
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     e28:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     e32:	88 89       	ldd	r24, Y+16	; 0x10
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	88 8b       	std	Y+16, r24	; 0x10
     e38:	88 a1       	ldd	r24, Y+32	; 0x20
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	88 a3       	std	Y+32, r24	; 0x20
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	08 95       	ret

00000e46 <tiny_dma_set_mode_3>:
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	13 e0       	ldi	r17, 0x03	; 3
     e4e:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     e52:	55 de       	rcall	.-854    	; 0xafe <tiny_dma_flush>
     e54:	c0 e0       	ldi	r28, 0x00	; 0
     e56:	d1 e0       	ldi	r29, 0x01	; 1
     e58:	18 a2       	std	Y+32, r1	; 0x20
     e5a:	50 e4       	ldi	r21, 0x40	; 64
     e5c:	58 a3       	std	Y+32, r21	; 0x20
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	88 a3       	std	Y+32, r24	; 0x20
     e62:	19 a2       	std	Y+33, r1	; 0x21
     e64:	1a a2       	std	Y+34, r1	; 0x22
     e66:	4b e4       	ldi	r20, 0x4B	; 75
     e68:	4b a3       	std	Y+35, r20	; 0x23
     e6a:	1c a2       	std	Y+36, r1	; 0x24
     e6c:	1d a2       	std	Y+37, r1	; 0x25
     e6e:	1e a2       	std	Y+38, r1	; 0x26
     e70:	8a e0       	ldi	r24, 0x0A	; 10
     e72:	90 e2       	ldi	r25, 0x20	; 32
     e74:	88 a7       	std	Y+40, r24	; 0x28
     e76:	99 a7       	std	Y+41, r25	; 0x29
     e78:	1a a6       	std	Y+42, r1	; 0x2a
     e7a:	30 ea       	ldi	r19, 0xA0	; 160
     e7c:	3c a7       	std	Y+44, r19	; 0x2c
     e7e:	28 e0       	ldi	r18, 0x08	; 8
     e80:	2d a7       	std	Y+45, r18	; 0x2d
     e82:	1e a6       	std	Y+46, r1	; 0x2e
     e84:	88 a1       	ldd	r24, Y+32	; 0x20
     e86:	80 6a       	ori	r24, 0xA0	; 160
     e88:	88 a3       	std	Y+32, r24	; 0x20
     e8a:	85 e5       	ldi	r24, 0x55	; 85
     e8c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     e90:	1e aa       	std	Y+54, r1	; 0x36
     e92:	84 e2       	ldi	r24, 0x24	; 36
     e94:	88 ab       	std	Y+48, r24	; 0x30
     e96:	19 aa       	std	Y+49, r1	; 0x31
     e98:	69 e5       	ldi	r22, 0x59	; 89
     e9a:	6a ab       	std	Y+50, r22	; 0x32
     e9c:	1b ab       	std	Y+51, r17	; 0x33
     e9e:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <dacBuf_len>
     ea2:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <dacBuf_len+0x1>
     ea6:	ec ab       	std	Y+52, r30	; 0x34
     ea8:	fd ab       	std	Y+53, r31	; 0x35
     eaa:	ea e9       	ldi	r30, 0x9A	; 154
     eac:	f1 e2       	ldi	r31, 0x21	; 33
     eae:	e8 af       	std	Y+56, r30	; 0x38
     eb0:	f9 af       	std	Y+57, r31	; 0x39
     eb2:	1a ae       	std	Y+58, r1	; 0x3a
     eb4:	99 e3       	ldi	r25, 0x39	; 57
     eb6:	9c af       	std	Y+60, r25	; 0x3c
     eb8:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ebc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ec0:	98 a9       	ldd	r25, Y+48	; 0x30
     ec2:	90 68       	ori	r25, 0x80	; 128
     ec4:	98 ab       	std	Y+48, r25	; 0x30
     ec6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     eca:	e0 e4       	ldi	r30, 0x40	; 64
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	80 83       	st	Z, r24
     ed0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ed4:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ed8:	92 e0       	ldi	r25, 0x02	; 2
     eda:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ede:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     ee2:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     ee6:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     eea:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     eee:	6b ea       	ldi	r22, 0xAB	; 171
     ef0:	73 e2       	ldi	r23, 0x23	; 35
     ef2:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     ef6:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     efa:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     efe:	9b e3       	ldi	r25, 0x3B	; 59
     f00:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f04:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f08:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f0c:	90 81       	ld	r25, Z
     f0e:	90 68       	ori	r25, 0x80	; 128
     f10:	90 83       	st	Z, r25
     f12:	18 8a       	std	Y+16, r1	; 0x10
     f14:	58 8b       	std	Y+16, r21	; 0x10
     f16:	88 8b       	std	Y+16, r24	; 0x10
     f18:	19 8a       	std	Y+17, r1	; 0x11
     f1a:	85 e9       	ldi	r24, 0x95	; 149
     f1c:	8a 8b       	std	Y+18, r24	; 0x12
     f1e:	4b 8b       	std	Y+19, r20	; 0x13
     f20:	8e ee       	ldi	r24, 0xEE	; 238
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	8c 8b       	std	Y+20, r24	; 0x14
     f26:	9d 8b       	std	Y+21, r25	; 0x15
     f28:	38 8f       	std	Y+24, r19	; 0x18
     f2a:	29 8f       	std	Y+25, r18	; 0x19
     f2c:	1a 8e       	std	Y+26, r1	; 0x1a
     f2e:	8c ec       	ldi	r24, 0xCC	; 204
     f30:	95 e2       	ldi	r25, 0x25	; 37
     f32:	8c 8f       	std	Y+28, r24	; 0x1c
     f34:	9d 8f       	std	Y+29, r25	; 0x1d
     f36:	1e 8e       	std	Y+30, r1	; 0x1e
     f38:	68 ec       	ldi	r22, 0xC8	; 200
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	84 ef       	ldi	r24, 0xF4	; 244
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	cb db       	rcall	.-2154   	; 0x6d8 <tiny_calibration_synchronise_phase>
     f42:	88 ec       	ldi	r24, 0xC8	; 200
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     f4a:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     f54:	88 89       	ldd	r24, Y+16	; 0x10
     f56:	80 68       	ori	r24, 0x80	; 128
     f58:	88 8b       	std	Y+16, r24	; 0x10
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	08 95       	ret

00000f62 <tiny_dma_set_mode_4>:
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	14 e0       	ldi	r17, 0x04	; 4
     f6a:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     f6e:	c7 dd       	rcall	.-1138   	; 0xafe <tiny_dma_flush>
     f70:	c0 e0       	ldi	r28, 0x00	; 0
     f72:	d1 e0       	ldi	r29, 0x01	; 1
     f74:	18 aa       	std	Y+48, r1	; 0x30
     f76:	80 e4       	ldi	r24, 0x40	; 64
     f78:	88 ab       	std	Y+48, r24	; 0x30
     f7a:	18 ab       	std	Y+48, r17	; 0x30
     f7c:	19 aa       	std	Y+49, r1	; 0x31
     f7e:	1a aa       	std	Y+50, r1	; 0x32
     f80:	3b e4       	ldi	r19, 0x4B	; 75
     f82:	3b ab       	std	Y+51, r19	; 0x33
     f84:	1c aa       	std	Y+52, r1	; 0x34
     f86:	1d aa       	std	Y+53, r1	; 0x35
     f88:	1e aa       	std	Y+54, r1	; 0x36
     f8a:	8a e0       	ldi	r24, 0x0A	; 10
     f8c:	90 e2       	ldi	r25, 0x20	; 32
     f8e:	88 af       	std	Y+56, r24	; 0x38
     f90:	99 af       	std	Y+57, r25	; 0x39
     f92:	1a ae       	std	Y+58, r1	; 0x3a
     f94:	50 ea       	ldi	r21, 0xA0	; 160
     f96:	5c af       	std	Y+60, r21	; 0x3c
     f98:	88 e0       	ldi	r24, 0x08	; 8
     f9a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f9e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     fa2:	98 a9       	ldd	r25, Y+48	; 0x30
     fa4:	90 6a       	ori	r25, 0xA0	; 160
     fa6:	98 ab       	std	Y+48, r25	; 0x30
     fa8:	95 e5       	ldi	r25, 0x55	; 85
     faa:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     fae:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     fb2:	e0 e4       	ldi	r30, 0x40	; 64
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	94 e2       	ldi	r25, 0x24	; 36
     fb8:	90 83       	st	Z, r25
     fba:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     fbe:	29 e5       	ldi	r18, 0x59	; 89
     fc0:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     fc4:	22 e0       	ldi	r18, 0x02	; 2
     fc6:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fca:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     fce:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     fd2:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     fd6:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     fda:	6b ea       	ldi	r22, 0xAB	; 171
     fdc:	73 e2       	ldi	r23, 0x23	; 35
     fde:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     fe2:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     fe6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     fea:	2b e3       	ldi	r18, 0x3B	; 59
     fec:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ff0:	23 e0       	ldi	r18, 0x03	; 3
     ff2:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     ff6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     ffa:	20 81       	ld	r18, Z
     ffc:	20 68       	ori	r18, 0x80	; 128
     ffe:	20 83       	st	Z, r18
    1000:	98 8b       	std	Y+16, r25	; 0x10
    1002:	19 8a       	std	Y+17, r1	; 0x11
    1004:	45 e9       	ldi	r20, 0x95	; 149
    1006:	4a 8b       	std	Y+18, r20	; 0x12
    1008:	3b 8b       	std	Y+19, r19	; 0x13
    100a:	2e ee       	ldi	r18, 0xEE	; 238
    100c:	32 e0       	ldi	r19, 0x02	; 2
    100e:	2c 8b       	std	Y+20, r18	; 0x14
    1010:	3d 8b       	std	Y+21, r19	; 0x15
    1012:	58 8f       	std	Y+24, r21	; 0x18
    1014:	89 8f       	std	Y+25, r24	; 0x19
    1016:	1a 8e       	std	Y+26, r1	; 0x1a
    1018:	6c ec       	ldi	r22, 0xCC	; 204
    101a:	75 e2       	ldi	r23, 0x25	; 37
    101c:	6c 8f       	std	Y+28, r22	; 0x1c
    101e:	7d 8f       	std	Y+29, r23	; 0x1d
    1020:	1e 8e       	std	Y+30, r1	; 0x1e
    1022:	98 a3       	std	Y+32, r25	; 0x20
    1024:	19 a2       	std	Y+33, r1	; 0x21
    1026:	4a a3       	std	Y+34, r20	; 0x22
    1028:	9a e4       	ldi	r25, 0x4A	; 74
    102a:	9b a3       	std	Y+35, r25	; 0x23
    102c:	2c a3       	std	Y+36, r18	; 0x24
    102e:	3d a3       	std	Y+37, r19	; 0x25
    1030:	93 ec       	ldi	r25, 0xC3	; 195
    1032:	98 a7       	std	Y+40, r25	; 0x28
    1034:	89 a7       	std	Y+41, r24	; 0x29
    1036:	1a a6       	std	Y+42, r1	; 0x2a
    1038:	8a eb       	ldi	r24, 0xBA	; 186
    103a:	98 e2       	ldi	r25, 0x28	; 40
    103c:	8c a7       	std	Y+44, r24	; 0x2c
    103e:	9d a7       	std	Y+45, r25	; 0x2d
    1040:	1e a6       	std	Y+46, r1	; 0x2e
    1042:	68 ec       	ldi	r22, 0xC8	; 200
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	84 ef       	ldi	r24, 0xF4	; 244
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	46 db       	rcall	.-2420   	; 0x6d8 <tiny_calibration_synchronise_phase>
    104c:	88 ec       	ldi	r24, 0xC8	; 200
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    1054:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    105e:	88 89       	ldd	r24, Y+16	; 0x10
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	88 8b       	std	Y+16, r24	; 0x10
    1064:	88 a1       	ldd	r24, Y+32	; 0x20
    1066:	80 68       	ori	r24, 0x80	; 128
    1068:	88 a3       	std	Y+32, r24	; 0x20
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	08 95       	ret

00001072 <tiny_dma_set_mode_5>:
    1072:	ff cf       	rjmp	.-2      	; 0x1072 <tiny_dma_set_mode_5>

00001074 <tiny_dma_set_mode_6>:
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	86 e0       	ldi	r24, 0x06	; 6
    107a:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    107e:	3f dd       	rcall	.-1410   	; 0xafe <tiny_dma_flush>
    1080:	c0 e0       	ldi	r28, 0x00	; 0
    1082:	d1 e0       	ldi	r29, 0x01	; 1
    1084:	1e aa       	std	Y+54, r1	; 0x36
    1086:	84 e2       	ldi	r24, 0x24	; 36
    1088:	88 ab       	std	Y+48, r24	; 0x30
    108a:	19 aa       	std	Y+49, r1	; 0x31
    108c:	39 e5       	ldi	r19, 0x59	; 89
    108e:	3a ab       	std	Y+50, r19	; 0x32
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	9b ab       	std	Y+51, r25	; 0x33
    1094:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    1098:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    109c:	4c ab       	std	Y+52, r20	; 0x34
    109e:	5d ab       	std	Y+53, r21	; 0x35
    10a0:	4a e9       	ldi	r20, 0x9A	; 154
    10a2:	51 e2       	ldi	r21, 0x21	; 33
    10a4:	48 af       	std	Y+56, r20	; 0x38
    10a6:	59 af       	std	Y+57, r21	; 0x39
    10a8:	1a ae       	std	Y+58, r1	; 0x3a
    10aa:	29 e3       	ldi	r18, 0x39	; 57
    10ac:	2c af       	std	Y+60, r18	; 0x3c
    10ae:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    10b2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    10b6:	28 a9       	ldd	r18, Y+48	; 0x30
    10b8:	20 68       	ori	r18, 0x80	; 128
    10ba:	28 ab       	std	Y+48, r18	; 0x30
    10bc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    10c0:	e0 e4       	ldi	r30, 0x40	; 64
    10c2:	f1 e0       	ldi	r31, 0x01	; 1
    10c4:	80 83       	st	Z, r24
    10c6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    10ca:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    10ce:	32 e0       	ldi	r19, 0x02	; 2
    10d0:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    10d4:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    10d8:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    10dc:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    10e0:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    10e4:	4b ea       	ldi	r20, 0xAB	; 171
    10e6:	53 e2       	ldi	r21, 0x23	; 35
    10e8:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    10ec:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    10f0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    10f4:	2b e3       	ldi	r18, 0x3B	; 59
    10f6:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    10fa:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    10fe:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1102:	20 81       	ld	r18, Z
    1104:	20 68       	ori	r18, 0x80	; 128
    1106:	20 83       	st	Z, r18
    1108:	18 8a       	std	Y+16, r1	; 0x10
    110a:	20 e4       	ldi	r18, 0x40	; 64
    110c:	28 8b       	std	Y+16, r18	; 0x10
    110e:	88 8b       	std	Y+16, r24	; 0x10
    1110:	99 8b       	std	Y+17, r25	; 0x11
    1112:	95 e9       	ldi	r25, 0x95	; 149
    1114:	9a 8b       	std	Y+18, r25	; 0x12
    1116:	90 e1       	ldi	r25, 0x10	; 16
    1118:	9b 8b       	std	Y+19, r25	; 0x13
    111a:	4c ed       	ldi	r20, 0xDC	; 220
    111c:	55 e0       	ldi	r21, 0x05	; 5
    111e:	4c 8b       	std	Y+20, r20	; 0x14
    1120:	5d 8b       	std	Y+21, r21	; 0x15
    1122:	88 8f       	std	Y+24, r24	; 0x18
    1124:	39 8f       	std	Y+25, r19	; 0x19
    1126:	1a 8e       	std	Y+26, r1	; 0x1a
    1128:	8c ec       	ldi	r24, 0xCC	; 204
    112a:	95 e2       	ldi	r25, 0x25	; 37
    112c:	8c 8f       	std	Y+28, r24	; 0x1c
    112e:	9d 8f       	std	Y+29, r25	; 0x1d
    1130:	1e 8e       	std	Y+30, r1	; 0x1e
    1132:	68 ec       	ldi	r22, 0xC8	; 200
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	84 ef       	ldi	r24, 0xF4	; 244
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	ce da       	rcall	.-2660   	; 0x6d8 <tiny_calibration_synchronise_phase>
    113c:	80 e9       	ldi	r24, 0x90	; 144
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    1144:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    114e:	88 89       	ldd	r24, Y+16	; 0x10
    1150:	80 68       	ori	r24, 0x80	; 128
    1152:	88 8b       	std	Y+16, r24	; 0x10
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <tiny_dma_set_mode_7>:
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	87 e0       	ldi	r24, 0x07	; 7
    1160:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    1164:	cc dc       	rcall	.-1640   	; 0xafe <tiny_dma_flush>
    1166:	c0 e0       	ldi	r28, 0x00	; 0
    1168:	d1 e0       	ldi	r29, 0x01	; 1
    116a:	1e aa       	std	Y+54, r1	; 0x36
    116c:	94 e2       	ldi	r25, 0x24	; 36
    116e:	98 ab       	std	Y+48, r25	; 0x30
    1170:	19 aa       	std	Y+49, r1	; 0x31
    1172:	39 e5       	ldi	r19, 0x59	; 89
    1174:	3a ab       	std	Y+50, r19	; 0x32
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	8b ab       	std	Y+51, r24	; 0x33
    117a:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    117e:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1182:	4c ab       	std	Y+52, r20	; 0x34
    1184:	5d ab       	std	Y+53, r21	; 0x35
    1186:	4a e9       	ldi	r20, 0x9A	; 154
    1188:	51 e2       	ldi	r21, 0x21	; 33
    118a:	48 af       	std	Y+56, r20	; 0x38
    118c:	59 af       	std	Y+57, r21	; 0x39
    118e:	1a ae       	std	Y+58, r1	; 0x3a
    1190:	29 e3       	ldi	r18, 0x39	; 57
    1192:	2c af       	std	Y+60, r18	; 0x3c
    1194:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1198:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    119c:	28 a9       	ldd	r18, Y+48	; 0x30
    119e:	20 68       	ori	r18, 0x80	; 128
    11a0:	28 ab       	std	Y+48, r18	; 0x30
    11a2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    11a6:	e0 e4       	ldi	r30, 0x40	; 64
    11a8:	f1 e0       	ldi	r31, 0x01	; 1
    11aa:	90 83       	st	Z, r25
    11ac:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    11b0:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    11b4:	32 e0       	ldi	r19, 0x02	; 2
    11b6:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    11ba:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    11be:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    11c2:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    11c6:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    11ca:	4b ea       	ldi	r20, 0xAB	; 171
    11cc:	53 e2       	ldi	r21, 0x23	; 35
    11ce:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    11d2:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    11d6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    11da:	2b e3       	ldi	r18, 0x3B	; 59
    11dc:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    11e0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    11e4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    11e8:	20 81       	ld	r18, Z
    11ea:	20 68       	ori	r18, 0x80	; 128
    11ec:	20 83       	st	Z, r18
    11ee:	18 8a       	std	Y+16, r1	; 0x10
    11f0:	20 e4       	ldi	r18, 0x40	; 64
    11f2:	28 8b       	std	Y+16, r18	; 0x10
    11f4:	25 e2       	ldi	r18, 0x25	; 37
    11f6:	28 8b       	std	Y+16, r18	; 0x10
    11f8:	89 8b       	std	Y+17, r24	; 0x11
    11fa:	85 e9       	ldi	r24, 0x95	; 149
    11fc:	8a 8b       	std	Y+18, r24	; 0x12
    11fe:	80 e1       	ldi	r24, 0x10	; 16
    1200:	8b 8b       	std	Y+19, r24	; 0x13
    1202:	4c ed       	ldi	r20, 0xDC	; 220
    1204:	55 e0       	ldi	r21, 0x05	; 5
    1206:	4c 8b       	std	Y+20, r20	; 0x14
    1208:	5d 8b       	std	Y+21, r21	; 0x15
    120a:	98 8f       	std	Y+24, r25	; 0x18
    120c:	39 8f       	std	Y+25, r19	; 0x19
    120e:	1a 8e       	std	Y+26, r1	; 0x1a
    1210:	8c ec       	ldi	r24, 0xCC	; 204
    1212:	95 e2       	ldi	r25, 0x25	; 37
    1214:	8c 8f       	std	Y+28, r24	; 0x1c
    1216:	9d 8f       	std	Y+29, r25	; 0x1d
    1218:	1e 8e       	std	Y+30, r1	; 0x1e
    121a:	68 ec       	ldi	r22, 0xC8	; 200
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	84 ef       	ldi	r24, 0xF4	; 244
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	5a da       	rcall	.-2892   	; 0x6d8 <tiny_calibration_synchronise_phase>
    1224:	80 e9       	ldi	r24, 0x90	; 144
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    122c:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    1236:	88 89       	ldd	r24, Y+16	; 0x10
    1238:	80 68       	ori	r24, 0x80	; 128
    123a:	88 8b       	std	Y+16, r24	; 0x10
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <__vector_6>:
}

ISR(DMA_CH0_vect){
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	11 24       	eor	r1, r1
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
	DMA.INTFLAGS = 0x01;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch0_ran++;
    125a:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    125e:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <dma_ch0_ran>
    1268:	90 93 7d 21 	sts	0x217D, r25	; 0x80217d <dma_ch0_ran+0x1>
	uds.dma_ch0_cntL = dma_ch0_ran & 0xff;
    126c:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    1270:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    1274:	ee e7       	ldi	r30, 0x7E	; 126
    1276:	f1 e2       	ldi	r31, 0x21	; 33
    1278:	87 8b       	std	Z+23, r24	; 0x17
	uds.dma_ch0_cntH = (dma_ch0_ran >> 8) & 0xff;
    127a:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    127e:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    1282:	90 8f       	std	Z+24, r25	; 0x18
}
    1284:	ff 91       	pop	r31
    1286:	ef 91       	pop	r30
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <__vector_7>:

ISR(DMA_CH1_vect){
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
	DMA.INTFLAGS = 0x02;
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch1_ran++;
    12ae:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    12b2:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <dma_ch1_ran>
    12bc:	90 93 7b 21 	sts	0x217B, r25	; 0x80217b <dma_ch1_ran+0x1>
	uds.dma_ch1_cntL = dma_ch1_ran & 0xff;
    12c0:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    12c4:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    12c8:	ee e7       	ldi	r30, 0x7E	; 126
    12ca:	f1 e2       	ldi	r31, 0x21	; 33
    12cc:	81 8f       	std	Z+25, r24	; 0x19
	uds.dma_ch1_cntH = (dma_ch1_ran >> 8) & 0xff;
    12ce:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    12d2:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    12d6:	92 8f       	std	Z+26, r25	; 0x1a
}
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0
    12e6:	1f 90       	pop	r1
    12e8:	18 95       	reti

000012ea <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    12ea:	e0 e7       	ldi	r30, 0x70	; 112
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	83 81       	ldd	r24, Z+3	; 0x03
    12f0:	8c 7f       	andi	r24, 0xFC	; 252
    12f2:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    12f4:	84 81       	ldd	r24, Z+4	; 0x04
    12f6:	8c 7f       	andi	r24, 0xFC	; 252
    12f8:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    12fa:	80 81       	ld	r24, Z
    12fc:	8d 7f       	andi	r24, 0xFD	; 253
    12fe:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    1300:	e0 e8       	ldi	r30, 0x80	; 128
    1302:	f1 e0       	ldi	r31, 0x01	; 1
    1304:	80 ec       	ldi	r24, 0xC0	; 192
    1306:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1308:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    130a:	88 ec       	ldi	r24, 0xC8	; 200
    130c:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    130e:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1310:	a0 e0       	ldi	r26, 0x00	; 0
    1312:	b8 e0       	ldi	r27, 0x08	; 8
    1314:	34 e0       	ldi	r19, 0x04	; 4
    1316:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1318:	23 e0       	ldi	r18, 0x03	; 3
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	2c 93       	st	X, r18
    131e:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1320:	14 96       	adiw	r26, 0x04	; 4
    1322:	1c 92       	st	X, r1
    1324:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1326:	85 ed       	ldi	r24, 0xD5	; 213
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	96 96       	adiw	r26, 0x26	; 38
    132c:	8d 93       	st	X+, r24
    132e:	9c 93       	st	X, r25
    1330:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1332:	16 96       	adiw	r26, 0x06	; 6
    1334:	1c 92       	st	X, r1
    1336:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1338:	e0 e4       	ldi	r30, 0x40	; 64
    133a:	f8 e0       	ldi	r31, 0x08	; 8
    133c:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    133e:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1340:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    1342:	86 a3       	std	Z+38, r24	; 0x26
    1344:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1346:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    1348:	e0 e6       	ldi	r30, 0x60	; 96
    134a:	f6 e0       	ldi	r31, 0x06	; 6
    134c:	80 81       	ld	r24, Z
    134e:	80 61       	ori	r24, 0x10	; 16
    1350:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    1352:	e0 e4       	ldi	r30, 0x40	; 64
    1354:	f9 e0       	ldi	r31, 0x09	; 9
    1356:	83 e1       	ldi	r24, 0x13	; 19
    1358:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    135a:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    1360:	a6 a3       	std	Z+38, r26	; 0x26
    1362:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    1364:	10 a6       	std	Z+40, r1	; 0x28
    1366:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	80 83       	st	Z, r24
    136c:	08 95       	ret

0000136e <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	1f 92       	push	r1
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    1398:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    139c:	87 30       	cpi	r24, 0x07	; 7
    139e:	31 f4       	brne	.+12     	; 0x13ac <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    13a0:	e0 e0       	ldi	r30, 0x00	; 0
    13a2:	f2 e0       	ldi	r31, 0x02	; 2
    13a4:	84 a5       	ldd	r24, Z+44	; 0x2c
    13a6:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    13a8:	95 a5       	ldd	r25, Z+45	; 0x2d
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    13ac:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    13b0:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <PSU_target>
    13b4:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    13b6:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    13ba:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	0c f4       	brge	.+2      	; 0x13c6 <__vector_83+0x58>
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	99 23       	and	r25, r25
    13c8:	c9 f0       	breq	.+50     	; 0x13fc <__vector_83+0x8e>
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	2a 3f       	cpi	r18, 0xFA	; 250
    13ce:	37 40       	sbci	r19, 0x07	; 7
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__vector_83+0x66>
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	99 23       	and	r25, r25
    13d6:	91 f0       	breq	.+36     	; 0x13fc <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    13d8:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    13dc:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    13e0:	89 30       	cpi	r24, 0x09	; 9
    13e2:	1c f4       	brge	.+6      	; 0x13ea <__vector_83+0x7c>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <__vector_83+0x80>
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	82 0f       	add	r24, r18
    13f0:	93 1f       	adc	r25, r19
    13f2:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    13f6:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    13fa:	23 c0       	rjmp	.+70     	; 0x1442 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    13fc:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1400:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	8f 3f       	cpi	r24, 0xFF	; 255
    1408:	0c f0       	brlt	.+2      	; 0x140c <__vector_83+0x9e>
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	99 23       	and	r25, r25
    140e:	c9 f0       	breq	.+50     	; 0x1442 <__vector_83+0xd4>
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	27 30       	cpi	r18, 0x07	; 7
    1414:	31 05       	cpc	r19, r1
    1416:	08 f4       	brcc	.+2      	; 0x141a <__vector_83+0xac>
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	99 23       	and	r25, r25
    141c:	91 f0       	breq	.+36     	; 0x1442 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    141e:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1422:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1426:	88 3f       	cpi	r24, 0xF8	; 248
    1428:	1c f0       	brlt	.+6      	; 0x1430 <__vector_83+0xc2>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <__vector_83+0xc6>
    1430:	86 e0       	ldi	r24, 0x06	; 6
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	48 1b       	sub	r20, r24
    1438:	59 0b       	sbc	r21, r25
    143a:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    143e:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    1462:	e0 e7       	ldi	r30, 0x70	; 112
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	83 81       	ldd	r24, Z+3	; 0x03
    1468:	8f 7e       	andi	r24, 0xEF	; 239
    146a:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    146c:	e0 e4       	ldi	r30, 0x40	; 64
    146e:	f6 e0       	ldi	r31, 0x06	; 6
    1470:	80 81       	ld	r24, Z
    1472:	8a 6a       	ori	r24, 0xAA	; 170
    1474:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    147a:	88 e5       	ldi	r24, 0x58	; 88
    147c:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLA = USART_RXCINTLVL_HI_gc;
    147e:	e0 ea       	ldi	r30, 0xA0	; 160
    1480:	f8 e0       	ldi	r31, 0x08	; 8
    1482:	80 e3       	ldi	r24, 0x30	; 48
    1484:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1486:	84 ec       	ldi	r24, 0xC4	; 196
    1488:	85 83       	std	Z+5, r24	; 0x05
	#if OVERCLOCK == 48
		USARTC0.BAUDCTRLA = 7;  	//BSEL = fper/(2fbaud) -1;  48/(2*3) - 1 = 7
    148a:	87 e0       	ldi	r24, 0x07	; 7
    148c:	86 83       	std	Z+6, r24	; 0x06
	#else
		USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
	#endif
	USARTC0.BAUDCTRLB = 0x00;// USART_BSCALE0_bm goes to 1.5MHz for some reason;
    148e:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1490:	88 e1       	ldi	r24, 0x18	; 24
    1492:	84 83       	std	Z+4, r24	; 0x04
    1494:	08 95       	ret

00001496 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    1496:	e0 e7       	ldi	r30, 0x70	; 112
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	83 81       	ldd	r24, Z+3	; 0x03
    149c:	87 7f       	andi	r24, 0xF7	; 247
    149e:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    14a0:	e0 ec       	ldi	r30, 0xC0	; 192
    14a2:	f8 e0       	ldi	r31, 0x08	; 8
    14a4:	80 e4       	ldi	r24, 0x40	; 64
    14a6:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    14a8:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14aa:	88 e5       	ldi	r24, 0x58	; 88
    14ac:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    14b0:	08 95       	ret

000014b2 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    14b2:	1f 92       	push	r1
    14b4:	0f 92       	push	r0
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
	asm("nop");
    14bc:	00 00       	nop
}
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	0f 90       	pop	r0
    14c4:	1f 90       	pop	r1
    14c6:	18 95       	reti

000014c8 <__vector_25>:

ISR(USARTC0_RXC_vect){
    14c8:	1f 92       	push	r1
    14ca:	0f 92       	push	r0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	0f 92       	push	r0
    14d0:	11 24       	eor	r1, r1
    14d2:	8f 93       	push	r24
    14d4:	ef 93       	push	r30
    14d6:	ff 93       	push	r31
	unsigned char temp = USARTC0.DATA;
    14d8:	e0 ea       	ldi	r30, 0xA0	; 160
    14da:	f8 e0       	ldi	r31, 0x08	; 8
    14dc:	80 81       	ld	r24, Z
	USARTC0.DATA = temp;
    14de:	80 83       	st	Z, r24
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	8f 91       	pop	r24
    14e6:	0f 90       	pop	r0
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	0f 90       	pop	r0
    14ec:	1f 90       	pop	r1
    14ee:	18 95       	reti

000014f0 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14f0:	9f b7       	in	r25, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	e8 2f       	mov	r30, r24
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	e0 59       	subi	r30, 0x90	; 144
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	60 95       	com	r22
    14fe:	80 81       	ld	r24, Z
    1500:	68 23       	and	r22, r24
    1502:	60 83       	st	Z, r22
    1504:	9f bf       	out	0x3f, r25	; 63
    1506:	08 95       	ret

00001508 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1508:	86 30       	cpi	r24, 0x06	; 6
    150a:	11 f0       	breq	.+4      	; 0x1510 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1510:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1512:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1516:	81 fd       	sbrc	r24, 1
    1518:	26 c0       	rjmp	.+76     	; 0x1566 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    151a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    151c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    151e:	e0 e5       	ldi	r30, 0x50	; 80
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	82 60       	ori	r24, 0x02	; 2
    1526:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1528:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    152a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    152c:	81 ff       	sbrs	r24, 1
    152e:	fd cf       	rjmp	.-6      	; 0x152a <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1530:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1532:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1534:	a0 e5       	ldi	r26, 0x50	; 80
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	16 96       	adiw	r26, 0x06	; 6
    153a:	8c 91       	ld	r24, X
    153c:	16 97       	sbiw	r26, 0x06	; 6
    153e:	89 7f       	andi	r24, 0xF9	; 249
    1540:	16 96       	adiw	r26, 0x06	; 6
    1542:	8c 93       	st	X, r24
    1544:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1546:	e0 e6       	ldi	r30, 0x60	; 96
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 e8       	ldi	r24, 0x80	; 128
    154c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    154e:	8b eb       	ldi	r24, 0xBB	; 187
    1550:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1552:	16 96       	adiw	r26, 0x06	; 6
    1554:	8c 91       	ld	r24, X
    1556:	16 97       	sbiw	r26, 0x06	; 6
    1558:	84 60       	ori	r24, 0x04	; 4
    155a:	16 96       	adiw	r26, 0x06	; 6
    155c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    155e:	80 81       	ld	r24, Z
    1560:	81 60       	ori	r24, 0x01	; 1
    1562:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1564:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1566:	63 60       	ori	r22, 0x03	; 3
    1568:	84 e4       	ldi	r24, 0x44	; 68
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0c d5       	rcall	.+2584   	; 0x1f86 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    156e:	60 e4       	ldi	r22, 0x40	; 64
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	be cf       	rjmp	.-132    	; 0x14f0 <sysclk_enable_module>
    1574:	08 95       	ret

00001576 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1576:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <udi_vendor_alternate_setting>
    157a:	08 95       	ret

0000157c <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    157c:	1c d1       	rcall	.+568    	; 0x17b6 <udc_get_interface_desc>
    157e:	fc 01       	movw	r30, r24
    1580:	83 81       	ldd	r24, Z+3	; 0x03
    1582:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    1586:	81 11       	cpse	r24, r1
    1588:	02 c0       	rjmp	.+4      	; 0x158e <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    158a:	f4 c9       	rjmp	.-3096   	; 0x974 <main_vendor_enable>
    158c:	08 95       	ret
			return false;
		}
	}
	return true;
    158e:	81 e0       	ldi	r24, 0x01	; 1
}
    1590:	08 95       	ret

00001592 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    1592:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <udi_vendor_alternate_setting>
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	09 f4       	brne	.+2      	; 0x159c <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    159a:	01 ca       	rjmp	.-3070   	; 0x99e <main_vendor_disable>
    159c:	08 95       	ret

0000159e <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    159e:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    15a2:	88 23       	and	r24, r24
    15a4:	4c f4       	brge	.+18     	; 0x15b8 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15a6:	80 76       	andi	r24, 0x60	; 96
    15a8:	80 34       	cpi	r24, 0x40	; 64
    15aa:	a9 f4       	brne	.+42     	; 0x15d6 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    15ac:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    15b0:	81 11       	cpse	r24, r1
    15b2:	13 c0       	rjmp	.+38     	; 0x15da <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    15b4:	f9 c9       	rjmp	.-3086   	; 0x9a8 <main_setup_in_received>
    15b6:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15b8:	80 76       	andi	r24, 0x60	; 96
    15ba:	80 34       	cpi	r24, 0x40	; 64
    15bc:	81 f4       	brne	.+32     	; 0x15de <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    15be:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    15c2:	81 11       	cpse	r24, r1
    15c4:	0e c0       	rjmp	.+28     	; 0x15e2 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    15c6:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    15ca:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    15ce:	89 2b       	or	r24, r25
    15d0:	51 f0       	breq	.+20     	; 0x15e6 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    15d2:	e8 c9       	rjmp	.-3120   	; 0x9a4 <main_setup_out_received>
    15d4:	08 95       	ret
		}
	}
	return false; // Not supported request
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	08 95       	ret
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	08 95       	ret
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	08 95       	ret
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	08 95       	ret
    15e6:	80 e0       	ldi	r24, 0x00	; 0
}
    15e8:	08 95       	ret

000015ea <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    15ea:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    15ee:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    15f2:	01 90       	ld	r0, Z+
    15f4:	f0 81       	ld	r31, Z
    15f6:	e0 2d       	mov	r30, r0
    15f8:	22 81       	ldd	r18, Z+2	; 0x02
    15fa:	33 81       	ldd	r19, Z+3	; 0x03
    15fc:	2e 0f       	add	r18, r30
    15fe:	3f 1f       	adc	r19, r31
    1600:	fc 01       	movw	r30, r24
    1602:	40 81       	ld	r20, Z
    1604:	e4 0f       	add	r30, r20
    1606:	f1 1d       	adc	r31, r1
    1608:	e2 17       	cp	r30, r18
    160a:	f3 07       	cpc	r31, r19
    160c:	b8 f4       	brcc	.+46     	; 0x163c <udc_next_desc_in_iface+0x52>
    160e:	81 81       	ldd	r24, Z+1	; 0x01
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	b9 f0       	breq	.+46     	; 0x1642 <udc_next_desc_in_iface+0x58>
    1614:	86 13       	cpse	r24, r22
    1616:	09 c0       	rjmp	.+18     	; 0x162a <udc_next_desc_in_iface+0x40>
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <udc_next_desc_in_iface+0x3a>
    161a:	81 81       	ldd	r24, Z+1	; 0x01
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	a1 f0       	breq	.+40     	; 0x1648 <udc_next_desc_in_iface+0x5e>
    1620:	86 13       	cpse	r24, r22
    1622:	03 c0       	rjmp	.+6      	; 0x162a <udc_next_desc_in_iface+0x40>
    1624:	8e 2f       	mov	r24, r30
    1626:	9f 2f       	mov	r25, r31
    1628:	08 95       	ret
    162a:	80 81       	ld	r24, Z
    162c:	e8 0f       	add	r30, r24
    162e:	f1 1d       	adc	r31, r1
    1630:	e2 17       	cp	r30, r18
    1632:	f3 07       	cpc	r31, r19
    1634:	90 f3       	brcs	.-28     	; 0x161a <udc_next_desc_in_iface+0x30>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	08 95       	ret
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	08 95       	ret
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	08 95       	ret
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	08 95       	ret

0000164e <udc_valid_address>:
    164e:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1652:	8f 77       	andi	r24, 0x7F	; 127
    1654:	0c 94 ad 13 	jmp	0x275a	; 0x275a <udd_set_address>
    1658:	08 95       	ret

0000165a <udc_update_iface_desc>:
    165a:	90 91 a2 20 	lds	r25, 0x20A2	; 0x8020a2 <udc_num_configuration>
    165e:	99 23       	and	r25, r25
    1660:	81 f1       	breq	.+96     	; 0x16c2 <udc_update_iface_desc+0x68>
    1662:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1666:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    166a:	01 90       	ld	r0, Z+
    166c:	f0 81       	ld	r31, Z
    166e:	e0 2d       	mov	r30, r0
    1670:	94 81       	ldd	r25, Z+4	; 0x04
    1672:	89 17       	cp	r24, r25
    1674:	40 f5       	brcc	.+80     	; 0x16c6 <udc_update_iface_desc+0x6c>
    1676:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    167a:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    167e:	22 81       	ldd	r18, Z+2	; 0x02
    1680:	33 81       	ldd	r19, Z+3	; 0x03
    1682:	2e 0f       	add	r18, r30
    1684:	3f 1f       	adc	r19, r31
    1686:	e2 17       	cp	r30, r18
    1688:	f3 07       	cpc	r31, r19
    168a:	f8 f4       	brcc	.+62     	; 0x16ca <udc_update_iface_desc+0x70>
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	94 30       	cpi	r25, 0x04	; 4
    1690:	61 f4       	brne	.+24     	; 0x16aa <udc_update_iface_desc+0x50>
    1692:	92 81       	ldd	r25, Z+2	; 0x02
    1694:	98 13       	cpse	r25, r24
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <udc_update_iface_desc+0x50>
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	96 13       	cpse	r25, r22
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <udc_update_iface_desc+0x50>
    169e:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    16a2:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	08 95       	ret
    16aa:	90 81       	ld	r25, Z
    16ac:	e9 0f       	add	r30, r25
    16ae:	f1 1d       	adc	r31, r1
    16b0:	e2 17       	cp	r30, r18
    16b2:	f3 07       	cpc	r31, r19
    16b4:	58 f3       	brcs	.-42     	; 0x168c <udc_update_iface_desc+0x32>
    16b6:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    16ba:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	08 95       	ret
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	08 95       	ret
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	08 95       	ret
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	08 95       	ret

000016ce <udc_iface_disable>:
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	c8 2f       	mov	r28, r24
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	be df       	rcall	.-132    	; 0x165a <udc_update_iface_desc>
    16de:	18 2f       	mov	r17, r24
    16e0:	88 23       	and	r24, r24
    16e2:	81 f1       	breq	.+96     	; 0x1744 <udc_iface_disable+0x76>
    16e4:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    16e8:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    16ec:	ec 2f       	mov	r30, r28
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	8d 91       	ld	r24, X+
    16f8:	9c 91       	ld	r25, X
    16fa:	13 97       	sbiw	r26, 0x03	; 3
    16fc:	e8 0f       	add	r30, r24
    16fe:	f9 1f       	adc	r31, r25
    1700:	e0 80       	ld	r14, Z
    1702:	f1 80       	ldd	r15, Z+1	; 0x01
    1704:	d7 01       	movw	r26, r14
    1706:	16 96       	adiw	r26, 0x06	; 6
    1708:	ed 91       	ld	r30, X+
    170a:	fc 91       	ld	r31, X
    170c:	17 97       	sbiw	r26, 0x07	; 7
    170e:	09 95       	icall
    1710:	68 2f       	mov	r22, r24
    1712:	8c 2f       	mov	r24, r28
    1714:	a2 df       	rcall	.-188    	; 0x165a <udc_update_iface_desc>
    1716:	18 2f       	mov	r17, r24
    1718:	88 23       	and	r24, r24
    171a:	a1 f0       	breq	.+40     	; 0x1744 <udc_iface_disable+0x76>
    171c:	c0 91 9d 20 	lds	r28, 0x209D	; 0x80209d <udc_ptr_iface>
    1720:	d0 91 9e 20 	lds	r29, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    1724:	65 e0       	ldi	r22, 0x05	; 5
    1726:	ce 01       	movw	r24, r28
    1728:	60 df       	rcall	.-320    	; 0x15ea <udc_next_desc_in_iface>
    172a:	ec 01       	movw	r28, r24
    172c:	89 2b       	or	r24, r25
    172e:	21 f0       	breq	.+8      	; 0x1738 <udc_iface_disable+0x6a>
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	0e 94 82 15 	call	0x2b04	; 0x2b04 <udd_ep_free>
    1736:	f6 cf       	rjmp	.-20     	; 0x1724 <udc_iface_disable+0x56>
    1738:	d7 01       	movw	r26, r14
    173a:	12 96       	adiw	r26, 0x02	; 2
    173c:	ed 91       	ld	r30, X+
    173e:	fc 91       	ld	r31, X
    1740:	13 97       	sbiw	r26, 0x03	; 3
    1742:	09 95       	icall
    1744:	81 2f       	mov	r24, r17
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	08 95       	ret

00001752 <udc_iface_enable>:
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	18 2f       	mov	r17, r24
    175a:	7f df       	rcall	.-258    	; 0x165a <udc_update_iface_desc>
    175c:	88 23       	and	r24, r24
    175e:	39 f1       	breq	.+78     	; 0x17ae <udc_iface_enable+0x5c>
    1760:	c0 91 9d 20 	lds	r28, 0x209D	; 0x80209d <udc_ptr_iface>
    1764:	d0 91 9e 20 	lds	r29, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    1768:	65 e0       	ldi	r22, 0x05	; 5
    176a:	ce 01       	movw	r24, r28
    176c:	3e df       	rcall	.-388    	; 0x15ea <udc_next_desc_in_iface>
    176e:	ec 01       	movw	r28, r24
    1770:	89 2b       	or	r24, r25
    1772:	41 f0       	breq	.+16     	; 0x1784 <udc_iface_enable+0x32>
    1774:	4c 81       	ldd	r20, Y+4	; 0x04
    1776:	5d 81       	ldd	r21, Y+5	; 0x05
    1778:	6b 81       	ldd	r22, Y+3	; 0x03
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	fb d7       	rcall	.+4086   	; 0x2774 <udd_ep_alloc>
    177e:	81 11       	cpse	r24, r1
    1780:	f3 cf       	rjmp	.-26     	; 0x1768 <udc_iface_enable+0x16>
    1782:	15 c0       	rjmp	.+42     	; 0x17ae <udc_iface_enable+0x5c>
    1784:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    1788:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    178c:	e1 2f       	mov	r30, r17
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	ee 0f       	add	r30, r30
    1792:	ff 1f       	adc	r31, r31
    1794:	12 96       	adiw	r26, 0x02	; 2
    1796:	8d 91       	ld	r24, X+
    1798:	9c 91       	ld	r25, X
    179a:	13 97       	sbiw	r26, 0x03	; 3
    179c:	e8 0f       	add	r30, r24
    179e:	f9 1f       	adc	r31, r25
    17a0:	01 90       	ld	r0, Z+
    17a2:	f0 81       	ld	r31, Z
    17a4:	e0 2d       	mov	r30, r0
    17a6:	01 90       	ld	r0, Z+
    17a8:	f0 81       	ld	r31, Z
    17aa:	e0 2d       	mov	r30, r0
    17ac:	09 95       	icall
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	08 95       	ret

000017b6 <udc_get_interface_desc>:
    17b6:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <udc_ptr_iface>
    17ba:	90 91 9e 20 	lds	r25, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    17be:	08 95       	ret

000017c0 <udc_start>:
    17c0:	65 c7       	rjmp	.+3786   	; 0x268c <udd_enable>
    17c2:	08 95       	ret

000017c4 <udc_reset>:
    17c4:	cf 93       	push	r28
    17c6:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    17ca:	88 23       	and	r24, r24
    17cc:	c1 f0       	breq	.+48     	; 0x17fe <udc_reset+0x3a>
    17ce:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    17d2:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    17d6:	01 90       	ld	r0, Z+
    17d8:	f0 81       	ld	r31, Z
    17da:	e0 2d       	mov	r30, r0
    17dc:	84 81       	ldd	r24, Z+4	; 0x04
    17de:	88 23       	and	r24, r24
    17e0:	71 f0       	breq	.+28     	; 0x17fe <udc_reset+0x3a>
    17e2:	c0 e0       	ldi	r28, 0x00	; 0
    17e4:	8c 2f       	mov	r24, r28
    17e6:	73 df       	rcall	.-282    	; 0x16ce <udc_iface_disable>
    17e8:	cf 5f       	subi	r28, 0xFF	; 255
    17ea:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    17ee:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    17f2:	01 90       	ld	r0, Z+
    17f4:	f0 81       	ld	r31, Z
    17f6:	e0 2d       	mov	r30, r0
    17f8:	84 81       	ldd	r24, Z+4	; 0x04
    17fa:	c8 17       	cp	r28, r24
    17fc:	98 f3       	brcs	.-26     	; 0x17e4 <udc_reset+0x20>
    17fe:	10 92 a2 20 	sts	0x20A2, r1	; 0x8020a2 <udc_num_configuration>
    1802:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <udc_device_status>
    1806:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <udc_device_status+0x1>
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    180e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1810:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1814:	88 23       	and	r24, r24
    1816:	49 f1       	breq	.+82     	; 0x186a <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1818:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    181c:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1820:	ed 91       	ld	r30, X+
    1822:	fc 91       	ld	r31, X
    1824:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1826:	84 81       	ldd	r24, Z+4	; 0x04
    1828:	88 23       	and	r24, r24
    182a:	f9 f0       	breq	.+62     	; 0x186a <udc_sof_notify+0x5c>
    182c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    182e:	ec 2f       	mov	r30, r28
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	ee 0f       	add	r30, r30
    1834:	ff 1f       	adc	r31, r31
    1836:	12 96       	adiw	r26, 0x02	; 2
    1838:	8d 91       	ld	r24, X+
    183a:	9c 91       	ld	r25, X
    183c:	13 97       	sbiw	r26, 0x03	; 3
    183e:	e8 0f       	add	r30, r24
    1840:	f9 1f       	adc	r31, r25
    1842:	01 90       	ld	r0, Z+
    1844:	f0 81       	ld	r31, Z
    1846:	e0 2d       	mov	r30, r0
    1848:	00 84       	ldd	r0, Z+8	; 0x08
    184a:	f1 85       	ldd	r31, Z+9	; 0x09
    184c:	e0 2d       	mov	r30, r0
    184e:	30 97       	sbiw	r30, 0x00	; 0
    1850:	09 f0       	breq	.+2      	; 0x1854 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1852:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1854:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1856:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    185a:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    185e:	ed 91       	ld	r30, X+
    1860:	fc 91       	ld	r31, X
    1862:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1864:	84 81       	ldd	r24, Z+4	; 0x04
    1866:	c8 17       	cp	r28, r24
    1868:	10 f3       	brcs	.-60     	; 0x182e <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1876:	ea e9       	ldi	r30, 0x9A	; 154
    1878:	f3 e2       	ldi	r31, 0x23	; 35
    187a:	12 86       	std	Z+10, r1	; 0x0a
    187c:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    187e:	14 86       	std	Z+12, r1	; 0x0c
    1880:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1882:	16 86       	std	Z+14, r1	; 0x0e
    1884:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	88 23       	and	r24, r24
    188c:	3c f4       	brge	.+14     	; 0x189c <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    188e:	40 91 a0 23 	lds	r20, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1892:	50 91 a1 23 	lds	r21, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1896:	45 2b       	or	r20, r21
    1898:	09 f4       	brne	.+2      	; 0x189c <udc_process_setup+0x2e>
    189a:	69 c3       	rjmp	.+1746   	; 0x1f6e <udc_process_setup+0x700>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    189c:	98 2f       	mov	r25, r24
    189e:	90 76       	andi	r25, 0x60	; 96
    18a0:	90 34       	cpi	r25, 0x40	; 64
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <udc_process_setup+0x38>
    18a4:	0a c1       	rjmp	.+532    	; 0x1aba <udc_process_setup+0x24c>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    18a6:	e0 91 9b 23 	lds	r30, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    18aa:	4e 2f       	mov	r20, r30
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	fa 01       	movw	r30, r20
    18b0:	e0 5a       	subi	r30, 0xA0	; 160
    18b2:	f1 09       	sbc	r31, r1
    18b4:	e9 30       	cpi	r30, 0x09	; 9
    18b6:	f1 05       	cpc	r31, r1
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <udc_process_setup+0x4e>
    18ba:	ff c0       	rjmp	.+510    	; 0x1aba <udc_process_setup+0x24c>
    18bc:	ea 5f       	subi	r30, 0xFA	; 250
    18be:	fe 4f       	sbci	r31, 0xFE	; 254
    18c0:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    18ca:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    18ce:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    18d2:	ee e7       	ldi	r30, 0x7E	; 126
    18d4:	f1 e2       	ldi	r31, 0x21	; 33
    18d6:	85 87       	std	Z+13, r24	; 0x0d
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    18d8:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    18dc:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    18e0:	96 87       	std	Z+14, r25	; 0x0e
			uds.calValNeg = cali_value_negative_gradient;
    18e2:	80 91 72 21 	lds	r24, 0x2172	; 0x802172 <cali_value_negative_gradient>
    18e6:	87 87       	std	Z+15, r24	; 0x0f
			uds.calValPos = cali_value_positive_gradient;
    18e8:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <cali_value_positive_gradient>
    18ec:	80 8b       	std	Z+16, r24	; 0x10
			uds.CALA = DFLLRC2M.CALA;
    18ee:	a8 e6       	ldi	r26, 0x68	; 104
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	12 96       	adiw	r26, 0x02	; 2
    18f4:	8c 91       	ld	r24, X
    18f6:	12 97       	sbiw	r26, 0x02	; 2
    18f8:	81 8b       	std	Z+17, r24	; 0x11
			uds.CALB = DFLLRC2M.CALB;
    18fa:	13 96       	adiw	r26, 0x03	; 3
    18fc:	8c 91       	ld	r24, X
    18fe:	82 8b       	std	Z+18, r24	; 0x12
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    1900:	60 91 a0 23 	lds	r22, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1904:	70 91 a1 23 	lds	r23, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1908:	cf 01       	movw	r24, r30
    190a:	2d d7       	rcall	.+3674   	; 0x2766 <udd_set_setup_payload>
    190c:	34 c3       	rjmp	.+1640   	; 0x1f76 <udc_process_setup+0x708>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    190e:	e0 e0       	ldi	r30, 0x00	; 0
    1910:	f8 e0       	ldi	r31, 0x08	; 8
    1912:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1914:	ca e9       	ldi	r28, 0x9A	; 154
    1916:	d3 e2       	ldi	r29, 0x23	; 35
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	9b 81       	ldd	r25, Y+3	; 0x03
    191c:	86 ab       	std	Z+54, r24	; 0x36
    191e:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	8f 70       	andi	r24, 0x0F	; 15
    1924:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1926:	6e 81       	ldd	r22, Y+6	; 0x06
    1928:	7f 81       	ldd	r23, Y+7	; 0x07
    192a:	8a e9       	ldi	r24, 0x9A	; 154
    192c:	91 e2       	ldi	r25, 0x21	; 33
    192e:	1b d7       	rcall	.+3638   	; 0x2766 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    1938:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    193c:	82 17       	cp	r24, r18
    193e:	93 07       	cpc	r25, r19
    1940:	09 f4       	brne	.+2      	; 0x1944 <udc_process_setup+0xd6>
    1942:	19 c3       	rjmp	.+1586   	; 0x1f76 <udc_process_setup+0x708>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1944:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    1948:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				tiny_dma_delayed_set(global_mode);
    194c:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    1950:	f3 d8       	rcall	.-3610   	; 0xb38 <tiny_dma_delayed_set>
    1952:	11 c3       	rjmp	.+1570   	; 0x1f76 <udc_process_setup+0x708>
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    1954:	e0 e4       	ldi	r30, 0x40	; 64
    1956:	f8 e0       	ldi	r31, 0x08	; 8
    1958:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    195a:	ca e9       	ldi	r28, 0x9A	; 154
    195c:	d3 e2       	ldi	r29, 0x23	; 35
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	9b 81       	ldd	r25, Y+3	; 0x03
    1962:	86 ab       	std	Z+54, r24	; 0x36
    1964:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	8f 70       	andi	r24, 0x0F	; 15
    196a:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    196c:	6e 81       	ldd	r22, Y+6	; 0x06
    196e:	7f 81       	ldd	r23, Y+7	; 0x07
    1970:	8b ea       	ldi	r24, 0xAB	; 171
    1972:	93 e2       	ldi	r25, 0x23	; 35
    1974:	f8 d6       	rcall	.+3568   	; 0x2766 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    197e:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1982:	82 17       	cp	r24, r18
    1984:	93 07       	cpc	r25, r19
    1986:	09 f4       	brne	.+2      	; 0x198a <udc_process_setup+0x11c>
    1988:	f6 c2       	rjmp	.+1516   	; 0x1f76 <udc_process_setup+0x708>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    198a:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    198e:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				tiny_dma_delayed_set(global_mode);
    1992:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    1996:	d0 d8       	rcall	.-3680   	; 0xb38 <tiny_dma_delayed_set>
    1998:	ee c2       	rjmp	.+1500   	; 0x1f76 <udc_process_setup+0x708>
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    199a:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    199e:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    19a2:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    19a6:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <PSU_target>
    19aa:	e5 c2       	rjmp	.+1482   	; 0x1f76 <udc_process_setup+0x708>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    19ac:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    19b0:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    19b4:	e0 c2       	rjmp	.+1472   	; 0x1f76 <udc_process_setup+0x708>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    19b6:	e0 91 9c 23 	lds	r30, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    19ba:	f0 91 9d 23 	lds	r31, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    19be:	e8 30       	cpi	r30, 0x08	; 8
    19c0:	f1 05       	cpc	r31, r1
    19c2:	08 f0       	brcs	.+2      	; 0x19c6 <udc_process_setup+0x158>
    19c4:	7a c0       	rjmp	.+244    	; 0x1aba <udc_process_setup+0x24c>
    19c6:	e1 5f       	subi	r30, 0xF1	; 241
    19c8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ca:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	18 d8       	rcall	.-4048   	; 0xa04 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19d4:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    19d8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <tiny_adc_ch0setup>
					tiny_dma_delayed_set(0);
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	ac d8       	rcall	.-3752   	; 0xb38 <tiny_dma_delayed_set>
    19e0:	ca c2       	rjmp	.+1428   	; 0x1f76 <udc_process_setup+0x708>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	0e d8       	rcall	.-4068   	; 0xa04 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19e8:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    19ec:	0e 94 d6 04 	call	0x9ac	; 0x9ac <tiny_adc_ch0setup>
					tiny_dma_delayed_set(1);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	a2 d8       	rcall	.-3772   	; 0xb38 <tiny_dma_delayed_set>
    19f4:	c0 c2       	rjmp	.+1408   	; 0x1f76 <udc_process_setup+0x708>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	04 d8       	rcall	.-4088   	; 0xa04 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19fc:	ca e9       	ldi	r28, 0x9A	; 154
    19fe:	d3 e2       	ldi	r29, 0x23	; 35
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	0e 94 d6 04 	call	0x9ac	; 0x9ac <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	0e 94 e5 04 	call	0x9ca	; 0x9ca <tiny_adc_ch1setup>
					tiny_dma_delayed_set(2);
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	94 d8       	rcall	.-3800   	; 0xb38 <tiny_dma_delayed_set>
    1a10:	b2 c2       	rjmp	.+1380   	; 0x1f76 <udc_process_setup+0x708>
					break;
				case 3:  //Mode 3
					tiny_dma_delayed_set(3);
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	91 d8       	rcall	.-3806   	; 0xb38 <tiny_dma_delayed_set>
    1a16:	af c2       	rjmp	.+1374   	; 0x1f76 <udc_process_setup+0x708>
					break;
				case 4:  //Mode 4
					tiny_dma_delayed_set(4);
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	8e d8       	rcall	.-3812   	; 0xb38 <tiny_dma_delayed_set>
    1a1c:	ac c2       	rjmp	.+1368   	; 0x1f76 <udc_process_setup+0x708>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a26:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a2a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <tiny_adc_ch0setup>
					tiny_dma_delayed_set(5);
    1a2e:	85 e0       	ldi	r24, 0x05	; 5
    1a30:	83 d8       	rcall	.-3834   	; 0xb38 <tiny_dma_delayed_set>
    1a32:	a1 c2       	rjmp	.+1346   	; 0x1f76 <udc_process_setup+0x708>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a3c:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a40:	0e 94 d6 04 	call	0x9ac	; 0x9ac <tiny_adc_ch0setup>
					tiny_dma_delayed_set(6);
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	78 d8       	rcall	.-3856   	; 0xb38 <tiny_dma_delayed_set>
    1a48:	96 c2       	rjmp	.+1324   	; 0x1f76 <udc_process_setup+0x708>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	0e 94 02 05 	call	0xa04	; 0xa04 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1a52:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a56:	80 68       	ori	r24, 0x80	; 128
    1a58:	0e 94 d6 04 	call	0x9ac	; 0x9ac <tiny_adc_ch0setup>
					tiny_dma_delayed_set(7);
    1a5c:	87 e0       	ldi	r24, 0x07	; 7
    1a5e:	6c d8       	rcall	.-3880   	; 0xb38 <tiny_dma_delayed_set>
    1a60:	8a c2       	rjmp	.+1300   	; 0x1f76 <udc_process_setup+0x708>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1a62:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1a66:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1a6a:	85 c2       	rjmp	.+1290   	; 0x1f76 <udc_process_setup+0x708>
			return 1;
		case 0xa7:  //Soft Reset
		//Fill EEPROM buffer with value
		
		if(udd_g_ctrlreq.req.wValue){
    1a6c:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1a70:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1a74:	89 2b       	or	r24, r25
    1a76:	91 f0       	breq	.+36     	; 0x1a9c <udc_process_setup+0x22e>
			eeprom_safe_read();
    1a78:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_safe_read>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
    1a7c:	80 e2       	ldi	r24, 0x20	; 32
    1a7e:	e8 ea       	ldi	r30, 0xA8	; 168
    1a80:	fb e2       	ldi	r31, 0x2B	; 43
    1a82:	ab ea       	ldi	r26, 0xAB	; 171
    1a84:	b5 e2       	ldi	r27, 0x25	; 37
    1a86:	01 90       	ld	r0, Z+
    1a88:	0d 92       	st	X+, r0
    1a8a:	8a 95       	dec	r24
    1a8c:	e1 f7       	brne	.-8      	; 0x1a86 <udc_process_setup+0x218>
			eeprom_buffer_write[0] = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	80 93 ab 25 	sts	0x25AB, r24	; 0x8025ab <eeprom_buffer_write>
			eeprom_safe_write();
    1a94:	0e 94 9a 03 	call	0x734	; 0x734 <eeprom_safe_write>
			eeprom_safe_read();
    1a98:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_safe_read>
		}
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1a9c:	e9 e7       	ldi	r30, 0x79	; 121
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	88 ed       	ldi	r24, 0xD8	; 216
    1aa4:	f8 94       	cli
    1aa6:	84 bf       	out	0x34, r24	; 52
    1aa8:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		case 0xa8:  //Firmware Version Request
			udd_set_setup_payload(&firmver, udd_g_ctrlreq.req.wLength);
    1aaa:	60 91 a0 23 	lds	r22, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1aae:	70 91 a1 23 	lds	r23, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1ab2:	8a e8       	ldi	r24, 0x8A	; 138
    1ab4:	90 e2       	ldi	r25, 0x20	; 32
    1ab6:	57 d6       	rcall	.+3246   	; 0x2766 <udd_set_setup_payload>
    1ab8:	5e c2       	rjmp	.+1212   	; 0x1f76 <udc_process_setup+0x708>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1aba:	91 11       	cpse	r25, r1
    1abc:	e1 c1       	rjmp	.+962    	; 0x1e80 <udc_process_setup+0x612>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1abe:	22 23       	and	r18, r18
    1ac0:	0c f0       	brlt	.+2      	; 0x1ac4 <udc_process_setup+0x256>
    1ac2:	05 c1       	rjmp	.+522    	; 0x1cce <udc_process_setup+0x460>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1ac4:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1ac8:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1acc:	21 15       	cp	r18, r1
    1ace:	31 05       	cpc	r19, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <udc_process_setup+0x266>
    1ad2:	d6 c1       	rjmp	.+940    	; 0x1e80 <udc_process_setup+0x612>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ad4:	8f 71       	andi	r24, 0x1F	; 31
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <udc_process_setup+0x26c>
    1ad8:	a3 c0       	rjmp	.+326    	; 0x1c20 <udc_process_setup+0x3b2>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ada:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1ade:	96 30       	cpi	r25, 0x06	; 6
    1ae0:	79 f0       	breq	.+30     	; 0x1b00 <udc_process_setup+0x292>
    1ae2:	98 30       	cpi	r25, 0x08	; 8
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <udc_process_setup+0x27a>
    1ae6:	92 c0       	rjmp	.+292    	; 0x1c0c <udc_process_setup+0x39e>
    1ae8:	91 11       	cpse	r25, r1
    1aea:	9a c0       	rjmp	.+308    	; 0x1c20 <udc_process_setup+0x3b2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1aec:	22 30       	cpi	r18, 0x02	; 2
    1aee:	31 05       	cpc	r19, r1
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <udc_process_setup+0x286>
    1af2:	c6 c1       	rjmp	.+908    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	86 ea       	ldi	r24, 0xA6	; 166
    1afa:	90 e2       	ldi	r25, 0x20	; 32
    1afc:	34 d6       	rcall	.+3176   	; 0x2766 <udd_set_setup_payload>
    1afe:	3d c2       	rjmp	.+1146   	; 0x1f7a <udc_process_setup+0x70c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b00:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1b04:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b08:	29 2f       	mov	r18, r25
    1b0a:	33 27       	eor	r19, r19
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	a9 f0       	breq	.+42     	; 0x1b3c <udc_process_setup+0x2ce>
    1b12:	24 f4       	brge	.+8      	; 0x1b1c <udc_process_setup+0x2ae>
    1b14:	21 30       	cpi	r18, 0x01	; 1
    1b16:	31 05       	cpc	r19, r1
    1b18:	41 f0       	breq	.+16     	; 0x1b2a <udc_process_setup+0x2bc>
    1b1a:	a9 c1       	rjmp	.+850    	; 0x1e6e <udc_process_setup+0x600>
    1b1c:	23 30       	cpi	r18, 0x03	; 3
    1b1e:	31 05       	cpc	r19, r1
    1b20:	d9 f1       	breq	.+118    	; 0x1b98 <udc_process_setup+0x32a>
    1b22:	2f 30       	cpi	r18, 0x0F	; 15
    1b24:	31 05       	cpc	r19, r1
    1b26:	51 f1       	breq	.+84     	; 0x1b7c <udc_process_setup+0x30e>
    1b28:	a2 c1       	rjmp	.+836    	; 0x1e6e <udc_process_setup+0x600>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1b2a:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1b2e:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1b32:	dc 01       	movw	r26, r24
    1b34:	6c 91       	ld	r22, X
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	16 d6       	rcall	.+3116   	; 0x2766 <udd_set_setup_payload>
    1b3a:	59 c0       	rjmp	.+178    	; 0x1bee <udc_process_setup+0x380>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1b3c:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1b40:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1b44:	21 89       	ldd	r18, Z+17	; 0x11
    1b46:	82 17       	cp	r24, r18
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <udc_process_setup+0x2de>
    1b4a:	9a c1       	rjmp	.+820    	; 0x1e80 <udc_process_setup+0x612>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1b4c:	99 27       	eor	r25, r25
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1b5a:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1b5e:	e8 0f       	add	r30, r24
    1b60:	f9 1f       	adc	r31, r25
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1b66:	fc 01       	movw	r30, r24
    1b68:	62 81       	ldd	r22, Z+2	; 0x02
    1b6a:	73 81       	ldd	r23, Z+3	; 0x03
    1b6c:	fc d5       	rcall	.+3064   	; 0x2766 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1b6e:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    1b72:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	81 83       	std	Z+1, r24	; 0x01
    1b7a:	39 c0       	rjmp	.+114    	; 0x1bee <udc_process_setup+0x380>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1b7c:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1b80:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <udc_process_setup+0x31c>
    1b88:	7b c1       	rjmp	.+758    	; 0x1e80 <udc_process_setup+0x612>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	12 96       	adiw	r26, 0x02	; 2
    1b8e:	6d 91       	ld	r22, X+
    1b90:	7c 91       	ld	r23, X
    1b92:	13 97       	sbiw	r26, 0x03	; 3
    1b94:	e8 d5       	rcall	.+3024   	; 0x2766 <udd_set_setup_payload>
    1b96:	2b c0       	rjmp	.+86     	; 0x1bee <udc_process_setup+0x380>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1b98:	99 27       	eor	r25, r25
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <udc_process_setup+0x34e>
    1ba0:	38 f0       	brcs	.+14     	; 0x1bb0 <udc_process_setup+0x342>
    1ba2:	02 97       	sbiw	r24, 0x02	; 2
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <udc_process_setup+0x33a>
    1ba6:	6c c1       	rjmp	.+728    	; 0x1e80 <udc_process_setup+0x612>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1ba8:	2a e6       	ldi	r18, 0x6A	; 106
    1baa:	30 e2       	ldi	r19, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1bac:	88 e0       	ldi	r24, 0x08	; 8
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <udc_process_setup+0x354>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1bb0:	64 e0       	ldi	r22, 0x04	; 4
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	8c e7       	ldi	r24, 0x7C	; 124
    1bb6:	90 e2       	ldi	r25, 0x20	; 32
    1bb8:	d6 d5       	rcall	.+2988   	; 0x2766 <udd_set_setup_payload>
    1bba:	19 c0       	rjmp	.+50     	; 0x1bee <udc_process_setup+0x380>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1bbc:	23 e7       	ldi	r18, 0x73	; 115
    1bbe:	30 e2       	ldi	r19, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1bc0:	87 e0       	ldi	r24, 0x07	; 7
    1bc2:	42 2f       	mov	r20, r18
    1bc4:	aa e5       	ldi	r26, 0x5A	; 90
    1bc6:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1bc8:	e2 2f       	mov	r30, r18
    1bca:	f3 2f       	mov	r31, r19
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1bcc:	21 91       	ld	r18, Z+
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	2d 93       	st	X+, r18
    1bd2:	3d 93       	st	X+, r19
    1bd4:	9e 2f       	mov	r25, r30
    1bd6:	94 1b       	sub	r25, r20
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1bd8:	98 17       	cp	r25, r24
    1bda:	c0 f3       	brcs	.-16     	; 0x1bcc <udc_process_setup+0x35e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1bdc:	68 2f       	mov	r22, r24
    1bde:	66 0f       	add	r22, r22
    1be0:	6e 5f       	subi	r22, 0xFE	; 254
    1be2:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	88 e5       	ldi	r24, 0x58	; 88
    1bea:	90 e2       	ldi	r25, 0x20	; 32
    1bec:	bc d5       	rcall	.+2936   	; 0x2766 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1bee:	ea e9       	ldi	r30, 0x9A	; 154
    1bf0:	f3 e2       	ldi	r31, 0x23	; 35
    1bf2:	86 81       	ldd	r24, Z+6	; 0x06
    1bf4:	97 81       	ldd	r25, Z+7	; 0x07
    1bf6:	22 85       	ldd	r18, Z+10	; 0x0a
    1bf8:	33 85       	ldd	r19, Z+11	; 0x0b
    1bfa:	82 17       	cp	r24, r18
    1bfc:	93 07       	cpc	r25, r19
    1bfe:	08 f0       	brcs	.+2      	; 0x1c02 <udc_process_setup+0x394>
    1c00:	bc c1       	rjmp	.+888    	; 0x1f7a <udc_process_setup+0x70c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1c02:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <udd_g_ctrlreq+0xa>
    1c06:	90 93 a5 23 	sts	0x23A5, r25	; 0x8023a5 <udd_g_ctrlreq+0xb>
    1c0a:	b7 c1       	rjmp	.+878    	; 0x1f7a <udc_process_setup+0x70c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1c0c:	21 30       	cpi	r18, 0x01	; 1
    1c0e:	31 05       	cpc	r19, r1
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <udc_process_setup+0x3a6>
    1c12:	36 c1       	rjmp	.+620    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	82 ea       	ldi	r24, 0xA2	; 162
    1c1a:	90 e2       	ldi	r25, 0x20	; 32
    1c1c:	a4 d5       	rcall	.+2888   	; 0x2766 <udd_set_setup_payload>
    1c1e:	ad c1       	rjmp	.+858    	; 0x1f7a <udc_process_setup+0x70c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	e1 f5       	brne	.+120    	; 0x1c9c <udc_process_setup+0x42e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c24:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1c28:	9a 30       	cpi	r25, 0x0A	; 10
    1c2a:	c1 f5       	brne	.+112    	; 0x1c9c <udc_process_setup+0x42e>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1c2c:	21 30       	cpi	r18, 0x01	; 1
    1c2e:	31 05       	cpc	r19, r1
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <udc_process_setup+0x3c6>
    1c32:	26 c1       	rjmp	.+588    	; 0x1e80 <udc_process_setup+0x612>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c34:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1c38:	88 23       	and	r24, r24
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <udc_process_setup+0x3d0>
    1c3c:	21 c1       	rjmp	.+578    	; 0x1e80 <udc_process_setup+0x612>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c3e:	c0 91 9e 23 	lds	r28, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1c42:	d0 91 9f 23 	lds	r29, 0x239F	; 0x80239f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c46:	00 91 9f 20 	lds	r16, 0x209F	; 0x80209f <udc_ptr_conf>
    1c4a:	10 91 a0 20 	lds	r17, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1c4e:	d8 01       	movw	r26, r16
    1c50:	ed 91       	ld	r30, X+
    1c52:	fc 91       	ld	r31, X
    1c54:	84 81       	ldd	r24, Z+4	; 0x04
    1c56:	c8 17       	cp	r28, r24
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <udc_process_setup+0x3ee>
    1c5a:	12 c1       	rjmp	.+548    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	8c 2f       	mov	r24, r28
    1c60:	fc dc       	rcall	.-1544   	; 0x165a <udc_update_iface_desc>
    1c62:	88 23       	and	r24, r24
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <udc_process_setup+0x3fa>
    1c66:	0c c1       	rjmp	.+536    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c68:	ce 01       	movw	r24, r28
    1c6a:	99 27       	eor	r25, r25
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	d8 01       	movw	r26, r16
    1c72:	12 96       	adiw	r26, 0x02	; 2
    1c74:	ed 91       	ld	r30, X+
    1c76:	fc 91       	ld	r31, X
    1c78:	13 97       	sbiw	r26, 0x03	; 3
    1c7a:	e8 0f       	add	r30, r24
    1c7c:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1c7e:	01 90       	ld	r0, Z+
    1c80:	f0 81       	ld	r31, Z
    1c82:	e0 2d       	mov	r30, r0
    1c84:	86 81       	ldd	r24, Z+6	; 0x06
    1c86:	97 81       	ldd	r25, Z+7	; 0x07
    1c88:	fc 01       	movw	r30, r24
    1c8a:	09 95       	icall
    1c8c:	80 93 a4 20 	sts	0x20A4, r24	; 0x8020a4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	84 ea       	ldi	r24, 0xA4	; 164
    1c96:	90 e2       	ldi	r25, 0x20	; 32
    1c98:	66 d5       	rcall	.+2764   	; 0x2766 <udd_set_setup_payload>
    1c9a:	6f c1       	rjmp	.+734    	; 0x1f7a <udc_process_setup+0x70c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <udc_process_setup+0x434>
    1ca0:	ef c0       	rjmp	.+478    	; 0x1e80 <udc_process_setup+0x612>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ca2:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	e4 c0       	rjmp	.+456    	; 0x1e72 <udc_process_setup+0x604>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <udc_process_setup+0x444>
    1cb0:	e7 c0       	rjmp	.+462    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1cb2:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1cb6:	d3 d5       	rcall	.+2982   	; 0x285e <udd_ep_is_halted>
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	80 93 9b 20 	sts	0x209B, r24	; 0x80209b <udc_ep_status.5686>
    1cbe:	90 93 9c 20 	sts	0x209C, r25	; 0x80209c <udc_ep_status.5686+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1cc2:	62 e0       	ldi	r22, 0x02	; 2
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	8b e9       	ldi	r24, 0x9B	; 155
    1cc8:	90 e2       	ldi	r25, 0x20	; 32
    1cca:	4d d5       	rcall	.+2714   	; 0x2766 <udd_set_setup_payload>
    1ccc:	56 c1       	rjmp	.+684    	; 0x1f7a <udc_process_setup+0x70c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1cce:	8f 71       	andi	r24, 0x1F	; 31
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <udc_process_setup+0x466>
    1cd2:	83 c0       	rjmp	.+262    	; 0x1dda <udc_process_setup+0x56c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cd4:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1cd8:	93 30       	cpi	r25, 0x03	; 3
    1cda:	09 f4       	brne	.+2      	; 0x1cde <udc_process_setup+0x470>
    1cdc:	cc c0       	rjmp	.+408    	; 0x1e76 <udc_process_setup+0x608>
    1cde:	18 f4       	brcc	.+6      	; 0x1ce6 <udc_process_setup+0x478>
    1ce0:	91 30       	cpi	r25, 0x01	; 1
    1ce2:	a1 f0       	breq	.+40     	; 0x1d0c <udc_process_setup+0x49e>
    1ce4:	7a c0       	rjmp	.+244    	; 0x1dda <udc_process_setup+0x56c>
    1ce6:	95 30       	cpi	r25, 0x05	; 5
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <udc_process_setup+0x482>
    1cea:	99 30       	cpi	r25, 0x09	; 9
    1cec:	39 f1       	breq	.+78     	; 0x1d3c <udc_process_setup+0x4ce>
    1cee:	75 c0       	rjmp	.+234    	; 0x1dda <udc_process_setup+0x56c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1cf0:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1cf4:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1cf8:	89 2b       	or	r24, r25
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <udc_process_setup+0x490>
    1cfc:	c1 c0       	rjmp	.+386    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1cfe:	87 e2       	ldi	r24, 0x27	; 39
    1d00:	9b e0       	ldi	r25, 0x0B	; 11
    1d02:	80 93 a6 23 	sts	0x23A6, r24	; 0x8023a6 <udd_g_ctrlreq+0xc>
    1d06:	90 93 a7 23 	sts	0x23A7, r25	; 0x8023a7 <udd_g_ctrlreq+0xd>
    1d0a:	37 c1       	rjmp	.+622    	; 0x1f7a <udc_process_setup+0x70c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d0c:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1d10:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1d14:	89 2b       	or	r24, r25
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <udc_process_setup+0x4ac>
    1d18:	b3 c0       	rjmp	.+358    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1d1a:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1d1e:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <udc_process_setup+0x4ba>
    1d26:	ac c0       	rjmp	.+344    	; 0x1e80 <udc_process_setup+0x612>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1d28:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <udc_device_status>
    1d2c:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <udc_device_status+0x1>
    1d30:	8d 7f       	andi	r24, 0xFD	; 253
    1d32:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <udc_device_status>
    1d36:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <udc_device_status+0x1>
    1d3a:	1f c1       	rjmp	.+574    	; 0x1f7a <udc_process_setup+0x70c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1d3c:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1d40:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1d44:	89 2b       	or	r24, r25
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <udc_process_setup+0x4dc>
    1d48:	9b c0       	rjmp	.+310    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1d4a:	0a d5       	rcall	.+2580   	; 0x2760 <udd_getaddress>
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <udc_process_setup+0x4e4>
    1d50:	97 c0       	rjmp	.+302    	; 0x1e80 <udc_process_setup+0x612>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d52:	20 91 9c 23 	lds	r18, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1d56:	30 91 9d 23 	lds	r19, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1d5a:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1d5c:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1d60:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d64:	81 89       	ldd	r24, Z+17	; 0x11
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	82 17       	cp	r24, r18
    1d6a:	93 07       	cpc	r25, r19
    1d6c:	08 f4       	brcc	.+2      	; 0x1d70 <udc_process_setup+0x502>
    1d6e:	88 c0       	rjmp	.+272    	; 0x1e80 <udc_process_setup+0x612>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1d70:	29 dd       	rcall	.-1454   	; 0x17c4 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1d72:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1d76:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1d7a:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <udc_process_setup+0x516>
    1d82:	fb c0       	rjmp	.+502    	; 0x1f7a <udc_process_setup+0x70c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1d84:	99 27       	eor	r25, r25
    1d86:	81 50       	subi	r24, 0x01	; 1
    1d88:	90 4c       	sbci	r25, 0xC0	; 192
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1d96:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1d9a:	e8 0f       	add	r30, r24
    1d9c:	f9 1f       	adc	r31, r25
    1d9e:	e0 93 9f 20 	sts	0x209F, r30	; 0x80209f <udc_ptr_conf>
    1da2:	f0 93 a0 20 	sts	0x20A0, r31	; 0x8020a0 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1da6:	01 90       	ld	r0, Z+
    1da8:	f0 81       	ld	r31, Z
    1daa:	e0 2d       	mov	r30, r0
    1dac:	84 81       	ldd	r24, Z+4	; 0x04
    1dae:	88 23       	and	r24, r24
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <udc_process_setup+0x546>
    1db2:	e3 c0       	rjmp	.+454    	; 0x1f7a <udc_process_setup+0x70c>
    1db4:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	8c 2f       	mov	r24, r28
    1dba:	cb dc       	rcall	.-1642   	; 0x1752 <udc_iface_enable>
    1dbc:	88 23       	and	r24, r24
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <udc_process_setup+0x554>
    1dc0:	5f c0       	rjmp	.+190    	; 0x1e80 <udc_process_setup+0x612>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1dc2:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dc4:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1dc8:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1dcc:	01 90       	ld	r0, Z+
    1dce:	f0 81       	ld	r31, Z
    1dd0:	e0 2d       	mov	r30, r0
    1dd2:	84 81       	ldd	r24, Z+4	; 0x04
    1dd4:	c8 17       	cp	r28, r24
    1dd6:	78 f3       	brcs	.-34     	; 0x1db6 <udc_process_setup+0x548>
    1dd8:	d0 c0       	rjmp	.+416    	; 0x1f7a <udc_process_setup+0x70c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	e1 f4       	brne	.+56     	; 0x1e16 <udc_process_setup+0x5a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1dde:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1de2:	9b 30       	cpi	r25, 0x0B	; 11
    1de4:	c1 f4       	brne	.+48     	; 0x1e16 <udc_process_setup+0x5a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1de6:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1dea:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1dee:	89 2b       	or	r24, r25
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <udc_process_setup+0x586>
    1df2:	46 c0       	rjmp	.+140    	; 0x1e80 <udc_process_setup+0x612>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1df4:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1df8:	88 23       	and	r24, r24
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <udc_process_setup+0x590>
    1dfc:	41 c0       	rjmp	.+130    	; 0x1e80 <udc_process_setup+0x612>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1dfe:	ea e9       	ldi	r30, 0x9A	; 154
    1e00:	f3 e2       	ldi	r31, 0x23	; 35
    1e02:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1e04:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1e06:	8c 2f       	mov	r24, r28
    1e08:	62 dc       	rcall	.-1852   	; 0x16ce <udc_iface_disable>
    1e0a:	88 23       	and	r24, r24
    1e0c:	c9 f1       	breq	.+114    	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1e0e:	6d 2f       	mov	r22, r29
    1e10:	8c 2f       	mov	r24, r28
    1e12:	9f dc       	rcall	.-1730   	; 0x1752 <udc_iface_enable>
    1e14:	33 c0       	rjmp	.+102    	; 0x1e7c <udc_process_setup+0x60e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	99 f5       	brne	.+102    	; 0x1e80 <udc_process_setup+0x612>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e1a:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	19 f0       	breq	.+6      	; 0x1e28 <udc_process_setup+0x5ba>
    1e22:	83 30       	cpi	r24, 0x03	; 3
    1e24:	89 f0       	breq	.+34     	; 0x1e48 <udc_process_setup+0x5da>
    1e26:	29 c0       	rjmp	.+82     	; 0x1e7a <udc_process_setup+0x60c>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e28:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1e2c:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1e30:	89 2b       	or	r24, r25
    1e32:	31 f5       	brne	.+76     	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e34:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1e38:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1e3c:	89 2b       	or	r24, r25
    1e3e:	01 f5       	brne	.+64     	; 0x1e80 <udc_process_setup+0x612>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e40:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1e44:	27 d5       	rcall	.+2638   	; 0x2894 <udd_ep_clear_halt>
    1e46:	1a c0       	rjmp	.+52     	; 0x1e7c <udc_process_setup+0x60e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e48:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1e4c:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1e50:	89 2b       	or	r24, r25
    1e52:	b1 f4       	brne	.+44     	; 0x1e80 <udc_process_setup+0x612>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e54:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1e58:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1e5c:	89 2b       	or	r24, r25
    1e5e:	81 f4       	brne	.+32     	; 0x1e80 <udc_process_setup+0x612>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e60:	ca e9       	ldi	r28, 0x9A	; 154
    1e62:	d3 e2       	ldi	r29, 0x23	; 35
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	05 d6       	rcall	.+3082   	; 0x2a72 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e68:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6a:	68 d6       	rcall	.+3280   	; 0x2b3c <udd_ep_set_halt>
    1e6c:	07 c0       	rjmp	.+14     	; 0x1e7c <udc_process_setup+0x60e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <udc_process_setup+0x60e>
				break;
			}
		}
#endif
	}
	return false;
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <udc_process_setup+0x60e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <udc_process_setup+0x60e>
				break;
			}
		}
#endif
	}
	return false;
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1e7c:	81 11       	cpse	r24, r1
    1e7e:	7e c0       	rjmp	.+252    	; 0x1f7c <udc_process_setup+0x70e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1e80:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    1e84:	8f 71       	andi	r24, 0x1F	; 31
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	71 f5       	brne	.+92     	; 0x1ee6 <udc_process_setup+0x678>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1e8a:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1e8e:	88 23       	and	r24, r24
    1e90:	51 f1       	breq	.+84     	; 0x1ee6 <udc_process_setup+0x678>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e92:	00 91 9e 23 	lds	r16, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1e96:	10 91 9f 23 	lds	r17, 0x239F	; 0x80239f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1e9a:	c0 91 9f 20 	lds	r28, 0x209F	; 0x80209f <udc_ptr_conf>
    1e9e:	d0 91 a0 20 	lds	r29, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1ea2:	e8 81       	ld	r30, Y
    1ea4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea6:	84 81       	ldd	r24, Z+4	; 0x04
    1ea8:	08 17       	cp	r16, r24
    1eaa:	e8 f4       	brcc	.+58     	; 0x1ee6 <udc_process_setup+0x678>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	80 2f       	mov	r24, r16
    1eb0:	d4 db       	rcall	.-2136   	; 0x165a <udc_update_iface_desc>
    1eb2:	88 23       	and	r24, r24
    1eb4:	c1 f0       	breq	.+48     	; 0x1ee6 <udc_process_setup+0x678>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	ff 27       	eor	r31, r31
    1eba:	cf 01       	movw	r24, r30
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec4:	e8 0f       	add	r30, r24
    1ec6:	f9 1f       	adc	r31, r25
    1ec8:	c0 81       	ld	r28, Z
    1eca:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ecc:	ee 81       	ldd	r30, Y+6	; 0x06
    1ece:	ff 81       	ldd	r31, Y+7	; 0x07
    1ed0:	09 95       	icall
    1ed2:	68 2f       	mov	r22, r24
    1ed4:	80 2f       	mov	r24, r16
    1ed6:	c1 db       	rcall	.-2174   	; 0x165a <udc_update_iface_desc>
    1ed8:	88 23       	and	r24, r24
    1eda:	29 f0       	breq	.+10     	; 0x1ee6 <udc_process_setup+0x678>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1edc:	ec 81       	ldd	r30, Y+4	; 0x04
    1ede:	fd 81       	ldd	r31, Y+5	; 0x05
    1ee0:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	4b c0       	rjmp	.+150    	; 0x1f7c <udc_process_setup+0x70e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1ee6:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    1eea:	8f 71       	andi	r24, 0x1F	; 31
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <udc_process_setup+0x684>
    1ef0:	40 c0       	rjmp	.+128    	; 0x1f72 <udc_process_setup+0x704>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ef2:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1ef6:	88 23       	and	r24, r24
    1ef8:	b1 f1       	breq	.+108    	; 0x1f66 <udc_process_setup+0x6f8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1efa:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    1efe:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1f02:	ed 91       	ld	r30, X+
    1f04:	fc 91       	ld	r31, X
    1f06:	11 97       	sbiw	r26, 0x01	; 1
    1f08:	84 81       	ldd	r24, Z+4	; 0x04
    1f0a:	88 23       	and	r24, r24
    1f0c:	71 f1       	breq	.+92     	; 0x1f6a <udc_process_setup+0x6fc>
    1f0e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f10:	ec 2f       	mov	r30, r28
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	12 96       	adiw	r26, 0x02	; 2
    1f1a:	8d 91       	ld	r24, X+
    1f1c:	9c 91       	ld	r25, X
    1f1e:	13 97       	sbiw	r26, 0x03	; 3
    1f20:	e8 0f       	add	r30, r24
    1f22:	f9 1f       	adc	r31, r25
    1f24:	00 81       	ld	r16, Z
    1f26:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f28:	d8 01       	movw	r26, r16
    1f2a:	16 96       	adiw	r26, 0x06	; 6
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	17 97       	sbiw	r26, 0x07	; 7
    1f32:	09 95       	icall
    1f34:	68 2f       	mov	r22, r24
    1f36:	8c 2f       	mov	r24, r28
    1f38:	90 db       	rcall	.-2272   	; 0x165a <udc_update_iface_desc>
    1f3a:	88 23       	and	r24, r24
    1f3c:	f9 f0       	breq	.+62     	; 0x1f7c <udc_process_setup+0x70e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1f3e:	d8 01       	movw	r26, r16
    1f40:	14 96       	adiw	r26, 0x04	; 4
    1f42:	ed 91       	ld	r30, X+
    1f44:	fc 91       	ld	r31, X
    1f46:	15 97       	sbiw	r26, 0x05	; 5
    1f48:	09 95       	icall
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	17 c0       	rjmp	.+46     	; 0x1f7c <udc_process_setup+0x70e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1f4e:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f50:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    1f54:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1f58:	ed 91       	ld	r30, X+
    1f5a:	fc 91       	ld	r31, X
    1f5c:	11 97       	sbiw	r26, 0x01	; 1
    1f5e:	94 81       	ldd	r25, Z+4	; 0x04
    1f60:	c9 17       	cp	r28, r25
    1f62:	b0 f2       	brcs	.-84     	; 0x1f10 <udc_process_setup+0x6a2>
    1f64:	0b c0       	rjmp	.+22     	; 0x1f7c <udc_process_setup+0x70e>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	09 c0       	rjmp	.+18     	; 0x1f7c <udc_process_setup+0x70e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	07 c0       	rjmp	.+14     	; 0x1f7c <udc_process_setup+0x70e>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	05 c0       	rjmp	.+10     	; 0x1f7c <udc_process_setup+0x70e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <udc_process_setup+0x70e>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <udc_process_setup+0x70e>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	08 95       	ret

00001f86 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f86:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1f88:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1f8a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1f8c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1f8e:	60 83       	st	Z, r22
	ret                             // Return to caller
    1f90:	08 95       	ret

00001f92 <nvm_eeprom_read_buffer>:
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
	nvm_exec();
	NVM.CMD = old_cmd;
}
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	9c 01       	movw	r18, r24
    1f98:	db 01       	movw	r26, r22
    1f9a:	e0 ec       	ldi	r30, 0xC0	; 192
    1f9c:	f1 e0       	ldi	r31, 0x01	; 1
    1f9e:	97 85       	ldd	r25, Z+15	; 0x0f
    1fa0:	99 23       	and	r25, r25
    1fa2:	ec f3       	brlt	.-6      	; 0x1f9e <nvm_eeprom_read_buffer+0xc>
    1fa4:	cc ec       	ldi	r28, 0xCC	; 204
    1fa6:	d1 e0       	ldi	r29, 0x01	; 1
    1fa8:	98 81       	ld	r25, Y
    1faa:	98 60       	ori	r25, 0x08	; 8
    1fac:	98 83       	st	Y, r25
    1fae:	b9 01       	movw	r22, r18
    1fb0:	70 5f       	subi	r23, 0xF0	; 240
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	b9 d7       	rcall	.+3954   	; 0x2f28 <memcpy>
    1fb6:	88 81       	ld	r24, Y
    1fb8:	87 7f       	andi	r24, 0xF7	; 247
    1fba:	88 83       	st	Y, r24
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	08 95       	ret

00001fc2 <nvm_eeprom_load_byte_to_buffer>:
    1fc2:	e0 ec       	ldi	r30, 0xC0	; 192
    1fc4:	f1 e0       	ldi	r31, 0x01	; 1
    1fc6:	97 85       	ldd	r25, Z+15	; 0x0f
    1fc8:	99 23       	and	r25, r25
    1fca:	ec f3       	brlt	.-6      	; 0x1fc6 <nvm_eeprom_load_byte_to_buffer+0x4>
    1fcc:	ac ec       	ldi	r26, 0xCC	; 204
    1fce:	b1 e0       	ldi	r27, 0x01	; 1
    1fd0:	9c 91       	ld	r25, X
    1fd2:	98 60       	ori	r25, 0x08	; 8
    1fd4:	9c 93       	st	X, r25
    1fd6:	e8 2f       	mov	r30, r24
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	f0 5f       	subi	r31, 0xF0	; 240
    1fdc:	60 83       	st	Z, r22
    1fde:	8c 91       	ld	r24, X
    1fe0:	87 7f       	andi	r24, 0xF7	; 247
    1fe2:	8c 93       	st	X, r24
    1fe4:	08 95       	ret

00001fe6 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1ff4:	e0 ec       	ldi	r30, 0xC0	; 192
    1ff6:	f1 e0       	ldi	r31, 0x01	; 1
    1ff8:	87 85       	ldd	r24, Z+15	; 0x0f
    1ffa:	88 23       	and	r24, r24
    1ffc:	ec f3       	brlt	.-6      	; 0x1ff8 <nvm_eeprom_load_page_to_buffer+0x12>
    1ffe:	78 01       	movw	r14, r16
    2000:	80 e2       	ldi	r24, 0x20	; 32
    2002:	e8 0e       	add	r14, r24
    2004:	f1 1c       	adc	r15, r1
    2006:	e8 01       	movw	r28, r16
    2008:	8c 2f       	mov	r24, r28
    200a:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    200c:	69 91       	ld	r22, Y+
    200e:	d9 df       	rcall	.-78     	; 0x1fc2 <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2010:	ce 15       	cp	r28, r14
    2012:	df 05       	cpc	r29, r15
    2014:	c9 f7       	brne	.-14     	; 0x2008 <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	08 95       	ret

00002024 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	e0 ec       	ldi	r30, 0xC0	; 192
    202c:	f1 e0       	ldi	r31, 0x01	; 1
    202e:	97 85       	ldd	r25, Z+15	; 0x0f
    2030:	99 23       	and	r25, r25
    2032:	ec f3       	brlt	.-6      	; 0x202e <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2034:	20 e2       	ldi	r18, 0x20	; 32
    2036:	82 9f       	mul	r24, r18
    2038:	c0 01       	movw	r24, r0
    203a:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    203c:	c0 ec       	ldi	r28, 0xC0	; 192
    203e:	d1 e0       	ldi	r29, 0x01	; 1
    2040:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2042:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2044:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    2046:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    2048:	85 e3       	ldi	r24, 0x35	; 53
    204a:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	8b ec       	ldi	r24, 0xCB	; 203
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	99 df       	rcall	.-206    	; 0x1f86 <ccp_write_io>
	NVM.CMD = old_cmd;
    2054:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	08 95       	ret

0000205e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    205e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2062:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2064:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2066:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    206a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    206c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2070:	08 95       	ret

00002072 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    2072:	81 11       	cpse	r24, r1
    2074:	22 c0       	rjmp	.+68     	; 0x20ba <udd_sleep_mode+0x48>
    2076:	90 91 6c 21 	lds	r25, 0x216C	; 0x80216c <udd_b_idle>
    207a:	99 23       	and	r25, r25
    207c:	d9 f0       	breq	.+54     	; 0x20b4 <udd_sleep_mode+0x42>
    207e:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <sleepmgr_locks+0x1>
    2082:	91 11       	cpse	r25, r1
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <udd_sleep_mode+0x16>
    2086:	ff cf       	rjmp	.-2      	; 0x2086 <udd_sleep_mode+0x14>
    2088:	2f b7       	in	r18, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	ea ec       	ldi	r30, 0xCA	; 202
    208e:	fb e2       	ldi	r31, 0x2B	; 43
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	91 50       	subi	r25, 0x01	; 1
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	2f bf       	out	0x3f, r18	; 63
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <udd_sleep_mode+0x42>
    209a:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <sleepmgr_locks+0x1>
    209e:	9f 3f       	cpi	r25, 0xFF	; 255
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <udd_sleep_mode+0x32>
    20a2:	ff cf       	rjmp	.-2      	; 0x20a2 <udd_sleep_mode+0x30>
    20a4:	2f b7       	in	r18, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	ea ec       	ldi	r30, 0xCA	; 202
    20aa:	fb e2       	ldi	r31, 0x2B	; 43
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	9f 5f       	subi	r25, 0xFF	; 255
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	2f bf       	out	0x3f, r18	; 63
    20b4:	80 93 6c 21 	sts	0x216C, r24	; 0x80216c <udd_b_idle>
    20b8:	08 95       	ret
    20ba:	90 91 6c 21 	lds	r25, 0x216C	; 0x80216c <udd_b_idle>
    20be:	99 23       	and	r25, r25
    20c0:	61 f3       	breq	.-40     	; 0x209a <udd_sleep_mode+0x28>
    20c2:	f8 cf       	rjmp	.-16     	; 0x20b4 <udd_sleep_mode+0x42>

000020c4 <udd_ctrl_init>:
    20c4:	0f 93       	push	r16
    20c6:	e8 ec       	ldi	r30, 0xC8	; 200
    20c8:	f4 e0       	ldi	r31, 0x04	; 4
    20ca:	80 81       	ld	r24, Z
    20cc:	8f 7d       	andi	r24, 0xDF	; 223
    20ce:	80 83       	st	Z, r24
    20d0:	80 81       	ld	r24, Z
    20d2:	8f 7d       	andi	r24, 0xDF	; 223
    20d4:	80 83       	st	Z, r24
    20d6:	e0 e5       	ldi	r30, 0x50	; 80
    20d8:	f1 e2       	ldi	r31, 0x21	; 33
    20da:	02 e0       	ldi	r16, 0x02	; 2
    20dc:	05 93       	las	Z, r16
    20de:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <udd_sram+0x12>
    20e2:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <udd_sram+0x13>
    20e6:	00 e2       	ldi	r16, 0x20	; 32
    20e8:	06 93       	lac	Z, r16
    20ea:	00 e4       	ldi	r16, 0x40	; 64
    20ec:	06 93       	lac	Z, r16
    20ee:	e8 e4       	ldi	r30, 0x48	; 72
    20f0:	f1 e2       	ldi	r31, 0x21	; 33
    20f2:	00 e2       	ldi	r16, 0x20	; 32
    20f4:	06 93       	lac	Z, r16
    20f6:	00 e4       	ldi	r16, 0x40	; 64
    20f8:	06 93       	lac	Z, r16
    20fa:	ea e9       	ldi	r30, 0x9A	; 154
    20fc:	f3 e2       	ldi	r31, 0x23	; 35
    20fe:	14 86       	std	Z+12, r1	; 0x0c
    2100:	15 86       	std	Z+13, r1	; 0x0d
    2102:	16 86       	std	Z+14, r1	; 0x0e
    2104:	17 86       	std	Z+15, r1	; 0x0f
    2106:	12 86       	std	Z+10, r1	; 0x0a
    2108:	13 86       	std	Z+11, r1	; 0x0b
    210a:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <udd_ep_control_state>
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <udd_ctrl_stall_data>:
    2112:	0f 93       	push	r16
    2114:	85 e0       	ldi	r24, 0x05	; 5
    2116:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    211a:	e1 e5       	ldi	r30, 0x51	; 81
    211c:	f1 e2       	ldi	r31, 0x21	; 33
    211e:	04 e0       	ldi	r16, 0x04	; 4
    2120:	05 93       	las	Z, r16
    2122:	e9 e4       	ldi	r30, 0x49	; 73
    2124:	f1 e2       	ldi	r31, 0x21	; 33
    2126:	04 e0       	ldi	r16, 0x04	; 4
    2128:	05 93       	las	Z, r16
    212a:	0f 91       	pop	r16
    212c:	08 95       	ret

0000212e <udd_ctrl_send_zlp_in>:
    212e:	0f 93       	push	r16
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    2136:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <udd_sram+0x12>
    213a:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <udd_sram+0x13>
    213e:	e0 e5       	ldi	r30, 0x50	; 80
    2140:	f1 e2       	ldi	r31, 0x21	; 33
    2142:	02 e0       	ldi	r16, 0x02	; 2
    2144:	06 93       	lac	Z, r16
    2146:	0f 91       	pop	r16
    2148:	08 95       	ret

0000214a <udd_ctrl_endofrequest>:
    214a:	e0 91 a6 23 	lds	r30, 0x23A6	; 0x8023a6 <udd_g_ctrlreq+0xc>
    214e:	f0 91 a7 23 	lds	r31, 0x23A7	; 0x8023a7 <udd_g_ctrlreq+0xd>
    2152:	30 97       	sbiw	r30, 0x00	; 0
    2154:	09 f0       	breq	.+2      	; 0x2158 <udd_ctrl_endofrequest+0xe>
    2156:	09 95       	icall
    2158:	08 95       	ret

0000215a <udd_ctrl_in_sent>:
    215a:	0f 93       	push	r16
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	19 f4       	brne	.+6      	; 0x216e <udd_ctrl_in_sent+0x14>
    2168:	f0 df       	rcall	.-32     	; 0x214a <udd_ctrl_endofrequest>
    216a:	ac df       	rcall	.-168    	; 0x20c4 <udd_ctrl_init>
    216c:	5e c0       	rjmp	.+188    	; 0x222a <udd_ctrl_in_sent+0xd0>
    216e:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2172:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2176:	c0 91 a4 23 	lds	r28, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    217a:	d0 91 a5 23 	lds	r29, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    217e:	c8 1b       	sub	r28, r24
    2180:	d9 0b       	sbc	r29, r25
    2182:	71 f5       	brne	.+92     	; 0x21e0 <udd_ctrl_in_sent+0x86>
    2184:	20 91 3d 21 	lds	r18, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2188:	30 91 3e 21 	lds	r19, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    218c:	82 0f       	add	r24, r18
    218e:	93 1f       	adc	r25, r19
    2190:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2194:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2198:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    219c:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    21a0:	82 17       	cp	r24, r18
    21a2:	93 07       	cpc	r25, r19
    21a4:	21 f0       	breq	.+8      	; 0x21ae <udd_ctrl_in_sent+0x54>
    21a6:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <b_shortpacket.5296>
    21aa:	88 23       	and	r24, r24
    21ac:	41 f0       	breq	.+16     	; 0x21be <udd_ctrl_in_sent+0x64>
    21ae:	84 e0       	ldi	r24, 0x04	; 4
    21b0:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    21b4:	e8 e4       	ldi	r30, 0x48	; 72
    21b6:	f1 e2       	ldi	r31, 0x21	; 33
    21b8:	02 e0       	ldi	r16, 0x02	; 2
    21ba:	06 93       	lac	Z, r16
    21bc:	36 c0       	rjmp	.+108    	; 0x222a <udd_ctrl_in_sent+0xd0>
    21be:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <udd_g_ctrlreq+0xe>
    21c2:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <udd_g_ctrlreq+0xf>
    21c6:	30 97       	sbiw	r30, 0x00	; 0
    21c8:	99 f0       	breq	.+38     	; 0x21f0 <udd_ctrl_in_sent+0x96>
    21ca:	09 95       	icall
    21cc:	88 23       	and	r24, r24
    21ce:	81 f0       	breq	.+32     	; 0x21f0 <udd_ctrl_in_sent+0x96>
    21d0:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    21d4:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    21d8:	c0 91 a4 23 	lds	r28, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    21dc:	d0 91 a5 23 	lds	r29, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    21e0:	c0 34       	cpi	r28, 0x40	; 64
    21e2:	d1 05       	cpc	r29, r1
    21e4:	28 f0       	brcs	.+10     	; 0x21f0 <udd_ctrl_in_sent+0x96>
    21e6:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <b_shortpacket.5296>
    21ea:	c0 e4       	ldi	r28, 0x40	; 64
    21ec:	d0 e0       	ldi	r29, 0x00	; 0
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <udd_ctrl_in_sent+0x9c>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <b_shortpacket.5296>
    21f6:	e0 e4       	ldi	r30, 0x40	; 64
    21f8:	f1 e2       	ldi	r31, 0x21	; 33
    21fa:	c2 8b       	std	Z+18, r28	; 0x12
    21fc:	d3 8b       	std	Z+19, r29	; 0x13
    21fe:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2202:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2206:	20 91 a2 23 	lds	r18, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    220a:	30 91 a3 23 	lds	r19, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    220e:	28 0f       	add	r18, r24
    2210:	39 1f       	adc	r19, r25
    2212:	24 8b       	std	Z+20, r18	; 0x14
    2214:	35 8b       	std	Z+21, r19	; 0x15
    2216:	c8 0f       	add	r28, r24
    2218:	d9 1f       	adc	r29, r25
    221a:	c0 93 3b 21 	sts	0x213B, r28	; 0x80213b <udd_ctrl_payload_nb_trans>
    221e:	d0 93 3c 21 	sts	0x213C, r29	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2222:	e0 e5       	ldi	r30, 0x50	; 80
    2224:	f1 e2       	ldi	r31, 0x21	; 33
    2226:	02 e0       	ldi	r16, 0x02	; 2
    2228:	06 93       	lac	Z, r16
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <udd_ep_get_size>:
    2232:	fc 01       	movw	r30, r24
    2234:	81 81       	ldd	r24, Z+1	; 0x01
    2236:	e8 2f       	mov	r30, r24
    2238:	e7 70       	andi	r30, 0x07	; 7
    223a:	8e 2f       	mov	r24, r30
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	fc 01       	movw	r30, r24
    2240:	31 97       	sbiw	r30, 0x01	; 1
    2242:	e7 30       	cpi	r30, 0x07	; 7
    2244:	f1 05       	cpc	r31, r1
    2246:	c0 f4       	brcc	.+48     	; 0x2278 <udd_ep_get_size+0x46>
    2248:	e9 5e       	subi	r30, 0xE9	; 233
    224a:	fe 4f       	sbci	r31, 0xFE	; 254
    224c:	67 c6       	rjmp	.+3278   	; 0x2f1c <__tablejump2__>
    224e:	80 e1       	ldi	r24, 0x10	; 16
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	08 95       	ret
    2254:	80 e2       	ldi	r24, 0x20	; 32
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	08 95       	ret
    225a:	80 e4       	ldi	r24, 0x40	; 64
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	08 95       	ret
    2260:	80 e8       	ldi	r24, 0x80	; 128
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	08 95       	ret
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	08 95       	ret
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	08 95       	ret
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	08 95       	ret
    2278:	88 e0       	ldi	r24, 0x08	; 8
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	08 95       	ret

0000227e <udd_ep_get_job>:
    227e:	28 2f       	mov	r18, r24
    2280:	2f 70       	andi	r18, 0x0F	; 15
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	22 0f       	add	r18, r18
    2286:	33 1f       	adc	r19, r19
    2288:	08 2e       	mov	r0, r24
    228a:	00 0c       	add	r0, r0
    228c:	99 0b       	sbc	r25, r25
    228e:	88 27       	eor	r24, r24
    2290:	99 0f       	add	r25, r25
    2292:	88 1f       	adc	r24, r24
    2294:	99 27       	eor	r25, r25
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	02 97       	sbiw	r24, 0x02	; 2
    229c:	9c 01       	movw	r18, r24
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	22 0f       	add	r18, r18
    22a4:	33 1f       	adc	r19, r19
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	82 0f       	add	r24, r18
    22ac:	93 1f       	adc	r25, r19
    22ae:	87 51       	subi	r24, 0x17	; 23
    22b0:	9f 4d       	sbci	r25, 0xDF	; 223
    22b2:	08 95       	ret

000022b4 <udd_ctrl_interrupt_tc_setup>:
    22b4:	0f 93       	push	r16
    22b6:	cf 93       	push	r28
    22b8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    22bc:	80 ff       	sbrs	r24, 0
    22be:	62 c0       	rjmp	.+196    	; 0x2384 <udd_ctrl_interrupt_tc_setup+0xd0>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    22c6:	e8 e4       	ldi	r30, 0x48	; 72
    22c8:	f1 e2       	ldi	r31, 0x21	; 33
    22ca:	00 e8       	ldi	r16, 0x80	; 128
    22cc:	06 93       	lac	Z, r16
    22ce:	e0 e5       	ldi	r30, 0x50	; 80
    22d0:	f1 e2       	ldi	r31, 0x21	; 33
    22d2:	00 e8       	ldi	r16, 0x80	; 128
    22d4:	06 93       	lac	Z, r16
    22d6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    22da:	e8 e4       	ldi	r30, 0x48	; 72
    22dc:	f1 e2       	ldi	r31, 0x21	; 33
    22de:	00 e1       	ldi	r16, 0x10	; 16
    22e0:	06 93       	lac	Z, r16
    22e2:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    22e6:	88 23       	and	r24, r24
    22e8:	29 f0       	breq	.+10     	; 0x22f4 <udd_ctrl_interrupt_tc_setup+0x40>
    22ea:	83 50       	subi	r24, 0x03	; 3
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	08 f4       	brcc	.+2      	; 0x22f2 <udd_ctrl_interrupt_tc_setup+0x3e>
    22f0:	2c df       	rcall	.-424    	; 0x214a <udd_ctrl_endofrequest>
    22f2:	e8 de       	rcall	.-560    	; 0x20c4 <udd_ctrl_init>
    22f4:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <udd_sram+0xa>
    22f8:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <udd_sram+0xb>
    22fc:	08 97       	sbiw	r24, 0x08	; 8
    22fe:	09 f0       	breq	.+2      	; 0x2302 <udd_ctrl_interrupt_tc_setup+0x4e>
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <udd_ctrl_interrupt_tc_setup+0xd4>
    2302:	88 e0       	ldi	r24, 0x08	; 8
    2304:	eb ef       	ldi	r30, 0xFB	; 251
    2306:	f0 e2       	ldi	r31, 0x20	; 32
    2308:	aa e9       	ldi	r26, 0x9A	; 154
    230a:	b3 e2       	ldi	r27, 0x23	; 35
    230c:	01 90       	ld	r0, Z+
    230e:	0d 92       	st	X+, r0
    2310:	8a 95       	dec	r24
    2312:	e1 f7       	brne	.-8      	; 0x230c <udd_ctrl_interrupt_tc_setup+0x58>
    2314:	e8 ec       	ldi	r30, 0xC8	; 200
    2316:	f4 e0       	ldi	r31, 0x04	; 4
    2318:	80 81       	ld	r24, Z
    231a:	80 62       	ori	r24, 0x20	; 32
    231c:	80 83       	st	Z, r24
    231e:	80 81       	ld	r24, Z
    2320:	80 62       	ori	r24, 0x20	; 32
    2322:	80 83       	st	Z, r24
    2324:	a4 da       	rcall	.-2744   	; 0x186e <udc_process_setup>
    2326:	c8 2f       	mov	r28, r24
    2328:	81 11       	cpse	r24, r1
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <udd_ctrl_interrupt_tc_setup+0x7e>
    232c:	f2 de       	rcall	.-540    	; 0x2112 <udd_ctrl_stall_data>
    232e:	c1 e0       	ldi	r28, 0x01	; 1
    2330:	2c c0       	rjmp	.+88     	; 0x238a <udd_ctrl_interrupt_tc_setup+0xd6>
    2332:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    2336:	88 23       	and	r24, r24
    2338:	6c f4       	brge	.+26     	; 0x2354 <udd_ctrl_interrupt_tc_setup+0xa0>
    233a:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    233e:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2342:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    2346:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    2350:	04 df       	rcall	.-504    	; 0x215a <udd_ctrl_in_sent>
    2352:	1b c0       	rjmp	.+54     	; 0x238a <udd_ctrl_interrupt_tc_setup+0xd6>
    2354:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    2358:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    235c:	89 2b       	or	r24, r25
    235e:	11 f4       	brne	.+4      	; 0x2364 <udd_ctrl_interrupt_tc_setup+0xb0>
    2360:	e6 de       	rcall	.-564    	; 0x212e <udd_ctrl_send_zlp_in>
    2362:	13 c0       	rjmp	.+38     	; 0x238a <udd_ctrl_interrupt_tc_setup+0xd6>
    2364:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2368:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    236c:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    2370:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    237a:	e8 e4       	ldi	r30, 0x48	; 72
    237c:	f1 e2       	ldi	r31, 0x21	; 33
    237e:	02 e0       	ldi	r16, 0x02	; 2
    2380:	06 93       	lac	Z, r16
    2382:	03 c0       	rjmp	.+6      	; 0x238a <udd_ctrl_interrupt_tc_setup+0xd6>
    2384:	c0 e0       	ldi	r28, 0x00	; 0
    2386:	01 c0       	rjmp	.+2      	; 0x238a <udd_ctrl_interrupt_tc_setup+0xd6>
    2388:	c1 e0       	ldi	r28, 0x01	; 1
    238a:	8c 2f       	mov	r24, r28
    238c:	cf 91       	pop	r28
    238e:	0f 91       	pop	r16
    2390:	08 95       	ret

00002392 <udd_ep_trans_complet>:
    2392:	8f 92       	push	r8
    2394:	9f 92       	push	r9
    2396:	af 92       	push	r10
    2398:	bf 92       	push	r11
    239a:	df 92       	push	r13
    239c:	ef 92       	push	r14
    239e:	ff 92       	push	r15
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	d8 2e       	mov	r13, r24
    23aa:	69 df       	rcall	.-302    	; 0x227e <udd_ep_get_job>
    23ac:	8c 01       	movw	r16, r24
    23ae:	bd 2c       	mov	r11, r13
    23b0:	bb 1c       	adc	r11, r11
    23b2:	bb 24       	eor	r11, r11
    23b4:	bb 1c       	adc	r11, r11
    23b6:	cd 2d       	mov	r28, r13
    23b8:	cf 70       	andi	r28, 0x0F	; 15
    23ba:	d0 e0       	ldi	r29, 0x00	; 0
    23bc:	cc 0f       	add	r28, r28
    23be:	dd 1f       	adc	r29, r29
    23c0:	cb 0d       	add	r28, r11
    23c2:	d1 1d       	adc	r29, r1
    23c4:	ce 01       	movw	r24, r28
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	9c 01       	movw	r18, r24
    23d4:	28 5b       	subi	r18, 0xB8	; 184
    23d6:	3e 4d       	sbci	r19, 0xDE	; 222
    23d8:	79 01       	movw	r14, r18
    23da:	c9 01       	movw	r24, r18
    23dc:	2a df       	rcall	.-428    	; 0x2232 <udd_ep_get_size>
    23de:	4c 01       	movw	r8, r24
    23e0:	bb 20       	and	r11, r11
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <udd_ep_trans_complet+0x54>
    23e4:	70 c0       	rjmp	.+224    	; 0x24c6 <udd_ep_trans_complet+0x134>
    23e6:	fe 01       	movw	r30, r28
    23e8:	ee 0f       	add	r30, r30
    23ea:	ff 1f       	adc	r31, r31
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	e0 5c       	subi	r30, 0xC0	; 192
    23f6:	fe 4d       	sbci	r31, 0xDE	; 222
    23f8:	26 85       	ldd	r18, Z+14	; 0x0e
    23fa:	37 85       	ldd	r19, Z+15	; 0x0f
    23fc:	d8 01       	movw	r26, r16
    23fe:	15 96       	adiw	r26, 0x05	; 5
    2400:	8d 91       	ld	r24, X+
    2402:	9c 91       	ld	r25, X
    2404:	16 97       	sbiw	r26, 0x06	; 6
    2406:	82 0f       	add	r24, r18
    2408:	93 1f       	adc	r25, r19
    240a:	15 96       	adiw	r26, 0x05	; 5
    240c:	8d 93       	st	X+, r24
    240e:	9c 93       	st	X, r25
    2410:	16 97       	sbiw	r26, 0x06	; 6
    2412:	13 96       	adiw	r26, 0x03	; 3
    2414:	2d 91       	ld	r18, X+
    2416:	3c 91       	ld	r19, X
    2418:	14 97       	sbiw	r26, 0x04	; 4
    241a:	82 17       	cp	r24, r18
    241c:	93 07       	cpc	r25, r19
    241e:	09 f4       	brne	.+2      	; 0x2422 <udd_ep_trans_complet+0x90>
    2420:	3c c0       	rjmp	.+120    	; 0x249a <udd_ep_trans_complet+0x108>
    2422:	28 1b       	sub	r18, r24
    2424:	39 0b       	sbc	r19, r25
    2426:	21 15       	cp	r18, r1
    2428:	b4 e0       	ldi	r27, 0x04	; 4
    242a:	3b 07       	cpc	r19, r27
    242c:	38 f0       	brcs	.+14     	; 0x243c <udd_ep_trans_complet+0xaa>
    242e:	2f ef       	ldi	r18, 0xFF	; 255
    2430:	33 e0       	ldi	r19, 0x03	; 3
    2432:	c9 01       	movw	r24, r18
    2434:	b4 01       	movw	r22, r8
    2436:	4b d5       	rcall	.+2710   	; 0x2ece <__udivmodhi4>
    2438:	28 1b       	sub	r18, r24
    243a:	39 0b       	sbc	r19, r25
    243c:	f8 01       	movw	r30, r16
    243e:	80 81       	ld	r24, Z
    2440:	81 ff       	sbrs	r24, 1
    2442:	09 c0       	rjmp	.+18     	; 0x2456 <udd_ep_trans_complet+0xc4>
    2444:	c9 01       	movw	r24, r18
    2446:	b4 01       	movw	r22, r8
    2448:	42 d5       	rcall	.+2692   	; 0x2ece <__udivmodhi4>
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	89 2b       	or	r24, r25
    244e:	09 f0       	breq	.+2      	; 0x2452 <udd_ep_trans_complet+0xc0>
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	84 2f       	mov	r24, r20
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <udd_ep_trans_complet+0xc6>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	d8 01       	movw	r26, r16
    245a:	9c 91       	ld	r25, X
    245c:	80 fb       	bst	r24, 0
    245e:	91 f9       	bld	r25, 1
    2460:	9c 93       	st	X, r25
    2462:	cc 0f       	add	r28, r28
    2464:	dd 1f       	adc	r29, r29
    2466:	cc 0f       	add	r28, r28
    2468:	dd 1f       	adc	r29, r29
    246a:	cc 0f       	add	r28, r28
    246c:	dd 1f       	adc	r29, r29
    246e:	c0 5c       	subi	r28, 0xC0	; 192
    2470:	de 4d       	sbci	r29, 0xDE	; 222
    2472:	1e 86       	std	Y+14, r1	; 0x0e
    2474:	1f 86       	std	Y+15, r1	; 0x0f
    2476:	2a 87       	std	Y+10, r18	; 0x0a
    2478:	3b 87       	std	Y+11, r19	; 0x0b
    247a:	11 96       	adiw	r26, 0x01	; 1
    247c:	2d 91       	ld	r18, X+
    247e:	3c 91       	ld	r19, X
    2480:	12 97       	sbiw	r26, 0x02	; 2
    2482:	15 96       	adiw	r26, 0x05	; 5
    2484:	8d 91       	ld	r24, X+
    2486:	9c 91       	ld	r25, X
    2488:	16 97       	sbiw	r26, 0x06	; 6
    248a:	82 0f       	add	r24, r18
    248c:	93 1f       	adc	r25, r19
    248e:	8c 87       	std	Y+12, r24	; 0x0c
    2490:	9d 87       	std	Y+13, r25	; 0x0d
    2492:	f7 01       	movw	r30, r14
    2494:	02 e0       	ldi	r16, 0x02	; 2
    2496:	06 93       	lac	Z, r16
    2498:	ca c0       	rjmp	.+404    	; 0x262e <udd_ep_trans_complet+0x29c>
    249a:	d8 01       	movw	r26, r16
    249c:	8c 91       	ld	r24, X
    249e:	81 ff       	sbrs	r24, 1
    24a0:	b3 c0       	rjmp	.+358    	; 0x2608 <udd_ep_trans_complet+0x276>
    24a2:	8d 7f       	andi	r24, 0xFD	; 253
    24a4:	8c 93       	st	X, r24
    24a6:	cc 0f       	add	r28, r28
    24a8:	dd 1f       	adc	r29, r29
    24aa:	cc 0f       	add	r28, r28
    24ac:	dd 1f       	adc	r29, r29
    24ae:	cc 0f       	add	r28, r28
    24b0:	dd 1f       	adc	r29, r29
    24b2:	c0 5c       	subi	r28, 0xC0	; 192
    24b4:	de 4d       	sbci	r29, 0xDE	; 222
    24b6:	1e 86       	std	Y+14, r1	; 0x0e
    24b8:	1f 86       	std	Y+15, r1	; 0x0f
    24ba:	1a 86       	std	Y+10, r1	; 0x0a
    24bc:	1b 86       	std	Y+11, r1	; 0x0b
    24be:	f7 01       	movw	r30, r14
    24c0:	02 e0       	ldi	r16, 0x02	; 2
    24c2:	06 93       	lac	Z, r16
    24c4:	b4 c0       	rjmp	.+360    	; 0x262e <udd_ep_trans_complet+0x29c>
    24c6:	fe 01       	movw	r30, r28
    24c8:	ee 0f       	add	r30, r30
    24ca:	ff 1f       	adc	r31, r31
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	e0 5c       	subi	r30, 0xC0	; 192
    24d6:	fe 4d       	sbci	r31, 0xDE	; 222
    24d8:	a2 84       	ldd	r10, Z+10	; 0x0a
    24da:	b3 84       	ldd	r11, Z+11	; 0x0b
    24dc:	d8 01       	movw	r26, r16
    24de:	8c 91       	ld	r24, X
    24e0:	82 ff       	sbrs	r24, 2
    24e2:	19 c0       	rjmp	.+50     	; 0x2516 <udd_ep_trans_complet+0x184>
    24e4:	11 96       	adiw	r26, 0x01	; 1
    24e6:	ed 91       	ld	r30, X+
    24e8:	fc 91       	ld	r31, X
    24ea:	12 97       	sbiw	r26, 0x02	; 2
    24ec:	15 96       	adiw	r26, 0x05	; 5
    24ee:	2d 91       	ld	r18, X+
    24f0:	3c 91       	ld	r19, X
    24f2:	16 97       	sbiw	r26, 0x06	; 6
    24f4:	13 96       	adiw	r26, 0x03	; 3
    24f6:	8d 91       	ld	r24, X+
    24f8:	9c 91       	ld	r25, X
    24fa:	14 97       	sbiw	r26, 0x04	; 4
    24fc:	b4 01       	movw	r22, r8
    24fe:	e7 d4       	rcall	.+2510   	; 0x2ece <__udivmodhi4>
    2500:	b0 e4       	ldi	r27, 0x40	; 64
    2502:	db 9e       	mul	r13, r27
    2504:	b0 01       	movw	r22, r0
    2506:	11 24       	eor	r1, r1
    2508:	67 59       	subi	r22, 0x97	; 151
    250a:	7f 4d       	sbci	r23, 0xDF	; 223
    250c:	ac 01       	movw	r20, r24
    250e:	cf 01       	movw	r24, r30
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	09 d5       	rcall	.+2578   	; 0x2f28 <memcpy>
    2516:	f8 01       	movw	r30, r16
    2518:	25 81       	ldd	r18, Z+5	; 0x05
    251a:	36 81       	ldd	r19, Z+6	; 0x06
    251c:	2a 0d       	add	r18, r10
    251e:	3b 1d       	adc	r19, r11
    2520:	25 83       	std	Z+5, r18	; 0x05
    2522:	36 83       	std	Z+6, r19	; 0x06
    2524:	83 81       	ldd	r24, Z+3	; 0x03
    2526:	94 81       	ldd	r25, Z+4	; 0x04
    2528:	82 17       	cp	r24, r18
    252a:	93 07       	cpc	r25, r19
    252c:	68 f4       	brcc	.+26     	; 0x2548 <udd_ep_trans_complet+0x1b6>
    252e:	85 83       	std	Z+5, r24	; 0x05
    2530:	96 83       	std	Z+6, r25	; 0x06
    2532:	cc 0f       	add	r28, r28
    2534:	dd 1f       	adc	r29, r29
    2536:	cc 0f       	add	r28, r28
    2538:	dd 1f       	adc	r29, r29
    253a:	cc 0f       	add	r28, r28
    253c:	dd 1f       	adc	r29, r29
    253e:	c0 5c       	subi	r28, 0xC0	; 192
    2540:	de 4d       	sbci	r29, 0xDE	; 222
    2542:	8e 85       	ldd	r24, Y+14	; 0x0e
    2544:	9f 85       	ldd	r25, Y+15	; 0x0f
    2546:	60 c0       	rjmp	.+192    	; 0x2608 <udd_ep_trans_complet+0x276>
    2548:	fe 01       	movw	r30, r28
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	ee 0f       	add	r30, r30
    2550:	ff 1f       	adc	r31, r31
    2552:	ee 0f       	add	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	e0 5c       	subi	r30, 0xC0	; 192
    2558:	fe 4d       	sbci	r31, 0xDE	; 222
    255a:	46 85       	ldd	r20, Z+14	; 0x0e
    255c:	57 85       	ldd	r21, Z+15	; 0x0f
    255e:	4a 15       	cp	r20, r10
    2560:	5b 05       	cpc	r21, r11
    2562:	09 f0       	breq	.+2      	; 0x2566 <udd_ep_trans_complet+0x1d4>
    2564:	51 c0       	rjmp	.+162    	; 0x2608 <udd_ep_trans_complet+0x276>
    2566:	28 17       	cp	r18, r24
    2568:	39 07       	cpc	r19, r25
    256a:	09 f4       	brne	.+2      	; 0x256e <udd_ep_trans_complet+0x1dc>
    256c:	4d c0       	rjmp	.+154    	; 0x2608 <udd_ep_trans_complet+0x276>
    256e:	ac 01       	movw	r20, r24
    2570:	42 1b       	sub	r20, r18
    2572:	53 0b       	sbc	r21, r19
    2574:	9a 01       	movw	r18, r20
    2576:	21 15       	cp	r18, r1
    2578:	54 e0       	ldi	r21, 0x04	; 4
    257a:	35 07       	cpc	r19, r21
    257c:	50 f0       	brcs	.+20     	; 0x2592 <udd_ep_trans_complet+0x200>
    257e:	2f ef       	ldi	r18, 0xFF	; 255
    2580:	33 e0       	ldi	r19, 0x03	; 3
    2582:	c9 01       	movw	r24, r18
    2584:	b4 01       	movw	r22, r8
    2586:	a3 d4       	rcall	.+2374   	; 0x2ece <__udivmodhi4>
    2588:	d9 01       	movw	r26, r18
    258a:	a8 1b       	sub	r26, r24
    258c:	b9 0b       	sbc	r27, r25
    258e:	cd 01       	movw	r24, r26
    2590:	07 c0       	rjmp	.+14     	; 0x25a0 <udd_ep_trans_complet+0x20e>
    2592:	c9 01       	movw	r24, r18
    2594:	b4 01       	movw	r22, r8
    2596:	9b d4       	rcall	.+2358   	; 0x2ece <__udivmodhi4>
    2598:	f9 01       	movw	r30, r18
    259a:	e8 1b       	sub	r30, r24
    259c:	f9 0b       	sbc	r31, r25
    259e:	cf 01       	movw	r24, r30
    25a0:	fe 01       	movw	r30, r28
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	e0 5c       	subi	r30, 0xC0	; 192
    25b0:	fe 4d       	sbci	r31, 0xDE	; 222
    25b2:	12 86       	std	Z+10, r1	; 0x0a
    25b4:	13 86       	std	Z+11, r1	; 0x0b
    25b6:	88 15       	cp	r24, r8
    25b8:	99 05       	cpc	r25, r9
    25ba:	78 f4       	brcc	.+30     	; 0x25da <udd_ep_trans_complet+0x248>
    25bc:	d8 01       	movw	r26, r16
    25be:	8c 91       	ld	r24, X
    25c0:	84 60       	ori	r24, 0x04	; 4
    25c2:	8c 93       	st	X, r24
    25c4:	b0 e4       	ldi	r27, 0x40	; 64
    25c6:	db 9e       	mul	r13, r27
    25c8:	c0 01       	movw	r24, r0
    25ca:	11 24       	eor	r1, r1
    25cc:	87 59       	subi	r24, 0x97	; 151
    25ce:	9f 4d       	sbci	r25, 0xDF	; 223
    25d0:	84 87       	std	Z+12, r24	; 0x0c
    25d2:	95 87       	std	Z+13, r25	; 0x0d
    25d4:	86 86       	std	Z+14, r8	; 0x0e
    25d6:	97 86       	std	Z+15, r9	; 0x0f
    25d8:	13 c0       	rjmp	.+38     	; 0x2600 <udd_ep_trans_complet+0x26e>
    25da:	f8 01       	movw	r30, r16
    25dc:	41 81       	ldd	r20, Z+1	; 0x01
    25de:	52 81       	ldd	r21, Z+2	; 0x02
    25e0:	25 81       	ldd	r18, Z+5	; 0x05
    25e2:	36 81       	ldd	r19, Z+6	; 0x06
    25e4:	24 0f       	add	r18, r20
    25e6:	35 1f       	adc	r19, r21
    25e8:	cc 0f       	add	r28, r28
    25ea:	dd 1f       	adc	r29, r29
    25ec:	cc 0f       	add	r28, r28
    25ee:	dd 1f       	adc	r29, r29
    25f0:	cc 0f       	add	r28, r28
    25f2:	dd 1f       	adc	r29, r29
    25f4:	c0 5c       	subi	r28, 0xC0	; 192
    25f6:	de 4d       	sbci	r29, 0xDE	; 222
    25f8:	2c 87       	std	Y+12, r18	; 0x0c
    25fa:	3d 87       	std	Y+13, r19	; 0x0d
    25fc:	8e 87       	std	Y+14, r24	; 0x0e
    25fe:	9f 87       	std	Y+15, r25	; 0x0f
    2600:	f7 01       	movw	r30, r14
    2602:	02 e0       	ldi	r16, 0x02	; 2
    2604:	06 93       	lac	Z, r16
    2606:	13 c0       	rjmp	.+38     	; 0x262e <udd_ep_trans_complet+0x29c>
    2608:	d8 01       	movw	r26, r16
    260a:	8c 91       	ld	r24, X
    260c:	80 ff       	sbrs	r24, 0
    260e:	0f c0       	rjmp	.+30     	; 0x262e <udd_ep_trans_complet+0x29c>
    2610:	8e 7f       	andi	r24, 0xFE	; 254
    2612:	8c 93       	st	X, r24
    2614:	17 96       	adiw	r26, 0x07	; 7
    2616:	ed 91       	ld	r30, X+
    2618:	fc 91       	ld	r31, X
    261a:	18 97       	sbiw	r26, 0x08	; 8
    261c:	30 97       	sbiw	r30, 0x00	; 0
    261e:	39 f0       	breq	.+14     	; 0x262e <udd_ep_trans_complet+0x29c>
    2620:	15 96       	adiw	r26, 0x05	; 5
    2622:	6d 91       	ld	r22, X+
    2624:	7c 91       	ld	r23, X
    2626:	16 97       	sbiw	r26, 0x06	; 6
    2628:	4d 2d       	mov	r20, r13
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	09 95       	icall
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	bf 90       	pop	r11
    263e:	af 90       	pop	r10
    2640:	9f 90       	pop	r9
    2642:	8f 90       	pop	r8
    2644:	08 95       	ret

00002646 <udd_attach>:
    2646:	cf 93       	push	r28
    2648:	cf b7       	in	r28, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	11 dd       	rcall	.-1502   	; 0x2072 <udd_sleep_mode>
    2650:	ea ec       	ldi	r30, 0xCA	; 202
    2652:	f4 e0       	ldi	r31, 0x04	; 4
    2654:	80 e4       	ldi	r24, 0x40	; 64
    2656:	80 83       	st	Z, r24
    2658:	80 e2       	ldi	r24, 0x20	; 32
    265a:	80 83       	st	Z, r24
    265c:	e1 ec       	ldi	r30, 0xC1	; 193
    265e:	f4 e0       	ldi	r31, 0x04	; 4
    2660:	80 81       	ld	r24, Z
    2662:	81 60       	ori	r24, 0x01	; 1
    2664:	80 83       	st	Z, r24
    2666:	a9 ec       	ldi	r26, 0xC9	; 201
    2668:	b4 e0       	ldi	r27, 0x04	; 4
    266a:	8c 91       	ld	r24, X
    266c:	82 60       	ori	r24, 0x02	; 2
    266e:	8c 93       	st	X, r24
    2670:	e8 ec       	ldi	r30, 0xC8	; 200
    2672:	f4 e0       	ldi	r31, 0x04	; 4
    2674:	80 81       	ld	r24, Z
    2676:	80 64       	ori	r24, 0x40	; 64
    2678:	80 83       	st	Z, r24
    267a:	8c 91       	ld	r24, X
    267c:	81 60       	ori	r24, 0x01	; 1
    267e:	8c 93       	st	X, r24
    2680:	80 81       	ld	r24, Z
    2682:	80 68       	ori	r24, 0x80	; 128
    2684:	80 83       	st	Z, r24
    2686:	cf bf       	out	0x3f, r28	; 63
    2688:	cf 91       	pop	r28
    268a:	08 95       	ret

0000268c <udd_enable>:
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	c0 e6       	ldi	r28, 0x60	; 96
    2692:	d0 e0       	ldi	r29, 0x00	; 0
    2694:	18 82       	st	Y, r1
    2696:	80 e3       	ldi	r24, 0x30	; 48
    2698:	0e 94 84 0a 	call	0x1508	; 0x1508 <sysclk_enable_usb>
    269c:	e0 ec       	ldi	r30, 0xC0	; 192
    269e:	f4 e0       	ldi	r31, 0x04	; 4
    26a0:	80 81       	ld	r24, Z
    26a2:	80 64       	ori	r24, 0x40	; 64
    26a4:	80 83       	st	Z, r24
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	88 83       	st	Y, r24
    26aa:	cf b7       	in	r28, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	e0 e4       	ldi	r30, 0x40	; 64
    26b0:	f1 e2       	ldi	r31, 0x21	; 33
    26b2:	11 86       	std	Z+9, r1	; 0x09
    26b4:	11 8a       	std	Z+17, r1	; 0x11
    26b6:	11 8e       	std	Z+25, r1	; 0x19
    26b8:	11 a2       	std	Z+33, r1	; 0x21
    26ba:	e9 ee       	ldi	r30, 0xE9	; 233
    26bc:	f0 e2       	ldi	r31, 0x20	; 32
    26be:	80 81       	ld	r24, Z
    26c0:	8e 7f       	andi	r24, 0xFE	; 254
    26c2:	80 83       	st	Z, r24
    26c4:	e2 ef       	ldi	r30, 0xF2	; 242
    26c6:	f0 e2       	ldi	r31, 0x20	; 32
    26c8:	80 81       	ld	r24, Z
    26ca:	8e 7f       	andi	r24, 0xFE	; 254
    26cc:	80 83       	st	Z, r24
    26ce:	6a e1       	ldi	r22, 0x1A	; 26
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	82 e0       	ldi	r24, 0x02	; 2
    26d4:	c4 dc       	rcall	.-1656   	; 0x205e <nvm_read_byte>
    26d6:	8f 3f       	cpi	r24, 0xFF	; 255
    26d8:	19 f0       	breq	.+6      	; 0x26e0 <udd_enable+0x54>
    26da:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    26de:	03 c0       	rjmp	.+6      	; 0x26e6 <udd_enable+0x5a>
    26e0:	8f e1       	ldi	r24, 0x1F	; 31
    26e2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    26e6:	6b e1       	ldi	r22, 0x1B	; 27
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	b8 dc       	rcall	.-1680   	; 0x205e <nvm_read_byte>
    26ee:	8f 3f       	cpi	r24, 0xFF	; 255
    26f0:	19 f0       	breq	.+6      	; 0x26f8 <udd_enable+0x6c>
    26f2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    26f6:	03 c0       	rjmp	.+6      	; 0x26fe <udd_enable+0x72>
    26f8:	8f e1       	ldi	r24, 0x1F	; 31
    26fa:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    26fe:	e0 ec       	ldi	r30, 0xC0	; 192
    2700:	f4 e0       	ldi	r31, 0x04	; 4
    2702:	80 81       	ld	r24, Z
    2704:	81 60       	ori	r24, 0x01	; 1
    2706:	80 83       	st	Z, r24
    2708:	80 81       	ld	r24, Z
    270a:	80 68       	ori	r24, 0x80	; 128
    270c:	80 83       	st	Z, r24
    270e:	80 81       	ld	r24, Z
    2710:	80 61       	ori	r24, 0x10	; 16
    2712:	80 83       	st	Z, r24
    2714:	88 e4       	ldi	r24, 0x48	; 72
    2716:	91 e2       	ldi	r25, 0x21	; 33
    2718:	86 83       	std	Z+6, r24	; 0x06
    271a:	97 83       	std	Z+7, r25	; 0x07
    271c:	80 81       	ld	r24, Z
    271e:	80 62       	ori	r24, 0x20	; 32
    2720:	80 83       	st	Z, r24
    2722:	8f ef       	ldi	r24, 0xFF	; 255
    2724:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2728:	e8 ec       	ldi	r30, 0xC8	; 200
    272a:	f4 e0       	ldi	r31, 0x04	; 4
    272c:	80 81       	ld	r24, Z
    272e:	82 60       	ori	r24, 0x02	; 2
    2730:	80 83       	st	Z, r24
    2732:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <udd_b_idle>
    2736:	80 91 cf 2b 	lds	r24, 0x2BCF	; 0x802bcf <sleepmgr_locks+0x5>
    273a:	8f 3f       	cpi	r24, 0xFF	; 255
    273c:	09 f4       	brne	.+2      	; 0x2740 <udd_enable+0xb4>
    273e:	ff cf       	rjmp	.-2      	; 0x273e <udd_enable+0xb2>
    2740:	9f b7       	in	r25, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	ea ec       	ldi	r30, 0xCA	; 202
    2746:	fb e2       	ldi	r31, 0x2B	; 43
    2748:	85 81       	ldd	r24, Z+5	; 0x05
    274a:	8f 5f       	subi	r24, 0xFF	; 255
    274c:	85 83       	std	Z+5, r24	; 0x05
    274e:	9f bf       	out	0x3f, r25	; 63
    2750:	7a df       	rcall	.-268    	; 0x2646 <udd_attach>
    2752:	cf bf       	out	0x3f, r28	; 63
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	08 95       	ret

0000275a <udd_set_address>:
    275a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    275e:	08 95       	ret

00002760 <udd_getaddress>:
    2760:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2764:	08 95       	ret

00002766 <udd_set_setup_payload>:
    2766:	ea e9       	ldi	r30, 0x9A	; 154
    2768:	f3 e2       	ldi	r31, 0x23	; 35
    276a:	80 87       	std	Z+8, r24	; 0x08
    276c:	91 87       	std	Z+9, r25	; 0x09
    276e:	62 87       	std	Z+10, r22	; 0x0a
    2770:	73 87       	std	Z+11, r23	; 0x0b
    2772:	08 95       	ret

00002774 <udd_ep_alloc>:
    2774:	28 2f       	mov	r18, r24
    2776:	2f 70       	andi	r18, 0x0F	; 15
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	22 0f       	add	r18, r18
    277c:	33 1f       	adc	r19, r19
    277e:	08 2e       	mov	r0, r24
    2780:	00 0c       	add	r0, r0
    2782:	99 0b       	sbc	r25, r25
    2784:	88 27       	eor	r24, r24
    2786:	99 0f       	add	r25, r25
    2788:	88 1f       	adc	r24, r24
    278a:	99 27       	eor	r25, r25
    278c:	82 0f       	add	r24, r18
    278e:	93 1f       	adc	r25, r19
    2790:	fc 01       	movw	r30, r24
    2792:	ee 0f       	add	r30, r30
    2794:	ff 1f       	adc	r31, r31
    2796:	ee 0f       	add	r30, r30
    2798:	ff 1f       	adc	r31, r31
    279a:	ee 0f       	add	r30, r30
    279c:	ff 1f       	adc	r31, r31
    279e:	e0 5c       	subi	r30, 0xC0	; 192
    27a0:	fe 4d       	sbci	r31, 0xDE	; 222
    27a2:	21 85       	ldd	r18, Z+9	; 0x09
    27a4:	20 7c       	andi	r18, 0xC0	; 192
    27a6:	09 f0       	breq	.+2      	; 0x27aa <udd_ep_alloc+0x36>
    27a8:	58 c0       	rjmp	.+176    	; 0x285a <udd_ep_alloc+0xe6>
    27aa:	63 70       	andi	r22, 0x03	; 3
    27ac:	61 30       	cpi	r22, 0x01	; 1
    27ae:	11 f0       	breq	.+4      	; 0x27b4 <udd_ep_alloc+0x40>
    27b0:	18 f4       	brcc	.+6      	; 0x27b8 <udd_ep_alloc+0x44>
    27b2:	04 c0       	rjmp	.+8      	; 0x27bc <udd_ep_alloc+0x48>
    27b4:	20 ec       	ldi	r18, 0xC0	; 192
    27b6:	03 c0       	rjmp	.+6      	; 0x27be <udd_ep_alloc+0x4a>
    27b8:	20 e8       	ldi	r18, 0x80	; 128
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <udd_ep_alloc+0x4a>
    27bc:	20 e4       	ldi	r18, 0x40	; 64
    27be:	40 38       	cpi	r20, 0x80	; 128
    27c0:	51 05       	cpc	r21, r1
    27c2:	e9 f0       	breq	.+58     	; 0x27fe <udd_ep_alloc+0x8a>
    27c4:	50 f4       	brcc	.+20     	; 0x27da <udd_ep_alloc+0x66>
    27c6:	40 32       	cpi	r20, 0x20	; 32
    27c8:	51 05       	cpc	r21, r1
    27ca:	a9 f0       	breq	.+42     	; 0x27f6 <udd_ep_alloc+0x82>
    27cc:	40 34       	cpi	r20, 0x40	; 64
    27ce:	51 05       	cpc	r21, r1
    27d0:	a1 f0       	breq	.+40     	; 0x27fa <udd_ep_alloc+0x86>
    27d2:	40 31       	cpi	r20, 0x10	; 16
    27d4:	51 05       	cpc	r21, r1
    27d6:	d9 f4       	brne	.+54     	; 0x280e <udd_ep_alloc+0x9a>
    27d8:	0c c0       	rjmp	.+24     	; 0x27f2 <udd_ep_alloc+0x7e>
    27da:	41 15       	cp	r20, r1
    27dc:	32 e0       	ldi	r19, 0x02	; 2
    27de:	53 07       	cpc	r21, r19
    27e0:	91 f0       	breq	.+36     	; 0x2806 <udd_ep_alloc+0x92>
    27e2:	4f 3f       	cpi	r20, 0xFF	; 255
    27e4:	33 e0       	ldi	r19, 0x03	; 3
    27e6:	53 07       	cpc	r21, r19
    27e8:	81 f0       	breq	.+32     	; 0x280a <udd_ep_alloc+0x96>
    27ea:	41 15       	cp	r20, r1
    27ec:	51 40       	sbci	r21, 0x01	; 1
    27ee:	79 f4       	brne	.+30     	; 0x280e <udd_ep_alloc+0x9a>
    27f0:	08 c0       	rjmp	.+16     	; 0x2802 <udd_ep_alloc+0x8e>
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0d c0       	rjmp	.+26     	; 0x2810 <udd_ep_alloc+0x9c>
    27f6:	42 e0       	ldi	r20, 0x02	; 2
    27f8:	0b c0       	rjmp	.+22     	; 0x2810 <udd_ep_alloc+0x9c>
    27fa:	43 e0       	ldi	r20, 0x03	; 3
    27fc:	09 c0       	rjmp	.+18     	; 0x2810 <udd_ep_alloc+0x9c>
    27fe:	44 e0       	ldi	r20, 0x04	; 4
    2800:	07 c0       	rjmp	.+14     	; 0x2810 <udd_ep_alloc+0x9c>
    2802:	45 e0       	ldi	r20, 0x05	; 5
    2804:	05 c0       	rjmp	.+10     	; 0x2810 <udd_ep_alloc+0x9c>
    2806:	46 e0       	ldi	r20, 0x06	; 6
    2808:	03 c0       	rjmp	.+6      	; 0x2810 <udd_ep_alloc+0x9c>
    280a:	47 e0       	ldi	r20, 0x07	; 7
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <udd_ep_alloc+0x9c>
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	fc 01       	movw	r30, r24
    2812:	ee 0f       	add	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	ee 0f       	add	r30, r30
    2818:	ff 1f       	adc	r31, r31
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	e0 5c       	subi	r30, 0xC0	; 192
    2820:	fe 4d       	sbci	r31, 0xDE	; 222
    2822:	11 86       	std	Z+9, r1	; 0x09
    2824:	dc 01       	movw	r26, r24
    2826:	aa 0f       	add	r26, r26
    2828:	bb 1f       	adc	r27, r27
    282a:	aa 0f       	add	r26, r26
    282c:	bb 1f       	adc	r27, r27
    282e:	aa 0f       	add	r26, r26
    2830:	bb 1f       	adc	r27, r27
    2832:	a8 5b       	subi	r26, 0xB8	; 184
    2834:	be 4d       	sbci	r27, 0xDE	; 222
    2836:	36 e0       	ldi	r19, 0x06	; 6
    2838:	3c 93       	st	X, r19
    283a:	24 2b       	or	r18, r20
    283c:	21 87       	std	Z+9, r18	; 0x09
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	fc 01       	movw	r30, r24
    284c:	e0 5c       	subi	r30, 0xC0	; 192
    284e:	fe 4d       	sbci	r31, 0xDE	; 222
    2850:	81 85       	ldd	r24, Z+9	; 0x09
    2852:	80 62       	ori	r24, 0x20	; 32
    2854:	81 87       	std	Z+9, r24	; 0x09
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	08 95       	ret
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	08 95       	ret

0000285e <udd_ep_is_halted>:
    285e:	e8 2f       	mov	r30, r24
    2860:	ef 70       	andi	r30, 0x0F	; 15
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	08 2e       	mov	r0, r24
    286a:	00 0c       	add	r0, r0
    286c:	99 0b       	sbc	r25, r25
    286e:	88 27       	eor	r24, r24
    2870:	99 0f       	add	r25, r25
    2872:	88 1f       	adc	r24, r24
    2874:	99 27       	eor	r25, r25
    2876:	e8 0f       	add	r30, r24
    2878:	f9 1f       	adc	r31, r25
    287a:	ee 0f       	add	r30, r30
    287c:	ff 1f       	adc	r31, r31
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	e0 5c       	subi	r30, 0xC0	; 192
    2888:	fe 4d       	sbci	r31, 0xDE	; 222
    288a:	81 85       	ldd	r24, Z+9	; 0x09
    288c:	82 fb       	bst	r24, 2
    288e:	88 27       	eor	r24, r24
    2890:	80 f9       	bld	r24, 0
    2892:	08 95       	ret

00002894 <udd_ep_clear_halt>:
    2894:	28 2f       	mov	r18, r24
    2896:	2f 70       	andi	r18, 0x0F	; 15
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	a9 01       	movw	r20, r18
    289c:	44 0f       	add	r20, r20
    289e:	55 1f       	adc	r21, r21
    28a0:	28 2f       	mov	r18, r24
    28a2:	08 2e       	mov	r0, r24
    28a4:	00 0c       	add	r0, r0
    28a6:	33 0b       	sbc	r19, r19
    28a8:	22 27       	eor	r18, r18
    28aa:	33 0f       	add	r19, r19
    28ac:	22 1f       	adc	r18, r18
    28ae:	33 27       	eor	r19, r19
    28b0:	24 0f       	add	r18, r20
    28b2:	35 1f       	adc	r19, r21
    28b4:	f9 01       	movw	r30, r18
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	ee 0f       	add	r30, r30
    28bc:	ff 1f       	adc	r31, r31
    28be:	ee 0f       	add	r30, r30
    28c0:	ff 1f       	adc	r31, r31
    28c2:	e0 5c       	subi	r30, 0xC0	; 192
    28c4:	fe 4d       	sbci	r31, 0xDE	; 222
    28c6:	91 85       	ldd	r25, Z+9	; 0x09
    28c8:	92 ff       	sbrs	r25, 2
    28ca:	17 c0       	rjmp	.+46     	; 0x28fa <udd_ep_clear_halt+0x66>
    28cc:	22 0f       	add	r18, r18
    28ce:	33 1f       	adc	r19, r19
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	22 0f       	add	r18, r18
    28d6:	33 1f       	adc	r19, r19
    28d8:	f9 01       	movw	r30, r18
    28da:	e0 5c       	subi	r30, 0xC0	; 192
    28dc:	fe 4d       	sbci	r31, 0xDE	; 222
    28de:	91 85       	ldd	r25, Z+9	; 0x09
    28e0:	9b 7f       	andi	r25, 0xFB	; 251
    28e2:	91 87       	std	Z+9, r25	; 0x09
    28e4:	cc dc       	rcall	.-1640   	; 0x227e <udd_ep_get_job>
    28e6:	fc 01       	movw	r30, r24
    28e8:	80 81       	ld	r24, Z
    28ea:	80 ff       	sbrs	r24, 0
    28ec:	06 c0       	rjmp	.+12     	; 0x28fa <udd_ep_clear_halt+0x66>
    28ee:	8e 7f       	andi	r24, 0xFE	; 254
    28f0:	80 83       	st	Z, r24
    28f2:	07 80       	ldd	r0, Z+7	; 0x07
    28f4:	f0 85       	ldd	r31, Z+8	; 0x08
    28f6:	e0 2d       	mov	r30, r0
    28f8:	09 95       	icall
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	08 95       	ret

000028fe <udd_ep_run>:
    28fe:	7f 92       	push	r7
    2900:	8f 92       	push	r8
    2902:	9f 92       	push	r9
    2904:	af 92       	push	r10
    2906:	bf 92       	push	r11
    2908:	cf 92       	push	r12
    290a:	df 92       	push	r13
    290c:	ef 92       	push	r14
    290e:	ff 92       	push	r15
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	98 2e       	mov	r9, r24
    291a:	86 2e       	mov	r8, r22
    291c:	6a 01       	movw	r12, r20
    291e:	79 01       	movw	r14, r18
    2920:	ae dc       	rcall	.-1700   	; 0x227e <udd_ep_get_job>
    2922:	5c 01       	movw	r10, r24
    2924:	79 2c       	mov	r7, r9
    2926:	77 1c       	adc	r7, r7
    2928:	77 24       	eor	r7, r7
    292a:	77 1c       	adc	r7, r7
    292c:	c9 2d       	mov	r28, r9
    292e:	cf 70       	andi	r28, 0x0F	; 15
    2930:	d0 e0       	ldi	r29, 0x00	; 0
    2932:	cc 0f       	add	r28, r28
    2934:	dd 1f       	adc	r29, r29
    2936:	c7 0d       	add	r28, r7
    2938:	d1 1d       	adc	r29, r1
    293a:	fe 01       	movw	r30, r28
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	ee 0f       	add	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	ee 0f       	add	r30, r30
    2946:	ff 1f       	adc	r31, r31
    2948:	e0 5c       	subi	r30, 0xC0	; 192
    294a:	fe 4d       	sbci	r31, 0xDE	; 222
    294c:	81 85       	ldd	r24, Z+9	; 0x09
    294e:	80 7c       	andi	r24, 0xC0	; 192
    2950:	09 f4       	brne	.+2      	; 0x2954 <udd_ep_run+0x56>
    2952:	7d c0       	rjmp	.+250    	; 0x2a4e <udd_ep_run+0x150>
    2954:	fe 01       	movw	r30, r28
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	e0 5c       	subi	r30, 0xC0	; 192
    2964:	fe 4d       	sbci	r31, 0xDE	; 222
    2966:	81 85       	ldd	r24, Z+9	; 0x09
    2968:	80 7c       	andi	r24, 0xC0	; 192
    296a:	80 3c       	cpi	r24, 0xC0	; 192
    296c:	61 f0       	breq	.+24     	; 0x2986 <udd_ep_run+0x88>
    296e:	fe 01       	movw	r30, r28
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	e0 5c       	subi	r30, 0xC0	; 192
    297e:	fe 4d       	sbci	r31, 0xDE	; 222
    2980:	81 85       	ldd	r24, Z+9	; 0x09
    2982:	82 fd       	sbrc	r24, 2
    2984:	66 c0       	rjmp	.+204    	; 0x2a52 <udd_ep_run+0x154>
    2986:	8f b7       	in	r24, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	f5 01       	movw	r30, r10
    298c:	90 81       	ld	r25, Z
    298e:	90 ff       	sbrs	r25, 0
    2990:	03 c0       	rjmp	.+6      	; 0x2998 <udd_ep_run+0x9a>
    2992:	8f bf       	out	0x3f, r24	; 63
    2994:	71 2c       	mov	r7, r1
    2996:	5e c0       	rjmp	.+188    	; 0x2a54 <udd_ep_run+0x156>
    2998:	f5 01       	movw	r30, r10
    299a:	90 81       	ld	r25, Z
    299c:	91 60       	ori	r25, 0x01	; 1
    299e:	90 83       	st	Z, r25
    29a0:	8f bf       	out	0x3f, r24	; 63
    29a2:	c1 82       	std	Z+1, r12	; 0x01
    29a4:	d2 82       	std	Z+2, r13	; 0x02
    29a6:	e3 82       	std	Z+3, r14	; 0x03
    29a8:	f4 82       	std	Z+4, r15	; 0x04
    29aa:	15 82       	std	Z+5, r1	; 0x05
    29ac:	16 82       	std	Z+6, r1	; 0x06
    29ae:	07 83       	std	Z+7, r16	; 0x07
    29b0:	10 87       	std	Z+8, r17	; 0x08
    29b2:	81 10       	cpse	r8, r1
    29b4:	06 c0       	rjmp	.+12     	; 0x29c2 <udd_ep_run+0xc4>
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	e1 14       	cp	r14, r1
    29ba:	f1 04       	cpc	r15, r1
    29bc:	19 f0       	breq	.+6      	; 0x29c4 <udd_ep_run+0xc6>
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	01 c0       	rjmp	.+2      	; 0x29c4 <udd_ep_run+0xc6>
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	f5 01       	movw	r30, r10
    29c6:	80 81       	ld	r24, Z
    29c8:	90 fb       	bst	r25, 0
    29ca:	81 f9       	bld	r24, 1
    29cc:	8b 7f       	andi	r24, 0xFB	; 251
    29ce:	80 83       	st	Z, r24
    29d0:	77 20       	and	r7, r7
    29d2:	59 f0       	breq	.+22     	; 0x29ea <udd_ep_run+0xec>
    29d4:	cc 0f       	add	r28, r28
    29d6:	dd 1f       	adc	r29, r29
    29d8:	cc 0f       	add	r28, r28
    29da:	dd 1f       	adc	r29, r29
    29dc:	cc 0f       	add	r28, r28
    29de:	dd 1f       	adc	r29, r29
    29e0:	c0 5c       	subi	r28, 0xC0	; 192
    29e2:	de 4d       	sbci	r29, 0xDE	; 222
    29e4:	1e 86       	std	Y+14, r1	; 0x0e
    29e6:	1f 86       	std	Y+15, r1	; 0x0f
    29e8:	2d c0       	rjmp	.+90     	; 0x2a44 <udd_ep_run+0x146>
    29ea:	fe 01       	movw	r30, r28
    29ec:	ee 0f       	add	r30, r30
    29ee:	ff 1f       	adc	r31, r31
    29f0:	ee 0f       	add	r30, r30
    29f2:	ff 1f       	adc	r31, r31
    29f4:	ee 0f       	add	r30, r30
    29f6:	ff 1f       	adc	r31, r31
    29f8:	e0 5c       	subi	r30, 0xC0	; 192
    29fa:	fe 4d       	sbci	r31, 0xDE	; 222
    29fc:	81 85       	ldd	r24, Z+9	; 0x09
    29fe:	80 7c       	andi	r24, 0xC0	; 192
    2a00:	80 3c       	cpi	r24, 0xC0	; 192
    2a02:	a1 f4       	brne	.+40     	; 0x2a2c <udd_ep_run+0x12e>
    2a04:	ce 01       	movw	r24, r28
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	88 5b       	subi	r24, 0xB8	; 184
    2a14:	9e 4d       	sbci	r25, 0xDE	; 222
    2a16:	0d dc       	rcall	.-2022   	; 0x2232 <udd_ep_get_size>
    2a18:	bc 01       	movw	r22, r24
    2a1a:	c7 01       	movw	r24, r14
    2a1c:	58 d2       	rcall	.+1200   	; 0x2ece <__udivmodhi4>
    2a1e:	89 2b       	or	r24, r25
    2a20:	29 f0       	breq	.+10     	; 0x2a2c <udd_ep_run+0x12e>
    2a22:	f5 01       	movw	r30, r10
    2a24:	80 81       	ld	r24, Z
    2a26:	8e 7f       	andi	r24, 0xFE	; 254
    2a28:	80 83       	st	Z, r24
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <udd_ep_run+0x156>
    2a2c:	cc 0f       	add	r28, r28
    2a2e:	dd 1f       	adc	r29, r29
    2a30:	cc 0f       	add	r28, r28
    2a32:	dd 1f       	adc	r29, r29
    2a34:	cc 0f       	add	r28, r28
    2a36:	dd 1f       	adc	r29, r29
    2a38:	c0 5c       	subi	r28, 0xC0	; 192
    2a3a:	de 4d       	sbci	r29, 0xDE	; 222
    2a3c:	1a 86       	std	Y+10, r1	; 0x0a
    2a3e:	1b 86       	std	Y+11, r1	; 0x0b
    2a40:	1e 86       	std	Y+14, r1	; 0x0e
    2a42:	1f 86       	std	Y+15, r1	; 0x0f
    2a44:	89 2d       	mov	r24, r9
    2a46:	a5 dc       	rcall	.-1718   	; 0x2392 <udd_ep_trans_complet>
    2a48:	77 24       	eor	r7, r7
    2a4a:	73 94       	inc	r7
    2a4c:	03 c0       	rjmp	.+6      	; 0x2a54 <udd_ep_run+0x156>
    2a4e:	71 2c       	mov	r7, r1
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <udd_ep_run+0x156>
    2a52:	71 2c       	mov	r7, r1
    2a54:	87 2d       	mov	r24, r7
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	0f 91       	pop	r16
    2a5e:	ff 90       	pop	r15
    2a60:	ef 90       	pop	r14
    2a62:	df 90       	pop	r13
    2a64:	cf 90       	pop	r12
    2a66:	bf 90       	pop	r11
    2a68:	af 90       	pop	r10
    2a6a:	9f 90       	pop	r9
    2a6c:	8f 90       	pop	r8
    2a6e:	7f 90       	pop	r7
    2a70:	08 95       	ret

00002a72 <udd_ep_abort>:
    2a72:	ff 92       	push	r15
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	18 2f       	mov	r17, r24
    2a7e:	f8 2e       	mov	r15, r24
    2a80:	ff 1c       	adc	r15, r15
    2a82:	ff 24       	eor	r15, r15
    2a84:	ff 1c       	adc	r15, r15
    2a86:	c8 2f       	mov	r28, r24
    2a88:	cf 70       	andi	r28, 0x0F	; 15
    2a8a:	d0 e0       	ldi	r29, 0x00	; 0
    2a8c:	cc 0f       	add	r28, r28
    2a8e:	dd 1f       	adc	r29, r29
    2a90:	cf 0d       	add	r28, r15
    2a92:	d1 1d       	adc	r29, r1
    2a94:	f4 db       	rcall	.-2072   	; 0x227e <udd_ep_get_job>
    2a96:	dc 01       	movw	r26, r24
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	ee 0f       	add	r30, r30
    2aa0:	ff 1f       	adc	r31, r31
    2aa2:	ee 0f       	add	r30, r30
    2aa4:	ff 1f       	adc	r31, r31
    2aa6:	e8 5b       	subi	r30, 0xB8	; 184
    2aa8:	fe 4d       	sbci	r31, 0xDE	; 222
    2aaa:	02 e0       	ldi	r16, 0x02	; 2
    2aac:	05 93       	las	Z, r16
    2aae:	8c 91       	ld	r24, X
    2ab0:	80 ff       	sbrs	r24, 0
    2ab2:	22 c0       	rjmp	.+68     	; 0x2af8 <udd_ep_abort+0x86>
    2ab4:	8e 7f       	andi	r24, 0xFE	; 254
    2ab6:	8c 93       	st	X, r24
    2ab8:	17 96       	adiw	r26, 0x07	; 7
    2aba:	ed 91       	ld	r30, X+
    2abc:	fc 91       	ld	r31, X
    2abe:	18 97       	sbiw	r26, 0x08	; 8
    2ac0:	30 97       	sbiw	r30, 0x00	; 0
    2ac2:	d1 f0       	breq	.+52     	; 0x2af8 <udd_ep_abort+0x86>
    2ac4:	ff 20       	and	r15, r15
    2ac6:	59 f0       	breq	.+22     	; 0x2ade <udd_ep_abort+0x6c>
    2ac8:	cc 0f       	add	r28, r28
    2aca:	dd 1f       	adc	r29, r29
    2acc:	cc 0f       	add	r28, r28
    2ace:	dd 1f       	adc	r29, r29
    2ad0:	cc 0f       	add	r28, r28
    2ad2:	dd 1f       	adc	r29, r29
    2ad4:	c0 5c       	subi	r28, 0xC0	; 192
    2ad6:	de 4d       	sbci	r29, 0xDE	; 222
    2ad8:	6e 85       	ldd	r22, Y+14	; 0x0e
    2ada:	7f 85       	ldd	r23, Y+15	; 0x0f
    2adc:	0a c0       	rjmp	.+20     	; 0x2af2 <udd_ep_abort+0x80>
    2ade:	cc 0f       	add	r28, r28
    2ae0:	dd 1f       	adc	r29, r29
    2ae2:	cc 0f       	add	r28, r28
    2ae4:	dd 1f       	adc	r29, r29
    2ae6:	cc 0f       	add	r28, r28
    2ae8:	dd 1f       	adc	r29, r29
    2aea:	c0 5c       	subi	r28, 0xC0	; 192
    2aec:	de 4d       	sbci	r29, 0xDE	; 222
    2aee:	6a 85       	ldd	r22, Y+10	; 0x0a
    2af0:	7b 85       	ldd	r23, Y+11	; 0x0b
    2af2:	41 2f       	mov	r20, r17
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	09 95       	icall
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	ff 90       	pop	r15
    2b02:	08 95       	ret

00002b04 <udd_ep_free>:
    2b04:	cf 93       	push	r28
    2b06:	c8 2f       	mov	r28, r24
    2b08:	b4 df       	rcall	.-152    	; 0x2a72 <udd_ep_abort>
    2b0a:	ec 2f       	mov	r30, r28
    2b0c:	ef 70       	andi	r30, 0x0F	; 15
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	ee 0f       	add	r30, r30
    2b12:	ff 1f       	adc	r31, r31
    2b14:	8c 2f       	mov	r24, r28
    2b16:	cc 0f       	add	r28, r28
    2b18:	99 0b       	sbc	r25, r25
    2b1a:	88 27       	eor	r24, r24
    2b1c:	99 0f       	add	r25, r25
    2b1e:	88 1f       	adc	r24, r24
    2b20:	99 27       	eor	r25, r25
    2b22:	e8 0f       	add	r30, r24
    2b24:	f9 1f       	adc	r31, r25
    2b26:	ee 0f       	add	r30, r30
    2b28:	ff 1f       	adc	r31, r31
    2b2a:	ee 0f       	add	r30, r30
    2b2c:	ff 1f       	adc	r31, r31
    2b2e:	ee 0f       	add	r30, r30
    2b30:	ff 1f       	adc	r31, r31
    2b32:	e0 5c       	subi	r30, 0xC0	; 192
    2b34:	fe 4d       	sbci	r31, 0xDE	; 222
    2b36:	11 86       	std	Z+9, r1	; 0x09
    2b38:	cf 91       	pop	r28
    2b3a:	08 95       	ret

00002b3c <udd_ep_set_halt>:
    2b3c:	0f 93       	push	r16
    2b3e:	e8 2f       	mov	r30, r24
    2b40:	ef 70       	andi	r30, 0x0F	; 15
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	ee 0f       	add	r30, r30
    2b46:	ff 1f       	adc	r31, r31
    2b48:	28 2f       	mov	r18, r24
    2b4a:	08 2e       	mov	r0, r24
    2b4c:	00 0c       	add	r0, r0
    2b4e:	33 0b       	sbc	r19, r19
    2b50:	22 27       	eor	r18, r18
    2b52:	33 0f       	add	r19, r19
    2b54:	22 1f       	adc	r18, r18
    2b56:	33 27       	eor	r19, r19
    2b58:	e2 0f       	add	r30, r18
    2b5a:	f3 1f       	adc	r31, r19
    2b5c:	df 01       	movw	r26, r30
    2b5e:	aa 0f       	add	r26, r26
    2b60:	bb 1f       	adc	r27, r27
    2b62:	aa 0f       	add	r26, r26
    2b64:	bb 1f       	adc	r27, r27
    2b66:	aa 0f       	add	r26, r26
    2b68:	bb 1f       	adc	r27, r27
    2b6a:	a0 5c       	subi	r26, 0xC0	; 192
    2b6c:	be 4d       	sbci	r27, 0xDE	; 222
    2b6e:	19 96       	adiw	r26, 0x09	; 9
    2b70:	9c 91       	ld	r25, X
    2b72:	19 97       	sbiw	r26, 0x09	; 9
    2b74:	94 60       	ori	r25, 0x04	; 4
    2b76:	19 96       	adiw	r26, 0x09	; 9
    2b78:	9c 93       	st	X, r25
    2b7a:	ee 0f       	add	r30, r30
    2b7c:	ff 1f       	adc	r31, r31
    2b7e:	ee 0f       	add	r30, r30
    2b80:	ff 1f       	adc	r31, r31
    2b82:	ee 0f       	add	r30, r30
    2b84:	ff 1f       	adc	r31, r31
    2b86:	e8 5b       	subi	r30, 0xB8	; 184
    2b88:	fe 4d       	sbci	r31, 0xDE	; 222
    2b8a:	01 e0       	ldi	r16, 0x01	; 1
    2b8c:	06 93       	lac	Z, r16
    2b8e:	71 df       	rcall	.-286    	; 0x2a72 <udd_ep_abort>
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	0f 91       	pop	r16
    2b94:	08 95       	ret

00002b96 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2b96:	1f 92       	push	r1
    2b98:	0f 92       	push	r0
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	0f 92       	push	r0
    2b9e:	11 24       	eor	r1, r1
    2ba0:	0f 93       	push	r16
    2ba2:	2f 93       	push	r18
    2ba4:	3f 93       	push	r19
    2ba6:	4f 93       	push	r20
    2ba8:	5f 93       	push	r21
    2baa:	6f 93       	push	r22
    2bac:	7f 93       	push	r23
    2bae:	8f 93       	push	r24
    2bb0:	9f 93       	push	r25
    2bb2:	af 93       	push	r26
    2bb4:	bf 93       	push	r27
    2bb6:	ef 93       	push	r30
    2bb8:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2bba:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2bbe:	88 23       	and	r24, r24
    2bc0:	44 f4       	brge	.+16     	; 0x2bd2 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2bc2:	80 e8       	ldi	r24, 0x80	; 128
    2bc4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2bc8:	0e 94 07 0c 	call	0x180e	; 0x180e <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2bcc:	0e 94 44 04 	call	0x888	; 0x888 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2bd0:	82 c0       	rjmp	.+260    	; 0x2cd6 <__vector_125+0x140>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2bd2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2bd6:	82 ff       	sbrs	r24, 2
    2bd8:	20 c0       	rjmp	.+64     	; 0x2c1a <__vector_125+0x84>
		udd_ack_underflow_event();
    2bda:	84 e0       	ldi	r24, 0x04	; 4
    2bdc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2be0:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <udd_sram+0x10>
    2be4:	86 ff       	sbrs	r24, 6
    2be6:	77 c0       	rjmp	.+238    	; 0x2cd6 <__vector_125+0x140>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2be8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2bec:	81 fd       	sbrc	r24, 1
    2bee:	73 c0       	rjmp	.+230    	; 0x2cd6 <__vector_125+0x140>
    2bf0:	61 db       	rcall	.-2366   	; 0x22b4 <udd_ctrl_interrupt_tc_setup>
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	70 c0       	rjmp	.+224    	; 0x2cd6 <__vector_125+0x140>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2bf6:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2bfa:	81 30       	cpi	r24, 0x01	; 1
    2bfc:	11 f4       	brne	.+4      	; 0x2c02 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2bfe:	97 da       	rcall	.-2770   	; 0x212e <udd_ctrl_send_zlp_in>
    2c00:	6a c0       	rjmp	.+212    	; 0x2cd6 <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c02:	84 30       	cpi	r24, 0x04	; 4
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <__vector_125+0x72>
    2c06:	67 c0       	rjmp	.+206    	; 0x2cd6 <__vector_125+0x140>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2c08:	e1 e5       	ldi	r30, 0x51	; 81
    2c0a:	f1 e2       	ldi	r31, 0x21	; 33
    2c0c:	04 e0       	ldi	r16, 0x04	; 4
    2c0e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c10:	e9 e4       	ldi	r30, 0x49	; 73
    2c12:	f1 e2       	ldi	r31, 0x21	; 33
    2c14:	04 e0       	ldi	r16, 0x04	; 4
    2c16:	05 93       	las	Z, r16
    2c18:	5e c0       	rjmp	.+188    	; 0x2cd6 <__vector_125+0x140>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2c1a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c1e:	81 ff       	sbrs	r24, 1
    2c20:	55 c0       	rjmp	.+170    	; 0x2ccc <__vector_125+0x136>
		udd_ack_overflow_event();
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2c28:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <udd_sram+0x8>
    2c2c:	86 ff       	sbrs	r24, 6
    2c2e:	53 c0       	rjmp	.+166    	; 0x2cd6 <__vector_125+0x140>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c30:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c34:	81 fd       	sbrc	r24, 1
    2c36:	4f c0       	rjmp	.+158    	; 0x2cd6 <__vector_125+0x140>
    2c38:	3d db       	rcall	.-2438   	; 0x22b4 <udd_ctrl_interrupt_tc_setup>
    2c3a:	81 11       	cpse	r24, r1
    2c3c:	4c c0       	rjmp	.+152    	; 0x2cd6 <__vector_125+0x140>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2c3e:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2c42:	82 30       	cpi	r24, 0x02	; 2
    2c44:	41 f4       	brne	.+16     	; 0x2c56 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2c46:	84 e0       	ldi	r24, 0x04	; 4
    2c48:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2c4c:	e8 e4       	ldi	r30, 0x48	; 72
    2c4e:	f1 e2       	ldi	r31, 0x21	; 33
    2c50:	02 e0       	ldi	r16, 0x02	; 2
    2c52:	06 93       	lac	Z, r16
    2c54:	40 c0       	rjmp	.+128    	; 0x2cd6 <__vector_125+0x140>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2c56:	83 30       	cpi	r24, 0x03	; 3
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <__vector_125+0xc6>
    2c5a:	3d c0       	rjmp	.+122    	; 0x2cd6 <__vector_125+0x140>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2c5c:	e1 e5       	ldi	r30, 0x51	; 81
    2c5e:	f1 e2       	ldi	r31, 0x21	; 33
    2c60:	04 e0       	ldi	r16, 0x04	; 4
    2c62:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c64:	e9 e4       	ldi	r30, 0x49	; 73
    2c66:	f1 e2       	ldi	r31, 0x21	; 33
    2c68:	04 e0       	ldi	r16, 0x04	; 4
    2c6a:	05 93       	las	Z, r16
    2c6c:	34 c0       	rjmp	.+104    	; 0x2cd6 <__vector_125+0x140>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2c6e:	80 e1       	ldi	r24, 0x10	; 16
    2c70:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2c74:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2c78:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c7c:	e0 e4       	ldi	r30, 0x40	; 64
    2c7e:	f1 e2       	ldi	r31, 0x21	; 33
    2c80:	11 86       	std	Z+9, r1	; 0x09
	udd_endpoint_clear_status(ep_ctrl);
    2c82:	96 e0       	ldi	r25, 0x06	; 6
    2c84:	90 87       	std	Z+8, r25	; 0x08
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c86:	83 e4       	ldi	r24, 0x43	; 67
    2c88:	81 87       	std	Z+9, r24	; 0x09
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2c8a:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2c8c:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2c8e:	81 8b       	std	Z+17, r24	; 0x11
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2c90:	8b ef       	ldi	r24, 0xFB	; 251
    2c92:	90 e2       	ldi	r25, 0x20	; 32
    2c94:	84 87       	std	Z+12, r24	; 0x0c
    2c96:	95 87       	std	Z+13, r25	; 0x0d
		// Reset endpoint control management
		udd_ctrl_init();
    2c98:	15 da       	rcall	.-3030   	; 0x20c4 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2c9a:	1d c0       	rjmp	.+58     	; 0x2cd6 <__vector_125+0x140>
	}

	if (udd_is_suspend_event()) {
    2c9c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2ca0:	86 ff       	sbrs	r24, 6
    2ca2:	08 c0       	rjmp	.+16     	; 0x2cb4 <__vector_125+0x11e>
		udd_ack_suspend_event();
    2ca4:	80 e4       	ldi	r24, 0x40	; 64
    2ca6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	e2 d9       	rcall	.-3132   	; 0x2072 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2cae:	0e 94 42 04 	call	0x884	; 0x884 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2cb2:	11 c0       	rjmp	.+34     	; 0x2cd6 <__vector_125+0x140>
	}

	if (udd_is_resume_event()) {
    2cb4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cb8:	85 ff       	sbrs	r24, 5
    2cba:	0d c0       	rjmp	.+26     	; 0x2cd6 <__vector_125+0x140>
		udd_ack_resume_event();
    2cbc:	80 e2       	ldi	r24, 0x20	; 32
    2cbe:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	d6 d9       	rcall	.-3156   	; 0x2072 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2cc6:	0e 94 43 04 	call	0x886	; 0x886 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2cca:	05 c0       	rjmp	.+10     	; 0x2cd6 <__vector_125+0x140>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2ccc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cd0:	84 ff       	sbrs	r24, 4
    2cd2:	e4 cf       	rjmp	.-56     	; 0x2c9c <__vector_125+0x106>
    2cd4:	cc cf       	rjmp	.-104    	; 0x2c6e <__vector_125+0xd8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2cd6:	ff 91       	pop	r31
    2cd8:	ef 91       	pop	r30
    2cda:	bf 91       	pop	r27
    2cdc:	af 91       	pop	r26
    2cde:	9f 91       	pop	r25
    2ce0:	8f 91       	pop	r24
    2ce2:	7f 91       	pop	r23
    2ce4:	6f 91       	pop	r22
    2ce6:	5f 91       	pop	r21
    2ce8:	4f 91       	pop	r20
    2cea:	3f 91       	pop	r19
    2cec:	2f 91       	pop	r18
    2cee:	0f 91       	pop	r16
    2cf0:	0f 90       	pop	r0
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	0f 90       	pop	r0
    2cf6:	1f 90       	pop	r1
    2cf8:	18 95       	reti

00002cfa <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2cfa:	1f 92       	push	r1
    2cfc:	0f 92       	push	r0
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	0f 92       	push	r0
    2d02:	11 24       	eor	r1, r1
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	2f 93       	push	r18
    2d0a:	3f 93       	push	r19
    2d0c:	4f 93       	push	r20
    2d0e:	5f 93       	push	r21
    2d10:	6f 93       	push	r22
    2d12:	7f 93       	push	r23
    2d14:	8f 93       	push	r24
    2d16:	9f 93       	push	r25
    2d18:	af 93       	push	r26
    2d1a:	bf 93       	push	r27
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	ef 93       	push	r30
    2d22:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2d24:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2d28:	81 fd       	sbrc	r24, 1
    2d2a:	03 c0       	rjmp	.+6      	; 0x2d32 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2d2c:	c3 da       	rcall	.-2682   	; 0x22b4 <udd_ctrl_interrupt_tc_setup>
    2d2e:	81 11       	cpse	r24, r1
    2d30:	b9 c0       	rjmp	.+370    	; 0x2ea4 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2d32:	82 e0       	ldi	r24, 0x02	; 2
    2d34:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2d38:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2d3c:	81 95       	neg	r24
    2d3e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2d40:	e8 e4       	ldi	r30, 0x48	; 72
    2d42:	f1 e2       	ldi	r31, 0x21	; 33
    2d44:	e8 1b       	sub	r30, r24
    2d46:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2d48:	20 81       	ld	r18, Z
    2d4a:	31 81       	ldd	r19, Z+1	; 0x01
    2d4c:	28 54       	subi	r18, 0x48	; 72
    2d4e:	31 42       	sbci	r19, 0x21	; 33
    2d50:	36 95       	lsr	r19
    2d52:	27 95       	ror	r18
    2d54:	36 95       	lsr	r19
    2d56:	27 95       	ror	r18
    2d58:	36 95       	lsr	r19
    2d5a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2d5c:	82 2f       	mov	r24, r18
    2d5e:	86 95       	lsr	r24
    2d60:	20 fd       	sbrc	r18, 0
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <__vector_126+0x6e>
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <__vector_126+0x70>
    2d68:	90 e8       	ldi	r25, 0x80	; 128
    2d6a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d6c:	e8 2f       	mov	r30, r24
    2d6e:	ef 70       	andi	r30, 0x0F	; 15
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	ee 0f       	add	r30, r30
    2d74:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2d76:	28 2f       	mov	r18, r24
    2d78:	08 2e       	mov	r0, r24
    2d7a:	00 0c       	add	r0, r0
    2d7c:	33 0b       	sbc	r19, r19
    2d7e:	22 27       	eor	r18, r18
    2d80:	33 0f       	add	r19, r19
    2d82:	22 1f       	adc	r18, r18
    2d84:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2d86:	e2 0f       	add	r30, r18
    2d88:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2d8a:	df 01       	movw	r26, r30
    2d8c:	aa 0f       	add	r26, r26
    2d8e:	bb 1f       	adc	r27, r27
    2d90:	aa 0f       	add	r26, r26
    2d92:	bb 1f       	adc	r27, r27
    2d94:	aa 0f       	add	r26, r26
    2d96:	bb 1f       	adc	r27, r27
    2d98:	a8 5b       	subi	r26, 0xB8	; 184
    2d9a:	be 4d       	sbci	r27, 0xDE	; 222
    2d9c:	9c 91       	ld	r25, X
    2d9e:	95 ff       	sbrs	r25, 5
    2da0:	81 c0       	rjmp	.+258    	; 0x2ea4 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2da2:	fd 01       	movw	r30, r26
    2da4:	00 e2       	ldi	r16, 0x20	; 32
    2da6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2da8:	81 11       	cpse	r24, r1
    2daa:	77 c0       	rjmp	.+238    	; 0x2e9a <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2dac:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2db0:	84 30       	cpi	r24, 0x04	; 4
    2db2:	19 f4       	brne	.+6      	; 0x2dba <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2db4:	ca d9       	rcall	.-3180   	; 0x214a <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2db6:	86 d9       	rcall	.-3316   	; 0x20c4 <udd_ctrl_init>
    2db8:	75 c0       	rjmp	.+234    	; 0x2ea4 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2dba:	00 91 4a 21 	lds	r16, 0x214A	; 0x80214a <udd_sram+0xa>
    2dbe:	10 91 4b 21 	lds	r17, 0x214B	; 0x80214b <udd_sram+0xb>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2dc2:	80 91 a4 23 	lds	r24, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    2dc6:	90 91 a5 23 	lds	r25, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    2dca:	c0 91 3b 21 	lds	r28, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2dce:	d0 91 3c 21 	lds	r29, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2dd2:	9e 01       	movw	r18, r28
    2dd4:	20 0f       	add	r18, r16
    2dd6:	31 1f       	adc	r19, r17
    2dd8:	82 17       	cp	r24, r18
    2dda:	93 07       	cpc	r25, r19
    2ddc:	18 f4       	brcc	.+6      	; 0x2de4 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2dde:	8c 01       	movw	r16, r24
    2de0:	0c 1b       	sub	r16, r28
    2de2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2de4:	80 91 a2 23 	lds	r24, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    2de8:	90 91 a3 23 	lds	r25, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    2dec:	a8 01       	movw	r20, r16
    2dee:	6b ef       	ldi	r22, 0xFB	; 251
    2df0:	70 e2       	ldi	r23, 0x20	; 32
    2df2:	8c 0f       	add	r24, r28
    2df4:	9d 1f       	adc	r25, r29
    2df6:	98 d0       	rcall	.+304    	; 0x2f28 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2df8:	c0 0f       	add	r28, r16
    2dfa:	d1 1f       	adc	r29, r17
    2dfc:	c0 93 3b 21 	sts	0x213B, r28	; 0x80213b <udd_ctrl_payload_nb_trans>
    2e00:	d0 93 3c 21 	sts	0x213C, r29	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e04:	00 34       	cpi	r16, 0x40	; 64
    2e06:	11 05       	cpc	r17, r1
    2e08:	69 f4       	brne	.+26     	; 0x2e24 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2e0a:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2e0e:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2e12:	8c 0f       	add	r24, r28
    2e14:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e16:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    2e1a:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    2e1e:	82 17       	cp	r24, r18
    2e20:	93 07       	cpc	r25, r19
    2e22:	80 f0       	brcs	.+32     	; 0x2e44 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e24:	ea e9       	ldi	r30, 0x9A	; 154
    2e26:	f3 e2       	ldi	r31, 0x23	; 35
    2e28:	c2 87       	std	Z+10, r28	; 0x0a
    2e2a:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e2c:	06 84       	ldd	r0, Z+14	; 0x0e
    2e2e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e30:	e0 2d       	mov	r30, r0
    2e32:	30 97       	sbiw	r30, 0x00	; 0
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e36:	09 95       	icall
    2e38:	81 11       	cpse	r24, r1
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2e3c:	6a d9       	rcall	.-3372   	; 0x2112 <udd_ctrl_stall_data>
    2e3e:	32 c0       	rjmp	.+100    	; 0x2ea4 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2e40:	76 d9       	rcall	.-3348   	; 0x212e <udd_ctrl_send_zlp_in>
    2e42:	30 c0       	rjmp	.+96     	; 0x2ea4 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e44:	80 91 a4 23 	lds	r24, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    2e48:	90 91 a5 23 	lds	r25, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    2e4c:	c8 17       	cp	r28, r24
    2e4e:	d9 07       	cpc	r29, r25
    2e50:	f9 f4       	brne	.+62     	; 0x2e90 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2e52:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <udd_g_ctrlreq+0xe>
    2e56:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <udd_g_ctrlreq+0xf>
    2e5a:	30 97       	sbiw	r30, 0x00	; 0
    2e5c:	11 f4       	brne	.+4      	; 0x2e62 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2e5e:	59 d9       	rcall	.-3406   	; 0x2112 <udd_ctrl_stall_data>
    2e60:	21 c0       	rjmp	.+66     	; 0x2ea4 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2e62:	09 95       	icall
    2e64:	81 11       	cpse	r24, r1
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2e68:	54 d9       	rcall	.-3416   	; 0x2112 <udd_ctrl_stall_data>
    2e6a:	1c c0       	rjmp	.+56     	; 0x2ea4 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2e6c:	20 91 3d 21 	lds	r18, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2e70:	30 91 3e 21 	lds	r19, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2e74:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2e78:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2e7c:	82 0f       	add	r24, r18
    2e7e:	93 1f       	adc	r25, r19
    2e80:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2e84:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2e88:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    2e8c:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2e90:	e8 e4       	ldi	r30, 0x48	; 72
    2e92:	f1 e2       	ldi	r31, 0x21	; 33
    2e94:	02 e0       	ldi	r16, 0x02	; 2
    2e96:	06 93       	lac	Z, r16
    2e98:	05 c0       	rjmp	.+10     	; 0x2ea4 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2e9a:	80 38       	cpi	r24, 0x80	; 128
    2e9c:	11 f4       	brne	.+4      	; 0x2ea2 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2e9e:	5d d9       	rcall	.-3398   	; 0x215a <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2ea0:	01 c0       	rjmp	.+2      	; 0x2ea4 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2ea2:	77 da       	rcall	.-2834   	; 0x2392 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2ea4:	ff 91       	pop	r31
    2ea6:	ef 91       	pop	r30
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	bf 91       	pop	r27
    2eae:	af 91       	pop	r26
    2eb0:	9f 91       	pop	r25
    2eb2:	8f 91       	pop	r24
    2eb4:	7f 91       	pop	r23
    2eb6:	6f 91       	pop	r22
    2eb8:	5f 91       	pop	r21
    2eba:	4f 91       	pop	r20
    2ebc:	3f 91       	pop	r19
    2ebe:	2f 91       	pop	r18
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	0f 90       	pop	r0
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	0f 90       	pop	r0
    2eca:	1f 90       	pop	r1
    2ecc:	18 95       	reti

00002ece <__udivmodhi4>:
    2ece:	aa 1b       	sub	r26, r26
    2ed0:	bb 1b       	sub	r27, r27
    2ed2:	51 e1       	ldi	r21, 0x11	; 17
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <__udivmodhi4_ep>

00002ed6 <__udivmodhi4_loop>:
    2ed6:	aa 1f       	adc	r26, r26
    2ed8:	bb 1f       	adc	r27, r27
    2eda:	a6 17       	cp	r26, r22
    2edc:	b7 07       	cpc	r27, r23
    2ede:	10 f0       	brcs	.+4      	; 0x2ee4 <__udivmodhi4_ep>
    2ee0:	a6 1b       	sub	r26, r22
    2ee2:	b7 0b       	sbc	r27, r23

00002ee4 <__udivmodhi4_ep>:
    2ee4:	88 1f       	adc	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	5a 95       	dec	r21
    2eea:	a9 f7       	brne	.-22     	; 0x2ed6 <__udivmodhi4_loop>
    2eec:	80 95       	com	r24
    2eee:	90 95       	com	r25
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	08 95       	ret

00002ef6 <__divmodhi4>:
    2ef6:	97 fb       	bst	r25, 7
    2ef8:	07 2e       	mov	r0, r23
    2efa:	16 f4       	brtc	.+4      	; 0x2f00 <__divmodhi4+0xa>
    2efc:	00 94       	com	r0
    2efe:	06 d0       	rcall	.+12     	; 0x2f0c <__divmodhi4_neg1>
    2f00:	77 fd       	sbrc	r23, 7
    2f02:	08 d0       	rcall	.+16     	; 0x2f14 <__divmodhi4_neg2>
    2f04:	e4 df       	rcall	.-56     	; 0x2ece <__udivmodhi4>
    2f06:	07 fc       	sbrc	r0, 7
    2f08:	05 d0       	rcall	.+10     	; 0x2f14 <__divmodhi4_neg2>
    2f0a:	3e f4       	brtc	.+14     	; 0x2f1a <__divmodhi4_exit>

00002f0c <__divmodhi4_neg1>:
    2f0c:	90 95       	com	r25
    2f0e:	81 95       	neg	r24
    2f10:	9f 4f       	sbci	r25, 0xFF	; 255
    2f12:	08 95       	ret

00002f14 <__divmodhi4_neg2>:
    2f14:	70 95       	com	r23
    2f16:	61 95       	neg	r22
    2f18:	7f 4f       	sbci	r23, 0xFF	; 255

00002f1a <__divmodhi4_exit>:
    2f1a:	08 95       	ret

00002f1c <__tablejump2__>:
    2f1c:	ee 0f       	add	r30, r30
    2f1e:	ff 1f       	adc	r31, r31
    2f20:	05 90       	lpm	r0, Z+
    2f22:	f4 91       	lpm	r31, Z
    2f24:	e0 2d       	mov	r30, r0
    2f26:	09 94       	ijmp

00002f28 <memcpy>:
    2f28:	fb 01       	movw	r30, r22
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <memcpy+0xa>
    2f2e:	01 90       	ld	r0, Z+
    2f30:	0d 92       	st	X+, r0
    2f32:	41 50       	subi	r20, 0x01	; 1
    2f34:	50 40       	sbci	r21, 0x00	; 0
    2f36:	d8 f7       	brcc	.-10     	; 0x2f2e <memcpy+0x6>
    2f38:	08 95       	ret

00002f3a <_exit>:
    2f3a:	f8 94       	cli

00002f3c <__stop_program>:
    2f3c:	ff cf       	rjmp	.-2      	; 0x2f3c <__stop_program>
