
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00002c86  00002d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b9a  008020b2  008020b2  00002dce  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002dce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  00002e40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a48c  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b50  00000000  00000000  0000d78c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008af8  00000000  00000000  0000f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab4  00000000  00000000  00017dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f65a  00000000  00000000  00018888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000235f  00000000  00000000  00047ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  0004a248  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b8df  00000000  00000000  0004a638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c1       	rjmp	.+616    	; 0x26a <__ctors_end>
       2:	00 00       	nop
       4:	4e c1       	rjmp	.+668    	; 0x2a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c1       	rjmp	.+664    	; 0x2a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c1       	rjmp	.+660    	; 0x2a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c1       	rjmp	.+656    	; 0x2a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c1       	rjmp	.+652    	; 0x2a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	00 c6       	rjmp	.+3072   	; 0xc1a <__vector_6>
      1a:	00 00       	nop
      1c:	36 c7       	rjmp	.+3692   	; 0xe8a <__vector_7>
      1e:	00 00       	nop
      20:	40 c1       	rjmp	.+640    	; 0x2a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	a1 c7       	rjmp	.+3906   	; 0xf68 <__vector_9>
      26:	00 00       	nop
      28:	3c c1       	rjmp	.+632    	; 0x2a2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c1       	rjmp	.+628    	; 0x2a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c1       	rjmp	.+624    	; 0x2a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c1       	rjmp	.+620    	; 0x2a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c1       	rjmp	.+616    	; 0x2a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c1       	rjmp	.+612    	; 0x2a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c1       	rjmp	.+608    	; 0x2a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c1       	rjmp	.+604    	; 0x2a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c1       	rjmp	.+600    	; 0x2a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2a c1       	rjmp	.+596    	; 0x2a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c1       	rjmp	.+592    	; 0x2a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c1       	rjmp	.+588    	; 0x2a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c1       	rjmp	.+584    	; 0x2a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c1       	rjmp	.+580    	; 0x2a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_24>
      64:	1e c1       	rjmp	.+572    	; 0x2a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	1c c1       	rjmp	.+568    	; 0x2a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1a c1       	rjmp	.+564    	; 0x2a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	18 c1       	rjmp	.+560    	; 0x2a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	16 c1       	rjmp	.+556    	; 0x2a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	14 c1       	rjmp	.+552    	; 0x2a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	12 c1       	rjmp	.+548    	; 0x2a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	10 c1       	rjmp	.+544    	; 0x2a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	0e c1       	rjmp	.+540    	; 0x2a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c c1       	rjmp	.+536    	; 0x2a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0a c1       	rjmp	.+532    	; 0x2a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	08 c1       	rjmp	.+528    	; 0x2a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	06 c1       	rjmp	.+524    	; 0x2a2 <__bad_interrupt>
      96:	00 00       	nop
      98:	04 c1       	rjmp	.+520    	; 0x2a2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	02 c1       	rjmp	.+516    	; 0x2a2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	00 c1       	rjmp	.+512    	; 0x2a2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	fe c0       	rjmp	.+508    	; 0x2a2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	fc c0       	rjmp	.+504    	; 0x2a2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	fa c0       	rjmp	.+500    	; 0x2a2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f8 c0       	rjmp	.+496    	; 0x2a2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f6 c0       	rjmp	.+492    	; 0x2a2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f4 c0       	rjmp	.+488    	; 0x2a2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f2 c0       	rjmp	.+484    	; 0x2a2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	f0 c0       	rjmp	.+480    	; 0x2a2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ee c0       	rjmp	.+476    	; 0x2a2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ec c0       	rjmp	.+472    	; 0x2a2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ea c0       	rjmp	.+468    	; 0x2a2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e8 c0       	rjmp	.+464    	; 0x2a2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e6 c0       	rjmp	.+460    	; 0x2a2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e4 c0       	rjmp	.+456    	; 0x2a2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e2 c0       	rjmp	.+452    	; 0x2a2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e0 c0       	rjmp	.+448    	; 0x2a2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	de c0       	rjmp	.+444    	; 0x2a2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	dc c0       	rjmp	.+440    	; 0x2a2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	da c0       	rjmp	.+436    	; 0x2a2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d8 c0       	rjmp	.+432    	; 0x2a2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d6 c0       	rjmp	.+428    	; 0x2a2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d4 c0       	rjmp	.+424    	; 0x2a2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d2 c0       	rjmp	.+420    	; 0x2a2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	d0 c0       	rjmp	.+416    	; 0x2a2 <__bad_interrupt>
     102:	00 00       	nop
     104:	ce c0       	rjmp	.+412    	; 0x2a2 <__bad_interrupt>
     106:	00 00       	nop
     108:	cc c0       	rjmp	.+408    	; 0x2a2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ca c0       	rjmp	.+404    	; 0x2a2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c8 c0       	rjmp	.+400    	; 0x2a2 <__bad_interrupt>
     112:	00 00       	nop
     114:	c6 c0       	rjmp	.+396    	; 0x2a2 <__bad_interrupt>
     116:	00 00       	nop
     118:	c4 c0       	rjmp	.+392    	; 0x2a2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	c2 c0       	rjmp	.+388    	; 0x2a2 <__bad_interrupt>
     11e:	00 00       	nop
     120:	c0 c0       	rjmp	.+384    	; 0x2a2 <__bad_interrupt>
     122:	00 00       	nop
     124:	be c0       	rjmp	.+380    	; 0x2a2 <__bad_interrupt>
     126:	00 00       	nop
     128:	bc c0       	rjmp	.+376    	; 0x2a2 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	ba c0       	rjmp	.+372    	; 0x2a2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b8 c0       	rjmp	.+368    	; 0x2a2 <__bad_interrupt>
     132:	00 00       	nop
     134:	b6 c0       	rjmp	.+364    	; 0x2a2 <__bad_interrupt>
     136:	00 00       	nop
     138:	b4 c0       	rjmp	.+360    	; 0x2a2 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	b2 c0       	rjmp	.+356    	; 0x2a2 <__bad_interrupt>
     13e:	00 00       	nop
     140:	b0 c0       	rjmp	.+352    	; 0x2a2 <__bad_interrupt>
     142:	00 00       	nop
     144:	ae c0       	rjmp	.+348    	; 0x2a2 <__bad_interrupt>
     146:	00 00       	nop
     148:	ac c0       	rjmp	.+344    	; 0x2a2 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	8d c7       	rjmp	.+3866   	; 0x1068 <__vector_83>
     14e:	00 00       	nop
     150:	a8 c0       	rjmp	.+336    	; 0x2a2 <__bad_interrupt>
     152:	00 00       	nop
     154:	a6 c0       	rjmp	.+332    	; 0x2a2 <__bad_interrupt>
     156:	00 00       	nop
     158:	a4 c0       	rjmp	.+328    	; 0x2a2 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	a2 c0       	rjmp	.+324    	; 0x2a2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	a0 c0       	rjmp	.+320    	; 0x2a2 <__bad_interrupt>
     162:	00 00       	nop
     164:	9e c0       	rjmp	.+316    	; 0x2a2 <__bad_interrupt>
     166:	00 00       	nop
     168:	9c c0       	rjmp	.+312    	; 0x2a2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	9a c0       	rjmp	.+308    	; 0x2a2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	98 c0       	rjmp	.+304    	; 0x2a2 <__bad_interrupt>
     172:	00 00       	nop
     174:	96 c0       	rjmp	.+300    	; 0x2a2 <__bad_interrupt>
     176:	00 00       	nop
     178:	94 c0       	rjmp	.+296    	; 0x2a2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	92 c0       	rjmp	.+292    	; 0x2a2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	90 c0       	rjmp	.+288    	; 0x2a2 <__bad_interrupt>
     182:	00 00       	nop
     184:	8e c0       	rjmp	.+284    	; 0x2a2 <__bad_interrupt>
     186:	00 00       	nop
     188:	8c c0       	rjmp	.+280    	; 0x2a2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	8a c0       	rjmp	.+276    	; 0x2a2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	88 c0       	rjmp	.+272    	; 0x2a2 <__bad_interrupt>
     192:	00 00       	nop
     194:	86 c0       	rjmp	.+268    	; 0x2a2 <__bad_interrupt>
     196:	00 00       	nop
     198:	84 c0       	rjmp	.+264    	; 0x2a2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	82 c0       	rjmp	.+260    	; 0x2a2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	80 c0       	rjmp	.+256    	; 0x2a2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	7c c0       	rjmp	.+248    	; 0x2a2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	7a c0       	rjmp	.+244    	; 0x2a2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	78 c0       	rjmp	.+240    	; 0x2a2 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	76 c0       	rjmp	.+236    	; 0x2a2 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	74 c0       	rjmp	.+232    	; 0x2a2 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	72 c0       	rjmp	.+228    	; 0x2a2 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	70 c0       	rjmp	.+224    	; 0x2a2 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6e c0       	rjmp	.+220    	; 0x2a2 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	6c c0       	rjmp	.+216    	; 0x2a2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	6a c0       	rjmp	.+212    	; 0x2a2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	68 c0       	rjmp	.+208    	; 0x2a2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	66 c0       	rjmp	.+204    	; 0x2a2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	64 c0       	rjmp	.+200    	; 0x2a2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	62 c0       	rjmp	.+196    	; 0x2a2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	60 c0       	rjmp	.+192    	; 0x2a2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5e c0       	rjmp	.+188    	; 0x2a2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	5c c0       	rjmp	.+184    	; 0x2a2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	5a c0       	rjmp	.+180    	; 0x2a2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	58 c0       	rjmp	.+176    	; 0x2a2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__vector_125>
     1f8:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__vector_126>
     1fc:	ce 01       	movw	r24, r28
     1fe:	d0 01       	movw	r26, r0
     200:	d2 01       	movw	r26, r4
     202:	d4 01       	movw	r26, r8
     204:	d6 01       	movw	r26, r12
     206:	db 01       	movw	r26, r22
     208:	d8 01       	movw	r26, r16
     20a:	da 01       	movw	r26, r20
     20c:	2b 06       	cpc	r2, r27
     20e:	52 06       	cpc	r5, r18
     210:	79 06       	cpc	r7, r25
     212:	a0 06       	cpc	r10, r16
     214:	c7 06       	cpc	r12, r23
     216:	37 07       	cpc	r19, r23
     218:	ee 06       	cpc	r14, r30
     21a:	13 07       	cpc	r17, r19
     21c:	59 0b       	sbc	r21, r25
     21e:	5b 0b       	sbc	r21, r27
     220:	99 0b       	sbc	r25, r25
     222:	d8 0b       	sbc	r29, r24
     224:	e1 0b       	sbc	r30, r17
     226:	e6 0b       	sbc	r30, r22
     228:	3b 0c       	add	r3, r11
     22a:	40 0c       	add	r4, r0
     22c:	87 0b       	sbc	r24, r23
     22e:	8a 0b       	sbc	r24, r26
     230:	8d 0b       	sbc	r24, r29
     232:	8f 0b       	sbc	r24, r31
     234:	91 0b       	sbc	r25, r17
     236:	93 0b       	sbc	r25, r19
     238:	95 0b       	sbc	r25, r21
     23a:	97 0b       	sbc	r25, r23
     23c:	c5 0b       	sbc	r28, r21
     23e:	c8 0b       	sbc	r28, r24
     240:	cb 0b       	sbc	r28, r27
     242:	ce 0b       	sbc	r28, r30
     244:	d0 0b       	sbc	r29, r16
     246:	d2 0b       	sbc	r29, r18
     248:	d4 0b       	sbc	r29, r20
     24a:	d6 0b       	sbc	r29, r22
     24c:	f2 0b       	sbc	r31, r18
     24e:	fd 0b       	sbc	r31, r29
     250:	08 0c       	add	r0, r8
     252:	17 0c       	add	r1, r7
     254:	1a 0c       	add	r1, r10
     256:	1c 0c       	add	r1, r12
     258:	26 0c       	add	r2, r6
     25a:	30 0c       	add	r3, r0
     25c:	b8 0f       	add	r27, r24
     25e:	bb 0f       	add	r27, r27
     260:	be 0f       	add	r27, r30
     262:	c1 0f       	add	r28, r17
     264:	c4 0f       	add	r28, r20
     266:	c7 0f       	add	r28, r23
     268:	ca 0f       	add	r28, r26

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	cd bf       	out	0x3d, r28	; 61
     272:	df e2       	ldi	r29, 0x2F	; 47
     274:	de bf       	out	0x3e, r29	; 62

00000276 <__do_copy_data>:
     276:	10 e2       	ldi	r17, 0x20	; 32
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b0 e2       	ldi	r27, 0x20	; 32
     27c:	e6 e8       	ldi	r30, 0x86	; 134
     27e:	fc e2       	ldi	r31, 0x2C	; 44
     280:	02 c0       	rjmp	.+4      	; 0x286 <__do_copy_data+0x10>
     282:	05 90       	lpm	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	a2 3b       	cpi	r26, 0xB2	; 178
     288:	b1 07       	cpc	r27, r17
     28a:	d9 f7       	brne	.-10     	; 0x282 <__do_copy_data+0xc>

0000028c <__do_clear_bss>:
     28c:	2c e2       	ldi	r18, 0x2C	; 44
     28e:	a2 eb       	ldi	r26, 0xB2	; 178
     290:	b0 e2       	ldi	r27, 0x20	; 32
     292:	01 c0       	rjmp	.+2      	; 0x296 <.do_clear_bss_start>

00000294 <.do_clear_bss_loop>:
     294:	1d 92       	st	X+, r1

00000296 <.do_clear_bss_start>:
     296:	ac 34       	cpi	r26, 0x4C	; 76
     298:	b2 07       	cpc	r27, r18
     29a:	e1 f7       	brne	.-8      	; 0x294 <.do_clear_bss_loop>
     29c:	41 d0       	rcall	.+130    	; 0x320 <main>
     29e:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <_exit>

000002a2 <__bad_interrupt>:
     2a2:	ae ce       	rjmp	.-676    	; 0x0 <__vectors>

000002a4 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     2a4:	e0 e8       	ldi	r30, 0x80	; 128
     2a6:	f6 e0       	ldi	r31, 0x06	; 6
     2a8:	8f e0       	ldi	r24, 0x0F	; 15
     2aa:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     2ac:	85 e0       	ldi	r24, 0x05	; 5
     2ae:	84 83       	std	Z+4, r24	; 0x04
     2b0:	08 95       	ret

000002b2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2b2:	08 95       	ret

000002b4 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     2b4:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     2b8:	2e ee       	ldi	r18, 0xEE	; 238
     2ba:	32 e0       	ldi	r19, 0x02	; 2
     2bc:	42 9f       	mul	r20, r18
     2be:	c0 01       	movw	r24, r0
     2c0:	43 9f       	mul	r20, r19
     2c2:	90 0d       	add	r25, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	4a e5       	ldi	r20, 0x5A	; 90
     2c8:	51 e0       	ldi	r21, 0x01	; 1
     2ca:	6a ef       	ldi	r22, 0xFA	; 250
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	86 59       	subi	r24, 0x96	; 150
     2d0:	99 4d       	sbci	r25, 0xD9	; 217
     2d2:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <udi_vendor_iso_in_run>
     2d6:	08 95       	ret

000002d8 <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2d8:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     2dc:	2e ee       	ldi	r18, 0xEE	; 238
     2de:	32 e0       	ldi	r19, 0x02	; 2
     2e0:	42 9f       	mul	r20, r18
     2e2:	c0 01       	movw	r24, r0
     2e4:	43 9f       	mul	r20, r19
     2e6:	90 0d       	add	r25, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	4c e6       	ldi	r20, 0x6C	; 108
     2ec:	51 e0       	ldi	r21, 0x01	; 1
     2ee:	6a ef       	ldi	r22, 0xFA	; 250
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	8c 59       	subi	r24, 0x9C	; 156
     2f4:	98 4d       	sbci	r25, 0xD8	; 216
     2f6:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <udi_vendor_iso_in_run2>
     2fa:	08 95       	ret

000002fc <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     2fc:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     300:	2e ee       	ldi	r18, 0xEE	; 238
     302:	32 e0       	ldi	r19, 0x02	; 2
     304:	42 9f       	mul	r20, r18
     306:	c0 01       	movw	r24, r0
     308:	43 9f       	mul	r20, r19
     30a:	90 0d       	add	r25, r0
     30c:	11 24       	eor	r1, r1
     30e:	4e e7       	ldi	r20, 0x7E	; 126
     310:	51 e0       	ldi	r21, 0x01	; 1
     312:	6a ef       	ldi	r22, 0xFA	; 250
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	82 5a       	subi	r24, 0xA2	; 162
     318:	97 4d       	sbci	r25, 0xD7	; 215
     31a:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <udi_vendor_iso_in_run3>
     31e:	08 95       	ret

00000320 <main>:
uint32_t debug_counter;

unsigned char tripleUsbSuccess = 0;

int main(void){
	irq_initialize_vectors();
     320:	87 e0       	ldi	r24, 0x07	; 7
     322:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     326:	78 94       	sei
	sysclk_init();
     328:	48 d7       	rcall	.+3728   	; 0x11ba <sysclk_init>
	board_init();
     32a:	c3 df       	rcall	.-122    	; 0x2b2 <board_init>
	udc_start();
     32c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <udc_start>
	tiny_dac_setup();
     330:	d4 d0       	rcall	.+424    	; 0x4da <tiny_dac_setup>
	tiny_dma_setup();
     332:	f7 d0       	rcall	.+494    	; 0x522 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	93 d0       	rcall	.+294    	; 0x460 <tiny_adc_setup>
	tiny_adc_pid_setup();
     33a:	7f d0       	rcall	.+254    	; 0x43a <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     33c:	8c e0       	ldi	r24, 0x0C	; 12
     33e:	73 d0       	rcall	.+230    	; 0x426 <tiny_adc_ch1setup>
	tiny_timer_setup();
     340:	58 d6       	rcall	.+3248   	; 0xff2 <tiny_timer_setup>
	tiny_uart_setup();
     342:	09 d7       	rcall	.+3602   	; 0x1156 <tiny_uart_setup>
	tiny_spi_setup();
     344:	20 d7       	rcall	.+3648   	; 0x1186 <tiny_spi_setup>
	tiny_dig_setup();
     346:	ae df       	rcall	.-164    	; 0x2a4 <tiny_dig_setup>
     348:	50 91 56 22 	lds	r21, 0x2256	; 0x802256 <debug_counter>
     34c:	40 91 57 22 	lds	r20, 0x2257	; 0x802257 <debug_counter+0x1>
     350:	30 91 58 22 	lds	r19, 0x2258	; 0x802258 <debug_counter+0x2>
     354:	20 91 59 22 	lds	r18, 0x2259	; 0x802259 <debug_counter+0x3>

uint32_t debug_counter;

unsigned char tripleUsbSuccess = 0;

int main(void){
     358:	85 2f       	mov	r24, r21
     35a:	94 2f       	mov	r25, r20
     35c:	a3 2f       	mov	r26, r19
     35e:	b2 2f       	mov	r27, r18
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	a1 1d       	adc	r26, r1
     364:	b1 1d       	adc	r27, r1
	//asm("nop");
	
	while (true) {
		debug_counter++;
		if(debug_counter > 100000000){
			debug_counter = 0;
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	20 e0       	ldi	r18, 0x00	; 0
	//USARTC0.DATA = 0x55;
	//asm("nop");
	
	while (true) {
		debug_counter++;
		if(debug_counter > 100000000){
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	61 ee       	ldi	r22, 0xE1	; 225
     372:	96 07       	cpc	r25, r22
     374:	65 ef       	ldi	r22, 0xF5	; 245
     376:	a6 07       	cpc	r26, r22
     378:	65 e0       	ldi	r22, 0x05	; 5
     37a:	b6 07       	cpc	r27, r22
     37c:	88 f3       	brcs	.-30     	; 0x360 <main+0x40>
     37e:	ec cf       	rjmp	.-40     	; 0x358 <main+0x38>

00000380 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     380:	08 95       	ret

00000382 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     382:	08 95       	ret

00000384 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	switch(global_mode){
     384:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
     388:	8e 2f       	mov	r24, r30
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	88 30       	cpi	r24, 0x08	; 8
     38e:	91 05       	cpc	r25, r1
     390:	90 f4       	brcc	.+36     	; 0x3b6 <main_sof_action+0x32>
     392:	fc 01       	movw	r30, r24
     394:	e2 50       	subi	r30, 0x02	; 2
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
		case 0:
			tiny_dma_loop_mode_0();
     39c:	4e d1       	rcall	.+668    	; 0x63a <tiny_dma_loop_mode_0>
			break;
     39e:	0b c0       	rjmp	.+22     	; 0x3b6 <main_sof_action+0x32>
		case 1:
			tiny_dma_loop_mode_1();
     3a0:	c5 d1       	rcall	.+906    	; 0x72c <tiny_dma_loop_mode_1>
			break;
     3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <main_sof_action+0x32>
		case 2:
			tiny_dma_loop_mode_2();
     3a4:	37 d2       	rcall	.+1134   	; 0x814 <tiny_dma_loop_mode_2>
			break;
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <main_sof_action+0x32>
		case 3:
			tiny_dma_loop_mode_3();
     3a8:	b2 d2       	rcall	.+1380   	; 0x90e <tiny_dma_loop_mode_3>
			break;
     3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <main_sof_action+0x32>
		case 4:
			tiny_dma_loop_mode_4();
     3ac:	27 d3       	rcall	.+1614   	; 0x9fc <tiny_dma_loop_mode_4>
			break;
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <main_sof_action+0x32>
		case 6:
			tiny_dma_loop_mode_6();
     3b0:	d0 d3       	rcall	.+1952   	; 0xb52 <tiny_dma_loop_mode_6>
			break;
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <main_sof_action+0x32>
		case 7:
			tiny_dma_loop_mode_7();
     3b4:	31 d4       	rcall	.+2146   	; 0xc18 <tiny_dma_loop_mode_7>
		break;
		default:
			break;
	}
		usb_state = !b1_state;
     3b6:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	91 11       	cpse	r25, r1
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <usb_state>
     3c4:	08 95       	ret

000003c6 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <main_b_vendor_enable>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     3cc:	4a e5       	ldi	r20, 0x5A	; 90
     3ce:	51 e0       	ldi	r21, 0x01	; 1
     3d0:	6e ee       	ldi	r22, 0xEE	; 238
     3d2:	72 e0       	ldi	r23, 0x02	; 2
     3d4:	8a e6       	ldi	r24, 0x6A	; 106
     3d6:	96 e2       	ldi	r25, 0x26	; 38
     3d8:	dd d7       	rcall	.+4026   	; 0x1394 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     3da:	4c e6       	ldi	r20, 0x6C	; 108
     3dc:	51 e0       	ldi	r21, 0x01	; 1
     3de:	6e ee       	ldi	r22, 0xEE	; 238
     3e0:	72 e0       	ldi	r23, 0x02	; 2
     3e2:	84 e6       	ldi	r24, 0x64	; 100
     3e4:	97 e2       	ldi	r25, 0x27	; 39
     3e6:	e2 d7       	rcall	.+4036   	; 0x13ac <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     3e8:	4e e7       	ldi	r20, 0x7E	; 126
     3ea:	51 e0       	ldi	r21, 0x01	; 1
     3ec:	6e ee       	ldi	r22, 0xEE	; 238
     3ee:	72 e0       	ldi	r23, 0x02	; 2
     3f0:	8e e5       	ldi	r24, 0x5E	; 94
     3f2:	98 e2       	ldi	r25, 0x28	; 40
     3f4:	e7 d7       	rcall	.+4046   	; 0x13c4 <udi_vendor_iso_in_run3>
	return true;
}
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	08 95       	ret

000003fa <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     3fa:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <main_b_vendor_enable>
     3fe:	08 95       	ret

00000400 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	08 95       	ret

00000404 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	08 95       	ret

00000408 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     408:	e0 e0       	ldi	r30, 0x00	; 0
     40a:	f2 e0       	ldi	r31, 0x02	; 2
     40c:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     40e:	98 2f       	mov	r25, r24
     410:	9c 71       	andi	r25, 0x1C	; 28
     412:	93 68       	ori	r25, 0x83	; 131
     414:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     416:	88 1f       	adc	r24, r24
     418:	88 27       	eor	r24, r24
     41a:	88 1f       	adc	r24, r24
     41c:	88 0f       	add	r24, r24
     41e:	81 a3       	std	Z+33, r24	; 0x21
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     420:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     422:	16 a2       	std	Z+38, r1	; 0x26
     424:	08 95       	ret

00000426 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     426:	e0 e0       	ldi	r30, 0x00	; 0
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     42c:	83 68       	ori	r24, 0x83	; 131
     42e:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     430:	80 e1       	ldi	r24, 0x10	; 16
     432:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     434:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     436:	16 aa       	std	Z+54, r1	; 0x36
     438:	08 95       	ret

0000043a <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     43a:	e0 e0       	ldi	r30, 0x00	; 0
     43c:	f2 e0       	ldi	r31, 0x02	; 2
     43e:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     440:	83 e8       	ldi	r24, 0x83	; 131
     442:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     444:	8f e2       	ldi	r24, 0x2F	; 47
     446:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     448:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     44a:	16 a6       	std	Z+46, r1	; 0x2e
     44c:	08 95       	ret

0000044e <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     44e:	aa ec       	ldi	r26, 0xCA	; 202
     450:	b1 e0       	ldi	r27, 0x01	; 1
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     456:	e8 2f       	mov	r30, r24
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     45c:	1c 92       	st	X, r1

	return( result );
     45e:	08 95       	ret

00000460 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     464:	e0 e7       	ldi	r30, 0x70	; 112
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	91 81       	ldd	r25, Z+1	; 0x01
     46a:	9d 7f       	andi	r25, 0xFD	; 253
     46c:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     46e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     472:	62 30       	cpi	r22, 0x02	; 2
     474:	31 f1       	breq	.+76     	; 0x4c2 <tiny_adc_setup+0x62>
     476:	e0 e0       	ldi	r30, 0x00	; 0
     478:	f2 e0       	ldi	r31, 0x02	; 2
     47a:	9c e1       	ldi	r25, 0x1C	; 28
     47c:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     47e:	90 e4       	ldi	r25, 0x40	; 64
     480:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     482:	81 11       	cpse	r24, r1
     484:	02 c0       	rjmp	.+4      	; 0x48a <tiny_adc_setup+0x2a>
     486:	80 e4       	ldi	r24, 0x40	; 64
     488:	01 c0       	rjmp	.+2      	; 0x48c <tiny_adc_setup+0x2c>
     48a:	80 ec       	ldi	r24, 0xC0	; 192
     48c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     490:	61 30       	cpi	r22, 0x01	; 1
     492:	11 f0       	breq	.+4      	; 0x498 <tiny_adc_setup+0x38>
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	01 c0       	rjmp	.+2      	; 0x49a <tiny_adc_setup+0x3a>
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d2 e0       	ldi	r29, 0x02	; 2
     49e:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     4a0:	80 e2       	ldi	r24, 0x20	; 32
     4a2:	d5 df       	rcall	.-86     	; 0x44e <ReadCalibrationByte>
     4a4:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     4a6:	81 e2       	ldi	r24, 0x21	; 33
     4a8:	d2 df       	rcall	.-92     	; 0x44e <ReadCalibrationByte>
     4aa:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     4ac:	18 8e       	std	Y+24, r1	; 0x18
     4ae:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     4b4:	c2 df       	rcall	.-124    	; 0x43a <tiny_adc_pid_setup>
     4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4b8:	80 ec       	ldi	r24, 0xC0	; 192
     4ba:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	ec cf       	rjmp	.-40     	; 0x49a <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     4c2:	e0 e0       	ldi	r30, 0x00	; 0
     4c4:	f2 e0       	ldi	r31, 0x02	; 2
     4c6:	9e e1       	ldi	r25, 0x1E	; 30
     4c8:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     4ca:	90 e4       	ldi	r25, 0x40	; 64
     4cc:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4ce:	81 11       	cpse	r24, r1
     4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <tiny_adc_setup+0x58>
     4d2:	d9 cf       	rjmp	.-78     	; 0x486 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     4de:	e0 e7       	ldi	r30, 0x70	; 112
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	82 81       	ldd	r24, Z+2	; 0x02
     4e4:	8b 7f       	andi	r24, 0xFB	; 251
     4e6:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     4e8:	c0 e2       	ldi	r28, 0x20	; 32
     4ea:	d3 e0       	ldi	r29, 0x03	; 3
     4ec:	8d e0       	ldi	r24, 0x0D	; 13
     4ee:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     4f0:	80 e4       	ldi	r24, 0x40	; 64
     4f2:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     4f4:	89 e0       	ldi	r24, 0x09	; 9
     4f6:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     4f8:	83 e3       	ldi	r24, 0x33	; 51
     4fa:	a9 df       	rcall	.-174    	; 0x44e <ReadCalibrationByte>
     4fc:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     4fe:	82 e3       	ldi	r24, 0x32	; 50
     500:	a6 df       	rcall	.-180    	; 0x44e <ReadCalibrationByte>
     502:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     504:	87 e3       	ldi	r24, 0x37	; 55
     506:	a3 df       	rcall	.-186    	; 0x44e <ReadCalibrationByte>
     508:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     50a:	86 e3       	ldi	r24, 0x36	; 54
     50c:	a0 df       	rcall	.-192    	; 0x44e <ReadCalibrationByte>
     50e:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     510:	e0 e2       	ldi	r30, 0x20	; 32
     512:	f6 e0       	ldi	r31, 0x06	; 6
     514:	80 81       	ld	r24, Z
     516:	83 60       	ori	r24, 0x03	; 3
     518:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     51a:	14 82       	std	Z+4, r1	; 0x04
	
	

     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <tiny_dma_setup>:
#include "globals.h"


void tiny_dma_setup(void){
	//Turn on DMA
	PR.PRGEN &=0b111111110; //Turn on DMA clk
     522:	e0 e7       	ldi	r30, 0x70	; 112
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm | DMA_PRIMODE_RR0123_gc;
     52c:	80 e8       	ldi	r24, 0x80	; 128
     52e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     532:	08 95       	ret

00000534 <tiny_dma_flush>:
}
void tiny_dma_flush(void){
	DMA.CH0.CTRLA = 0x00;
     534:	e0 e0       	ldi	r30, 0x00	; 0
     536:	f1 e0       	ldi	r31, 0x01	; 1
     538:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     53a:	80 e4       	ldi	r24, 0x40	; 64
     53c:	80 8b       	std	Z+16, r24	; 0x10

	DMA.CH1.CTRLA = 0x00;
     53e:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     540:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH2.CTRLA = 0x00;
     542:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     544:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.CTRLA = 0x00;
     546:	e0 e4       	ldi	r30, 0x40	; 64
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	10 82       	st	Z, r1
	DMA.CH3.CTRLA = DMA_CH_RESET_bm;
     54c:	80 83       	st	Z, r24
	
	b1_state = 0;
     54e:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <b1_state>
     552:	08 95       	ret

00000554 <tiny_dma_set_mode_0>:
}
void tiny_dma_set_mode_0(void){
	
	global_mode = 0;
     554:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     558:	ed df       	rcall	.-38     	; 0x534 <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     560:	94 e2       	ldi	r25, 0x24	; 36
     562:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     564:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     566:	49 e5       	ldi	r20, 0x59	; 89
     568:	42 ab       	std	Z+50, r20	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     56a:	32 e0       	ldi	r19, 0x02	; 2
     56c:	33 ab       	std	Z+51, r19	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     56e:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     572:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     576:	64 ab       	std	Z+52, r22	; 0x34
     578:	75 ab       	std	Z+53, r23	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     57a:	6a e6       	ldi	r22, 0x6A	; 106
     57c:	74 e2       	ldi	r23, 0x24	; 36
     57e:	60 af       	std	Z+56, r22	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     580:	71 af       	std	Z+57, r23	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     582:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     584:	8b e3       	ldi	r24, 0x3B	; 59
     586:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     58e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     592:	20 a9       	ldd	r18, Z+48	; 0x30
     594:	20 68       	ori	r18, 0x80	; 128
     596:	20 ab       	std	Z+48, r18	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     598:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     59c:	a0 e4       	ldi	r26, 0x40	; 64
     59e:	b1 e0       	ldi	r27, 0x01	; 1
     5a0:	9c 93       	st	X, r25
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     5a2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     5a6:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     5aa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     5ae:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     5b2:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     5b6:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     5ba:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     5be:	4a e5       	ldi	r20, 0x5A	; 90
     5c0:	52 e2       	ldi	r21, 0x22	; 34
     5c2:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     5c6:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     5ca:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     5ce:	29 e3       	ldi	r18, 0x39	; 57
     5d0:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     5d4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     5d8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     5dc:	2c 91       	ld	r18, X
     5de:	20 68       	ori	r18, 0x80	; 128
     5e0:	2c 93       	st	X, r18
	
	DMA.CH0.CTRLA = 0x00;
     5e2:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     5e4:	20 e4       	ldi	r18, 0x40	; 64
     5e6:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     5e8:	24 e0       	ldi	r18, 0x04	; 4
     5ea:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
     5ec:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     5ee:	81 e9       	ldi	r24, 0x91	; 145
     5f0:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     5f2:	80 e1       	ldi	r24, 0x10	; 16
     5f4:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     5f6:	47 e7       	ldi	r20, 0x77	; 119
     5f8:	51 e0       	ldi	r21, 0x01	; 1
     5fa:	44 8b       	std	Z+20, r20	; 0x14
     5fc:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     5fe:	90 8f       	std	Z+24, r25	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     600:	31 8f       	std	Z+25, r19	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     602:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     604:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     608:	2e ee       	ldi	r18, 0xEE	; 238
     60a:	32 e0       	ldi	r19, 0x02	; 2
     60c:	42 9f       	mul	r20, r18
     60e:	c0 01       	movw	r24, r0
     610:	43 9f       	mul	r20, r19
     612:	90 0d       	add	r25, r0
     614:	11 24       	eor	r1, r1
     616:	86 59       	subi	r24, 0x96	; 150
     618:	99 4d       	sbci	r25, 0xD9	; 217
     61a:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     61c:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     620:	42 9f       	mul	r20, r18
     622:	c0 01       	movw	r24, r0
     624:	43 9f       	mul	r20, r19
     626:	90 0d       	add	r25, r0
     628:	11 24       	eor	r1, r1
     62a:	86 59       	subi	r24, 0x96	; 150
     62c:	99 4d       	sbci	r25, 0xD9	; 217
     62e:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     630:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     632:	80 89       	ldd	r24, Z+16	; 0x10
     634:	80 68       	ori	r24, 0x80	; 128
     636:	80 8b       	std	Z+16, r24	; 0x10
     638:	08 95       	ret

0000063a <tiny_dma_loop_mode_0>:
}

void tiny_dma_loop_mode_0(void){
     63a:	08 95       	ret

0000063c <tiny_dma_set_mode_1>:
	return;
}

void tiny_dma_set_mode_1(void){
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
	
	global_mode = 1;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     646:	76 df       	rcall	.-276    	; 0x534 <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH2.CTRLA = 0x00;
     648:	e0 e0       	ldi	r30, 0x00	; 0
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     64e:	80 e4       	ldi	r24, 0x40	; 64
     650:	80 ab       	std	Z+48, r24	; 0x30
		
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     652:	94 e0       	ldi	r25, 0x04	; 4
     654:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00;  //No int
     656:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     658:	12 aa       	std	Z+50, r1	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     65a:	5b e4       	ldi	r21, 0x4B	; 75
     65c:	53 ab       	std	Z+51, r21	; 0x33
	DMA.CH2.TRFCNT = 0;
     65e:	14 aa       	std	Z+52, r1	; 0x34
     660:	15 aa       	std	Z+53, r1	; 0x35
	DMA.CH2.REPCNT = 0;
     662:	16 aa       	std	Z+54, r1	; 0x36
		
	DMA.CH2.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e2       	ldi	r19, 0x20	; 32
     668:	20 af       	std	Z+56, r18	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     66a:	31 af       	std	Z+57, r19	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     66c:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     66e:	40 ea       	ldi	r20, 0xA0	; 160
     670:	44 af       	std	Z+60, r20	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     672:	38 e0       	ldi	r19, 0x08	; 8
     674:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     678:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     67c:	80 a9       	ldd	r24, Z+48	; 0x30
     67e:	80 6a       	ori	r24, 0xA0	; 160
     680:	80 ab       	std	Z+48, r24	; 0x30
		
	USARTC0.DATA = 0x55;
     682:	85 e5       	ldi	r24, 0x55	; 85
     684:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>

	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     688:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     68c:	a0 e4       	ldi	r26, 0x40	; 64
     68e:	b1 e0       	ldi	r27, 0x01	; 1
     690:	c4 e2       	ldi	r28, 0x24	; 36
     692:	cc 93       	st	X, r28
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     694:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     698:	89 e5       	ldi	r24, 0x59	; 89
     69a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     6a4:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     6a8:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     6ac:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     6b0:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     6b4:	6a e6       	ldi	r22, 0x6A	; 106
     6b6:	74 e2       	ldi	r23, 0x24	; 36
     6b8:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     6bc:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     6c0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     6c4:	2b e3       	ldi	r18, 0x3B	; 59
     6c6:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     6d0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     6d4:	2c 91       	ld	r18, X
     6d6:	20 68       	ori	r18, 0x80	; 128
     6d8:	2c 93       	st	X, r18
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     6da:	90 8b       	std	Z+16, r25	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
     6dc:	61 8b       	std	Z+17, r22	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     6de:	a1 e9       	ldi	r26, 0x91	; 145
     6e0:	a2 8b       	std	Z+18, r26	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     6e2:	20 e1       	ldi	r18, 0x10	; 16
     6e4:	23 8b       	std	Z+19, r18	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     6e6:	67 e7       	ldi	r22, 0x77	; 119
     6e8:	71 e0       	ldi	r23, 0x01	; 1
     6ea:	64 8b       	std	Z+20, r22	; 0x14
     6ec:	75 8b       	std	Z+21, r23	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     6ee:	c0 8f       	std	Z+24, r28	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     6f0:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     6f2:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     6f4:	ca e6       	ldi	r28, 0x6A	; 106
     6f6:	d6 e2       	ldi	r29, 0x26	; 38
     6f8:	c4 8f       	std	Z+28, r28	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     6fa:	d5 8f       	std	Z+29, r29	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     6fc:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     6fe:	20 89       	ldd	r18, Z+16	; 0x10
     700:	20 68       	ori	r18, 0x80	; 128
     702:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     704:	90 a3       	std	Z+32, r25	; 0x20
	DMA.CH1.CTRLB = 0x02; //Hi interrupt
     706:	81 a3       	std	Z+33, r24	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     708:	a2 a3       	std	Z+34, r26	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     70a:	53 a3       	std	Z+35, r21	; 0x23
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     70c:	64 a3       	std	Z+36, r22	; 0x24
     70e:	75 a3       	std	Z+37, r23	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     710:	40 a7       	std	Z+40, r20	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     712:	31 a7       	std	Z+41, r19	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     714:	12 a6       	std	Z+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     716:	81 ee       	ldi	r24, 0xE1	; 225
     718:	97 e2       	ldi	r25, 0x27	; 39
     71a:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 8) & 0xFF;
     71c:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     71e:	16 a6       	std	Z+46, r1	; 0x2e
		
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     720:	80 a1       	ldd	r24, Z+32	; 0x20
     722:	80 68       	ori	r24, 0x80	; 128
     724:	80 a3       	std	Z+32, r24	; 0x20
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <tiny_dma_loop_mode_1>:

void tiny_dma_loop_mode_1(void){
     72c:	08 95       	ret

0000072e <tiny_dma_set_mode_2>:
	return;
}

void tiny_dma_set_mode_2(void){
     72e:	cf 93       	push	r28
	
	global_mode = 2;
     730:	c2 e0       	ldi	r28, 0x02	; 2
     732:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     736:	fe de       	rcall	.-516    	; 0x534 <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     738:	e0 e0       	ldi	r30, 0x00	; 0
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     73e:	94 e2       	ldi	r25, 0x24	; 36
     740:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     742:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     744:	39 e5       	ldi	r19, 0x59	; 89
     746:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     748:	83 e0       	ldi	r24, 0x03	; 3
     74a:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     74c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     750:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     754:	44 ab       	std	Z+52, r20	; 0x34
     756:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     758:	4a e5       	ldi	r20, 0x5A	; 90
     75a:	52 e2       	ldi	r21, 0x22	; 34
     75c:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     75e:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     760:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     762:	29 e3       	ldi	r18, 0x39	; 57
     764:	24 af       	std	Z+60, r18	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     766:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     76a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     76e:	20 a9       	ldd	r18, Z+48	; 0x30
     770:	20 68       	ori	r18, 0x80	; 128
     772:	20 ab       	std	Z+48, r18	; 0x30

	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     774:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     778:	a0 e4       	ldi	r26, 0x40	; 64
     77a:	b1 e0       	ldi	r27, 0x01	; 1
     77c:	9c 93       	st	X, r25
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     77e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     782:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     786:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     78a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     78e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     792:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     796:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     79a:	2a e6       	ldi	r18, 0x6A	; 106
     79c:	34 e2       	ldi	r19, 0x24	; 36
     79e:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     7a2:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     7a6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     7aa:	2b e3       	ldi	r18, 0x3B	; 59
     7ac:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     7b0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     7b4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     7b8:	2c 91       	ld	r18, X
     7ba:	20 68       	ori	r18, 0x80	; 128
     7bc:	2c 93       	st	X, r18
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     7be:	54 e0       	ldi	r21, 0x04	; 4
     7c0:	50 8b       	std	Z+16, r21	; 0x10
	DMA.CH0.CTRLB = 0x03; //No interrupt!
     7c2:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     7c4:	41 e9       	ldi	r20, 0x91	; 145
     7c6:	42 8b       	std	Z+18, r20	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     7c8:	80 e1       	ldi	r24, 0x10	; 16
     7ca:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     7cc:	27 e7       	ldi	r18, 0x77	; 119
     7ce:	31 e0       	ldi	r19, 0x01	; 1
     7d0:	24 8b       	std	Z+20, r18	; 0x14
     7d2:	35 8b       	std	Z+21, r19	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     7d4:	90 8f       	std	Z+24, r25	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     7d6:	c1 8f       	std	Z+25, r28	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     7d8:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     7da:	8a e6       	ldi	r24, 0x6A	; 106
     7dc:	96 e2       	ldi	r25, 0x26	; 38
     7de:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     7e0:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     7e2:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     7e4:	80 89       	ldd	r24, Z+16	; 0x10
     7e6:	80 68       	ori	r24, 0x80	; 128
     7e8:	80 8b       	std	Z+16, r24	; 0x10
			
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     7ea:	50 a3       	std	Z+32, r21	; 0x20
	DMA.CH1.CTRLB = 0x02; //No interrupt!
     7ec:	c1 a3       	std	Z+33, r28	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     7ee:	42 a3       	std	Z+34, r20	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH2_gc;	//Triggered from ADCA channel 0
     7f0:	82 e1       	ldi	r24, 0x12	; 18
     7f2:	83 a3       	std	Z+35, r24	; 0x23
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     7f4:	24 a3       	std	Z+36, r18	; 0x24
     7f6:	35 a3       	std	Z+37, r19	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &ADCA.CH2.RESL) >> 0) & 0xFF; //Source address is ADC
     7f8:	84 e3       	ldi	r24, 0x34	; 52
     7fa:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &ADCA.CH2.RESL) >> 8) & 0xFF;
     7fc:	c1 a7       	std	Z+41, r28	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     7fe:	12 a6       	std	Z+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     800:	81 ee       	ldi	r24, 0xE1	; 225
     802:	97 e2       	ldi	r25, 0x27	; 39
     804:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 8) & 0xFF;
     806:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     808:	16 a6       	std	Z+46, r1	; 0x2e
		
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     80a:	80 a1       	ldd	r24, Z+32	; 0x20
     80c:	80 68       	ori	r24, 0x80	; 128
     80e:	80 a3       	std	Z+32, r24	; 0x20
}
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <tiny_dma_loop_mode_2>:

void tiny_dma_loop_mode_2(void){
     814:	08 95       	ret

00000816 <tiny_dma_set_mode_3>:
	return;
}



void tiny_dma_set_mode_3(void){
     816:	cf 93       	push	r28
	
	global_mode = 3;
     818:	c3 e0       	ldi	r28, 0x03	; 3
     81a:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
		
	tiny_dma_flush();	
     81e:	8a de       	rcall	.-748    	; 0x534 <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     820:	e0 e0       	ldi	r30, 0x00	; 0
     822:	f1 e0       	ldi	r31, 0x01	; 1
     824:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	50 a3       	std	Z+32, r21	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     82a:	44 e0       	ldi	r20, 0x04	; 4
     82c:	40 a3       	std	Z+32, r20	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     82e:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     830:	12 a2       	std	Z+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     832:	3b e4       	ldi	r19, 0x4B	; 75
     834:	33 a3       	std	Z+35, r19	; 0x23
	DMA.CH1.TRFCNT = 0;
     836:	14 a2       	std	Z+36, r1	; 0x24
     838:	15 a2       	std	Z+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     83a:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e2       	ldi	r25, 0x20	; 32
     840:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     842:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     844:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     846:	20 ea       	ldi	r18, 0xA0	; 160
     848:	24 a7       	std	Z+44, r18	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     84a:	98 e0       	ldi	r25, 0x08	; 8
     84c:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     84e:	16 a6       	std	Z+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     850:	80 a1       	ldd	r24, Z+32	; 0x20
     852:	80 6a       	ori	r24, 0xA0	; 160
     854:	80 a3       	std	Z+32, r24	; 0x20
	
	USARTC0.DATA = 0x55;
     856:	85 e5       	ldi	r24, 0x55	; 85
     858:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     85c:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     85e:	74 e2       	ldi	r23, 0x24	; 36
     860:	70 ab       	std	Z+48, r23	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     862:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     864:	69 e5       	ldi	r22, 0x59	; 89
     866:	62 ab       	std	Z+50, r22	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     86c:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <auxDacBufLen>
     870:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     874:	a4 ab       	std	Z+52, r26	; 0x34
     876:	b5 ab       	std	Z+53, r27	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     878:	aa e6       	ldi	r26, 0x6A	; 106
     87a:	b4 e2       	ldi	r27, 0x24	; 36
     87c:	a0 af       	std	Z+56, r26	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     87e:	b1 af       	std	Z+57, r27	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     880:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     882:	8b e3       	ldi	r24, 0x3B	; 59
     884:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     886:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     88a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     88e:	80 a9       	ldd	r24, Z+48	; 0x30
     890:	80 68       	ori	r24, 0x80	; 128
     892:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     894:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     898:	a0 e4       	ldi	r26, 0x40	; 64
     89a:	b1 e0       	ldi	r27, 0x01	; 1
     89c:	7c 93       	st	X, r23
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     89e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     8a2:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     8a6:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     8aa:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <dacBuf_len>
     8ae:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <dacBuf_len+0x1>
     8b2:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     8b6:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     8ba:	6a e5       	ldi	r22, 0x5A	; 90
     8bc:	72 e2       	ldi	r23, 0x22	; 34
     8be:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     8c2:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     8c6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     8ca:	89 e3       	ldi	r24, 0x39	; 57
     8cc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     8d0:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     8d4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     8d8:	8c 91       	ld	r24, X
     8da:	80 68       	ori	r24, 0x80	; 128
     8dc:	8c 93       	st	X, r24
	
	//Actual data being transferred
	DMA.CH0.CTRLA = 0x00;
     8de:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     8e0:	50 8b       	std	Z+16, r21	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     8e2:	40 8b       	std	Z+16, r20	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt
     8e4:	c1 8b       	std	Z+17, r28	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     8e6:	81 e9       	ldi	r24, 0x91	; 145
     8e8:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     8ea:	33 8b       	std	Z+19, r19	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     8ec:	47 e7       	ldi	r20, 0x77	; 119
     8ee:	51 e0       	ldi	r21, 0x01	; 1
     8f0:	44 8b       	std	Z+20, r20	; 0x14
     8f2:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     8f4:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     8f6:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     8f8:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     8fa:	8a e6       	ldi	r24, 0x6A	; 106
     8fc:	96 e2       	ldi	r25, 0x26	; 38
     8fe:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     900:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     902:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     904:	80 89       	ldd	r24, Z+16	; 0x10
     906:	80 68       	ori	r24, 0x80	; 128
     908:	80 8b       	std	Z+16, r24	; 0x10


}
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <tiny_dma_loop_mode_3>:

void tiny_dma_loop_mode_3(void){
     90e:	08 95       	ret

00000910 <tiny_dma_set_mode_4>:
	return;
}

void tiny_dma_set_mode_4(void){
     910:	cf 93       	push	r28
	
	global_mode = 4;
     912:	c4 e0       	ldi	r28, 0x04	; 4
     914:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     918:	0d de       	rcall	.-998    	; 0x534 <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     91a:	e0 e0       	ldi	r30, 0x00	; 0
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     920:	20 e4       	ldi	r18, 0x40	; 64
     922:	20 a3       	std	Z+32, r18	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     924:	c0 a3       	std	Z+32, r28	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     926:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     928:	12 a2       	std	Z+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     92a:	4b e4       	ldi	r20, 0x4B	; 75
     92c:	43 a3       	std	Z+35, r20	; 0x23
	DMA.CH1.TRFCNT = 0;
     92e:	14 a2       	std	Z+36, r1	; 0x24
     930:	15 a2       	std	Z+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     932:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e2       	ldi	r25, 0x20	; 32
     938:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     93a:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     93c:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     93e:	70 ea       	ldi	r23, 0xA0	; 160
     940:	74 a7       	std	Z+44, r23	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	85 a7       	std	Z+45, r24	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     946:	16 a6       	std	Z+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     948:	90 a1       	ldd	r25, Z+32	; 0x20
     94a:	90 6a       	ori	r25, 0xA0	; 160
     94c:	90 a3       	std	Z+32, r25	; 0x20
		
	DMA.CH2.REPCNT = 0; //Repeat forever!
     94e:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     950:	94 e2       	ldi	r25, 0x24	; 36
     952:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     954:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     956:	99 e5       	ldi	r25, 0x59	; 89
     958:	92 ab       	std	Z+50, r25	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	93 ab       	std	Z+51, r25	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     95e:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <auxDacBufLen>
     962:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     966:	a4 ab       	std	Z+52, r26	; 0x34
     968:	b5 ab       	std	Z+53, r27	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     96a:	aa e6       	ldi	r26, 0x6A	; 106
     96c:	b4 e2       	ldi	r27, 0x24	; 36
     96e:	a0 af       	std	Z+56, r26	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     970:	b1 af       	std	Z+57, r27	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     972:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     974:	9b e3       	ldi	r25, 0x3B	; 59
     976:	94 af       	std	Z+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     97e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     982:	30 a9       	ldd	r19, Z+48	; 0x30
     984:	30 68       	ori	r19, 0x80	; 128
     986:	30 ab       	std	Z+48, r19	; 0x30
	
	//Actual data being transferred
	DMA.CH0.CTRLA = 0x00;
     988:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     98a:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     98c:	c0 8b       	std	Z+16, r28	; 0x10
	DMA.CH0.CTRLB = 0x03; //No interrupt
     98e:	91 8b       	std	Z+17, r25	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     990:	61 e9       	ldi	r22, 0x91	; 145
     992:	62 8b       	std	Z+18, r22	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     994:	43 8b       	std	Z+19, r20	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     996:	47 e7       	ldi	r20, 0x77	; 119
     998:	51 e0       	ldi	r21, 0x01	; 1
     99a:	44 8b       	std	Z+20, r20	; 0x14
     99c:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     99e:	70 8f       	std	Z+24, r23	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     9a0:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     9a2:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     9a4:	aa e6       	ldi	r26, 0x6A	; 106
     9a6:	b6 e2       	ldi	r27, 0x26	; 38
     9a8:	a4 8f       	std	Z+28, r26	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     9aa:	b5 8f       	std	Z+29, r27	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     9ac:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     9ae:	30 89       	ldd	r19, Z+16	; 0x10
     9b0:	30 68       	ori	r19, 0x80	; 128
     9b2:	30 8b       	std	Z+16, r19	; 0x10
		
	//Actual data being transferred
	DMA.CH3.CTRLA = 0x00;
     9b4:	e0 e4       	ldi	r30, 0x40	; 64
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	10 82       	st	Z, r1
	DMA.CH3.CTRLA = DMA_CH_RESET_bm;
     9ba:	20 83       	st	Z, r18
		
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     9bc:	c0 83       	st	Z, r28
	DMA.CH3.CTRLB = 0x03; //No interrupt
     9be:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     9c2:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_SPIC_gc;
     9c6:	9a e4       	ldi	r25, 0x4A	; 74
     9c8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = HALFPACKET_SIZE;
     9cc:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     9d0:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
		
	DMA.CH3.SRCADDR0 = (( (uint16_t) &SPIC.DATA) >> 0) & 0xFF; //Source address is ADC
     9d4:	93 ec       	ldi	r25, 0xC3	; 195
     9d6:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &SPIC.DATA) >> 8) & 0xFF;
     9da:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     9de:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     9e2:	81 ee       	ldi	r24, 0xE1	; 225
     9e4:	97 e2       	ldi	r25, 0x27	; 39
     9e6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 8) & 0xFF;
     9ea:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     9ee:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     9f2:	80 81       	ld	r24, Z
     9f4:	80 68       	ori	r24, 0x80	; 128
     9f6:	80 83       	st	Z, r24
}
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <tiny_dma_loop_mode_4>:

void tiny_dma_loop_mode_4(void){
     9fc:	08 95       	ret

000009fe <tiny_dma_set_mode_5>:
	return;
}	
	
void tiny_dma_set_mode_5(void){
	global_mode = 5;
     9fe:	85 e0       	ldi	r24, 0x05	; 5
     a00:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
		
	tiny_dma_flush();
     a04:	97 dd       	rcall	.-1234   	; 0x534 <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     a06:	e0 e0       	ldi	r30, 0x00	; 0
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     a0c:	34 e2       	ldi	r19, 0x24	; 36
     a0e:	30 ab       	std	Z+48, r19	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     a10:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     a12:	29 e5       	ldi	r18, 0x59	; 89
     a14:	22 ab       	std	Z+50, r18	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     a1a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     a1e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     a22:	44 ab       	std	Z+52, r20	; 0x34
     a24:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     a26:	4a e5       	ldi	r20, 0x5A	; 90
     a28:	52 e2       	ldi	r21, 0x22	; 34
     a2a:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     a2c:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     a2e:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     a30:	99 e3       	ldi	r25, 0x39	; 57
     a32:	94 af       	std	Z+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     a34:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     a38:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a3c:	90 a9       	ldd	r25, Z+48	; 0x30
     a3e:	90 68       	ori	r25, 0x80	; 128
     a40:	90 ab       	std	Z+48, r25	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     a42:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     a46:	e0 e4       	ldi	r30, 0x40	; 64
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	30 83       	st	Z, r19
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     a4c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     a50:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     a54:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     a58:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
     a5c:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
     a60:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a64:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     a68:	2a e6       	ldi	r18, 0x6A	; 106
     a6a:	34 e2       	ldi	r19, 0x24	; 36
     a6c:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     a70:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     a74:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     a78:	9b e3       	ldi	r25, 0x3B	; 59
     a7a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     a7e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     a82:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a86:	80 81       	ld	r24, Z
     a88:	80 68       	ori	r24, 0x80	; 128
     a8a:	80 83       	st	Z, r24
     a8c:	08 95       	ret

00000a8e <tiny_dma_set_mode_6>:
}

void tiny_dma_set_mode_6(void){
	
	global_mode = 6;
     a8e:	86 e0       	ldi	r24, 0x06	; 6
     a90:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     a94:	4f dd       	rcall	.-1378   	; 0x534 <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     a96:	e0 e0       	ldi	r30, 0x00	; 0
     a98:	f1 e0       	ldi	r31, 0x01	; 1
     a9a:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     a9c:	94 e2       	ldi	r25, 0x24	; 36
     a9e:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     aa0:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     aa2:	39 e5       	ldi	r19, 0x59	; 89
     aa4:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     aaa:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     aae:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     ab2:	44 ab       	std	Z+52, r20	; 0x34
     ab4:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     ab6:	4a e5       	ldi	r20, 0x5A	; 90
     ab8:	52 e2       	ldi	r21, 0x22	; 34
     aba:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     abc:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     abe:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     ac0:	29 e3       	ldi	r18, 0x39	; 57
     ac2:	24 af       	std	Z+60, r18	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     ac4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     ac8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     acc:	20 a9       	ldd	r18, Z+48	; 0x30
     ace:	20 68       	ori	r18, 0x80	; 128
     ad0:	20 ab       	std	Z+48, r18	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     ad2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ad6:	a0 e4       	ldi	r26, 0x40	; 64
     ad8:	b1 e0       	ldi	r27, 0x01	; 1
     ada:	9c 93       	st	X, r25
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     adc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     ae0:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     ae4:	32 e0       	ldi	r19, 0x02	; 2
     ae6:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     aea:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     aee:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     af2:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     af6:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     afa:	4a e6       	ldi	r20, 0x6A	; 106
     afc:	54 e2       	ldi	r21, 0x24	; 36
     afe:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     b02:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     b06:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b0a:	2b e3       	ldi	r18, 0x3B	; 59
     b0c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     b10:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     b14:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b18:	2c 91       	ld	r18, X
     b1a:	20 68       	ori	r18, 0x80	; 128
     b1c:	2c 93       	st	X, r18
	
	DMA.CH0.CTRLA = 0x00;
     b1e:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     b20:	20 e4       	ldi	r18, 0x40	; 64
     b22:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     b24:	24 e0       	ldi	r18, 0x04	; 4
     b26:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
     b28:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     b2a:	81 e9       	ldi	r24, 0x91	; 145
     b2c:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     b2e:	80 e1       	ldi	r24, 0x10	; 16
     b30:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = PACKET_SIZE;
     b32:	4e ee       	ldi	r20, 0xEE	; 238
     b34:	52 e0       	ldi	r21, 0x02	; 2
     b36:	44 8b       	std	Z+20, r20	; 0x14
     b38:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     b3a:	90 8f       	std	Z+24, r25	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     b3c:	31 8f       	std	Z+25, r19	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     b3e:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     b40:	8a e6       	ldi	r24, 0x6A	; 106
     b42:	96 e2       	ldi	r25, 0x26	; 38
     b44:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     b46:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     b48:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b4a:	80 89       	ldd	r24, Z+16	; 0x10
     b4c:	80 68       	ori	r24, 0x80	; 128
     b4e:	80 8b       	std	Z+16, r24	; 0x10
     b50:	08 95       	ret

00000b52 <tiny_dma_loop_mode_6>:
	
}

void tiny_dma_loop_mode_6(void){
     b52:	08 95       	ret

00000b54 <tiny_dma_set_mode_7>:
	return;
}

void tiny_dma_set_mode_7(void){
		
		global_mode = 7;
     b54:	87 e0       	ldi	r24, 0x07	; 7
     b56:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
		
		tiny_dma_flush();
     b5a:	ec dc       	rcall	.-1576   	; 0x534 <tiny_dma_flush>
		
		DMA.CH2.REPCNT = 0; //Repeat forever!
     b5c:	e0 e0       	ldi	r30, 0x00	; 0
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	16 aa       	std	Z+54, r1	; 0x36
		DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b62:	94 e2       	ldi	r25, 0x24	; 36
     b64:	90 ab       	std	Z+48, r25	; 0x30
		DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     b66:	11 aa       	std	Z+49, r1	; 0x31
		DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     b68:	39 e5       	ldi	r19, 0x59	; 89
     b6a:	32 ab       	std	Z+50, r19	; 0x32
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	83 ab       	std	Z+51, r24	; 0x33
		DMA.CH2.TRFCNT = dacBuf_len;
     b70:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     b74:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b78:	44 ab       	std	Z+52, r20	; 0x34
     b7a:	55 ab       	std	Z+53, r21	; 0x35

		DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     b7c:	4a e5       	ldi	r20, 0x5A	; 90
     b7e:	52 e2       	ldi	r21, 0x22	; 34
     b80:	40 af       	std	Z+56, r20	; 0x38
		DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     b82:	51 af       	std	Z+57, r21	; 0x39
		DMA.CH2.SRCADDR2 = 0x00;
     b84:	12 ae       	std	Z+58, r1	; 0x3a
			
		DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b86:	29 e3       	ldi	r18, 0x39	; 57
     b88:	24 af       	std	Z+60, r18	; 0x3c
		DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     b8a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
		DMA.CH2.DESTADDR2 = 0x00;
     b8e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
			
		//Must enable last for REPCNT won't work!
		DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b92:	20 a9       	ldd	r18, Z+48	; 0x30
     b94:	20 68       	ori	r18, 0x80	; 128
     b96:	20 ab       	std	Z+48, r18	; 0x30
		
		DMA.CH3.REPCNT = 0; //Repeat forever!
     b98:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
		DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b9c:	a0 e4       	ldi	r26, 0x40	; 64
     b9e:	b1 e0       	ldi	r27, 0x01	; 1
     ba0:	9c 93       	st	X, r25
		DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     ba2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
		DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     ba6:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     baa:	32 e0       	ldi	r19, 0x02	; 2
     bac:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
		DMA.CH3.TRFCNT = auxDacBufLen;
     bb0:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     bb4:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     bb8:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bbc:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

		DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     bc0:	4a e6       	ldi	r20, 0x6A	; 106
     bc2:	54 e2       	ldi	r21, 0x24	; 36
     bc4:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
		DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     bc8:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
		DMA.CH3.SRCADDR2 = 0x00;
     bcc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
		DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     bd0:	2b e3       	ldi	r18, 0x3B	; 59
     bd2:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
		DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     bd6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
		DMA.CH3.DESTADDR2 = 0x00;
     bda:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
		//Must enable last for REPCNT won't work!
		DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     bde:	2c 91       	ld	r18, X
     be0:	20 68       	ori	r18, 0x80	; 128
     be2:	2c 93       	st	X, r18
		
		DMA.CH0.CTRLA = 0x00;
     be4:	10 8a       	std	Z+16, r1	; 0x10
		DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     be6:	20 e4       	ldi	r18, 0x40	; 64
     be8:	20 8b       	std	Z+16, r18	; 0x10
				
		DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     bea:	25 e0       	ldi	r18, 0x05	; 5
     bec:	20 8b       	std	Z+16, r18	; 0x10
		DMA.CH0.CTRLB = 0x03; //No interrupt!
     bee:	81 8b       	std	Z+17, r24	; 0x11
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     bf0:	81 e9       	ldi	r24, 0x91	; 145
     bf2:	82 8b       	std	Z+18, r24	; 0x12
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     bf4:	80 e1       	ldi	r24, 0x10	; 16
     bf6:	83 8b       	std	Z+19, r24	; 0x13
		DMA.CH0.TRFCNT = PACKET_SIZE;
     bf8:	4e ee       	ldi	r20, 0xEE	; 238
     bfa:	52 e0       	ldi	r21, 0x02	; 2
     bfc:	44 8b       	std	Z+20, r20	; 0x14
     bfe:	55 8b       	std	Z+21, r21	; 0x15
				
		DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     c00:	90 8f       	std	Z+24, r25	; 0x18
		DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     c02:	31 8f       	std	Z+25, r19	; 0x19
		DMA.CH0.SRCADDR2 = 0x00;
     c04:	12 8e       	std	Z+26, r1	; 0x1a
				
		DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     c06:	8a e6       	ldi	r24, 0x6A	; 106
     c08:	96 e2       	ldi	r25, 0x26	; 38
     c0a:	84 8f       	std	Z+28, r24	; 0x1c
		DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     c0c:	95 8f       	std	Z+29, r25	; 0x1d
		DMA.CH0.DESTADDR2 = 0x00;
     c0e:	16 8e       	std	Z+30, r1	; 0x1e
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     c10:	80 89       	ldd	r24, Z+16	; 0x10
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	80 8b       	std	Z+16, r24	; 0x10
     c16:	08 95       	ret

00000c18 <tiny_dma_loop_mode_7>:
}

void tiny_dma_loop_mode_7(void){
     c18:	08 95       	ret

00000c1a <__vector_6>:
}

ISR(DMA_CH0_vect){
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	2f 93       	push	r18
     c26:	3f 93       	push	r19
     c28:	4f 93       	push	r20
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
		DMA.INTFLAGS = 0x01;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     c3c:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
     c40:	8e 2f       	mov	r24, r30
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	88 30       	cpi	r24, 0x08	; 8
     c46:	91 05       	cpc	r25, r1
     c48:	08 f0       	brcs	.+2      	; 0xc4c <__vector_6+0x32>
     c4a:	11 c1       	rjmp	.+546    	; 0xe6e <__vector_6+0x254>
     c4c:	fc 01       	movw	r30, r24
     c4e:	ea 5f       	subi	r30, 0xFA	; 250
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
			case 0:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     c56:	e0 e0       	ldi	r30, 0x00	; 0
     c58:	f1 e0       	ldi	r31, 0x01	; 1
     c5a:	87 e7       	ldi	r24, 0x77	; 119
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	84 8b       	std	Z+20, r24	; 0x14
     c60:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     c62:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     c66:	2e ee       	ldi	r18, 0xEE	; 238
     c68:	32 e0       	ldi	r19, 0x02	; 2
     c6a:	42 9f       	mul	r20, r18
     c6c:	c0 01       	movw	r24, r0
     c6e:	43 9f       	mul	r20, r19
     c70:	90 0d       	add	r25, r0
     c72:	11 24       	eor	r1, r1
     c74:	86 59       	subi	r24, 0x96	; 150
     c76:	99 4d       	sbci	r25, 0xD9	; 217
     c78:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     c7a:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     c7e:	42 9f       	mul	r20, r18
     c80:	c0 01       	movw	r24, r0
     c82:	43 9f       	mul	r20, r19
     c84:	90 0d       	add	r25, r0
     c86:	11 24       	eor	r1, r1
     c88:	86 59       	subi	r24, 0x96	; 150
     c8a:	99 4d       	sbci	r25, 0xD9	; 217
     c8c:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     c8e:	80 89       	ldd	r24, Z+16	; 0x10
     c90:	80 68       	ori	r24, 0x80	; 128
     c92:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     c94:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	91 11       	cpse	r25, r1
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
     ca2:	e5 c0       	rjmp	.+458    	; 0xe6e <__vector_6+0x254>
			case 1:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     ca4:	e0 e0       	ldi	r30, 0x00	; 0
     ca6:	f1 e0       	ldi	r31, 0x01	; 1
     ca8:	87 e7       	ldi	r24, 0x77	; 119
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	84 8b       	std	Z+20, r24	; 0x14
     cae:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     cb0:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     cb4:	2e ee       	ldi	r18, 0xEE	; 238
     cb6:	32 e0       	ldi	r19, 0x02	; 2
     cb8:	42 9f       	mul	r20, r18
     cba:	c0 01       	movw	r24, r0
     cbc:	43 9f       	mul	r20, r19
     cbe:	90 0d       	add	r25, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	86 59       	subi	r24, 0x96	; 150
     cc4:	99 4d       	sbci	r25, 0xD9	; 217
     cc6:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     cc8:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     ccc:	42 9f       	mul	r20, r18
     cce:	c0 01       	movw	r24, r0
     cd0:	43 9f       	mul	r20, r19
     cd2:	90 0d       	add	r25, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	86 59       	subi	r24, 0x96	; 150
     cd8:	99 4d       	sbci	r25, 0xD9	; 217
     cda:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     cdc:	80 89       	ldd	r24, Z+16	; 0x10
     cde:	80 68       	ori	r24, 0x80	; 128
     ce0:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     ce2:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	91 11       	cpse	r25, r1
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
     cf0:	be c0       	rjmp	.+380    	; 0xe6e <__vector_6+0x254>
			case 2:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     cf2:	e0 e0       	ldi	r30, 0x00	; 0
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	87 e7       	ldi	r24, 0x77	; 119
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	84 8b       	std	Z+20, r24	; 0x14
     cfc:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     cfe:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d02:	2e ee       	ldi	r18, 0xEE	; 238
     d04:	32 e0       	ldi	r19, 0x02	; 2
     d06:	42 9f       	mul	r20, r18
     d08:	c0 01       	movw	r24, r0
     d0a:	43 9f       	mul	r20, r19
     d0c:	90 0d       	add	r25, r0
     d0e:	11 24       	eor	r1, r1
     d10:	86 59       	subi	r24, 0x96	; 150
     d12:	99 4d       	sbci	r25, 0xD9	; 217
     d14:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d16:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d1a:	42 9f       	mul	r20, r18
     d1c:	c0 01       	movw	r24, r0
     d1e:	43 9f       	mul	r20, r19
     d20:	90 0d       	add	r25, r0
     d22:	11 24       	eor	r1, r1
     d24:	86 59       	subi	r24, 0x96	; 150
     d26:	99 4d       	sbci	r25, 0xD9	; 217
     d28:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d2a:	80 89       	ldd	r24, Z+16	; 0x10
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     d30:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	91 11       	cpse	r25, r1
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
     d3e:	97 c0       	rjmp	.+302    	; 0xe6e <__vector_6+0x254>
			case 3:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d40:	e0 e0       	ldi	r30, 0x00	; 0
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	87 e7       	ldi	r24, 0x77	; 119
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	84 8b       	std	Z+20, r24	; 0x14
     d4a:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d4c:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d50:	2e ee       	ldi	r18, 0xEE	; 238
     d52:	32 e0       	ldi	r19, 0x02	; 2
     d54:	42 9f       	mul	r20, r18
     d56:	c0 01       	movw	r24, r0
     d58:	43 9f       	mul	r20, r19
     d5a:	90 0d       	add	r25, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	86 59       	subi	r24, 0x96	; 150
     d60:	99 4d       	sbci	r25, 0xD9	; 217
     d62:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     d64:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d68:	42 9f       	mul	r20, r18
     d6a:	c0 01       	movw	r24, r0
     d6c:	43 9f       	mul	r20, r19
     d6e:	90 0d       	add	r25, r0
     d70:	11 24       	eor	r1, r1
     d72:	86 59       	subi	r24, 0x96	; 150
     d74:	99 4d       	sbci	r25, 0xD9	; 217
     d76:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d78:	80 89       	ldd	r24, Z+16	; 0x10
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     d7e:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	91 11       	cpse	r25, r1
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
     d8c:	70 c0       	rjmp	.+224    	; 0xe6e <__vector_6+0x254>
			case 4:
				DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	f1 e0       	ldi	r31, 0x01	; 1
     d92:	87 e7       	ldi	r24, 0x77	; 119
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	84 8b       	std	Z+20, r24	; 0x14
     d98:	95 8b       	std	Z+21, r25	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     d9a:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     d9e:	2e ee       	ldi	r18, 0xEE	; 238
     da0:	32 e0       	ldi	r19, 0x02	; 2
     da2:	42 9f       	mul	r20, r18
     da4:	c0 01       	movw	r24, r0
     da6:	43 9f       	mul	r20, r19
     da8:	90 0d       	add	r25, r0
     daa:	11 24       	eor	r1, r1
     dac:	86 59       	subi	r24, 0x96	; 150
     dae:	99 4d       	sbci	r25, 0xD9	; 217
     db0:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     db2:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     db6:	42 9f       	mul	r20, r18
     db8:	c0 01       	movw	r24, r0
     dba:	43 9f       	mul	r20, r19
     dbc:	90 0d       	add	r25, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	86 59       	subi	r24, 0x96	; 150
     dc2:	99 4d       	sbci	r25, 0xD9	; 217
     dc4:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     dc6:	80 89       	ldd	r24, Z+16	; 0x10
     dc8:	80 68       	ori	r24, 0x80	; 128
     dca:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     dcc:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	91 11       	cpse	r25, r1
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
     dda:	49 c0       	rjmp	.+146    	; 0xe6e <__vector_6+0x254>
			case 6:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     ddc:	e0 e0       	ldi	r30, 0x00	; 0
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	2e ee       	ldi	r18, 0xEE	; 238
     de2:	32 e0       	ldi	r19, 0x02	; 2
     de4:	24 8b       	std	Z+20, r18	; 0x14
     de6:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     de8:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     dec:	42 9f       	mul	r20, r18
     dee:	c0 01       	movw	r24, r0
     df0:	43 9f       	mul	r20, r19
     df2:	90 0d       	add	r25, r0
     df4:	11 24       	eor	r1, r1
     df6:	86 59       	subi	r24, 0x96	; 150
     df8:	99 4d       	sbci	r25, 0xD9	; 217
     dfa:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     dfc:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     e00:	42 9f       	mul	r20, r18
     e02:	c0 01       	movw	r24, r0
     e04:	43 9f       	mul	r20, r19
     e06:	90 0d       	add	r25, r0
     e08:	11 24       	eor	r1, r1
     e0a:	86 59       	subi	r24, 0x96	; 150
     e0c:	99 4d       	sbci	r25, 0xD9	; 217
     e0e:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e10:	80 89       	ldd	r24, Z+16	; 0x10
     e12:	80 68       	ori	r24, 0x80	; 128
     e14:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e16:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	91 11       	cpse	r25, r1
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
     e24:	24 c0       	rjmp	.+72     	; 0xe6e <__vector_6+0x254>
			case 7:
				DMA.CH0.TRFCNT = PACKET_SIZE;
     e26:	e0 e0       	ldi	r30, 0x00	; 0
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	2e ee       	ldi	r18, 0xEE	; 238
     e2c:	32 e0       	ldi	r19, 0x02	; 2
     e2e:	24 8b       	std	Z+20, r18	; 0x14
     e30:	35 8b       	std	Z+21, r19	; 0x15
				DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     e32:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     e36:	42 9f       	mul	r20, r18
     e38:	c0 01       	movw	r24, r0
     e3a:	43 9f       	mul	r20, r19
     e3c:	90 0d       	add	r25, r0
     e3e:	11 24       	eor	r1, r1
     e40:	86 59       	subi	r24, 0x96	; 150
     e42:	99 4d       	sbci	r25, 0xD9	; 217
     e44:	84 8f       	std	Z+28, r24	; 0x1c
				DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     e46:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     e4a:	42 9f       	mul	r20, r18
     e4c:	c0 01       	movw	r24, r0
     e4e:	43 9f       	mul	r20, r19
     e50:	90 0d       	add	r25, r0
     e52:	11 24       	eor	r1, r1
     e54:	86 59       	subi	r24, 0x96	; 150
     e56:	99 4d       	sbci	r25, 0xD9	; 217
     e58:	95 8f       	std	Z+29, r25	; 0x1d
				//Must enable last for REPCNT won't work!
				DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e5a:	80 89       	ldd	r24, Z+16	; 0x10
     e5c:	80 68       	ori	r24, 0x80	; 128
     e5e:	80 8b       	std	Z+16, r24	; 0x10
				b1_state = !b1_state;
     e60:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	91 11       	cpse	r25, r1
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
     e6e:	ff 91       	pop	r31
     e70:	ef 91       	pop	r30
     e72:	bf 91       	pop	r27
     e74:	af 91       	pop	r26
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <__vector_7>:

ISR(DMA_CH1_vect){
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	11 24       	eor	r1, r1
     e94:	2f 93       	push	r18
     e96:	3f 93       	push	r19
     e98:	4f 93       	push	r20
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
		DMA.INTFLAGS = 0x02;
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
		switch(global_mode){
     ea8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	19 f0       	breq	.+6      	; 0xeb6 <__vector_7+0x2c>
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	41 f1       	breq	.+80     	; 0xf04 <__vector_7+0x7a>
     eb4:	4d c0       	rjmp	.+154    	; 0xf50 <__vector_7+0xc6>
			case 0:
			////////////////////////////////////////
			break;
			case 1:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     eb6:	e0 e0       	ldi	r30, 0x00	; 0
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	87 e7       	ldi	r24, 0x77	; 119
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	84 a3       	std	Z+36, r24	; 0x24
     ec0:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     ec2:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <b2_state>
     ec6:	2e ee       	ldi	r18, 0xEE	; 238
     ec8:	32 e0       	ldi	r19, 0x02	; 2
     eca:	42 9f       	mul	r20, r18
     ecc:	c0 01       	movw	r24, r0
     ece:	43 9f       	mul	r20, r19
     ed0:	90 0d       	add	r25, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	8f 51       	subi	r24, 0x1F	; 31
     ed6:	98 4d       	sbci	r25, 0xD8	; 216
     ed8:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     eda:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <b2_state>
     ede:	42 9f       	mul	r20, r18
     ee0:	c0 01       	movw	r24, r0
     ee2:	43 9f       	mul	r20, r19
     ee4:	90 0d       	add	r25, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	8f 51       	subi	r24, 0x1F	; 31
     eea:	98 4d       	sbci	r25, 0xD8	; 216
     eec:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     eee:	80 a1       	ldd	r24, Z+32	; 0x20
     ef0:	80 68       	ori	r24, 0x80	; 128
     ef2:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
     ef4:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <b2_state>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	91 11       	cpse	r25, r1
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <b2_state>
			break;
     f02:	26 c0       	rjmp	.+76     	; 0xf50 <__vector_7+0xc6>
			case 2:
				DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     f04:	e0 e0       	ldi	r30, 0x00	; 0
     f06:	f1 e0       	ldi	r31, 0x01	; 1
     f08:	87 e7       	ldi	r24, 0x77	; 119
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	84 a3       	std	Z+36, r24	; 0x24
     f0e:	95 a3       	std	Z+37, r25	; 0x25
				DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f10:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <b2_state>
     f14:	2e ee       	ldi	r18, 0xEE	; 238
     f16:	32 e0       	ldi	r19, 0x02	; 2
     f18:	42 9f       	mul	r20, r18
     f1a:	c0 01       	movw	r24, r0
     f1c:	43 9f       	mul	r20, r19
     f1e:	90 0d       	add	r25, r0
     f20:	11 24       	eor	r1, r1
     f22:	8f 51       	subi	r24, 0x1F	; 31
     f24:	98 4d       	sbci	r25, 0xD8	; 216
     f26:	84 a7       	std	Z+44, r24	; 0x2c
				DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     f28:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <b2_state>
     f2c:	42 9f       	mul	r20, r18
     f2e:	c0 01       	movw	r24, r0
     f30:	43 9f       	mul	r20, r19
     f32:	90 0d       	add	r25, r0
     f34:	11 24       	eor	r1, r1
     f36:	8f 51       	subi	r24, 0x1F	; 31
     f38:	98 4d       	sbci	r25, 0xD8	; 216
     f3a:	95 a7       	std	Z+45, r25	; 0x2d
				//Must enable last for REPCNT won't work!
				DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     f3c:	80 a1       	ldd	r24, Z+32	; 0x20
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	80 a3       	std	Z+32, r24	; 0x20
				b2_state = !b2_state;
     f42:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <b2_state>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	91 11       	cpse	r25, r1
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <b2_state>
			break;
			default:
			////////////////////////////////////////
			break;
		}
}
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__vector_9>:

ISR(DMA_CH3_vect){
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	2f 93       	push	r18
     f74:	3f 93       	push	r19
     f76:	4f 93       	push	r20
     f78:	8f 93       	push	r24
     f7a:	9f 93       	push	r25
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
	DMA.INTFLAGS = 0x08;
     f80:	88 e0       	ldi	r24, 0x08	; 8
     f82:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	DMA.CH3.TRFCNT = HALFPACKET_SIZE;
     f86:	87 e7       	ldi	r24, 0x77	; 119
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f8e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     f92:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <b2_state>
     f96:	2e ee       	ldi	r18, 0xEE	; 238
     f98:	32 e0       	ldi	r19, 0x02	; 2
     f9a:	42 9f       	mul	r20, r18
     f9c:	c0 01       	movw	r24, r0
     f9e:	43 9f       	mul	r20, r19
     fa0:	90 0d       	add	r25, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	8f 51       	subi	r24, 0x1F	; 31
     fa6:	98 4d       	sbci	r25, 0xD8	; 216
     fa8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
     fac:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <b2_state>
     fb0:	42 9f       	mul	r20, r18
     fb2:	c0 01       	movw	r24, r0
     fb4:	43 9f       	mul	r20, r19
     fb6:	90 0d       	add	r25, r0
     fb8:	11 24       	eor	r1, r1
     fba:	8f 51       	subi	r24, 0x1F	; 31
     fbc:	98 4d       	sbci	r25, 0xD8	; 216
     fbe:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     fc2:	e0 e4       	ldi	r30, 0x40	; 64
     fc4:	f1 e0       	ldi	r31, 0x01	; 1
     fc6:	80 81       	ld	r24, Z
     fc8:	80 68       	ori	r24, 0x80	; 128
     fca:	80 83       	st	Z, r24
	b2_state = !b2_state;
     fcc:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <b2_state>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	91 11       	cpse	r25, r1
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <b2_state>
}
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <tiny_timer_setup>:
#define PSU_PER 3000
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     ff2:	e0 e7       	ldi	r30, 0x70	; 112
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	83 81       	ldd	r24, Z+3	; 0x03
     ff8:	8c 7f       	andi	r24, 0xFC	; 252
     ffa:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     ffc:	84 81       	ldd	r24, Z+4	; 0x04
     ffe:	8c 7f       	andi	r24, 0xFC	; 252
    1000:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1002:	80 81       	ld	r24, Z
    1004:	8d 7f       	andi	r24, 0xFD	; 253
    1006:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    1008:	e0 e8       	ldi	r30, 0x80	; 128
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	80 ec       	ldi	r24, 0xC0	; 192
    100e:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1010:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1012:	88 ec       	ldi	r24, 0xC8	; 200
    1014:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1016:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1018:	e0 e0       	ldi	r30, 0x00	; 0
    101a:	f8 e0       	ldi	r31, 0x08	; 8
    101c:	34 e0       	ldi	r19, 0x04	; 4
    101e:	30 83       	st	Z, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1020:	23 e0       	ldi	r18, 0x03	; 3
    1022:	21 83       	std	Z+1, r18	; 0x01
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1024:	14 82       	std	Z+4, r1	; 0x04
		TC_DAC.PER = 469;
    1026:	85 ed       	ldi	r24, 0xD5	; 213
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	86 a3       	std	Z+38, r24	; 0x26
    102c:	97 a3       	std	Z+39, r25	; 0x27
		TC_DAC.INTCTRLA = 0x00;
    102e:	16 82       	std	Z+6, r1	; 0x06
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1030:	e0 e4       	ldi	r30, 0x40	; 64
    1032:	f8 e0       	ldi	r31, 0x08	; 8
    1034:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1036:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1038:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    103a:	86 a3       	std	Z+38, r24	; 0x26
    103c:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    103e:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    1040:	e0 e6       	ldi	r30, 0x60	; 96
    1042:	f6 e0       	ldi	r31, 0x06	; 6
    1044:	80 81       	ld	r24, Z
    1046:	80 61       	ori	r24, 0x10	; 16
    1048:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    104a:	e0 e4       	ldi	r30, 0x40	; 64
    104c:	f9 e0       	ldi	r31, 0x09	; 9
    104e:	83 e1       	ldi	r24, 0x13	; 19
    1050:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    1052:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    1058:	28 eb       	ldi	r18, 0xB8	; 184
    105a:	3b e0       	ldi	r19, 0x0B	; 11
    105c:	26 a3       	std	Z+38, r18	; 0x26
    105e:	37 a3       	std	Z+39, r19	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    1060:	10 a6       	std	Z+40, r1	; 0x28
    1062:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    1064:	80 83       	st	Z, r24
    1066:	08 95       	ret

00001068 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	2f 93       	push	r18
    1074:	3f 93       	push	r19
    1076:	4f 93       	push	r20
    1078:	5f 93       	push	r21
    107a:	8f 93       	push	r24
    107c:	9f 93       	push	r25
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	1f 92       	push	r1
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	if (global_mode == 7){
    108c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    1090:	87 30       	cpi	r24, 0x07	; 7
    1092:	31 f4       	brne	.+12     	; 0x10a0 <__vector_83+0x38>
		nothing = ADCA.CH1.RESL;
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	f2 e0       	ldi	r31, 0x02	; 2
    1098:	84 a5       	ldd	r24, Z+44	; 0x2c
    109a:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    109c:	95 a5       	ldd	r25, Z+45	; 0x2d
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <__vector_83+0x3c>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    10a0:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    10a4:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
    10a8:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    10aa:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    10ae:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	0c f4       	brge	.+2      	; 0x10ba <__vector_83+0x52>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	99 23       	and	r25, r25
    10bc:	c9 f0       	breq	.+50     	; 0x10f0 <__vector_83+0x88>
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	22 3b       	cpi	r18, 0xB2	; 178
    10c2:	3b 40       	sbci	r19, 0x0B	; 11
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <__vector_83+0x60>
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	99 23       	and	r25, r25
    10ca:	91 f0       	breq	.+36     	; 0x10f0 <__vector_83+0x88>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    10cc:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    10d0:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    10d4:	89 30       	cpi	r24, 0x09	; 9
    10d6:	1c f4       	brge	.+6      	; 0x10de <__vector_83+0x76>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <__vector_83+0x7a>
    10de:	86 e0       	ldi	r24, 0x06	; 6
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    10ea:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    10ee:	23 c0       	rjmp	.+70     	; 0x1136 <__vector_83+0xce>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    10f0:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    10f4:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	0c f0       	brlt	.+2      	; 0x1100 <__vector_83+0x98>
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	99 23       	and	r25, r25
    1102:	c9 f0       	breq	.+50     	; 0x1136 <__vector_83+0xce>
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	27 30       	cpi	r18, 0x07	; 7
    1108:	31 05       	cpc	r19, r1
    110a:	08 f4       	brcc	.+2      	; 0x110e <__vector_83+0xa6>
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	99 23       	and	r25, r25
    1110:	91 f0       	breq	.+36     	; 0x1136 <__vector_83+0xce>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1112:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1116:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    111a:	88 3f       	cpi	r24, 0xF8	; 248
    111c:	1c f0       	brlt	.+6      	; 0x1124 <__vector_83+0xbc>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <__vector_83+0xc0>
    1124:	86 e0       	ldi	r24, 0x06	; 6
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	48 1b       	sub	r20, r24
    112c:	59 0b       	sbc	r21, r25
    112e:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1132:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    1156:	e0 e7       	ldi	r30, 0x70	; 112
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	83 81       	ldd	r24, Z+3	; 0x03
    115c:	8f 7e       	andi	r24, 0xEF	; 239
    115e:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b01001010;
    1160:	e0 e4       	ldi	r30, 0x40	; 64
    1162:	f6 e0       	ldi	r31, 0x06	; 6
    1164:	80 81       	ld	r24, Z
    1166:	8a 64       	ori	r24, 0x4A	; 74
    1168:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    116e:	88 e5       	ldi	r24, 0x58	; 88
    1170:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	#ifndef VERO
		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1172:	e0 ea       	ldi	r30, 0xA0	; 160
    1174:	f8 e0       	ldi	r31, 0x08	; 8
    1176:	84 ec       	ldi	r24, 0xC4	; 196
    1178:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
    117a:	83 e0       	ldi	r24, 0x03	; 3
    117c:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
    117e:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1180:	88 e1       	ldi	r24, 0x18	; 24
    1182:	84 83       	std	Z+4, r24	; 0x04
    1184:	08 95       	ret

00001186 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    1186:	e0 e7       	ldi	r30, 0x70	; 112
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	83 81       	ldd	r24, Z+3	; 0x03
    118c:	87 7f       	andi	r24, 0xF7	; 247
    118e:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    1190:	e0 ec       	ldi	r30, 0xC0	; 192
    1192:	f8 e0       	ldi	r31, 0x08	; 8
    1194:	80 e4       	ldi	r24, 0x40	; 64
    1196:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_HI_gc;
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	81 83       	std	Z+1, r24	; 0x01
	#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    119c:	88 e5       	ldi	r24, 0x58	; 88
    119e:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    11a2:	08 95       	ret

000011a4 <__vector_24>:
	#endif
		
	return;
}

ISR(SPIC_INT_vect){
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
	asm("nop");
    11ae:	00 00       	nop
}
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <sysclk_init+0xa>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <sysclk_init+0xc>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    11d0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    11d4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    11d8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    11dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    11e0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    11e4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    11e8:	64 e0       	ldi	r22, 0x04	; 4
    11ea:	81 e4       	ldi	r24, 0x41	; 65
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	c2 d5       	rcall	.+2948   	; 0x1d74 <ccp_write_io>
    11f0:	6c e1       	ldi	r22, 0x1C	; 28
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	c4 d5       	rcall	.+2952   	; 0x1d80 <nvm_read_byte>
    11f8:	8a 83       	std	Y+2, r24	; 0x02
    11fa:	6d e1       	ldi	r22, 0x1D	; 29
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	bf d5       	rcall	.+2942   	; 0x1d80 <nvm_read_byte>
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	21 f4       	brne	.+8      	; 0x1214 <sysclk_init+0x5a>
    120c:	80 e4       	ldi	r24, 0x40	; 64
    120e:	93 e2       	ldi	r25, 0x23	; 35
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	8b 83       	std	Y+3, r24	; 0x03
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	e0 e6       	ldi	r30, 0x60	; 96
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	82 83       	std	Z+2, r24	; 0x02
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	83 83       	std	Z+3, r24	; 0x03
    1226:	9f b7       	in	r25, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	e0 e5       	ldi	r30, 0x50	; 80
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	82 60       	ori	r24, 0x02	; 2
    1232:	80 83       	st	Z, r24
    1234:	9f bf       	out	0x3f, r25	; 63
    1236:	81 81       	ldd	r24, Z+1	; 0x01
    1238:	81 ff       	sbrs	r24, 1
    123a:	fd cf       	rjmp	.-6      	; 0x1236 <sysclk_init+0x7c>
    123c:	9f b7       	in	r25, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	00 e5       	ldi	r16, 0x50	; 80
    1242:	10 e0       	ldi	r17, 0x00	; 0
    1244:	d8 01       	movw	r26, r16
    1246:	16 96       	adiw	r26, 0x06	; 6
    1248:	8c 91       	ld	r24, X
    124a:	16 97       	sbiw	r26, 0x06	; 6
    124c:	89 7f       	andi	r24, 0xF9	; 249
    124e:	16 96       	adiw	r26, 0x06	; 6
    1250:	8c 93       	st	X, r24
    1252:	16 97       	sbiw	r26, 0x06	; 6
    1254:	e0 e6       	ldi	r30, 0x60	; 96
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 e8       	ldi	r24, 0x80	; 128
    125a:	85 83       	std	Z+5, r24	; 0x05
    125c:	8b eb       	ldi	r24, 0xBB	; 187
    125e:	86 83       	std	Z+6, r24	; 0x06
    1260:	16 96       	adiw	r26, 0x06	; 6
    1262:	8c 91       	ld	r24, X
    1264:	16 97       	sbiw	r26, 0x06	; 6
    1266:	84 60       	ori	r24, 0x04	; 4
    1268:	16 96       	adiw	r26, 0x06	; 6
    126a:	8c 93       	st	X, r24
    126c:	80 81       	ld	r24, Z
    126e:	81 60       	ori	r24, 0x01	; 1
    1270:	80 83       	st	Z, r24
    1272:	9f bf       	out	0x3f, r25	; 63
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	80 e4       	ldi	r24, 0x40	; 64
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	7c d5       	rcall	.+2808   	; 0x1d74 <ccp_write_io>
    127c:	9f b7       	in	r25, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	f8 01       	movw	r30, r16
    1282:	80 81       	ld	r24, Z
    1284:	8e 7f       	andi	r24, 0xFE	; 254
    1286:	80 83       	st	Z, r24
    1288:	9f bf       	out	0x3f, r25	; 63
    128a:	24 96       	adiw	r28, 0x04	; 4
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <sysclk_enable_module>:
    129a:	9f b7       	in	r25, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	e8 2f       	mov	r30, r24
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	e0 59       	subi	r30, 0x90	; 144
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	60 95       	com	r22
    12a8:	80 81       	ld	r24, Z
    12aa:	68 23       	and	r22, r24
    12ac:	60 83       	st	Z, r22
    12ae:	9f bf       	out	0x3f, r25	; 63
    12b0:	08 95       	ret

000012b2 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    12b2:	86 30       	cpi	r24, 0x06	; 6
    12b4:	11 f0       	breq	.+4      	; 0x12ba <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    12ba:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    12bc:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    12c0:	81 fd       	sbrc	r24, 1
    12c2:	26 c0       	rjmp	.+76     	; 0x1310 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    12c4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    12c6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    12c8:	e0 e5       	ldi	r30, 0x50	; 80
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	82 60       	ori	r24, 0x02	; 2
    12d0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12d2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    12d4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    12d6:	81 ff       	sbrs	r24, 1
    12d8:	fd cf       	rjmp	.-6      	; 0x12d4 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    12da:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    12dc:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    12de:	a0 e5       	ldi	r26, 0x50	; 80
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	16 96       	adiw	r26, 0x06	; 6
    12e4:	8c 91       	ld	r24, X
    12e6:	16 97       	sbiw	r26, 0x06	; 6
    12e8:	89 7f       	andi	r24, 0xF9	; 249
    12ea:	16 96       	adiw	r26, 0x06	; 6
    12ec:	8c 93       	st	X, r24
    12ee:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    12f0:	e0 e6       	ldi	r30, 0x60	; 96
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    12f8:	8b eb       	ldi	r24, 0xBB	; 187
    12fa:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    12fc:	16 96       	adiw	r26, 0x06	; 6
    12fe:	8c 91       	ld	r24, X
    1300:	16 97       	sbiw	r26, 0x06	; 6
    1302:	84 60       	ori	r24, 0x04	; 4
    1304:	16 96       	adiw	r26, 0x06	; 6
    1306:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1308:	80 81       	ld	r24, Z
    130a:	81 60       	ori	r24, 0x01	; 1
    130c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    130e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1310:	63 60       	ori	r22, 0x03	; 3
    1312:	84 e4       	ldi	r24, 0x44	; 68
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	2e d5       	rcall	.+2652   	; 0x1d74 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1318:	60 e4       	ldi	r22, 0x40	; 64
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	be cf       	rjmp	.-132    	; 0x129a <sysclk_enable_module>
    131e:	08 95       	ret

00001320 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1320:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <udi_vendor_alternate_setting>
    1324:	08 95       	ret

00001326 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    1326:	40 d1       	rcall	.+640    	; 0x15a8 <udc_get_interface_desc>
    1328:	fc 01       	movw	r30, r24
    132a:	83 81       	ldd	r24, Z+3	; 0x03
    132c:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    1330:	81 11       	cpse	r24, r1
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    1334:	48 c8       	rjmp	.-3952   	; 0x3c6 <main_vendor_enable>
    1336:	08 95       	ret
			return false;
		}
	}
	return true;
    1338:	81 e0       	ldi	r24, 0x01	; 1
}
    133a:	08 95       	ret

0000133c <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    133c:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <udi_vendor_alternate_setting>
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f4       	brne	.+2      	; 0x1346 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    1344:	5a c8       	rjmp	.-3916   	; 0x3fa <main_vendor_disable>
    1346:	08 95       	ret

00001348 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1348:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    134c:	88 23       	and	r24, r24
    134e:	4c f4       	brge	.+18     	; 0x1362 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1350:	80 76       	andi	r24, 0x60	; 96
    1352:	80 34       	cpi	r24, 0x40	; 64
    1354:	a9 f4       	brne	.+42     	; 0x1380 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1356:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    135a:	81 11       	cpse	r24, r1
    135c:	13 c0       	rjmp	.+38     	; 0x1384 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    135e:	52 c8       	rjmp	.-3932   	; 0x404 <main_setup_in_received>
    1360:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1362:	80 76       	andi	r24, 0x60	; 96
    1364:	80 34       	cpi	r24, 0x40	; 64
    1366:	81 f4       	brne	.+32     	; 0x1388 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1368:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    136c:	81 11       	cpse	r24, r1
    136e:	0e c0       	rjmp	.+28     	; 0x138c <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1370:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1374:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1378:	89 2b       	or	r24, r25
    137a:	51 f0       	breq	.+20     	; 0x1390 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    137c:	41 c8       	rjmp	.-3966   	; 0x400 <main_setup_out_received>
    137e:	08 95       	ret
		}
	}
	return false; // Not supported request
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	08 95       	ret
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	08 95       	ret
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	08 95       	ret
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	08 95       	ret
    1390:	80 e0       	ldi	r24, 0x00	; 0
}
    1392:	08 95       	ret

00001394 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    139a:	8a 01       	movw	r16, r20
    139c:	ac 01       	movw	r20, r24
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	81 e8       	ldi	r24, 0x81	; 129
    13a2:	0e 94 2e 13 	call	0x265c	; 0x265c <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    13b2:	8a 01       	movw	r16, r20
    13b4:	ac 01       	movw	r20, r24
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	82 e8       	ldi	r24, 0x82	; 130
    13ba:	0e 94 2e 13 	call	0x265c	; 0x265c <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    13ca:	8a 01       	movw	r16, r20
    13cc:	ac 01       	movw	r20, r24
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	83 e8       	ldi	r24, 0x83	; 131
    13d2:	0e 94 2e 13 	call	0x265c	; 0x265c <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret

000013dc <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    13dc:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    13e0:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    13e4:	01 90       	ld	r0, Z+
    13e6:	f0 81       	ld	r31, Z
    13e8:	e0 2d       	mov	r30, r0
    13ea:	22 81       	ldd	r18, Z+2	; 0x02
    13ec:	33 81       	ldd	r19, Z+3	; 0x03
    13ee:	2e 0f       	add	r18, r30
    13f0:	3f 1f       	adc	r19, r31
    13f2:	fc 01       	movw	r30, r24
    13f4:	40 81       	ld	r20, Z
    13f6:	e4 0f       	add	r30, r20
    13f8:	f1 1d       	adc	r31, r1
    13fa:	e2 17       	cp	r30, r18
    13fc:	f3 07       	cpc	r31, r19
    13fe:	b8 f4       	brcc	.+46     	; 0x142e <udc_next_desc_in_iface+0x52>
    1400:	81 81       	ldd	r24, Z+1	; 0x01
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	b9 f0       	breq	.+46     	; 0x1434 <udc_next_desc_in_iface+0x58>
    1406:	86 13       	cpse	r24, r22
    1408:	09 c0       	rjmp	.+18     	; 0x141c <udc_next_desc_in_iface+0x40>
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <udc_next_desc_in_iface+0x3a>
    140c:	81 81       	ldd	r24, Z+1	; 0x01
    140e:	84 30       	cpi	r24, 0x04	; 4
    1410:	a1 f0       	breq	.+40     	; 0x143a <udc_next_desc_in_iface+0x5e>
    1412:	86 13       	cpse	r24, r22
    1414:	03 c0       	rjmp	.+6      	; 0x141c <udc_next_desc_in_iface+0x40>
    1416:	8e 2f       	mov	r24, r30
    1418:	9f 2f       	mov	r25, r31
    141a:	08 95       	ret
    141c:	80 81       	ld	r24, Z
    141e:	e8 0f       	add	r30, r24
    1420:	f1 1d       	adc	r31, r1
    1422:	e2 17       	cp	r30, r18
    1424:	f3 07       	cpc	r31, r19
    1426:	90 f3       	brcs	.-28     	; 0x140c <udc_next_desc_in_iface+0x30>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	08 95       	ret
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	08 95       	ret
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	08 95       	ret
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	08 95       	ret

00001440 <udc_valid_address>:
    1440:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1444:	8f 77       	andi	r24, 0x7F	; 127
    1446:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <udd_set_address>
    144a:	08 95       	ret

0000144c <udc_update_iface_desc>:
    144c:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <udc_num_configuration>
    1450:	99 23       	and	r25, r25
    1452:	81 f1       	breq	.+96     	; 0x14b4 <udc_update_iface_desc+0x68>
    1454:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1458:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    145c:	01 90       	ld	r0, Z+
    145e:	f0 81       	ld	r31, Z
    1460:	e0 2d       	mov	r30, r0
    1462:	94 81       	ldd	r25, Z+4	; 0x04
    1464:	89 17       	cp	r24, r25
    1466:	40 f5       	brcc	.+80     	; 0x14b8 <udc_update_iface_desc+0x6c>
    1468:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    146c:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    1470:	22 81       	ldd	r18, Z+2	; 0x02
    1472:	33 81       	ldd	r19, Z+3	; 0x03
    1474:	2e 0f       	add	r18, r30
    1476:	3f 1f       	adc	r19, r31
    1478:	e2 17       	cp	r30, r18
    147a:	f3 07       	cpc	r31, r19
    147c:	f8 f4       	brcc	.+62     	; 0x14bc <udc_update_iface_desc+0x70>
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	94 30       	cpi	r25, 0x04	; 4
    1482:	61 f4       	brne	.+24     	; 0x149c <udc_update_iface_desc+0x50>
    1484:	92 81       	ldd	r25, Z+2	; 0x02
    1486:	98 13       	cpse	r25, r24
    1488:	09 c0       	rjmp	.+18     	; 0x149c <udc_update_iface_desc+0x50>
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	96 13       	cpse	r25, r22
    148e:	06 c0       	rjmp	.+12     	; 0x149c <udc_update_iface_desc+0x50>
    1490:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    1494:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	08 95       	ret
    149c:	90 81       	ld	r25, Z
    149e:	e9 0f       	add	r30, r25
    14a0:	f1 1d       	adc	r31, r1
    14a2:	e2 17       	cp	r30, r18
    14a4:	f3 07       	cpc	r31, r19
    14a6:	58 f3       	brcs	.-42     	; 0x147e <udc_update_iface_desc+0x32>
    14a8:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    14ac:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	08 95       	ret
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	08 95       	ret
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	08 95       	ret
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	08 95       	ret

000014c0 <udc_iface_disable>:
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	c8 2f       	mov	r28, r24
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	be df       	rcall	.-132    	; 0x144c <udc_update_iface_desc>
    14d0:	18 2f       	mov	r17, r24
    14d2:	88 23       	and	r24, r24
    14d4:	81 f1       	breq	.+96     	; 0x1536 <udc_iface_disable+0x76>
    14d6:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    14da:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    14de:	ec 2f       	mov	r30, r28
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	12 96       	adiw	r26, 0x02	; 2
    14e8:	8d 91       	ld	r24, X+
    14ea:	9c 91       	ld	r25, X
    14ec:	13 97       	sbiw	r26, 0x03	; 3
    14ee:	e8 0f       	add	r30, r24
    14f0:	f9 1f       	adc	r31, r25
    14f2:	e0 80       	ld	r14, Z
    14f4:	f1 80       	ldd	r15, Z+1	; 0x01
    14f6:	d7 01       	movw	r26, r14
    14f8:	16 96       	adiw	r26, 0x06	; 6
    14fa:	ed 91       	ld	r30, X+
    14fc:	fc 91       	ld	r31, X
    14fe:	17 97       	sbiw	r26, 0x07	; 7
    1500:	09 95       	icall
    1502:	68 2f       	mov	r22, r24
    1504:	8c 2f       	mov	r24, r28
    1506:	a2 df       	rcall	.-188    	; 0x144c <udc_update_iface_desc>
    1508:	18 2f       	mov	r17, r24
    150a:	88 23       	and	r24, r24
    150c:	a1 f0       	breq	.+40     	; 0x1536 <udc_iface_disable+0x76>
    150e:	c0 91 ba 20 	lds	r28, 0x20BA	; 0x8020ba <udc_ptr_iface>
    1512:	d0 91 bb 20 	lds	r29, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    1516:	65 e0       	ldi	r22, 0x05	; 5
    1518:	ce 01       	movw	r24, r28
    151a:	60 df       	rcall	.-320    	; 0x13dc <udc_next_desc_in_iface>
    151c:	ec 01       	movw	r28, r24
    151e:	89 2b       	or	r24, r25
    1520:	21 f0       	breq	.+8      	; 0x152a <udc_iface_disable+0x6a>
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	0e 94 31 14 	call	0x2862	; 0x2862 <udd_ep_free>
    1528:	f6 cf       	rjmp	.-20     	; 0x1516 <udc_iface_disable+0x56>
    152a:	d7 01       	movw	r26, r14
    152c:	12 96       	adiw	r26, 0x02	; 2
    152e:	ed 91       	ld	r30, X+
    1530:	fc 91       	ld	r31, X
    1532:	13 97       	sbiw	r26, 0x03	; 3
    1534:	09 95       	icall
    1536:	81 2f       	mov	r24, r17
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	08 95       	ret

00001544 <udc_iface_enable>:
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	18 2f       	mov	r17, r24
    154c:	7f df       	rcall	.-258    	; 0x144c <udc_update_iface_desc>
    154e:	88 23       	and	r24, r24
    1550:	39 f1       	breq	.+78     	; 0x15a0 <udc_iface_enable+0x5c>
    1552:	c0 91 ba 20 	lds	r28, 0x20BA	; 0x8020ba <udc_ptr_iface>
    1556:	d0 91 bb 20 	lds	r29, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    155a:	65 e0       	ldi	r22, 0x05	; 5
    155c:	ce 01       	movw	r24, r28
    155e:	3e df       	rcall	.-388    	; 0x13dc <udc_next_desc_in_iface>
    1560:	ec 01       	movw	r28, r24
    1562:	89 2b       	or	r24, r25
    1564:	41 f0       	breq	.+16     	; 0x1576 <udc_iface_enable+0x32>
    1566:	4c 81       	ldd	r20, Y+4	; 0x04
    1568:	5d 81       	ldd	r21, Y+5	; 0x05
    156a:	6b 81       	ldd	r22, Y+3	; 0x03
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	b1 d7       	rcall	.+3938   	; 0x24d2 <udd_ep_alloc>
    1570:	81 11       	cpse	r24, r1
    1572:	f3 cf       	rjmp	.-26     	; 0x155a <udc_iface_enable+0x16>
    1574:	15 c0       	rjmp	.+42     	; 0x15a0 <udc_iface_enable+0x5c>
    1576:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    157a:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    157e:	e1 2f       	mov	r30, r17
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	12 96       	adiw	r26, 0x02	; 2
    1588:	8d 91       	ld	r24, X+
    158a:	9c 91       	ld	r25, X
    158c:	13 97       	sbiw	r26, 0x03	; 3
    158e:	e8 0f       	add	r30, r24
    1590:	f9 1f       	adc	r31, r25
    1592:	01 90       	ld	r0, Z+
    1594:	f0 81       	ld	r31, Z
    1596:	e0 2d       	mov	r30, r0
    1598:	01 90       	ld	r0, Z+
    159a:	f0 81       	ld	r31, Z
    159c:	e0 2d       	mov	r30, r0
    159e:	09 95       	icall
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	08 95       	ret

000015a8 <udc_get_interface_desc>:
    15a8:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udc_ptr_iface>
    15ac:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    15b0:	08 95       	ret

000015b2 <udc_start>:
    15b2:	fd c6       	rjmp	.+3578   	; 0x23ae <udd_enable>
    15b4:	08 95       	ret

000015b6 <udc_reset>:
    15b6:	cf 93       	push	r28
    15b8:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    15bc:	88 23       	and	r24, r24
    15be:	c1 f0       	breq	.+48     	; 0x15f0 <udc_reset+0x3a>
    15c0:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    15c4:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    15c8:	01 90       	ld	r0, Z+
    15ca:	f0 81       	ld	r31, Z
    15cc:	e0 2d       	mov	r30, r0
    15ce:	84 81       	ldd	r24, Z+4	; 0x04
    15d0:	88 23       	and	r24, r24
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <udc_reset+0x3a>
    15d4:	c0 e0       	ldi	r28, 0x00	; 0
    15d6:	8c 2f       	mov	r24, r28
    15d8:	73 df       	rcall	.-282    	; 0x14c0 <udc_iface_disable>
    15da:	cf 5f       	subi	r28, 0xFF	; 255
    15dc:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    15e0:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    15e4:	01 90       	ld	r0, Z+
    15e6:	f0 81       	ld	r31, Z
    15e8:	e0 2d       	mov	r30, r0
    15ea:	84 81       	ldd	r24, Z+4	; 0x04
    15ec:	c8 17       	cp	r28, r24
    15ee:	98 f3       	brcs	.-26     	; 0x15d6 <udc_reset+0x20>
    15f0:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <udc_num_configuration>
    15f4:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_device_status>
    15f8:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <udc_device_status+0x1>
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1600:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1602:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1606:	88 23       	and	r24, r24
    1608:	49 f1       	breq	.+82     	; 0x165c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    160a:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    160e:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1612:	ed 91       	ld	r30, X+
    1614:	fc 91       	ld	r31, X
    1616:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1618:	84 81       	ldd	r24, Z+4	; 0x04
    161a:	88 23       	and	r24, r24
    161c:	f9 f0       	breq	.+62     	; 0x165c <udc_sof_notify+0x5c>
    161e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1620:	ec 2f       	mov	r30, r28
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	12 96       	adiw	r26, 0x02	; 2
    162a:	8d 91       	ld	r24, X+
    162c:	9c 91       	ld	r25, X
    162e:	13 97       	sbiw	r26, 0x03	; 3
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	01 90       	ld	r0, Z+
    1636:	f0 81       	ld	r31, Z
    1638:	e0 2d       	mov	r30, r0
    163a:	00 84       	ldd	r0, Z+8	; 0x08
    163c:	f1 85       	ldd	r31, Z+9	; 0x09
    163e:	e0 2d       	mov	r30, r0
    1640:	30 97       	sbiw	r30, 0x00	; 0
    1642:	09 f0       	breq	.+2      	; 0x1646 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1644:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1646:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1648:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    164c:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1650:	ed 91       	ld	r30, X+
    1652:	fc 91       	ld	r31, X
    1654:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1656:	84 81       	ldd	r24, Z+4	; 0x04
    1658:	c8 17       	cp	r28, r24
    165a:	10 f3       	brcs	.-60     	; 0x1620 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1668:	ea e5       	ldi	r30, 0x5A	; 90
    166a:	f4 e2       	ldi	r31, 0x24	; 36
    166c:	12 86       	std	Z+10, r1	; 0x0a
    166e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1670:	14 86       	std	Z+12, r1	; 0x0c
    1672:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1674:	16 86       	std	Z+14, r1	; 0x0e
    1676:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1678:	80 81       	ld	r24, Z
    167a:	88 23       	and	r24, r24
    167c:	3c f4       	brge	.+14     	; 0x168c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    167e:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1682:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1686:	23 2b       	or	r18, r19
    1688:	09 f4       	brne	.+2      	; 0x168c <udc_process_setup+0x2c>
    168a:	68 c3       	rjmp	.+1744   	; 0x1d5c <udc_process_setup+0x6fc>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    168c:	80 76       	andi	r24, 0x60	; 96
    168e:	80 34       	cpi	r24, 0x40	; 64
    1690:	09 f0       	breq	.+2      	; 0x1694 <udc_process_setup+0x34>
    1692:	06 c1       	rjmp	.+524    	; 0x18a0 <udc_process_setup+0x240>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1694:	e0 91 5b 24 	lds	r30, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1698:	8e 2f       	mov	r24, r30
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	fc 01       	movw	r30, r24
    169e:	e0 5a       	subi	r30, 0xA0	; 160
    16a0:	f1 09       	sbc	r31, r1
    16a2:	e8 30       	cpi	r30, 0x08	; 8
    16a4:	f1 05       	cpc	r31, r1
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <udc_process_setup+0x4a>
    16a8:	f2 c0       	rjmp	.+484    	; 0x188e <udc_process_setup+0x22e>
    16aa:	e2 5f       	subi	r30, 0xF2	; 242
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    16b2:	00 00       	nop
    16b4:	57 c3       	rjmp	.+1710   	; 0x1d64 <udc_process_setup+0x704>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    16b6:	e0 e0       	ldi	r30, 0x00	; 0
    16b8:	f8 e0       	ldi	r31, 0x08	; 8
    16ba:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    16bc:	ca e5       	ldi	r28, 0x5A	; 90
    16be:	d4 e2       	ldi	r29, 0x24	; 36
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	9b 81       	ldd	r25, Y+3	; 0x03
    16c4:	86 ab       	std	Z+54, r24	; 0x36
    16c6:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	8f 70       	andi	r24, 0x0F	; 15
    16cc:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    16ce:	6e 81       	ldd	r22, Y+6	; 0x06
    16d0:	7f 81       	ldd	r23, Y+7	; 0x07
    16d2:	8a e5       	ldi	r24, 0x5A	; 90
    16d4:	92 e2       	ldi	r25, 0x22	; 34
    16d6:	f6 d6       	rcall	.+3564   	; 0x24c4 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    16d8:	8e 81       	ldd	r24, Y+6	; 0x06
    16da:	9f 81       	ldd	r25, Y+7	; 0x07
    16dc:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
    16e0:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
    16e4:	82 17       	cp	r24, r18
    16e6:	93 07       	cpc	r25, r19
    16e8:	09 f4       	brne	.+2      	; 0x16ec <udc_process_setup+0x8c>
    16ea:	3c c3       	rjmp	.+1656   	; 0x1d64 <udc_process_setup+0x704>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    16ec:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <dacBuf_len>
    16f0:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <dacBuf_len+0x1>
				switch(global_mode){
    16f4:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    16f8:	8e 2f       	mov	r24, r30
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	88 30       	cpi	r24, 0x08	; 8
    16fe:	91 05       	cpc	r25, r1
    1700:	08 f0       	brcs	.+2      	; 0x1704 <udc_process_setup+0xa4>
    1702:	c7 c0       	rjmp	.+398    	; 0x1892 <udc_process_setup+0x232>
    1704:	fc 01       	movw	r30, r24
    1706:	ea 5e       	subi	r30, 0xEA	; 234
    1708:	fe 4f       	sbci	r31, 0xFE	; 254
    170a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    170e:	0e 94 aa 02 	call	0x554	; 0x554 <tiny_dma_set_mode_0>
    1712:	28 c3       	rjmp	.+1616   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1714:	0e 94 1e 03 	call	0x63c	; 0x63c <tiny_dma_set_mode_1>
    1718:	25 c3       	rjmp	.+1610   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 2:
					tiny_dma_set_mode_2();
    171a:	09 d8       	rcall	.-4078   	; 0x72e <tiny_dma_set_mode_2>
    171c:	23 c3       	rjmp	.+1606   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 3:
					tiny_dma_set_mode_3();
    171e:	7b d8       	rcall	.-3850   	; 0x816 <tiny_dma_set_mode_3>
    1720:	21 c3       	rjmp	.+1602   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1722:	f6 d8       	rcall	.-3604   	; 0x910 <tiny_dma_set_mode_4>
    1724:	1f c3       	rjmp	.+1598   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1726:	6b d9       	rcall	.-3370   	; 0x9fe <tiny_dma_set_mode_5>
    1728:	1d c3       	rjmp	.+1594   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 6:
					tiny_dma_set_mode_6();
    172a:	b1 d9       	rcall	.-3230   	; 0xa8e <tiny_dma_set_mode_6>
    172c:	1b c3       	rjmp	.+1590   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 7:
					tiny_dma_set_mode_7();
    172e:	12 da       	rcall	.-3036   	; 0xb54 <tiny_dma_set_mode_7>
    1730:	19 c3       	rjmp	.+1586   	; 0x1d64 <udc_process_setup+0x704>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    1732:	e0 e4       	ldi	r30, 0x40	; 64
    1734:	f8 e0       	ldi	r31, 0x08	; 8
    1736:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1738:	ca e5       	ldi	r28, 0x5A	; 90
    173a:	d4 e2       	ldi	r29, 0x24	; 36
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	9b 81       	ldd	r25, Y+3	; 0x03
    1740:	86 ab       	std	Z+54, r24	; 0x36
    1742:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1744:	8c 81       	ldd	r24, Y+4	; 0x04
    1746:	8f 70       	andi	r24, 0x0F	; 15
    1748:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    174a:	6e 81       	ldd	r22, Y+6	; 0x06
    174c:	7f 81       	ldd	r23, Y+7	; 0x07
    174e:	8a e6       	ldi	r24, 0x6A	; 106
    1750:	94 e2       	ldi	r25, 0x24	; 36
    1752:	b8 d6       	rcall	.+3440   	; 0x24c4 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1754:	8e 81       	ldd	r24, Y+6	; 0x06
    1756:	9f 81       	ldd	r25, Y+7	; 0x07
    1758:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
    175c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
    1760:	82 17       	cp	r24, r18
    1762:	93 07       	cpc	r25, r19
    1764:	09 f4       	brne	.+2      	; 0x1768 <udc_process_setup+0x108>
    1766:	fe c2       	rjmp	.+1532   	; 0x1d64 <udc_process_setup+0x704>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1768:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <auxDacBufLen>
    176c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <auxDacBufLen+0x1>
				switch(global_mode){
    1770:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    1774:	8e 2f       	mov	r24, r30
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	91 05       	cpc	r25, r1
    177c:	08 f0       	brcs	.+2      	; 0x1780 <udc_process_setup+0x120>
    177e:	8b c0       	rjmp	.+278    	; 0x1896 <udc_process_setup+0x236>
    1780:	fc 01       	movw	r30, r24
    1782:	e2 5e       	subi	r30, 0xE2	; 226
    1784:	fe 4f       	sbci	r31, 0xFE	; 254
    1786:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    178a:	0e 94 aa 02 	call	0x554	; 0x554 <tiny_dma_set_mode_0>
    178e:	ea c2       	rjmp	.+1492   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1790:	0e 94 1e 03 	call	0x63c	; 0x63c <tiny_dma_set_mode_1>
    1794:	e7 c2       	rjmp	.+1486   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1796:	0e 94 97 03 	call	0x72e	; 0x72e <tiny_dma_set_mode_2>
    179a:	e4 c2       	rjmp	.+1480   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 3:
					tiny_dma_set_mode_3();
    179c:	3c d8       	rcall	.-3976   	; 0x816 <tiny_dma_set_mode_3>
    179e:	e2 c2       	rjmp	.+1476   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 4:
					tiny_dma_set_mode_4();
    17a0:	b7 d8       	rcall	.-3730   	; 0x910 <tiny_dma_set_mode_4>
    17a2:	e0 c2       	rjmp	.+1472   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 5:
					tiny_dma_set_mode_5();
    17a4:	2c d9       	rcall	.-3496   	; 0x9fe <tiny_dma_set_mode_5>
    17a6:	de c2       	rjmp	.+1468   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 6:
					tiny_dma_set_mode_6();
    17a8:	72 d9       	rcall	.-3356   	; 0xa8e <tiny_dma_set_mode_6>
    17aa:	dc c2       	rjmp	.+1464   	; 0x1d64 <udc_process_setup+0x704>
					break;
					case 7:
					tiny_dma_set_mode_7();
    17ac:	d3 d9       	rcall	.-3162   	; 0xb54 <tiny_dma_set_mode_7>
    17ae:	da c2       	rjmp	.+1460   	; 0x1d64 <udc_process_setup+0x704>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    17b0:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    17b4:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    17b8:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    17bc:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
    17c0:	d1 c2       	rjmp	.+1442   	; 0x1d64 <udc_process_setup+0x704>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    17c2:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    17c6:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    17ca:	cc c2       	rjmp	.+1432   	; 0x1d64 <udc_process_setup+0x704>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    17cc:	e0 91 5c 24 	lds	r30, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    17d0:	f0 91 5d 24 	lds	r31, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    17d4:	e8 30       	cpi	r30, 0x08	; 8
    17d6:	f1 05       	cpc	r31, r1
    17d8:	08 f0       	brcs	.+2      	; 0x17dc <udc_process_setup+0x17c>
    17da:	5f c0       	rjmp	.+190    	; 0x189a <udc_process_setup+0x23a>
    17dc:	ea 5d       	subi	r30, 0xDA	; 218
    17de:	fe 4f       	sbci	r31, 0xFE	; 254
    17e0:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	0e 94 30 02 	call	0x460	; 0x460 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    17ec:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    17f0:	0e 94 04 02 	call	0x408	; 0x408 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    17f4:	0e 94 aa 02 	call	0x554	; 0x554 <tiny_dma_set_mode_0>
    17f8:	b5 c2       	rjmp	.+1386   	; 0x1d64 <udc_process_setup+0x704>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0e 94 30 02 	call	0x460	; 0x460 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1802:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1806:	0e 94 04 02 	call	0x408	; 0x408 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    180a:	0e 94 1e 03 	call	0x63c	; 0x63c <tiny_dma_set_mode_1>
    180e:	aa c2       	rjmp	.+1364   	; 0x1d64 <udc_process_setup+0x704>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 30 02 	call	0x460	; 0x460 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1818:	ca e5       	ldi	r28, 0x5A	; 90
    181a:	d4 e2       	ldi	r29, 0x24	; 36
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	0e 94 04 02 	call	0x408	; 0x408 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	0e 94 13 02 	call	0x426	; 0x426 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    1828:	0e 94 97 03 	call	0x72e	; 0x72e <tiny_dma_set_mode_2>
    182c:	9b c2       	rjmp	.+1334   	; 0x1d64 <udc_process_setup+0x704>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    182e:	0e 94 0b 04 	call	0x816	; 0x816 <tiny_dma_set_mode_3>
    1832:	98 c2       	rjmp	.+1328   	; 0x1d64 <udc_process_setup+0x704>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    1834:	6d d8       	rcall	.-3878   	; 0x910 <tiny_dma_set_mode_4>
    1836:	96 c2       	rjmp	.+1324   	; 0x1d64 <udc_process_setup+0x704>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	0e 94 30 02 	call	0x460	; 0x460 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1840:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1844:	0e 94 04 02 	call	0x408	; 0x408 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    1848:	da d8       	rcall	.-3660   	; 0x9fe <tiny_dma_set_mode_5>
    184a:	8c c2       	rjmp	.+1304   	; 0x1d64 <udc_process_setup+0x704>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	0e 94 30 02 	call	0x460	; 0x460 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1854:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1858:	0e 94 04 02 	call	0x408	; 0x408 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    185c:	18 d9       	rcall	.-3536   	; 0xa8e <tiny_dma_set_mode_6>
    185e:	82 c2       	rjmp	.+1284   	; 0x1d64 <udc_process_setup+0x704>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1860:	62 e0       	ldi	r22, 0x02	; 2
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	0e 94 30 02 	call	0x460	; 0x460 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1868:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    186c:	80 68       	ori	r24, 0x80	; 128
    186e:	0e 94 04 02 	call	0x408	; 0x408 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    1872:	70 d9       	rcall	.-3360   	; 0xb54 <tiny_dma_set_mode_7>
    1874:	77 c2       	rjmp	.+1262   	; 0x1d64 <udc_process_setup+0x704>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1876:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    187a:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    187e:	72 c2       	rjmp	.+1252   	; 0x1d64 <udc_process_setup+0x704>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1880:	e9 e7       	ldi	r30, 0x79	; 121
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	88 ed       	ldi	r24, 0xD8	; 216
    1888:	f8 94       	cli
    188a:	84 bf       	out	0x34, r24	; 52
    188c:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	05 c0       	rjmp	.+10     	; 0x189c <udc_process_setup+0x23c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	03 c0       	rjmp	.+6      	; 0x189c <udc_process_setup+0x23c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	01 c0       	rjmp	.+2      	; 0x189c <udc_process_setup+0x23c>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    189a:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    189c:	81 11       	cpse	r24, r1
    189e:	65 c2       	rjmp	.+1226   	; 0x1d6a <udc_process_setup+0x70a>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    18a0:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    18a4:	98 2f       	mov	r25, r24
    18a6:	90 76       	andi	r25, 0x60	; 96
    18a8:	09 f0       	breq	.+2      	; 0x18ac <udc_process_setup+0x24c>
    18aa:	e1 c1       	rjmp	.+962    	; 0x1c6e <udc_process_setup+0x60e>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    18ac:	88 23       	and	r24, r24
    18ae:	0c f0       	brlt	.+2      	; 0x18b2 <udc_process_setup+0x252>
    18b0:	05 c1       	rjmp	.+522    	; 0x1abc <udc_process_setup+0x45c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    18b2:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    18b6:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    18ba:	21 15       	cp	r18, r1
    18bc:	31 05       	cpc	r19, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <udc_process_setup+0x262>
    18c0:	d6 c1       	rjmp	.+940    	; 0x1c6e <udc_process_setup+0x60e>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    18c2:	8f 71       	andi	r24, 0x1F	; 31
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <udc_process_setup+0x268>
    18c6:	a3 c0       	rjmp	.+326    	; 0x1a0e <udc_process_setup+0x3ae>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    18c8:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    18cc:	96 30       	cpi	r25, 0x06	; 6
    18ce:	79 f0       	breq	.+30     	; 0x18ee <udc_process_setup+0x28e>
    18d0:	98 30       	cpi	r25, 0x08	; 8
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <udc_process_setup+0x276>
    18d4:	92 c0       	rjmp	.+292    	; 0x19fa <udc_process_setup+0x39a>
    18d6:	91 11       	cpse	r25, r1
    18d8:	9a c0       	rjmp	.+308    	; 0x1a0e <udc_process_setup+0x3ae>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	09 f0       	breq	.+2      	; 0x18e2 <udc_process_setup+0x282>
    18e0:	c6 c1       	rjmp	.+908    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    18e2:	62 e0       	ldi	r22, 0x02	; 2
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	82 ec       	ldi	r24, 0xC2	; 194
    18e8:	90 e2       	ldi	r25, 0x20	; 32
    18ea:	ec d5       	rcall	.+3032   	; 0x24c4 <udd_set_setup_payload>
    18ec:	3d c2       	rjmp	.+1146   	; 0x1d68 <udc_process_setup+0x708>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    18ee:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    18f2:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    18f6:	29 2f       	mov	r18, r25
    18f8:	33 27       	eor	r19, r19
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	a9 f0       	breq	.+42     	; 0x192a <udc_process_setup+0x2ca>
    1900:	24 f4       	brge	.+8      	; 0x190a <udc_process_setup+0x2aa>
    1902:	21 30       	cpi	r18, 0x01	; 1
    1904:	31 05       	cpc	r19, r1
    1906:	41 f0       	breq	.+16     	; 0x1918 <udc_process_setup+0x2b8>
    1908:	a9 c1       	rjmp	.+850    	; 0x1c5c <udc_process_setup+0x5fc>
    190a:	23 30       	cpi	r18, 0x03	; 3
    190c:	31 05       	cpc	r19, r1
    190e:	d9 f1       	breq	.+118    	; 0x1986 <udc_process_setup+0x326>
    1910:	2f 30       	cpi	r18, 0x0F	; 15
    1912:	31 05       	cpc	r19, r1
    1914:	51 f1       	breq	.+84     	; 0x196a <udc_process_setup+0x30a>
    1916:	a2 c1       	rjmp	.+836    	; 0x1c5c <udc_process_setup+0x5fc>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1918:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <udc_config>
    191c:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1920:	dc 01       	movw	r26, r24
    1922:	6c 91       	ld	r22, X
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	ce d5       	rcall	.+2972   	; 0x24c4 <udd_set_setup_payload>
    1928:	59 c0       	rjmp	.+178    	; 0x19dc <udc_process_setup+0x37c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    192a:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    192e:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
    1932:	21 89       	ldd	r18, Z+17	; 0x11
    1934:	82 17       	cp	r24, r18
    1936:	08 f0       	brcs	.+2      	; 0x193a <udc_process_setup+0x2da>
    1938:	9a c1       	rjmp	.+820    	; 0x1c6e <udc_process_setup+0x60e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    193a:	99 27       	eor	r25, r25
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    1948:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    194c:	e8 0f       	add	r30, r24
    194e:	f9 1f       	adc	r31, r25
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1954:	fc 01       	movw	r30, r24
    1956:	62 81       	ldd	r22, Z+2	; 0x02
    1958:	73 81       	ldd	r23, Z+3	; 0x03
    195a:	b4 d5       	rcall	.+2920   	; 0x24c4 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    195c:	e0 91 62 24 	lds	r30, 0x2462	; 0x802462 <udd_g_ctrlreq+0x8>
    1960:	f0 91 63 24 	lds	r31, 0x2463	; 0x802463 <udd_g_ctrlreq+0x9>
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	81 83       	std	Z+1, r24	; 0x01
    1968:	39 c0       	rjmp	.+114    	; 0x19dc <udc_process_setup+0x37c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    196a:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config+0x4>
    196e:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x5>
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	09 f4       	brne	.+2      	; 0x1978 <udc_process_setup+0x318>
    1976:	7b c1       	rjmp	.+758    	; 0x1c6e <udc_process_setup+0x60e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1978:	dc 01       	movw	r26, r24
    197a:	12 96       	adiw	r26, 0x02	; 2
    197c:	6d 91       	ld	r22, X+
    197e:	7c 91       	ld	r23, X
    1980:	13 97       	sbiw	r26, 0x03	; 3
    1982:	a0 d5       	rcall	.+2880   	; 0x24c4 <udd_set_setup_payload>
    1984:	2b c0       	rjmp	.+86     	; 0x19dc <udc_process_setup+0x37c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1986:	99 27       	eor	r25, r25
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	91 05       	cpc	r25, r1
    198c:	71 f0       	breq	.+28     	; 0x19aa <udc_process_setup+0x34a>
    198e:	38 f0       	brcs	.+14     	; 0x199e <udc_process_setup+0x33e>
    1990:	02 97       	sbiw	r24, 0x02	; 2
    1992:	09 f0       	breq	.+2      	; 0x1996 <udc_process_setup+0x336>
    1994:	6c c1       	rjmp	.+728    	; 0x1c6e <udc_process_setup+0x60e>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1996:	8a e8       	ldi	r24, 0x8A	; 138
    1998:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    199a:	28 e1       	ldi	r18, 0x18	; 24
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <udc_process_setup+0x350>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    199e:	64 e0       	ldi	r22, 0x04	; 4
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	8e ea       	ldi	r24, 0xAE	; 174
    19a4:	90 e2       	ldi	r25, 0x20	; 32
    19a6:	8e d5       	rcall	.+2844   	; 0x24c4 <udd_set_setup_payload>
    19a8:	19 c0       	rjmp	.+50     	; 0x19dc <udc_process_setup+0x37c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    19aa:	83 ea       	ldi	r24, 0xA3	; 163
    19ac:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    19ae:	29 e0       	ldi	r18, 0x09	; 9
    19b0:	38 2f       	mov	r19, r24
    19b2:	aa e5       	ldi	r26, 0x5A	; 90
    19b4:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    19b6:	e8 2f       	mov	r30, r24
    19b8:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    19ba:	81 91       	ld	r24, Z+
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	8d 93       	st	X+, r24
    19c0:	9d 93       	st	X+, r25
    19c2:	8e 2f       	mov	r24, r30
    19c4:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    19c6:	82 17       	cp	r24, r18
    19c8:	c0 f3       	brcs	.-16     	; 0x19ba <udc_process_setup+0x35a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    19ca:	62 2f       	mov	r22, r18
    19cc:	66 0f       	add	r22, r22
    19ce:	6e 5f       	subi	r22, 0xFE	; 254
    19d0:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	88 e5       	ldi	r24, 0x58	; 88
    19d8:	90 e2       	ldi	r25, 0x20	; 32
    19da:	74 d5       	rcall	.+2792   	; 0x24c4 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    19dc:	ea e5       	ldi	r30, 0x5A	; 90
    19de:	f4 e2       	ldi	r31, 0x24	; 36
    19e0:	86 81       	ldd	r24, Z+6	; 0x06
    19e2:	97 81       	ldd	r25, Z+7	; 0x07
    19e4:	22 85       	ldd	r18, Z+10	; 0x0a
    19e6:	33 85       	ldd	r19, Z+11	; 0x0b
    19e8:	82 17       	cp	r24, r18
    19ea:	93 07       	cpc	r25, r19
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <udc_process_setup+0x390>
    19ee:	bc c1       	rjmp	.+888    	; 0x1d68 <udc_process_setup+0x708>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    19f0:	80 93 64 24 	sts	0x2464, r24	; 0x802464 <udd_g_ctrlreq+0xa>
    19f4:	90 93 65 24 	sts	0x2465, r25	; 0x802465 <udd_g_ctrlreq+0xb>
    19f8:	b7 c1       	rjmp	.+878    	; 0x1d68 <udc_process_setup+0x708>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    19fa:	21 30       	cpi	r18, 0x01	; 1
    19fc:	31 05       	cpc	r19, r1
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <udc_process_setup+0x3a2>
    1a00:	36 c1       	rjmp	.+620    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	8e eb       	ldi	r24, 0xBE	; 190
    1a08:	90 e2       	ldi	r25, 0x20	; 32
    1a0a:	5c d5       	rcall	.+2744   	; 0x24c4 <udd_set_setup_payload>
    1a0c:	ad c1       	rjmp	.+858    	; 0x1d68 <udc_process_setup+0x708>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	e1 f5       	brne	.+120    	; 0x1a8a <udc_process_setup+0x42a>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a12:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1a16:	9a 30       	cpi	r25, 0x0A	; 10
    1a18:	c1 f5       	brne	.+112    	; 0x1a8a <udc_process_setup+0x42a>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1a1a:	21 30       	cpi	r18, 0x01	; 1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <udc_process_setup+0x3c2>
    1a20:	26 c1       	rjmp	.+588    	; 0x1c6e <udc_process_setup+0x60e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1a22:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1a26:	88 23       	and	r24, r24
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <udc_process_setup+0x3cc>
    1a2a:	21 c1       	rjmp	.+578    	; 0x1c6e <udc_process_setup+0x60e>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a2c:	c0 91 5e 24 	lds	r28, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1a30:	d0 91 5f 24 	lds	r29, 0x245F	; 0x80245f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a34:	00 91 bc 20 	lds	r16, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1a38:	10 91 bd 20 	lds	r17, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	ed 91       	ld	r30, X+
    1a40:	fc 91       	ld	r31, X
    1a42:	84 81       	ldd	r24, Z+4	; 0x04
    1a44:	c8 17       	cp	r28, r24
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <udc_process_setup+0x3ea>
    1a48:	12 c1       	rjmp	.+548    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	8c 2f       	mov	r24, r28
    1a4e:	fe dc       	rcall	.-1540   	; 0x144c <udc_update_iface_desc>
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <udc_process_setup+0x3f6>
    1a54:	0c c1       	rjmp	.+536    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a56:	ce 01       	movw	r24, r28
    1a58:	99 27       	eor	r25, r25
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	d8 01       	movw	r26, r16
    1a60:	12 96       	adiw	r26, 0x02	; 2
    1a62:	ed 91       	ld	r30, X+
    1a64:	fc 91       	ld	r31, X
    1a66:	13 97       	sbiw	r26, 0x03	; 3
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1a6c:	01 90       	ld	r0, Z+
    1a6e:	f0 81       	ld	r31, Z
    1a70:	e0 2d       	mov	r30, r0
    1a72:	86 81       	ldd	r24, Z+6	; 0x06
    1a74:	97 81       	ldd	r25, Z+7	; 0x07
    1a76:	fc 01       	movw	r30, r24
    1a78:	09 95       	icall
    1a7a:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	80 ec       	ldi	r24, 0xC0	; 192
    1a84:	90 e2       	ldi	r25, 0x20	; 32
    1a86:	1e d5       	rcall	.+2620   	; 0x24c4 <udd_set_setup_payload>
    1a88:	6f c1       	rjmp	.+734    	; 0x1d68 <udc_process_setup+0x708>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <udc_process_setup+0x430>
    1a8e:	ef c0       	rjmp	.+478    	; 0x1c6e <udc_process_setup+0x60e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1a90:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1a94:	81 11       	cpse	r24, r1
    1a96:	e4 c0       	rjmp	.+456    	; 0x1c60 <udc_process_setup+0x600>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <udc_process_setup+0x440>
    1a9e:	e7 c0       	rjmp	.+462    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1aa0:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1aa4:	8b d5       	rcall	.+2838   	; 0x25bc <udd_ep_is_halted>
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <udc_ep_status.5522>
    1aac:	90 93 b9 20 	sts	0x20B9, r25	; 0x8020b9 <udc_ep_status.5522+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1ab0:	62 e0       	ldi	r22, 0x02	; 2
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	88 eb       	ldi	r24, 0xB8	; 184
    1ab6:	90 e2       	ldi	r25, 0x20	; 32
    1ab8:	05 d5       	rcall	.+2570   	; 0x24c4 <udd_set_setup_payload>
    1aba:	56 c1       	rjmp	.+684    	; 0x1d68 <udc_process_setup+0x708>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1abc:	8f 71       	andi	r24, 0x1F	; 31
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <udc_process_setup+0x462>
    1ac0:	83 c0       	rjmp	.+262    	; 0x1bc8 <udc_process_setup+0x568>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ac2:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1ac6:	93 30       	cpi	r25, 0x03	; 3
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <udc_process_setup+0x46c>
    1aca:	cc c0       	rjmp	.+408    	; 0x1c64 <udc_process_setup+0x604>
    1acc:	18 f4       	brcc	.+6      	; 0x1ad4 <udc_process_setup+0x474>
    1ace:	91 30       	cpi	r25, 0x01	; 1
    1ad0:	a1 f0       	breq	.+40     	; 0x1afa <udc_process_setup+0x49a>
    1ad2:	7a c0       	rjmp	.+244    	; 0x1bc8 <udc_process_setup+0x568>
    1ad4:	95 30       	cpi	r25, 0x05	; 5
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <udc_process_setup+0x47e>
    1ad8:	99 30       	cpi	r25, 0x09	; 9
    1ada:	39 f1       	breq	.+78     	; 0x1b2a <udc_process_setup+0x4ca>
    1adc:	75 c0       	rjmp	.+234    	; 0x1bc8 <udc_process_setup+0x568>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ade:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1ae2:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1ae6:	89 2b       	or	r24, r25
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <udc_process_setup+0x48c>
    1aea:	c1 c0       	rjmp	.+386    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1aec:	80 e2       	ldi	r24, 0x20	; 32
    1aee:	9a e0       	ldi	r25, 0x0A	; 10
    1af0:	80 93 66 24 	sts	0x2466, r24	; 0x802466 <udd_g_ctrlreq+0xc>
    1af4:	90 93 67 24 	sts	0x2467, r25	; 0x802467 <udd_g_ctrlreq+0xd>
    1af8:	37 c1       	rjmp	.+622    	; 0x1d68 <udc_process_setup+0x708>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1afa:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1afe:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1b02:	89 2b       	or	r24, r25
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <udc_process_setup+0x4a8>
    1b06:	b3 c0       	rjmp	.+358    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b08:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1b0c:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <udc_process_setup+0x4b6>
    1b14:	ac c0       	rjmp	.+344    	; 0x1c6e <udc_process_setup+0x60e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b16:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_device_status>
    1b1a:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <udc_device_status+0x1>
    1b1e:	8d 7f       	andi	r24, 0xFD	; 253
    1b20:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_device_status>
    1b24:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <udc_device_status+0x1>
    1b28:	1f c1       	rjmp	.+574    	; 0x1d68 <udc_process_setup+0x708>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1b2a:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1b2e:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1b32:	89 2b       	or	r24, r25
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <udc_process_setup+0x4d8>
    1b36:	9b c0       	rjmp	.+310    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1b38:	c2 d4       	rcall	.+2436   	; 0x24be <udd_getaddress>
    1b3a:	88 23       	and	r24, r24
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <udc_process_setup+0x4e0>
    1b3e:	97 c0       	rjmp	.+302    	; 0x1c6e <udc_process_setup+0x60e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1b40:	20 91 5c 24 	lds	r18, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1b44:	30 91 5d 24 	lds	r19, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1b48:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1b4a:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    1b4e:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1b52:	81 89       	ldd	r24, Z+17	; 0x11
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	82 17       	cp	r24, r18
    1b58:	93 07       	cpc	r25, r19
    1b5a:	08 f4       	brcc	.+2      	; 0x1b5e <udc_process_setup+0x4fe>
    1b5c:	88 c0       	rjmp	.+272    	; 0x1c6e <udc_process_setup+0x60e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1b5e:	2b dd       	rcall	.-1450   	; 0x15b6 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1b60:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1b64:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1b68:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <udc_process_setup+0x512>
    1b70:	fb c0       	rjmp	.+502    	; 0x1d68 <udc_process_setup+0x708>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1b72:	99 27       	eor	r25, r25
    1b74:	81 50       	subi	r24, 0x01	; 1
    1b76:	90 4c       	sbci	r25, 0xC0	; 192
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    1b84:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    1b88:	e8 0f       	add	r30, r24
    1b8a:	f9 1f       	adc	r31, r25
    1b8c:	e0 93 bc 20 	sts	0x20BC, r30	; 0x8020bc <udc_ptr_conf>
    1b90:	f0 93 bd 20 	sts	0x20BD, r31	; 0x8020bd <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b94:	01 90       	ld	r0, Z+
    1b96:	f0 81       	ld	r31, Z
    1b98:	e0 2d       	mov	r30, r0
    1b9a:	84 81       	ldd	r24, Z+4	; 0x04
    1b9c:	88 23       	and	r24, r24
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <udc_process_setup+0x542>
    1ba0:	e3 c0       	rjmp	.+454    	; 0x1d68 <udc_process_setup+0x708>
    1ba2:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	8c 2f       	mov	r24, r28
    1ba8:	cd dc       	rcall	.-1638   	; 0x1544 <udc_iface_enable>
    1baa:	88 23       	and	r24, r24
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <udc_process_setup+0x550>
    1bae:	5f c0       	rjmp	.+190    	; 0x1c6e <udc_process_setup+0x60e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1bb0:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bb2:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1bb6:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1bba:	01 90       	ld	r0, Z+
    1bbc:	f0 81       	ld	r31, Z
    1bbe:	e0 2d       	mov	r30, r0
    1bc0:	84 81       	ldd	r24, Z+4	; 0x04
    1bc2:	c8 17       	cp	r28, r24
    1bc4:	78 f3       	brcs	.-34     	; 0x1ba4 <udc_process_setup+0x544>
    1bc6:	d0 c0       	rjmp	.+416    	; 0x1d68 <udc_process_setup+0x708>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	e1 f4       	brne	.+56     	; 0x1c04 <udc_process_setup+0x5a4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1bcc:	90 91 5b 24 	lds	r25, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1bd0:	9b 30       	cpi	r25, 0x0B	; 11
    1bd2:	c1 f4       	brne	.+48     	; 0x1c04 <udc_process_setup+0x5a4>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1bd4:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1bd8:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1bdc:	89 2b       	or	r24, r25
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <udc_process_setup+0x582>
    1be0:	46 c0       	rjmp	.+140    	; 0x1c6e <udc_process_setup+0x60e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1be2:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1be6:	88 23       	and	r24, r24
    1be8:	09 f4       	brne	.+2      	; 0x1bec <udc_process_setup+0x58c>
    1bea:	41 c0       	rjmp	.+130    	; 0x1c6e <udc_process_setup+0x60e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1bec:	ea e5       	ldi	r30, 0x5A	; 90
    1bee:	f4 e2       	ldi	r31, 0x24	; 36
    1bf0:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1bf2:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1bf4:	8c 2f       	mov	r24, r28
    1bf6:	64 dc       	rcall	.-1848   	; 0x14c0 <udc_iface_disable>
    1bf8:	88 23       	and	r24, r24
    1bfa:	c9 f1       	breq	.+114    	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1bfc:	6d 2f       	mov	r22, r29
    1bfe:	8c 2f       	mov	r24, r28
    1c00:	a1 dc       	rcall	.-1726   	; 0x1544 <udc_iface_enable>
    1c02:	33 c0       	rjmp	.+102    	; 0x1c6a <udc_process_setup+0x60a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c04:	82 30       	cpi	r24, 0x02	; 2
    1c06:	99 f5       	brne	.+102    	; 0x1c6e <udc_process_setup+0x60e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c08:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udd_g_ctrlreq+0x1>
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	19 f0       	breq	.+6      	; 0x1c16 <udc_process_setup+0x5b6>
    1c10:	83 30       	cpi	r24, 0x03	; 3
    1c12:	89 f0       	breq	.+34     	; 0x1c36 <udc_process_setup+0x5d6>
    1c14:	29 c0       	rjmp	.+82     	; 0x1c68 <udc_process_setup+0x608>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c16:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1c1a:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1c1e:	89 2b       	or	r24, r25
    1c20:	31 f5       	brne	.+76     	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c22:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1c26:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1c2a:	89 2b       	or	r24, r25
    1c2c:	01 f5       	brne	.+64     	; 0x1c6e <udc_process_setup+0x60e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c2e:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1c32:	df d4       	rcall	.+2494   	; 0x25f2 <udd_ep_clear_halt>
    1c34:	1a c0       	rjmp	.+52     	; 0x1c6a <udc_process_setup+0x60a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1c36:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1c3a:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1c3e:	89 2b       	or	r24, r25
    1c40:	b1 f4       	brne	.+44     	; 0x1c6e <udc_process_setup+0x60e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c42:	80 91 5c 24 	lds	r24, 0x245C	; 0x80245c <udd_g_ctrlreq+0x2>
    1c46:	90 91 5d 24 	lds	r25, 0x245D	; 0x80245d <udd_g_ctrlreq+0x3>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	81 f4       	brne	.+32     	; 0x1c6e <udc_process_setup+0x60e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c4e:	ca e5       	ldi	r28, 0x5A	; 90
    1c50:	d4 e2       	ldi	r29, 0x24	; 36
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	bd d5       	rcall	.+2938   	; 0x27d0 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	20 d6       	rcall	.+3136   	; 0x289a <udd_ep_set_halt>
    1c5a:	07 c0       	rjmp	.+14     	; 0x1c6a <udc_process_setup+0x60a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <udc_process_setup+0x60a>
				break;
			}
		}
#endif
	}
	return false;
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <udc_process_setup+0x60a>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	01 c0       	rjmp	.+2      	; 0x1c6a <udc_process_setup+0x60a>
				break;
			}
		}
#endif
	}
	return false;
    1c68:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1c6a:	81 11       	cpse	r24, r1
    1c6c:	7e c0       	rjmp	.+252    	; 0x1d6a <udc_process_setup+0x70a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1c6e:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    1c72:	8f 71       	andi	r24, 0x1F	; 31
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	71 f5       	brne	.+92     	; 0x1cd4 <udc_process_setup+0x674>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1c78:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1c7c:	88 23       	and	r24, r24
    1c7e:	51 f1       	breq	.+84     	; 0x1cd4 <udc_process_setup+0x674>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c80:	00 91 5e 24 	lds	r16, 0x245E	; 0x80245e <udd_g_ctrlreq+0x4>
    1c84:	10 91 5f 24 	lds	r17, 0x245F	; 0x80245f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c88:	c0 91 bc 20 	lds	r28, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1c8c:	d0 91 bd 20 	lds	r29, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1c90:	e8 81       	ld	r30, Y
    1c92:	f9 81       	ldd	r31, Y+1	; 0x01
    1c94:	84 81       	ldd	r24, Z+4	; 0x04
    1c96:	08 17       	cp	r16, r24
    1c98:	e8 f4       	brcc	.+58     	; 0x1cd4 <udc_process_setup+0x674>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	80 2f       	mov	r24, r16
    1c9e:	d6 db       	rcall	.-2132   	; 0x144c <udc_update_iface_desc>
    1ca0:	88 23       	and	r24, r24
    1ca2:	c1 f0       	breq	.+48     	; 0x1cd4 <udc_process_setup+0x674>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	ff 27       	eor	r31, r31
    1ca8:	cf 01       	movw	r24, r30
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1cb2:	e8 0f       	add	r30, r24
    1cb4:	f9 1f       	adc	r31, r25
    1cb6:	c0 81       	ld	r28, Z
    1cb8:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1cba:	ee 81       	ldd	r30, Y+6	; 0x06
    1cbc:	ff 81       	ldd	r31, Y+7	; 0x07
    1cbe:	09 95       	icall
    1cc0:	68 2f       	mov	r22, r24
    1cc2:	80 2f       	mov	r24, r16
    1cc4:	c3 db       	rcall	.-2170   	; 0x144c <udc_update_iface_desc>
    1cc6:	88 23       	and	r24, r24
    1cc8:	29 f0       	breq	.+10     	; 0x1cd4 <udc_process_setup+0x674>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1cca:	ec 81       	ldd	r30, Y+4	; 0x04
    1ccc:	fd 81       	ldd	r31, Y+5	; 0x05
    1cce:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	4b c0       	rjmp	.+150    	; 0x1d6a <udc_process_setup+0x70a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1cd4:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    1cd8:	8f 71       	andi	r24, 0x1F	; 31
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <udc_process_setup+0x680>
    1cde:	40 c0       	rjmp	.+128    	; 0x1d60 <udc_process_setup+0x700>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ce0:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1ce4:	88 23       	and	r24, r24
    1ce6:	b1 f1       	breq	.+108    	; 0x1d54 <udc_process_setup+0x6f4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ce8:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1cec:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1cf0:	ed 91       	ld	r30, X+
    1cf2:	fc 91       	ld	r31, X
    1cf4:	11 97       	sbiw	r26, 0x01	; 1
    1cf6:	84 81       	ldd	r24, Z+4	; 0x04
    1cf8:	88 23       	and	r24, r24
    1cfa:	71 f1       	breq	.+92     	; 0x1d58 <udc_process_setup+0x6f8>
    1cfc:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1cfe:	ec 2f       	mov	r30, r28
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	12 96       	adiw	r26, 0x02	; 2
    1d08:	8d 91       	ld	r24, X+
    1d0a:	9c 91       	ld	r25, X
    1d0c:	13 97       	sbiw	r26, 0x03	; 3
    1d0e:	e8 0f       	add	r30, r24
    1d10:	f9 1f       	adc	r31, r25
    1d12:	00 81       	ld	r16, Z
    1d14:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d16:	d8 01       	movw	r26, r16
    1d18:	16 96       	adiw	r26, 0x06	; 6
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	17 97       	sbiw	r26, 0x07	; 7
    1d20:	09 95       	icall
    1d22:	68 2f       	mov	r22, r24
    1d24:	8c 2f       	mov	r24, r28
    1d26:	92 db       	rcall	.-2268   	; 0x144c <udc_update_iface_desc>
    1d28:	88 23       	and	r24, r24
    1d2a:	f9 f0       	breq	.+62     	; 0x1d6a <udc_process_setup+0x70a>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1d2c:	d8 01       	movw	r26, r16
    1d2e:	14 96       	adiw	r26, 0x04	; 4
    1d30:	ed 91       	ld	r30, X+
    1d32:	fc 91       	ld	r31, X
    1d34:	15 97       	sbiw	r26, 0x05	; 5
    1d36:	09 95       	icall
    1d38:	81 11       	cpse	r24, r1
    1d3a:	17 c0       	rjmp	.+46     	; 0x1d6a <udc_process_setup+0x70a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1d3c:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d3e:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1d42:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1d46:	ed 91       	ld	r30, X+
    1d48:	fc 91       	ld	r31, X
    1d4a:	11 97       	sbiw	r26, 0x01	; 1
    1d4c:	94 81       	ldd	r25, Z+4	; 0x04
    1d4e:	c9 17       	cp	r28, r25
    1d50:	b0 f2       	brcs	.-84     	; 0x1cfe <udc_process_setup+0x69e>
    1d52:	0b c0       	rjmp	.+22     	; 0x1d6a <udc_process_setup+0x70a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	09 c0       	rjmp	.+18     	; 0x1d6a <udc_process_setup+0x70a>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	07 c0       	rjmp	.+14     	; 0x1d6a <udc_process_setup+0x70a>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	05 c0       	rjmp	.+10     	; 0x1d6a <udc_process_setup+0x70a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <udc_process_setup+0x70a>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <udc_process_setup+0x70a>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	08 95       	ret

00001d74 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1d74:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1d76:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1d78:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1d7a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1d7c:	60 83       	st	Z, r22
	ret                             // Return to caller
    1d7e:	08 95       	ret

00001d80 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1d80:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1d84:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1d86:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1d88:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1d8c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1d8e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1d92:	08 95       	ret

00001d94 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1d94:	81 11       	cpse	r24, r1
    1d96:	22 c0       	rjmp	.+68     	; 0x1ddc <udd_sleep_mode+0x48>
    1d98:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_b_idle>
    1d9c:	99 23       	and	r25, r25
    1d9e:	d9 f0       	breq	.+54     	; 0x1dd6 <udd_sleep_mode+0x42>
    1da0:	90 91 47 2c 	lds	r25, 0x2C47	; 0x802c47 <sleepmgr_locks+0x1>
    1da4:	91 11       	cpse	r25, r1
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <udd_sleep_mode+0x16>
    1da8:	ff cf       	rjmp	.-2      	; 0x1da8 <udd_sleep_mode+0x14>
    1daa:	2f b7       	in	r18, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	e6 e4       	ldi	r30, 0x46	; 70
    1db0:	fc e2       	ldi	r31, 0x2C	; 44
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	91 50       	subi	r25, 0x01	; 1
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	2f bf       	out	0x3f, r18	; 63
    1dba:	0d c0       	rjmp	.+26     	; 0x1dd6 <udd_sleep_mode+0x42>
    1dbc:	90 91 47 2c 	lds	r25, 0x2C47	; 0x802c47 <sleepmgr_locks+0x1>
    1dc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <udd_sleep_mode+0x32>
    1dc4:	ff cf       	rjmp	.-2      	; 0x1dc4 <udd_sleep_mode+0x30>
    1dc6:	2f b7       	in	r18, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	e6 e4       	ldi	r30, 0x46	; 70
    1dcc:	fc e2       	ldi	r31, 0x2C	; 44
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	9f 5f       	subi	r25, 0xFF	; 255
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	2f bf       	out	0x3f, r18	; 63
    1dd6:	80 93 54 22 	sts	0x2254, r24	; 0x802254 <udd_b_idle>
    1dda:	08 95       	ret
    1ddc:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_b_idle>
    1de0:	99 23       	and	r25, r25
    1de2:	61 f3       	breq	.-40     	; 0x1dbc <udd_sleep_mode+0x28>
    1de4:	f8 cf       	rjmp	.-16     	; 0x1dd6 <udd_sleep_mode+0x42>

00001de6 <udd_ctrl_init>:
    1de6:	0f 93       	push	r16
    1de8:	e8 ec       	ldi	r30, 0xC8	; 200
    1dea:	f4 e0       	ldi	r31, 0x04	; 4
    1dec:	80 81       	ld	r24, Z
    1dee:	8f 7d       	andi	r24, 0xDF	; 223
    1df0:	80 83       	st	Z, r24
    1df2:	80 81       	ld	r24, Z
    1df4:	8f 7d       	andi	r24, 0xDF	; 223
    1df6:	80 83       	st	Z, r24
    1df8:	e8 e1       	ldi	r30, 0x18	; 24
    1dfa:	f2 e2       	ldi	r31, 0x22	; 34
    1dfc:	02 e0       	ldi	r16, 0x02	; 2
    1dfe:	05 93       	las	Z, r16
    1e00:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udd_sram+0x1a>
    1e04:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udd_sram+0x1b>
    1e08:	00 e2       	ldi	r16, 0x20	; 32
    1e0a:	06 93       	lac	Z, r16
    1e0c:	00 e4       	ldi	r16, 0x40	; 64
    1e0e:	06 93       	lac	Z, r16
    1e10:	e0 e1       	ldi	r30, 0x10	; 16
    1e12:	f2 e2       	ldi	r31, 0x22	; 34
    1e14:	00 e2       	ldi	r16, 0x20	; 32
    1e16:	06 93       	lac	Z, r16
    1e18:	00 e4       	ldi	r16, 0x40	; 64
    1e1a:	06 93       	lac	Z, r16
    1e1c:	ea e5       	ldi	r30, 0x5A	; 90
    1e1e:	f4 e2       	ldi	r31, 0x24	; 36
    1e20:	14 86       	std	Z+12, r1	; 0x0c
    1e22:	15 86       	std	Z+13, r1	; 0x0d
    1e24:	16 86       	std	Z+14, r1	; 0x0e
    1e26:	17 86       	std	Z+15, r1	; 0x0f
    1e28:	12 86       	std	Z+10, r1	; 0x0a
    1e2a:	13 86       	std	Z+11, r1	; 0x0b
    1e2c:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ep_control_state>
    1e30:	0f 91       	pop	r16
    1e32:	08 95       	ret

00001e34 <udd_ctrl_stall_data>:
    1e34:	0f 93       	push	r16
    1e36:	85 e0       	ldi	r24, 0x05	; 5
    1e38:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1e3c:	e9 e1       	ldi	r30, 0x19	; 25
    1e3e:	f2 e2       	ldi	r31, 0x22	; 34
    1e40:	04 e0       	ldi	r16, 0x04	; 4
    1e42:	05 93       	las	Z, r16
    1e44:	e1 e1       	ldi	r30, 0x11	; 17
    1e46:	f2 e2       	ldi	r31, 0x22	; 34
    1e48:	04 e0       	ldi	r16, 0x04	; 4
    1e4a:	05 93       	las	Z, r16
    1e4c:	0f 91       	pop	r16
    1e4e:	08 95       	ret

00001e50 <udd_ctrl_send_zlp_in>:
    1e50:	0f 93       	push	r16
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1e58:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udd_sram+0x1a>
    1e5c:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udd_sram+0x1b>
    1e60:	e8 e1       	ldi	r30, 0x18	; 24
    1e62:	f2 e2       	ldi	r31, 0x22	; 34
    1e64:	02 e0       	ldi	r16, 0x02	; 2
    1e66:	06 93       	lac	Z, r16
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <udd_ctrl_endofrequest>:
    1e6c:	e0 91 66 24 	lds	r30, 0x2466	; 0x802466 <udd_g_ctrlreq+0xc>
    1e70:	f0 91 67 24 	lds	r31, 0x2467	; 0x802467 <udd_g_ctrlreq+0xd>
    1e74:	30 97       	sbiw	r30, 0x00	; 0
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <udd_ctrl_endofrequest+0xe>
    1e78:	09 95       	icall
    1e7a:	08 95       	ret

00001e7c <udd_ctrl_in_sent>:
    1e7c:	0f 93       	push	r16
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    1e86:	83 30       	cpi	r24, 0x03	; 3
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <udd_ctrl_in_sent+0x14>
    1e8a:	f0 df       	rcall	.-32     	; 0x1e6c <udd_ctrl_endofrequest>
    1e8c:	ac df       	rcall	.-168    	; 0x1de6 <udd_ctrl_init>
    1e8e:	5e c0       	rjmp	.+188    	; 0x1f4c <udd_ctrl_in_sent+0xd0>
    1e90:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1e94:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1e98:	c0 91 64 24 	lds	r28, 0x2464	; 0x802464 <udd_g_ctrlreq+0xa>
    1e9c:	d0 91 65 24 	lds	r29, 0x2465	; 0x802465 <udd_g_ctrlreq+0xb>
    1ea0:	c8 1b       	sub	r28, r24
    1ea2:	d9 0b       	sbc	r29, r25
    1ea4:	71 f5       	brne	.+92     	; 0x1f02 <udd_ctrl_in_sent+0x86>
    1ea6:	20 91 fd 21 	lds	r18, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1eaa:	30 91 fe 21 	lds	r19, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1eae:	82 0f       	add	r24, r18
    1eb0:	93 1f       	adc	r25, r19
    1eb2:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1eb6:	90 93 fe 21 	sts	0x21FE, r25	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1eba:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    1ebe:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    1ec2:	82 17       	cp	r24, r18
    1ec4:	93 07       	cpc	r25, r19
    1ec6:	21 f0       	breq	.+8      	; 0x1ed0 <udd_ctrl_in_sent+0x54>
    1ec8:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <b_shortpacket.5272>
    1ecc:	88 23       	and	r24, r24
    1ece:	41 f0       	breq	.+16     	; 0x1ee0 <udd_ctrl_in_sent+0x64>
    1ed0:	84 e0       	ldi	r24, 0x04	; 4
    1ed2:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1ed6:	e0 e1       	ldi	r30, 0x10	; 16
    1ed8:	f2 e2       	ldi	r31, 0x22	; 34
    1eda:	02 e0       	ldi	r16, 0x02	; 2
    1edc:	06 93       	lac	Z, r16
    1ede:	36 c0       	rjmp	.+108    	; 0x1f4c <udd_ctrl_in_sent+0xd0>
    1ee0:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <udd_g_ctrlreq+0xe>
    1ee4:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <udd_g_ctrlreq+0xf>
    1ee8:	30 97       	sbiw	r30, 0x00	; 0
    1eea:	99 f0       	breq	.+38     	; 0x1f12 <udd_ctrl_in_sent+0x96>
    1eec:	09 95       	icall
    1eee:	88 23       	and	r24, r24
    1ef0:	81 f0       	breq	.+32     	; 0x1f12 <udd_ctrl_in_sent+0x96>
    1ef2:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1ef6:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1efa:	c0 91 64 24 	lds	r28, 0x2464	; 0x802464 <udd_g_ctrlreq+0xa>
    1efe:	d0 91 65 24 	lds	r29, 0x2465	; 0x802465 <udd_g_ctrlreq+0xb>
    1f02:	c0 34       	cpi	r28, 0x40	; 64
    1f04:	d1 05       	cpc	r29, r1
    1f06:	28 f0       	brcs	.+10     	; 0x1f12 <udd_ctrl_in_sent+0x96>
    1f08:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <b_shortpacket.5272>
    1f0c:	c0 e4       	ldi	r28, 0x40	; 64
    1f0e:	d0 e0       	ldi	r29, 0x00	; 0
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <udd_ctrl_in_sent+0x9c>
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <b_shortpacket.5272>
    1f18:	e0 e0       	ldi	r30, 0x00	; 0
    1f1a:	f2 e2       	ldi	r31, 0x22	; 34
    1f1c:	c2 8f       	std	Z+26, r28	; 0x1a
    1f1e:	d3 8f       	std	Z+27, r29	; 0x1b
    1f20:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1f24:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1f28:	20 91 62 24 	lds	r18, 0x2462	; 0x802462 <udd_g_ctrlreq+0x8>
    1f2c:	30 91 63 24 	lds	r19, 0x2463	; 0x802463 <udd_g_ctrlreq+0x9>
    1f30:	28 0f       	add	r18, r24
    1f32:	39 1f       	adc	r19, r25
    1f34:	24 8f       	std	Z+28, r18	; 0x1c
    1f36:	35 8f       	std	Z+29, r19	; 0x1d
    1f38:	c8 0f       	add	r28, r24
    1f3a:	d9 1f       	adc	r29, r25
    1f3c:	c0 93 fb 21 	sts	0x21FB, r28	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1f40:	d0 93 fc 21 	sts	0x21FC, r29	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1f44:	e8 e1       	ldi	r30, 0x18	; 24
    1f46:	f2 e2       	ldi	r31, 0x22	; 34
    1f48:	02 e0       	ldi	r16, 0x02	; 2
    1f4a:	06 93       	lac	Z, r16
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <udd_ep_get_size>:
    1f54:	fc 01       	movw	r30, r24
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	e8 2f       	mov	r30, r24
    1f5a:	e7 70       	andi	r30, 0x07	; 7
    1f5c:	8e 2f       	mov	r24, r30
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	fc 01       	movw	r30, r24
    1f62:	31 97       	sbiw	r30, 0x01	; 1
    1f64:	e7 30       	cpi	r30, 0x07	; 7
    1f66:	f1 05       	cpc	r31, r1
    1f68:	c0 f4       	brcc	.+48     	; 0x1f9a <udd_ep_get_size+0x46>
    1f6a:	e2 5d       	subi	r30, 0xD2	; 210
    1f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6e:	7a c6       	rjmp	.+3316   	; 0x2c64 <__tablejump2__>
    1f70:	80 e1       	ldi	r24, 0x10	; 16
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	08 95       	ret
    1f76:	80 e2       	ldi	r24, 0x20	; 32
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	08 95       	ret
    1f7c:	80 e4       	ldi	r24, 0x40	; 64
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	08 95       	ret
    1f82:	80 e8       	ldi	r24, 0x80	; 128
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	08 95       	ret
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	08 95       	ret
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	08 95       	ret
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	93 e0       	ldi	r25, 0x03	; 3
    1f98:	08 95       	ret
    1f9a:	88 e0       	ldi	r24, 0x08	; 8
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	08 95       	ret

00001fa0 <udd_ep_get_job>:
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	2f 70       	andi	r18, 0x0F	; 15
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	22 0f       	add	r18, r18
    1fa8:	33 1f       	adc	r19, r19
    1faa:	08 2e       	mov	r0, r24
    1fac:	00 0c       	add	r0, r0
    1fae:	99 0b       	sbc	r25, r25
    1fb0:	88 27       	eor	r24, r24
    1fb2:	99 0f       	add	r25, r25
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	99 27       	eor	r25, r25
    1fb8:	82 0f       	add	r24, r18
    1fba:	93 1f       	adc	r25, r19
    1fbc:	02 97       	sbiw	r24, 0x02	; 2
    1fbe:	9c 01       	movw	r18, r24
    1fc0:	22 0f       	add	r18, r18
    1fc2:	33 1f       	adc	r19, r19
    1fc4:	22 0f       	add	r18, r18
    1fc6:	33 1f       	adc	r19, r19
    1fc8:	22 0f       	add	r18, r18
    1fca:	33 1f       	adc	r19, r19
    1fcc:	82 0f       	add	r24, r18
    1fce:	93 1f       	adc	r25, r19
    1fd0:	8b 57       	subi	r24, 0x7B	; 123
    1fd2:	9e 4d       	sbci	r25, 0xDE	; 222
    1fd4:	08 95       	ret

00001fd6 <udd_ctrl_interrupt_tc_setup>:
    1fd6:	0f 93       	push	r16
    1fd8:	cf 93       	push	r28
    1fda:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1fde:	80 ff       	sbrs	r24, 0
    1fe0:	62 c0       	rjmp	.+196    	; 0x20a6 <udd_ctrl_interrupt_tc_setup+0xd0>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1fe8:	e0 e1       	ldi	r30, 0x10	; 16
    1fea:	f2 e2       	ldi	r31, 0x22	; 34
    1fec:	00 e8       	ldi	r16, 0x80	; 128
    1fee:	06 93       	lac	Z, r16
    1ff0:	e8 e1       	ldi	r30, 0x18	; 24
    1ff2:	f2 e2       	ldi	r31, 0x22	; 34
    1ff4:	00 e8       	ldi	r16, 0x80	; 128
    1ff6:	06 93       	lac	Z, r16
    1ff8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1ffc:	e0 e1       	ldi	r30, 0x10	; 16
    1ffe:	f2 e2       	ldi	r31, 0x22	; 34
    2000:	00 e1       	ldi	r16, 0x10	; 16
    2002:	06 93       	lac	Z, r16
    2004:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    2008:	88 23       	and	r24, r24
    200a:	29 f0       	breq	.+10     	; 0x2016 <udd_ctrl_interrupt_tc_setup+0x40>
    200c:	83 50       	subi	r24, 0x03	; 3
    200e:	82 30       	cpi	r24, 0x02	; 2
    2010:	08 f4       	brcc	.+2      	; 0x2014 <udd_ctrl_interrupt_tc_setup+0x3e>
    2012:	2c df       	rcall	.-424    	; 0x1e6c <udd_ctrl_endofrequest>
    2014:	e8 de       	rcall	.-560    	; 0x1de6 <udd_ctrl_init>
    2016:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <udd_sram+0x12>
    201a:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <udd_sram+0x13>
    201e:	08 97       	sbiw	r24, 0x08	; 8
    2020:	09 f0       	breq	.+2      	; 0x2024 <udd_ctrl_interrupt_tc_setup+0x4e>
    2022:	43 c0       	rjmp	.+134    	; 0x20aa <udd_ctrl_interrupt_tc_setup+0xd4>
    2024:	88 e0       	ldi	r24, 0x08	; 8
    2026:	eb eb       	ldi	r30, 0xBB	; 187
    2028:	f1 e2       	ldi	r31, 0x21	; 33
    202a:	aa e5       	ldi	r26, 0x5A	; 90
    202c:	b4 e2       	ldi	r27, 0x24	; 36
    202e:	01 90       	ld	r0, Z+
    2030:	0d 92       	st	X+, r0
    2032:	8a 95       	dec	r24
    2034:	e1 f7       	brne	.-8      	; 0x202e <udd_ctrl_interrupt_tc_setup+0x58>
    2036:	e8 ec       	ldi	r30, 0xC8	; 200
    2038:	f4 e0       	ldi	r31, 0x04	; 4
    203a:	80 81       	ld	r24, Z
    203c:	80 62       	ori	r24, 0x20	; 32
    203e:	80 83       	st	Z, r24
    2040:	80 81       	ld	r24, Z
    2042:	80 62       	ori	r24, 0x20	; 32
    2044:	80 83       	st	Z, r24
    2046:	0c db       	rcall	.-2536   	; 0x1660 <udc_process_setup>
    2048:	c8 2f       	mov	r28, r24
    204a:	81 11       	cpse	r24, r1
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <udd_ctrl_interrupt_tc_setup+0x7e>
    204e:	f2 de       	rcall	.-540    	; 0x1e34 <udd_ctrl_stall_data>
    2050:	c1 e0       	ldi	r28, 0x01	; 1
    2052:	2c c0       	rjmp	.+88     	; 0x20ac <udd_ctrl_interrupt_tc_setup+0xd6>
    2054:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udd_g_ctrlreq>
    2058:	88 23       	and	r24, r24
    205a:	6c f4       	brge	.+26     	; 0x2076 <udd_ctrl_interrupt_tc_setup+0xa0>
    205c:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2060:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    2064:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2068:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    2072:	04 df       	rcall	.-504    	; 0x1e7c <udd_ctrl_in_sent>
    2074:	1b c0       	rjmp	.+54     	; 0x20ac <udd_ctrl_interrupt_tc_setup+0xd6>
    2076:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    207a:	90 91 61 24 	lds	r25, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    207e:	89 2b       	or	r24, r25
    2080:	11 f4       	brne	.+4      	; 0x2086 <udd_ctrl_interrupt_tc_setup+0xb0>
    2082:	e6 de       	rcall	.-564    	; 0x1e50 <udd_ctrl_send_zlp_in>
    2084:	13 c0       	rjmp	.+38     	; 0x20ac <udd_ctrl_interrupt_tc_setup+0xd6>
    2086:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    208a:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    208e:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2092:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    209c:	e0 e1       	ldi	r30, 0x10	; 16
    209e:	f2 e2       	ldi	r31, 0x22	; 34
    20a0:	02 e0       	ldi	r16, 0x02	; 2
    20a2:	06 93       	lac	Z, r16
    20a4:	03 c0       	rjmp	.+6      	; 0x20ac <udd_ctrl_interrupt_tc_setup+0xd6>
    20a6:	c0 e0       	ldi	r28, 0x00	; 0
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <udd_ctrl_interrupt_tc_setup+0xd6>
    20aa:	c1 e0       	ldi	r28, 0x01	; 1
    20ac:	8c 2f       	mov	r24, r28
    20ae:	cf 91       	pop	r28
    20b0:	0f 91       	pop	r16
    20b2:	08 95       	ret

000020b4 <udd_ep_trans_complet>:
    20b4:	8f 92       	push	r8
    20b6:	9f 92       	push	r9
    20b8:	af 92       	push	r10
    20ba:	bf 92       	push	r11
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	d8 2e       	mov	r13, r24
    20cc:	69 df       	rcall	.-302    	; 0x1fa0 <udd_ep_get_job>
    20ce:	8c 01       	movw	r16, r24
    20d0:	bd 2c       	mov	r11, r13
    20d2:	bb 1c       	adc	r11, r11
    20d4:	bb 24       	eor	r11, r11
    20d6:	bb 1c       	adc	r11, r11
    20d8:	cd 2d       	mov	r28, r13
    20da:	cf 70       	andi	r28, 0x0F	; 15
    20dc:	d0 e0       	ldi	r29, 0x00	; 0
    20de:	cc 0f       	add	r28, r28
    20e0:	dd 1f       	adc	r29, r29
    20e2:	cb 0d       	add	r28, r11
    20e4:	d1 1d       	adc	r29, r1
    20e6:	ce 01       	movw	r24, r28
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	9c 01       	movw	r18, r24
    20f6:	20 5f       	subi	r18, 0xF0	; 240
    20f8:	3d 4d       	sbci	r19, 0xDD	; 221
    20fa:	79 01       	movw	r14, r18
    20fc:	c9 01       	movw	r24, r18
    20fe:	2a df       	rcall	.-428    	; 0x1f54 <udd_ep_get_size>
    2100:	4c 01       	movw	r8, r24
    2102:	bb 20       	and	r11, r11
    2104:	09 f4       	brne	.+2      	; 0x2108 <udd_ep_trans_complet+0x54>
    2106:	70 c0       	rjmp	.+224    	; 0x21e8 <udd_ep_trans_complet+0x134>
    2108:	fe 01       	movw	r30, r28
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	ee 0f       	add	r30, r30
    2110:	ff 1f       	adc	r31, r31
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	e0 50       	subi	r30, 0x00	; 0
    2118:	fe 4d       	sbci	r31, 0xDE	; 222
    211a:	26 89       	ldd	r18, Z+22	; 0x16
    211c:	37 89       	ldd	r19, Z+23	; 0x17
    211e:	d8 01       	movw	r26, r16
    2120:	15 96       	adiw	r26, 0x05	; 5
    2122:	8d 91       	ld	r24, X+
    2124:	9c 91       	ld	r25, X
    2126:	16 97       	sbiw	r26, 0x06	; 6
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	15 96       	adiw	r26, 0x05	; 5
    212e:	8d 93       	st	X+, r24
    2130:	9c 93       	st	X, r25
    2132:	16 97       	sbiw	r26, 0x06	; 6
    2134:	13 96       	adiw	r26, 0x03	; 3
    2136:	2d 91       	ld	r18, X+
    2138:	3c 91       	ld	r19, X
    213a:	14 97       	sbiw	r26, 0x04	; 4
    213c:	82 17       	cp	r24, r18
    213e:	93 07       	cpc	r25, r19
    2140:	09 f4       	brne	.+2      	; 0x2144 <udd_ep_trans_complet+0x90>
    2142:	3c c0       	rjmp	.+120    	; 0x21bc <udd_ep_trans_complet+0x108>
    2144:	28 1b       	sub	r18, r24
    2146:	39 0b       	sbc	r19, r25
    2148:	21 15       	cp	r18, r1
    214a:	b4 e0       	ldi	r27, 0x04	; 4
    214c:	3b 07       	cpc	r19, r27
    214e:	38 f0       	brcs	.+14     	; 0x215e <udd_ep_trans_complet+0xaa>
    2150:	2f ef       	ldi	r18, 0xFF	; 255
    2152:	33 e0       	ldi	r19, 0x03	; 3
    2154:	c9 01       	movw	r24, r18
    2156:	b4 01       	movw	r22, r8
    2158:	71 d5       	rcall	.+2786   	; 0x2c3c <__udivmodhi4>
    215a:	28 1b       	sub	r18, r24
    215c:	39 0b       	sbc	r19, r25
    215e:	f8 01       	movw	r30, r16
    2160:	80 81       	ld	r24, Z
    2162:	81 ff       	sbrs	r24, 1
    2164:	09 c0       	rjmp	.+18     	; 0x2178 <udd_ep_trans_complet+0xc4>
    2166:	c9 01       	movw	r24, r18
    2168:	b4 01       	movw	r22, r8
    216a:	68 d5       	rcall	.+2768   	; 0x2c3c <__udivmodhi4>
    216c:	41 e0       	ldi	r20, 0x01	; 1
    216e:	89 2b       	or	r24, r25
    2170:	09 f0       	breq	.+2      	; 0x2174 <udd_ep_trans_complet+0xc0>
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	84 2f       	mov	r24, r20
    2176:	01 c0       	rjmp	.+2      	; 0x217a <udd_ep_trans_complet+0xc6>
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	d8 01       	movw	r26, r16
    217c:	9c 91       	ld	r25, X
    217e:	80 fb       	bst	r24, 0
    2180:	91 f9       	bld	r25, 1
    2182:	9c 93       	st	X, r25
    2184:	cc 0f       	add	r28, r28
    2186:	dd 1f       	adc	r29, r29
    2188:	cc 0f       	add	r28, r28
    218a:	dd 1f       	adc	r29, r29
    218c:	cc 0f       	add	r28, r28
    218e:	dd 1f       	adc	r29, r29
    2190:	c0 50       	subi	r28, 0x00	; 0
    2192:	de 4d       	sbci	r29, 0xDE	; 222
    2194:	1e 8a       	std	Y+22, r1	; 0x16
    2196:	1f 8a       	std	Y+23, r1	; 0x17
    2198:	2a 8b       	std	Y+18, r18	; 0x12
    219a:	3b 8b       	std	Y+19, r19	; 0x13
    219c:	11 96       	adiw	r26, 0x01	; 1
    219e:	2d 91       	ld	r18, X+
    21a0:	3c 91       	ld	r19, X
    21a2:	12 97       	sbiw	r26, 0x02	; 2
    21a4:	15 96       	adiw	r26, 0x05	; 5
    21a6:	8d 91       	ld	r24, X+
    21a8:	9c 91       	ld	r25, X
    21aa:	16 97       	sbiw	r26, 0x06	; 6
    21ac:	82 0f       	add	r24, r18
    21ae:	93 1f       	adc	r25, r19
    21b0:	8c 8b       	std	Y+20, r24	; 0x14
    21b2:	9d 8b       	std	Y+21, r25	; 0x15
    21b4:	f7 01       	movw	r30, r14
    21b6:	02 e0       	ldi	r16, 0x02	; 2
    21b8:	06 93       	lac	Z, r16
    21ba:	ca c0       	rjmp	.+404    	; 0x2350 <udd_ep_trans_complet+0x29c>
    21bc:	d8 01       	movw	r26, r16
    21be:	8c 91       	ld	r24, X
    21c0:	81 ff       	sbrs	r24, 1
    21c2:	b3 c0       	rjmp	.+358    	; 0x232a <udd_ep_trans_complet+0x276>
    21c4:	8d 7f       	andi	r24, 0xFD	; 253
    21c6:	8c 93       	st	X, r24
    21c8:	cc 0f       	add	r28, r28
    21ca:	dd 1f       	adc	r29, r29
    21cc:	cc 0f       	add	r28, r28
    21ce:	dd 1f       	adc	r29, r29
    21d0:	cc 0f       	add	r28, r28
    21d2:	dd 1f       	adc	r29, r29
    21d4:	c0 50       	subi	r28, 0x00	; 0
    21d6:	de 4d       	sbci	r29, 0xDE	; 222
    21d8:	1e 8a       	std	Y+22, r1	; 0x16
    21da:	1f 8a       	std	Y+23, r1	; 0x17
    21dc:	1a 8a       	std	Y+18, r1	; 0x12
    21de:	1b 8a       	std	Y+19, r1	; 0x13
    21e0:	f7 01       	movw	r30, r14
    21e2:	02 e0       	ldi	r16, 0x02	; 2
    21e4:	06 93       	lac	Z, r16
    21e6:	b4 c0       	rjmp	.+360    	; 0x2350 <udd_ep_trans_complet+0x29c>
    21e8:	fe 01       	movw	r30, r28
    21ea:	ee 0f       	add	r30, r30
    21ec:	ff 1f       	adc	r31, r31
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	e0 50       	subi	r30, 0x00	; 0
    21f8:	fe 4d       	sbci	r31, 0xDE	; 222
    21fa:	a2 88       	ldd	r10, Z+18	; 0x12
    21fc:	b3 88       	ldd	r11, Z+19	; 0x13
    21fe:	d8 01       	movw	r26, r16
    2200:	8c 91       	ld	r24, X
    2202:	82 ff       	sbrs	r24, 2
    2204:	19 c0       	rjmp	.+50     	; 0x2238 <udd_ep_trans_complet+0x184>
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	ed 91       	ld	r30, X+
    220a:	fc 91       	ld	r31, X
    220c:	12 97       	sbiw	r26, 0x02	; 2
    220e:	15 96       	adiw	r26, 0x05	; 5
    2210:	2d 91       	ld	r18, X+
    2212:	3c 91       	ld	r19, X
    2214:	16 97       	sbiw	r26, 0x06	; 6
    2216:	13 96       	adiw	r26, 0x03	; 3
    2218:	8d 91       	ld	r24, X+
    221a:	9c 91       	ld	r25, X
    221c:	14 97       	sbiw	r26, 0x04	; 4
    221e:	b4 01       	movw	r22, r8
    2220:	0d d5       	rcall	.+2586   	; 0x2c3c <__udivmodhi4>
    2222:	b0 e4       	ldi	r27, 0x40	; 64
    2224:	db 9e       	mul	r13, r27
    2226:	b0 01       	movw	r22, r0
    2228:	11 24       	eor	r1, r1
    222a:	6b 57       	subi	r22, 0x7B	; 123
    222c:	7f 4d       	sbci	r23, 0xDF	; 223
    222e:	ac 01       	movw	r20, r24
    2230:	cf 01       	movw	r24, r30
    2232:	82 0f       	add	r24, r18
    2234:	93 1f       	adc	r25, r19
    2236:	1c d5       	rcall	.+2616   	; 0x2c70 <memcpy>
    2238:	f8 01       	movw	r30, r16
    223a:	25 81       	ldd	r18, Z+5	; 0x05
    223c:	36 81       	ldd	r19, Z+6	; 0x06
    223e:	2a 0d       	add	r18, r10
    2240:	3b 1d       	adc	r19, r11
    2242:	25 83       	std	Z+5, r18	; 0x05
    2244:	36 83       	std	Z+6, r19	; 0x06
    2246:	83 81       	ldd	r24, Z+3	; 0x03
    2248:	94 81       	ldd	r25, Z+4	; 0x04
    224a:	82 17       	cp	r24, r18
    224c:	93 07       	cpc	r25, r19
    224e:	68 f4       	brcc	.+26     	; 0x226a <udd_ep_trans_complet+0x1b6>
    2250:	85 83       	std	Z+5, r24	; 0x05
    2252:	96 83       	std	Z+6, r25	; 0x06
    2254:	cc 0f       	add	r28, r28
    2256:	dd 1f       	adc	r29, r29
    2258:	cc 0f       	add	r28, r28
    225a:	dd 1f       	adc	r29, r29
    225c:	cc 0f       	add	r28, r28
    225e:	dd 1f       	adc	r29, r29
    2260:	c0 50       	subi	r28, 0x00	; 0
    2262:	de 4d       	sbci	r29, 0xDE	; 222
    2264:	8e 89       	ldd	r24, Y+22	; 0x16
    2266:	9f 89       	ldd	r25, Y+23	; 0x17
    2268:	60 c0       	rjmp	.+192    	; 0x232a <udd_ep_trans_complet+0x276>
    226a:	fe 01       	movw	r30, r28
    226c:	ee 0f       	add	r30, r30
    226e:	ff 1f       	adc	r31, r31
    2270:	ee 0f       	add	r30, r30
    2272:	ff 1f       	adc	r31, r31
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	e0 50       	subi	r30, 0x00	; 0
    227a:	fe 4d       	sbci	r31, 0xDE	; 222
    227c:	46 89       	ldd	r20, Z+22	; 0x16
    227e:	57 89       	ldd	r21, Z+23	; 0x17
    2280:	4a 15       	cp	r20, r10
    2282:	5b 05       	cpc	r21, r11
    2284:	09 f0       	breq	.+2      	; 0x2288 <udd_ep_trans_complet+0x1d4>
    2286:	51 c0       	rjmp	.+162    	; 0x232a <udd_ep_trans_complet+0x276>
    2288:	28 17       	cp	r18, r24
    228a:	39 07       	cpc	r19, r25
    228c:	09 f4       	brne	.+2      	; 0x2290 <udd_ep_trans_complet+0x1dc>
    228e:	4d c0       	rjmp	.+154    	; 0x232a <udd_ep_trans_complet+0x276>
    2290:	ac 01       	movw	r20, r24
    2292:	42 1b       	sub	r20, r18
    2294:	53 0b       	sbc	r21, r19
    2296:	9a 01       	movw	r18, r20
    2298:	21 15       	cp	r18, r1
    229a:	54 e0       	ldi	r21, 0x04	; 4
    229c:	35 07       	cpc	r19, r21
    229e:	50 f0       	brcs	.+20     	; 0x22b4 <udd_ep_trans_complet+0x200>
    22a0:	2f ef       	ldi	r18, 0xFF	; 255
    22a2:	33 e0       	ldi	r19, 0x03	; 3
    22a4:	c9 01       	movw	r24, r18
    22a6:	b4 01       	movw	r22, r8
    22a8:	c9 d4       	rcall	.+2450   	; 0x2c3c <__udivmodhi4>
    22aa:	d9 01       	movw	r26, r18
    22ac:	a8 1b       	sub	r26, r24
    22ae:	b9 0b       	sbc	r27, r25
    22b0:	cd 01       	movw	r24, r26
    22b2:	07 c0       	rjmp	.+14     	; 0x22c2 <udd_ep_trans_complet+0x20e>
    22b4:	c9 01       	movw	r24, r18
    22b6:	b4 01       	movw	r22, r8
    22b8:	c1 d4       	rcall	.+2434   	; 0x2c3c <__udivmodhi4>
    22ba:	f9 01       	movw	r30, r18
    22bc:	e8 1b       	sub	r30, r24
    22be:	f9 0b       	sbc	r31, r25
    22c0:	cf 01       	movw	r24, r30
    22c2:	fe 01       	movw	r30, r28
    22c4:	ee 0f       	add	r30, r30
    22c6:	ff 1f       	adc	r31, r31
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	e0 50       	subi	r30, 0x00	; 0
    22d2:	fe 4d       	sbci	r31, 0xDE	; 222
    22d4:	12 8a       	std	Z+18, r1	; 0x12
    22d6:	13 8a       	std	Z+19, r1	; 0x13
    22d8:	88 15       	cp	r24, r8
    22da:	99 05       	cpc	r25, r9
    22dc:	78 f4       	brcc	.+30     	; 0x22fc <udd_ep_trans_complet+0x248>
    22de:	d8 01       	movw	r26, r16
    22e0:	8c 91       	ld	r24, X
    22e2:	84 60       	ori	r24, 0x04	; 4
    22e4:	8c 93       	st	X, r24
    22e6:	b0 e4       	ldi	r27, 0x40	; 64
    22e8:	db 9e       	mul	r13, r27
    22ea:	c0 01       	movw	r24, r0
    22ec:	11 24       	eor	r1, r1
    22ee:	8b 57       	subi	r24, 0x7B	; 123
    22f0:	9f 4d       	sbci	r25, 0xDF	; 223
    22f2:	84 8b       	std	Z+20, r24	; 0x14
    22f4:	95 8b       	std	Z+21, r25	; 0x15
    22f6:	86 8a       	std	Z+22, r8	; 0x16
    22f8:	97 8a       	std	Z+23, r9	; 0x17
    22fa:	13 c0       	rjmp	.+38     	; 0x2322 <udd_ep_trans_complet+0x26e>
    22fc:	f8 01       	movw	r30, r16
    22fe:	41 81       	ldd	r20, Z+1	; 0x01
    2300:	52 81       	ldd	r21, Z+2	; 0x02
    2302:	25 81       	ldd	r18, Z+5	; 0x05
    2304:	36 81       	ldd	r19, Z+6	; 0x06
    2306:	24 0f       	add	r18, r20
    2308:	35 1f       	adc	r19, r21
    230a:	cc 0f       	add	r28, r28
    230c:	dd 1f       	adc	r29, r29
    230e:	cc 0f       	add	r28, r28
    2310:	dd 1f       	adc	r29, r29
    2312:	cc 0f       	add	r28, r28
    2314:	dd 1f       	adc	r29, r29
    2316:	c0 50       	subi	r28, 0x00	; 0
    2318:	de 4d       	sbci	r29, 0xDE	; 222
    231a:	2c 8b       	std	Y+20, r18	; 0x14
    231c:	3d 8b       	std	Y+21, r19	; 0x15
    231e:	8e 8b       	std	Y+22, r24	; 0x16
    2320:	9f 8b       	std	Y+23, r25	; 0x17
    2322:	f7 01       	movw	r30, r14
    2324:	02 e0       	ldi	r16, 0x02	; 2
    2326:	06 93       	lac	Z, r16
    2328:	13 c0       	rjmp	.+38     	; 0x2350 <udd_ep_trans_complet+0x29c>
    232a:	d8 01       	movw	r26, r16
    232c:	8c 91       	ld	r24, X
    232e:	80 ff       	sbrs	r24, 0
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <udd_ep_trans_complet+0x29c>
    2332:	8e 7f       	andi	r24, 0xFE	; 254
    2334:	8c 93       	st	X, r24
    2336:	17 96       	adiw	r26, 0x07	; 7
    2338:	ed 91       	ld	r30, X+
    233a:	fc 91       	ld	r31, X
    233c:	18 97       	sbiw	r26, 0x08	; 8
    233e:	30 97       	sbiw	r30, 0x00	; 0
    2340:	39 f0       	breq	.+14     	; 0x2350 <udd_ep_trans_complet+0x29c>
    2342:	15 96       	adiw	r26, 0x05	; 5
    2344:	6d 91       	ld	r22, X+
    2346:	7c 91       	ld	r23, X
    2348:	16 97       	sbiw	r26, 0x06	; 6
    234a:	4d 2d       	mov	r20, r13
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	09 95       	icall
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	bf 90       	pop	r11
    2360:	af 90       	pop	r10
    2362:	9f 90       	pop	r9
    2364:	8f 90       	pop	r8
    2366:	08 95       	ret

00002368 <udd_attach>:
    2368:	cf 93       	push	r28
    236a:	cf b7       	in	r28, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	11 dd       	rcall	.-1502   	; 0x1d94 <udd_sleep_mode>
    2372:	ea ec       	ldi	r30, 0xCA	; 202
    2374:	f4 e0       	ldi	r31, 0x04	; 4
    2376:	80 e4       	ldi	r24, 0x40	; 64
    2378:	80 83       	st	Z, r24
    237a:	80 e2       	ldi	r24, 0x20	; 32
    237c:	80 83       	st	Z, r24
    237e:	e1 ec       	ldi	r30, 0xC1	; 193
    2380:	f4 e0       	ldi	r31, 0x04	; 4
    2382:	80 81       	ld	r24, Z
    2384:	81 60       	ori	r24, 0x01	; 1
    2386:	80 83       	st	Z, r24
    2388:	a9 ec       	ldi	r26, 0xC9	; 201
    238a:	b4 e0       	ldi	r27, 0x04	; 4
    238c:	8c 91       	ld	r24, X
    238e:	82 60       	ori	r24, 0x02	; 2
    2390:	8c 93       	st	X, r24
    2392:	e8 ec       	ldi	r30, 0xC8	; 200
    2394:	f4 e0       	ldi	r31, 0x04	; 4
    2396:	80 81       	ld	r24, Z
    2398:	80 64       	ori	r24, 0x40	; 64
    239a:	80 83       	st	Z, r24
    239c:	8c 91       	ld	r24, X
    239e:	81 60       	ori	r24, 0x01	; 1
    23a0:	8c 93       	st	X, r24
    23a2:	80 81       	ld	r24, Z
    23a4:	80 68       	ori	r24, 0x80	; 128
    23a6:	80 83       	st	Z, r24
    23a8:	cf bf       	out	0x3f, r28	; 63
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <udd_enable>:
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	c0 e6       	ldi	r28, 0x60	; 96
    23b4:	d0 e0       	ldi	r29, 0x00	; 0
    23b6:	18 82       	st	Y, r1
    23b8:	80 e3       	ldi	r24, 0x30	; 48
    23ba:	0e 94 59 09 	call	0x12b2	; 0x12b2 <sysclk_enable_usb>
    23be:	e0 ec       	ldi	r30, 0xC0	; 192
    23c0:	f4 e0       	ldi	r31, 0x04	; 4
    23c2:	80 81       	ld	r24, Z
    23c4:	80 64       	ori	r24, 0x40	; 64
    23c6:	80 83       	st	Z, r24
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	88 83       	st	Y, r24
    23cc:	cf b7       	in	r28, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	fc 01       	movw	r30, r24
    23d6:	ee 0f       	add	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	e0 50       	subi	r30, 0x00	; 0
    23e4:	fe 4d       	sbci	r31, 0xDE	; 222
    23e6:	11 8a       	std	Z+17, r1	; 0x11
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	88 30       	cpi	r24, 0x08	; 8
    23ec:	91 05       	cpc	r25, r1
    23ee:	91 f7       	brne	.-28     	; 0x23d4 <udd_enable+0x26>
    23f0:	e5 e8       	ldi	r30, 0x85	; 133
    23f2:	f1 e2       	ldi	r31, 0x21	; 33
    23f4:	80 81       	ld	r24, Z
    23f6:	8e 7f       	andi	r24, 0xFE	; 254
    23f8:	80 83       	st	Z, r24
    23fa:	ee e8       	ldi	r30, 0x8E	; 142
    23fc:	f1 e2       	ldi	r31, 0x21	; 33
    23fe:	80 81       	ld	r24, Z
    2400:	8e 7f       	andi	r24, 0xFE	; 254
    2402:	80 83       	st	Z, r24
    2404:	e7 e9       	ldi	r30, 0x97	; 151
    2406:	f1 e2       	ldi	r31, 0x21	; 33
    2408:	80 81       	ld	r24, Z
    240a:	8e 7f       	andi	r24, 0xFE	; 254
    240c:	80 83       	st	Z, r24
    240e:	e0 ea       	ldi	r30, 0xA0	; 160
    2410:	f1 e2       	ldi	r31, 0x21	; 33
    2412:	80 81       	ld	r24, Z
    2414:	8e 7f       	andi	r24, 0xFE	; 254
    2416:	80 83       	st	Z, r24
    2418:	e9 ea       	ldi	r30, 0xA9	; 169
    241a:	f1 e2       	ldi	r31, 0x21	; 33
    241c:	80 81       	ld	r24, Z
    241e:	8e 7f       	andi	r24, 0xFE	; 254
    2420:	80 83       	st	Z, r24
    2422:	e2 eb       	ldi	r30, 0xB2	; 178
    2424:	f1 e2       	ldi	r31, 0x21	; 33
    2426:	80 81       	ld	r24, Z
    2428:	8e 7f       	andi	r24, 0xFE	; 254
    242a:	80 83       	st	Z, r24
    242c:	6a e1       	ldi	r22, 0x1A	; 26
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	a6 dc       	rcall	.-1716   	; 0x1d80 <nvm_read_byte>
    2434:	8f 3f       	cpi	r24, 0xFF	; 255
    2436:	19 f0       	breq	.+6      	; 0x243e <udd_enable+0x90>
    2438:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    243c:	03 c0       	rjmp	.+6      	; 0x2444 <udd_enable+0x96>
    243e:	8f e1       	ldi	r24, 0x1F	; 31
    2440:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2444:	6b e1       	ldi	r22, 0x1B	; 27
    2446:	70 e0       	ldi	r23, 0x00	; 0
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	9a dc       	rcall	.-1740   	; 0x1d80 <nvm_read_byte>
    244c:	8f 3f       	cpi	r24, 0xFF	; 255
    244e:	19 f0       	breq	.+6      	; 0x2456 <udd_enable+0xa8>
    2450:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2454:	03 c0       	rjmp	.+6      	; 0x245c <udd_enable+0xae>
    2456:	8f e1       	ldi	r24, 0x1F	; 31
    2458:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    245c:	e0 ec       	ldi	r30, 0xC0	; 192
    245e:	f4 e0       	ldi	r31, 0x04	; 4
    2460:	80 81       	ld	r24, Z
    2462:	83 60       	ori	r24, 0x03	; 3
    2464:	80 83       	st	Z, r24
    2466:	80 81       	ld	r24, Z
    2468:	80 68       	ori	r24, 0x80	; 128
    246a:	80 83       	st	Z, r24
    246c:	80 81       	ld	r24, Z
    246e:	80 61       	ori	r24, 0x10	; 16
    2470:	80 83       	st	Z, r24
    2472:	80 e1       	ldi	r24, 0x10	; 16
    2474:	92 e2       	ldi	r25, 0x22	; 34
    2476:	86 83       	std	Z+6, r24	; 0x06
    2478:	97 83       	std	Z+7, r25	; 0x07
    247a:	80 81       	ld	r24, Z
    247c:	80 62       	ori	r24, 0x20	; 32
    247e:	80 83       	st	Z, r24
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2486:	e8 ec       	ldi	r30, 0xC8	; 200
    2488:	f4 e0       	ldi	r31, 0x04	; 4
    248a:	80 81       	ld	r24, Z
    248c:	82 60       	ori	r24, 0x02	; 2
    248e:	80 83       	st	Z, r24
    2490:	10 92 54 22 	sts	0x2254, r1	; 0x802254 <udd_b_idle>
    2494:	80 91 4b 2c 	lds	r24, 0x2C4B	; 0x802c4b <sleepmgr_locks+0x5>
    2498:	8f 3f       	cpi	r24, 0xFF	; 255
    249a:	09 f4       	brne	.+2      	; 0x249e <udd_enable+0xf0>
    249c:	ff cf       	rjmp	.-2      	; 0x249c <udd_enable+0xee>
    249e:	9f b7       	in	r25, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	e6 e4       	ldi	r30, 0x46	; 70
    24a4:	fc e2       	ldi	r31, 0x2C	; 44
    24a6:	85 81       	ldd	r24, Z+5	; 0x05
    24a8:	8f 5f       	subi	r24, 0xFF	; 255
    24aa:	85 83       	std	Z+5, r24	; 0x05
    24ac:	9f bf       	out	0x3f, r25	; 63
    24ae:	5c df       	rcall	.-328    	; 0x2368 <udd_attach>
    24b0:	cf bf       	out	0x3f, r28	; 63
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	08 95       	ret

000024b8 <udd_set_address>:
    24b8:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    24bc:	08 95       	ret

000024be <udd_getaddress>:
    24be:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    24c2:	08 95       	ret

000024c4 <udd_set_setup_payload>:
    24c4:	ea e5       	ldi	r30, 0x5A	; 90
    24c6:	f4 e2       	ldi	r31, 0x24	; 36
    24c8:	80 87       	std	Z+8, r24	; 0x08
    24ca:	91 87       	std	Z+9, r25	; 0x09
    24cc:	62 87       	std	Z+10, r22	; 0x0a
    24ce:	73 87       	std	Z+11, r23	; 0x0b
    24d0:	08 95       	ret

000024d2 <udd_ep_alloc>:
    24d2:	28 2f       	mov	r18, r24
    24d4:	2f 70       	andi	r18, 0x0F	; 15
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	22 0f       	add	r18, r18
    24da:	33 1f       	adc	r19, r19
    24dc:	08 2e       	mov	r0, r24
    24de:	00 0c       	add	r0, r0
    24e0:	99 0b       	sbc	r25, r25
    24e2:	88 27       	eor	r24, r24
    24e4:	99 0f       	add	r25, r25
    24e6:	88 1f       	adc	r24, r24
    24e8:	99 27       	eor	r25, r25
    24ea:	82 0f       	add	r24, r18
    24ec:	93 1f       	adc	r25, r19
    24ee:	fc 01       	movw	r30, r24
    24f0:	ee 0f       	add	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	ee 0f       	add	r30, r30
    24f6:	ff 1f       	adc	r31, r31
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	e0 50       	subi	r30, 0x00	; 0
    24fe:	fe 4d       	sbci	r31, 0xDE	; 222
    2500:	21 89       	ldd	r18, Z+17	; 0x11
    2502:	20 7c       	andi	r18, 0xC0	; 192
    2504:	09 f0       	breq	.+2      	; 0x2508 <udd_ep_alloc+0x36>
    2506:	58 c0       	rjmp	.+176    	; 0x25b8 <udd_ep_alloc+0xe6>
    2508:	63 70       	andi	r22, 0x03	; 3
    250a:	61 30       	cpi	r22, 0x01	; 1
    250c:	11 f0       	breq	.+4      	; 0x2512 <udd_ep_alloc+0x40>
    250e:	18 f4       	brcc	.+6      	; 0x2516 <udd_ep_alloc+0x44>
    2510:	04 c0       	rjmp	.+8      	; 0x251a <udd_ep_alloc+0x48>
    2512:	20 ec       	ldi	r18, 0xC0	; 192
    2514:	03 c0       	rjmp	.+6      	; 0x251c <udd_ep_alloc+0x4a>
    2516:	20 e8       	ldi	r18, 0x80	; 128
    2518:	01 c0       	rjmp	.+2      	; 0x251c <udd_ep_alloc+0x4a>
    251a:	20 e4       	ldi	r18, 0x40	; 64
    251c:	40 38       	cpi	r20, 0x80	; 128
    251e:	51 05       	cpc	r21, r1
    2520:	e9 f0       	breq	.+58     	; 0x255c <udd_ep_alloc+0x8a>
    2522:	50 f4       	brcc	.+20     	; 0x2538 <udd_ep_alloc+0x66>
    2524:	40 32       	cpi	r20, 0x20	; 32
    2526:	51 05       	cpc	r21, r1
    2528:	a9 f0       	breq	.+42     	; 0x2554 <udd_ep_alloc+0x82>
    252a:	40 34       	cpi	r20, 0x40	; 64
    252c:	51 05       	cpc	r21, r1
    252e:	a1 f0       	breq	.+40     	; 0x2558 <udd_ep_alloc+0x86>
    2530:	40 31       	cpi	r20, 0x10	; 16
    2532:	51 05       	cpc	r21, r1
    2534:	d9 f4       	brne	.+54     	; 0x256c <udd_ep_alloc+0x9a>
    2536:	0c c0       	rjmp	.+24     	; 0x2550 <udd_ep_alloc+0x7e>
    2538:	41 15       	cp	r20, r1
    253a:	32 e0       	ldi	r19, 0x02	; 2
    253c:	53 07       	cpc	r21, r19
    253e:	91 f0       	breq	.+36     	; 0x2564 <udd_ep_alloc+0x92>
    2540:	4f 3f       	cpi	r20, 0xFF	; 255
    2542:	33 e0       	ldi	r19, 0x03	; 3
    2544:	53 07       	cpc	r21, r19
    2546:	81 f0       	breq	.+32     	; 0x2568 <udd_ep_alloc+0x96>
    2548:	41 15       	cp	r20, r1
    254a:	51 40       	sbci	r21, 0x01	; 1
    254c:	79 f4       	brne	.+30     	; 0x256c <udd_ep_alloc+0x9a>
    254e:	08 c0       	rjmp	.+16     	; 0x2560 <udd_ep_alloc+0x8e>
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0d c0       	rjmp	.+26     	; 0x256e <udd_ep_alloc+0x9c>
    2554:	42 e0       	ldi	r20, 0x02	; 2
    2556:	0b c0       	rjmp	.+22     	; 0x256e <udd_ep_alloc+0x9c>
    2558:	43 e0       	ldi	r20, 0x03	; 3
    255a:	09 c0       	rjmp	.+18     	; 0x256e <udd_ep_alloc+0x9c>
    255c:	44 e0       	ldi	r20, 0x04	; 4
    255e:	07 c0       	rjmp	.+14     	; 0x256e <udd_ep_alloc+0x9c>
    2560:	45 e0       	ldi	r20, 0x05	; 5
    2562:	05 c0       	rjmp	.+10     	; 0x256e <udd_ep_alloc+0x9c>
    2564:	46 e0       	ldi	r20, 0x06	; 6
    2566:	03 c0       	rjmp	.+6      	; 0x256e <udd_ep_alloc+0x9c>
    2568:	47 e0       	ldi	r20, 0x07	; 7
    256a:	01 c0       	rjmp	.+2      	; 0x256e <udd_ep_alloc+0x9c>
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	fc 01       	movw	r30, r24
    2570:	ee 0f       	add	r30, r30
    2572:	ff 1f       	adc	r31, r31
    2574:	ee 0f       	add	r30, r30
    2576:	ff 1f       	adc	r31, r31
    2578:	ee 0f       	add	r30, r30
    257a:	ff 1f       	adc	r31, r31
    257c:	e0 50       	subi	r30, 0x00	; 0
    257e:	fe 4d       	sbci	r31, 0xDE	; 222
    2580:	11 8a       	std	Z+17, r1	; 0x11
    2582:	dc 01       	movw	r26, r24
    2584:	aa 0f       	add	r26, r26
    2586:	bb 1f       	adc	r27, r27
    2588:	aa 0f       	add	r26, r26
    258a:	bb 1f       	adc	r27, r27
    258c:	aa 0f       	add	r26, r26
    258e:	bb 1f       	adc	r27, r27
    2590:	a0 5f       	subi	r26, 0xF0	; 240
    2592:	bd 4d       	sbci	r27, 0xDD	; 221
    2594:	36 e0       	ldi	r19, 0x06	; 6
    2596:	3c 93       	st	X, r19
    2598:	24 2b       	or	r18, r20
    259a:	21 8b       	std	Z+17, r18	; 0x11
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	fc 01       	movw	r30, r24
    25aa:	e0 50       	subi	r30, 0x00	; 0
    25ac:	fe 4d       	sbci	r31, 0xDE	; 222
    25ae:	81 89       	ldd	r24, Z+17	; 0x11
    25b0:	80 62       	ori	r24, 0x20	; 32
    25b2:	81 8b       	std	Z+17, r24	; 0x11
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	08 95       	ret
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	08 95       	ret

000025bc <udd_ep_is_halted>:
    25bc:	e8 2f       	mov	r30, r24
    25be:	ef 70       	andi	r30, 0x0F	; 15
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	08 2e       	mov	r0, r24
    25c8:	00 0c       	add	r0, r0
    25ca:	99 0b       	sbc	r25, r25
    25cc:	88 27       	eor	r24, r24
    25ce:	99 0f       	add	r25, r25
    25d0:	88 1f       	adc	r24, r24
    25d2:	99 27       	eor	r25, r25
    25d4:	e8 0f       	add	r30, r24
    25d6:	f9 1f       	adc	r31, r25
    25d8:	ee 0f       	add	r30, r30
    25da:	ff 1f       	adc	r31, r31
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	ee 0f       	add	r30, r30
    25e2:	ff 1f       	adc	r31, r31
    25e4:	e0 50       	subi	r30, 0x00	; 0
    25e6:	fe 4d       	sbci	r31, 0xDE	; 222
    25e8:	81 89       	ldd	r24, Z+17	; 0x11
    25ea:	82 fb       	bst	r24, 2
    25ec:	88 27       	eor	r24, r24
    25ee:	80 f9       	bld	r24, 0
    25f0:	08 95       	ret

000025f2 <udd_ep_clear_halt>:
    25f2:	28 2f       	mov	r18, r24
    25f4:	2f 70       	andi	r18, 0x0F	; 15
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	a9 01       	movw	r20, r18
    25fa:	44 0f       	add	r20, r20
    25fc:	55 1f       	adc	r21, r21
    25fe:	28 2f       	mov	r18, r24
    2600:	08 2e       	mov	r0, r24
    2602:	00 0c       	add	r0, r0
    2604:	33 0b       	sbc	r19, r19
    2606:	22 27       	eor	r18, r18
    2608:	33 0f       	add	r19, r19
    260a:	22 1f       	adc	r18, r18
    260c:	33 27       	eor	r19, r19
    260e:	24 0f       	add	r18, r20
    2610:	35 1f       	adc	r19, r21
    2612:	f9 01       	movw	r30, r18
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	ee 0f       	add	r30, r30
    261a:	ff 1f       	adc	r31, r31
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	e0 50       	subi	r30, 0x00	; 0
    2622:	fe 4d       	sbci	r31, 0xDE	; 222
    2624:	91 89       	ldd	r25, Z+17	; 0x11
    2626:	92 ff       	sbrs	r25, 2
    2628:	17 c0       	rjmp	.+46     	; 0x2658 <udd_ep_clear_halt+0x66>
    262a:	22 0f       	add	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	22 0f       	add	r18, r18
    2630:	33 1f       	adc	r19, r19
    2632:	22 0f       	add	r18, r18
    2634:	33 1f       	adc	r19, r19
    2636:	f9 01       	movw	r30, r18
    2638:	e0 50       	subi	r30, 0x00	; 0
    263a:	fe 4d       	sbci	r31, 0xDE	; 222
    263c:	91 89       	ldd	r25, Z+17	; 0x11
    263e:	9b 7f       	andi	r25, 0xFB	; 251
    2640:	91 8b       	std	Z+17, r25	; 0x11
    2642:	ae dc       	rcall	.-1700   	; 0x1fa0 <udd_ep_get_job>
    2644:	fc 01       	movw	r30, r24
    2646:	80 81       	ld	r24, Z
    2648:	80 ff       	sbrs	r24, 0
    264a:	06 c0       	rjmp	.+12     	; 0x2658 <udd_ep_clear_halt+0x66>
    264c:	8e 7f       	andi	r24, 0xFE	; 254
    264e:	80 83       	st	Z, r24
    2650:	07 80       	ldd	r0, Z+7	; 0x07
    2652:	f0 85       	ldd	r31, Z+8	; 0x08
    2654:	e0 2d       	mov	r30, r0
    2656:	09 95       	icall
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	08 95       	ret

0000265c <udd_ep_run>:
    265c:	7f 92       	push	r7
    265e:	8f 92       	push	r8
    2660:	9f 92       	push	r9
    2662:	af 92       	push	r10
    2664:	bf 92       	push	r11
    2666:	cf 92       	push	r12
    2668:	df 92       	push	r13
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	98 2e       	mov	r9, r24
    2678:	86 2e       	mov	r8, r22
    267a:	6a 01       	movw	r12, r20
    267c:	79 01       	movw	r14, r18
    267e:	90 dc       	rcall	.-1760   	; 0x1fa0 <udd_ep_get_job>
    2680:	5c 01       	movw	r10, r24
    2682:	79 2c       	mov	r7, r9
    2684:	77 1c       	adc	r7, r7
    2686:	77 24       	eor	r7, r7
    2688:	77 1c       	adc	r7, r7
    268a:	c9 2d       	mov	r28, r9
    268c:	cf 70       	andi	r28, 0x0F	; 15
    268e:	d0 e0       	ldi	r29, 0x00	; 0
    2690:	cc 0f       	add	r28, r28
    2692:	dd 1f       	adc	r29, r29
    2694:	c7 0d       	add	r28, r7
    2696:	d1 1d       	adc	r29, r1
    2698:	fe 01       	movw	r30, r28
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e0 50       	subi	r30, 0x00	; 0
    26a8:	fe 4d       	sbci	r31, 0xDE	; 222
    26aa:	81 89       	ldd	r24, Z+17	; 0x11
    26ac:	80 7c       	andi	r24, 0xC0	; 192
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <udd_ep_run+0x56>
    26b0:	7d c0       	rjmp	.+250    	; 0x27ac <udd_ep_run+0x150>
    26b2:	fe 01       	movw	r30, r28
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	ee 0f       	add	r30, r30
    26be:	ff 1f       	adc	r31, r31
    26c0:	e0 50       	subi	r30, 0x00	; 0
    26c2:	fe 4d       	sbci	r31, 0xDE	; 222
    26c4:	81 89       	ldd	r24, Z+17	; 0x11
    26c6:	80 7c       	andi	r24, 0xC0	; 192
    26c8:	80 3c       	cpi	r24, 0xC0	; 192
    26ca:	61 f0       	breq	.+24     	; 0x26e4 <udd_ep_run+0x88>
    26cc:	fe 01       	movw	r30, r28
    26ce:	ee 0f       	add	r30, r30
    26d0:	ff 1f       	adc	r31, r31
    26d2:	ee 0f       	add	r30, r30
    26d4:	ff 1f       	adc	r31, r31
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	e0 50       	subi	r30, 0x00	; 0
    26dc:	fe 4d       	sbci	r31, 0xDE	; 222
    26de:	81 89       	ldd	r24, Z+17	; 0x11
    26e0:	82 fd       	sbrc	r24, 2
    26e2:	66 c0       	rjmp	.+204    	; 0x27b0 <udd_ep_run+0x154>
    26e4:	8f b7       	in	r24, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	f5 01       	movw	r30, r10
    26ea:	90 81       	ld	r25, Z
    26ec:	90 ff       	sbrs	r25, 0
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <udd_ep_run+0x9a>
    26f0:	8f bf       	out	0x3f, r24	; 63
    26f2:	71 2c       	mov	r7, r1
    26f4:	5e c0       	rjmp	.+188    	; 0x27b2 <udd_ep_run+0x156>
    26f6:	f5 01       	movw	r30, r10
    26f8:	90 81       	ld	r25, Z
    26fa:	91 60       	ori	r25, 0x01	; 1
    26fc:	90 83       	st	Z, r25
    26fe:	8f bf       	out	0x3f, r24	; 63
    2700:	c1 82       	std	Z+1, r12	; 0x01
    2702:	d2 82       	std	Z+2, r13	; 0x02
    2704:	e3 82       	std	Z+3, r14	; 0x03
    2706:	f4 82       	std	Z+4, r15	; 0x04
    2708:	15 82       	std	Z+5, r1	; 0x05
    270a:	16 82       	std	Z+6, r1	; 0x06
    270c:	07 83       	std	Z+7, r16	; 0x07
    270e:	10 87       	std	Z+8, r17	; 0x08
    2710:	81 10       	cpse	r8, r1
    2712:	06 c0       	rjmp	.+12     	; 0x2720 <udd_ep_run+0xc4>
    2714:	91 e0       	ldi	r25, 0x01	; 1
    2716:	e1 14       	cp	r14, r1
    2718:	f1 04       	cpc	r15, r1
    271a:	19 f0       	breq	.+6      	; 0x2722 <udd_ep_run+0xc6>
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <udd_ep_run+0xc6>
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	f5 01       	movw	r30, r10
    2724:	80 81       	ld	r24, Z
    2726:	90 fb       	bst	r25, 0
    2728:	81 f9       	bld	r24, 1
    272a:	8b 7f       	andi	r24, 0xFB	; 251
    272c:	80 83       	st	Z, r24
    272e:	77 20       	and	r7, r7
    2730:	59 f0       	breq	.+22     	; 0x2748 <udd_ep_run+0xec>
    2732:	cc 0f       	add	r28, r28
    2734:	dd 1f       	adc	r29, r29
    2736:	cc 0f       	add	r28, r28
    2738:	dd 1f       	adc	r29, r29
    273a:	cc 0f       	add	r28, r28
    273c:	dd 1f       	adc	r29, r29
    273e:	c0 50       	subi	r28, 0x00	; 0
    2740:	de 4d       	sbci	r29, 0xDE	; 222
    2742:	1e 8a       	std	Y+22, r1	; 0x16
    2744:	1f 8a       	std	Y+23, r1	; 0x17
    2746:	2d c0       	rjmp	.+90     	; 0x27a2 <udd_ep_run+0x146>
    2748:	fe 01       	movw	r30, r28
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	ee 0f       	add	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	e0 50       	subi	r30, 0x00	; 0
    2758:	fe 4d       	sbci	r31, 0xDE	; 222
    275a:	81 89       	ldd	r24, Z+17	; 0x11
    275c:	80 7c       	andi	r24, 0xC0	; 192
    275e:	80 3c       	cpi	r24, 0xC0	; 192
    2760:	a1 f4       	brne	.+40     	; 0x278a <udd_ep_run+0x12e>
    2762:	ce 01       	movw	r24, r28
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	80 5f       	subi	r24, 0xF0	; 240
    2772:	9d 4d       	sbci	r25, 0xDD	; 221
    2774:	ef db       	rcall	.-2082   	; 0x1f54 <udd_ep_get_size>
    2776:	bc 01       	movw	r22, r24
    2778:	c7 01       	movw	r24, r14
    277a:	60 d2       	rcall	.+1216   	; 0x2c3c <__udivmodhi4>
    277c:	89 2b       	or	r24, r25
    277e:	29 f0       	breq	.+10     	; 0x278a <udd_ep_run+0x12e>
    2780:	f5 01       	movw	r30, r10
    2782:	80 81       	ld	r24, Z
    2784:	8e 7f       	andi	r24, 0xFE	; 254
    2786:	80 83       	st	Z, r24
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <udd_ep_run+0x156>
    278a:	cc 0f       	add	r28, r28
    278c:	dd 1f       	adc	r29, r29
    278e:	cc 0f       	add	r28, r28
    2790:	dd 1f       	adc	r29, r29
    2792:	cc 0f       	add	r28, r28
    2794:	dd 1f       	adc	r29, r29
    2796:	c0 50       	subi	r28, 0x00	; 0
    2798:	de 4d       	sbci	r29, 0xDE	; 222
    279a:	1a 8a       	std	Y+18, r1	; 0x12
    279c:	1b 8a       	std	Y+19, r1	; 0x13
    279e:	1e 8a       	std	Y+22, r1	; 0x16
    27a0:	1f 8a       	std	Y+23, r1	; 0x17
    27a2:	89 2d       	mov	r24, r9
    27a4:	87 dc       	rcall	.-1778   	; 0x20b4 <udd_ep_trans_complet>
    27a6:	77 24       	eor	r7, r7
    27a8:	73 94       	inc	r7
    27aa:	03 c0       	rjmp	.+6      	; 0x27b2 <udd_ep_run+0x156>
    27ac:	71 2c       	mov	r7, r1
    27ae:	01 c0       	rjmp	.+2      	; 0x27b2 <udd_ep_run+0x156>
    27b0:	71 2c       	mov	r7, r1
    27b2:	87 2d       	mov	r24, r7
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	cf 90       	pop	r12
    27c4:	bf 90       	pop	r11
    27c6:	af 90       	pop	r10
    27c8:	9f 90       	pop	r9
    27ca:	8f 90       	pop	r8
    27cc:	7f 90       	pop	r7
    27ce:	08 95       	ret

000027d0 <udd_ep_abort>:
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	18 2f       	mov	r17, r24
    27dc:	f8 2e       	mov	r15, r24
    27de:	ff 1c       	adc	r15, r15
    27e0:	ff 24       	eor	r15, r15
    27e2:	ff 1c       	adc	r15, r15
    27e4:	c8 2f       	mov	r28, r24
    27e6:	cf 70       	andi	r28, 0x0F	; 15
    27e8:	d0 e0       	ldi	r29, 0x00	; 0
    27ea:	cc 0f       	add	r28, r28
    27ec:	dd 1f       	adc	r29, r29
    27ee:	cf 0d       	add	r28, r15
    27f0:	d1 1d       	adc	r29, r1
    27f2:	d6 db       	rcall	.-2132   	; 0x1fa0 <udd_ep_get_job>
    27f4:	dc 01       	movw	r26, r24
    27f6:	fe 01       	movw	r30, r28
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	ee 0f       	add	r30, r30
    2802:	ff 1f       	adc	r31, r31
    2804:	e0 5f       	subi	r30, 0xF0	; 240
    2806:	fd 4d       	sbci	r31, 0xDD	; 221
    2808:	02 e0       	ldi	r16, 0x02	; 2
    280a:	05 93       	las	Z, r16
    280c:	8c 91       	ld	r24, X
    280e:	80 ff       	sbrs	r24, 0
    2810:	22 c0       	rjmp	.+68     	; 0x2856 <udd_ep_abort+0x86>
    2812:	8e 7f       	andi	r24, 0xFE	; 254
    2814:	8c 93       	st	X, r24
    2816:	17 96       	adiw	r26, 0x07	; 7
    2818:	ed 91       	ld	r30, X+
    281a:	fc 91       	ld	r31, X
    281c:	18 97       	sbiw	r26, 0x08	; 8
    281e:	30 97       	sbiw	r30, 0x00	; 0
    2820:	d1 f0       	breq	.+52     	; 0x2856 <udd_ep_abort+0x86>
    2822:	ff 20       	and	r15, r15
    2824:	59 f0       	breq	.+22     	; 0x283c <udd_ep_abort+0x6c>
    2826:	cc 0f       	add	r28, r28
    2828:	dd 1f       	adc	r29, r29
    282a:	cc 0f       	add	r28, r28
    282c:	dd 1f       	adc	r29, r29
    282e:	cc 0f       	add	r28, r28
    2830:	dd 1f       	adc	r29, r29
    2832:	c0 50       	subi	r28, 0x00	; 0
    2834:	de 4d       	sbci	r29, 0xDE	; 222
    2836:	6e 89       	ldd	r22, Y+22	; 0x16
    2838:	7f 89       	ldd	r23, Y+23	; 0x17
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <udd_ep_abort+0x80>
    283c:	cc 0f       	add	r28, r28
    283e:	dd 1f       	adc	r29, r29
    2840:	cc 0f       	add	r28, r28
    2842:	dd 1f       	adc	r29, r29
    2844:	cc 0f       	add	r28, r28
    2846:	dd 1f       	adc	r29, r29
    2848:	c0 50       	subi	r28, 0x00	; 0
    284a:	de 4d       	sbci	r29, 0xDE	; 222
    284c:	6a 89       	ldd	r22, Y+18	; 0x12
    284e:	7b 89       	ldd	r23, Y+19	; 0x13
    2850:	41 2f       	mov	r20, r17
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	09 95       	icall
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	08 95       	ret

00002862 <udd_ep_free>:
    2862:	cf 93       	push	r28
    2864:	c8 2f       	mov	r28, r24
    2866:	b4 df       	rcall	.-152    	; 0x27d0 <udd_ep_abort>
    2868:	ec 2f       	mov	r30, r28
    286a:	ef 70       	andi	r30, 0x0F	; 15
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	8c 2f       	mov	r24, r28
    2874:	cc 0f       	add	r28, r28
    2876:	99 0b       	sbc	r25, r25
    2878:	88 27       	eor	r24, r24
    287a:	99 0f       	add	r25, r25
    287c:	88 1f       	adc	r24, r24
    287e:	99 27       	eor	r25, r25
    2880:	e8 0f       	add	r30, r24
    2882:	f9 1f       	adc	r31, r25
    2884:	ee 0f       	add	r30, r30
    2886:	ff 1f       	adc	r31, r31
    2888:	ee 0f       	add	r30, r30
    288a:	ff 1f       	adc	r31, r31
    288c:	ee 0f       	add	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	e0 50       	subi	r30, 0x00	; 0
    2892:	fe 4d       	sbci	r31, 0xDE	; 222
    2894:	11 8a       	std	Z+17, r1	; 0x11
    2896:	cf 91       	pop	r28
    2898:	08 95       	ret

0000289a <udd_ep_set_halt>:
    289a:	0f 93       	push	r16
    289c:	e8 2f       	mov	r30, r24
    289e:	ef 70       	andi	r30, 0x0F	; 15
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	ee 0f       	add	r30, r30
    28a4:	ff 1f       	adc	r31, r31
    28a6:	28 2f       	mov	r18, r24
    28a8:	08 2e       	mov	r0, r24
    28aa:	00 0c       	add	r0, r0
    28ac:	33 0b       	sbc	r19, r19
    28ae:	22 27       	eor	r18, r18
    28b0:	33 0f       	add	r19, r19
    28b2:	22 1f       	adc	r18, r18
    28b4:	33 27       	eor	r19, r19
    28b6:	e2 0f       	add	r30, r18
    28b8:	f3 1f       	adc	r31, r19
    28ba:	df 01       	movw	r26, r30
    28bc:	aa 0f       	add	r26, r26
    28be:	bb 1f       	adc	r27, r27
    28c0:	aa 0f       	add	r26, r26
    28c2:	bb 1f       	adc	r27, r27
    28c4:	aa 0f       	add	r26, r26
    28c6:	bb 1f       	adc	r27, r27
    28c8:	a0 50       	subi	r26, 0x00	; 0
    28ca:	be 4d       	sbci	r27, 0xDE	; 222
    28cc:	51 96       	adiw	r26, 0x11	; 17
    28ce:	9c 91       	ld	r25, X
    28d0:	51 97       	sbiw	r26, 0x11	; 17
    28d2:	94 60       	ori	r25, 0x04	; 4
    28d4:	51 96       	adiw	r26, 0x11	; 17
    28d6:	9c 93       	st	X, r25
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	ee 0f       	add	r30, r30
    28de:	ff 1f       	adc	r31, r31
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	e0 5f       	subi	r30, 0xF0	; 240
    28e6:	fd 4d       	sbci	r31, 0xDD	; 221
    28e8:	01 e0       	ldi	r16, 0x01	; 1
    28ea:	06 93       	lac	Z, r16
    28ec:	71 df       	rcall	.-286    	; 0x27d0 <udd_ep_abort>
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	0f 91       	pop	r16
    28f2:	08 95       	ret

000028f4 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    28f4:	1f 92       	push	r1
    28f6:	0f 92       	push	r0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	0f 92       	push	r0
    28fc:	11 24       	eor	r1, r1
    28fe:	0f 93       	push	r16
    2900:	2f 93       	push	r18
    2902:	3f 93       	push	r19
    2904:	4f 93       	push	r20
    2906:	5f 93       	push	r21
    2908:	6f 93       	push	r22
    290a:	7f 93       	push	r23
    290c:	8f 93       	push	r24
    290e:	9f 93       	push	r25
    2910:	af 93       	push	r26
    2912:	bf 93       	push	r27
    2914:	ef 93       	push	r30
    2916:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2918:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    291c:	88 23       	and	r24, r24
    291e:	44 f4       	brge	.+16     	; 0x2930 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2920:	80 e8       	ldi	r24, 0x80	; 128
    2922:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2926:	0e 94 00 0b 	call	0x1600	; 0x1600 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    292a:	0e 94 c2 01 	call	0x384	; 0x384 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    292e:	8a c0       	rjmp	.+276    	; 0x2a44 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2930:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2934:	82 ff       	sbrs	r24, 2
    2936:	20 c0       	rjmp	.+64     	; 0x2978 <__vector_125+0x84>
		udd_ack_underflow_event();
    2938:	84 e0       	ldi	r24, 0x04	; 4
    293a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    293e:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udd_sram+0x18>
    2942:	86 ff       	sbrs	r24, 6
    2944:	7f c0       	rjmp	.+254    	; 0x2a44 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2946:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    294a:	81 fd       	sbrc	r24, 1
    294c:	7b c0       	rjmp	.+246    	; 0x2a44 <__vector_125+0x150>
    294e:	43 db       	rcall	.-2426   	; 0x1fd6 <udd_ctrl_interrupt_tc_setup>
    2950:	81 11       	cpse	r24, r1
    2952:	78 c0       	rjmp	.+240    	; 0x2a44 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2954:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	11 f4       	brne	.+4      	; 0x2960 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    295c:	79 da       	rcall	.-2830   	; 0x1e50 <udd_ctrl_send_zlp_in>
    295e:	72 c0       	rjmp	.+228    	; 0x2a44 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2960:	84 30       	cpi	r24, 0x04	; 4
    2962:	09 f0       	breq	.+2      	; 0x2966 <__vector_125+0x72>
    2964:	6f c0       	rjmp	.+222    	; 0x2a44 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2966:	e9 e1       	ldi	r30, 0x19	; 25
    2968:	f2 e2       	ldi	r31, 0x22	; 34
    296a:	04 e0       	ldi	r16, 0x04	; 4
    296c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    296e:	e1 e1       	ldi	r30, 0x11	; 17
    2970:	f2 e2       	ldi	r31, 0x22	; 34
    2972:	04 e0       	ldi	r16, 0x04	; 4
    2974:	05 93       	las	Z, r16
    2976:	66 c0       	rjmp	.+204    	; 0x2a44 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2978:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    297c:	81 ff       	sbrs	r24, 1
    297e:	5d c0       	rjmp	.+186    	; 0x2a3a <__vector_125+0x146>
		udd_ack_overflow_event();
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2986:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udd_sram+0x10>
    298a:	86 ff       	sbrs	r24, 6
    298c:	5b c0       	rjmp	.+182    	; 0x2a44 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    298e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2992:	81 fd       	sbrc	r24, 1
    2994:	57 c0       	rjmp	.+174    	; 0x2a44 <__vector_125+0x150>
    2996:	1f db       	rcall	.-2498   	; 0x1fd6 <udd_ctrl_interrupt_tc_setup>
    2998:	81 11       	cpse	r24, r1
    299a:	54 c0       	rjmp	.+168    	; 0x2a44 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    299c:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    29a0:	82 30       	cpi	r24, 0x02	; 2
    29a2:	41 f4       	brne	.+16     	; 0x29b4 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    29a4:	84 e0       	ldi	r24, 0x04	; 4
    29a6:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    29aa:	e0 e1       	ldi	r30, 0x10	; 16
    29ac:	f2 e2       	ldi	r31, 0x22	; 34
    29ae:	02 e0       	ldi	r16, 0x02	; 2
    29b0:	06 93       	lac	Z, r16
    29b2:	48 c0       	rjmp	.+144    	; 0x2a44 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    29b4:	83 30       	cpi	r24, 0x03	; 3
    29b6:	09 f0       	breq	.+2      	; 0x29ba <__vector_125+0xc6>
    29b8:	45 c0       	rjmp	.+138    	; 0x2a44 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    29ba:	e9 e1       	ldi	r30, 0x19	; 25
    29bc:	f2 e2       	ldi	r31, 0x22	; 34
    29be:	04 e0       	ldi	r16, 0x04	; 4
    29c0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    29c2:	e1 e1       	ldi	r30, 0x11	; 17
    29c4:	f2 e2       	ldi	r31, 0x22	; 34
    29c6:	04 e0       	ldi	r16, 0x04	; 4
    29c8:	05 93       	las	Z, r16
    29ca:	3c c0       	rjmp	.+120    	; 0x2a44 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    29cc:	80 e1       	ldi	r24, 0x10	; 16
    29ce:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	fd de       	rcall	.-518    	; 0x27d0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    29d6:	81 e8       	ldi	r24, 0x81	; 129
    29d8:	fb de       	rcall	.-522    	; 0x27d0 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	f9 de       	rcall	.-526    	; 0x27d0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    29de:	82 e8       	ldi	r24, 0x82	; 130
    29e0:	f7 de       	rcall	.-530    	; 0x27d0 <udd_ep_abort>
		}
#endif
		udc_reset();
    29e2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    29e6:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29ea:	e0 e0       	ldi	r30, 0x00	; 0
    29ec:	f2 e2       	ldi	r31, 0x22	; 34
    29ee:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    29f0:	96 e0       	ldi	r25, 0x06	; 6
    29f2:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29f4:	83 e4       	ldi	r24, 0x43	; 67
    29f6:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29f8:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    29fa:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29fc:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    29fe:	8b eb       	ldi	r24, 0xBB	; 187
    2a00:	91 e2       	ldi	r25, 0x21	; 33
    2a02:	84 8b       	std	Z+20, r24	; 0x14
    2a04:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    2a06:	ef d9       	rcall	.-3106   	; 0x1de6 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2a08:	1d c0       	rjmp	.+58     	; 0x2a44 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    2a0a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a0e:	86 ff       	sbrs	r24, 6
    2a10:	08 c0       	rjmp	.+16     	; 0x2a22 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2a12:	80 e4       	ldi	r24, 0x40	; 64
    2a14:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	bc d9       	rcall	.-3208   	; 0x1d94 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2a1c:	0e 94 c0 01 	call	0x380	; 0x380 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a20:	11 c0       	rjmp	.+34     	; 0x2a44 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2a22:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a26:	85 ff       	sbrs	r24, 5
    2a28:	0d c0       	rjmp	.+26     	; 0x2a44 <__vector_125+0x150>
		udd_ack_resume_event();
    2a2a:	80 e2       	ldi	r24, 0x20	; 32
    2a2c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	b0 d9       	rcall	.-3232   	; 0x1d94 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2a34:	0e 94 c1 01 	call	0x382	; 0x382 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2a38:	05 c0       	rjmp	.+10     	; 0x2a44 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2a3a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2a3e:	84 fd       	sbrc	r24, 4
    2a40:	c5 cf       	rjmp	.-118    	; 0x29cc <__vector_125+0xd8>
    2a42:	e3 cf       	rjmp	.-58     	; 0x2a0a <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2a44:	ff 91       	pop	r31
    2a46:	ef 91       	pop	r30
    2a48:	bf 91       	pop	r27
    2a4a:	af 91       	pop	r26
    2a4c:	9f 91       	pop	r25
    2a4e:	8f 91       	pop	r24
    2a50:	7f 91       	pop	r23
    2a52:	6f 91       	pop	r22
    2a54:	5f 91       	pop	r21
    2a56:	4f 91       	pop	r20
    2a58:	3f 91       	pop	r19
    2a5a:	2f 91       	pop	r18
    2a5c:	0f 91       	pop	r16
    2a5e:	0f 90       	pop	r0
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	0f 90       	pop	r0
    2a64:	1f 90       	pop	r1
    2a66:	18 95       	reti

00002a68 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2a68:	1f 92       	push	r1
    2a6a:	0f 92       	push	r0
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	0f 92       	push	r0
    2a70:	11 24       	eor	r1, r1
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	2f 93       	push	r18
    2a78:	3f 93       	push	r19
    2a7a:	4f 93       	push	r20
    2a7c:	5f 93       	push	r21
    2a7e:	6f 93       	push	r22
    2a80:	7f 93       	push	r23
    2a82:	8f 93       	push	r24
    2a84:	9f 93       	push	r25
    2a86:	af 93       	push	r26
    2a88:	bf 93       	push	r27
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	ef 93       	push	r30
    2a90:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a92:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2a96:	81 fd       	sbrc	r24, 1
    2a98:	03 c0       	rjmp	.+6      	; 0x2aa0 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2a9a:	9d da       	rcall	.-2758   	; 0x1fd6 <udd_ctrl_interrupt_tc_setup>
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	b9 c0       	rjmp	.+370    	; 0x2c12 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2aa0:	82 e0       	ldi	r24, 0x02	; 2
    2aa2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2aa6:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2aaa:	81 95       	neg	r24
    2aac:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2aae:	e0 e1       	ldi	r30, 0x10	; 16
    2ab0:	f2 e2       	ldi	r31, 0x22	; 34
    2ab2:	e8 1b       	sub	r30, r24
    2ab4:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2ab6:	20 81       	ld	r18, Z
    2ab8:	31 81       	ldd	r19, Z+1	; 0x01
    2aba:	20 51       	subi	r18, 0x10	; 16
    2abc:	32 42       	sbci	r19, 0x22	; 34
    2abe:	36 95       	lsr	r19
    2ac0:	27 95       	ror	r18
    2ac2:	36 95       	lsr	r19
    2ac4:	27 95       	ror	r18
    2ac6:	36 95       	lsr	r19
    2ac8:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2aca:	82 2f       	mov	r24, r18
    2acc:	86 95       	lsr	r24
    2ace:	20 fd       	sbrc	r18, 0
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <__vector_126+0x6e>
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	01 c0       	rjmp	.+2      	; 0x2ad8 <__vector_126+0x70>
    2ad6:	90 e8       	ldi	r25, 0x80	; 128
    2ad8:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2ada:	e8 2f       	mov	r30, r24
    2adc:	ef 70       	andi	r30, 0x0F	; 15
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	ee 0f       	add	r30, r30
    2ae2:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	08 2e       	mov	r0, r24
    2ae8:	00 0c       	add	r0, r0
    2aea:	33 0b       	sbc	r19, r19
    2aec:	22 27       	eor	r18, r18
    2aee:	33 0f       	add	r19, r19
    2af0:	22 1f       	adc	r18, r18
    2af2:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2af4:	e2 0f       	add	r30, r18
    2af6:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2af8:	df 01       	movw	r26, r30
    2afa:	aa 0f       	add	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	aa 0f       	add	r26, r26
    2b00:	bb 1f       	adc	r27, r27
    2b02:	aa 0f       	add	r26, r26
    2b04:	bb 1f       	adc	r27, r27
    2b06:	a0 5f       	subi	r26, 0xF0	; 240
    2b08:	bd 4d       	sbci	r27, 0xDD	; 221
    2b0a:	9c 91       	ld	r25, X
    2b0c:	95 ff       	sbrs	r25, 5
    2b0e:	81 c0       	rjmp	.+258    	; 0x2c12 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2b10:	fd 01       	movw	r30, r26
    2b12:	00 e2       	ldi	r16, 0x20	; 32
    2b14:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2b16:	81 11       	cpse	r24, r1
    2b18:	77 c0       	rjmp	.+238    	; 0x2c08 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b1a:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    2b1e:	84 30       	cpi	r24, 0x04	; 4
    2b20:	19 f4       	brne	.+6      	; 0x2b28 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b22:	a4 d9       	rcall	.-3256   	; 0x1e6c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b24:	60 d9       	rcall	.-3392   	; 0x1de6 <udd_ctrl_init>
    2b26:	75 c0       	rjmp	.+234    	; 0x2c12 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b28:	00 91 12 22 	lds	r16, 0x2212	; 0x802212 <udd_sram+0x12>
    2b2c:	10 91 13 22 	lds	r17, 0x2213	; 0x802213 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2b30:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0xa>
    2b34:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0xb>
    2b38:	c0 91 fb 21 	lds	r28, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2b3c:	d0 91 fc 21 	lds	r29, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    2b40:	9e 01       	movw	r18, r28
    2b42:	20 0f       	add	r18, r16
    2b44:	31 1f       	adc	r19, r17
    2b46:	82 17       	cp	r24, r18
    2b48:	93 07       	cpc	r25, r19
    2b4a:	18 f4       	brcc	.+6      	; 0x2b52 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2b4c:	8c 01       	movw	r16, r24
    2b4e:	0c 1b       	sub	r16, r28
    2b50:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2b52:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <udd_g_ctrlreq+0x8>
    2b56:	90 91 63 24 	lds	r25, 0x2463	; 0x802463 <udd_g_ctrlreq+0x9>
    2b5a:	a8 01       	movw	r20, r16
    2b5c:	6b eb       	ldi	r22, 0xBB	; 187
    2b5e:	71 e2       	ldi	r23, 0x21	; 33
    2b60:	8c 0f       	add	r24, r28
    2b62:	9d 1f       	adc	r25, r29
    2b64:	85 d0       	rcall	.+266    	; 0x2c70 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2b66:	c0 0f       	add	r28, r16
    2b68:	d1 1f       	adc	r29, r17
    2b6a:	c0 93 fb 21 	sts	0x21FB, r28	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2b6e:	d0 93 fc 21 	sts	0x21FC, r29	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b72:	00 34       	cpi	r16, 0x40	; 64
    2b74:	11 05       	cpc	r17, r1
    2b76:	69 f4       	brne	.+26     	; 0x2b92 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2b78:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2b7c:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    2b80:	8c 0f       	add	r24, r28
    2b82:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b84:	20 91 60 24 	lds	r18, 0x2460	; 0x802460 <udd_g_ctrlreq+0x6>
    2b88:	30 91 61 24 	lds	r19, 0x2461	; 0x802461 <udd_g_ctrlreq+0x7>
    2b8c:	82 17       	cp	r24, r18
    2b8e:	93 07       	cpc	r25, r19
    2b90:	80 f0       	brcs	.+32     	; 0x2bb2 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2b92:	ea e5       	ldi	r30, 0x5A	; 90
    2b94:	f4 e2       	ldi	r31, 0x24	; 36
    2b96:	c2 87       	std	Z+10, r28	; 0x0a
    2b98:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2b9a:	06 84       	ldd	r0, Z+14	; 0x0e
    2b9c:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b9e:	e0 2d       	mov	r30, r0
    2ba0:	30 97       	sbiw	r30, 0x00	; 0
    2ba2:	29 f0       	breq	.+10     	; 0x2bae <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2ba4:	09 95       	icall
    2ba6:	81 11       	cpse	r24, r1
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2baa:	44 d9       	rcall	.-3448   	; 0x1e34 <udd_ctrl_stall_data>
    2bac:	32 c0       	rjmp	.+100    	; 0x2c12 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2bae:	50 d9       	rcall	.-3424   	; 0x1e50 <udd_ctrl_send_zlp_in>
    2bb0:	30 c0       	rjmp	.+96     	; 0x2c12 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2bb2:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_g_ctrlreq+0xa>
    2bb6:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_g_ctrlreq+0xb>
    2bba:	c8 17       	cp	r28, r24
    2bbc:	d9 07       	cpc	r29, r25
    2bbe:	f9 f4       	brne	.+62     	; 0x2bfe <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2bc0:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <udd_g_ctrlreq+0xe>
    2bc4:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <udd_g_ctrlreq+0xf>
    2bc8:	30 97       	sbiw	r30, 0x00	; 0
    2bca:	11 f4       	brne	.+4      	; 0x2bd0 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2bcc:	33 d9       	rcall	.-3482   	; 0x1e34 <udd_ctrl_stall_data>
    2bce:	21 c0       	rjmp	.+66     	; 0x2c12 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2bd0:	09 95       	icall
    2bd2:	81 11       	cpse	r24, r1
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2bd6:	2e d9       	rcall	.-3492   	; 0x1e34 <udd_ctrl_stall_data>
    2bd8:	1c c0       	rjmp	.+56     	; 0x2c12 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2bda:	20 91 fd 21 	lds	r18, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2bde:	30 91 fe 21 	lds	r19, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    2be2:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2be6:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    2bea:	82 0f       	add	r24, r18
    2bec:	93 1f       	adc	r25, r19
    2bee:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2bf2:	90 93 fe 21 	sts	0x21FE, r25	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2bf6:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2bfa:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2bfe:	e0 e1       	ldi	r30, 0x10	; 16
    2c00:	f2 e2       	ldi	r31, 0x22	; 34
    2c02:	02 e0       	ldi	r16, 0x02	; 2
    2c04:	06 93       	lac	Z, r16
    2c06:	05 c0       	rjmp	.+10     	; 0x2c12 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2c08:	80 38       	cpi	r24, 0x80	; 128
    2c0a:	11 f4       	brne	.+4      	; 0x2c10 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2c0c:	37 d9       	rcall	.-3474   	; 0x1e7c <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c10:	51 da       	rcall	.-2910   	; 0x20b4 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c12:	ff 91       	pop	r31
    2c14:	ef 91       	pop	r30
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	bf 91       	pop	r27
    2c1c:	af 91       	pop	r26
    2c1e:	9f 91       	pop	r25
    2c20:	8f 91       	pop	r24
    2c22:	7f 91       	pop	r23
    2c24:	6f 91       	pop	r22
    2c26:	5f 91       	pop	r21
    2c28:	4f 91       	pop	r20
    2c2a:	3f 91       	pop	r19
    2c2c:	2f 91       	pop	r18
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	0f 90       	pop	r0
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	0f 90       	pop	r0
    2c38:	1f 90       	pop	r1
    2c3a:	18 95       	reti

00002c3c <__udivmodhi4>:
    2c3c:	aa 1b       	sub	r26, r26
    2c3e:	bb 1b       	sub	r27, r27
    2c40:	51 e1       	ldi	r21, 0x11	; 17
    2c42:	07 c0       	rjmp	.+14     	; 0x2c52 <__udivmodhi4_ep>

00002c44 <__udivmodhi4_loop>:
    2c44:	aa 1f       	adc	r26, r26
    2c46:	bb 1f       	adc	r27, r27
    2c48:	a6 17       	cp	r26, r22
    2c4a:	b7 07       	cpc	r27, r23
    2c4c:	10 f0       	brcs	.+4      	; 0x2c52 <__udivmodhi4_ep>
    2c4e:	a6 1b       	sub	r26, r22
    2c50:	b7 0b       	sbc	r27, r23

00002c52 <__udivmodhi4_ep>:
    2c52:	88 1f       	adc	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	5a 95       	dec	r21
    2c58:	a9 f7       	brne	.-22     	; 0x2c44 <__udivmodhi4_loop>
    2c5a:	80 95       	com	r24
    2c5c:	90 95       	com	r25
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	08 95       	ret

00002c64 <__tablejump2__>:
    2c64:	ee 0f       	add	r30, r30
    2c66:	ff 1f       	adc	r31, r31
    2c68:	05 90       	lpm	r0, Z+
    2c6a:	f4 91       	lpm	r31, Z
    2c6c:	e0 2d       	mov	r30, r0
    2c6e:	09 94       	ijmp

00002c70 <memcpy>:
    2c70:	fb 01       	movw	r30, r22
    2c72:	dc 01       	movw	r26, r24
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <memcpy+0xa>
    2c76:	01 90       	ld	r0, Z+
    2c78:	0d 92       	st	X+, r0
    2c7a:	41 50       	subi	r20, 0x01	; 1
    2c7c:	50 40       	sbci	r21, 0x00	; 0
    2c7e:	d8 f7       	brcc	.-10     	; 0x2c76 <memcpy+0x6>
    2c80:	08 95       	ret

00002c82 <_exit>:
    2c82:	f8 94       	cli

00002c84 <__stop_program>:
    2c84:	ff cf       	rjmp	.-2      	; 0x2c84 <__stop_program>
