
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00002a2c  00002ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ba3  008020b2  008020b2  00002b72  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00002be8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a750  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bc1  00000000  00000000  0000d800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008b79  00000000  00000000  0000f3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a84  00000000  00000000  00017f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fba6  00000000  00000000  000189c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022e4  00000000  00000000  00048566  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0004a850  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ba5c  00000000  00000000  0004ac48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2c c1       	rjmp	.+600    	; 0x25a <__ctors_end>
       2:	00 00       	nop
       4:	46 c1       	rjmp	.+652    	; 0x292 <__bad_interrupt>
       6:	00 00       	nop
       8:	44 c1       	rjmp	.+648    	; 0x292 <__bad_interrupt>
       a:	00 00       	nop
       c:	42 c1       	rjmp	.+644    	; 0x292 <__bad_interrupt>
       e:	00 00       	nop
      10:	40 c1       	rjmp	.+640    	; 0x292 <__bad_interrupt>
      12:	00 00       	nop
      14:	3e c1       	rjmp	.+636    	; 0x292 <__bad_interrupt>
      16:	00 00       	nop
      18:	26 c6       	rjmp	.+3148   	; 0xc66 <__vector_6>
      1a:	00 00       	nop
      1c:	65 c6       	rjmp	.+3274   	; 0xce8 <__vector_7>
      1e:	00 00       	nop
      20:	a3 c6       	rjmp	.+3398   	; 0xd68 <__vector_8>
      22:	00 00       	nop
      24:	ab c6       	rjmp	.+3414   	; 0xd7c <__vector_9>
      26:	00 00       	nop
      28:	34 c1       	rjmp	.+616    	; 0x292 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	32 c1       	rjmp	.+612    	; 0x292 <__bad_interrupt>
      2e:	00 00       	nop
      30:	30 c1       	rjmp	.+608    	; 0x292 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c1       	rjmp	.+604    	; 0x292 <__bad_interrupt>
      36:	00 00       	nop
      38:	2c c1       	rjmp	.+600    	; 0x292 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2a c1       	rjmp	.+596    	; 0x292 <__bad_interrupt>
      3e:	00 00       	nop
      40:	28 c1       	rjmp	.+592    	; 0x292 <__bad_interrupt>
      42:	00 00       	nop
      44:	26 c1       	rjmp	.+588    	; 0x292 <__bad_interrupt>
      46:	00 00       	nop
      48:	24 c1       	rjmp	.+584    	; 0x292 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	22 c1       	rjmp	.+580    	; 0x292 <__bad_interrupt>
      4e:	00 00       	nop
      50:	20 c1       	rjmp	.+576    	; 0x292 <__bad_interrupt>
      52:	00 00       	nop
      54:	1e c1       	rjmp	.+572    	; 0x292 <__bad_interrupt>
      56:	00 00       	nop
      58:	1c c1       	rjmp	.+568    	; 0x292 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1a c1       	rjmp	.+564    	; 0x292 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7c c7       	rjmp	.+3832   	; 0xf5a <__vector_24>
      62:	00 00       	nop
      64:	16 c1       	rjmp	.+556    	; 0x292 <__bad_interrupt>
      66:	00 00       	nop
      68:	14 c1       	rjmp	.+552    	; 0x292 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	12 c1       	rjmp	.+548    	; 0x292 <__bad_interrupt>
      6e:	00 00       	nop
      70:	10 c1       	rjmp	.+544    	; 0x292 <__bad_interrupt>
      72:	00 00       	nop
      74:	0e c1       	rjmp	.+540    	; 0x292 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c c1       	rjmp	.+536    	; 0x292 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0a c1       	rjmp	.+532    	; 0x292 <__bad_interrupt>
      7e:	00 00       	nop
      80:	08 c1       	rjmp	.+528    	; 0x292 <__bad_interrupt>
      82:	00 00       	nop
      84:	06 c1       	rjmp	.+524    	; 0x292 <__bad_interrupt>
      86:	00 00       	nop
      88:	04 c1       	rjmp	.+520    	; 0x292 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 c1       	rjmp	.+516    	; 0x292 <__bad_interrupt>
      8e:	00 00       	nop
      90:	00 c1       	rjmp	.+512    	; 0x292 <__bad_interrupt>
      92:	00 00       	nop
      94:	fe c0       	rjmp	.+508    	; 0x292 <__bad_interrupt>
      96:	00 00       	nop
      98:	fc c0       	rjmp	.+504    	; 0x292 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fa c0       	rjmp	.+500    	; 0x292 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f8 c0       	rjmp	.+496    	; 0x292 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f6 c0       	rjmp	.+492    	; 0x292 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f4 c0       	rjmp	.+488    	; 0x292 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f2 c0       	rjmp	.+484    	; 0x292 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f0 c0       	rjmp	.+480    	; 0x292 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ee c0       	rjmp	.+476    	; 0x292 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c0       	rjmp	.+472    	; 0x292 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ea c0       	rjmp	.+468    	; 0x292 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e8 c0       	rjmp	.+464    	; 0x292 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e6 c0       	rjmp	.+460    	; 0x292 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e4 c0       	rjmp	.+456    	; 0x292 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e2 c0       	rjmp	.+452    	; 0x292 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e0 c0       	rjmp	.+448    	; 0x292 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	de c0       	rjmp	.+444    	; 0x292 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dc c0       	rjmp	.+440    	; 0x292 <__bad_interrupt>
      da:	00 00       	nop
      dc:	da c0       	rjmp	.+436    	; 0x292 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d8 c0       	rjmp	.+432    	; 0x292 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d6 c0       	rjmp	.+428    	; 0x292 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d4 c0       	rjmp	.+424    	; 0x292 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d2 c0       	rjmp	.+420    	; 0x292 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d0 c0       	rjmp	.+416    	; 0x292 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ce c0       	rjmp	.+412    	; 0x292 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	cc c0       	rjmp	.+408    	; 0x292 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ca c0       	rjmp	.+404    	; 0x292 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c8 c0       	rjmp	.+400    	; 0x292 <__bad_interrupt>
     102:	00 00       	nop
     104:	c6 c0       	rjmp	.+396    	; 0x292 <__bad_interrupt>
     106:	00 00       	nop
     108:	c4 c0       	rjmp	.+392    	; 0x292 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c2 c0       	rjmp	.+388    	; 0x292 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c0 c0       	rjmp	.+384    	; 0x292 <__bad_interrupt>
     112:	00 00       	nop
     114:	be c0       	rjmp	.+380    	; 0x292 <__bad_interrupt>
     116:	00 00       	nop
     118:	bc c0       	rjmp	.+376    	; 0x292 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c0       	rjmp	.+372    	; 0x292 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b8 c0       	rjmp	.+368    	; 0x292 <__bad_interrupt>
     122:	00 00       	nop
     124:	b6 c0       	rjmp	.+364    	; 0x292 <__bad_interrupt>
     126:	00 00       	nop
     128:	b4 c0       	rjmp	.+360    	; 0x292 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	b2 c0       	rjmp	.+356    	; 0x292 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b0 c0       	rjmp	.+352    	; 0x292 <__bad_interrupt>
     132:	00 00       	nop
     134:	ae c0       	rjmp	.+348    	; 0x292 <__bad_interrupt>
     136:	00 00       	nop
     138:	ac c0       	rjmp	.+344    	; 0x292 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	aa c0       	rjmp	.+340    	; 0x292 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a8 c0       	rjmp	.+336    	; 0x292 <__bad_interrupt>
     142:	00 00       	nop
     144:	a6 c0       	rjmp	.+332    	; 0x292 <__bad_interrupt>
     146:	00 00       	nop
     148:	a4 c0       	rjmp	.+328    	; 0x292 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	66 c6       	rjmp	.+3276   	; 0xe1a <__vector_83>
     14e:	00 00       	nop
     150:	a0 c0       	rjmp	.+320    	; 0x292 <__bad_interrupt>
     152:	00 00       	nop
     154:	9e c0       	rjmp	.+316    	; 0x292 <__bad_interrupt>
     156:	00 00       	nop
     158:	9c c0       	rjmp	.+312    	; 0x292 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9a c0       	rjmp	.+308    	; 0x292 <__bad_interrupt>
     15e:	00 00       	nop
     160:	98 c0       	rjmp	.+304    	; 0x292 <__bad_interrupt>
     162:	00 00       	nop
     164:	96 c0       	rjmp	.+300    	; 0x292 <__bad_interrupt>
     166:	00 00       	nop
     168:	94 c0       	rjmp	.+296    	; 0x292 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	92 c0       	rjmp	.+292    	; 0x292 <__bad_interrupt>
     16e:	00 00       	nop
     170:	90 c0       	rjmp	.+288    	; 0x292 <__bad_interrupt>
     172:	00 00       	nop
     174:	8e c0       	rjmp	.+284    	; 0x292 <__bad_interrupt>
     176:	00 00       	nop
     178:	8c c0       	rjmp	.+280    	; 0x292 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8a c0       	rjmp	.+276    	; 0x292 <__bad_interrupt>
     17e:	00 00       	nop
     180:	88 c0       	rjmp	.+272    	; 0x292 <__bad_interrupt>
     182:	00 00       	nop
     184:	86 c0       	rjmp	.+268    	; 0x292 <__bad_interrupt>
     186:	00 00       	nop
     188:	84 c0       	rjmp	.+264    	; 0x292 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	82 c0       	rjmp	.+260    	; 0x292 <__bad_interrupt>
     18e:	00 00       	nop
     190:	80 c0       	rjmp	.+256    	; 0x292 <__bad_interrupt>
     192:	00 00       	nop
     194:	7e c0       	rjmp	.+252    	; 0x292 <__bad_interrupt>
     196:	00 00       	nop
     198:	7c c0       	rjmp	.+248    	; 0x292 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7a c0       	rjmp	.+244    	; 0x292 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	78 c0       	rjmp	.+240    	; 0x292 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	76 c0       	rjmp	.+236    	; 0x292 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	74 c0       	rjmp	.+232    	; 0x292 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	72 c0       	rjmp	.+228    	; 0x292 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	70 c0       	rjmp	.+224    	; 0x292 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	6e c0       	rjmp	.+220    	; 0x292 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6a c0       	rjmp	.+212    	; 0x292 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	68 c0       	rjmp	.+208    	; 0x292 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	66 c0       	rjmp	.+204    	; 0x292 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	64 c0       	rjmp	.+200    	; 0x292 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	62 c0       	rjmp	.+196    	; 0x292 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	60 c0       	rjmp	.+192    	; 0x292 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5e c0       	rjmp	.+188    	; 0x292 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	5c c0       	rjmp	.+184    	; 0x292 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5a c0       	rjmp	.+180    	; 0x292 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	58 c0       	rjmp	.+176    	; 0x292 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	54 c0       	rjmp	.+168    	; 0x292 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	52 c0       	rjmp	.+164    	; 0x292 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__vector_125>
     1f8:	0c 94 07 14 	jmp	0x280e	; 0x280e <__vector_126>
     1fc:	e4 01       	movw	r28, r8
     1fe:	e6 01       	movw	r28, r12
     200:	e8 01       	movw	r28, r16
     202:	ea 01       	movw	r28, r20
     204:	ec 01       	movw	r28, r24
     206:	f1 01       	movw	r30, r2
     208:	ee 01       	movw	r28, r28
     20a:	f0 01       	movw	r30, r0
     20c:	34 0a       	sbc	r3, r20
     20e:	36 0a       	sbc	r3, r22
     210:	72 0a       	sbc	r7, r18
     212:	ae 0a       	sbc	r10, r30
     214:	b7 0a       	sbc	r11, r23
     216:	bc 0a       	sbc	r11, r28
     218:	0e 0b       	sbc	r16, r30
     21a:	13 0b       	sbc	r17, r19
     21c:	62 0a       	sbc	r6, r18
     21e:	64 0a       	sbc	r6, r20
     220:	66 0a       	sbc	r6, r22
     222:	68 0a       	sbc	r6, r24
     224:	6a 0a       	sbc	r6, r26
     226:	6c 0a       	sbc	r6, r28
     228:	6e 0a       	sbc	r6, r30
     22a:	70 0a       	sbc	r7, r16
     22c:	9e 0a       	sbc	r9, r30
     22e:	a0 0a       	sbc	r10, r16
     230:	a2 0a       	sbc	r10, r18
     232:	a4 0a       	sbc	r10, r20
     234:	a6 0a       	sbc	r10, r22
     236:	a8 0a       	sbc	r10, r24
     238:	aa 0a       	sbc	r10, r26
     23a:	ac 0a       	sbc	r10, r28
     23c:	c8 0a       	sbc	r12, r24
     23e:	d3 0a       	sbc	r13, r19
     240:	dd 0a       	sbc	r13, r29
     242:	eb 0a       	sbc	r14, r27
     244:	ed 0a       	sbc	r14, r29
     246:	ef 0a       	sbc	r14, r31
     248:	f9 0a       	sbc	r15, r25
     24a:	03 0b       	sbc	r16, r19
     24c:	8b 0e       	add	r8, r27
     24e:	8e 0e       	add	r8, r30
     250:	91 0e       	add	r9, r17
     252:	94 0e       	add	r9, r20
     254:	97 0e       	add	r9, r23
     256:	9a 0e       	add	r9, r26
     258:	9d 0e       	add	r9, r29

0000025a <__ctors_end>:
     25a:	11 24       	eor	r1, r1
     25c:	1f be       	out	0x3f, r1	; 63
     25e:	cf ef       	ldi	r28, 0xFF	; 255
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df e2       	ldi	r29, 0x2F	; 47
     264:	de bf       	out	0x3e, r29	; 62

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	ec e2       	ldi	r30, 0x2C	; 44
     26e:	fa e2       	ldi	r31, 0x2A	; 42
     270:	02 c0       	rjmp	.+4      	; 0x276 <__do_copy_data+0x10>
     272:	05 90       	lpm	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	a2 3b       	cpi	r26, 0xB2	; 178
     278:	b1 07       	cpc	r27, r17
     27a:	d9 f7       	brne	.-10     	; 0x272 <__do_copy_data+0xc>

0000027c <__do_clear_bss>:
     27c:	2c e2       	ldi	r18, 0x2C	; 44
     27e:	a2 eb       	ldi	r26, 0xB2	; 178
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	01 c0       	rjmp	.+2      	; 0x286 <.do_clear_bss_start>

00000284 <.do_clear_bss_loop>:
     284:	1d 92       	st	X+, r1

00000286 <.do_clear_bss_start>:
     286:	a5 35       	cpi	r26, 0x55	; 85
     288:	b2 07       	cpc	r27, r18
     28a:	e1 f7       	brne	.-8      	; 0x284 <.do_clear_bss_loop>
     28c:	3e d0       	rcall	.+124    	; 0x30a <main>
     28e:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <_exit>

00000292 <__bad_interrupt>:
     292:	b6 ce       	rjmp	.-660    	; 0x0 <__vectors>

00000294 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     294:	e0 e8       	ldi	r30, 0x80	; 128
     296:	f6 e0       	ldi	r31, 0x06	; 6
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     29c:	85 e0       	ldi	r24, 0x05	; 5
     29e:	84 83       	std	Z+4, r24	; 0x04
     2a0:	08 95       	ret

000002a2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2a2:	08 95       	ret

000002a4 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     2a4:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     2a8:	2e ee       	ldi	r18, 0xEE	; 238
     2aa:	32 e0       	ldi	r19, 0x02	; 2
     2ac:	42 9f       	mul	r20, r18
     2ae:	c0 01       	movw	r24, r0
     2b0:	43 9f       	mul	r20, r19
     2b2:	90 0d       	add	r25, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	42 e5       	ldi	r20, 0x52	; 82
     2b8:	51 e0       	ldi	r21, 0x01	; 1
     2ba:	6a ef       	ldi	r22, 0xFA	; 250
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	8e 58       	subi	r24, 0x8E	; 142
     2c0:	99 4d       	sbci	r25, 0xD9	; 217
     2c2:	43 c7       	rjmp	.+3718   	; 0x114a <udi_vendor_iso_in_run>
     2c4:	08 95       	ret

000002c6 <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * PACKET_SIZE], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2c6:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     2ca:	2e ee       	ldi	r18, 0xEE	; 238
     2cc:	32 e0       	ldi	r19, 0x02	; 2
     2ce:	42 9f       	mul	r20, r18
     2d0:	c0 01       	movw	r24, r0
     2d2:	43 9f       	mul	r20, r19
     2d4:	90 0d       	add	r25, r0
     2d6:	11 24       	eor	r1, r1
     2d8:	43 e6       	ldi	r20, 0x63	; 99
     2da:	51 e0       	ldi	r21, 0x01	; 1
     2dc:	6a ef       	ldi	r22, 0xFA	; 250
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	84 59       	subi	r24, 0x94	; 148
     2e2:	98 4d       	sbci	r25, 0xD8	; 216
     2e4:	3e c7       	rjmp	.+3708   	; 0x1162 <udi_vendor_iso_in_run2>
     2e6:	08 95       	ret

000002e8 <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * PACKET_SIZE + 250], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     2e8:	40 91 b3 20 	lds	r20, 0x20B3	; 0x8020b3 <usb_state>
     2ec:	2e ee       	ldi	r18, 0xEE	; 238
     2ee:	32 e0       	ldi	r19, 0x02	; 2
     2f0:	42 9f       	mul	r20, r18
     2f2:	c0 01       	movw	r24, r0
     2f4:	43 9f       	mul	r20, r19
     2f6:	90 0d       	add	r25, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	44 e7       	ldi	r20, 0x74	; 116
     2fc:	51 e0       	ldi	r21, 0x01	; 1
     2fe:	6a ef       	ldi	r22, 0xFA	; 250
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	8a 59       	subi	r24, 0x9A	; 154
     304:	97 4d       	sbci	r25, 0xD7	; 215
     306:	39 c7       	rjmp	.+3698   	; 0x117a <udi_vendor_iso_in_run3>
     308:	08 95       	ret

0000030a <main>:
volatile unsigned char precalc_DMA_CH1_DESTADDR1_b2_state_equals_1;



int main(void){
	irq_initialize_vectors();
     30a:	87 e0       	ldi	r24, 0x07	; 7
     30c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     310:	78 94       	sei
	sysclk_init();
     312:	2e d6       	rcall	.+3164   	; 0xf70 <sysclk_init>
	board_init();
     314:	c6 df       	rcall	.-116    	; 0x2a2 <board_init>
	udc_start();
     316:	0e 94 b4 09 	call	0x1368	; 0x1368 <udc_start>
	tiny_dac_setup();
     31a:	fd d0       	rcall	.+506    	; 0x516 <tiny_dac_setup>
	tiny_dma_setup();
     31c:	20 d1       	rcall	.+576    	; 0x55e <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	bc d0       	rcall	.+376    	; 0x49c <tiny_adc_setup>
	tiny_adc_pid_setup();
     324:	a8 d0       	rcall	.+336    	; 0x476 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     326:	8c e0       	ldi	r24, 0x0C	; 12
     328:	9c d0       	rcall	.+312    	; 0x462 <tiny_adc_ch1setup>
	tiny_timer_setup();
     32a:	32 d5       	rcall	.+2660   	; 0xd90 <tiny_timer_setup>
	tiny_uart_setup();
     32c:	f0 d5       	rcall	.+3040   	; 0xf0e <tiny_uart_setup>
	tiny_spi_setup();
     32e:	07 d6       	rcall	.+3086   	; 0xf3e <tiny_spi_setup>
	tiny_dig_setup();
     330:	b1 df       	rcall	.-158    	; 0x294 <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");
	
	
	precalc_DMA_CH0_DESTADDR0_b1_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE]) >> 0) & 0xFF;
     332:	22 e7       	ldi	r18, 0x72	; 114
     334:	36 e2       	ldi	r19, 0x26	; 38
     336:	20 93 6f 24 	sts	0x246F, r18	; 0x80246f <precalc_DMA_CH0_DESTADDR0_b1_state_equals_0>
	precalc_DMA_CH0_DESTADDR0_b1_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE]) >> 0) & 0xFF;
     33a:	80 e6       	ldi	r24, 0x60	; 96
     33c:	99 e2       	ldi	r25, 0x29	; 41
     33e:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_1>
	precalc_DMA_CH0_DESTADDR1_b1_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE]) >> 8) & 0xFF;
     342:	30 93 5d 22 	sts	0x225D, r19	; 0x80225d <precalc_DMA_CH0_DESTADDR1_b1_state_equals_0>
	precalc_DMA_CH0_DESTADDR1_b1_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE]) >> 8) & 0xFF;
     346:	90 93 5c 22 	sts	0x225C, r25	; 0x80225c <precalc_DMA_CH0_DESTADDR1_b1_state_equals_1>
	
	precalc_DMA_CH1_DESTADDR0_b2_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;
     34a:	29 ee       	ldi	r18, 0xE9	; 233
     34c:	37 e2       	ldi	r19, 0x27	; 39
     34e:	20 93 57 22 	sts	0x2257, r18	; 0x802257 <precalc_DMA_CH1_DESTADDR0_b2_state_equals_0>
	precalc_DMA_CH1_DESTADDR0_b2_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;
     352:	87 ed       	ldi	r24, 0xD7	; 215
     354:	9a e2       	ldi	r25, 0x2A	; 42
     356:	80 93 4e 2c 	sts	0x2C4E, r24	; 0x802c4e <precalc_DMA_CH1_DESTADDR0_b2_state_equals_1>
	precalc_DMA_CH1_DESTADDR1_b2_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     35a:	30 93 5e 24 	sts	0x245E, r19	; 0x80245e <precalc_DMA_CH1_DESTADDR1_b2_state_equals_0>
	precalc_DMA_CH1_DESTADDR1_b2_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     35e:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <precalc_DMA_CH1_DESTADDR1_b2_state_equals_1>
     362:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <debug_counter>
     366:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <debug_counter+0x1>
     36a:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <debug_counter+0x2>
     36e:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <debug_counter+0x3>


	while (true) {
		debug_counter++;
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     378:	81 30       	cpi	r24, 0x01	; 1
     37a:	21 ee       	ldi	r18, 0xE1	; 225
     37c:	92 07       	cpc	r25, r18
     37e:	25 ef       	ldi	r18, 0xF5	; 245
     380:	a2 07       	cpc	r26, r18
     382:	25 e0       	ldi	r18, 0x05	; 5
     384:	b2 07       	cpc	r27, r18
     386:	18 f0       	brcs	.+6      	; 0x38e <main+0x84>
			debug_counter = 0;
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     3aa:	e3 cf       	rjmp	.-58     	; 0x372 <main+0x68>

000003ac <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     3ac:	08 95       	ret

000003ae <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     3ae:	08 95       	ret

000003b0 <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	switch(global_mode){
     3b0:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
     3b4:	8e 2f       	mov	r24, r30
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	88 30       	cpi	r24, 0x08	; 8
     3ba:	91 05       	cpc	r25, r1
     3bc:	90 f4       	brcc	.+36     	; 0x3e2 <main_sof_action+0x32>
     3be:	fc 01       	movw	r30, r24
     3c0:	e2 50       	subi	r30, 0x02	; 2
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__tablejump2__>
		case 0:
			tiny_dma_loop_mode_0();
     3c8:	5a d1       	rcall	.+692    	; 0x67e <tiny_dma_loop_mode_0>
			break;
     3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <main_sof_action+0x32>
		case 1:
			tiny_dma_loop_mode_1();
     3cc:	d1 d1       	rcall	.+930    	; 0x770 <tiny_dma_loop_mode_1>
			break;
     3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <main_sof_action+0x32>
		case 2:
			tiny_dma_loop_mode_2();
     3d0:	47 d2       	rcall	.+1166   	; 0x860 <tiny_dma_loop_mode_2>
			break;
     3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <main_sof_action+0x32>
		case 3:
			tiny_dma_loop_mode_3();
     3d4:	c2 d2       	rcall	.+1412   	; 0x95a <tiny_dma_loop_mode_3>
			break;
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <main_sof_action+0x32>
		case 4:
			tiny_dma_loop_mode_4();
     3d8:	37 d3       	rcall	.+1646   	; 0xa48 <tiny_dma_loop_mode_4>
			break;
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <main_sof_action+0x32>
		case 6:
			tiny_dma_loop_mode_6();
     3dc:	e0 d3       	rcall	.+1984   	; 0xb9e <tiny_dma_loop_mode_6>
			break;
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <main_sof_action+0x32>
		case 7:
			tiny_dma_loop_mode_7();
     3e0:	41 d4       	rcall	.+2178   	; 0xc64 <tiny_dma_loop_mode_7>
		break;
		default:
			break;
	}
	cli();
     3e2:	f8 94       	cli
		usb_state = !usb_state;
     3e4:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <usb_state>
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	91 11       	cpse	r25, r1
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <usb_state>
		sei();
     3f2:	78 94       	sei
     3f4:	08 95       	ret

000003f6 <main_vendor_enable>:
	return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <main_b_vendor_enable>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     3fc:	42 e5       	ldi	r20, 0x52	; 82
     3fe:	51 e0       	ldi	r21, 0x01	; 1
     400:	6e ee       	ldi	r22, 0xEE	; 238
     402:	72 e0       	ldi	r23, 0x02	; 2
     404:	82 e7       	ldi	r24, 0x72	; 114
     406:	96 e2       	ldi	r25, 0x26	; 38
     408:	a0 d6       	rcall	.+3392   	; 0x114a <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     40a:	43 e6       	ldi	r20, 0x63	; 99
     40c:	51 e0       	ldi	r21, 0x01	; 1
     40e:	6e ee       	ldi	r22, 0xEE	; 238
     410:	72 e0       	ldi	r23, 0x02	; 2
     412:	8c e6       	ldi	r24, 0x6C	; 108
     414:	97 e2       	ldi	r25, 0x27	; 39
     416:	a5 d6       	rcall	.+3402   	; 0x1162 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     418:	44 e7       	ldi	r20, 0x74	; 116
     41a:	51 e0       	ldi	r21, 0x01	; 1
     41c:	6e ee       	ldi	r22, 0xEE	; 238
     41e:	72 e0       	ldi	r23, 0x02	; 2
     420:	86 e6       	ldi	r24, 0x66	; 102
     422:	98 e2       	ldi	r25, 0x28	; 40
     424:	aa d6       	rcall	.+3412   	; 0x117a <udi_vendor_iso_in_run3>
	return true;
}
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	08 95       	ret

0000042a <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     42a:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <main_b_vendor_enable>
     42e:	08 95       	ret

00000430 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	08 95       	ret

00000434 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	08 95       	ret

00000438 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     438:	e0 e0       	ldi	r30, 0x00	; 0
     43a:	f2 e0       	ldi	r31, 0x02	; 2
     43c:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     43e:	98 2f       	mov	r25, r24
     440:	9c 71       	andi	r25, 0x1C	; 28
     442:	93 68       	ori	r25, 0x83	; 131
     444:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     446:	88 23       	and	r24, r24
     448:	1c f4       	brge	.+6      	; 0x450 <tiny_adc_ch0setup+0x18>
     44a:	90 e1       	ldi	r25, 0x10	; 16
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	02 c0       	rjmp	.+4      	; 0x454 <tiny_adc_ch0setup+0x1c>
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	89 2b       	or	r24, r25
     456:	e0 e0       	ldi	r30, 0x00	; 0
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     45c:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     45e:	16 a2       	std	Z+38, r1	; 0x26
     460:	08 95       	ret

00000462 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     462:	e0 e0       	ldi	r30, 0x00	; 0
     464:	f2 e0       	ldi	r31, 0x02	; 2
     466:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     468:	83 68       	ori	r24, 0x83	; 131
     46a:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     46c:	80 e1       	ldi	r24, 0x10	; 16
     46e:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     470:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     472:	16 aa       	std	Z+54, r1	; 0x36
     474:	08 95       	ret

00000476 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     476:	e0 e0       	ldi	r30, 0x00	; 0
     478:	f2 e0       	ldi	r31, 0x02	; 2
     47a:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     47c:	83 e8       	ldi	r24, 0x83	; 131
     47e:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     480:	8f e2       	ldi	r24, 0x2F	; 47
     482:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     484:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     486:	16 a6       	std	Z+46, r1	; 0x2e
     488:	08 95       	ret

0000048a <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     48a:	aa ec       	ldi	r26, 0xCA	; 202
     48c:	b1 e0       	ldi	r27, 0x01	; 1
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     492:	e8 2f       	mov	r30, r24
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     498:	1c 92       	st	X, r1

	return( result );
     49a:	08 95       	ret

0000049c <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     4a0:	e0 e7       	ldi	r30, 0x70	; 112
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	91 81       	ldd	r25, Z+1	; 0x01
     4a6:	9d 7f       	andi	r25, 0xFD	; 253
     4a8:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     4aa:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     4ae:	62 30       	cpi	r22, 0x02	; 2
     4b0:	31 f1       	breq	.+76     	; 0x4fe <tiny_adc_setup+0x62>
     4b2:	e0 e0       	ldi	r30, 0x00	; 0
     4b4:	f2 e0       	ldi	r31, 0x02	; 2
     4b6:	9c e1       	ldi	r25, 0x1C	; 28
     4b8:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     4ba:	90 e4       	ldi	r25, 0x40	; 64
     4bc:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4be:	81 11       	cpse	r24, r1
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <tiny_adc_setup+0x2a>
     4c2:	80 e4       	ldi	r24, 0x40	; 64
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <tiny_adc_setup+0x2c>
     4c6:	80 ec       	ldi	r24, 0xC0	; 192
     4c8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     4cc:	61 30       	cpi	r22, 0x01	; 1
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <tiny_adc_setup+0x38>
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <tiny_adc_setup+0x3a>
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	d2 e0       	ldi	r29, 0x02	; 2
     4da:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     4dc:	80 e2       	ldi	r24, 0x20	; 32
     4de:	d5 df       	rcall	.-86     	; 0x48a <ReadCalibrationByte>
     4e0:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     4e2:	81 e2       	ldi	r24, 0x21	; 33
     4e4:	d2 df       	rcall	.-92     	; 0x48a <ReadCalibrationByte>
     4e6:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     4e8:	18 8e       	std	Y+24, r1	; 0x18
     4ea:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     4f0:	c2 df       	rcall	.-124    	; 0x476 <tiny_adc_pid_setup>
     4f2:	0e c0       	rjmp	.+28     	; 0x510 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4f4:	80 ec       	ldi	r24, 0xC0	; 192
     4f6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	ec cf       	rjmp	.-40     	; 0x4d6 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f2 e0       	ldi	r31, 0x02	; 2
     502:	9e e1       	ldi	r25, 0x1E	; 30
     504:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     506:	90 e4       	ldi	r25, 0x40	; 64
     508:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     50a:	81 11       	cpse	r24, r1
     50c:	f3 cf       	rjmp	.-26     	; 0x4f4 <tiny_adc_setup+0x58>
     50e:	d9 cf       	rjmp	.-78     	; 0x4c2 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     51a:	e0 e7       	ldi	r30, 0x70	; 112
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	8b 7f       	andi	r24, 0xFB	; 251
     522:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     524:	c0 e2       	ldi	r28, 0x20	; 32
     526:	d3 e0       	ldi	r29, 0x03	; 3
     528:	8d e0       	ldi	r24, 0x0D	; 13
     52a:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     52c:	80 e4       	ldi	r24, 0x40	; 64
     52e:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     530:	89 e0       	ldi	r24, 0x09	; 9
     532:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     534:	83 e3       	ldi	r24, 0x33	; 51
     536:	a9 df       	rcall	.-174    	; 0x48a <ReadCalibrationByte>
     538:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     53a:	82 e3       	ldi	r24, 0x32	; 50
     53c:	a6 df       	rcall	.-180    	; 0x48a <ReadCalibrationByte>
     53e:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     540:	87 e3       	ldi	r24, 0x37	; 55
     542:	a3 df       	rcall	.-186    	; 0x48a <ReadCalibrationByte>
     544:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     546:	86 e3       	ldi	r24, 0x36	; 54
     548:	a0 df       	rcall	.-192    	; 0x48a <ReadCalibrationByte>
     54a:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     54c:	e0 e2       	ldi	r30, 0x20	; 32
     54e:	f6 e0       	ldi	r31, 0x06	; 6
     550:	80 81       	ld	r24, Z
     552:	83 60       	ori	r24, 0x03	; 3
     554:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     556:	14 82       	std	Z+4, r1	; 0x04
	
	

     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <tiny_dma_setup>:
#include <util/delay.h>


void tiny_dma_setup(void){
	//Turn on DMA
	PR.PRGEN &=0b111111110; //Turn on DMA clk
     55e:	e0 e7       	ldi	r30, 0x70	; 112
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 81       	ld	r24, Z
     564:	8e 7f       	andi	r24, 0xFE	; 254
     566:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm | DMA_PRIMODE_CH01RR23_gc;
     568:	82 e8       	ldi	r24, 0x82	; 130
     56a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     56e:	08 95       	ret

00000570 <tiny_dma_flush>:
}
void tiny_dma_flush(void){
	DMA.CH0.CTRLA = 0x00;
     570:	e0 e0       	ldi	r30, 0x00	; 0
     572:	f1 e0       	ldi	r31, 0x01	; 1
     574:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     576:	80 e4       	ldi	r24, 0x40	; 64
     578:	80 8b       	std	Z+16, r24	; 0x10

	DMA.CH1.CTRLA = 0x00;
     57a:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     57c:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH2.CTRLA = 0x00;
     57e:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     580:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.CTRLA = 0x00;
     582:	e0 e4       	ldi	r30, 0x40	; 64
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	10 82       	st	Z, r1
	DMA.CH3.CTRLA = DMA_CH_RESET_bm;
     588:	80 83       	st	Z, r24
	
	b1_state = 0;
     58a:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <b1_state>
	b2_state = 0;
     58e:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <b2_state>
	usb_state = 0;
     592:	10 92 b3 20 	sts	0x20B3, r1	; 0x8020b3 <usb_state>
     596:	08 95       	ret

00000598 <tiny_dma_set_mode_0>:
}
void tiny_dma_set_mode_0(void){
	
	global_mode = 0;
     598:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     59c:	e9 df       	rcall	.-46     	; 0x570 <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     59e:	e0 e0       	ldi	r30, 0x00	; 0
     5a0:	f1 e0       	ldi	r31, 0x01	; 1
     5a2:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     5a4:	94 e2       	ldi	r25, 0x24	; 36
     5a6:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     5a8:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     5aa:	49 e5       	ldi	r20, 0x59	; 89
     5ac:	42 ab       	std	Z+50, r20	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     5ae:	32 e0       	ldi	r19, 0x02	; 2
     5b0:	33 ab       	std	Z+51, r19	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     5b2:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     5b6:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     5ba:	64 ab       	std	Z+52, r22	; 0x34
     5bc:	75 ab       	std	Z+53, r23	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     5be:	61 e7       	ldi	r22, 0x71	; 113
     5c0:	74 e2       	ldi	r23, 0x24	; 36
     5c2:	60 af       	std	Z+56, r22	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     5c4:	71 af       	std	Z+57, r23	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     5c6:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     5c8:	8b e3       	ldi	r24, 0x3B	; 59
     5ca:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     5d2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     5d6:	20 a9       	ldd	r18, Z+48	; 0x30
     5d8:	20 68       	ori	r18, 0x80	; 128
     5da:	20 ab       	std	Z+48, r18	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     5dc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     5e0:	a0 e4       	ldi	r26, 0x40	; 64
     5e2:	b1 e0       	ldi	r27, 0x01	; 1
     5e4:	9c 93       	st	X, r25
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     5e6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     5ea:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     5ee:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     5f2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     5f6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     5fa:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     5fe:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     602:	4e e5       	ldi	r20, 0x5E	; 94
     604:	52 e2       	ldi	r21, 0x22	; 34
     606:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     60a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     60e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     612:	29 e3       	ldi	r18, 0x39	; 57
     614:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     618:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     61c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     620:	2c 91       	ld	r18, X
     622:	20 68       	ori	r18, 0x80	; 128
     624:	2c 93       	st	X, r18
	
	DMA.CH0.CTRLA = 0x00;
     626:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     628:	20 e4       	ldi	r18, 0x40	; 64
     62a:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     62c:	24 e0       	ldi	r18, 0x04	; 4
     62e:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
     630:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     632:	81 e9       	ldi	r24, 0x91	; 145
     634:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     636:	80 e1       	ldi	r24, 0x10	; 16
     638:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     63a:	47 e7       	ldi	r20, 0x77	; 119
     63c:	51 e0       	ldi	r21, 0x01	; 1
     63e:	44 8b       	std	Z+20, r20	; 0x14
     640:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     642:	90 8f       	std	Z+24, r25	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     644:	31 8f       	std	Z+25, r19	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     646:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     648:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     64c:	2e ee       	ldi	r18, 0xEE	; 238
     64e:	32 e0       	ldi	r19, 0x02	; 2
     650:	42 9f       	mul	r20, r18
     652:	c0 01       	movw	r24, r0
     654:	43 9f       	mul	r20, r19
     656:	90 0d       	add	r25, r0
     658:	11 24       	eor	r1, r1
     65a:	8e 58       	subi	r24, 0x8E	; 142
     65c:	99 4d       	sbci	r25, 0xD9	; 217
     65e:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[b1_state * PACKET_SIZE]) >> 8) & 0xFF;
     660:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <b1_state>
     664:	42 9f       	mul	r20, r18
     666:	c0 01       	movw	r24, r0
     668:	43 9f       	mul	r20, r19
     66a:	90 0d       	add	r25, r0
     66c:	11 24       	eor	r1, r1
     66e:	8e 58       	subi	r24, 0x8E	; 142
     670:	99 4d       	sbci	r25, 0xD9	; 217
     672:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     674:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     676:	80 89       	ldd	r24, Z+16	; 0x10
     678:	80 68       	ori	r24, 0x80	; 128
     67a:	80 8b       	std	Z+16, r24	; 0x10
     67c:	08 95       	ret

0000067e <tiny_dma_loop_mode_0>:
}

void tiny_dma_loop_mode_0(void){
     67e:	08 95       	ret

00000680 <tiny_dma_set_mode_1>:
	return;
}

void tiny_dma_set_mode_1(void){
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
	
	global_mode = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     68a:	72 df       	rcall	.-284    	; 0x570 <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH2.CTRLA = 0x00;
     68c:	e0 e0       	ldi	r30, 0x00	; 0
     68e:	f1 e0       	ldi	r31, 0x01	; 1
     690:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     692:	80 e4       	ldi	r24, 0x40	; 64
     694:	80 ab       	std	Z+48, r24	; 0x30
		
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00;  //No int
     69a:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     69c:	12 aa       	std	Z+50, r1	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     69e:	5b e4       	ldi	r21, 0x4B	; 75
     6a0:	53 ab       	std	Z+51, r21	; 0x33
	DMA.CH2.TRFCNT = 0;
     6a2:	14 aa       	std	Z+52, r1	; 0x34
     6a4:	15 aa       	std	Z+53, r1	; 0x35
	DMA.CH2.REPCNT = 0;
     6a6:	16 aa       	std	Z+54, r1	; 0x36
		
	DMA.CH2.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e2       	ldi	r19, 0x20	; 32
     6ac:	20 af       	std	Z+56, r18	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     6ae:	31 af       	std	Z+57, r19	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     6b0:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     6b2:	40 ea       	ldi	r20, 0xA0	; 160
     6b4:	44 af       	std	Z+60, r20	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     6b6:	38 e0       	ldi	r19, 0x08	; 8
     6b8:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     6bc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     6c0:	80 a9       	ldd	r24, Z+48	; 0x30
     6c2:	80 6a       	ori	r24, 0xA0	; 160
     6c4:	80 ab       	std	Z+48, r24	; 0x30
		
	USARTC0.DATA = 0x55;
     6c6:	85 e5       	ldi	r24, 0x55	; 85
     6c8:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>

	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     6cc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     6d0:	a0 e4       	ldi	r26, 0x40	; 64
     6d2:	b1 e0       	ldi	r27, 0x01	; 1
     6d4:	d4 e2       	ldi	r29, 0x24	; 36
     6d6:	dc 93       	st	X, r29
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     6d8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     6dc:	89 e5       	ldi	r24, 0x59	; 89
     6de:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     6e2:	c2 e0       	ldi	r28, 0x02	; 2
     6e4:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     6e8:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     6ec:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     6f0:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     6f4:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     6f8:	61 e7       	ldi	r22, 0x71	; 113
     6fa:	74 e2       	ldi	r23, 0x24	; 36
     6fc:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     700:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     704:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     708:	8b e3       	ldi	r24, 0x3B	; 59
     70a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     714:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     718:	2c 91       	ld	r18, X
     71a:	20 68       	ori	r18, 0x80	; 128
     71c:	2c 93       	st	X, r18
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     71e:	90 8b       	std	Z+16, r25	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
     720:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     722:	a1 e9       	ldi	r26, 0x91	; 145
     724:	a2 8b       	std	Z+18, r26	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     726:	20 e1       	ldi	r18, 0x10	; 16
     728:	23 8b       	std	Z+19, r18	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     72a:	67 e7       	ldi	r22, 0x77	; 119
     72c:	71 e0       	ldi	r23, 0x01	; 1
     72e:	64 8b       	std	Z+20, r22	; 0x14
     730:	75 8b       	std	Z+21, r23	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     732:	d0 8f       	std	Z+24, r29	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     734:	c1 8f       	std	Z+25, r28	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     736:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     738:	c2 e7       	ldi	r28, 0x72	; 114
     73a:	d6 e2       	ldi	r29, 0x26	; 38
     73c:	c4 8f       	std	Z+28, r28	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     73e:	d5 8f       	std	Z+29, r29	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     740:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     742:	20 89       	ldd	r18, Z+16	; 0x10
     744:	20 68       	ori	r18, 0x80	; 128
     746:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     748:	90 a3       	std	Z+32, r25	; 0x20
	DMA.CH1.CTRLB = 0x03; //Hi interrupt
     74a:	81 a3       	std	Z+33, r24	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     74c:	a2 a3       	std	Z+34, r26	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     74e:	53 a3       	std	Z+35, r21	; 0x23
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     750:	64 a3       	std	Z+36, r22	; 0x24
     752:	75 a3       	std	Z+37, r23	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     754:	40 a7       	std	Z+40, r20	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     756:	31 a7       	std	Z+41, r19	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     758:	12 a6       	std	Z+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     75a:	89 ee       	ldi	r24, 0xE9	; 233
     75c:	97 e2       	ldi	r25, 0x27	; 39
     75e:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 8) & 0xFF;
     760:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     762:	16 a6       	std	Z+46, r1	; 0x2e
		
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     764:	80 a1       	ldd	r24, Z+32	; 0x20
     766:	80 68       	ori	r24, 0x80	; 128
     768:	80 a3       	std	Z+32, r24	; 0x20
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <tiny_dma_loop_mode_1>:

void tiny_dma_loop_mode_1(void){
     770:	08 95       	ret

00000772 <tiny_dma_set_mode_2>:
	return;
}

void tiny_dma_set_mode_2(void){
     772:	cf 93       	push	r28
	cli();
     774:	f8 94       	cli
	global_mode = 2;
     776:	c2 e0       	ldi	r28, 0x02	; 2
     778:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     77c:	f9 de       	rcall	.-526    	; 0x570 <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     77e:	e0 e0       	ldi	r30, 0x00	; 0
     780:	f1 e0       	ldi	r31, 0x01	; 1
     782:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     784:	94 e2       	ldi	r25, 0x24	; 36
     786:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     788:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     78a:	39 e5       	ldi	r19, 0x59	; 89
     78c:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     792:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     796:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     79a:	44 ab       	std	Z+52, r20	; 0x34
     79c:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     79e:	4e e5       	ldi	r20, 0x5E	; 94
     7a0:	52 e2       	ldi	r21, 0x22	; 34
     7a2:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     7a4:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     7a6:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     7a8:	29 e3       	ldi	r18, 0x39	; 57
     7aa:	24 af       	std	Z+60, r18	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     7ac:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     7b0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     7b4:	20 a9       	ldd	r18, Z+48	; 0x30
     7b6:	20 68       	ori	r18, 0x80	; 128
     7b8:	20 ab       	std	Z+48, r18	; 0x30

	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     7ba:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     7be:	a0 e4       	ldi	r26, 0x40	; 64
     7c0:	b1 e0       	ldi	r27, 0x01	; 1
     7c2:	9c 93       	st	X, r25
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     7c4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     7c8:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     7cc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     7d0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     7d4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     7d8:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     7dc:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     7e0:	21 e7       	ldi	r18, 0x71	; 113
     7e2:	34 e2       	ldi	r19, 0x24	; 36
     7e4:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     7e8:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     7ec:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     7f0:	2b e3       	ldi	r18, 0x3B	; 59
     7f2:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     7f6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     7fa:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     7fe:	2c 91       	ld	r18, X
     800:	20 68       	ori	r18, 0x80	; 128
     802:	2c 93       	st	X, r18
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     804:	54 e0       	ldi	r21, 0x04	; 4
     806:	50 8b       	std	Z+16, r21	; 0x10
	DMA.CH0.CTRLB = 0x03; //No interrupt!
     808:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     80a:	41 e9       	ldi	r20, 0x91	; 145
     80c:	42 8b       	std	Z+18, r20	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from ADCA channel 0
     80e:	c3 8b       	std	Z+19, r28	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     810:	27 e7       	ldi	r18, 0x77	; 119
     812:	31 e0       	ldi	r19, 0x01	; 1
     814:	24 8b       	std	Z+20, r18	; 0x14
     816:	35 8b       	std	Z+21, r19	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     818:	90 8f       	std	Z+24, r25	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     81a:	c1 8f       	std	Z+25, r28	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     81c:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     81e:	62 e7       	ldi	r22, 0x72	; 114
     820:	76 e2       	ldi	r23, 0x26	; 38
     822:	64 8f       	std	Z+28, r22	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     824:	75 8f       	std	Z+29, r23	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     826:	16 8e       	std	Z+30, r1	; 0x1e
					
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     828:	50 a3       	std	Z+32, r21	; 0x20
	DMA.CH1.CTRLB = 0x03; //No interrupt!
     82a:	81 a3       	std	Z+33, r24	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     82c:	42 a3       	std	Z+34, r20	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;	//Triggered from ADCA channel 0
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	83 a3       	std	Z+35, r24	; 0x23
	DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     832:	24 a3       	std	Z+36, r18	; 0x24
     834:	35 a3       	std	Z+37, r19	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &ADCA.CH2.RESL) >> 0) & 0xFF; //Source address is ADC
     836:	84 e3       	ldi	r24, 0x34	; 52
     838:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &ADCA.CH2.RESL) >> 8) & 0xFF;
     83a:	c1 a7       	std	Z+41, r28	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     83c:	12 a6       	std	Z+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     83e:	89 ee       	ldi	r24, 0xE9	; 233
     840:	97 e2       	ldi	r25, 0x27	; 39
     842:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 8) & 0xFF;
     844:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     846:	16 a6       	std	Z+46, r1	; 0x2e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     848:	80 89       	ldd	r24, Z+16	; 0x10
     84a:	80 68       	ori	r24, 0x80	; 128
     84c:	80 8b       	std	Z+16, r24	; 0x10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84e:	00 c0       	rjmp	.+0      	; 0x850 <tiny_dma_set_mode_2+0xde>
     850:	00 c0       	rjmp	.+0      	; 0x852 <tiny_dma_set_mode_2+0xe0>
     852:	00 00       	nop
	_delay_us(5);
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     854:	80 a1       	ldd	r24, Z+32	; 0x20
     856:	80 68       	ori	r24, 0x80	; 128
     858:	80 a3       	std	Z+32, r24	; 0x20
	sei();
     85a:	78 94       	sei
}
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <tiny_dma_loop_mode_2>:

void tiny_dma_loop_mode_2(void){
     860:	08 95       	ret

00000862 <tiny_dma_set_mode_3>:
	return;
}



void tiny_dma_set_mode_3(void){
     862:	cf 93       	push	r28
	
	global_mode = 3;
     864:	c3 e0       	ldi	r28, 0x03	; 3
     866:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
		
	tiny_dma_flush();	
     86a:	82 de       	rcall	.-764    	; 0x570 <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     86c:	e0 e0       	ldi	r30, 0x00	; 0
     86e:	f1 e0       	ldi	r31, 0x01	; 1
     870:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     872:	50 e4       	ldi	r21, 0x40	; 64
     874:	50 a3       	std	Z+32, r21	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     876:	44 e0       	ldi	r20, 0x04	; 4
     878:	40 a3       	std	Z+32, r20	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     87a:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     87c:	12 a2       	std	Z+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     87e:	3b e4       	ldi	r19, 0x4B	; 75
     880:	33 a3       	std	Z+35, r19	; 0x23
	DMA.CH1.TRFCNT = 0;
     882:	14 a2       	std	Z+36, r1	; 0x24
     884:	15 a2       	std	Z+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     886:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e2       	ldi	r25, 0x20	; 32
     88c:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     88e:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     890:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     892:	20 ea       	ldi	r18, 0xA0	; 160
     894:	24 a7       	std	Z+44, r18	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     896:	98 e0       	ldi	r25, 0x08	; 8
     898:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     89a:	16 a6       	std	Z+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     89c:	80 a1       	ldd	r24, Z+32	; 0x20
     89e:	80 6a       	ori	r24, 0xA0	; 160
     8a0:	80 a3       	std	Z+32, r24	; 0x20
	
	USARTC0.DATA = 0x55;
     8a2:	85 e5       	ldi	r24, 0x55	; 85
     8a4:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     8a8:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     8aa:	74 e2       	ldi	r23, 0x24	; 36
     8ac:	70 ab       	std	Z+48, r23	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     8ae:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     8b0:	69 e5       	ldi	r22, 0x59	; 89
     8b2:	62 ab       	std	Z+50, r22	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     8b4:	c3 ab       	std	Z+51, r28	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     8b6:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <dacBuf_len>
     8ba:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <dacBuf_len+0x1>
     8be:	a4 ab       	std	Z+52, r26	; 0x34
     8c0:	b5 ab       	std	Z+53, r27	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     8c2:	ae e5       	ldi	r26, 0x5E	; 94
     8c4:	b2 e2       	ldi	r27, 0x22	; 34
     8c6:	a0 af       	std	Z+56, r26	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     8c8:	b1 af       	std	Z+57, r27	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     8ca:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     8cc:	89 e3       	ldi	r24, 0x39	; 57
     8ce:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     8d0:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     8d4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     8d8:	80 a9       	ldd	r24, Z+48	; 0x30
     8da:	80 68       	ori	r24, 0x80	; 128
     8dc:	80 ab       	std	Z+48, r24	; 0x30

	DMA.CH3.REPCNT = 0; //Repeat forever!
     8de:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     8e2:	a0 e4       	ldi	r26, 0x40	; 64
     8e4:	b1 e0       	ldi	r27, 0x01	; 1
     8e6:	7c 93       	st	X, r23
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     8e8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     8ec:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     8f6:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     8fa:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     8fe:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     902:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     906:	61 e7       	ldi	r22, 0x71	; 113
     908:	74 e2       	ldi	r23, 0x24	; 36
     90a:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     90e:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     912:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     916:	8b e3       	ldi	r24, 0x3B	; 59
     918:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     91c:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     920:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     924:	8c 91       	ld	r24, X
     926:	80 68       	ori	r24, 0x80	; 128
     928:	8c 93       	st	X, r24
	
	//Actual data being transferred
	DMA.CH0.CTRLA = 0x00;
     92a:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     92c:	50 8b       	std	Z+16, r21	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     92e:	40 8b       	std	Z+16, r20	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt
     930:	c1 8b       	std	Z+17, r28	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     932:	81 e9       	ldi	r24, 0x91	; 145
     934:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     936:	33 8b       	std	Z+19, r19	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     938:	47 e7       	ldi	r20, 0x77	; 119
     93a:	51 e0       	ldi	r21, 0x01	; 1
     93c:	44 8b       	std	Z+20, r20	; 0x14
     93e:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     940:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     942:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     944:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     946:	82 e7       	ldi	r24, 0x72	; 114
     948:	96 e2       	ldi	r25, 0x26	; 38
     94a:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     94c:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     94e:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     950:	80 89       	ldd	r24, Z+16	; 0x10
     952:	80 68       	ori	r24, 0x80	; 128
     954:	80 8b       	std	Z+16, r24	; 0x10


}
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <tiny_dma_loop_mode_3>:

void tiny_dma_loop_mode_3(void){
     95a:	08 95       	ret

0000095c <tiny_dma_set_mode_4>:
	return;
}

void tiny_dma_set_mode_4(void){
     95c:	cf 93       	push	r28
	
	global_mode = 4;
     95e:	c4 e0       	ldi	r28, 0x04	; 4
     960:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     964:	05 de       	rcall	.-1014   	; 0x570 <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     966:	e0 e0       	ldi	r30, 0x00	; 0
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     96c:	80 e4       	ldi	r24, 0x40	; 64
     96e:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     970:	c0 a3       	std	Z+32, r28	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     972:	11 a2       	std	Z+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     974:	12 a2       	std	Z+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     976:	4b e4       	ldi	r20, 0x4B	; 75
     978:	43 a3       	std	Z+35, r20	; 0x23
	DMA.CH1.TRFCNT = 0;
     97a:	14 a2       	std	Z+36, r1	; 0x24
     97c:	15 a2       	std	Z+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     97e:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e2       	ldi	r25, 0x20	; 32
     984:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     986:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     988:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     98a:	60 ea       	ldi	r22, 0xA0	; 160
     98c:	64 a7       	std	Z+44, r22	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     98e:	88 e0       	ldi	r24, 0x08	; 8
     990:	85 a7       	std	Z+45, r24	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     992:	16 a6       	std	Z+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     994:	90 a1       	ldd	r25, Z+32	; 0x20
     996:	90 6a       	ori	r25, 0xA0	; 160
     998:	90 a3       	std	Z+32, r25	; 0x20
	
	USARTC0.DATA = 0x55;
     99a:	95 e5       	ldi	r25, 0x55	; 85
     99c:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     9a0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     9a4:	a0 e4       	ldi	r26, 0x40	; 64
     9a6:	b1 e0       	ldi	r27, 0x01	; 1
     9a8:	94 e2       	ldi	r25, 0x24	; 36
     9aa:	9c 93       	st	X, r25
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     9ac:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     9b0:	99 e5       	ldi	r25, 0x59	; 89
     9b2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     9bc:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     9c0:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     9c4:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     9c8:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     9cc:	21 e7       	ldi	r18, 0x71	; 113
     9ce:	34 e2       	ldi	r19, 0x24	; 36
     9d0:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     9d4:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     9d8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     9dc:	9b e3       	ldi	r25, 0x3B	; 59
     9de:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     9e8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     9ec:	2c 91       	ld	r18, X
     9ee:	20 68       	ori	r18, 0x80	; 128
     9f0:	2c 93       	st	X, r18
	
	//Actual data being transferred
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     9f2:	c0 8b       	std	Z+16, r28	; 0x10
	DMA.CH0.CTRLB = 0x03; //No interrupt
     9f4:	91 8b       	std	Z+17, r25	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     9f6:	31 e9       	ldi	r19, 0x91	; 145
     9f8:	32 8b       	std	Z+18, r19	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     9fa:	43 8b       	std	Z+19, r20	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     9fc:	47 e7       	ldi	r20, 0x77	; 119
     9fe:	51 e0       	ldi	r21, 0x01	; 1
     a00:	44 8b       	std	Z+20, r20	; 0x14
     a02:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     a04:	60 8f       	std	Z+24, r22	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     a06:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     a08:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     a0a:	62 e7       	ldi	r22, 0x72	; 114
     a0c:	76 e2       	ldi	r23, 0x26	; 38
     a0e:	64 8f       	std	Z+28, r22	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     a10:	75 8f       	std	Z+29, r23	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     a12:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a14:	20 89       	ldd	r18, Z+16	; 0x10
     a16:	20 68       	ori	r18, 0x80	; 128
     a18:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     a1a:	c0 ab       	std	Z+48, r28	; 0x30
	DMA.CH2.CTRLB = 0x03; //Hi interrupt on block complete
     a1c:	91 ab       	std	Z+49, r25	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     a1e:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_SPIC_gc;
     a20:	9a e4       	ldi	r25, 0x4A	; 74
     a22:	93 ab       	std	Z+51, r25	; 0x33
	DMA.CH2.TRFCNT = HALFPACKET_SIZE;
     a24:	44 ab       	std	Z+52, r20	; 0x34
     a26:	55 ab       	std	Z+53, r21	; 0x35
		
	DMA.CH2.SRCADDR0 = (( (uint16_t) &SPIC.DATA) >> 0) & 0xFF; //Source address is ADC
     a28:	93 ec       	ldi	r25, 0xC3	; 195
     a2a:	90 af       	std	Z+56, r25	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &SPIC.DATA) >> 8) & 0xFF;
     a2c:	81 af       	std	Z+57, r24	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     a2e:	12 ae       	std	Z+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     a30:	89 ee       	ldi	r24, 0xE9	; 233
     a32:	97 e2       	ldi	r25, 0x27	; 39
     a34:	84 af       	std	Z+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[HALFPACKET_SIZE]) >> 8) & 0xFF;
     a36:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     a3a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a3e:	80 a9       	ldd	r24, Z+48	; 0x30
     a40:	80 68       	ori	r24, 0x80	; 128
     a42:	80 ab       	std	Z+48, r24	; 0x30
}
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <tiny_dma_loop_mode_4>:

void tiny_dma_loop_mode_4(void){
     a48:	08 95       	ret

00000a4a <tiny_dma_set_mode_5>:
return;
}
	
	
void tiny_dma_set_mode_5(void){
	global_mode = 5;
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
		
	tiny_dma_flush();
     a50:	8f dd       	rcall	.-1250   	; 0x570 <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     a52:	e0 e0       	ldi	r30, 0x00	; 0
     a54:	f1 e0       	ldi	r31, 0x01	; 1
     a56:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     a58:	34 e2       	ldi	r19, 0x24	; 36
     a5a:	30 ab       	std	Z+48, r19	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     a5c:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     a5e:	29 e5       	ldi	r18, 0x59	; 89
     a60:	22 ab       	std	Z+50, r18	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     a66:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     a6a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     a6e:	44 ab       	std	Z+52, r20	; 0x34
     a70:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     a72:	4e e5       	ldi	r20, 0x5E	; 94
     a74:	52 e2       	ldi	r21, 0x22	; 34
     a76:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     a78:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     a7a:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     a7c:	99 e3       	ldi	r25, 0x39	; 57
     a7e:	94 af       	std	Z+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     a80:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     a84:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     a88:	90 a9       	ldd	r25, Z+48	; 0x30
     a8a:	90 68       	ori	r25, 0x80	; 128
     a8c:	90 ab       	std	Z+48, r25	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     a8e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     a92:	e0 e4       	ldi	r30, 0x40	; 64
     a94:	f1 e0       	ldi	r31, 0x01	; 1
     a96:	30 83       	st	Z, r19
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     a98:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     a9c:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     aa0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     aa4:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
     aa8:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
     aac:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ab0:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     ab4:	21 e7       	ldi	r18, 0x71	; 113
     ab6:	34 e2       	ldi	r19, 0x24	; 36
     ab8:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     abc:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     ac0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     ac4:	9b e3       	ldi	r25, 0x3B	; 59
     ac6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     aca:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     ace:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ad2:	80 81       	ld	r24, Z
     ad4:	80 68       	ori	r24, 0x80	; 128
     ad6:	80 83       	st	Z, r24
     ad8:	08 95       	ret

00000ada <tiny_dma_set_mode_6>:
}

void tiny_dma_set_mode_6(void){
	
	global_mode = 6;
     ada:	86 e0       	ldi	r24, 0x06	; 6
     adc:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
	
	tiny_dma_flush();
     ae0:	47 dd       	rcall	.-1394   	; 0x570 <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ae8:	94 e2       	ldi	r25, 0x24	; 36
     aea:	90 ab       	std	Z+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     aec:	11 aa       	std	Z+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     aee:	39 e5       	ldi	r19, 0x59	; 89
     af0:	32 ab       	std	Z+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	83 ab       	std	Z+51, r24	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     af6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     afa:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     afe:	44 ab       	std	Z+52, r20	; 0x34
     b00:	55 ab       	std	Z+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     b02:	4e e5       	ldi	r20, 0x5E	; 94
     b04:	52 e2       	ldi	r21, 0x22	; 34
     b06:	40 af       	std	Z+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     b08:	51 af       	std	Z+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     b0a:	12 ae       	std	Z+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b0c:	29 e3       	ldi	r18, 0x39	; 57
     b0e:	24 af       	std	Z+60, r18	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     b10:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     b14:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b18:	20 a9       	ldd	r18, Z+48	; 0x30
     b1a:	20 68       	ori	r18, 0x80	; 128
     b1c:	20 ab       	std	Z+48, r18	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     b1e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b22:	a0 e4       	ldi	r26, 0x40	; 64
     b24:	b1 e0       	ldi	r27, 0x01	; 1
     b26:	9c 93       	st	X, r25
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     b28:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     b2c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     b30:	32 e0       	ldi	r19, 0x02	; 2
     b32:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     b36:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     b3a:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     b3e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b42:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     b46:	41 e7       	ldi	r20, 0x71	; 113
     b48:	54 e2       	ldi	r21, 0x24	; 36
     b4a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     b4e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     b52:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b56:	2b e3       	ldi	r18, 0x3B	; 59
     b58:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     b5c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     b60:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b64:	2c 91       	ld	r18, X
     b66:	20 68       	ori	r18, 0x80	; 128
     b68:	2c 93       	st	X, r18
	
	DMA.CH0.CTRLA = 0x00;
     b6a:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     b6c:	20 e4       	ldi	r18, 0x40	; 64
     b6e:	20 8b       	std	Z+16, r18	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     b70:	24 e0       	ldi	r18, 0x04	; 4
     b72:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
     b74:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     b76:	81 e9       	ldi	r24, 0x91	; 145
     b78:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     b7a:	80 e1       	ldi	r24, 0x10	; 16
     b7c:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = PACKET_SIZE;
     b7e:	4e ee       	ldi	r20, 0xEE	; 238
     b80:	52 e0       	ldi	r21, 0x02	; 2
     b82:	44 8b       	std	Z+20, r20	; 0x14
     b84:	55 8b       	std	Z+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     b86:	90 8f       	std	Z+24, r25	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     b88:	31 8f       	std	Z+25, r19	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     b8a:	12 8e       	std	Z+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     b8c:	82 e7       	ldi	r24, 0x72	; 114
     b8e:	96 e2       	ldi	r25, 0x26	; 38
     b90:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     b92:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     b94:	16 8e       	std	Z+30, r1	; 0x1e
		
	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b96:	80 89       	ldd	r24, Z+16	; 0x10
     b98:	80 68       	ori	r24, 0x80	; 128
     b9a:	80 8b       	std	Z+16, r24	; 0x10
     b9c:	08 95       	ret

00000b9e <tiny_dma_loop_mode_6>:
	
}

void tiny_dma_loop_mode_6(void){
     b9e:	08 95       	ret

00000ba0 <tiny_dma_set_mode_7>:
	return;
}

void tiny_dma_set_mode_7(void){
		
		global_mode = 7;
     ba0:	87 e0       	ldi	r24, 0x07	; 7
     ba2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
		
		tiny_dma_flush();
     ba6:	e4 dc       	rcall	.-1592   	; 0x570 <tiny_dma_flush>
		
		DMA.CH2.REPCNT = 0; //Repeat forever!
     ba8:	e0 e0       	ldi	r30, 0x00	; 0
     baa:	f1 e0       	ldi	r31, 0x01	; 1
     bac:	16 aa       	std	Z+54, r1	; 0x36
		DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     bae:	94 e2       	ldi	r25, 0x24	; 36
     bb0:	90 ab       	std	Z+48, r25	; 0x30
		DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     bb2:	11 aa       	std	Z+49, r1	; 0x31
		DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     bb4:	39 e5       	ldi	r19, 0x59	; 89
     bb6:	32 ab       	std	Z+50, r19	; 0x32
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	83 ab       	std	Z+51, r24	; 0x33
		DMA.CH2.TRFCNT = dacBuf_len;
     bbc:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     bc0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     bc4:	44 ab       	std	Z+52, r20	; 0x34
     bc6:	55 ab       	std	Z+53, r21	; 0x35

		DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     bc8:	4e e5       	ldi	r20, 0x5E	; 94
     bca:	52 e2       	ldi	r21, 0x22	; 34
     bcc:	40 af       	std	Z+56, r20	; 0x38
		DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     bce:	51 af       	std	Z+57, r21	; 0x39
		DMA.CH2.SRCADDR2 = 0x00;
     bd0:	12 ae       	std	Z+58, r1	; 0x3a
			
		DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     bd2:	29 e3       	ldi	r18, 0x39	; 57
     bd4:	24 af       	std	Z+60, r18	; 0x3c
		DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     bd6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
		DMA.CH2.DESTADDR2 = 0x00;
     bda:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
			
		//Must enable last for REPCNT won't work!
		DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     bde:	20 a9       	ldd	r18, Z+48	; 0x30
     be0:	20 68       	ori	r18, 0x80	; 128
     be2:	20 ab       	std	Z+48, r18	; 0x30
		
		DMA.CH3.REPCNT = 0; //Repeat forever!
     be4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
		DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     be8:	a0 e4       	ldi	r26, 0x40	; 64
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	9c 93       	st	X, r25
		DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     bee:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
		DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     bf2:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     bf6:	32 e0       	ldi	r19, 0x02	; 2
     bf8:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
		DMA.CH3.TRFCNT = auxDacBufLen;
     bfc:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     c00:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     c04:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c08:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

		DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     c0c:	41 e7       	ldi	r20, 0x71	; 113
     c0e:	54 e2       	ldi	r21, 0x24	; 36
     c10:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
		DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     c14:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
		DMA.CH3.SRCADDR2 = 0x00;
     c18:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
		DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     c1c:	2b e3       	ldi	r18, 0x3B	; 59
     c1e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
		DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     c22:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
		DMA.CH3.DESTADDR2 = 0x00;
     c26:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
		//Must enable last for REPCNT won't work!
		DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     c2a:	2c 91       	ld	r18, X
     c2c:	20 68       	ori	r18, 0x80	; 128
     c2e:	2c 93       	st	X, r18
		
		DMA.CH0.CTRLA = 0x00;
     c30:	10 8a       	std	Z+16, r1	; 0x10
		DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     c32:	20 e4       	ldi	r18, 0x40	; 64
     c34:	20 8b       	std	Z+16, r18	; 0x10
				
		DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     c36:	25 e0       	ldi	r18, 0x05	; 5
     c38:	20 8b       	std	Z+16, r18	; 0x10
		DMA.CH0.CTRLB = 0x03; //No interrupt!
     c3a:	81 8b       	std	Z+17, r24	; 0x11
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     c3c:	81 e9       	ldi	r24, 0x91	; 145
     c3e:	82 8b       	std	Z+18, r24	; 0x12
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	83 8b       	std	Z+19, r24	; 0x13
		DMA.CH0.TRFCNT = PACKET_SIZE;
     c44:	4e ee       	ldi	r20, 0xEE	; 238
     c46:	52 e0       	ldi	r21, 0x02	; 2
     c48:	44 8b       	std	Z+20, r20	; 0x14
     c4a:	55 8b       	std	Z+21, r21	; 0x15
				
		DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     c4c:	90 8f       	std	Z+24, r25	; 0x18
		DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     c4e:	31 8f       	std	Z+25, r19	; 0x19
		DMA.CH0.SRCADDR2 = 0x00;
     c50:	12 8e       	std	Z+26, r1	; 0x1a
				
		DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     c52:	82 e7       	ldi	r24, 0x72	; 114
     c54:	96 e2       	ldi	r25, 0x26	; 38
     c56:	84 8f       	std	Z+28, r24	; 0x1c
		DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     c58:	95 8f       	std	Z+29, r25	; 0x1d
		DMA.CH0.DESTADDR2 = 0x00;
     c5a:	16 8e       	std	Z+30, r1	; 0x1e
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     c5c:	80 89       	ldd	r24, Z+16	; 0x10
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	80 8b       	std	Z+16, r24	; 0x10
     c62:	08 95       	ret

00000c64 <tiny_dma_loop_mode_7>:
}

void tiny_dma_loop_mode_7(void){
     c64:	08 95       	ret

00000c66 <__vector_6>:
}

ISR(DMA_CH0_vect){
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	8f 93       	push	r24
     c72:	9f 93       	push	r25
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
		DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     c78:	87 e7       	ldi	r24, 0x77	; 119
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     c80:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
		if(b1_state){
     c84:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <b1_state>
     c88:	88 23       	and	r24, r24
     c8a:	49 f0       	breq	.+18     	; 0xc9e <__vector_6+0x38>
			DMA.CH0.DESTADDR0 = precalc_DMA_CH0_DESTADDR0_b1_state_equals_1;
     c8c:	80 91 70 24 	lds	r24, 0x2470	; 0x802470 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_1>
     c90:	e0 e0       	ldi	r30, 0x00	; 0
     c92:	f1 e0       	ldi	r31, 0x01	; 1
     c94:	84 8f       	std	Z+28, r24	; 0x1c
			DMA.CH0.DESTADDR1 = precalc_DMA_CH0_DESTADDR1_b1_state_equals_1;
     c96:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <precalc_DMA_CH0_DESTADDR1_b1_state_equals_1>
     c9a:	85 8f       	std	Z+29, r24	; 0x1d
     c9c:	08 c0       	rjmp	.+16     	; 0xcae <__vector_6+0x48>
		} else {
			DMA.CH0.DESTADDR0 = precalc_DMA_CH0_DESTADDR0_b1_state_equals_0;
     c9e:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <precalc_DMA_CH0_DESTADDR0_b1_state_equals_0>
     ca2:	e0 e0       	ldi	r30, 0x00	; 0
     ca4:	f1 e0       	ldi	r31, 0x01	; 1
     ca6:	84 8f       	std	Z+28, r24	; 0x1c
			DMA.CH0.DESTADDR1 = precalc_DMA_CH0_DESTADDR1_b1_state_equals_0;
     ca8:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <precalc_DMA_CH0_DESTADDR1_b1_state_equals_0>
     cac:	85 8f       	std	Z+29, r24	; 0x1d
		}
		//Must enable last for REPCNT won't work!
		asm("nop");
     cae:	00 00       	nop
		asm("nop");
     cb0:	00 00       	nop


		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     cb2:	e0 e0       	ldi	r30, 0x00	; 0
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	80 89       	ldd	r24, Z+16	; 0x10
     cb8:	80 68       	ori	r24, 0x80	; 128
     cba:	80 8b       	std	Z+16, r24	; 0x10
		EVSYS.STROBE = 0x02;
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__TEXT_REGION_LENGTH__+0x700190>
		b1_state = !b1_state;
     cc2:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b1_state>
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	91 11       	cpse	r25, r1
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b1_state>
		DMA.INTFLAGS = 0x01;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
			default:
			////////////////////////////////////////
			break;
		}
		*/
}
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	9f 91       	pop	r25
     cdc:	8f 91       	pop	r24
     cde:	0f 90       	pop	r0
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	0f 90       	pop	r0
     ce4:	1f 90       	pop	r1
     ce6:	18 95       	reti

00000ce8 <__vector_7>:

ISR(DMA_CH1_vect){
     ce8:	1f 92       	push	r1
     cea:	0f 92       	push	r0
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	0f 92       	push	r0
     cf0:	11 24       	eor	r1, r1
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	ef 93       	push	r30
     cf8:	ff 93       	push	r31
		DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     cfa:	87 e7       	ldi	r24, 0x77	; 119
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     d02:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
		
		if(b2_state){
     d06:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <b2_state>
     d0a:	88 23       	and	r24, r24
     d0c:	49 f0       	breq	.+18     	; 0xd20 <__vector_7+0x38>
			DMA.CH1.DESTADDR0 = precalc_DMA_CH1_DESTADDR0_b2_state_equals_1;
     d0e:	80 91 4e 2c 	lds	r24, 0x2C4E	; 0x802c4e <precalc_DMA_CH1_DESTADDR0_b2_state_equals_1>
     d12:	e0 e0       	ldi	r30, 0x00	; 0
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	84 a7       	std	Z+44, r24	; 0x2c
			DMA.CH1.DESTADDR1 = precalc_DMA_CH1_DESTADDR1_b2_state_equals_1;
     d18:	80 91 56 22 	lds	r24, 0x2256	; 0x802256 <precalc_DMA_CH1_DESTADDR1_b2_state_equals_1>
     d1c:	85 a7       	std	Z+45, r24	; 0x2d
     d1e:	08 c0       	rjmp	.+16     	; 0xd30 <__vector_7+0x48>
			} else {
			DMA.CH1.DESTADDR0 = precalc_DMA_CH1_DESTADDR0_b2_state_equals_0;
     d20:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <precalc_DMA_CH1_DESTADDR0_b2_state_equals_0>
     d24:	e0 e0       	ldi	r30, 0x00	; 0
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	84 a7       	std	Z+44, r24	; 0x2c
			DMA.CH1.DESTADDR1 = precalc_DMA_CH1_DESTADDR1_b2_state_equals_0;
     d2a:	80 91 5e 24 	lds	r24, 0x245E	; 0x80245e <precalc_DMA_CH1_DESTADDR1_b2_state_equals_0>
     d2e:	85 a7       	std	Z+45, r24	; 0x2d
		}
		//Must enable last for REPCNT won't work!
		asm("nop");
     d30:	00 00       	nop
		asm("nop");
     d32:	00 00       	nop


		DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d34:	e0 e0       	ldi	r30, 0x00	; 0
     d36:	f1 e0       	ldi	r31, 0x01	; 1
     d38:	80 a1       	ldd	r24, Z+32	; 0x20
     d3a:	80 68       	ori	r24, 0x80	; 128
     d3c:	80 a3       	std	Z+32, r24	; 0x20
		EVSYS.STROBE = 0x01;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__TEXT_REGION_LENGTH__+0x700190>
		b2_state = !b2_state;
     d44:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <b2_state>
     d48:	91 11       	cpse	r25, r1
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <b2_state>
		DMA.INTFLAGS = 0x02;
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
			default:
			////////////////////////////////////////
			break;
		}
		*/
}
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_8>:
ISR(DMA_CH2_vect){
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	b2_state = !b2_state;*/
}
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	0f 90       	pop	r0
     d78:	1f 90       	pop	r1
     d7a:	18 95       	reti

00000d7c <__vector_9>:

ISR(DMA_CH3_vect){
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	b2_state = !b2_state;*/
}
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     d90:	e0 e7       	ldi	r30, 0x70	; 112
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	83 81       	ldd	r24, Z+3	; 0x03
     d96:	8c 7f       	andi	r24, 0xFC	; 252
     d98:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     d9a:	84 81       	ldd	r24, Z+4	; 0x04
     d9c:	8c 7f       	andi	r24, 0xFC	; 252
     d9e:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     da0:	80 81       	ld	r24, Z
     da2:	8d 7f       	andi	r24, 0xFD	; 253
     da4:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     da6:	e0 e8       	ldi	r30, 0x80	; 128
     da8:	f1 e0       	ldi	r31, 0x01	; 1
     daa:	80 ec       	ldi	r24, 0xC0	; 192
     dac:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     dae:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = EVSYS_CHMUX_ADCA_CH0_gc;
     db0:	80 e2       	ldi	r24, 0x20	; 32
     db2:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     db4:	11 86       	std	Z+9, r1	; 0x09
		
		EVSYS.CH0MUX = EVSYS_CHMUX_ADCA_CH2_gc;
     db6:	82 e2       	ldi	r24, 0x22	; 34
     db8:	80 83       	st	Z, r24
		EVSYS.CH0CTRL = 0x00; //No filtering or Quadrature stuff
     dba:	10 86       	std	Z+8, r1	; 0x08

			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b8 e0       	ldi	r27, 0x08	; 8
     dc0:	34 e0       	ldi	r19, 0x04	; 4
     dc2:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     dc4:	23 e0       	ldi	r18, 0x03	; 3
     dc6:	11 96       	adiw	r26, 0x01	; 1
     dc8:	2c 93       	st	X, r18
     dca:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     dcc:	14 96       	adiw	r26, 0x04	; 4
     dce:	1c 92       	st	X, r1
     dd0:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
     dd2:	85 ed       	ldi	r24, 0xD5	; 213
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	96 96       	adiw	r26, 0x26	; 38
     dd8:	8d 93       	st	X+, r24
     dda:	9c 93       	st	X, r25
     ddc:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
     dde:	16 96       	adiw	r26, 0x06	; 6
     de0:	1c 92       	st	X, r1
     de2:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     de4:	e0 e4       	ldi	r30, 0x40	; 64
     de6:	f8 e0       	ldi	r31, 0x08	; 8
     de8:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     dea:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     dec:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     dee:	86 a3       	std	Z+38, r24	; 0x26
     df0:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     df2:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     df4:	e0 e6       	ldi	r30, 0x60	; 96
     df6:	f6 e0       	ldi	r31, 0x06	; 6
     df8:	80 81       	ld	r24, Z
     dfa:	80 61       	ori	r24, 0x10	; 16
     dfc:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     dfe:	e0 e4       	ldi	r30, 0x40	; 64
     e00:	f9 e0       	ldi	r31, 0x09	; 9
     e02:	83 e1       	ldi	r24, 0x13	; 19
     e04:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     e06:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     e0c:	a6 a3       	std	Z+38, r26	; 0x26
     e0e:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     e10:	10 a6       	std	Z+40, r1	; 0x28
     e12:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 83       	st	Z, r24
     e18:	08 95       	ret

00000e1a <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	2f 93       	push	r18
     e26:	3f 93       	push	r19
     e28:	4f 93       	push	r20
     e2a:	5f 93       	push	r21
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	1f 92       	push	r1
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
     e44:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     e48:	87 30       	cpi	r24, 0x07	; 7
     e4a:	31 f4       	brne	.+12     	; 0xe58 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
     e4c:	e0 e0       	ldi	r30, 0x00	; 0
     e4e:	f2 e0       	ldi	r31, 0x02	; 2
     e50:	84 a5       	ldd	r24, Z+44	; 0x2c
     e52:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
     e54:	95 a5       	ldd	r25, Z+45	; 0x2d
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
     e58:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
     e5c:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <__data_end>
     e60:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
     e62:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e66:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	0c f4       	brge	.+2      	; 0xe72 <__vector_83+0x58>
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	99 23       	and	r25, r25
     e74:	c9 f0       	breq	.+50     	; 0xea8 <__vector_83+0x8e>
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	2a 3f       	cpi	r18, 0xFA	; 250
     e7a:	37 40       	sbci	r19, 0x07	; 7
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <__vector_83+0x66>
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	99 23       	and	r25, r25
     e82:	91 f0       	breq	.+36     	; 0xea8 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
     e84:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e88:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e8c:	89 30       	cpi	r24, 0x09	; 9
     e8e:	1c f4       	brge	.+6      	; 0xe96 <__vector_83+0x7c>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <__vector_83+0x80>
     e96:	86 e0       	ldi	r24, 0x06	; 6
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	82 0f       	add	r24, r18
     e9c:	93 1f       	adc	r25, r19
     e9e:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     ea2:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
     ea6:	23 c0       	rjmp	.+70     	; 0xeee <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
     ea8:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     eac:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	8f 3f       	cpi	r24, 0xFF	; 255
     eb4:	0c f0       	brlt	.+2      	; 0xeb8 <__vector_83+0x9e>
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	99 23       	and	r25, r25
     eba:	c9 f0       	breq	.+50     	; 0xeee <__vector_83+0xd4>
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	27 30       	cpi	r18, 0x07	; 7
     ec0:	31 05       	cpc	r19, r1
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <__vector_83+0xac>
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	99 23       	and	r25, r25
     ec8:	91 f0       	breq	.+36     	; 0xeee <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
     eca:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     ece:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     ed2:	88 3f       	cpi	r24, 0xF8	; 248
     ed4:	1c f0       	brlt	.+6      	; 0xedc <__vector_83+0xc2>
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <__vector_83+0xc6>
     edc:	86 e0       	ldi	r24, 0x06	; 6
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a9 01       	movw	r20, r18
     ee2:	48 1b       	sub	r20, r24
     ee4:	59 0b       	sbc	r21, r25
     ee6:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     eea:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
     eee:	0f 90       	pop	r0
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	5f 91       	pop	r21
     efe:	4f 91       	pop	r20
     f00:	3f 91       	pop	r19
     f02:	2f 91       	pop	r18
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
     f0e:	e0 e7       	ldi	r30, 0x70	; 112
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	83 81       	ldd	r24, Z+3	; 0x03
     f14:	8f 7e       	andi	r24, 0xEF	; 239
     f16:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
     f18:	e0 e4       	ldi	r30, 0x40	; 64
     f1a:	f6 e0       	ldi	r31, 0x06	; 6
     f1c:	80 81       	ld	r24, Z
     f1e:	8a 6a       	ori	r24, 0xAA	; 170
     f20:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     f26:	88 e5       	ldi	r24, 0x58	; 88
     f28:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
     f2a:	e0 ea       	ldi	r30, 0xA0	; 160
     f2c:	f8 e0       	ldi	r31, 0x08	; 8
     f2e:	84 ec       	ldi	r24, 0xC4	; 196
     f30:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
     f36:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     f38:	88 e1       	ldi	r24, 0x18	; 24
     f3a:	84 83       	std	Z+4, r24	; 0x04
     f3c:	08 95       	ret

00000f3e <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
     f3e:	e0 e7       	ldi	r30, 0x70	; 112
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	83 81       	ldd	r24, Z+3	; 0x03
     f44:	87 7f       	andi	r24, 0xF7	; 247
     f46:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
     f48:	e0 ec       	ldi	r30, 0xC0	; 192
     f4a:	f8 e0       	ldi	r31, 0x08	; 8
     f4c:	80 e4       	ldi	r24, 0x40	; 64
     f4e:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     f50:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     f52:	88 e5       	ldi	r24, 0x58	; 88
     f54:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
     f58:	08 95       	ret

00000f5a <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
	asm("nop");
     f64:	00 00       	nop
}
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	00 d0       	rcall	.+0      	; 0xf7a <sysclk_init+0xa>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <sysclk_init+0xc>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     f86:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     f8a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f8e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f92:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f96:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f9a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     f9e:	64 e0       	ldi	r22, 0x04	; 4
     fa0:	81 e4       	ldi	r24, 0x41	; 65
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	ba d5       	rcall	.+2932   	; 0x1b1a <ccp_write_io>
     fa6:	6c e1       	ldi	r22, 0x1C	; 28
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	bc d5       	rcall	.+2936   	; 0x1b26 <nvm_read_byte>
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	6d e1       	ldi	r22, 0x1D	; 29
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	b7 d5       	rcall	.+2926   	; 0x1b26 <nvm_read_byte>
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	21 f4       	brne	.+8      	; 0xfca <sysclk_init+0x5a>
     fc2:	80 e4       	ldi	r24, 0x40	; 64
     fc4:	93 e2       	ldi	r25, 0x23	; 35
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	8b 83       	std	Y+3, r24	; 0x03
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	e0 e6       	ldi	r30, 0x60	; 96
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	82 83       	std	Z+2, r24	; 0x02
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	83 83       	std	Z+3, r24	; 0x03
     fdc:	9f b7       	in	r25, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	e0 e5       	ldi	r30, 0x50	; 80
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	82 60       	ori	r24, 0x02	; 2
     fe8:	80 83       	st	Z, r24
     fea:	9f bf       	out	0x3f, r25	; 63
     fec:	81 81       	ldd	r24, Z+1	; 0x01
     fee:	81 ff       	sbrs	r24, 1
     ff0:	fd cf       	rjmp	.-6      	; 0xfec <sysclk_init+0x7c>
     ff2:	9f b7       	in	r25, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	00 e5       	ldi	r16, 0x50	; 80
     ff8:	10 e0       	ldi	r17, 0x00	; 0
     ffa:	d8 01       	movw	r26, r16
     ffc:	16 96       	adiw	r26, 0x06	; 6
     ffe:	8c 91       	ld	r24, X
    1000:	16 97       	sbiw	r26, 0x06	; 6
    1002:	89 7f       	andi	r24, 0xF9	; 249
    1004:	16 96       	adiw	r26, 0x06	; 6
    1006:	8c 93       	st	X, r24
    1008:	16 97       	sbiw	r26, 0x06	; 6
    100a:	e0 e6       	ldi	r30, 0x60	; 96
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 e8       	ldi	r24, 0x80	; 128
    1010:	85 83       	std	Z+5, r24	; 0x05
    1012:	8b eb       	ldi	r24, 0xBB	; 187
    1014:	86 83       	std	Z+6, r24	; 0x06
    1016:	16 96       	adiw	r26, 0x06	; 6
    1018:	8c 91       	ld	r24, X
    101a:	16 97       	sbiw	r26, 0x06	; 6
    101c:	84 60       	ori	r24, 0x04	; 4
    101e:	16 96       	adiw	r26, 0x06	; 6
    1020:	8c 93       	st	X, r24
    1022:	80 81       	ld	r24, Z
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	80 83       	st	Z, r24
    1028:	9f bf       	out	0x3f, r25	; 63
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	80 e4       	ldi	r24, 0x40	; 64
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	74 d5       	rcall	.+2792   	; 0x1b1a <ccp_write_io>
    1032:	9f b7       	in	r25, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	f8 01       	movw	r30, r16
    1038:	80 81       	ld	r24, Z
    103a:	8e 7f       	andi	r24, 0xFE	; 254
    103c:	80 83       	st	Z, r24
    103e:	9f bf       	out	0x3f, r25	; 63
    1040:	24 96       	adiw	r28, 0x04	; 4
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <sysclk_enable_module>:
    1050:	9f b7       	in	r25, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	e8 2f       	mov	r30, r24
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	e0 59       	subi	r30, 0x90	; 144
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	60 95       	com	r22
    105e:	80 81       	ld	r24, Z
    1060:	68 23       	and	r22, r24
    1062:	60 83       	st	Z, r22
    1064:	9f bf       	out	0x3f, r25	; 63
    1066:	08 95       	ret

00001068 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1068:	86 30       	cpi	r24, 0x06	; 6
    106a:	11 f0       	breq	.+4      	; 0x1070 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1070:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1072:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1076:	81 fd       	sbrc	r24, 1
    1078:	26 c0       	rjmp	.+76     	; 0x10c6 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    107a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    107c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    107e:	e0 e5       	ldi	r30, 0x50	; 80
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	82 60       	ori	r24, 0x02	; 2
    1086:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1088:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    108a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    108c:	81 ff       	sbrs	r24, 1
    108e:	fd cf       	rjmp	.-6      	; 0x108a <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1090:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1092:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1094:	a0 e5       	ldi	r26, 0x50	; 80
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	16 96       	adiw	r26, 0x06	; 6
    109a:	8c 91       	ld	r24, X
    109c:	16 97       	sbiw	r26, 0x06	; 6
    109e:	89 7f       	andi	r24, 0xF9	; 249
    10a0:	16 96       	adiw	r26, 0x06	; 6
    10a2:	8c 93       	st	X, r24
    10a4:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    10a6:	e0 e6       	ldi	r30, 0x60	; 96
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 e8       	ldi	r24, 0x80	; 128
    10ac:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    10ae:	8b eb       	ldi	r24, 0xBB	; 187
    10b0:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    10b2:	16 96       	adiw	r26, 0x06	; 6
    10b4:	8c 91       	ld	r24, X
    10b6:	16 97       	sbiw	r26, 0x06	; 6
    10b8:	84 60       	ori	r24, 0x04	; 4
    10ba:	16 96       	adiw	r26, 0x06	; 6
    10bc:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    10be:	80 81       	ld	r24, Z
    10c0:	81 60       	ori	r24, 0x01	; 1
    10c2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10c4:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    10c6:	63 60       	ori	r22, 0x03	; 3
    10c8:	84 e4       	ldi	r24, 0x44	; 68
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	26 d5       	rcall	.+2636   	; 0x1b1a <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    10ce:	60 e4       	ldi	r22, 0x40	; 64
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	be cf       	rjmp	.-132    	; 0x1050 <sysclk_enable_module>
    10d4:	08 95       	ret

000010d6 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    10d6:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <udi_vendor_alternate_setting>
    10da:	08 95       	ret

000010dc <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    10dc:	40 d1       	rcall	.+640    	; 0x135e <udc_get_interface_desc>
    10de:	fc 01       	movw	r30, r24
    10e0:	83 81       	ldd	r24, Z+3	; 0x03
    10e2:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    10e6:	81 11       	cpse	r24, r1
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    10ea:	85 c9       	rjmp	.-3318   	; 0x3f6 <main_vendor_enable>
    10ec:	08 95       	ret
			return false;
		}
	}
	return true;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
}
    10f0:	08 95       	ret

000010f2 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    10f2:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <udi_vendor_alternate_setting>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    10fa:	97 c9       	rjmp	.-3282   	; 0x42a <main_vendor_disable>
    10fc:	08 95       	ret

000010fe <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    10fe:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq>
    1102:	88 23       	and	r24, r24
    1104:	4c f4       	brge	.+18     	; 0x1118 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1106:	80 76       	andi	r24, 0x60	; 96
    1108:	80 34       	cpi	r24, 0x40	; 64
    110a:	a9 f4       	brne	.+42     	; 0x1136 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    110c:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    1110:	81 11       	cpse	r24, r1
    1112:	13 c0       	rjmp	.+38     	; 0x113a <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1114:	8f c9       	rjmp	.-3298   	; 0x434 <main_setup_in_received>
    1116:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1118:	80 76       	andi	r24, 0x60	; 96
    111a:	80 34       	cpi	r24, 0x40	; 64
    111c:	81 f4       	brne	.+32     	; 0x113e <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    111e:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    1122:	81 11       	cpse	r24, r1
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1126:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    112a:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    112e:	89 2b       	or	r24, r25
    1130:	51 f0       	breq	.+20     	; 0x1146 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1132:	7e c9       	rjmp	.-3332   	; 0x430 <main_setup_out_received>
    1134:	08 95       	ret
		}
	}
	return false; // Not supported request
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	08 95       	ret
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	08 95       	ret
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	08 95       	ret
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	08 95       	ret
    1146:	80 e0       	ldi	r24, 0x00	; 0
}
    1148:	08 95       	ret

0000114a <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    1150:	8a 01       	movw	r16, r20
    1152:	ac 01       	movw	r20, r24
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	81 e8       	ldi	r24, 0x81	; 129
    1158:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1168:	8a 01       	movw	r16, r20
    116a:	ac 01       	movw	r20, r24
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	82 e8       	ldi	r24, 0x82	; 130
    1170:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    1180:	8a 01       	movw	r16, r20
    1182:	ac 01       	movw	r20, r24
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	83 e8       	ldi	r24, 0x83	; 131
    1188:	0e 94 01 12 	call	0x2402	; 0x2402 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1192:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1196:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    119a:	01 90       	ld	r0, Z+
    119c:	f0 81       	ld	r31, Z
    119e:	e0 2d       	mov	r30, r0
    11a0:	22 81       	ldd	r18, Z+2	; 0x02
    11a2:	33 81       	ldd	r19, Z+3	; 0x03
    11a4:	2e 0f       	add	r18, r30
    11a6:	3f 1f       	adc	r19, r31
    11a8:	fc 01       	movw	r30, r24
    11aa:	40 81       	ld	r20, Z
    11ac:	e4 0f       	add	r30, r20
    11ae:	f1 1d       	adc	r31, r1
    11b0:	e2 17       	cp	r30, r18
    11b2:	f3 07       	cpc	r31, r19
    11b4:	b8 f4       	brcc	.+46     	; 0x11e4 <udc_next_desc_in_iface+0x52>
    11b6:	81 81       	ldd	r24, Z+1	; 0x01
    11b8:	84 30       	cpi	r24, 0x04	; 4
    11ba:	b9 f0       	breq	.+46     	; 0x11ea <udc_next_desc_in_iface+0x58>
    11bc:	86 13       	cpse	r24, r22
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <udc_next_desc_in_iface+0x40>
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <udc_next_desc_in_iface+0x3a>
    11c2:	81 81       	ldd	r24, Z+1	; 0x01
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	a1 f0       	breq	.+40     	; 0x11f0 <udc_next_desc_in_iface+0x5e>
    11c8:	86 13       	cpse	r24, r22
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <udc_next_desc_in_iface+0x40>
    11cc:	8e 2f       	mov	r24, r30
    11ce:	9f 2f       	mov	r25, r31
    11d0:	08 95       	ret
    11d2:	80 81       	ld	r24, Z
    11d4:	e8 0f       	add	r30, r24
    11d6:	f1 1d       	adc	r31, r1
    11d8:	e2 17       	cp	r30, r18
    11da:	f3 07       	cpc	r31, r19
    11dc:	90 f3       	brcs	.-28     	; 0x11c2 <udc_next_desc_in_iface+0x30>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	08 95       	ret
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	08 95       	ret
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	08 95       	ret
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	08 95       	ret

000011f6 <udc_valid_address>:
    11f6:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    11fa:	8f 77       	andi	r24, 0x7F	; 127
    11fc:	0c 94 2f 11 	jmp	0x225e	; 0x225e <udd_set_address>
    1200:	08 95       	ret

00001202 <udc_update_iface_desc>:
    1202:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <udc_num_configuration>
    1206:	99 23       	and	r25, r25
    1208:	81 f1       	breq	.+96     	; 0x126a <udc_update_iface_desc+0x68>
    120a:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    120e:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1212:	01 90       	ld	r0, Z+
    1214:	f0 81       	ld	r31, Z
    1216:	e0 2d       	mov	r30, r0
    1218:	94 81       	ldd	r25, Z+4	; 0x04
    121a:	89 17       	cp	r24, r25
    121c:	40 f5       	brcc	.+80     	; 0x126e <udc_update_iface_desc+0x6c>
    121e:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    1222:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    1226:	22 81       	ldd	r18, Z+2	; 0x02
    1228:	33 81       	ldd	r19, Z+3	; 0x03
    122a:	2e 0f       	add	r18, r30
    122c:	3f 1f       	adc	r19, r31
    122e:	e2 17       	cp	r30, r18
    1230:	f3 07       	cpc	r31, r19
    1232:	f8 f4       	brcc	.+62     	; 0x1272 <udc_update_iface_desc+0x70>
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	94 30       	cpi	r25, 0x04	; 4
    1238:	61 f4       	brne	.+24     	; 0x1252 <udc_update_iface_desc+0x50>
    123a:	92 81       	ldd	r25, Z+2	; 0x02
    123c:	98 13       	cpse	r25, r24
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <udc_update_iface_desc+0x50>
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	96 13       	cpse	r25, r22
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <udc_update_iface_desc+0x50>
    1246:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    124a:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	08 95       	ret
    1252:	90 81       	ld	r25, Z
    1254:	e9 0f       	add	r30, r25
    1256:	f1 1d       	adc	r31, r1
    1258:	e2 17       	cp	r30, r18
    125a:	f3 07       	cpc	r31, r19
    125c:	58 f3       	brcs	.-42     	; 0x1234 <udc_update_iface_desc+0x32>
    125e:	e0 93 ba 20 	sts	0x20BA, r30	; 0x8020ba <udc_ptr_iface>
    1262:	f0 93 bb 20 	sts	0x20BB, r31	; 0x8020bb <udc_ptr_iface+0x1>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 95       	ret
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	08 95       	ret
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	08 95       	ret
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret

00001276 <udc_iface_disable>:
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	c8 2f       	mov	r28, r24
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	be df       	rcall	.-132    	; 0x1202 <udc_update_iface_desc>
    1286:	18 2f       	mov	r17, r24
    1288:	88 23       	and	r24, r24
    128a:	81 f1       	breq	.+96     	; 0x12ec <udc_iface_disable+0x76>
    128c:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1290:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1294:	ec 2f       	mov	r30, r28
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	12 96       	adiw	r26, 0x02	; 2
    129e:	8d 91       	ld	r24, X+
    12a0:	9c 91       	ld	r25, X
    12a2:	13 97       	sbiw	r26, 0x03	; 3
    12a4:	e8 0f       	add	r30, r24
    12a6:	f9 1f       	adc	r31, r25
    12a8:	e0 80       	ld	r14, Z
    12aa:	f1 80       	ldd	r15, Z+1	; 0x01
    12ac:	d7 01       	movw	r26, r14
    12ae:	16 96       	adiw	r26, 0x06	; 6
    12b0:	ed 91       	ld	r30, X+
    12b2:	fc 91       	ld	r31, X
    12b4:	17 97       	sbiw	r26, 0x07	; 7
    12b6:	09 95       	icall
    12b8:	68 2f       	mov	r22, r24
    12ba:	8c 2f       	mov	r24, r28
    12bc:	a2 df       	rcall	.-188    	; 0x1202 <udc_update_iface_desc>
    12be:	18 2f       	mov	r17, r24
    12c0:	88 23       	and	r24, r24
    12c2:	a1 f0       	breq	.+40     	; 0x12ec <udc_iface_disable+0x76>
    12c4:	c0 91 ba 20 	lds	r28, 0x20BA	; 0x8020ba <udc_ptr_iface>
    12c8:	d0 91 bb 20 	lds	r29, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    12cc:	65 e0       	ldi	r22, 0x05	; 5
    12ce:	ce 01       	movw	r24, r28
    12d0:	60 df       	rcall	.-320    	; 0x1192 <udc_next_desc_in_iface>
    12d2:	ec 01       	movw	r28, r24
    12d4:	89 2b       	or	r24, r25
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <udc_iface_disable+0x6a>
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	0e 94 04 13 	call	0x2608	; 0x2608 <udd_ep_free>
    12de:	f6 cf       	rjmp	.-20     	; 0x12cc <udc_iface_disable+0x56>
    12e0:	d7 01       	movw	r26, r14
    12e2:	12 96       	adiw	r26, 0x02	; 2
    12e4:	ed 91       	ld	r30, X+
    12e6:	fc 91       	ld	r31, X
    12e8:	13 97       	sbiw	r26, 0x03	; 3
    12ea:	09 95       	icall
    12ec:	81 2f       	mov	r24, r17
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	08 95       	ret

000012fa <udc_iface_enable>:
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	18 2f       	mov	r17, r24
    1302:	7f df       	rcall	.-258    	; 0x1202 <udc_update_iface_desc>
    1304:	88 23       	and	r24, r24
    1306:	39 f1       	breq	.+78     	; 0x1356 <udc_iface_enable+0x5c>
    1308:	c0 91 ba 20 	lds	r28, 0x20BA	; 0x8020ba <udc_ptr_iface>
    130c:	d0 91 bb 20 	lds	r29, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    1310:	65 e0       	ldi	r22, 0x05	; 5
    1312:	ce 01       	movw	r24, r28
    1314:	3e df       	rcall	.-388    	; 0x1192 <udc_next_desc_in_iface>
    1316:	ec 01       	movw	r28, r24
    1318:	89 2b       	or	r24, r25
    131a:	41 f0       	breq	.+16     	; 0x132c <udc_iface_enable+0x32>
    131c:	4c 81       	ldd	r20, Y+4	; 0x04
    131e:	5d 81       	ldd	r21, Y+5	; 0x05
    1320:	6b 81       	ldd	r22, Y+3	; 0x03
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	a9 d7       	rcall	.+3922   	; 0x2278 <udd_ep_alloc>
    1326:	81 11       	cpse	r24, r1
    1328:	f3 cf       	rjmp	.-26     	; 0x1310 <udc_iface_enable+0x16>
    132a:	15 c0       	rjmp	.+42     	; 0x1356 <udc_iface_enable+0x5c>
    132c:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1330:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1334:	e1 2f       	mov	r30, r17
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	8d 91       	ld	r24, X+
    1340:	9c 91       	ld	r25, X
    1342:	13 97       	sbiw	r26, 0x03	; 3
    1344:	e8 0f       	add	r30, r24
    1346:	f9 1f       	adc	r31, r25
    1348:	01 90       	ld	r0, Z+
    134a:	f0 81       	ld	r31, Z
    134c:	e0 2d       	mov	r30, r0
    134e:	01 90       	ld	r0, Z+
    1350:	f0 81       	ld	r31, Z
    1352:	e0 2d       	mov	r30, r0
    1354:	09 95       	icall
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	08 95       	ret

0000135e <udc_get_interface_desc>:
    135e:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udc_ptr_iface>
    1362:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <udc_ptr_iface+0x1>
    1366:	08 95       	ret

00001368 <udc_start>:
    1368:	f5 c6       	rjmp	.+3562   	; 0x2154 <udd_enable>
    136a:	08 95       	ret

0000136c <udc_reset>:
    136c:	cf 93       	push	r28
    136e:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1372:	88 23       	and	r24, r24
    1374:	c1 f0       	breq	.+48     	; 0x13a6 <udc_reset+0x3a>
    1376:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    137a:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    137e:	01 90       	ld	r0, Z+
    1380:	f0 81       	ld	r31, Z
    1382:	e0 2d       	mov	r30, r0
    1384:	84 81       	ldd	r24, Z+4	; 0x04
    1386:	88 23       	and	r24, r24
    1388:	71 f0       	breq	.+28     	; 0x13a6 <udc_reset+0x3a>
    138a:	c0 e0       	ldi	r28, 0x00	; 0
    138c:	8c 2f       	mov	r24, r28
    138e:	73 df       	rcall	.-282    	; 0x1276 <udc_iface_disable>
    1390:	cf 5f       	subi	r28, 0xFF	; 255
    1392:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1396:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    139a:	01 90       	ld	r0, Z+
    139c:	f0 81       	ld	r31, Z
    139e:	e0 2d       	mov	r30, r0
    13a0:	84 81       	ldd	r24, Z+4	; 0x04
    13a2:	c8 17       	cp	r28, r24
    13a4:	98 f3       	brcs	.-26     	; 0x138c <udc_reset+0x20>
    13a6:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <udc_num_configuration>
    13aa:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_device_status>
    13ae:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <udc_device_status+0x1>
    13b2:	cf 91       	pop	r28
    13b4:	08 95       	ret

000013b6 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    13b6:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    13b8:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    13bc:	88 23       	and	r24, r24
    13be:	49 f1       	breq	.+82     	; 0x1412 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13c0:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    13c4:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    13c8:	ed 91       	ld	r30, X+
    13ca:	fc 91       	ld	r31, X
    13cc:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    13ce:	84 81       	ldd	r24, Z+4	; 0x04
    13d0:	88 23       	and	r24, r24
    13d2:	f9 f0       	breq	.+62     	; 0x1412 <udc_sof_notify+0x5c>
    13d4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    13d6:	ec 2f       	mov	r30, r28
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	12 96       	adiw	r26, 0x02	; 2
    13e0:	8d 91       	ld	r24, X+
    13e2:	9c 91       	ld	r25, X
    13e4:	13 97       	sbiw	r26, 0x03	; 3
    13e6:	e8 0f       	add	r30, r24
    13e8:	f9 1f       	adc	r31, r25
    13ea:	01 90       	ld	r0, Z+
    13ec:	f0 81       	ld	r31, Z
    13ee:	e0 2d       	mov	r30, r0
    13f0:	00 84       	ldd	r0, Z+8	; 0x08
    13f2:	f1 85       	ldd	r31, Z+9	; 0x09
    13f4:	e0 2d       	mov	r30, r0
    13f6:	30 97       	sbiw	r30, 0x00	; 0
    13f8:	09 f0       	breq	.+2      	; 0x13fc <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    13fa:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    13fc:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13fe:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1402:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1406:	ed 91       	ld	r30, X+
    1408:	fc 91       	ld	r31, X
    140a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    140c:	84 81       	ldd	r24, Z+4	; 0x04
    140e:	c8 17       	cp	r28, r24
    1410:	10 f3       	brcs	.-60     	; 0x13d6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    141e:	ef e5       	ldi	r30, 0x5F	; 95
    1420:	f4 e2       	ldi	r31, 0x24	; 36
    1422:	12 86       	std	Z+10, r1	; 0x0a
    1424:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1426:	14 86       	std	Z+12, r1	; 0x0c
    1428:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    142a:	16 86       	std	Z+14, r1	; 0x0e
    142c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    142e:	80 81       	ld	r24, Z
    1430:	88 23       	and	r24, r24
    1432:	3c f4       	brge	.+14     	; 0x1442 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1434:	20 91 65 24 	lds	r18, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    1438:	30 91 66 24 	lds	r19, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    143c:	23 2b       	or	r18, r19
    143e:	09 f4       	brne	.+2      	; 0x1442 <udc_process_setup+0x2c>
    1440:	60 c3       	rjmp	.+1728   	; 0x1b02 <udc_process_setup+0x6ec>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1442:	80 76       	andi	r24, 0x60	; 96
    1444:	80 34       	cpi	r24, 0x40	; 64
    1446:	09 f0       	breq	.+2      	; 0x144a <udc_process_setup+0x34>
    1448:	fe c0       	rjmp	.+508    	; 0x1646 <udc_process_setup+0x230>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    144a:	e0 91 60 24 	lds	r30, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    144e:	8e 2f       	mov	r24, r30
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	fc 01       	movw	r30, r24
    1454:	e0 5a       	subi	r30, 0xA0	; 160
    1456:	f1 09       	sbc	r31, r1
    1458:	e8 30       	cpi	r30, 0x08	; 8
    145a:	f1 05       	cpc	r31, r1
    145c:	08 f0       	brcs	.+2      	; 0x1460 <udc_process_setup+0x4a>
    145e:	ea c0       	rjmp	.+468    	; 0x1634 <udc_process_setup+0x21e>
    1460:	ea 5f       	subi	r30, 0xFA	; 250
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    1468:	00 00       	nop
    146a:	4f c3       	rjmp	.+1694   	; 0x1b0a <udc_process_setup+0x6f4>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    146c:	e0 e0       	ldi	r30, 0x00	; 0
    146e:	f8 e0       	ldi	r31, 0x08	; 8
    1470:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1472:	cf e5       	ldi	r28, 0x5F	; 95
    1474:	d4 e2       	ldi	r29, 0x24	; 36
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	86 ab       	std	Z+54, r24	; 0x36
    147c:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	8f 70       	andi	r24, 0x0F	; 15
    1482:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1484:	6e 81       	ldd	r22, Y+6	; 0x06
    1486:	7f 81       	ldd	r23, Y+7	; 0x07
    1488:	8e e5       	ldi	r24, 0x5E	; 94
    148a:	92 e2       	ldi	r25, 0x22	; 34
    148c:	ee d6       	rcall	.+3548   	; 0x226a <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	9f 81       	ldd	r25, Y+7	; 0x07
    1492:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
    1496:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
    149a:	82 17       	cp	r24, r18
    149c:	93 07       	cpc	r25, r19
    149e:	09 f4       	brne	.+2      	; 0x14a2 <udc_process_setup+0x8c>
    14a0:	34 c3       	rjmp	.+1640   	; 0x1b0a <udc_process_setup+0x6f4>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    14a2:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <dacBuf_len>
    14a6:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <dacBuf_len+0x1>
				switch(global_mode){
    14aa:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    14ae:	8e 2f       	mov	r24, r30
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	88 30       	cpi	r24, 0x08	; 8
    14b4:	91 05       	cpc	r25, r1
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <udc_process_setup+0xa4>
    14b8:	bf c0       	rjmp	.+382    	; 0x1638 <udc_process_setup+0x222>
    14ba:	fc 01       	movw	r30, r24
    14bc:	e2 5f       	subi	r30, 0xF2	; 242
    14be:	fe 4f       	sbci	r31, 0xFE	; 254
    14c0:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    14c4:	69 d8       	rcall	.-3886   	; 0x598 <tiny_dma_set_mode_0>
    14c6:	21 c3       	rjmp	.+1602   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 1:
					tiny_dma_set_mode_1();
    14c8:	db d8       	rcall	.-3658   	; 0x680 <tiny_dma_set_mode_1>
    14ca:	1f c3       	rjmp	.+1598   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 2:
					tiny_dma_set_mode_2();
    14cc:	52 d9       	rcall	.-3420   	; 0x772 <tiny_dma_set_mode_2>
    14ce:	1d c3       	rjmp	.+1594   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 3:
					tiny_dma_set_mode_3();
    14d0:	c8 d9       	rcall	.-3184   	; 0x862 <tiny_dma_set_mode_3>
    14d2:	1b c3       	rjmp	.+1590   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 4:
					tiny_dma_set_mode_4();
    14d4:	43 da       	rcall	.-2938   	; 0x95c <tiny_dma_set_mode_4>
    14d6:	19 c3       	rjmp	.+1586   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 5:
					tiny_dma_set_mode_5();
    14d8:	b8 da       	rcall	.-2704   	; 0xa4a <tiny_dma_set_mode_5>
    14da:	17 c3       	rjmp	.+1582   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 6:
					tiny_dma_set_mode_6();
    14dc:	fe da       	rcall	.-2564   	; 0xada <tiny_dma_set_mode_6>
    14de:	15 c3       	rjmp	.+1578   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 7:
					tiny_dma_set_mode_7();
    14e0:	5f db       	rcall	.-2370   	; 0xba0 <tiny_dma_set_mode_7>
    14e2:	13 c3       	rjmp	.+1574   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    14e4:	e0 e4       	ldi	r30, 0x40	; 64
    14e6:	f8 e0       	ldi	r31, 0x08	; 8
    14e8:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    14ea:	cf e5       	ldi	r28, 0x5F	; 95
    14ec:	d4 e2       	ldi	r29, 0x24	; 36
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	86 ab       	std	Z+54, r24	; 0x36
    14f4:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	8f 70       	andi	r24, 0x0F	; 15
    14fa:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    14fc:	6e 81       	ldd	r22, Y+6	; 0x06
    14fe:	7f 81       	ldd	r23, Y+7	; 0x07
    1500:	81 e7       	ldi	r24, 0x71	; 113
    1502:	94 e2       	ldi	r25, 0x24	; 36
    1504:	b2 d6       	rcall	.+3428   	; 0x226a <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	9f 81       	ldd	r25, Y+7	; 0x07
    150a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
    150e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
    1512:	82 17       	cp	r24, r18
    1514:	93 07       	cpc	r25, r19
    1516:	09 f4       	brne	.+2      	; 0x151a <udc_process_setup+0x104>
    1518:	f8 c2       	rjmp	.+1520   	; 0x1b0a <udc_process_setup+0x6f4>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    151a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <auxDacBufLen>
    151e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <auxDacBufLen+0x1>
				switch(global_mode){
    1522:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    1526:	8e 2f       	mov	r24, r30
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	88 30       	cpi	r24, 0x08	; 8
    152c:	91 05       	cpc	r25, r1
    152e:	08 f0       	brcs	.+2      	; 0x1532 <udc_process_setup+0x11c>
    1530:	85 c0       	rjmp	.+266    	; 0x163c <udc_process_setup+0x226>
    1532:	fc 01       	movw	r30, r24
    1534:	ea 5e       	subi	r30, 0xEA	; 234
    1536:	fe 4f       	sbci	r31, 0xFE	; 254
    1538:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    153c:	2d d8       	rcall	.-4006   	; 0x598 <tiny_dma_set_mode_0>
    153e:	e5 c2       	rjmp	.+1482   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1540:	9f d8       	rcall	.-3778   	; 0x680 <tiny_dma_set_mode_1>
    1542:	e3 c2       	rjmp	.+1478   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1544:	16 d9       	rcall	.-3540   	; 0x772 <tiny_dma_set_mode_2>
    1546:	e1 c2       	rjmp	.+1474   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1548:	8c d9       	rcall	.-3304   	; 0x862 <tiny_dma_set_mode_3>
    154a:	df c2       	rjmp	.+1470   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 4:
					tiny_dma_set_mode_4();
    154c:	07 da       	rcall	.-3058   	; 0x95c <tiny_dma_set_mode_4>
    154e:	dd c2       	rjmp	.+1466   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1550:	7c da       	rcall	.-2824   	; 0xa4a <tiny_dma_set_mode_5>
    1552:	db c2       	rjmp	.+1462   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1554:	c2 da       	rcall	.-2684   	; 0xada <tiny_dma_set_mode_6>
    1556:	d9 c2       	rjmp	.+1458   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1558:	23 db       	rcall	.-2490   	; 0xba0 <tiny_dma_set_mode_7>
    155a:	d7 c2       	rjmp	.+1454   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    155c:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1560:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    1564:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    1568:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
    156c:	ce c2       	rjmp	.+1436   	; 0x1b0a <udc_process_setup+0x6f4>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    156e:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    1572:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1576:	c9 c2       	rjmp	.+1426   	; 0x1b0a <udc_process_setup+0x6f4>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1578:	e0 91 61 24 	lds	r30, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    157c:	f0 91 62 24 	lds	r31, 0x2462	; 0x802462 <udd_g_ctrlreq+0x3>
    1580:	e8 30       	cpi	r30, 0x08	; 8
    1582:	f1 05       	cpc	r31, r1
    1584:	08 f0       	brcs	.+2      	; 0x1588 <udc_process_setup+0x172>
    1586:	5c c0       	rjmp	.+184    	; 0x1640 <udc_process_setup+0x22a>
    1588:	e2 5e       	subi	r30, 0xE2	; 226
    158a:	fe 4f       	sbci	r31, 0xFE	; 254
    158c:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	0e 94 4e 02 	call	0x49c	; 0x49c <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1598:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    159c:	0e 94 1c 02 	call	0x438	; 0x438 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    15a0:	0e 94 cc 02 	call	0x598	; 0x598 <tiny_dma_set_mode_0>
    15a4:	b2 c2       	rjmp	.+1380   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 4e 02 	call	0x49c	; 0x49c <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15ae:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    15b2:	0e 94 1c 02 	call	0x438	; 0x438 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    15b6:	64 d8       	rcall	.-3896   	; 0x680 <tiny_dma_set_mode_1>
    15b8:	a8 c2       	rjmp	.+1360   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 4e 02 	call	0x49c	; 0x49c <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15c2:	cf e5       	ldi	r28, 0x5F	; 95
    15c4:	d4 e2       	ldi	r29, 0x24	; 36
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	0e 94 1c 02 	call	0x438	; 0x438 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	0e 94 31 02 	call	0x462	; 0x462 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    15d2:	cf d8       	rcall	.-3682   	; 0x772 <tiny_dma_set_mode_2>
    15d4:	9a c2       	rjmp	.+1332   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    15d6:	45 d9       	rcall	.-3446   	; 0x862 <tiny_dma_set_mode_3>
    15d8:	98 c2       	rjmp	.+1328   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    15da:	c0 d9       	rcall	.-3200   	; 0x95c <tiny_dma_set_mode_4>
    15dc:	96 c2       	rjmp	.+1324   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	0e 94 4e 02 	call	0x49c	; 0x49c <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15e6:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    15ea:	0e 94 1c 02 	call	0x438	; 0x438 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    15ee:	2d da       	rcall	.-2982   	; 0xa4a <tiny_dma_set_mode_5>
    15f0:	8c c2       	rjmp	.+1304   	; 0x1b0a <udc_process_setup+0x6f4>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	0e 94 4e 02 	call	0x49c	; 0x49c <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15fa:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    15fe:	0e 94 1c 02 	call	0x438	; 0x438 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    1602:	6b da       	rcall	.-2858   	; 0xada <tiny_dma_set_mode_6>
    1604:	82 c2       	rjmp	.+1284   	; 0x1b0a <udc_process_setup+0x6f4>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1606:	62 e0       	ldi	r22, 0x02	; 2
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 4e 02 	call	0x49c	; 0x49c <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    160e:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	0e 94 1c 02 	call	0x438	; 0x438 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    1618:	c3 da       	rcall	.-2682   	; 0xba0 <tiny_dma_set_mode_7>
    161a:	77 c2       	rjmp	.+1262   	; 0x1b0a <udc_process_setup+0x6f4>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    161c:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    1620:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1624:	72 c2       	rjmp	.+1252   	; 0x1b0a <udc_process_setup+0x6f4>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1626:	e9 e7       	ldi	r30, 0x79	; 121
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	88 ed       	ldi	r24, 0xD8	; 216
    162e:	f8 94       	cli
    1630:	84 bf       	out	0x34, r24	; 52
    1632:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <udc_process_setup+0x22c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <udc_process_setup+0x22c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <udc_process_setup+0x22c>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1640:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1642:	81 11       	cpse	r24, r1
    1644:	65 c2       	rjmp	.+1226   	; 0x1b10 <udc_process_setup+0x6fa>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1646:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq>
    164a:	98 2f       	mov	r25, r24
    164c:	90 76       	andi	r25, 0x60	; 96
    164e:	09 f0       	breq	.+2      	; 0x1652 <udc_process_setup+0x23c>
    1650:	e1 c1       	rjmp	.+962    	; 0x1a14 <udc_process_setup+0x5fe>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1652:	88 23       	and	r24, r24
    1654:	0c f0       	brlt	.+2      	; 0x1658 <udc_process_setup+0x242>
    1656:	05 c1       	rjmp	.+522    	; 0x1862 <udc_process_setup+0x44c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1658:	20 91 65 24 	lds	r18, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    165c:	30 91 66 24 	lds	r19, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    1660:	21 15       	cp	r18, r1
    1662:	31 05       	cpc	r19, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <udc_process_setup+0x252>
    1666:	d6 c1       	rjmp	.+940    	; 0x1a14 <udc_process_setup+0x5fe>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1668:	8f 71       	andi	r24, 0x1F	; 31
    166a:	09 f0       	breq	.+2      	; 0x166e <udc_process_setup+0x258>
    166c:	a3 c0       	rjmp	.+326    	; 0x17b4 <udc_process_setup+0x39e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    166e:	90 91 60 24 	lds	r25, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    1672:	96 30       	cpi	r25, 0x06	; 6
    1674:	79 f0       	breq	.+30     	; 0x1694 <udc_process_setup+0x27e>
    1676:	98 30       	cpi	r25, 0x08	; 8
    1678:	09 f4       	brne	.+2      	; 0x167c <udc_process_setup+0x266>
    167a:	92 c0       	rjmp	.+292    	; 0x17a0 <udc_process_setup+0x38a>
    167c:	91 11       	cpse	r25, r1
    167e:	9a c0       	rjmp	.+308    	; 0x17b4 <udc_process_setup+0x39e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	09 f0       	breq	.+2      	; 0x1688 <udc_process_setup+0x272>
    1686:	c6 c1       	rjmp	.+908    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1688:	62 e0       	ldi	r22, 0x02	; 2
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	82 ec       	ldi	r24, 0xC2	; 194
    168e:	90 e2       	ldi	r25, 0x20	; 32
    1690:	ec d5       	rcall	.+3032   	; 0x226a <udd_set_setup_payload>
    1692:	3d c2       	rjmp	.+1146   	; 0x1b0e <udc_process_setup+0x6f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1694:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    1698:	90 91 62 24 	lds	r25, 0x2462	; 0x802462 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    169c:	29 2f       	mov	r18, r25
    169e:	33 27       	eor	r19, r19
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	a9 f0       	breq	.+42     	; 0x16d0 <udc_process_setup+0x2ba>
    16a6:	24 f4       	brge	.+8      	; 0x16b0 <udc_process_setup+0x29a>
    16a8:	21 30       	cpi	r18, 0x01	; 1
    16aa:	31 05       	cpc	r19, r1
    16ac:	41 f0       	breq	.+16     	; 0x16be <udc_process_setup+0x2a8>
    16ae:	a9 c1       	rjmp	.+850    	; 0x1a02 <udc_process_setup+0x5ec>
    16b0:	23 30       	cpi	r18, 0x03	; 3
    16b2:	31 05       	cpc	r19, r1
    16b4:	d9 f1       	breq	.+118    	; 0x172c <udc_process_setup+0x316>
    16b6:	2f 30       	cpi	r18, 0x0F	; 15
    16b8:	31 05       	cpc	r19, r1
    16ba:	51 f1       	breq	.+84     	; 0x1710 <udc_process_setup+0x2fa>
    16bc:	a2 c1       	rjmp	.+836    	; 0x1a02 <udc_process_setup+0x5ec>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    16be:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <udc_config>
    16c2:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    16c6:	dc 01       	movw	r26, r24
    16c8:	6c 91       	ld	r22, X
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	ce d5       	rcall	.+2972   	; 0x226a <udd_set_setup_payload>
    16ce:	59 c0       	rjmp	.+178    	; 0x1782 <udc_process_setup+0x36c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    16d0:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    16d4:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
    16d8:	21 89       	ldd	r18, Z+17	; 0x11
    16da:	82 17       	cp	r24, r18
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <udc_process_setup+0x2ca>
    16de:	9a c1       	rjmp	.+820    	; 0x1a14 <udc_process_setup+0x5fe>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    16e0:	99 27       	eor	r25, r25
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    16ee:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    16f2:	e8 0f       	add	r30, r24
    16f4:	f9 1f       	adc	r31, r25
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    16fa:	fc 01       	movw	r30, r24
    16fc:	62 81       	ldd	r22, Z+2	; 0x02
    16fe:	73 81       	ldd	r23, Z+3	; 0x03
    1700:	b4 d5       	rcall	.+2920   	; 0x226a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1702:	e0 91 67 24 	lds	r30, 0x2467	; 0x802467 <udd_g_ctrlreq+0x8>
    1706:	f0 91 68 24 	lds	r31, 0x2468	; 0x802468 <udd_g_ctrlreq+0x9>
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	81 83       	std	Z+1, r24	; 0x01
    170e:	39 c0       	rjmp	.+114    	; 0x1782 <udc_process_setup+0x36c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1710:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config+0x4>
    1714:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x5>
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	09 f4       	brne	.+2      	; 0x171e <udc_process_setup+0x308>
    171c:	7b c1       	rjmp	.+758    	; 0x1a14 <udc_process_setup+0x5fe>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    171e:	dc 01       	movw	r26, r24
    1720:	12 96       	adiw	r26, 0x02	; 2
    1722:	6d 91       	ld	r22, X+
    1724:	7c 91       	ld	r23, X
    1726:	13 97       	sbiw	r26, 0x03	; 3
    1728:	a0 d5       	rcall	.+2880   	; 0x226a <udd_set_setup_payload>
    172a:	2b c0       	rjmp	.+86     	; 0x1782 <udc_process_setup+0x36c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    172c:	99 27       	eor	r25, r25
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	71 f0       	breq	.+28     	; 0x1750 <udc_process_setup+0x33a>
    1734:	38 f0       	brcs	.+14     	; 0x1744 <udc_process_setup+0x32e>
    1736:	02 97       	sbiw	r24, 0x02	; 2
    1738:	09 f0       	breq	.+2      	; 0x173c <udc_process_setup+0x326>
    173a:	6c c1       	rjmp	.+728    	; 0x1a14 <udc_process_setup+0x5fe>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    173c:	8a e8       	ldi	r24, 0x8A	; 138
    173e:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1740:	28 e1       	ldi	r18, 0x18	; 24
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <udc_process_setup+0x340>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1744:	64 e0       	ldi	r22, 0x04	; 4
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	8e ea       	ldi	r24, 0xAE	; 174
    174a:	90 e2       	ldi	r25, 0x20	; 32
    174c:	8e d5       	rcall	.+2844   	; 0x226a <udd_set_setup_payload>
    174e:	19 c0       	rjmp	.+50     	; 0x1782 <udc_process_setup+0x36c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1750:	83 ea       	ldi	r24, 0xA3	; 163
    1752:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1754:	29 e0       	ldi	r18, 0x09	; 9
    1756:	38 2f       	mov	r19, r24
    1758:	aa e5       	ldi	r26, 0x5A	; 90
    175a:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    175c:	e8 2f       	mov	r30, r24
    175e:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1760:	81 91       	ld	r24, Z+
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	8d 93       	st	X+, r24
    1766:	9d 93       	st	X+, r25
    1768:	8e 2f       	mov	r24, r30
    176a:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    176c:	82 17       	cp	r24, r18
    176e:	c0 f3       	brcs	.-16     	; 0x1760 <udc_process_setup+0x34a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1770:	62 2f       	mov	r22, r18
    1772:	66 0f       	add	r22, r22
    1774:	6e 5f       	subi	r22, 0xFE	; 254
    1776:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	88 e5       	ldi	r24, 0x58	; 88
    177e:	90 e2       	ldi	r25, 0x20	; 32
    1780:	74 d5       	rcall	.+2792   	; 0x226a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1782:	ef e5       	ldi	r30, 0x5F	; 95
    1784:	f4 e2       	ldi	r31, 0x24	; 36
    1786:	86 81       	ldd	r24, Z+6	; 0x06
    1788:	97 81       	ldd	r25, Z+7	; 0x07
    178a:	22 85       	ldd	r18, Z+10	; 0x0a
    178c:	33 85       	ldd	r19, Z+11	; 0x0b
    178e:	82 17       	cp	r24, r18
    1790:	93 07       	cpc	r25, r19
    1792:	08 f0       	brcs	.+2      	; 0x1796 <udc_process_setup+0x380>
    1794:	bc c1       	rjmp	.+888    	; 0x1b0e <udc_process_setup+0x6f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1796:	80 93 69 24 	sts	0x2469, r24	; 0x802469 <udd_g_ctrlreq+0xa>
    179a:	90 93 6a 24 	sts	0x246A, r25	; 0x80246a <udd_g_ctrlreq+0xb>
    179e:	b7 c1       	rjmp	.+878    	; 0x1b0e <udc_process_setup+0x6f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    17a0:	21 30       	cpi	r18, 0x01	; 1
    17a2:	31 05       	cpc	r19, r1
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <udc_process_setup+0x392>
    17a6:	36 c1       	rjmp	.+620    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	8e eb       	ldi	r24, 0xBE	; 190
    17ae:	90 e2       	ldi	r25, 0x20	; 32
    17b0:	5c d5       	rcall	.+2744   	; 0x226a <udd_set_setup_payload>
    17b2:	ad c1       	rjmp	.+858    	; 0x1b0e <udc_process_setup+0x6f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	e1 f5       	brne	.+120    	; 0x1830 <udc_process_setup+0x41a>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    17b8:	90 91 60 24 	lds	r25, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    17bc:	9a 30       	cpi	r25, 0x0A	; 10
    17be:	c1 f5       	brne	.+112    	; 0x1830 <udc_process_setup+0x41a>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    17c0:	21 30       	cpi	r18, 0x01	; 1
    17c2:	31 05       	cpc	r19, r1
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <udc_process_setup+0x3b2>
    17c6:	26 c1       	rjmp	.+588    	; 0x1a14 <udc_process_setup+0x5fe>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    17c8:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    17cc:	88 23       	and	r24, r24
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <udc_process_setup+0x3bc>
    17d0:	21 c1       	rjmp	.+578    	; 0x1a14 <udc_process_setup+0x5fe>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    17d2:	c0 91 63 24 	lds	r28, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    17d6:	d0 91 64 24 	lds	r29, 0x2464	; 0x802464 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    17da:	00 91 bc 20 	lds	r16, 0x20BC	; 0x8020bc <udc_ptr_conf>
    17de:	10 91 bd 20 	lds	r17, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    17e2:	d8 01       	movw	r26, r16
    17e4:	ed 91       	ld	r30, X+
    17e6:	fc 91       	ld	r31, X
    17e8:	84 81       	ldd	r24, Z+4	; 0x04
    17ea:	c8 17       	cp	r28, r24
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <udc_process_setup+0x3da>
    17ee:	12 c1       	rjmp	.+548    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	8c 2f       	mov	r24, r28
    17f4:	06 dd       	rcall	.-1524   	; 0x1202 <udc_update_iface_desc>
    17f6:	88 23       	and	r24, r24
    17f8:	09 f4       	brne	.+2      	; 0x17fc <udc_process_setup+0x3e6>
    17fa:	0c c1       	rjmp	.+536    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    17fc:	ce 01       	movw	r24, r28
    17fe:	99 27       	eor	r25, r25
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	d8 01       	movw	r26, r16
    1806:	12 96       	adiw	r26, 0x02	; 2
    1808:	ed 91       	ld	r30, X+
    180a:	fc 91       	ld	r31, X
    180c:	13 97       	sbiw	r26, 0x03	; 3
    180e:	e8 0f       	add	r30, r24
    1810:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1812:	01 90       	ld	r0, Z+
    1814:	f0 81       	ld	r31, Z
    1816:	e0 2d       	mov	r30, r0
    1818:	86 81       	ldd	r24, Z+6	; 0x06
    181a:	97 81       	ldd	r25, Z+7	; 0x07
    181c:	fc 01       	movw	r30, r24
    181e:	09 95       	icall
    1820:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	80 ec       	ldi	r24, 0xC0	; 192
    182a:	90 e2       	ldi	r25, 0x20	; 32
    182c:	1e d5       	rcall	.+2620   	; 0x226a <udd_set_setup_payload>
    182e:	6f c1       	rjmp	.+734    	; 0x1b0e <udc_process_setup+0x6f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	09 f0       	breq	.+2      	; 0x1836 <udc_process_setup+0x420>
    1834:	ef c0       	rjmp	.+478    	; 0x1a14 <udc_process_setup+0x5fe>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1836:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    183a:	81 11       	cpse	r24, r1
    183c:	e4 c0       	rjmp	.+456    	; 0x1a06 <udc_process_setup+0x5f0>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	09 f0       	breq	.+2      	; 0x1846 <udc_process_setup+0x430>
    1844:	e7 c0       	rjmp	.+462    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1846:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    184a:	8b d5       	rcall	.+2838   	; 0x2362 <udd_ep_is_halted>
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <udc_ep_status.5530>
    1852:	90 93 b9 20 	sts	0x20B9, r25	; 0x8020b9 <udc_ep_status.5530+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1856:	62 e0       	ldi	r22, 0x02	; 2
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	88 eb       	ldi	r24, 0xB8	; 184
    185c:	90 e2       	ldi	r25, 0x20	; 32
    185e:	05 d5       	rcall	.+2570   	; 0x226a <udd_set_setup_payload>
    1860:	56 c1       	rjmp	.+684    	; 0x1b0e <udc_process_setup+0x6f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1862:	8f 71       	andi	r24, 0x1F	; 31
    1864:	09 f0       	breq	.+2      	; 0x1868 <udc_process_setup+0x452>
    1866:	83 c0       	rjmp	.+262    	; 0x196e <udc_process_setup+0x558>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1868:	90 91 60 24 	lds	r25, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    186c:	93 30       	cpi	r25, 0x03	; 3
    186e:	09 f4       	brne	.+2      	; 0x1872 <udc_process_setup+0x45c>
    1870:	cc c0       	rjmp	.+408    	; 0x1a0a <udc_process_setup+0x5f4>
    1872:	18 f4       	brcc	.+6      	; 0x187a <udc_process_setup+0x464>
    1874:	91 30       	cpi	r25, 0x01	; 1
    1876:	a1 f0       	breq	.+40     	; 0x18a0 <udc_process_setup+0x48a>
    1878:	7a c0       	rjmp	.+244    	; 0x196e <udc_process_setup+0x558>
    187a:	95 30       	cpi	r25, 0x05	; 5
    187c:	19 f0       	breq	.+6      	; 0x1884 <udc_process_setup+0x46e>
    187e:	99 30       	cpi	r25, 0x09	; 9
    1880:	39 f1       	breq	.+78     	; 0x18d0 <udc_process_setup+0x4ba>
    1882:	75 c0       	rjmp	.+234    	; 0x196e <udc_process_setup+0x558>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1884:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    1888:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    188c:	89 2b       	or	r24, r25
    188e:	09 f0       	breq	.+2      	; 0x1892 <udc_process_setup+0x47c>
    1890:	c1 c0       	rjmp	.+386    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1892:	8b ef       	ldi	r24, 0xFB	; 251
    1894:	98 e0       	ldi	r25, 0x08	; 8
    1896:	80 93 6b 24 	sts	0x246B, r24	; 0x80246b <udd_g_ctrlreq+0xc>
    189a:	90 93 6c 24 	sts	0x246C, r25	; 0x80246c <udd_g_ctrlreq+0xd>
    189e:	37 c1       	rjmp	.+622    	; 0x1b0e <udc_process_setup+0x6f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18a0:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    18a4:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    18a8:	89 2b       	or	r24, r25
    18aa:	09 f0       	breq	.+2      	; 0x18ae <udc_process_setup+0x498>
    18ac:	b3 c0       	rjmp	.+358    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    18ae:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    18b2:	90 91 62 24 	lds	r25, 0x2462	; 0x802462 <udd_g_ctrlreq+0x3>
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	09 f0       	breq	.+2      	; 0x18bc <udc_process_setup+0x4a6>
    18ba:	ac c0       	rjmp	.+344    	; 0x1a14 <udc_process_setup+0x5fe>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    18bc:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_device_status>
    18c0:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <udc_device_status+0x1>
    18c4:	8d 7f       	andi	r24, 0xFD	; 253
    18c6:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_device_status>
    18ca:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <udc_device_status+0x1>
    18ce:	1f c1       	rjmp	.+574    	; 0x1b0e <udc_process_setup+0x6f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    18d0:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    18d4:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    18d8:	89 2b       	or	r24, r25
    18da:	09 f0       	breq	.+2      	; 0x18de <udc_process_setup+0x4c8>
    18dc:	9b c0       	rjmp	.+310    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    18de:	c2 d4       	rcall	.+2436   	; 0x2264 <udd_getaddress>
    18e0:	88 23       	and	r24, r24
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <udc_process_setup+0x4d0>
    18e4:	97 c0       	rjmp	.+302    	; 0x1a14 <udc_process_setup+0x5fe>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    18e6:	20 91 61 24 	lds	r18, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    18ea:	30 91 62 24 	lds	r19, 0x2462	; 0x802462 <udd_g_ctrlreq+0x3>
    18ee:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    18f0:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    18f4:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    18f8:	81 89       	ldd	r24, Z+17	; 0x11
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	82 17       	cp	r24, r18
    18fe:	93 07       	cpc	r25, r19
    1900:	08 f4       	brcc	.+2      	; 0x1904 <udc_process_setup+0x4ee>
    1902:	88 c0       	rjmp	.+272    	; 0x1a14 <udc_process_setup+0x5fe>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1904:	33 dd       	rcall	.-1434   	; 0x136c <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1906:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    190a:	90 91 62 24 	lds	r25, 0x2462	; 0x802462 <udd_g_ctrlreq+0x3>
    190e:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1912:	88 23       	and	r24, r24
    1914:	09 f4       	brne	.+2      	; 0x1918 <udc_process_setup+0x502>
    1916:	fb c0       	rjmp	.+502    	; 0x1b0e <udc_process_setup+0x6f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1918:	99 27       	eor	r25, r25
    191a:	81 50       	subi	r24, 0x01	; 1
    191c:	90 4c       	sbci	r25, 0xC0	; 192
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    192a:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    192e:	e8 0f       	add	r30, r24
    1930:	f9 1f       	adc	r31, r25
    1932:	e0 93 bc 20 	sts	0x20BC, r30	; 0x8020bc <udc_ptr_conf>
    1936:	f0 93 bd 20 	sts	0x20BD, r31	; 0x8020bd <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    193a:	01 90       	ld	r0, Z+
    193c:	f0 81       	ld	r31, Z
    193e:	e0 2d       	mov	r30, r0
    1940:	84 81       	ldd	r24, Z+4	; 0x04
    1942:	88 23       	and	r24, r24
    1944:	09 f4       	brne	.+2      	; 0x1948 <udc_process_setup+0x532>
    1946:	e3 c0       	rjmp	.+454    	; 0x1b0e <udc_process_setup+0x6f8>
    1948:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	8c 2f       	mov	r24, r28
    194e:	d5 dc       	rcall	.-1622   	; 0x12fa <udc_iface_enable>
    1950:	88 23       	and	r24, r24
    1952:	09 f4       	brne	.+2      	; 0x1956 <udc_process_setup+0x540>
    1954:	5f c0       	rjmp	.+190    	; 0x1a14 <udc_process_setup+0x5fe>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1956:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1958:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <udc_ptr_conf>
    195c:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1960:	01 90       	ld	r0, Z+
    1962:	f0 81       	ld	r31, Z
    1964:	e0 2d       	mov	r30, r0
    1966:	84 81       	ldd	r24, Z+4	; 0x04
    1968:	c8 17       	cp	r28, r24
    196a:	78 f3       	brcs	.-34     	; 0x194a <udc_process_setup+0x534>
    196c:	d0 c0       	rjmp	.+416    	; 0x1b0e <udc_process_setup+0x6f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	e1 f4       	brne	.+56     	; 0x19aa <udc_process_setup+0x594>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1972:	90 91 60 24 	lds	r25, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    1976:	9b 30       	cpi	r25, 0x0B	; 11
    1978:	c1 f4       	brne	.+48     	; 0x19aa <udc_process_setup+0x594>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    197a:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    197e:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    1982:	89 2b       	or	r24, r25
    1984:	09 f0       	breq	.+2      	; 0x1988 <udc_process_setup+0x572>
    1986:	46 c0       	rjmp	.+140    	; 0x1a14 <udc_process_setup+0x5fe>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1988:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <udc_process_setup+0x57c>
    1990:	41 c0       	rjmp	.+130    	; 0x1a14 <udc_process_setup+0x5fe>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1992:	ef e5       	ldi	r30, 0x5F	; 95
    1994:	f4 e2       	ldi	r31, 0x24	; 36
    1996:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1998:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    199a:	8c 2f       	mov	r24, r28
    199c:	6c dc       	rcall	.-1832   	; 0x1276 <udc_iface_disable>
    199e:	88 23       	and	r24, r24
    19a0:	c9 f1       	breq	.+114    	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    19a2:	6d 2f       	mov	r22, r29
    19a4:	8c 2f       	mov	r24, r28
    19a6:	a9 dc       	rcall	.-1710   	; 0x12fa <udc_iface_enable>
    19a8:	33 c0       	rjmp	.+102    	; 0x1a10 <udc_process_setup+0x5fa>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    19aa:	82 30       	cpi	r24, 0x02	; 2
    19ac:	99 f5       	brne	.+102    	; 0x1a14 <udc_process_setup+0x5fe>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    19ae:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <udd_g_ctrlreq+0x1>
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	19 f0       	breq	.+6      	; 0x19bc <udc_process_setup+0x5a6>
    19b6:	83 30       	cpi	r24, 0x03	; 3
    19b8:	89 f0       	breq	.+34     	; 0x19dc <udc_process_setup+0x5c6>
    19ba:	29 c0       	rjmp	.+82     	; 0x1a0e <udc_process_setup+0x5f8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19bc:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    19c0:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    19c4:	89 2b       	or	r24, r25
    19c6:	31 f5       	brne	.+76     	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    19c8:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    19cc:	90 91 62 24 	lds	r25, 0x2462	; 0x802462 <udd_g_ctrlreq+0x3>
    19d0:	89 2b       	or	r24, r25
    19d2:	01 f5       	brne	.+64     	; 0x1a14 <udc_process_setup+0x5fe>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    19d4:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    19d8:	df d4       	rcall	.+2494   	; 0x2398 <udd_ep_clear_halt>
    19da:	1a c0       	rjmp	.+52     	; 0x1a10 <udc_process_setup+0x5fa>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19dc:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    19e0:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    19e4:	89 2b       	or	r24, r25
    19e6:	b1 f4       	brne	.+44     	; 0x1a14 <udc_process_setup+0x5fe>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    19e8:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <udd_g_ctrlreq+0x2>
    19ec:	90 91 62 24 	lds	r25, 0x2462	; 0x802462 <udd_g_ctrlreq+0x3>
    19f0:	89 2b       	or	r24, r25
    19f2:	81 f4       	brne	.+32     	; 0x1a14 <udc_process_setup+0x5fe>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    19f4:	cf e5       	ldi	r28, 0x5F	; 95
    19f6:	d4 e2       	ldi	r29, 0x24	; 36
    19f8:	8c 81       	ldd	r24, Y+4	; 0x04
    19fa:	bd d5       	rcall	.+2938   	; 0x2576 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	20 d6       	rcall	.+3136   	; 0x2640 <udd_ep_set_halt>
    1a00:	07 c0       	rjmp	.+14     	; 0x1a10 <udc_process_setup+0x5fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <udc_process_setup+0x5fa>
				break;
			}
		}
#endif
	}
	return false;
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <udc_process_setup+0x5fa>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <udc_process_setup+0x5fa>
				break;
			}
		}
#endif
	}
	return false;
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1a10:	81 11       	cpse	r24, r1
    1a12:	7e c0       	rjmp	.+252    	; 0x1b10 <udc_process_setup+0x6fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1a14:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq>
    1a18:	8f 71       	andi	r24, 0x1F	; 31
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	71 f5       	brne	.+92     	; 0x1a7a <udc_process_setup+0x664>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a1e:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1a22:	88 23       	and	r24, r24
    1a24:	51 f1       	breq	.+84     	; 0x1a7a <udc_process_setup+0x664>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a26:	00 91 63 24 	lds	r16, 0x2463	; 0x802463 <udd_g_ctrlreq+0x4>
    1a2a:	10 91 64 24 	lds	r17, 0x2464	; 0x802464 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a2e:	c0 91 bc 20 	lds	r28, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1a32:	d0 91 bd 20 	lds	r29, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1a36:	e8 81       	ld	r30, Y
    1a38:	f9 81       	ldd	r31, Y+1	; 0x01
    1a3a:	84 81       	ldd	r24, Z+4	; 0x04
    1a3c:	08 17       	cp	r16, r24
    1a3e:	e8 f4       	brcc	.+58     	; 0x1a7a <udc_process_setup+0x664>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	80 2f       	mov	r24, r16
    1a44:	de db       	rcall	.-2116   	; 0x1202 <udc_update_iface_desc>
    1a46:	88 23       	and	r24, r24
    1a48:	c1 f0       	breq	.+48     	; 0x1a7a <udc_process_setup+0x664>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	ff 27       	eor	r31, r31
    1a4e:	cf 01       	movw	r24, r30
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	ea 81       	ldd	r30, Y+2	; 0x02
    1a56:	fb 81       	ldd	r31, Y+3	; 0x03
    1a58:	e8 0f       	add	r30, r24
    1a5a:	f9 1f       	adc	r31, r25
    1a5c:	c0 81       	ld	r28, Z
    1a5e:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a60:	ee 81       	ldd	r30, Y+6	; 0x06
    1a62:	ff 81       	ldd	r31, Y+7	; 0x07
    1a64:	09 95       	icall
    1a66:	68 2f       	mov	r22, r24
    1a68:	80 2f       	mov	r24, r16
    1a6a:	cb db       	rcall	.-2154   	; 0x1202 <udc_update_iface_desc>
    1a6c:	88 23       	and	r24, r24
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <udc_process_setup+0x664>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1a70:	ec 81       	ldd	r30, Y+4	; 0x04
    1a72:	fd 81       	ldd	r31, Y+5	; 0x05
    1a74:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1a76:	81 11       	cpse	r24, r1
    1a78:	4b c0       	rjmp	.+150    	; 0x1b10 <udc_process_setup+0x6fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1a7a:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq>
    1a7e:	8f 71       	andi	r24, 0x1F	; 31
    1a80:	82 30       	cpi	r24, 0x02	; 2
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <udc_process_setup+0x670>
    1a84:	40 c0       	rjmp	.+128    	; 0x1b06 <udc_process_setup+0x6f0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a86:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udc_num_configuration>
    1a8a:	88 23       	and	r24, r24
    1a8c:	b1 f1       	breq	.+108    	; 0x1afa <udc_process_setup+0x6e4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a8e:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1a92:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1a96:	ed 91       	ld	r30, X+
    1a98:	fc 91       	ld	r31, X
    1a9a:	11 97       	sbiw	r26, 0x01	; 1
    1a9c:	84 81       	ldd	r24, Z+4	; 0x04
    1a9e:	88 23       	and	r24, r24
    1aa0:	71 f1       	breq	.+92     	; 0x1afe <udc_process_setup+0x6e8>
    1aa2:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1aa4:	ec 2f       	mov	r30, r28
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	12 96       	adiw	r26, 0x02	; 2
    1aae:	8d 91       	ld	r24, X+
    1ab0:	9c 91       	ld	r25, X
    1ab2:	13 97       	sbiw	r26, 0x03	; 3
    1ab4:	e8 0f       	add	r30, r24
    1ab6:	f9 1f       	adc	r31, r25
    1ab8:	00 81       	ld	r16, Z
    1aba:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1abc:	d8 01       	movw	r26, r16
    1abe:	16 96       	adiw	r26, 0x06	; 6
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	17 97       	sbiw	r26, 0x07	; 7
    1ac6:	09 95       	icall
    1ac8:	68 2f       	mov	r22, r24
    1aca:	8c 2f       	mov	r24, r28
    1acc:	9a db       	rcall	.-2252   	; 0x1202 <udc_update_iface_desc>
    1ace:	88 23       	and	r24, r24
    1ad0:	f9 f0       	breq	.+62     	; 0x1b10 <udc_process_setup+0x6fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1ad2:	d8 01       	movw	r26, r16
    1ad4:	14 96       	adiw	r26, 0x04	; 4
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	15 97       	sbiw	r26, 0x05	; 5
    1adc:	09 95       	icall
    1ade:	81 11       	cpse	r24, r1
    1ae0:	17 c0       	rjmp	.+46     	; 0x1b10 <udc_process_setup+0x6fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ae2:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ae4:	a0 91 bc 20 	lds	r26, 0x20BC	; 0x8020bc <udc_ptr_conf>
    1ae8:	b0 91 bd 20 	lds	r27, 0x20BD	; 0x8020bd <udc_ptr_conf+0x1>
    1aec:	ed 91       	ld	r30, X+
    1aee:	fc 91       	ld	r31, X
    1af0:	11 97       	sbiw	r26, 0x01	; 1
    1af2:	94 81       	ldd	r25, Z+4	; 0x04
    1af4:	c9 17       	cp	r28, r25
    1af6:	b0 f2       	brcs	.-84     	; 0x1aa4 <udc_process_setup+0x68e>
    1af8:	0b c0       	rjmp	.+22     	; 0x1b10 <udc_process_setup+0x6fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <udc_process_setup+0x6fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	07 c0       	rjmp	.+14     	; 0x1b10 <udc_process_setup+0x6fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	05 c0       	rjmp	.+10     	; 0x1b10 <udc_process_setup+0x6fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <udc_process_setup+0x6fa>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <udc_process_setup+0x6fa>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1b1a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1b1c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1b1e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1b20:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1b22:	60 83       	st	Z, r22
	ret                             // Return to caller
    1b24:	08 95       	ret

00001b26 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1b26:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1b2a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1b2c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1b2e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1b32:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1b34:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1b38:	08 95       	ret

00001b3a <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	22 c0       	rjmp	.+68     	; 0x1b82 <udd_sleep_mode+0x48>
    1b3e:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_b_idle>
    1b42:	99 23       	and	r25, r25
    1b44:	d9 f0       	breq	.+54     	; 0x1b7c <udd_sleep_mode+0x42>
    1b46:	90 91 50 2c 	lds	r25, 0x2C50	; 0x802c50 <sleepmgr_locks+0x1>
    1b4a:	91 11       	cpse	r25, r1
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <udd_sleep_mode+0x16>
    1b4e:	ff cf       	rjmp	.-2      	; 0x1b4e <udd_sleep_mode+0x14>
    1b50:	2f b7       	in	r18, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	ef e4       	ldi	r30, 0x4F	; 79
    1b56:	fc e2       	ldi	r31, 0x2C	; 44
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	91 50       	subi	r25, 0x01	; 1
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	2f bf       	out	0x3f, r18	; 63
    1b60:	0d c0       	rjmp	.+26     	; 0x1b7c <udd_sleep_mode+0x42>
    1b62:	90 91 50 2c 	lds	r25, 0x2C50	; 0x802c50 <sleepmgr_locks+0x1>
    1b66:	9f 3f       	cpi	r25, 0xFF	; 255
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <udd_sleep_mode+0x32>
    1b6a:	ff cf       	rjmp	.-2      	; 0x1b6a <udd_sleep_mode+0x30>
    1b6c:	2f b7       	in	r18, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	ef e4       	ldi	r30, 0x4F	; 79
    1b72:	fc e2       	ldi	r31, 0x2C	; 44
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	9f 5f       	subi	r25, 0xFF	; 255
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	2f bf       	out	0x3f, r18	; 63
    1b7c:	80 93 54 22 	sts	0x2254, r24	; 0x802254 <udd_b_idle>
    1b80:	08 95       	ret
    1b82:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_b_idle>
    1b86:	99 23       	and	r25, r25
    1b88:	61 f3       	breq	.-40     	; 0x1b62 <udd_sleep_mode+0x28>
    1b8a:	f8 cf       	rjmp	.-16     	; 0x1b7c <udd_sleep_mode+0x42>

00001b8c <udd_ctrl_init>:
    1b8c:	0f 93       	push	r16
    1b8e:	e8 ec       	ldi	r30, 0xC8	; 200
    1b90:	f4 e0       	ldi	r31, 0x04	; 4
    1b92:	80 81       	ld	r24, Z
    1b94:	8f 7d       	andi	r24, 0xDF	; 223
    1b96:	80 83       	st	Z, r24
    1b98:	80 81       	ld	r24, Z
    1b9a:	8f 7d       	andi	r24, 0xDF	; 223
    1b9c:	80 83       	st	Z, r24
    1b9e:	e8 e1       	ldi	r30, 0x18	; 24
    1ba0:	f2 e2       	ldi	r31, 0x22	; 34
    1ba2:	02 e0       	ldi	r16, 0x02	; 2
    1ba4:	05 93       	las	Z, r16
    1ba6:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udd_sram+0x1a>
    1baa:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udd_sram+0x1b>
    1bae:	00 e2       	ldi	r16, 0x20	; 32
    1bb0:	06 93       	lac	Z, r16
    1bb2:	00 e4       	ldi	r16, 0x40	; 64
    1bb4:	06 93       	lac	Z, r16
    1bb6:	e0 e1       	ldi	r30, 0x10	; 16
    1bb8:	f2 e2       	ldi	r31, 0x22	; 34
    1bba:	00 e2       	ldi	r16, 0x20	; 32
    1bbc:	06 93       	lac	Z, r16
    1bbe:	00 e4       	ldi	r16, 0x40	; 64
    1bc0:	06 93       	lac	Z, r16
    1bc2:	ef e5       	ldi	r30, 0x5F	; 95
    1bc4:	f4 e2       	ldi	r31, 0x24	; 36
    1bc6:	14 86       	std	Z+12, r1	; 0x0c
    1bc8:	15 86       	std	Z+13, r1	; 0x0d
    1bca:	16 86       	std	Z+14, r1	; 0x0e
    1bcc:	17 86       	std	Z+15, r1	; 0x0f
    1bce:	12 86       	std	Z+10, r1	; 0x0a
    1bd0:	13 86       	std	Z+11, r1	; 0x0b
    1bd2:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ep_control_state>
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <udd_ctrl_stall_data>:
    1bda:	0f 93       	push	r16
    1bdc:	85 e0       	ldi	r24, 0x05	; 5
    1bde:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1be2:	e9 e1       	ldi	r30, 0x19	; 25
    1be4:	f2 e2       	ldi	r31, 0x22	; 34
    1be6:	04 e0       	ldi	r16, 0x04	; 4
    1be8:	05 93       	las	Z, r16
    1bea:	e1 e1       	ldi	r30, 0x11	; 17
    1bec:	f2 e2       	ldi	r31, 0x22	; 34
    1bee:	04 e0       	ldi	r16, 0x04	; 4
    1bf0:	05 93       	las	Z, r16
    1bf2:	0f 91       	pop	r16
    1bf4:	08 95       	ret

00001bf6 <udd_ctrl_send_zlp_in>:
    1bf6:	0f 93       	push	r16
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1bfe:	10 92 1a 22 	sts	0x221A, r1	; 0x80221a <udd_sram+0x1a>
    1c02:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <udd_sram+0x1b>
    1c06:	e8 e1       	ldi	r30, 0x18	; 24
    1c08:	f2 e2       	ldi	r31, 0x22	; 34
    1c0a:	02 e0       	ldi	r16, 0x02	; 2
    1c0c:	06 93       	lac	Z, r16
    1c0e:	0f 91       	pop	r16
    1c10:	08 95       	ret

00001c12 <udd_ctrl_endofrequest>:
    1c12:	e0 91 6b 24 	lds	r30, 0x246B	; 0x80246b <udd_g_ctrlreq+0xc>
    1c16:	f0 91 6c 24 	lds	r31, 0x246C	; 0x80246c <udd_g_ctrlreq+0xd>
    1c1a:	30 97       	sbiw	r30, 0x00	; 0
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <udd_ctrl_endofrequest+0xe>
    1c1e:	09 95       	icall
    1c20:	08 95       	ret

00001c22 <udd_ctrl_in_sent>:
    1c22:	0f 93       	push	r16
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    1c2c:	83 30       	cpi	r24, 0x03	; 3
    1c2e:	19 f4       	brne	.+6      	; 0x1c36 <udd_ctrl_in_sent+0x14>
    1c30:	f0 df       	rcall	.-32     	; 0x1c12 <udd_ctrl_endofrequest>
    1c32:	ac df       	rcall	.-168    	; 0x1b8c <udd_ctrl_init>
    1c34:	5e c0       	rjmp	.+188    	; 0x1cf2 <udd_ctrl_in_sent+0xd0>
    1c36:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1c3a:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1c3e:	c0 91 69 24 	lds	r28, 0x2469	; 0x802469 <udd_g_ctrlreq+0xa>
    1c42:	d0 91 6a 24 	lds	r29, 0x246A	; 0x80246a <udd_g_ctrlreq+0xb>
    1c46:	c8 1b       	sub	r28, r24
    1c48:	d9 0b       	sbc	r29, r25
    1c4a:	71 f5       	brne	.+92     	; 0x1ca8 <udd_ctrl_in_sent+0x86>
    1c4c:	20 91 fd 21 	lds	r18, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1c50:	30 91 fe 21 	lds	r19, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1c54:	82 0f       	add	r24, r18
    1c56:	93 1f       	adc	r25, r19
    1c58:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1c5c:	90 93 fe 21 	sts	0x21FE, r25	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1c60:	20 91 65 24 	lds	r18, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    1c64:	30 91 66 24 	lds	r19, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    1c68:	82 17       	cp	r24, r18
    1c6a:	93 07       	cpc	r25, r19
    1c6c:	21 f0       	breq	.+8      	; 0x1c76 <udd_ctrl_in_sent+0x54>
    1c6e:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <b_shortpacket.5272>
    1c72:	88 23       	and	r24, r24
    1c74:	41 f0       	breq	.+16     	; 0x1c86 <udd_ctrl_in_sent+0x64>
    1c76:	84 e0       	ldi	r24, 0x04	; 4
    1c78:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1c7c:	e0 e1       	ldi	r30, 0x10	; 16
    1c7e:	f2 e2       	ldi	r31, 0x22	; 34
    1c80:	02 e0       	ldi	r16, 0x02	; 2
    1c82:	06 93       	lac	Z, r16
    1c84:	36 c0       	rjmp	.+108    	; 0x1cf2 <udd_ctrl_in_sent+0xd0>
    1c86:	e0 91 6d 24 	lds	r30, 0x246D	; 0x80246d <udd_g_ctrlreq+0xe>
    1c8a:	f0 91 6e 24 	lds	r31, 0x246E	; 0x80246e <udd_g_ctrlreq+0xf>
    1c8e:	30 97       	sbiw	r30, 0x00	; 0
    1c90:	99 f0       	breq	.+38     	; 0x1cb8 <udd_ctrl_in_sent+0x96>
    1c92:	09 95       	icall
    1c94:	88 23       	and	r24, r24
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <udd_ctrl_in_sent+0x96>
    1c98:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1c9c:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1ca0:	c0 91 69 24 	lds	r28, 0x2469	; 0x802469 <udd_g_ctrlreq+0xa>
    1ca4:	d0 91 6a 24 	lds	r29, 0x246A	; 0x80246a <udd_g_ctrlreq+0xb>
    1ca8:	c0 34       	cpi	r28, 0x40	; 64
    1caa:	d1 05       	cpc	r29, r1
    1cac:	28 f0       	brcs	.+10     	; 0x1cb8 <udd_ctrl_in_sent+0x96>
    1cae:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <b_shortpacket.5272>
    1cb2:	c0 e4       	ldi	r28, 0x40	; 64
    1cb4:	d0 e0       	ldi	r29, 0x00	; 0
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <udd_ctrl_in_sent+0x9c>
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <b_shortpacket.5272>
    1cbe:	e0 e0       	ldi	r30, 0x00	; 0
    1cc0:	f2 e2       	ldi	r31, 0x22	; 34
    1cc2:	c2 8f       	std	Z+26, r28	; 0x1a
    1cc4:	d3 8f       	std	Z+27, r29	; 0x1b
    1cc6:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1cca:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1cce:	20 91 67 24 	lds	r18, 0x2467	; 0x802467 <udd_g_ctrlreq+0x8>
    1cd2:	30 91 68 24 	lds	r19, 0x2468	; 0x802468 <udd_g_ctrlreq+0x9>
    1cd6:	28 0f       	add	r18, r24
    1cd8:	39 1f       	adc	r19, r25
    1cda:	24 8f       	std	Z+28, r18	; 0x1c
    1cdc:	35 8f       	std	Z+29, r19	; 0x1d
    1cde:	c8 0f       	add	r28, r24
    1ce0:	d9 1f       	adc	r29, r25
    1ce2:	c0 93 fb 21 	sts	0x21FB, r28	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1ce6:	d0 93 fc 21 	sts	0x21FC, r29	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1cea:	e8 e1       	ldi	r30, 0x18	; 24
    1cec:	f2 e2       	ldi	r31, 0x22	; 34
    1cee:	02 e0       	ldi	r16, 0x02	; 2
    1cf0:	06 93       	lac	Z, r16
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <udd_ep_get_size>:
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	81 81       	ldd	r24, Z+1	; 0x01
    1cfe:	e8 2f       	mov	r30, r24
    1d00:	e7 70       	andi	r30, 0x07	; 7
    1d02:	8e 2f       	mov	r24, r30
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	fc 01       	movw	r30, r24
    1d08:	31 97       	sbiw	r30, 0x01	; 1
    1d0a:	e7 30       	cpi	r30, 0x07	; 7
    1d0c:	f1 05       	cpc	r31, r1
    1d0e:	c0 f4       	brcc	.+48     	; 0x1d40 <udd_ep_get_size+0x46>
    1d10:	ea 5d       	subi	r30, 0xDA	; 218
    1d12:	fe 4f       	sbci	r31, 0xFE	; 254
    1d14:	7a c6       	rjmp	.+3316   	; 0x2a0a <__tablejump2__>
    1d16:	80 e1       	ldi	r24, 0x10	; 16
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	08 95       	ret
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	08 95       	ret
    1d22:	80 e4       	ldi	r24, 0x40	; 64
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	08 95       	ret
    1d28:	80 e8       	ldi	r24, 0x80	; 128
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	08 95       	ret
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	91 e0       	ldi	r25, 0x01	; 1
    1d32:	08 95       	ret
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	92 e0       	ldi	r25, 0x02	; 2
    1d38:	08 95       	ret
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	93 e0       	ldi	r25, 0x03	; 3
    1d3e:	08 95       	ret
    1d40:	88 e0       	ldi	r24, 0x08	; 8
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	08 95       	ret

00001d46 <udd_ep_get_job>:
    1d46:	28 2f       	mov	r18, r24
    1d48:	2f 70       	andi	r18, 0x0F	; 15
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	22 0f       	add	r18, r18
    1d4e:	33 1f       	adc	r19, r19
    1d50:	08 2e       	mov	r0, r24
    1d52:	00 0c       	add	r0, r0
    1d54:	99 0b       	sbc	r25, r25
    1d56:	88 27       	eor	r24, r24
    1d58:	99 0f       	add	r25, r25
    1d5a:	88 1f       	adc	r24, r24
    1d5c:	99 27       	eor	r25, r25
    1d5e:	82 0f       	add	r24, r18
    1d60:	93 1f       	adc	r25, r19
    1d62:	02 97       	sbiw	r24, 0x02	; 2
    1d64:	9c 01       	movw	r18, r24
    1d66:	22 0f       	add	r18, r18
    1d68:	33 1f       	adc	r19, r19
    1d6a:	22 0f       	add	r18, r18
    1d6c:	33 1f       	adc	r19, r19
    1d6e:	22 0f       	add	r18, r18
    1d70:	33 1f       	adc	r19, r19
    1d72:	82 0f       	add	r24, r18
    1d74:	93 1f       	adc	r25, r19
    1d76:	8b 57       	subi	r24, 0x7B	; 123
    1d78:	9e 4d       	sbci	r25, 0xDE	; 222
    1d7a:	08 95       	ret

00001d7c <udd_ctrl_interrupt_tc_setup>:
    1d7c:	0f 93       	push	r16
    1d7e:	cf 93       	push	r28
    1d80:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1d84:	80 ff       	sbrs	r24, 0
    1d86:	62 c0       	rjmp	.+196    	; 0x1e4c <udd_ctrl_interrupt_tc_setup+0xd0>
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1d8e:	e0 e1       	ldi	r30, 0x10	; 16
    1d90:	f2 e2       	ldi	r31, 0x22	; 34
    1d92:	00 e8       	ldi	r16, 0x80	; 128
    1d94:	06 93       	lac	Z, r16
    1d96:	e8 e1       	ldi	r30, 0x18	; 24
    1d98:	f2 e2       	ldi	r31, 0x22	; 34
    1d9a:	00 e8       	ldi	r16, 0x80	; 128
    1d9c:	06 93       	lac	Z, r16
    1d9e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1da2:	e0 e1       	ldi	r30, 0x10	; 16
    1da4:	f2 e2       	ldi	r31, 0x22	; 34
    1da6:	00 e1       	ldi	r16, 0x10	; 16
    1da8:	06 93       	lac	Z, r16
    1daa:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    1dae:	88 23       	and	r24, r24
    1db0:	29 f0       	breq	.+10     	; 0x1dbc <udd_ctrl_interrupt_tc_setup+0x40>
    1db2:	83 50       	subi	r24, 0x03	; 3
    1db4:	82 30       	cpi	r24, 0x02	; 2
    1db6:	08 f4       	brcc	.+2      	; 0x1dba <udd_ctrl_interrupt_tc_setup+0x3e>
    1db8:	2c df       	rcall	.-424    	; 0x1c12 <udd_ctrl_endofrequest>
    1dba:	e8 de       	rcall	.-560    	; 0x1b8c <udd_ctrl_init>
    1dbc:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <udd_sram+0x12>
    1dc0:	90 91 13 22 	lds	r25, 0x2213	; 0x802213 <udd_sram+0x13>
    1dc4:	08 97       	sbiw	r24, 0x08	; 8
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <udd_ctrl_interrupt_tc_setup+0x4e>
    1dc8:	43 c0       	rjmp	.+134    	; 0x1e50 <udd_ctrl_interrupt_tc_setup+0xd4>
    1dca:	88 e0       	ldi	r24, 0x08	; 8
    1dcc:	eb eb       	ldi	r30, 0xBB	; 187
    1dce:	f1 e2       	ldi	r31, 0x21	; 33
    1dd0:	af e5       	ldi	r26, 0x5F	; 95
    1dd2:	b4 e2       	ldi	r27, 0x24	; 36
    1dd4:	01 90       	ld	r0, Z+
    1dd6:	0d 92       	st	X+, r0
    1dd8:	8a 95       	dec	r24
    1dda:	e1 f7       	brne	.-8      	; 0x1dd4 <udd_ctrl_interrupt_tc_setup+0x58>
    1ddc:	e8 ec       	ldi	r30, 0xC8	; 200
    1dde:	f4 e0       	ldi	r31, 0x04	; 4
    1de0:	80 81       	ld	r24, Z
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	80 83       	st	Z, r24
    1de6:	80 81       	ld	r24, Z
    1de8:	80 62       	ori	r24, 0x20	; 32
    1dea:	80 83       	st	Z, r24
    1dec:	14 db       	rcall	.-2520   	; 0x1416 <udc_process_setup>
    1dee:	c8 2f       	mov	r28, r24
    1df0:	81 11       	cpse	r24, r1
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <udd_ctrl_interrupt_tc_setup+0x7e>
    1df4:	f2 de       	rcall	.-540    	; 0x1bda <udd_ctrl_stall_data>
    1df6:	c1 e0       	ldi	r28, 0x01	; 1
    1df8:	2c c0       	rjmp	.+88     	; 0x1e52 <udd_ctrl_interrupt_tc_setup+0xd6>
    1dfa:	80 91 5f 24 	lds	r24, 0x245F	; 0x80245f <udd_g_ctrlreq>
    1dfe:	88 23       	and	r24, r24
    1e00:	6c f4       	brge	.+26     	; 0x1e1c <udd_ctrl_interrupt_tc_setup+0xa0>
    1e02:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1e06:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1e0a:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1e0e:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1e18:	04 df       	rcall	.-504    	; 0x1c22 <udd_ctrl_in_sent>
    1e1a:	1b c0       	rjmp	.+54     	; 0x1e52 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e1c:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    1e20:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    1e24:	89 2b       	or	r24, r25
    1e26:	11 f4       	brne	.+4      	; 0x1e2c <udd_ctrl_interrupt_tc_setup+0xb0>
    1e28:	e6 de       	rcall	.-564    	; 0x1bf6 <udd_ctrl_send_zlp_in>
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e2c:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    1e30:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1e34:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    1e38:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
    1e42:	e0 e1       	ldi	r30, 0x10	; 16
    1e44:	f2 e2       	ldi	r31, 0x22	; 34
    1e46:	02 e0       	ldi	r16, 0x02	; 2
    1e48:	06 93       	lac	Z, r16
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e4c:	c0 e0       	ldi	r28, 0x00	; 0
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e50:	c1 e0       	ldi	r28, 0x01	; 1
    1e52:	8c 2f       	mov	r24, r28
    1e54:	cf 91       	pop	r28
    1e56:	0f 91       	pop	r16
    1e58:	08 95       	ret

00001e5a <udd_ep_trans_complet>:
    1e5a:	8f 92       	push	r8
    1e5c:	9f 92       	push	r9
    1e5e:	af 92       	push	r10
    1e60:	bf 92       	push	r11
    1e62:	df 92       	push	r13
    1e64:	ef 92       	push	r14
    1e66:	ff 92       	push	r15
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	d8 2e       	mov	r13, r24
    1e72:	69 df       	rcall	.-302    	; 0x1d46 <udd_ep_get_job>
    1e74:	8c 01       	movw	r16, r24
    1e76:	bd 2c       	mov	r11, r13
    1e78:	bb 1c       	adc	r11, r11
    1e7a:	bb 24       	eor	r11, r11
    1e7c:	bb 1c       	adc	r11, r11
    1e7e:	cd 2d       	mov	r28, r13
    1e80:	cf 70       	andi	r28, 0x0F	; 15
    1e82:	d0 e0       	ldi	r29, 0x00	; 0
    1e84:	cc 0f       	add	r28, r28
    1e86:	dd 1f       	adc	r29, r29
    1e88:	cb 0d       	add	r28, r11
    1e8a:	d1 1d       	adc	r29, r1
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	20 5f       	subi	r18, 0xF0	; 240
    1e9e:	3d 4d       	sbci	r19, 0xDD	; 221
    1ea0:	79 01       	movw	r14, r18
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	2a df       	rcall	.-428    	; 0x1cfa <udd_ep_get_size>
    1ea6:	4c 01       	movw	r8, r24
    1ea8:	bb 20       	and	r11, r11
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <udd_ep_trans_complet+0x54>
    1eac:	70 c0       	rjmp	.+224    	; 0x1f8e <udd_ep_trans_complet+0x134>
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	e0 50       	subi	r30, 0x00	; 0
    1ebe:	fe 4d       	sbci	r31, 0xDE	; 222
    1ec0:	26 89       	ldd	r18, Z+22	; 0x16
    1ec2:	37 89       	ldd	r19, Z+23	; 0x17
    1ec4:	d8 01       	movw	r26, r16
    1ec6:	15 96       	adiw	r26, 0x05	; 5
    1ec8:	8d 91       	ld	r24, X+
    1eca:	9c 91       	ld	r25, X
    1ecc:	16 97       	sbiw	r26, 0x06	; 6
    1ece:	82 0f       	add	r24, r18
    1ed0:	93 1f       	adc	r25, r19
    1ed2:	15 96       	adiw	r26, 0x05	; 5
    1ed4:	8d 93       	st	X+, r24
    1ed6:	9c 93       	st	X, r25
    1ed8:	16 97       	sbiw	r26, 0x06	; 6
    1eda:	13 96       	adiw	r26, 0x03	; 3
    1edc:	2d 91       	ld	r18, X+
    1ede:	3c 91       	ld	r19, X
    1ee0:	14 97       	sbiw	r26, 0x04	; 4
    1ee2:	82 17       	cp	r24, r18
    1ee4:	93 07       	cpc	r25, r19
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <udd_ep_trans_complet+0x90>
    1ee8:	3c c0       	rjmp	.+120    	; 0x1f62 <udd_ep_trans_complet+0x108>
    1eea:	28 1b       	sub	r18, r24
    1eec:	39 0b       	sbc	r19, r25
    1eee:	21 15       	cp	r18, r1
    1ef0:	b4 e0       	ldi	r27, 0x04	; 4
    1ef2:	3b 07       	cpc	r19, r27
    1ef4:	38 f0       	brcs	.+14     	; 0x1f04 <udd_ep_trans_complet+0xaa>
    1ef6:	2f ef       	ldi	r18, 0xFF	; 255
    1ef8:	33 e0       	ldi	r19, 0x03	; 3
    1efa:	c9 01       	movw	r24, r18
    1efc:	b4 01       	movw	r22, r8
    1efe:	71 d5       	rcall	.+2786   	; 0x29e2 <__udivmodhi4>
    1f00:	28 1b       	sub	r18, r24
    1f02:	39 0b       	sbc	r19, r25
    1f04:	f8 01       	movw	r30, r16
    1f06:	80 81       	ld	r24, Z
    1f08:	81 ff       	sbrs	r24, 1
    1f0a:	09 c0       	rjmp	.+18     	; 0x1f1e <udd_ep_trans_complet+0xc4>
    1f0c:	c9 01       	movw	r24, r18
    1f0e:	b4 01       	movw	r22, r8
    1f10:	68 d5       	rcall	.+2768   	; 0x29e2 <__udivmodhi4>
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	89 2b       	or	r24, r25
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <udd_ep_trans_complet+0xc0>
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	84 2f       	mov	r24, r20
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <udd_ep_trans_complet+0xc6>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	d8 01       	movw	r26, r16
    1f22:	9c 91       	ld	r25, X
    1f24:	80 fb       	bst	r24, 0
    1f26:	91 f9       	bld	r25, 1
    1f28:	9c 93       	st	X, r25
    1f2a:	cc 0f       	add	r28, r28
    1f2c:	dd 1f       	adc	r29, r29
    1f2e:	cc 0f       	add	r28, r28
    1f30:	dd 1f       	adc	r29, r29
    1f32:	cc 0f       	add	r28, r28
    1f34:	dd 1f       	adc	r29, r29
    1f36:	c0 50       	subi	r28, 0x00	; 0
    1f38:	de 4d       	sbci	r29, 0xDE	; 222
    1f3a:	1e 8a       	std	Y+22, r1	; 0x16
    1f3c:	1f 8a       	std	Y+23, r1	; 0x17
    1f3e:	2a 8b       	std	Y+18, r18	; 0x12
    1f40:	3b 8b       	std	Y+19, r19	; 0x13
    1f42:	11 96       	adiw	r26, 0x01	; 1
    1f44:	2d 91       	ld	r18, X+
    1f46:	3c 91       	ld	r19, X
    1f48:	12 97       	sbiw	r26, 0x02	; 2
    1f4a:	15 96       	adiw	r26, 0x05	; 5
    1f4c:	8d 91       	ld	r24, X+
    1f4e:	9c 91       	ld	r25, X
    1f50:	16 97       	sbiw	r26, 0x06	; 6
    1f52:	82 0f       	add	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	8c 8b       	std	Y+20, r24	; 0x14
    1f58:	9d 8b       	std	Y+21, r25	; 0x15
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	02 e0       	ldi	r16, 0x02	; 2
    1f5e:	06 93       	lac	Z, r16
    1f60:	ca c0       	rjmp	.+404    	; 0x20f6 <udd_ep_trans_complet+0x29c>
    1f62:	d8 01       	movw	r26, r16
    1f64:	8c 91       	ld	r24, X
    1f66:	81 ff       	sbrs	r24, 1
    1f68:	b3 c0       	rjmp	.+358    	; 0x20d0 <udd_ep_trans_complet+0x276>
    1f6a:	8d 7f       	andi	r24, 0xFD	; 253
    1f6c:	8c 93       	st	X, r24
    1f6e:	cc 0f       	add	r28, r28
    1f70:	dd 1f       	adc	r29, r29
    1f72:	cc 0f       	add	r28, r28
    1f74:	dd 1f       	adc	r29, r29
    1f76:	cc 0f       	add	r28, r28
    1f78:	dd 1f       	adc	r29, r29
    1f7a:	c0 50       	subi	r28, 0x00	; 0
    1f7c:	de 4d       	sbci	r29, 0xDE	; 222
    1f7e:	1e 8a       	std	Y+22, r1	; 0x16
    1f80:	1f 8a       	std	Y+23, r1	; 0x17
    1f82:	1a 8a       	std	Y+18, r1	; 0x12
    1f84:	1b 8a       	std	Y+19, r1	; 0x13
    1f86:	f7 01       	movw	r30, r14
    1f88:	02 e0       	ldi	r16, 0x02	; 2
    1f8a:	06 93       	lac	Z, r16
    1f8c:	b4 c0       	rjmp	.+360    	; 0x20f6 <udd_ep_trans_complet+0x29c>
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	e0 50       	subi	r30, 0x00	; 0
    1f9e:	fe 4d       	sbci	r31, 0xDE	; 222
    1fa0:	a2 88       	ldd	r10, Z+18	; 0x12
    1fa2:	b3 88       	ldd	r11, Z+19	; 0x13
    1fa4:	d8 01       	movw	r26, r16
    1fa6:	8c 91       	ld	r24, X
    1fa8:	82 ff       	sbrs	r24, 2
    1faa:	19 c0       	rjmp	.+50     	; 0x1fde <udd_ep_trans_complet+0x184>
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	ed 91       	ld	r30, X+
    1fb0:	fc 91       	ld	r31, X
    1fb2:	12 97       	sbiw	r26, 0x02	; 2
    1fb4:	15 96       	adiw	r26, 0x05	; 5
    1fb6:	2d 91       	ld	r18, X+
    1fb8:	3c 91       	ld	r19, X
    1fba:	16 97       	sbiw	r26, 0x06	; 6
    1fbc:	13 96       	adiw	r26, 0x03	; 3
    1fbe:	8d 91       	ld	r24, X+
    1fc0:	9c 91       	ld	r25, X
    1fc2:	14 97       	sbiw	r26, 0x04	; 4
    1fc4:	b4 01       	movw	r22, r8
    1fc6:	0d d5       	rcall	.+2586   	; 0x29e2 <__udivmodhi4>
    1fc8:	b0 e4       	ldi	r27, 0x40	; 64
    1fca:	db 9e       	mul	r13, r27
    1fcc:	b0 01       	movw	r22, r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	6b 57       	subi	r22, 0x7B	; 123
    1fd2:	7f 4d       	sbci	r23, 0xDF	; 223
    1fd4:	ac 01       	movw	r20, r24
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	82 0f       	add	r24, r18
    1fda:	93 1f       	adc	r25, r19
    1fdc:	1c d5       	rcall	.+2616   	; 0x2a16 <memcpy>
    1fde:	f8 01       	movw	r30, r16
    1fe0:	25 81       	ldd	r18, Z+5	; 0x05
    1fe2:	36 81       	ldd	r19, Z+6	; 0x06
    1fe4:	2a 0d       	add	r18, r10
    1fe6:	3b 1d       	adc	r19, r11
    1fe8:	25 83       	std	Z+5, r18	; 0x05
    1fea:	36 83       	std	Z+6, r19	; 0x06
    1fec:	83 81       	ldd	r24, Z+3	; 0x03
    1fee:	94 81       	ldd	r25, Z+4	; 0x04
    1ff0:	82 17       	cp	r24, r18
    1ff2:	93 07       	cpc	r25, r19
    1ff4:	68 f4       	brcc	.+26     	; 0x2010 <udd_ep_trans_complet+0x1b6>
    1ff6:	85 83       	std	Z+5, r24	; 0x05
    1ff8:	96 83       	std	Z+6, r25	; 0x06
    1ffa:	cc 0f       	add	r28, r28
    1ffc:	dd 1f       	adc	r29, r29
    1ffe:	cc 0f       	add	r28, r28
    2000:	dd 1f       	adc	r29, r29
    2002:	cc 0f       	add	r28, r28
    2004:	dd 1f       	adc	r29, r29
    2006:	c0 50       	subi	r28, 0x00	; 0
    2008:	de 4d       	sbci	r29, 0xDE	; 222
    200a:	8e 89       	ldd	r24, Y+22	; 0x16
    200c:	9f 89       	ldd	r25, Y+23	; 0x17
    200e:	60 c0       	rjmp	.+192    	; 0x20d0 <udd_ep_trans_complet+0x276>
    2010:	fe 01       	movw	r30, r28
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	e0 50       	subi	r30, 0x00	; 0
    2020:	fe 4d       	sbci	r31, 0xDE	; 222
    2022:	46 89       	ldd	r20, Z+22	; 0x16
    2024:	57 89       	ldd	r21, Z+23	; 0x17
    2026:	4a 15       	cp	r20, r10
    2028:	5b 05       	cpc	r21, r11
    202a:	09 f0       	breq	.+2      	; 0x202e <udd_ep_trans_complet+0x1d4>
    202c:	51 c0       	rjmp	.+162    	; 0x20d0 <udd_ep_trans_complet+0x276>
    202e:	28 17       	cp	r18, r24
    2030:	39 07       	cpc	r19, r25
    2032:	09 f4       	brne	.+2      	; 0x2036 <udd_ep_trans_complet+0x1dc>
    2034:	4d c0       	rjmp	.+154    	; 0x20d0 <udd_ep_trans_complet+0x276>
    2036:	ac 01       	movw	r20, r24
    2038:	42 1b       	sub	r20, r18
    203a:	53 0b       	sbc	r21, r19
    203c:	9a 01       	movw	r18, r20
    203e:	21 15       	cp	r18, r1
    2040:	54 e0       	ldi	r21, 0x04	; 4
    2042:	35 07       	cpc	r19, r21
    2044:	50 f0       	brcs	.+20     	; 0x205a <udd_ep_trans_complet+0x200>
    2046:	2f ef       	ldi	r18, 0xFF	; 255
    2048:	33 e0       	ldi	r19, 0x03	; 3
    204a:	c9 01       	movw	r24, r18
    204c:	b4 01       	movw	r22, r8
    204e:	c9 d4       	rcall	.+2450   	; 0x29e2 <__udivmodhi4>
    2050:	d9 01       	movw	r26, r18
    2052:	a8 1b       	sub	r26, r24
    2054:	b9 0b       	sbc	r27, r25
    2056:	cd 01       	movw	r24, r26
    2058:	07 c0       	rjmp	.+14     	; 0x2068 <udd_ep_trans_complet+0x20e>
    205a:	c9 01       	movw	r24, r18
    205c:	b4 01       	movw	r22, r8
    205e:	c1 d4       	rcall	.+2434   	; 0x29e2 <__udivmodhi4>
    2060:	f9 01       	movw	r30, r18
    2062:	e8 1b       	sub	r30, r24
    2064:	f9 0b       	sbc	r31, r25
    2066:	cf 01       	movw	r24, r30
    2068:	fe 01       	movw	r30, r28
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e0 50       	subi	r30, 0x00	; 0
    2078:	fe 4d       	sbci	r31, 0xDE	; 222
    207a:	12 8a       	std	Z+18, r1	; 0x12
    207c:	13 8a       	std	Z+19, r1	; 0x13
    207e:	88 15       	cp	r24, r8
    2080:	99 05       	cpc	r25, r9
    2082:	78 f4       	brcc	.+30     	; 0x20a2 <udd_ep_trans_complet+0x248>
    2084:	d8 01       	movw	r26, r16
    2086:	8c 91       	ld	r24, X
    2088:	84 60       	ori	r24, 0x04	; 4
    208a:	8c 93       	st	X, r24
    208c:	b0 e4       	ldi	r27, 0x40	; 64
    208e:	db 9e       	mul	r13, r27
    2090:	c0 01       	movw	r24, r0
    2092:	11 24       	eor	r1, r1
    2094:	8b 57       	subi	r24, 0x7B	; 123
    2096:	9f 4d       	sbci	r25, 0xDF	; 223
    2098:	84 8b       	std	Z+20, r24	; 0x14
    209a:	95 8b       	std	Z+21, r25	; 0x15
    209c:	86 8a       	std	Z+22, r8	; 0x16
    209e:	97 8a       	std	Z+23, r9	; 0x17
    20a0:	13 c0       	rjmp	.+38     	; 0x20c8 <udd_ep_trans_complet+0x26e>
    20a2:	f8 01       	movw	r30, r16
    20a4:	41 81       	ldd	r20, Z+1	; 0x01
    20a6:	52 81       	ldd	r21, Z+2	; 0x02
    20a8:	25 81       	ldd	r18, Z+5	; 0x05
    20aa:	36 81       	ldd	r19, Z+6	; 0x06
    20ac:	24 0f       	add	r18, r20
    20ae:	35 1f       	adc	r19, r21
    20b0:	cc 0f       	add	r28, r28
    20b2:	dd 1f       	adc	r29, r29
    20b4:	cc 0f       	add	r28, r28
    20b6:	dd 1f       	adc	r29, r29
    20b8:	cc 0f       	add	r28, r28
    20ba:	dd 1f       	adc	r29, r29
    20bc:	c0 50       	subi	r28, 0x00	; 0
    20be:	de 4d       	sbci	r29, 0xDE	; 222
    20c0:	2c 8b       	std	Y+20, r18	; 0x14
    20c2:	3d 8b       	std	Y+21, r19	; 0x15
    20c4:	8e 8b       	std	Y+22, r24	; 0x16
    20c6:	9f 8b       	std	Y+23, r25	; 0x17
    20c8:	f7 01       	movw	r30, r14
    20ca:	02 e0       	ldi	r16, 0x02	; 2
    20cc:	06 93       	lac	Z, r16
    20ce:	13 c0       	rjmp	.+38     	; 0x20f6 <udd_ep_trans_complet+0x29c>
    20d0:	d8 01       	movw	r26, r16
    20d2:	8c 91       	ld	r24, X
    20d4:	80 ff       	sbrs	r24, 0
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <udd_ep_trans_complet+0x29c>
    20d8:	8e 7f       	andi	r24, 0xFE	; 254
    20da:	8c 93       	st	X, r24
    20dc:	17 96       	adiw	r26, 0x07	; 7
    20de:	ed 91       	ld	r30, X+
    20e0:	fc 91       	ld	r31, X
    20e2:	18 97       	sbiw	r26, 0x08	; 8
    20e4:	30 97       	sbiw	r30, 0x00	; 0
    20e6:	39 f0       	breq	.+14     	; 0x20f6 <udd_ep_trans_complet+0x29c>
    20e8:	15 96       	adiw	r26, 0x05	; 5
    20ea:	6d 91       	ld	r22, X+
    20ec:	7c 91       	ld	r23, X
    20ee:	16 97       	sbiw	r26, 0x06	; 6
    20f0:	4d 2d       	mov	r20, r13
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	09 95       	icall
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	bf 90       	pop	r11
    2106:	af 90       	pop	r10
    2108:	9f 90       	pop	r9
    210a:	8f 90       	pop	r8
    210c:	08 95       	ret

0000210e <udd_attach>:
    210e:	cf 93       	push	r28
    2110:	cf b7       	in	r28, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	11 dd       	rcall	.-1502   	; 0x1b3a <udd_sleep_mode>
    2118:	ea ec       	ldi	r30, 0xCA	; 202
    211a:	f4 e0       	ldi	r31, 0x04	; 4
    211c:	80 e4       	ldi	r24, 0x40	; 64
    211e:	80 83       	st	Z, r24
    2120:	80 e2       	ldi	r24, 0x20	; 32
    2122:	80 83       	st	Z, r24
    2124:	e1 ec       	ldi	r30, 0xC1	; 193
    2126:	f4 e0       	ldi	r31, 0x04	; 4
    2128:	80 81       	ld	r24, Z
    212a:	81 60       	ori	r24, 0x01	; 1
    212c:	80 83       	st	Z, r24
    212e:	a9 ec       	ldi	r26, 0xC9	; 201
    2130:	b4 e0       	ldi	r27, 0x04	; 4
    2132:	8c 91       	ld	r24, X
    2134:	82 60       	ori	r24, 0x02	; 2
    2136:	8c 93       	st	X, r24
    2138:	e8 ec       	ldi	r30, 0xC8	; 200
    213a:	f4 e0       	ldi	r31, 0x04	; 4
    213c:	80 81       	ld	r24, Z
    213e:	80 64       	ori	r24, 0x40	; 64
    2140:	80 83       	st	Z, r24
    2142:	8c 91       	ld	r24, X
    2144:	81 60       	ori	r24, 0x01	; 1
    2146:	8c 93       	st	X, r24
    2148:	80 81       	ld	r24, Z
    214a:	80 68       	ori	r24, 0x80	; 128
    214c:	80 83       	st	Z, r24
    214e:	cf bf       	out	0x3f, r28	; 63
    2150:	cf 91       	pop	r28
    2152:	08 95       	ret

00002154 <udd_enable>:
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	c0 e6       	ldi	r28, 0x60	; 96
    215a:	d0 e0       	ldi	r29, 0x00	; 0
    215c:	18 82       	st	Y, r1
    215e:	80 e3       	ldi	r24, 0x30	; 48
    2160:	0e 94 34 08 	call	0x1068	; 0x1068 <sysclk_enable_usb>
    2164:	e0 ec       	ldi	r30, 0xC0	; 192
    2166:	f4 e0       	ldi	r31, 0x04	; 4
    2168:	80 81       	ld	r24, Z
    216a:	80 64       	ori	r24, 0x40	; 64
    216c:	80 83       	st	Z, r24
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	88 83       	st	Y, r24
    2172:	cf b7       	in	r28, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	fc 01       	movw	r30, r24
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	e0 50       	subi	r30, 0x00	; 0
    218a:	fe 4d       	sbci	r31, 0xDE	; 222
    218c:	11 8a       	std	Z+17, r1	; 0x11
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	88 30       	cpi	r24, 0x08	; 8
    2192:	91 05       	cpc	r25, r1
    2194:	91 f7       	brne	.-28     	; 0x217a <udd_enable+0x26>
    2196:	e5 e8       	ldi	r30, 0x85	; 133
    2198:	f1 e2       	ldi	r31, 0x21	; 33
    219a:	80 81       	ld	r24, Z
    219c:	8e 7f       	andi	r24, 0xFE	; 254
    219e:	80 83       	st	Z, r24
    21a0:	ee e8       	ldi	r30, 0x8E	; 142
    21a2:	f1 e2       	ldi	r31, 0x21	; 33
    21a4:	80 81       	ld	r24, Z
    21a6:	8e 7f       	andi	r24, 0xFE	; 254
    21a8:	80 83       	st	Z, r24
    21aa:	e7 e9       	ldi	r30, 0x97	; 151
    21ac:	f1 e2       	ldi	r31, 0x21	; 33
    21ae:	80 81       	ld	r24, Z
    21b0:	8e 7f       	andi	r24, 0xFE	; 254
    21b2:	80 83       	st	Z, r24
    21b4:	e0 ea       	ldi	r30, 0xA0	; 160
    21b6:	f1 e2       	ldi	r31, 0x21	; 33
    21b8:	80 81       	ld	r24, Z
    21ba:	8e 7f       	andi	r24, 0xFE	; 254
    21bc:	80 83       	st	Z, r24
    21be:	e9 ea       	ldi	r30, 0xA9	; 169
    21c0:	f1 e2       	ldi	r31, 0x21	; 33
    21c2:	80 81       	ld	r24, Z
    21c4:	8e 7f       	andi	r24, 0xFE	; 254
    21c6:	80 83       	st	Z, r24
    21c8:	e2 eb       	ldi	r30, 0xB2	; 178
    21ca:	f1 e2       	ldi	r31, 0x21	; 33
    21cc:	80 81       	ld	r24, Z
    21ce:	8e 7f       	andi	r24, 0xFE	; 254
    21d0:	80 83       	st	Z, r24
    21d2:	6a e1       	ldi	r22, 0x1A	; 26
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	a6 dc       	rcall	.-1716   	; 0x1b26 <nvm_read_byte>
    21da:	8f 3f       	cpi	r24, 0xFF	; 255
    21dc:	19 f0       	breq	.+6      	; 0x21e4 <udd_enable+0x90>
    21de:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <udd_enable+0x96>
    21e4:	8f e1       	ldi	r24, 0x1F	; 31
    21e6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    21ea:	6b e1       	ldi	r22, 0x1B	; 27
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	9a dc       	rcall	.-1740   	; 0x1b26 <nvm_read_byte>
    21f2:	8f 3f       	cpi	r24, 0xFF	; 255
    21f4:	19 f0       	breq	.+6      	; 0x21fc <udd_enable+0xa8>
    21f6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <udd_enable+0xae>
    21fc:	8f e1       	ldi	r24, 0x1F	; 31
    21fe:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2202:	e0 ec       	ldi	r30, 0xC0	; 192
    2204:	f4 e0       	ldi	r31, 0x04	; 4
    2206:	80 81       	ld	r24, Z
    2208:	83 60       	ori	r24, 0x03	; 3
    220a:	80 83       	st	Z, r24
    220c:	80 81       	ld	r24, Z
    220e:	80 68       	ori	r24, 0x80	; 128
    2210:	80 83       	st	Z, r24
    2212:	80 81       	ld	r24, Z
    2214:	80 61       	ori	r24, 0x10	; 16
    2216:	80 83       	st	Z, r24
    2218:	80 e1       	ldi	r24, 0x10	; 16
    221a:	92 e2       	ldi	r25, 0x22	; 34
    221c:	86 83       	std	Z+6, r24	; 0x06
    221e:	97 83       	std	Z+7, r25	; 0x07
    2220:	80 81       	ld	r24, Z
    2222:	80 62       	ori	r24, 0x20	; 32
    2224:	80 83       	st	Z, r24
    2226:	8f ef       	ldi	r24, 0xFF	; 255
    2228:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    222c:	e8 ec       	ldi	r30, 0xC8	; 200
    222e:	f4 e0       	ldi	r31, 0x04	; 4
    2230:	80 81       	ld	r24, Z
    2232:	82 60       	ori	r24, 0x02	; 2
    2234:	80 83       	st	Z, r24
    2236:	10 92 54 22 	sts	0x2254, r1	; 0x802254 <udd_b_idle>
    223a:	80 91 54 2c 	lds	r24, 0x2C54	; 0x802c54 <sleepmgr_locks+0x5>
    223e:	8f 3f       	cpi	r24, 0xFF	; 255
    2240:	09 f4       	brne	.+2      	; 0x2244 <udd_enable+0xf0>
    2242:	ff cf       	rjmp	.-2      	; 0x2242 <udd_enable+0xee>
    2244:	9f b7       	in	r25, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	ef e4       	ldi	r30, 0x4F	; 79
    224a:	fc e2       	ldi	r31, 0x2C	; 44
    224c:	85 81       	ldd	r24, Z+5	; 0x05
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	85 83       	std	Z+5, r24	; 0x05
    2252:	9f bf       	out	0x3f, r25	; 63
    2254:	5c df       	rcall	.-328    	; 0x210e <udd_attach>
    2256:	cf bf       	out	0x3f, r28	; 63
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	08 95       	ret

0000225e <udd_set_address>:
    225e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2262:	08 95       	ret

00002264 <udd_getaddress>:
    2264:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2268:	08 95       	ret

0000226a <udd_set_setup_payload>:
    226a:	ef e5       	ldi	r30, 0x5F	; 95
    226c:	f4 e2       	ldi	r31, 0x24	; 36
    226e:	80 87       	std	Z+8, r24	; 0x08
    2270:	91 87       	std	Z+9, r25	; 0x09
    2272:	62 87       	std	Z+10, r22	; 0x0a
    2274:	73 87       	std	Z+11, r23	; 0x0b
    2276:	08 95       	ret

00002278 <udd_ep_alloc>:
    2278:	28 2f       	mov	r18, r24
    227a:	2f 70       	andi	r18, 0x0F	; 15
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	22 0f       	add	r18, r18
    2280:	33 1f       	adc	r19, r19
    2282:	08 2e       	mov	r0, r24
    2284:	00 0c       	add	r0, r0
    2286:	99 0b       	sbc	r25, r25
    2288:	88 27       	eor	r24, r24
    228a:	99 0f       	add	r25, r25
    228c:	88 1f       	adc	r24, r24
    228e:	99 27       	eor	r25, r25
    2290:	82 0f       	add	r24, r18
    2292:	93 1f       	adc	r25, r19
    2294:	fc 01       	movw	r30, r24
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	e0 50       	subi	r30, 0x00	; 0
    22a4:	fe 4d       	sbci	r31, 0xDE	; 222
    22a6:	21 89       	ldd	r18, Z+17	; 0x11
    22a8:	20 7c       	andi	r18, 0xC0	; 192
    22aa:	09 f0       	breq	.+2      	; 0x22ae <udd_ep_alloc+0x36>
    22ac:	58 c0       	rjmp	.+176    	; 0x235e <udd_ep_alloc+0xe6>
    22ae:	63 70       	andi	r22, 0x03	; 3
    22b0:	61 30       	cpi	r22, 0x01	; 1
    22b2:	11 f0       	breq	.+4      	; 0x22b8 <udd_ep_alloc+0x40>
    22b4:	18 f4       	brcc	.+6      	; 0x22bc <udd_ep_alloc+0x44>
    22b6:	04 c0       	rjmp	.+8      	; 0x22c0 <udd_ep_alloc+0x48>
    22b8:	20 ec       	ldi	r18, 0xC0	; 192
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <udd_ep_alloc+0x4a>
    22bc:	20 e8       	ldi	r18, 0x80	; 128
    22be:	01 c0       	rjmp	.+2      	; 0x22c2 <udd_ep_alloc+0x4a>
    22c0:	20 e4       	ldi	r18, 0x40	; 64
    22c2:	40 38       	cpi	r20, 0x80	; 128
    22c4:	51 05       	cpc	r21, r1
    22c6:	e9 f0       	breq	.+58     	; 0x2302 <udd_ep_alloc+0x8a>
    22c8:	50 f4       	brcc	.+20     	; 0x22de <udd_ep_alloc+0x66>
    22ca:	40 32       	cpi	r20, 0x20	; 32
    22cc:	51 05       	cpc	r21, r1
    22ce:	a9 f0       	breq	.+42     	; 0x22fa <udd_ep_alloc+0x82>
    22d0:	40 34       	cpi	r20, 0x40	; 64
    22d2:	51 05       	cpc	r21, r1
    22d4:	a1 f0       	breq	.+40     	; 0x22fe <udd_ep_alloc+0x86>
    22d6:	40 31       	cpi	r20, 0x10	; 16
    22d8:	51 05       	cpc	r21, r1
    22da:	d9 f4       	brne	.+54     	; 0x2312 <udd_ep_alloc+0x9a>
    22dc:	0c c0       	rjmp	.+24     	; 0x22f6 <udd_ep_alloc+0x7e>
    22de:	41 15       	cp	r20, r1
    22e0:	32 e0       	ldi	r19, 0x02	; 2
    22e2:	53 07       	cpc	r21, r19
    22e4:	91 f0       	breq	.+36     	; 0x230a <udd_ep_alloc+0x92>
    22e6:	4f 3f       	cpi	r20, 0xFF	; 255
    22e8:	33 e0       	ldi	r19, 0x03	; 3
    22ea:	53 07       	cpc	r21, r19
    22ec:	81 f0       	breq	.+32     	; 0x230e <udd_ep_alloc+0x96>
    22ee:	41 15       	cp	r20, r1
    22f0:	51 40       	sbci	r21, 0x01	; 1
    22f2:	79 f4       	brne	.+30     	; 0x2312 <udd_ep_alloc+0x9a>
    22f4:	08 c0       	rjmp	.+16     	; 0x2306 <udd_ep_alloc+0x8e>
    22f6:	41 e0       	ldi	r20, 0x01	; 1
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <udd_ep_alloc+0x9c>
    22fa:	42 e0       	ldi	r20, 0x02	; 2
    22fc:	0b c0       	rjmp	.+22     	; 0x2314 <udd_ep_alloc+0x9c>
    22fe:	43 e0       	ldi	r20, 0x03	; 3
    2300:	09 c0       	rjmp	.+18     	; 0x2314 <udd_ep_alloc+0x9c>
    2302:	44 e0       	ldi	r20, 0x04	; 4
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <udd_ep_alloc+0x9c>
    2306:	45 e0       	ldi	r20, 0x05	; 5
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <udd_ep_alloc+0x9c>
    230a:	46 e0       	ldi	r20, 0x06	; 6
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <udd_ep_alloc+0x9c>
    230e:	47 e0       	ldi	r20, 0x07	; 7
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <udd_ep_alloc+0x9c>
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	fc 01       	movw	r30, r24
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	ee 0f       	add	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	e0 50       	subi	r30, 0x00	; 0
    2324:	fe 4d       	sbci	r31, 0xDE	; 222
    2326:	11 8a       	std	Z+17, r1	; 0x11
    2328:	dc 01       	movw	r26, r24
    232a:	aa 0f       	add	r26, r26
    232c:	bb 1f       	adc	r27, r27
    232e:	aa 0f       	add	r26, r26
    2330:	bb 1f       	adc	r27, r27
    2332:	aa 0f       	add	r26, r26
    2334:	bb 1f       	adc	r27, r27
    2336:	a0 5f       	subi	r26, 0xF0	; 240
    2338:	bd 4d       	sbci	r27, 0xDD	; 221
    233a:	36 e0       	ldi	r19, 0x06	; 6
    233c:	3c 93       	st	X, r19
    233e:	24 2b       	or	r18, r20
    2340:	21 8b       	std	Z+17, r18	; 0x11
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	fc 01       	movw	r30, r24
    2350:	e0 50       	subi	r30, 0x00	; 0
    2352:	fe 4d       	sbci	r31, 0xDE	; 222
    2354:	81 89       	ldd	r24, Z+17	; 0x11
    2356:	80 62       	ori	r24, 0x20	; 32
    2358:	81 8b       	std	Z+17, r24	; 0x11
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	08 95       	ret
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	08 95       	ret

00002362 <udd_ep_is_halted>:
    2362:	e8 2f       	mov	r30, r24
    2364:	ef 70       	andi	r30, 0x0F	; 15
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	08 2e       	mov	r0, r24
    236e:	00 0c       	add	r0, r0
    2370:	99 0b       	sbc	r25, r25
    2372:	88 27       	eor	r24, r24
    2374:	99 0f       	add	r25, r25
    2376:	88 1f       	adc	r24, r24
    2378:	99 27       	eor	r25, r25
    237a:	e8 0f       	add	r30, r24
    237c:	f9 1f       	adc	r31, r25
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	e0 50       	subi	r30, 0x00	; 0
    238c:	fe 4d       	sbci	r31, 0xDE	; 222
    238e:	81 89       	ldd	r24, Z+17	; 0x11
    2390:	82 fb       	bst	r24, 2
    2392:	88 27       	eor	r24, r24
    2394:	80 f9       	bld	r24, 0
    2396:	08 95       	ret

00002398 <udd_ep_clear_halt>:
    2398:	28 2f       	mov	r18, r24
    239a:	2f 70       	andi	r18, 0x0F	; 15
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	a9 01       	movw	r20, r18
    23a0:	44 0f       	add	r20, r20
    23a2:	55 1f       	adc	r21, r21
    23a4:	28 2f       	mov	r18, r24
    23a6:	08 2e       	mov	r0, r24
    23a8:	00 0c       	add	r0, r0
    23aa:	33 0b       	sbc	r19, r19
    23ac:	22 27       	eor	r18, r18
    23ae:	33 0f       	add	r19, r19
    23b0:	22 1f       	adc	r18, r18
    23b2:	33 27       	eor	r19, r19
    23b4:	24 0f       	add	r18, r20
    23b6:	35 1f       	adc	r19, r21
    23b8:	f9 01       	movw	r30, r18
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	e0 50       	subi	r30, 0x00	; 0
    23c8:	fe 4d       	sbci	r31, 0xDE	; 222
    23ca:	91 89       	ldd	r25, Z+17	; 0x11
    23cc:	92 ff       	sbrs	r25, 2
    23ce:	17 c0       	rjmp	.+46     	; 0x23fe <udd_ep_clear_halt+0x66>
    23d0:	22 0f       	add	r18, r18
    23d2:	33 1f       	adc	r19, r19
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	22 0f       	add	r18, r18
    23da:	33 1f       	adc	r19, r19
    23dc:	f9 01       	movw	r30, r18
    23de:	e0 50       	subi	r30, 0x00	; 0
    23e0:	fe 4d       	sbci	r31, 0xDE	; 222
    23e2:	91 89       	ldd	r25, Z+17	; 0x11
    23e4:	9b 7f       	andi	r25, 0xFB	; 251
    23e6:	91 8b       	std	Z+17, r25	; 0x11
    23e8:	ae dc       	rcall	.-1700   	; 0x1d46 <udd_ep_get_job>
    23ea:	fc 01       	movw	r30, r24
    23ec:	80 81       	ld	r24, Z
    23ee:	80 ff       	sbrs	r24, 0
    23f0:	06 c0       	rjmp	.+12     	; 0x23fe <udd_ep_clear_halt+0x66>
    23f2:	8e 7f       	andi	r24, 0xFE	; 254
    23f4:	80 83       	st	Z, r24
    23f6:	07 80       	ldd	r0, Z+7	; 0x07
    23f8:	f0 85       	ldd	r31, Z+8	; 0x08
    23fa:	e0 2d       	mov	r30, r0
    23fc:	09 95       	icall
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	08 95       	ret

00002402 <udd_ep_run>:
    2402:	7f 92       	push	r7
    2404:	8f 92       	push	r8
    2406:	9f 92       	push	r9
    2408:	af 92       	push	r10
    240a:	bf 92       	push	r11
    240c:	cf 92       	push	r12
    240e:	df 92       	push	r13
    2410:	ef 92       	push	r14
    2412:	ff 92       	push	r15
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	98 2e       	mov	r9, r24
    241e:	86 2e       	mov	r8, r22
    2420:	6a 01       	movw	r12, r20
    2422:	79 01       	movw	r14, r18
    2424:	90 dc       	rcall	.-1760   	; 0x1d46 <udd_ep_get_job>
    2426:	5c 01       	movw	r10, r24
    2428:	79 2c       	mov	r7, r9
    242a:	77 1c       	adc	r7, r7
    242c:	77 24       	eor	r7, r7
    242e:	77 1c       	adc	r7, r7
    2430:	c9 2d       	mov	r28, r9
    2432:	cf 70       	andi	r28, 0x0F	; 15
    2434:	d0 e0       	ldi	r29, 0x00	; 0
    2436:	cc 0f       	add	r28, r28
    2438:	dd 1f       	adc	r29, r29
    243a:	c7 0d       	add	r28, r7
    243c:	d1 1d       	adc	r29, r1
    243e:	fe 01       	movw	r30, r28
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	e0 50       	subi	r30, 0x00	; 0
    244e:	fe 4d       	sbci	r31, 0xDE	; 222
    2450:	81 89       	ldd	r24, Z+17	; 0x11
    2452:	80 7c       	andi	r24, 0xC0	; 192
    2454:	09 f4       	brne	.+2      	; 0x2458 <udd_ep_run+0x56>
    2456:	7d c0       	rjmp	.+250    	; 0x2552 <udd_ep_run+0x150>
    2458:	fe 01       	movw	r30, r28
    245a:	ee 0f       	add	r30, r30
    245c:	ff 1f       	adc	r31, r31
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	e0 50       	subi	r30, 0x00	; 0
    2468:	fe 4d       	sbci	r31, 0xDE	; 222
    246a:	81 89       	ldd	r24, Z+17	; 0x11
    246c:	80 7c       	andi	r24, 0xC0	; 192
    246e:	80 3c       	cpi	r24, 0xC0	; 192
    2470:	61 f0       	breq	.+24     	; 0x248a <udd_ep_run+0x88>
    2472:	fe 01       	movw	r30, r28
    2474:	ee 0f       	add	r30, r30
    2476:	ff 1f       	adc	r31, r31
    2478:	ee 0f       	add	r30, r30
    247a:	ff 1f       	adc	r31, r31
    247c:	ee 0f       	add	r30, r30
    247e:	ff 1f       	adc	r31, r31
    2480:	e0 50       	subi	r30, 0x00	; 0
    2482:	fe 4d       	sbci	r31, 0xDE	; 222
    2484:	81 89       	ldd	r24, Z+17	; 0x11
    2486:	82 fd       	sbrc	r24, 2
    2488:	66 c0       	rjmp	.+204    	; 0x2556 <udd_ep_run+0x154>
    248a:	8f b7       	in	r24, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	f5 01       	movw	r30, r10
    2490:	90 81       	ld	r25, Z
    2492:	90 ff       	sbrs	r25, 0
    2494:	03 c0       	rjmp	.+6      	; 0x249c <udd_ep_run+0x9a>
    2496:	8f bf       	out	0x3f, r24	; 63
    2498:	71 2c       	mov	r7, r1
    249a:	5e c0       	rjmp	.+188    	; 0x2558 <udd_ep_run+0x156>
    249c:	f5 01       	movw	r30, r10
    249e:	90 81       	ld	r25, Z
    24a0:	91 60       	ori	r25, 0x01	; 1
    24a2:	90 83       	st	Z, r25
    24a4:	8f bf       	out	0x3f, r24	; 63
    24a6:	c1 82       	std	Z+1, r12	; 0x01
    24a8:	d2 82       	std	Z+2, r13	; 0x02
    24aa:	e3 82       	std	Z+3, r14	; 0x03
    24ac:	f4 82       	std	Z+4, r15	; 0x04
    24ae:	15 82       	std	Z+5, r1	; 0x05
    24b0:	16 82       	std	Z+6, r1	; 0x06
    24b2:	07 83       	std	Z+7, r16	; 0x07
    24b4:	10 87       	std	Z+8, r17	; 0x08
    24b6:	81 10       	cpse	r8, r1
    24b8:	06 c0       	rjmp	.+12     	; 0x24c6 <udd_ep_run+0xc4>
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	e1 14       	cp	r14, r1
    24be:	f1 04       	cpc	r15, r1
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <udd_ep_run+0xc6>
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <udd_ep_run+0xc6>
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	f5 01       	movw	r30, r10
    24ca:	80 81       	ld	r24, Z
    24cc:	90 fb       	bst	r25, 0
    24ce:	81 f9       	bld	r24, 1
    24d0:	8b 7f       	andi	r24, 0xFB	; 251
    24d2:	80 83       	st	Z, r24
    24d4:	77 20       	and	r7, r7
    24d6:	59 f0       	breq	.+22     	; 0x24ee <udd_ep_run+0xec>
    24d8:	cc 0f       	add	r28, r28
    24da:	dd 1f       	adc	r29, r29
    24dc:	cc 0f       	add	r28, r28
    24de:	dd 1f       	adc	r29, r29
    24e0:	cc 0f       	add	r28, r28
    24e2:	dd 1f       	adc	r29, r29
    24e4:	c0 50       	subi	r28, 0x00	; 0
    24e6:	de 4d       	sbci	r29, 0xDE	; 222
    24e8:	1e 8a       	std	Y+22, r1	; 0x16
    24ea:	1f 8a       	std	Y+23, r1	; 0x17
    24ec:	2d c0       	rjmp	.+90     	; 0x2548 <udd_ep_run+0x146>
    24ee:	fe 01       	movw	r30, r28
    24f0:	ee 0f       	add	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	ee 0f       	add	r30, r30
    24f6:	ff 1f       	adc	r31, r31
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	e0 50       	subi	r30, 0x00	; 0
    24fe:	fe 4d       	sbci	r31, 0xDE	; 222
    2500:	81 89       	ldd	r24, Z+17	; 0x11
    2502:	80 7c       	andi	r24, 0xC0	; 192
    2504:	80 3c       	cpi	r24, 0xC0	; 192
    2506:	a1 f4       	brne	.+40     	; 0x2530 <udd_ep_run+0x12e>
    2508:	ce 01       	movw	r24, r28
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	80 5f       	subi	r24, 0xF0	; 240
    2518:	9d 4d       	sbci	r25, 0xDD	; 221
    251a:	ef db       	rcall	.-2082   	; 0x1cfa <udd_ep_get_size>
    251c:	bc 01       	movw	r22, r24
    251e:	c7 01       	movw	r24, r14
    2520:	60 d2       	rcall	.+1216   	; 0x29e2 <__udivmodhi4>
    2522:	89 2b       	or	r24, r25
    2524:	29 f0       	breq	.+10     	; 0x2530 <udd_ep_run+0x12e>
    2526:	f5 01       	movw	r30, r10
    2528:	80 81       	ld	r24, Z
    252a:	8e 7f       	andi	r24, 0xFE	; 254
    252c:	80 83       	st	Z, r24
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <udd_ep_run+0x156>
    2530:	cc 0f       	add	r28, r28
    2532:	dd 1f       	adc	r29, r29
    2534:	cc 0f       	add	r28, r28
    2536:	dd 1f       	adc	r29, r29
    2538:	cc 0f       	add	r28, r28
    253a:	dd 1f       	adc	r29, r29
    253c:	c0 50       	subi	r28, 0x00	; 0
    253e:	de 4d       	sbci	r29, 0xDE	; 222
    2540:	1a 8a       	std	Y+18, r1	; 0x12
    2542:	1b 8a       	std	Y+19, r1	; 0x13
    2544:	1e 8a       	std	Y+22, r1	; 0x16
    2546:	1f 8a       	std	Y+23, r1	; 0x17
    2548:	89 2d       	mov	r24, r9
    254a:	87 dc       	rcall	.-1778   	; 0x1e5a <udd_ep_trans_complet>
    254c:	77 24       	eor	r7, r7
    254e:	73 94       	inc	r7
    2550:	03 c0       	rjmp	.+6      	; 0x2558 <udd_ep_run+0x156>
    2552:	71 2c       	mov	r7, r1
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <udd_ep_run+0x156>
    2556:	71 2c       	mov	r7, r1
    2558:	87 2d       	mov	r24, r7
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
    256a:	bf 90       	pop	r11
    256c:	af 90       	pop	r10
    256e:	9f 90       	pop	r9
    2570:	8f 90       	pop	r8
    2572:	7f 90       	pop	r7
    2574:	08 95       	ret

00002576 <udd_ep_abort>:
    2576:	ff 92       	push	r15
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	18 2f       	mov	r17, r24
    2582:	f8 2e       	mov	r15, r24
    2584:	ff 1c       	adc	r15, r15
    2586:	ff 24       	eor	r15, r15
    2588:	ff 1c       	adc	r15, r15
    258a:	c8 2f       	mov	r28, r24
    258c:	cf 70       	andi	r28, 0x0F	; 15
    258e:	d0 e0       	ldi	r29, 0x00	; 0
    2590:	cc 0f       	add	r28, r28
    2592:	dd 1f       	adc	r29, r29
    2594:	cf 0d       	add	r28, r15
    2596:	d1 1d       	adc	r29, r1
    2598:	d6 db       	rcall	.-2132   	; 0x1d46 <udd_ep_get_job>
    259a:	dc 01       	movw	r26, r24
    259c:	fe 01       	movw	r30, r28
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	e0 5f       	subi	r30, 0xF0	; 240
    25ac:	fd 4d       	sbci	r31, 0xDD	; 221
    25ae:	02 e0       	ldi	r16, 0x02	; 2
    25b0:	05 93       	las	Z, r16
    25b2:	8c 91       	ld	r24, X
    25b4:	80 ff       	sbrs	r24, 0
    25b6:	22 c0       	rjmp	.+68     	; 0x25fc <udd_ep_abort+0x86>
    25b8:	8e 7f       	andi	r24, 0xFE	; 254
    25ba:	8c 93       	st	X, r24
    25bc:	17 96       	adiw	r26, 0x07	; 7
    25be:	ed 91       	ld	r30, X+
    25c0:	fc 91       	ld	r31, X
    25c2:	18 97       	sbiw	r26, 0x08	; 8
    25c4:	30 97       	sbiw	r30, 0x00	; 0
    25c6:	d1 f0       	breq	.+52     	; 0x25fc <udd_ep_abort+0x86>
    25c8:	ff 20       	and	r15, r15
    25ca:	59 f0       	breq	.+22     	; 0x25e2 <udd_ep_abort+0x6c>
    25cc:	cc 0f       	add	r28, r28
    25ce:	dd 1f       	adc	r29, r29
    25d0:	cc 0f       	add	r28, r28
    25d2:	dd 1f       	adc	r29, r29
    25d4:	cc 0f       	add	r28, r28
    25d6:	dd 1f       	adc	r29, r29
    25d8:	c0 50       	subi	r28, 0x00	; 0
    25da:	de 4d       	sbci	r29, 0xDE	; 222
    25dc:	6e 89       	ldd	r22, Y+22	; 0x16
    25de:	7f 89       	ldd	r23, Y+23	; 0x17
    25e0:	0a c0       	rjmp	.+20     	; 0x25f6 <udd_ep_abort+0x80>
    25e2:	cc 0f       	add	r28, r28
    25e4:	dd 1f       	adc	r29, r29
    25e6:	cc 0f       	add	r28, r28
    25e8:	dd 1f       	adc	r29, r29
    25ea:	cc 0f       	add	r28, r28
    25ec:	dd 1f       	adc	r29, r29
    25ee:	c0 50       	subi	r28, 0x00	; 0
    25f0:	de 4d       	sbci	r29, 0xDE	; 222
    25f2:	6a 89       	ldd	r22, Y+18	; 0x12
    25f4:	7b 89       	ldd	r23, Y+19	; 0x13
    25f6:	41 2f       	mov	r20, r17
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	09 95       	icall
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	ff 90       	pop	r15
    2606:	08 95       	ret

00002608 <udd_ep_free>:
    2608:	cf 93       	push	r28
    260a:	c8 2f       	mov	r28, r24
    260c:	b4 df       	rcall	.-152    	; 0x2576 <udd_ep_abort>
    260e:	ec 2f       	mov	r30, r28
    2610:	ef 70       	andi	r30, 0x0F	; 15
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	8c 2f       	mov	r24, r28
    261a:	cc 0f       	add	r28, r28
    261c:	99 0b       	sbc	r25, r25
    261e:	88 27       	eor	r24, r24
    2620:	99 0f       	add	r25, r25
    2622:	88 1f       	adc	r24, r24
    2624:	99 27       	eor	r25, r25
    2626:	e8 0f       	add	r30, r24
    2628:	f9 1f       	adc	r31, r25
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	ee 0f       	add	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	e0 50       	subi	r30, 0x00	; 0
    2638:	fe 4d       	sbci	r31, 0xDE	; 222
    263a:	11 8a       	std	Z+17, r1	; 0x11
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <udd_ep_set_halt>:
    2640:	0f 93       	push	r16
    2642:	e8 2f       	mov	r30, r24
    2644:	ef 70       	andi	r30, 0x0F	; 15
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	ee 0f       	add	r30, r30
    264a:	ff 1f       	adc	r31, r31
    264c:	28 2f       	mov	r18, r24
    264e:	08 2e       	mov	r0, r24
    2650:	00 0c       	add	r0, r0
    2652:	33 0b       	sbc	r19, r19
    2654:	22 27       	eor	r18, r18
    2656:	33 0f       	add	r19, r19
    2658:	22 1f       	adc	r18, r18
    265a:	33 27       	eor	r19, r19
    265c:	e2 0f       	add	r30, r18
    265e:	f3 1f       	adc	r31, r19
    2660:	df 01       	movw	r26, r30
    2662:	aa 0f       	add	r26, r26
    2664:	bb 1f       	adc	r27, r27
    2666:	aa 0f       	add	r26, r26
    2668:	bb 1f       	adc	r27, r27
    266a:	aa 0f       	add	r26, r26
    266c:	bb 1f       	adc	r27, r27
    266e:	a0 50       	subi	r26, 0x00	; 0
    2670:	be 4d       	sbci	r27, 0xDE	; 222
    2672:	51 96       	adiw	r26, 0x11	; 17
    2674:	9c 91       	ld	r25, X
    2676:	51 97       	sbiw	r26, 0x11	; 17
    2678:	94 60       	ori	r25, 0x04	; 4
    267a:	51 96       	adiw	r26, 0x11	; 17
    267c:	9c 93       	st	X, r25
    267e:	ee 0f       	add	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	e0 5f       	subi	r30, 0xF0	; 240
    268c:	fd 4d       	sbci	r31, 0xDD	; 221
    268e:	01 e0       	ldi	r16, 0x01	; 1
    2690:	06 93       	lac	Z, r16
    2692:	71 df       	rcall	.-286    	; 0x2576 <udd_ep_abort>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	0f 91       	pop	r16
    2698:	08 95       	ret

0000269a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    269a:	1f 92       	push	r1
    269c:	0f 92       	push	r0
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	0f 92       	push	r0
    26a2:	11 24       	eor	r1, r1
    26a4:	0f 93       	push	r16
    26a6:	2f 93       	push	r18
    26a8:	3f 93       	push	r19
    26aa:	4f 93       	push	r20
    26ac:	5f 93       	push	r21
    26ae:	6f 93       	push	r22
    26b0:	7f 93       	push	r23
    26b2:	8f 93       	push	r24
    26b4:	9f 93       	push	r25
    26b6:	af 93       	push	r26
    26b8:	bf 93       	push	r27
    26ba:	ef 93       	push	r30
    26bc:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    26be:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26c2:	88 23       	and	r24, r24
    26c4:	44 f4       	brge	.+16     	; 0x26d6 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    26c6:	80 e8       	ldi	r24, 0x80	; 128
    26c8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    26cc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    26d0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    26d4:	8a c0       	rjmp	.+276    	; 0x27ea <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    26d6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26da:	82 ff       	sbrs	r24, 2
    26dc:	20 c0       	rjmp	.+64     	; 0x271e <__vector_125+0x84>
		udd_ack_underflow_event();
    26de:	84 e0       	ldi	r24, 0x04	; 4
    26e0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    26e4:	80 91 18 22 	lds	r24, 0x2218	; 0x802218 <udd_sram+0x18>
    26e8:	86 ff       	sbrs	r24, 6
    26ea:	7f c0       	rjmp	.+254    	; 0x27ea <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26ec:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    26f0:	81 fd       	sbrc	r24, 1
    26f2:	7b c0       	rjmp	.+246    	; 0x27ea <__vector_125+0x150>
    26f4:	43 db       	rcall	.-2426   	; 0x1d7c <udd_ctrl_interrupt_tc_setup>
    26f6:	81 11       	cpse	r24, r1
    26f8:	78 c0       	rjmp	.+240    	; 0x27ea <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    26fa:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	11 f4       	brne	.+4      	; 0x2706 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2702:	79 da       	rcall	.-2830   	; 0x1bf6 <udd_ctrl_send_zlp_in>
    2704:	72 c0       	rjmp	.+228    	; 0x27ea <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2706:	84 30       	cpi	r24, 0x04	; 4
    2708:	09 f0       	breq	.+2      	; 0x270c <__vector_125+0x72>
    270a:	6f c0       	rjmp	.+222    	; 0x27ea <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    270c:	e9 e1       	ldi	r30, 0x19	; 25
    270e:	f2 e2       	ldi	r31, 0x22	; 34
    2710:	04 e0       	ldi	r16, 0x04	; 4
    2712:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2714:	e1 e1       	ldi	r30, 0x11	; 17
    2716:	f2 e2       	ldi	r31, 0x22	; 34
    2718:	04 e0       	ldi	r16, 0x04	; 4
    271a:	05 93       	las	Z, r16
    271c:	66 c0       	rjmp	.+204    	; 0x27ea <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    271e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2722:	81 ff       	sbrs	r24, 1
    2724:	5d c0       	rjmp	.+186    	; 0x27e0 <__vector_125+0x146>
		udd_ack_overflow_event();
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    272c:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udd_sram+0x10>
    2730:	86 ff       	sbrs	r24, 6
    2732:	5b c0       	rjmp	.+182    	; 0x27ea <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2734:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2738:	81 fd       	sbrc	r24, 1
    273a:	57 c0       	rjmp	.+174    	; 0x27ea <__vector_125+0x150>
    273c:	1f db       	rcall	.-2498   	; 0x1d7c <udd_ctrl_interrupt_tc_setup>
    273e:	81 11       	cpse	r24, r1
    2740:	54 c0       	rjmp	.+168    	; 0x27ea <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2742:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    2746:	82 30       	cpi	r24, 0x02	; 2
    2748:	41 f4       	brne	.+16     	; 0x275a <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    274a:	84 e0       	ldi	r24, 0x04	; 4
    274c:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2750:	e0 e1       	ldi	r30, 0x10	; 16
    2752:	f2 e2       	ldi	r31, 0x22	; 34
    2754:	02 e0       	ldi	r16, 0x02	; 2
    2756:	06 93       	lac	Z, r16
    2758:	48 c0       	rjmp	.+144    	; 0x27ea <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    275a:	83 30       	cpi	r24, 0x03	; 3
    275c:	09 f0       	breq	.+2      	; 0x2760 <__vector_125+0xc6>
    275e:	45 c0       	rjmp	.+138    	; 0x27ea <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2760:	e9 e1       	ldi	r30, 0x19	; 25
    2762:	f2 e2       	ldi	r31, 0x22	; 34
    2764:	04 e0       	ldi	r16, 0x04	; 4
    2766:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2768:	e1 e1       	ldi	r30, 0x11	; 17
    276a:	f2 e2       	ldi	r31, 0x22	; 34
    276c:	04 e0       	ldi	r16, 0x04	; 4
    276e:	05 93       	las	Z, r16
    2770:	3c c0       	rjmp	.+120    	; 0x27ea <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2772:	80 e1       	ldi	r24, 0x10	; 16
    2774:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	fd de       	rcall	.-518    	; 0x2576 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    277c:	81 e8       	ldi	r24, 0x81	; 129
    277e:	fb de       	rcall	.-522    	; 0x2576 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	f9 de       	rcall	.-526    	; 0x2576 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2784:	82 e8       	ldi	r24, 0x82	; 130
    2786:	f7 de       	rcall	.-530    	; 0x2576 <udd_ep_abort>
		}
#endif
		udc_reset();
    2788:	0e 94 b6 09 	call	0x136c	; 0x136c <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    278c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2790:	e0 e0       	ldi	r30, 0x00	; 0
    2792:	f2 e2       	ldi	r31, 0x22	; 34
    2794:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2796:	96 e0       	ldi	r25, 0x06	; 6
    2798:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    279a:	83 e4       	ldi	r24, 0x43	; 67
    279c:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    279e:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    27a0:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    27a2:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    27a4:	8b eb       	ldi	r24, 0xBB	; 187
    27a6:	91 e2       	ldi	r25, 0x21	; 33
    27a8:	84 8b       	std	Z+20, r24	; 0x14
    27aa:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    27ac:	ef d9       	rcall	.-3106   	; 0x1b8c <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    27ae:	1d c0       	rjmp	.+58     	; 0x27ea <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    27b0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27b4:	86 ff       	sbrs	r24, 6
    27b6:	08 c0       	rjmp	.+16     	; 0x27c8 <__vector_125+0x12e>
		udd_ack_suspend_event();
    27b8:	80 e4       	ldi	r24, 0x40	; 64
    27ba:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	bc d9       	rcall	.-3208   	; 0x1b3a <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    27c2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    27c6:	11 c0       	rjmp	.+34     	; 0x27ea <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    27c8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27cc:	85 ff       	sbrs	r24, 5
    27ce:	0d c0       	rjmp	.+26     	; 0x27ea <__vector_125+0x150>
		udd_ack_resume_event();
    27d0:	80 e2       	ldi	r24, 0x20	; 32
    27d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	b0 d9       	rcall	.-3232   	; 0x1b3a <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    27da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    27e0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27e4:	84 fd       	sbrc	r24, 4
    27e6:	c5 cf       	rjmp	.-118    	; 0x2772 <__vector_125+0xd8>
    27e8:	e3 cf       	rjmp	.-58     	; 0x27b0 <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    27ea:	ff 91       	pop	r31
    27ec:	ef 91       	pop	r30
    27ee:	bf 91       	pop	r27
    27f0:	af 91       	pop	r26
    27f2:	9f 91       	pop	r25
    27f4:	8f 91       	pop	r24
    27f6:	7f 91       	pop	r23
    27f8:	6f 91       	pop	r22
    27fa:	5f 91       	pop	r21
    27fc:	4f 91       	pop	r20
    27fe:	3f 91       	pop	r19
    2800:	2f 91       	pop	r18
    2802:	0f 91       	pop	r16
    2804:	0f 90       	pop	r0
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	0f 90       	pop	r0
    280a:	1f 90       	pop	r1
    280c:	18 95       	reti

0000280e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    280e:	1f 92       	push	r1
    2810:	0f 92       	push	r0
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	0f 92       	push	r0
    2816:	11 24       	eor	r1, r1
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	2f 93       	push	r18
    281e:	3f 93       	push	r19
    2820:	4f 93       	push	r20
    2822:	5f 93       	push	r21
    2824:	6f 93       	push	r22
    2826:	7f 93       	push	r23
    2828:	8f 93       	push	r24
    282a:	9f 93       	push	r25
    282c:	af 93       	push	r26
    282e:	bf 93       	push	r27
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	ef 93       	push	r30
    2836:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2838:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    283c:	81 fd       	sbrc	r24, 1
    283e:	03 c0       	rjmp	.+6      	; 0x2846 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2840:	9d da       	rcall	.-2758   	; 0x1d7c <udd_ctrl_interrupt_tc_setup>
    2842:	81 11       	cpse	r24, r1
    2844:	b9 c0       	rjmp	.+370    	; 0x29b8 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    284c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2850:	81 95       	neg	r24
    2852:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2854:	e0 e1       	ldi	r30, 0x10	; 16
    2856:	f2 e2       	ldi	r31, 0x22	; 34
    2858:	e8 1b       	sub	r30, r24
    285a:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    285c:	20 81       	ld	r18, Z
    285e:	31 81       	ldd	r19, Z+1	; 0x01
    2860:	20 51       	subi	r18, 0x10	; 16
    2862:	32 42       	sbci	r19, 0x22	; 34
    2864:	36 95       	lsr	r19
    2866:	27 95       	ror	r18
    2868:	36 95       	lsr	r19
    286a:	27 95       	ror	r18
    286c:	36 95       	lsr	r19
    286e:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2870:	82 2f       	mov	r24, r18
    2872:	86 95       	lsr	r24
    2874:	20 fd       	sbrc	r18, 0
    2876:	02 c0       	rjmp	.+4      	; 0x287c <__vector_126+0x6e>
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	01 c0       	rjmp	.+2      	; 0x287e <__vector_126+0x70>
    287c:	90 e8       	ldi	r25, 0x80	; 128
    287e:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2880:	e8 2f       	mov	r30, r24
    2882:	ef 70       	andi	r30, 0x0F	; 15
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    288a:	28 2f       	mov	r18, r24
    288c:	08 2e       	mov	r0, r24
    288e:	00 0c       	add	r0, r0
    2890:	33 0b       	sbc	r19, r19
    2892:	22 27       	eor	r18, r18
    2894:	33 0f       	add	r19, r19
    2896:	22 1f       	adc	r18, r18
    2898:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    289a:	e2 0f       	add	r30, r18
    289c:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    289e:	df 01       	movw	r26, r30
    28a0:	aa 0f       	add	r26, r26
    28a2:	bb 1f       	adc	r27, r27
    28a4:	aa 0f       	add	r26, r26
    28a6:	bb 1f       	adc	r27, r27
    28a8:	aa 0f       	add	r26, r26
    28aa:	bb 1f       	adc	r27, r27
    28ac:	a0 5f       	subi	r26, 0xF0	; 240
    28ae:	bd 4d       	sbci	r27, 0xDD	; 221
    28b0:	9c 91       	ld	r25, X
    28b2:	95 ff       	sbrs	r25, 5
    28b4:	81 c0       	rjmp	.+258    	; 0x29b8 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    28b6:	fd 01       	movw	r30, r26
    28b8:	00 e2       	ldi	r16, 0x20	; 32
    28ba:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    28bc:	81 11       	cpse	r24, r1
    28be:	77 c0       	rjmp	.+238    	; 0x29ae <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    28c0:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ep_control_state>
    28c4:	84 30       	cpi	r24, 0x04	; 4
    28c6:	19 f4       	brne	.+6      	; 0x28ce <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    28c8:	a4 d9       	rcall	.-3256   	; 0x1c12 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    28ca:	60 d9       	rcall	.-3392   	; 0x1b8c <udd_ctrl_init>
    28cc:	75 c0       	rjmp	.+234    	; 0x29b8 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    28ce:	00 91 12 22 	lds	r16, 0x2212	; 0x802212 <udd_sram+0x12>
    28d2:	10 91 13 22 	lds	r17, 0x2213	; 0x802213 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    28d6:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0xa>
    28da:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0xb>
    28de:	c0 91 fb 21 	lds	r28, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    28e2:	d0 91 fc 21 	lds	r29, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    28e6:	9e 01       	movw	r18, r28
    28e8:	20 0f       	add	r18, r16
    28ea:	31 1f       	adc	r19, r17
    28ec:	82 17       	cp	r24, r18
    28ee:	93 07       	cpc	r25, r19
    28f0:	18 f4       	brcc	.+6      	; 0x28f8 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    28f2:	8c 01       	movw	r16, r24
    28f4:	0c 1b       	sub	r16, r28
    28f6:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    28f8:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x8>
    28fc:	90 91 68 24 	lds	r25, 0x2468	; 0x802468 <udd_g_ctrlreq+0x9>
    2900:	a8 01       	movw	r20, r16
    2902:	6b eb       	ldi	r22, 0xBB	; 187
    2904:	71 e2       	ldi	r23, 0x21	; 33
    2906:	8c 0f       	add	r24, r28
    2908:	9d 1f       	adc	r25, r29
    290a:	85 d0       	rcall	.+266    	; 0x2a16 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    290c:	c0 0f       	add	r28, r16
    290e:	d1 1f       	adc	r29, r17
    2910:	c0 93 fb 21 	sts	0x21FB, r28	; 0x8021fb <udd_ctrl_payload_nb_trans>
    2914:	d0 93 fc 21 	sts	0x21FC, r29	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2918:	00 34       	cpi	r16, 0x40	; 64
    291a:	11 05       	cpc	r17, r1
    291c:	69 f4       	brne	.+26     	; 0x2938 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    291e:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2922:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    2926:	8c 0f       	add	r24, r28
    2928:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    292a:	20 91 65 24 	lds	r18, 0x2465	; 0x802465 <udd_g_ctrlreq+0x6>
    292e:	30 91 66 24 	lds	r19, 0x2466	; 0x802466 <udd_g_ctrlreq+0x7>
    2932:	82 17       	cp	r24, r18
    2934:	93 07       	cpc	r25, r19
    2936:	80 f0       	brcs	.+32     	; 0x2958 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2938:	ef e5       	ldi	r30, 0x5F	; 95
    293a:	f4 e2       	ldi	r31, 0x24	; 36
    293c:	c2 87       	std	Z+10, r28	; 0x0a
    293e:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2940:	06 84       	ldd	r0, Z+14	; 0x0e
    2942:	f7 85       	ldd	r31, Z+15	; 0x0f
    2944:	e0 2d       	mov	r30, r0
    2946:	30 97       	sbiw	r30, 0x00	; 0
    2948:	29 f0       	breq	.+10     	; 0x2954 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    294a:	09 95       	icall
    294c:	81 11       	cpse	r24, r1
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2950:	44 d9       	rcall	.-3448   	; 0x1bda <udd_ctrl_stall_data>
    2952:	32 c0       	rjmp	.+100    	; 0x29b8 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2954:	50 d9       	rcall	.-3424   	; 0x1bf6 <udd_ctrl_send_zlp_in>
    2956:	30 c0       	rjmp	.+96     	; 0x29b8 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2958:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0xa>
    295c:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udd_g_ctrlreq+0xb>
    2960:	c8 17       	cp	r28, r24
    2962:	d9 07       	cpc	r29, r25
    2964:	f9 f4       	brne	.+62     	; 0x29a4 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2966:	e0 91 6d 24 	lds	r30, 0x246D	; 0x80246d <udd_g_ctrlreq+0xe>
    296a:	f0 91 6e 24 	lds	r31, 0x246E	; 0x80246e <udd_g_ctrlreq+0xf>
    296e:	30 97       	sbiw	r30, 0x00	; 0
    2970:	11 f4       	brne	.+4      	; 0x2976 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2972:	33 d9       	rcall	.-3482   	; 0x1bda <udd_ctrl_stall_data>
    2974:	21 c0       	rjmp	.+66     	; 0x29b8 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2976:	09 95       	icall
    2978:	81 11       	cpse	r24, r1
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    297c:	2e d9       	rcall	.-3492   	; 0x1bda <udd_ctrl_stall_data>
    297e:	1c c0       	rjmp	.+56     	; 0x29b8 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2980:	20 91 fd 21 	lds	r18, 0x21FD	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2984:	30 91 fe 21 	lds	r19, 0x21FE	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
    2988:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <udd_ctrl_payload_nb_trans>
    298c:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
    2990:	82 0f       	add	r24, r18
    2992:	93 1f       	adc	r25, r19
    2994:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <udd_ctrl_prev_payload_nb_trans>
    2998:	90 93 fe 21 	sts	0x21FE, r25	; 0x8021fe <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    299c:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <udd_ctrl_payload_nb_trans>
    29a0:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    29a4:	e0 e1       	ldi	r30, 0x10	; 16
    29a6:	f2 e2       	ldi	r31, 0x22	; 34
    29a8:	02 e0       	ldi	r16, 0x02	; 2
    29aa:	06 93       	lac	Z, r16
    29ac:	05 c0       	rjmp	.+10     	; 0x29b8 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    29ae:	80 38       	cpi	r24, 0x80	; 128
    29b0:	11 f4       	brne	.+4      	; 0x29b6 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    29b2:	37 d9       	rcall	.-3474   	; 0x1c22 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    29b6:	51 da       	rcall	.-2910   	; 0x1e5a <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    29b8:	ff 91       	pop	r31
    29ba:	ef 91       	pop	r30
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	7f 91       	pop	r23
    29ca:	6f 91       	pop	r22
    29cc:	5f 91       	pop	r21
    29ce:	4f 91       	pop	r20
    29d0:	3f 91       	pop	r19
    29d2:	2f 91       	pop	r18
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	0f 90       	pop	r0
    29de:	1f 90       	pop	r1
    29e0:	18 95       	reti

000029e2 <__udivmodhi4>:
    29e2:	aa 1b       	sub	r26, r26
    29e4:	bb 1b       	sub	r27, r27
    29e6:	51 e1       	ldi	r21, 0x11	; 17
    29e8:	07 c0       	rjmp	.+14     	; 0x29f8 <__udivmodhi4_ep>

000029ea <__udivmodhi4_loop>:
    29ea:	aa 1f       	adc	r26, r26
    29ec:	bb 1f       	adc	r27, r27
    29ee:	a6 17       	cp	r26, r22
    29f0:	b7 07       	cpc	r27, r23
    29f2:	10 f0       	brcs	.+4      	; 0x29f8 <__udivmodhi4_ep>
    29f4:	a6 1b       	sub	r26, r22
    29f6:	b7 0b       	sbc	r27, r23

000029f8 <__udivmodhi4_ep>:
    29f8:	88 1f       	adc	r24, r24
    29fa:	99 1f       	adc	r25, r25
    29fc:	5a 95       	dec	r21
    29fe:	a9 f7       	brne	.-22     	; 0x29ea <__udivmodhi4_loop>
    2a00:	80 95       	com	r24
    2a02:	90 95       	com	r25
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	08 95       	ret

00002a0a <__tablejump2__>:
    2a0a:	ee 0f       	add	r30, r30
    2a0c:	ff 1f       	adc	r31, r31
    2a0e:	05 90       	lpm	r0, Z+
    2a10:	f4 91       	lpm	r31, Z
    2a12:	e0 2d       	mov	r30, r0
    2a14:	09 94       	ijmp

00002a16 <memcpy>:
    2a16:	fb 01       	movw	r30, r22
    2a18:	dc 01       	movw	r26, r24
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <memcpy+0xa>
    2a1c:	01 90       	ld	r0, Z+
    2a1e:	0d 92       	st	X+, r0
    2a20:	41 50       	subi	r20, 0x01	; 1
    2a22:	50 40       	sbci	r21, 0x00	; 0
    2a24:	d8 f7       	brcc	.-10     	; 0x2a1c <memcpy+0x6>
    2a26:	08 95       	ret

00002a28 <_exit>:
    2a28:	f8 94       	cli

00002a2a <__stop_program>:
    2a2a:	ff cf       	rjmp	.-2      	; 0x2a2a <__stop_program>
