
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00802000  00002f90  00003024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b44  0080208c  0080208c  000030b0  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00003120  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dc49  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024be  00000000  00000000  00011369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ac81  00000000  00000000  00013827  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f28  00000000  00000000  0001e4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030168  00000000  00000000  0001f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037be  00000000  00000000  0004f538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00052cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c3d5  00000000  00000000  00053210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_6>
      1c:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_7>
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c1       	rjmp	.+586    	; 0x274 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c1       	rjmp	.+534    	; 0x274 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_24>
      64:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_25>
      68:	05 c1       	rjmp	.+522    	; 0x274 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop
      98:	ed c0       	rjmp	.+474    	; 0x274 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	eb c0       	rjmp	.+470    	; 0x274 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e9 c0       	rjmp	.+466    	; 0x274 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e7 c0       	rjmp	.+462    	; 0x274 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e5 c0       	rjmp	.+458    	; 0x274 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e3 c0       	rjmp	.+454    	; 0x274 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e1 c0       	rjmp	.+450    	; 0x274 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	df c0       	rjmp	.+446    	; 0x274 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dd c0       	rjmp	.+442    	; 0x274 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c0       	rjmp	.+438    	; 0x274 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d9 c0       	rjmp	.+434    	; 0x274 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d7 c0       	rjmp	.+430    	; 0x274 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d5 c0       	rjmp	.+426    	; 0x274 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d3 c0       	rjmp	.+422    	; 0x274 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d1 c0       	rjmp	.+418    	; 0x274 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cf c0       	rjmp	.+414    	; 0x274 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cd c0       	rjmp	.+410    	; 0x274 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cb c0       	rjmp	.+406    	; 0x274 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c9 c0       	rjmp	.+402    	; 0x274 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c7 c0       	rjmp	.+398    	; 0x274 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c5 c0       	rjmp	.+394    	; 0x274 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c3 c0       	rjmp	.+390    	; 0x274 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c1 c0       	rjmp	.+386    	; 0x274 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bf c0       	rjmp	.+382    	; 0x274 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	bd c0       	rjmp	.+378    	; 0x274 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	bb c0       	rjmp	.+374    	; 0x274 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b9 c0       	rjmp	.+370    	; 0x274 <__bad_interrupt>
     102:	00 00       	nop
     104:	b7 c0       	rjmp	.+366    	; 0x274 <__bad_interrupt>
     106:	00 00       	nop
     108:	b5 c0       	rjmp	.+362    	; 0x274 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b3 c0       	rjmp	.+358    	; 0x274 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b1 c0       	rjmp	.+354    	; 0x274 <__bad_interrupt>
     112:	00 00       	nop
     114:	af c0       	rjmp	.+350    	; 0x274 <__bad_interrupt>
     116:	00 00       	nop
     118:	ad c0       	rjmp	.+346    	; 0x274 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c4       	rjmp	.+2482   	; 0xad0 <__vector_71>
     11e:	00 00       	nop
     120:	a9 c0       	rjmp	.+338    	; 0x274 <__bad_interrupt>
     122:	00 00       	nop
     124:	a7 c0       	rjmp	.+334    	; 0x274 <__bad_interrupt>
     126:	00 00       	nop
     128:	a5 c0       	rjmp	.+330    	; 0x274 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a3 c0       	rjmp	.+326    	; 0x274 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a1 c0       	rjmp	.+322    	; 0x274 <__bad_interrupt>
     132:	00 00       	nop
     134:	9f c0       	rjmp	.+318    	; 0x274 <__bad_interrupt>
     136:	00 00       	nop
     138:	9d c0       	rjmp	.+314    	; 0x274 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	9b c0       	rjmp	.+310    	; 0x274 <__bad_interrupt>
     13e:	00 00       	nop
     140:	99 c0       	rjmp	.+306    	; 0x274 <__bad_interrupt>
     142:	00 00       	nop
     144:	97 c0       	rjmp	.+302    	; 0x274 <__bad_interrupt>
     146:	00 00       	nop
     148:	95 c0       	rjmp	.+298    	; 0x274 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__vector_83>
     150:	91 c0       	rjmp	.+290    	; 0x274 <__bad_interrupt>
     152:	00 00       	nop
     154:	8f c0       	rjmp	.+286    	; 0x274 <__bad_interrupt>
     156:	00 00       	nop
     158:	8d c0       	rjmp	.+282    	; 0x274 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	8b c0       	rjmp	.+278    	; 0x274 <__bad_interrupt>
     15e:	00 00       	nop
     160:	89 c0       	rjmp	.+274    	; 0x274 <__bad_interrupt>
     162:	00 00       	nop
     164:	87 c0       	rjmp	.+270    	; 0x274 <__bad_interrupt>
     166:	00 00       	nop
     168:	85 c0       	rjmp	.+266    	; 0x274 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	83 c0       	rjmp	.+262    	; 0x274 <__bad_interrupt>
     16e:	00 00       	nop
     170:	81 c0       	rjmp	.+258    	; 0x274 <__bad_interrupt>
     172:	00 00       	nop
     174:	7f c0       	rjmp	.+254    	; 0x274 <__bad_interrupt>
     176:	00 00       	nop
     178:	7d c0       	rjmp	.+250    	; 0x274 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	7b c0       	rjmp	.+246    	; 0x274 <__bad_interrupt>
     17e:	00 00       	nop
     180:	79 c0       	rjmp	.+242    	; 0x274 <__bad_interrupt>
     182:	00 00       	nop
     184:	77 c0       	rjmp	.+238    	; 0x274 <__bad_interrupt>
     186:	00 00       	nop
     188:	75 c0       	rjmp	.+234    	; 0x274 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	73 c0       	rjmp	.+230    	; 0x274 <__bad_interrupt>
     18e:	00 00       	nop
     190:	71 c0       	rjmp	.+226    	; 0x274 <__bad_interrupt>
     192:	00 00       	nop
     194:	6f c0       	rjmp	.+222    	; 0x274 <__bad_interrupt>
     196:	00 00       	nop
     198:	6d c0       	rjmp	.+218    	; 0x274 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	6b c0       	rjmp	.+214    	; 0x274 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	69 c0       	rjmp	.+210    	; 0x274 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	67 c0       	rjmp	.+206    	; 0x274 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	65 c0       	rjmp	.+202    	; 0x274 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	63 c0       	rjmp	.+198    	; 0x274 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5f c0       	rjmp	.+190    	; 0x274 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5d c0       	rjmp	.+186    	; 0x274 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	5b c0       	rjmp	.+182    	; 0x274 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	59 c0       	rjmp	.+178    	; 0x274 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	57 c0       	rjmp	.+174    	; 0x274 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	55 c0       	rjmp	.+170    	; 0x274 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	53 c0       	rjmp	.+166    	; 0x274 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	51 c0       	rjmp	.+162    	; 0x274 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4f c0       	rjmp	.+158    	; 0x274 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4d c0       	rjmp	.+154    	; 0x274 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	4b c0       	rjmp	.+150    	; 0x274 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	49 c0       	rjmp	.+146    	; 0x274 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	47 c0       	rjmp	.+142    	; 0x274 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	45 c0       	rjmp	.+138    	; 0x274 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	43 c0       	rjmp	.+134    	; 0x274 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	41 c0       	rjmp	.+130    	; 0x274 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__vector_125>
     1f8:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__vector_126>
     1fc:	31 04       	cpc	r3, r1
     1fe:	33 04       	cpc	r3, r3
     200:	35 04       	cpc	r3, r5
     202:	37 04       	cpc	r3, r7
     204:	39 04       	cpc	r3, r9
     206:	3b 04       	cpc	r3, r11
     208:	3d 04       	cpc	r3, r13
     20a:	3f 04       	cpc	r3, r15
     20c:	8b 0c       	add	r8, r11
     20e:	b0 0c       	add	r11, r0
     210:	d3 0c       	add	r13, r3
     212:	f6 0c       	add	r15, r6
     214:	ff 0c       	add	r15, r15
     216:	04 0d       	add	r16, r4
     218:	5a 0d       	add	r21, r10
     21a:	5f 0d       	add	r21, r15
     21c:	7e 0d       	add	r23, r14
     21e:	10 0d       	add	r17, r0
     220:	1a 0d       	add	r17, r10
     222:	24 0d       	add	r18, r4
     224:	32 0d       	add	r19, r2
     226:	35 0d       	add	r19, r5
     228:	38 0d       	add	r19, r8
     22a:	43 0d       	add	r20, r3
     22c:	4e 0d       	add	r20, r14
     22e:	50 11       	cpse	r21, r0
     230:	53 11       	cpse	r21, r3
     232:	56 11       	cpse	r21, r6
     234:	59 11       	cpse	r21, r9
     236:	5c 11       	cpse	r21, r12
     238:	5f 11       	cpse	r21, r15
     23a:	62 11       	cpse	r22, r2

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df e2       	ldi	r29, 0x2F	; 47
     246:	de bf       	out	0x3e, r29	; 62

00000248 <__do_copy_data>:
     248:	10 e2       	ldi	r17, 0x20	; 32
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	e0 e9       	ldi	r30, 0x90	; 144
     250:	ff e2       	ldi	r31, 0x2F	; 47
     252:	02 c0       	rjmp	.+4      	; 0x258 <__do_copy_data+0x10>
     254:	05 90       	lpm	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	ac 38       	cpi	r26, 0x8C	; 140
     25a:	b1 07       	cpc	r27, r17
     25c:	d9 f7       	brne	.-10     	; 0x254 <__do_copy_data+0xc>

0000025e <__do_clear_bss>:
     25e:	2b e2       	ldi	r18, 0x2B	; 43
     260:	ac e8       	ldi	r26, 0x8C	; 140
     262:	b0 e2       	ldi	r27, 0x20	; 32
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a0 3d       	cpi	r26, 0xD0	; 208
     26a:	b2 07       	cpc	r27, r18
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>
     26e:	ac d2       	rcall	.+1368   	; 0x7c8 <main>
     270:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <_exit>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	8e 83       	std	Y+6, r24	; 0x06
     282:	8c e1       	ldi	r24, 0x1C	; 28
     284:	df d3       	rcall	.+1982   	; 0xa44 <ReadCalibrationByte>
     286:	e0 e6       	ldi	r30, 0x60	; 96
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	83 83       	std	Z+3, r24	; 0x03
     28c:	8b eb       	ldi	r24, 0xBB	; 187
     28e:	86 83       	std	Z+6, r24	; 0x06
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	85 83       	std	Z+5, r24	; 0x05
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	88 ed       	ldi	r24, 0xD8	; 216
     29a:	84 bf       	out	0x34, r24	; 52
     29c:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	88 83       	st	Y, r24
     2a4:	e0 e5       	ldi	r30, 0x50	; 80
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	81 81       	ldd	r24, Z+1	; 0x01
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	e9 f7       	brne	.-6      	; 0x2a8 <tiny_calibration_init+0x32>
     2ae:	e0 e5       	ldi	r30, 0x50	; 80
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	80 83       	st	Z, r24
     2b8:	88 e1       	ldi	r24, 0x18	; 24
     2ba:	85 83       	std	Z+5, r24	; 0x05
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	80 ff       	sbrs	r24, 0
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <tiny_calibration_init+0x46>
     2c2:	e0 e5       	ldi	r30, 0x50	; 80
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 83       	st	Z, r24
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	84 ff       	sbrs	r24, 4
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x56>
     2d2:	88 ed       	ldi	r24, 0xD8	; 216
     2d4:	84 bf       	out	0x34, r24	; 52
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <tiny_calibration_first_sof>:
     2e2:	e0 e7       	ldi	r30, 0x70	; 112
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	85 81       	ldd	r24, Z+5	; 0x05
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	85 83       	std	Z+5, r24	; 0x05
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	8f eb       	ldi	r24, 0xBF	; 191
     2f2:	9d e5       	ldi	r25, 0x5D	; 93
     2f4:	86 a3       	std	Z+38, r24	; 0x26
     2f6:	97 a3       	std	Z+39, r25	; 0x27
     2f8:	80 ee       	ldi	r24, 0xE0	; 224
     2fa:	9e e2       	ldi	r25, 0x2E	; 46
     2fc:	80 a3       	std	Z+32, r24	; 0x20
     2fe:	91 a3       	std	Z+33, r25	; 0x21
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
     304:	08 95       	ret

00000306 <tiny_calibration_maintain>:
     306:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     30a:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     30e:	81 3e       	cpi	r24, 0xE1	; 225
     310:	2e e2       	ldi	r18, 0x2E	; 46
     312:	92 07       	cpc	r25, r18
     314:	20 f0       	brcs	.+8      	; 0x31e <tiny_calibration_maintain+0x18>
     316:	20 91 72 21 	lds	r18, 0x2172	; 0x802172 <cali_value_negative_gradient>
     31a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     31e:	80 3e       	cpi	r24, 0xE0	; 224
     320:	2e e2       	ldi	r18, 0x2E	; 46
     322:	92 07       	cpc	r25, r18
     324:	20 f4       	brcc	.+8      	; 0x32e <tiny_calibration_maintain+0x28>
     326:	20 91 6f 21 	lds	r18, 0x216F	; 0x80216f <cali_value_positive_gradient>
     32a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     32e:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     332:	22 23       	and	r18, r18
     334:	31 f0       	breq	.+12     	; 0x342 <tiny_calibration_maintain+0x3c>
     336:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     340:	35 c0       	rjmp	.+106    	; 0x3ac <tiny_calibration_maintain+0xa6>
     342:	88 5f       	subi	r24, 0xF8	; 248
     344:	9a 42       	sbci	r25, 0x2A	; 42
     346:	81 3d       	cpi	r24, 0xD1	; 209
     348:	97 40       	sbci	r25, 0x07	; 7
     34a:	80 f1       	brcs	.+96     	; 0x3ac <tiny_calibration_maintain+0xa6>
     34c:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <__data_end>
     350:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     354:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     358:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     35c:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	a1 1d       	adc	r26, r1
     364:	b1 1d       	adc	r27, r1
     366:	80 93 8d 20 	sts	0x208D, r24	; 0x80208d <outOfRange>
     36a:	90 93 8e 20 	sts	0x208E, r25	; 0x80208e <outOfRange+0x1>
     36e:	a0 93 8f 20 	sts	0x208F, r26	; 0x80208f <outOfRange+0x2>
     372:	b0 93 90 20 	sts	0x2090, r27	; 0x802090 <outOfRange+0x3>
     376:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     37a:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     37e:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     382:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     386:	89 2f       	mov	r24, r25
     388:	9a 2f       	mov	r25, r26
     38a:	ab 2f       	mov	r26, r27
     38c:	bb 27       	eor	r27, r27
     38e:	ee e7       	ldi	r30, 0x7E	; 126
     390:	f1 e2       	ldi	r31, 0x21	; 33
     392:	84 8b       	std	Z+20, r24	; 0x14
     394:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     398:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     39c:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     3a0:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     3a4:	83 8b       	std	Z+19, r24	; 0x13
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3ac:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3b0:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b1 f4       	brne	.+44     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3b8:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3bc:	8f 3f       	cpi	r24, 0xFF	; 255
     3be:	91 f0       	breq	.+36     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3c0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3c4:	81 11       	cpse	r24, r1
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <tiny_calibration_maintain+0xce>
     3c8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3d2:	08 95       	ret
     3d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3dc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3e0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3e4:	08 95       	ret

000003e6 <tiny_calibration_safe_add>:
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	09 f4       	brne	.+2      	; 0x3ec <tiny_calibration_safe_add+0x6>
     3ea:	66 c0       	rjmp	.+204    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <tiny_calibration_safe_add+0xa>
     3ee:	9c 01       	movw	r18, r24
     3f0:	99 23       	and	r25, r25
     3f2:	34 f4       	brge	.+12     	; 0x400 <__FUSE_REGION_LENGTH__>
     3f4:	22 27       	eor	r18, r18
     3f6:	33 27       	eor	r19, r19
     3f8:	28 1b       	sub	r18, r24
     3fa:	39 0b       	sbc	r19, r25
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	e8 e6       	ldi	r30, 0x68	; 104
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	83 81       	ldd	r24, Z+3	; 0x03
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     40e:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     412:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     416:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     41a:	96 95       	lsr	r25
     41c:	98 2f       	mov	r25, r24
     41e:	88 27       	eor	r24, r24
     420:	97 95       	ror	r25
     422:	87 95       	ror	r24
     424:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     428:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     42c:	42 81       	ldd	r20, Z+2	; 0x02
     42e:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     432:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     436:	84 0f       	add	r24, r20
     438:	91 1d       	adc	r25, r1
     43a:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     43e:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     442:	00 00       	nop
     444:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     448:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	28 f4       	brcc	.+10     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
     452:	10 92 70 21 	sts	0x2170, r1	; 0x802170 <calTemp>
     456:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <calTemp+0x1>
     45a:	08 95       	ret
     45c:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     460:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	81 15       	cp	r24, r1
     46a:	90 42       	sbci	r25, 0x20	; 32
     46c:	38 f0       	brcs	.+14     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	9f e1       	ldi	r25, 0x1F	; 31
     472:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     476:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     47a:	08 95       	ret
     47c:	55 23       	and	r21, r21
     47e:	59 f0       	breq	.+22     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     480:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     484:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     488:	82 1b       	sub	r24, r18
     48a:	93 0b       	sbc	r25, r19
     48c:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     490:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     496:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     49a:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     49e:	28 0f       	add	r18, r24
     4a0:	39 1f       	adc	r19, r25
     4a2:	20 93 70 21 	sts	0x2170, r18	; 0x802170 <calTemp>
     4a6:	30 93 71 21 	sts	0x2171, r19	; 0x802171 <calTemp+0x1>
     4aa:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     4ae:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     4b2:	8f 77       	andi	r24, 0x7F	; 127
     4b4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4b8:	08 95       	ret

000004ba <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4be:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4c2:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4c6:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4ca:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4ce:	9e 01       	movw	r18, r28
     4d0:	28 1b       	sub	r18, r24
     4d2:	39 0b       	sbc	r19, r25
     4d4:	20 93 73 21 	sts	0x2173, r18	; 0x802173 <gradient>
     4d8:	30 93 74 21 	sts	0x2174, r19	; 0x802174 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4dc:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     4e0:	81 11       	cpse	r24, r1
     4e2:	4d c0       	rjmp	.+154    	; 0x57e <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4e4:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     4e8:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     4ec:	8e 3c       	cpi	r24, 0xCE	; 206
     4ee:	9f 4f       	sbci	r25, 0xFF	; 255
     4f0:	e4 f4       	brge	.+56     	; 0x52a <tiny_calibration_find_values+0x70>
     4f2:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     4f6:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     4fa:	8b 36       	cpi	r24, 0x6B	; 107
     4fc:	9f 4f       	sbci	r25, 0xFF	; 255
     4fe:	ac f0       	brlt	.+42     	; 0x52a <tiny_calibration_find_values+0x70>
			if(inarow){
     500:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     504:	88 23       	and	r24, r24
     506:	31 f0       	breq	.+12     	; 0x514 <tiny_calibration_find_values+0x5a>
				inarow--;
     508:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     512:	35 c0       	rjmp	.+106    	; 0x57e <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     514:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     518:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <__data_end>
				inarow = NUM_INAROW;
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     528:	2a c0       	rjmp	.+84     	; 0x57e <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     52a:	8c e0       	ldi	r24, 0x0C	; 12
     52c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     530:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     534:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     538:	8a 36       	cpi	r24, 0x6A	; 106
     53a:	9f 4f       	sbci	r25, 0xFF	; 255
     53c:	1c f0       	brlt	.+6      	; 0x544 <tiny_calibration_find_values+0x8a>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	02 c0       	rjmp	.+4      	; 0x548 <tiny_calibration_find_values+0x8e>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <calChange>
     54c:	90 93 6e 21 	sts	0x216E, r25	; 0x80216e <calChange+0x1>
			calChange -= gradient / 48;
     550:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     554:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     558:	20 91 6d 21 	lds	r18, 0x216D	; 0x80216d <calChange>
     55c:	30 91 6e 21 	lds	r19, 0x216E	; 0x80216e <calChange+0x1>
     560:	60 e3       	ldi	r22, 0x30	; 48
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__divmodhi4>
     568:	26 1b       	sub	r18, r22
     56a:	37 0b       	sbc	r19, r23
     56c:	20 93 6d 21 	sts	0x216D, r18	; 0x80216d <calChange>
     570:	30 93 6e 21 	sts	0x216E, r19	; 0x80216e <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     574:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <calChange>
     578:	90 91 6e 21 	lds	r25, 0x216E	; 0x80216e <calChange+0x1>
     57c:	34 df       	rcall	.-408    	; 0x3e6 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     57e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	29 f5       	brne	.+74     	; 0x5d0 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     586:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     58a:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     58e:	c3 97       	sbiw	r24, 0x33	; 51
     590:	94 f0       	brlt	.+36     	; 0x5b6 <tiny_calibration_find_values+0xfc>
			if(inarow){
     592:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     596:	88 23       	and	r24, r24
     598:	31 f0       	breq	.+12     	; 0x5a6 <tiny_calibration_find_values+0xec>
				inarow--;
     59a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5a4:	15 c0       	rjmp	.+42     	; 0x5d0 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5a6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5aa:	80 93 6f 21 	sts	0x216F, r24	; 0x80216f <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <__data_end>
     5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5b6:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     5ba:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     5be:	87 39       	cpi	r24, 0x97	; 151
     5c0:	91 05       	cpc	r25, r1
     5c2:	1c f4       	brge	.+6      	; 0x5ca <tiny_calibration_find_values+0x110>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <tiny_calibration_find_values+0x114>
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	0b df       	rcall	.-490    	; 0x3e6 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5d0:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5d4:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5de:	86 17       	cp	r24, r22
     5e0:	97 07       	cpc	r25, r23
     5e2:	79 f0       	breq	.+30     	; 0x602 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5e4:	68 17       	cp	r22, r24
     5e6:	79 07       	cpc	r23, r25
     5e8:	28 f4       	brcc	.+10     	; 0x5f4 <magnitude_difference+0x16>
     5ea:	9c 01       	movw	r18, r24
     5ec:	26 1b       	sub	r18, r22
     5ee:	37 0b       	sbc	r19, r23
     5f0:	b9 01       	movw	r22, r18
     5f2:	09 c0       	rjmp	.+18     	; 0x606 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5f4:	86 17       	cp	r24, r22
     5f6:	97 07       	cpc	r25, r23
     5f8:	18 f4       	brcc	.+6      	; 0x600 <magnitude_difference+0x22>
     5fa:	68 1b       	sub	r22, r24
     5fc:	79 0b       	sbc	r23, r25
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <magnitude_difference+0x28>
     600:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	86 2f       	mov	r24, r22
     608:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     60a:	08 95       	ret

0000060c <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     614:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     618:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     61c:	89 2b       	or	r24, r25
     61e:	51 f0       	breq	.+20     	; 0x634 <tiny_calibration_layer2+0x28>
		layer2_counter--;
     620:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     624:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     62e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     632:	4d c0       	rjmp	.+154    	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	layer2_counter = LAYER2_INTERVAL;
     634:	80 e4       	ldi	r24, 0x40	; 64
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     63c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     640:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     644:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <tiny_calibration_layer2+0x42>
     64c:	40 c0       	rjmp	.+128    	; 0x6ce <tiny_calibration_layer2+0xc2>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     64e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     652:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	TRFCNT_temp = TRFCNT_temp % (global_mode > 5 ? PACKET_SIZE : HALFPACKET_SIZE);
     656:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <global_mode>
     65a:	26 30       	cpi	r18, 0x06	; 6
     65c:	18 f4       	brcc	.+6      	; 0x664 <tiny_calibration_layer2+0x58>
     65e:	67 e7       	ldi	r22, 0x77	; 119
     660:	71 e0       	ldi	r23, 0x01	; 1
     662:	02 c0       	rjmp	.+4      	; 0x668 <tiny_calibration_layer2+0x5c>
     664:	6e ee       	ldi	r22, 0xEE	; 238
     666:	72 e0       	ldi	r23, 0x02	; 2
     668:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__udivmodhi4>
     66c:	08 2f       	mov	r16, r24
     66e:	19 2f       	mov	r17, r25
     670:	c8 2f       	mov	r28, r24
     672:	d1 2f       	mov	r29, r17
	
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     674:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     678:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     67c:	8c 17       	cp	r24, r28
     67e:	9d 07       	cpc	r25, r29
     680:	80 f4       	brcc	.+32     	; 0x6a2 <tiny_calibration_layer2+0x96>
     682:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     686:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68a:	80 2f       	mov	r24, r16
     68c:	91 2f       	mov	r25, r17
     68e:	a7 df       	rcall	.-178    	; 0x5de <magnitude_difference>
     690:	02 97       	sbiw	r24, 0x02	; 2
     692:	38 f0       	brcs	.+14     	; 0x6a2 <tiny_calibration_layer2+0x96>
		TC_CALI.PERBUF = 24000;
     694:	80 ec       	ldi	r24, 0xC0	; 192
     696:	9d e5       	ldi	r25, 0x5D	; 93
     698:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     69c:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6a0:	16 c0       	rjmp	.+44     	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6a2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6a6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6aa:	c8 17       	cp	r28, r24
     6ac:	d9 07       	cpc	r29, r25
     6ae:	78 f4       	brcc	.+30     	; 0x6ce <tiny_calibration_layer2+0xc2>
     6b0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6b4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6b8:	80 2f       	mov	r24, r16
     6ba:	91 2f       	mov	r25, r17
     6bc:	90 df       	rcall	.-224    	; 0x5de <magnitude_difference>
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	30 f0       	brcs	.+12     	; 0x6ce <tiny_calibration_layer2+0xc2>
		TC_CALI.PERBUF = 23999;
     6c2:	8f eb       	ldi	r24, 0xBF	; 191
     6c4:	9d e5       	ldi	r25, 0x5D	; 93
     6c6:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ca:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6d8:	ac 01       	movw	r20, r24
     6da:	46 0f       	add	r20, r22
     6dc:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6de:	86 1b       	sub	r24, r22
     6e0:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6e2:	e0 e0       	ldi	r30, 0x00	; 0
     6e4:	fa e0       	ldi	r31, 0x0A	; 10
     6e6:	20 a1       	ldd	r18, Z+32	; 0x20
     6e8:	31 a1       	ldd	r19, Z+33	; 0x21
     6ea:	24 17       	cp	r18, r20
     6ec:	35 07       	cpc	r19, r21
     6ee:	d8 f7       	brcc	.-10     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
     6f0:	20 a1       	ldd	r18, Z+32	; 0x20
     6f2:	31 a1       	ldd	r19, Z+33	; 0x21
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	b0 f7       	brcc	.-20     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     6fa:	08 95       	ret

000006fc <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     6fc:	e0 e8       	ldi	r30, 0x80	; 128
     6fe:	f6 e0       	ldi	r31, 0x06	; 6
     700:	8f e0       	ldi	r24, 0x0F	; 15
     702:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	84 83       	std	Z+4, r24	; 0x04
     708:	08 95       	ret

0000070a <eeprom_safe_read>:
 *  Author: Esposch
 */ 
#include <asf.h>
#include "tiny_eeprom.h"

void eeprom_safe_read(){
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     710:	c0 e4       	ldi	r28, 0x40	; 64
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     716:	80 e4       	ldi	r24, 0x40	; 64
     718:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_read_buffer(EEPROM_CURRENT_PAGE*EEPROM_PAGE_SIZE, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     71a:	40 e2       	ldi	r20, 0x20	; 32
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	68 ea       	ldi	r22, 0xA8	; 168
     720:	7b e2       	ldi	r23, 0x2B	; 43
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <nvm_eeprom_read_buffer>
	CLK.PSCTRL = previous_clk_settings;
     72a:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	08 95       	ret

00000734 <eeprom_safe_write>:

void eeprom_safe_write(){
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     73a:	c0 e4       	ldi	r28, 0x40	; 64
     73c:	d0 e0       	ldi	r29, 0x00	; 0
     73e:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     740:	80 e4       	ldi	r24, 0x40	; 64
     742:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_load_page_to_buffer(eeprom_buffer_write);
     744:	8b ea       	ldi	r24, 0xAB	; 171
     746:	95 e2       	ldi	r25, 0x25	; 37
     748:	0e 94 1c 10 	call	0x2038	; 0x2038 <nvm_eeprom_load_page_to_buffer>
	nvm_eeprom_atomic_write_page(EEPROM_CURRENT_PAGE);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 3b 10 	call	0x2076	; 0x2076 <nvm_eeprom_atomic_write_page>
	CLK.PSCTRL = previous_clk_settings;
     752:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     75c:	08 95       	ret

0000075e <iso_callback>:
bool main_setup_in_received(void)
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
		else{
			udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE + offset], 125, iso_callback);
		}
		return;
	#else
			if (global_mode < 1){
     762:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     766:	81 11       	cpse	r24, r1
     768:	14 c0       	rjmp	.+40     	; 0x792 <iso_callback+0x34>
		udd_ep_run(0x81, false, (uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE], PACKET_SIZE, iso_callback);
     76a:	20 91 96 20 	lds	r18, 0x2096	; 0x802096 <usb_state>
     76e:	87 e7       	ldi	r24, 0x77	; 119
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	28 9f       	mul	r18, r24
     774:	a0 01       	movw	r20, r0
     776:	29 9f       	mul	r18, r25
     778:	50 0d       	add	r21, r0
     77a:	11 24       	eor	r1, r1
     77c:	44 53       	subi	r20, 0x34	; 52
     77e:	5a 4d       	sbci	r21, 0xDA	; 218
     780:	0f ea       	ldi	r16, 0xAF	; 175
     782:	13 e0       	ldi	r17, 0x03	; 3
     784:	2e ee       	ldi	r18, 0xEE	; 238
     786:	32 e0       	ldi	r19, 0x02	; 2
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	81 e8       	ldi	r24, 0x81	; 129
     78c:	0e 94 a8 14 	call	0x2950	; 0x2950 <udd_ep_run>
     790:	13 c0       	rjmp	.+38     	; 0x7b8 <iso_callback+0x5a>
			}
			else{
		udd_ep_run(0x81, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE], PACKET_SIZE, iso_callback);
     792:	20 91 96 20 	lds	r18, 0x2096	; 0x802096 <usb_state>
     796:	8e ee       	ldi	r24, 0xEE	; 238
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	28 9f       	mul	r18, r24
     79c:	a0 01       	movw	r20, r0
     79e:	29 9f       	mul	r18, r25
     7a0:	50 0d       	add	r21, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	44 53       	subi	r20, 0x34	; 52
     7a6:	5a 4d       	sbci	r21, 0xDA	; 218
     7a8:	0f ea       	ldi	r16, 0xAF	; 175
     7aa:	13 e0       	ldi	r17, 0x03	; 3
     7ac:	2e ee       	ldi	r18, 0xEE	; 238
     7ae:	32 e0       	ldi	r19, 0x02	; 2
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	81 e8       	ldi	r24, 0x81	; 129
     7b4:	0e 94 a8 14 	call	0x2950	; 0x2950 <udd_ep_run>
			}

	#endif
}
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <jump_to_bootloader>:
volatile unsigned char eeprom_buffer_write[EEPROM_PAGE_SIZE];
volatile unsigned char eeprom_buffer_read[EEPROM_PAGE_SIZE];

void jump_to_bootloader(){
	void(* start_bootloader)(void) = (void (*)(void))((BOOT_SECTION_START + ATMEL_DFU_OFFSET)>>1);
	EIND = BOOT_SECTION_START>>17;
     7be:	1c be       	out	0x3c, r1	; 60
	start_bootloader();
     7c0:	ee ef       	ldi	r30, 0xFE	; 254
     7c2:	f0 e4       	ldi	r31, 0x40	; 64
     7c4:	09 95       	icall
     7c6:	08 95       	ret

000007c8 <main>:
}

int main(void){	
	eeprom_safe_read();
     7c8:	a0 df       	rcall	.-192    	; 0x70a <eeprom_safe_read>
	if(eeprom_buffer_read[0]){
     7ca:	80 91 a8 2b 	lds	r24, 0x2BA8	; 0x802ba8 <eeprom_buffer_read>
     7ce:	88 23       	and	r24, r24
     7d0:	69 f0       	breq	.+26     	; 0x7ec <main+0x24>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     7d2:	80 e2       	ldi	r24, 0x20	; 32
     7d4:	e8 ea       	ldi	r30, 0xA8	; 168
     7d6:	fb e2       	ldi	r31, 0x2B	; 43
     7d8:	ab ea       	ldi	r26, 0xAB	; 171
     7da:	b5 e2       	ldi	r27, 0x25	; 37
     7dc:	01 90       	ld	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	8a 95       	dec	r24
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <main+0x14>
			eeprom_buffer_write[0] = 0;
     7e4:	10 92 ab 25 	sts	0x25AB, r1	; 0x8025ab <eeprom_buffer_write>
			eeprom_safe_write();
     7e8:	a5 df       	rcall	.-182    	; 0x734 <eeprom_safe_write>
			//eeprom_safe_read();
			jump_to_bootloader();
     7ea:	e9 df       	rcall	.-46     	; 0x7be <jump_to_bootloader>
	}
	
	irq_initialize_vectors();
     7ec:	87 e0       	ldi	r24, 0x07	; 7
     7ee:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     7f2:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     7f4:	40 dd       	rcall	.-1408   	; 0x276 <tiny_calibration_init>
		
	board_init();
     7f6:	b2 df       	rcall	.-156    	; 0x75c <board_init>
	udc_start();
     7f8:	0e 94 09 0c 	call	0x1812	; 0x1812 <udc_start>
	tiny_dac_setup();
     7fc:	7c d1       	rcall	.+760    	; 0xaf6 <tiny_dac_setup>
	tiny_dma_setup();
     7fe:	9f d1       	rcall	.+830    	; 0xb3e <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	28 d1       	rcall	.+592    	; 0xa56 <tiny_adc_setup>
	tiny_adc_pid_setup();
     806:	14 d1       	rcall	.+552    	; 0xa30 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     808:	8c e0       	ldi	r24, 0x0C	; 12
     80a:	08 d1       	rcall	.+528    	; 0xa1c <tiny_adc_ch1setup>
	tiny_timer_setup();
     80c:	97 d5       	rcall	.+2862   	; 0x133c <tiny_timer_setup>
	tiny_uart_setup();
     80e:	52 d6       	rcall	.+3236   	; 0x14b4 <tiny_uart_setup>
	tiny_spi_setup();
     810:	6b d6       	rcall	.+3286   	; 0x14e8 <tiny_spi_setup>
	tiny_dig_setup();
     812:	74 df       	rcall	.-280    	; 0x6fc <tiny_dig_setup>
	//USARTC0.DATA = 0x55;
	//asm("nop");
	


	strcpy(uds.header, "debug123");
     814:	89 e0       	ldi	r24, 0x09	; 9
     816:	e0 e8       	ldi	r30, 0x80	; 128
     818:	f0 e2       	ldi	r31, 0x20	; 32
     81a:	ae e7       	ldi	r26, 0x7E	; 126
     81c:	b1 e2       	ldi	r27, 0x21	; 33
     81e:	01 90       	ld	r0, Z+
     820:	0d 92       	st	X+, r0
     822:	8a 95       	dec	r24
     824:	e1 f7       	brne	.-8      	; 0x81e <main+0x56>
	...
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			if(modeChanged){
     842:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <modeChanged>
     846:	88 23       	and	r24, r24
     848:	71 f3       	breq	.-36     	; 0x826 <main+0x5e>
				switch(futureMode){
     84a:	e0 91 aa 23 	lds	r30, 0x23AA	; 0x8023aa <futureMode>
     84e:	8e 2f       	mov	r24, r30
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	88 30       	cpi	r24, 0x08	; 8
     854:	91 05       	cpc	r25, r1
     856:	a0 f4       	brcc	.+40     	; 0x880 <main+0xb8>
     858:	fc 01       	movw	r30, r24
     85a:	e2 50       	subi	r30, 0x02	; 2
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
     862:	99 d1       	rcall	.+818    	; 0xb96 <tiny_dma_set_mode_0>
					break;
     864:	0d c0       	rjmp	.+26     	; 0x880 <main+0xb8>
					case 1:
					tiny_dma_set_mode_1();
     866:	09 d2       	rcall	.+1042   	; 0xc7a <tiny_dma_set_mode_1>
					break;
     868:	0b c0       	rjmp	.+22     	; 0x880 <main+0xb8>
					case 2:
					tiny_dma_set_mode_2();
     86a:	90 d2       	rcall	.+1312   	; 0xd8c <tiny_dma_set_mode_2>
					break;
     86c:	09 c0       	rjmp	.+18     	; 0x880 <main+0xb8>
					case 3:
					tiny_dma_set_mode_3();
     86e:	14 d3       	rcall	.+1576   	; 0xe98 <tiny_dma_set_mode_3>
					break;
     870:	07 c0       	rjmp	.+14     	; 0x880 <main+0xb8>
					case 4:
					tiny_dma_set_mode_4();
     872:	a0 d3       	rcall	.+1856   	; 0xfb4 <tiny_dma_set_mode_4>
					break;
     874:	05 c0       	rjmp	.+10     	; 0x880 <main+0xb8>
					case 5:
					tiny_dma_set_mode_5();
     876:	26 d4       	rcall	.+2124   	; 0x10c4 <tiny_dma_set_mode_5>
					break;
     878:	03 c0       	rjmp	.+6      	; 0x880 <main+0xb8>
					case 6:
					tiny_dma_set_mode_6();
     87a:	25 d4       	rcall	.+2122   	; 0x10c6 <tiny_dma_set_mode_6>
					break;
     87c:	01 c0       	rjmp	.+2      	; 0x880 <main+0xb8>
					case 7:
					tiny_dma_set_mode_7();
     87e:	96 d4       	rcall	.+2348   	; 0x11ac <tiny_dma_set_mode_7>
					break;
				}
				modeChanged = 0;
     880:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <modeChanged>
     884:	d0 cf       	rjmp	.-96     	; 0x826 <main+0x5e>

00000886 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     886:	08 95       	ret

00000888 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     888:	08 95       	ret

0000088a <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     88e:	a0 e0       	ldi	r26, 0x00	; 0
     890:	b1 e0       	ldi	r27, 0x01	; 1
     892:	54 96       	adiw	r26, 0x14	; 20
     894:	8c 91       	ld	r24, X
     896:	54 97       	sbiw	r26, 0x14	; 20
     898:	ee e7       	ldi	r30, 0x7E	; 126
     89a:	f1 e2       	ldi	r31, 0x21	; 33
     89c:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     89e:	55 96       	adiw	r26, 0x15	; 21
     8a0:	8c 91       	ld	r24, X
     8a2:	55 97       	sbiw	r26, 0x15	; 21
     8a4:	82 87       	std	Z+10, r24	; 0x0a
	uds.trfcntL1 = DMA.CH1.TRFCNTL;
     8a6:	94 96       	adiw	r26, 0x24	; 36
     8a8:	8c 91       	ld	r24, X
     8aa:	94 97       	sbiw	r26, 0x24	; 36
     8ac:	83 87       	std	Z+11, r24	; 0x0b
	uds.trfcntH1 = DMA.CH1.TRFCNTH;
     8ae:	95 96       	adiw	r26, 0x25	; 37
     8b0:	8c 91       	ld	r24, X
     8b2:	95 97       	sbiw	r26, 0x25	; 37
     8b4:	84 87       	std	Z+12, r24	; 0x0c
	uds.counterL = TC_CALI.CNTL;
     8b6:	c0 e0       	ldi	r28, 0x00	; 0
     8b8:	da e0       	ldi	r29, 0x0A	; 10
     8ba:	88 a1       	ldd	r24, Y+32	; 0x20
     8bc:	85 8b       	std	Z+21, r24	; 0x15
	uds.counterH = TC_CALI.CNTH;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	86 8b       	std	Z+22, r24	; 0x16
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     8c2:	54 96       	adiw	r26, 0x14	; 20
     8c4:	8d 91       	ld	r24, X+
     8c6:	9c 91       	ld	r25, X
     8c8:	55 97       	sbiw	r26, 0x15	; 21
     8ca:	86 34       	cpi	r24, 0x46	; 70
     8cc:	91 40       	sbci	r25, 0x01	; 1
     8ce:	80 f0       	brcs	.+32     	; 0x8f0 <main_sof_action+0x66>
     8d0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8d4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8d8:	89 3a       	cpi	r24, 0xA9	; 169
     8da:	91 40       	sbci	r25, 0x01	; 1
     8dc:	48 f4       	brcc	.+18     	; 0x8f0 <main_sof_action+0x66>
		currentTrfcnt = DMA.CH0.TRFCNT;
     8de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8e2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8e6:	80 93 c8 2b 	sts	0x2BC8, r24	; 0x802bc8 <currentTrfcnt>
     8ea:	90 93 c9 2b 	sts	0x2BC9, r25	; 0x802bc9 <currentTrfcnt+0x1>
		asm("nop");
     8ee:	00 00       	nop
	}
	if(firstFrame){
     8f0:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <firstFrame>
     8f4:	88 23       	and	r24, r24
     8f6:	39 f0       	breq	.+14     	; 0x906 <main_sof_action+0x7c>
		tiny_calibration_first_sof();
     8f8:	f4 dc       	rcall	.-1560   	; 0x2e2 <tiny_calibration_first_sof>
		firstFrame = 0;
     8fa:	10 92 94 20 	sts	0x2094, r1	; 0x802094 <firstFrame>
		tcinit = 1;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <tcinit>
		return;
     904:	35 c0       	rjmp	.+106    	; 0x970 <main_sof_action+0xe6>
	}
	else{
		if(tcinit){
     906:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <tcinit>
     90a:	88 23       	and	r24, r24
     90c:	41 f0       	breq	.+16     	; 0x91e <main_sof_action+0x94>
			if(calibration_values_found == 0x03){
     90e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	19 f4       	brne	.+6      	; 0x91c <main_sof_action+0x92>
				tiny_calibration_maintain();
     916:	f7 dc       	rcall	.-1554   	; 0x306 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     918:	79 de       	rcall	.-782    	; 0x60c <tiny_calibration_layer2>
     91a:	01 c0       	rjmp	.+2      	; 0x91e <main_sof_action+0x94>
			} else tiny_calibration_find_values();
     91c:	ce dd       	rcall	.-1124   	; 0x4ba <tiny_calibration_find_values>
			}
			else debug_divider++;*/
		}
	}
	
	if(debugOnNextEnd){
     91e:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <debugOnNextEnd>
     922:	88 23       	and	r24, r24
     924:	51 f0       	breq	.+20     	; 0x93a <main_sof_action+0xb0>
		currentTrfcnt = DMA.CH0.TRFCNT;
     926:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     92a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     92e:	80 93 c8 2b 	sts	0x2BC8, r24	; 0x802bc8 <currentTrfcnt>
     932:	90 93 c9 2b 	sts	0x2BC9, r25	; 0x802bc9 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     936:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <debugOnNextEnd>
	}
	if(global_mode < 5){
     93a:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     93e:	85 30       	cpi	r24, 0x05	; 5
     940:	60 f4       	brcc	.+24     	; 0x95a <main_sof_action+0xd0>
		usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     942:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     946:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	27 37       	cpi	r18, 0x77	; 119
     94e:	31 40       	sbci	r19, 0x01	; 1
     950:	08 f0       	brcs	.+2      	; 0x954 <main_sof_action+0xca>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <usb_state>
     958:	0b c0       	rjmp	.+22     	; 0x970 <main_sof_action+0xe6>
	}
	else{
		usb_state = (DMA.CH0.TRFCNT < 750) ? 1 : 0;
     95a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     95e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	2e 3e       	cpi	r18, 0xEE	; 238
     966:	32 40       	sbci	r19, 0x02	; 2
     968:	08 f0       	brcs	.+2      	; 0x96c <main_sof_action+0xe2>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <usb_state>
	}
	return;
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <main_vendor_enable>:

bool main_vendor_enable(void)
{
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
	main_b_vendor_enable = true;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 99 20 	sts	0x2099, r24	; 0x802099 <main_b_vendor_enable>
	firstFrame = 1;
     980:	80 93 94 20 	sts	0x2094, r24	; 0x802094 <firstFrame>
	udd_ep_run(0x81, false, (uint8_t *)&isoBuf[0], 125, iso_callback);
     984:	0f ea       	ldi	r16, 0xAF	; 175
     986:	13 e0       	ldi	r17, 0x03	; 3
     988:	2d e7       	ldi	r18, 0x7D	; 125
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	4c ec       	ldi	r20, 0xCC	; 204
     98e:	55 e2       	ldi	r21, 0x25	; 37
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	81 e8       	ldi	r24, 0x81	; 129
     994:	0e 94 a8 14 	call	0x2950	; 0x2950 <udd_ep_run>
	udd_ep_run(0x82, false, (uint8_t *)&isoBuf[125], 125, iso_callback);
     998:	2d e7       	ldi	r18, 0x7D	; 125
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	49 e4       	ldi	r20, 0x49	; 73
     99e:	56 e2       	ldi	r21, 0x26	; 38
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	82 e8       	ldi	r24, 0x82	; 130
     9a4:	0e 94 a8 14 	call	0x2950	; 0x2950 <udd_ep_run>
	udd_ep_run(0x83, false, (uint8_t *)&isoBuf[250], 125, iso_callback);
     9a8:	2d e7       	ldi	r18, 0x7D	; 125
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	46 ec       	ldi	r20, 0xC6	; 198
     9ae:	56 e2       	ldi	r21, 0x26	; 38
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	83 e8       	ldi	r24, 0x83	; 131
     9b4:	0e 94 a8 14 	call	0x2950	; 0x2950 <udd_ep_run>
	udd_ep_run(0x84, false, (uint8_t *)&isoBuf[375], 125, iso_callback);
     9b8:	2d e7       	ldi	r18, 0x7D	; 125
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	43 e4       	ldi	r20, 0x43	; 67
     9be:	57 e2       	ldi	r21, 0x27	; 39
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	84 e8       	ldi	r24, 0x84	; 132
     9c4:	0e 94 a8 14 	call	0x2950	; 0x2950 <udd_ep_run>
	udd_ep_run(0x85, false, (uint8_t *)&isoBuf[500], 125, iso_callback);
     9c8:	2d e7       	ldi	r18, 0x7D	; 125
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 ec       	ldi	r20, 0xC0	; 192
     9ce:	57 e2       	ldi	r21, 0x27	; 39
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	85 e8       	ldi	r24, 0x85	; 133
     9d4:	0e 94 a8 14 	call	0x2950	; 0x2950 <udd_ep_run>
	udd_ep_run(0x86, false, (uint8_t *)&isoBuf[625], 125, iso_callback);
     9d8:	2d e7       	ldi	r18, 0x7D	; 125
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	4d e3       	ldi	r20, 0x3D	; 61
     9de:	58 e2       	ldi	r21, 0x28	; 40
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	86 e8       	ldi	r24, 0x86	; 134
     9e4:	0e 94 a8 14 	call	0x2950	; 0x2950 <udd_ep_run>
	return true;
}
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	08 95       	ret

000009f0 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     9f0:	10 92 99 20 	sts	0x2099, r1	; 0x802099 <main_b_vendor_enable>
     9f4:	08 95       	ret

000009f6 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	08 95       	ret

000009fa <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	08 95       	ret

000009fe <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     9fe:	e0 e0       	ldi	r30, 0x00	; 0
     a00:	f2 e0       	ldi	r31, 0x02	; 2
     a02:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a04:	98 2f       	mov	r25, r24
     a06:	9c 71       	andi	r25, 0x1C	; 28
     a08:	93 68       	ori	r25, 0x83	; 131
     a0a:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     a0c:	88 1f       	adc	r24, r24
     a0e:	88 27       	eor	r24, r24
     a10:	88 1f       	adc	r24, r24
     a12:	88 0f       	add	r24, r24
     a14:	81 a3       	std	Z+33, r24	; 0x21
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a16:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     a18:	16 a2       	std	Z+38, r1	; 0x26
     a1a:	08 95       	ret

00000a1c <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     a1c:	e0 e0       	ldi	r30, 0x00	; 0
     a1e:	f2 e0       	ldi	r31, 0x02	; 2
     a20:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a22:	83 68       	ori	r24, 0x83	; 131
     a24:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     a26:	80 e1       	ldi	r24, 0x10	; 16
     a28:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a2a:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     a2c:	16 aa       	std	Z+54, r1	; 0x36
     a2e:	08 95       	ret

00000a30 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     a30:	e0 e0       	ldi	r30, 0x00	; 0
     a32:	f2 e0       	ldi	r31, 0x02	; 2
     a34:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a36:	83 e8       	ldi	r24, 0x83	; 131
     a38:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     a3a:	8f e2       	ldi	r24, 0x2F	; 47
     a3c:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a3e:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     a40:	16 a6       	std	Z+46, r1	; 0x2e
     a42:	08 95       	ret

00000a44 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     a44:	aa ec       	ldi	r26, 0xCA	; 202
     a46:	b1 e0       	ldi	r27, 0x01	; 1
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     a4c:	e8 2f       	mov	r30, r24
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     a52:	1c 92       	st	X, r1

	return( result );
}
     a54:	08 95       	ret

00000a56 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     a5a:	e0 e7       	ldi	r30, 0x70	; 112
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	9d 7f       	andi	r25, 0xFD	; 253
     a62:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     a64:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a68:	62 30       	cpi	r22, 0x02	; 2
     a6a:	31 f1       	breq	.+76     	; 0xab8 <tiny_adc_setup+0x62>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f2 e0       	ldi	r31, 0x02	; 2
     a70:	9c e1       	ldi	r25, 0x1C	; 28
     a72:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a74:	90 e4       	ldi	r25, 0x40	; 64
     a76:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a78:	81 11       	cpse	r24, r1
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <tiny_adc_setup+0x2a>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <tiny_adc_setup+0x2c>
     a80:	80 ec       	ldi	r24, 0xC0	; 192
     a82:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     a86:	61 30       	cpi	r22, 0x01	; 1
     a88:	11 f0       	breq	.+4      	; 0xa8e <tiny_adc_setup+0x38>
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <tiny_adc_setup+0x3a>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	c0 e0       	ldi	r28, 0x00	; 0
     a92:	d2 e0       	ldi	r29, 0x02	; 2
     a94:	8c 83       	std	Y+4, r24	; 0x04
	#else
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
	#endif
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     a96:	80 e2       	ldi	r24, 0x20	; 32
     a98:	d5 df       	rcall	.-86     	; 0xa44 <ReadCalibrationByte>
     a9a:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     a9c:	81 e2       	ldi	r24, 0x21	; 33
     a9e:	d2 df       	rcall	.-92     	; 0xa44 <ReadCalibrationByte>
     aa0:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     aa2:	18 8e       	std	Y+24, r1	; 0x18
     aa4:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     aaa:	c2 df       	rcall	.-124    	; 0xa30 <tiny_adc_pid_setup>
     aac:	0e c0       	rjmp	.+28     	; 0xaca <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     aae:	80 ec       	ldi	r24, 0xC0	; 192
     ab0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     ab4:	84 e0       	ldi	r24, 0x04	; 4
     ab6:	ec cf       	rjmp	.-40     	; 0xa90 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     ab8:	e0 e0       	ldi	r30, 0x00	; 0
     aba:	f2 e0       	ldi	r31, 0x02	; 2
     abc:	9e e1       	ldi	r25, 0x1E	; 30
     abe:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     ac0:	90 e4       	ldi	r25, 0x40	; 64
     ac2:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ac4:	81 11       	cpse	r24, r1
     ac6:	f3 cf       	rjmp	.-26     	; 0xaae <tiny_adc_setup+0x58>
     ac8:	d9 cf       	rjmp	.-78     	; 0xa7c <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     aea:	8f 91       	pop	r24
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     afa:	e0 e7       	ldi	r30, 0x70	; 112
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	8b 7f       	andi	r24, 0xFB	; 251
     b02:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     b04:	c0 e2       	ldi	r28, 0x20	; 32
     b06:	d3 e0       	ldi	r29, 0x03	; 3
     b08:	8d e0       	ldi	r24, 0x0D	; 13
     b0a:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     b0c:	80 e4       	ldi	r24, 0x40	; 64
     b0e:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     b10:	89 e0       	ldi	r24, 0x09	; 9
     b12:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     b14:	83 e3       	ldi	r24, 0x33	; 51
     b16:	96 df       	rcall	.-212    	; 0xa44 <ReadCalibrationByte>
     b18:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     b1a:	82 e3       	ldi	r24, 0x32	; 50
     b1c:	93 df       	rcall	.-218    	; 0xa44 <ReadCalibrationByte>
     b1e:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     b20:	87 e3       	ldi	r24, 0x37	; 55
     b22:	90 df       	rcall	.-224    	; 0xa44 <ReadCalibrationByte>
     b24:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     b26:	86 e3       	ldi	r24, 0x36	; 54
     b28:	8d df       	rcall	.-230    	; 0xa44 <ReadCalibrationByte>
     b2a:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     b2c:	e0 e2       	ldi	r30, 0x20	; 32
     b2e:	f6 e0       	ldi	r31, 0x06	; 6
     b30:	80 81       	ld	r24, Z
     b32:	83 60       	ori	r24, 0x03	; 3
     b34:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     b36:	14 82       	std	Z+4, r1	; 0x04
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <tiny_dma_setup>:
		median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
		
}

void tiny_dma_loop_mode_7(void){
     b3e:	e0 e7       	ldi	r30, 0x70	; 112
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	8e 7f       	andi	r24, 0xFE	; 254
     b46:	80 83       	st	Z, r24
     b48:	83 e8       	ldi	r24, 0x83	; 131
     b4a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     b4e:	08 95       	ret

00000b50 <tiny_dma_flush>:
     b50:	e0 e0       	ldi	r30, 0x00	; 0
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	10 8a       	std	Z+16, r1	; 0x10
     b56:	80 e4       	ldi	r24, 0x40	; 64
     b58:	80 8b       	std	Z+16, r24	; 0x10
     b5a:	10 a2       	std	Z+32, r1	; 0x20
     b5c:	80 a3       	std	Z+32, r24	; 0x20
     b5e:	10 aa       	std	Z+48, r1	; 0x30
     b60:	80 ab       	std	Z+48, r24	; 0x30
     b62:	e0 e4       	ldi	r30, 0x40	; 64
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	10 82       	st	Z, r1
     b68:	80 83       	st	Z, r24
     b6a:	10 92 98 20 	sts	0x2098, r1	; 0x802098 <b1_state>
     b6e:	10 92 97 20 	sts	0x2097, r1	; 0x802097 <b2_state>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <usb_state>
     b78:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <dma_ch0_ran>
     b7c:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <dma_ch0_ran+0x1>
     b80:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <dma_ch1_ran>
     b84:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <dma_ch1_ran+0x1>
     b88:	08 95       	ret

00000b8a <tiny_dma_delayed_set>:
     b8a:	80 93 aa 23 	sts	0x23AA, r24	; 0x8023aa <futureMode>
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <modeChanged>
     b94:	08 95       	ret

00000b96 <tiny_dma_set_mode_0>:
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     b9e:	d8 df       	rcall	.-80     	; 0xb50 <tiny_dma_flush>
     ba0:	c0 e0       	ldi	r28, 0x00	; 0
     ba2:	d1 e0       	ldi	r29, 0x01	; 1
     ba4:	1e aa       	std	Y+54, r1	; 0x36
     ba6:	84 e2       	ldi	r24, 0x24	; 36
     ba8:	88 ab       	std	Y+48, r24	; 0x30
     baa:	19 aa       	std	Y+49, r1	; 0x31
     bac:	49 e5       	ldi	r20, 0x59	; 89
     bae:	4a ab       	std	Y+50, r20	; 0x32
     bb0:	32 e0       	ldi	r19, 0x02	; 2
     bb2:	3b ab       	std	Y+51, r19	; 0x33
     bb4:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     bb8:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     bbc:	6c ab       	std	Y+52, r22	; 0x34
     bbe:	7d ab       	std	Y+53, r23	; 0x35
     bc0:	6b ea       	ldi	r22, 0xAB	; 171
     bc2:	73 e2       	ldi	r23, 0x23	; 35
     bc4:	68 af       	std	Y+56, r22	; 0x38
     bc6:	79 af       	std	Y+57, r23	; 0x39
     bc8:	1a ae       	std	Y+58, r1	; 0x3a
     bca:	9b e3       	ldi	r25, 0x3B	; 59
     bcc:	9c af       	std	Y+60, r25	; 0x3c
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bd4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bd8:	28 a9       	ldd	r18, Y+48	; 0x30
     bda:	20 68       	ori	r18, 0x80	; 128
     bdc:	28 ab       	std	Y+48, r18	; 0x30
     bde:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     be2:	e0 e4       	ldi	r30, 0x40	; 64
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	80 83       	st	Z, r24
     be8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bec:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     bf0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bf4:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     bf8:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     bfc:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c00:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c04:	4a e9       	ldi	r20, 0x9A	; 154
     c06:	51 e2       	ldi	r21, 0x21	; 33
     c08:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c0c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c10:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c14:	29 e3       	ldi	r18, 0x39	; 57
     c16:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c1a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c1e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c22:	90 81       	ld	r25, Z
     c24:	90 68       	ori	r25, 0x80	; 128
     c26:	90 83       	st	Z, r25
     c28:	18 8a       	std	Y+16, r1	; 0x10
     c2a:	90 e4       	ldi	r25, 0x40	; 64
     c2c:	98 8b       	std	Y+16, r25	; 0x10
     c2e:	88 8b       	std	Y+16, r24	; 0x10
     c30:	19 8a       	std	Y+17, r1	; 0x11
     c32:	95 e9       	ldi	r25, 0x95	; 149
     c34:	9a 8b       	std	Y+18, r25	; 0x12
     c36:	90 e1       	ldi	r25, 0x10	; 16
     c38:	9b 8b       	std	Y+19, r25	; 0x13
     c3a:	4e ee       	ldi	r20, 0xEE	; 238
     c3c:	52 e0       	ldi	r21, 0x02	; 2
     c3e:	4c 8b       	std	Y+20, r20	; 0x14
     c40:	5d 8b       	std	Y+21, r21	; 0x15
     c42:	88 8f       	std	Y+24, r24	; 0x18
     c44:	39 8f       	std	Y+25, r19	; 0x19
     c46:	1a 8e       	std	Y+26, r1	; 0x1a
     c48:	8c ec       	ldi	r24, 0xCC	; 204
     c4a:	95 e2       	ldi	r25, 0x25	; 37
     c4c:	8c 8f       	std	Y+28, r24	; 0x1c
     c4e:	9d 8f       	std	Y+29, r25	; 0x1d
     c50:	1e 8e       	std	Y+30, r1	; 0x1e
     c52:	68 ec       	ldi	r22, 0xC8	; 200
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	84 ef       	ldi	r24, 0xF4	; 244
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	3e dd       	rcall	.-1412   	; 0x6d8 <tiny_calibration_synchronise_phase>
     c5c:	88 ec       	ldi	r24, 0xC8	; 200
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     c64:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     c6e:	88 89       	ldd	r24, Y+16	; 0x10
     c70:	80 68       	ori	r24, 0x80	; 128
     c72:	88 8b       	std	Y+16, r24	; 0x10
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <tiny_dma_set_mode_1>:
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	11 e0       	ldi	r17, 0x01	; 1
     c82:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     c86:	64 df       	rcall	.-312    	; 0xb50 <tiny_dma_flush>
     c88:	c0 e0       	ldi	r28, 0x00	; 0
     c8a:	d1 e0       	ldi	r29, 0x01	; 1
     c8c:	18 aa       	std	Y+48, r1	; 0x30
     c8e:	80 e4       	ldi	r24, 0x40	; 64
     c90:	88 ab       	std	Y+48, r24	; 0x30
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	88 ab       	std	Y+48, r24	; 0x30
     c96:	19 aa       	std	Y+49, r1	; 0x31
     c98:	1a aa       	std	Y+50, r1	; 0x32
     c9a:	4b e4       	ldi	r20, 0x4B	; 75
     c9c:	4b ab       	std	Y+51, r20	; 0x33
     c9e:	1c aa       	std	Y+52, r1	; 0x34
     ca0:	1d aa       	std	Y+53, r1	; 0x35
     ca2:	1e aa       	std	Y+54, r1	; 0x36
     ca4:	8a e0       	ldi	r24, 0x0A	; 10
     ca6:	90 e2       	ldi	r25, 0x20	; 32
     ca8:	88 af       	std	Y+56, r24	; 0x38
     caa:	99 af       	std	Y+57, r25	; 0x39
     cac:	1a ae       	std	Y+58, r1	; 0x3a
     cae:	70 ea       	ldi	r23, 0xA0	; 160
     cb0:	7c af       	std	Y+60, r23	; 0x3c
     cb2:	68 e0       	ldi	r22, 0x08	; 8
     cb4:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     cb8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     cbc:	88 a9       	ldd	r24, Y+48	; 0x30
     cbe:	80 6a       	ori	r24, 0xA0	; 160
     cc0:	88 ab       	std	Y+48, r24	; 0x30
     cc2:	e0 ea       	ldi	r30, 0xA0	; 160
     cc4:	f8 e0       	ldi	r31, 0x08	; 8
     cc6:	85 e5       	ldi	r24, 0x55	; 85
     cc8:	80 83       	st	Z, r24
     cca:	80 83       	st	Z, r24
     ccc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     cd0:	e0 e4       	ldi	r30, 0x40	; 64
     cd2:	f1 e0       	ldi	r31, 0x01	; 1
     cd4:	84 e2       	ldi	r24, 0x24	; 36
     cd6:	80 83       	st	Z, r24
     cd8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     cdc:	99 e5       	ldi	r25, 0x59	; 89
     cde:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ce2:	32 e0       	ldi	r19, 0x02	; 2
     ce4:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     ce8:	a0 91 0b 20 	lds	r26, 0x200B	; 0x80200b <auxDacBufLen>
     cec:	b0 91 0c 20 	lds	r27, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     cf0:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     cf4:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     cf8:	ab ea       	ldi	r26, 0xAB	; 171
     cfa:	b3 e2       	ldi	r27, 0x23	; 35
     cfc:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d00:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d04:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d08:	9b e3       	ldi	r25, 0x3B	; 59
     d0a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d14:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d18:	20 81       	ld	r18, Z
     d1a:	20 68       	ori	r18, 0x80	; 128
     d1c:	20 83       	st	Z, r18
     d1e:	88 a3       	std	Y+32, r24	; 0x20
     d20:	99 a3       	std	Y+33, r25	; 0x21
     d22:	25 e9       	ldi	r18, 0x95	; 149
     d24:	2a a3       	std	Y+34, r18	; 0x22
     d26:	4b a3       	std	Y+35, r20	; 0x23
     d28:	4e ee       	ldi	r20, 0xEE	; 238
     d2a:	52 e0       	ldi	r21, 0x02	; 2
     d2c:	4c a3       	std	Y+36, r20	; 0x24
     d2e:	5d a3       	std	Y+37, r21	; 0x25
     d30:	78 a7       	std	Y+40, r23	; 0x28
     d32:	69 a7       	std	Y+41, r22	; 0x29
     d34:	1a a6       	std	Y+42, r1	; 0x2a
     d36:	6a eb       	ldi	r22, 0xBA	; 186
     d38:	78 e2       	ldi	r23, 0x28	; 40
     d3a:	6c a7       	std	Y+44, r22	; 0x2c
     d3c:	7d a7       	std	Y+45, r23	; 0x2d
     d3e:	1e a6       	std	Y+46, r1	; 0x2e
     d40:	88 8b       	std	Y+16, r24	; 0x10
     d42:	99 8b       	std	Y+17, r25	; 0x11
     d44:	2a 8b       	std	Y+18, r18	; 0x12
     d46:	90 e1       	ldi	r25, 0x10	; 16
     d48:	9b 8b       	std	Y+19, r25	; 0x13
     d4a:	4c 8b       	std	Y+20, r20	; 0x14
     d4c:	5d 8b       	std	Y+21, r21	; 0x15
     d4e:	88 8f       	std	Y+24, r24	; 0x18
     d50:	39 8f       	std	Y+25, r19	; 0x19
     d52:	1a 8e       	std	Y+26, r1	; 0x1a
     d54:	8c ec       	ldi	r24, 0xCC	; 204
     d56:	95 e2       	ldi	r25, 0x25	; 37
     d58:	8c 8f       	std	Y+28, r24	; 0x1c
     d5a:	9d 8f       	std	Y+29, r25	; 0x1d
     d5c:	1e 8e       	std	Y+30, r1	; 0x1e
     d5e:	68 ec       	ldi	r22, 0xC8	; 200
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	84 ef       	ldi	r24, 0xF4	; 244
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	b8 dc       	rcall	.-1680   	; 0x6d8 <tiny_calibration_synchronise_phase>
     d68:	88 ec       	ldi	r24, 0xC8	; 200
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     d70:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     d74:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <median_TRFCNT_delay>
     d78:	88 a1       	ldd	r24, Y+32	; 0x20
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	88 a3       	std	Y+32, r24	; 0x20
     d7e:	88 89       	ldd	r24, Y+16	; 0x10
     d80:	80 68       	ori	r24, 0x80	; 128
     d82:	88 8b       	std	Y+16, r24	; 0x10
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	08 95       	ret

00000d8c <tiny_dma_set_mode_2>:
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	12 e0       	ldi	r17, 0x02	; 2
     d94:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     d98:	db de       	rcall	.-586    	; 0xb50 <tiny_dma_flush>
     d9a:	c0 e0       	ldi	r28, 0x00	; 0
     d9c:	d1 e0       	ldi	r29, 0x01	; 1
     d9e:	1e aa       	std	Y+54, r1	; 0x36
     da0:	84 e2       	ldi	r24, 0x24	; 36
     da2:	88 ab       	std	Y+48, r24	; 0x30
     da4:	19 aa       	std	Y+49, r1	; 0x31
     da6:	39 e5       	ldi	r19, 0x59	; 89
     da8:	3a ab       	std	Y+50, r19	; 0x32
     daa:	1b ab       	std	Y+51, r17	; 0x33
     dac:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     db0:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     db4:	4c ab       	std	Y+52, r20	; 0x34
     db6:	5d ab       	std	Y+53, r21	; 0x35
     db8:	4b ea       	ldi	r20, 0xAB	; 171
     dba:	53 e2       	ldi	r21, 0x23	; 35
     dbc:	48 af       	std	Y+56, r20	; 0x38
     dbe:	59 af       	std	Y+57, r21	; 0x39
     dc0:	1a ae       	std	Y+58, r1	; 0x3a
     dc2:	9b e3       	ldi	r25, 0x3B	; 59
     dc4:	9c af       	std	Y+60, r25	; 0x3c
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     dcc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     dd0:	28 a9       	ldd	r18, Y+48	; 0x30
     dd2:	20 68       	ori	r18, 0x80	; 128
     dd4:	28 ab       	std	Y+48, r18	; 0x30
     dd6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     dda:	e0 e4       	ldi	r30, 0x40	; 64
     ddc:	f1 e0       	ldi	r31, 0x01	; 1
     dde:	80 83       	st	Z, r24
     de0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     de4:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     de8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dec:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     df0:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     df4:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     df8:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     dfc:	2a e9       	ldi	r18, 0x9A	; 154
     dfe:	31 e2       	ldi	r19, 0x21	; 33
     e00:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e04:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e08:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e0c:	29 e3       	ldi	r18, 0x39	; 57
     e0e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e12:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e16:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e1a:	90 81       	ld	r25, Z
     e1c:	90 68       	ori	r25, 0x80	; 128
     e1e:	90 83       	st	Z, r25
     e20:	18 8a       	std	Y+16, r1	; 0x10
     e22:	90 e4       	ldi	r25, 0x40	; 64
     e24:	98 8b       	std	Y+16, r25	; 0x10
     e26:	88 8b       	std	Y+16, r24	; 0x10
     e28:	19 8a       	std	Y+17, r1	; 0x11
     e2a:	45 e9       	ldi	r20, 0x95	; 149
     e2c:	4a 8b       	std	Y+18, r20	; 0x12
     e2e:	90 e1       	ldi	r25, 0x10	; 16
     e30:	9b 8b       	std	Y+19, r25	; 0x13
     e32:	2e ee       	ldi	r18, 0xEE	; 238
     e34:	32 e0       	ldi	r19, 0x02	; 2
     e36:	2c 8b       	std	Y+20, r18	; 0x14
     e38:	3d 8b       	std	Y+21, r19	; 0x15
     e3a:	88 8f       	std	Y+24, r24	; 0x18
     e3c:	19 8f       	std	Y+25, r17	; 0x19
     e3e:	1a 8e       	std	Y+26, r1	; 0x1a
     e40:	6c ec       	ldi	r22, 0xCC	; 204
     e42:	75 e2       	ldi	r23, 0x25	; 37
     e44:	6c 8f       	std	Y+28, r22	; 0x1c
     e46:	7d 8f       	std	Y+29, r23	; 0x1d
     e48:	1e 8e       	std	Y+30, r1	; 0x1e
     e4a:	88 a3       	std	Y+32, r24	; 0x20
     e4c:	19 a2       	std	Y+33, r1	; 0x21
     e4e:	4a a3       	std	Y+34, r20	; 0x22
     e50:	9b a3       	std	Y+35, r25	; 0x23
     e52:	2c a3       	std	Y+36, r18	; 0x24
     e54:	3d a3       	std	Y+37, r19	; 0x25
     e56:	84 e3       	ldi	r24, 0x34	; 52
     e58:	88 a7       	std	Y+40, r24	; 0x28
     e5a:	19 a7       	std	Y+41, r17	; 0x29
     e5c:	1a a6       	std	Y+42, r1	; 0x2a
     e5e:	8a eb       	ldi	r24, 0xBA	; 186
     e60:	98 e2       	ldi	r25, 0x28	; 40
     e62:	8c a7       	std	Y+44, r24	; 0x2c
     e64:	9d a7       	std	Y+45, r25	; 0x2d
     e66:	1e a6       	std	Y+46, r1	; 0x2e
     e68:	68 ec       	ldi	r22, 0xC8	; 200
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	84 ef       	ldi	r24, 0xF4	; 244
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	33 dc       	rcall	.-1946   	; 0x6d8 <tiny_calibration_synchronise_phase>
     e72:	88 ec       	ldi	r24, 0xC8	; 200
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     e7a:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     e84:	88 89       	ldd	r24, Y+16	; 0x10
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	88 8b       	std	Y+16, r24	; 0x10
     e8a:	88 a1       	ldd	r24, Y+32	; 0x20
     e8c:	80 68       	ori	r24, 0x80	; 128
     e8e:	88 a3       	std	Y+32, r24	; 0x20
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	08 95       	ret

00000e98 <tiny_dma_set_mode_3>:
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	13 e0       	ldi	r17, 0x03	; 3
     ea0:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     ea4:	55 de       	rcall	.-854    	; 0xb50 <tiny_dma_flush>
     ea6:	c0 e0       	ldi	r28, 0x00	; 0
     ea8:	d1 e0       	ldi	r29, 0x01	; 1
     eaa:	18 a2       	std	Y+32, r1	; 0x20
     eac:	50 e4       	ldi	r21, 0x40	; 64
     eae:	58 a3       	std	Y+32, r21	; 0x20
     eb0:	84 e0       	ldi	r24, 0x04	; 4
     eb2:	88 a3       	std	Y+32, r24	; 0x20
     eb4:	19 a2       	std	Y+33, r1	; 0x21
     eb6:	1a a2       	std	Y+34, r1	; 0x22
     eb8:	4b e4       	ldi	r20, 0x4B	; 75
     eba:	4b a3       	std	Y+35, r20	; 0x23
     ebc:	1c a2       	std	Y+36, r1	; 0x24
     ebe:	1d a2       	std	Y+37, r1	; 0x25
     ec0:	1e a2       	std	Y+38, r1	; 0x26
     ec2:	8a e0       	ldi	r24, 0x0A	; 10
     ec4:	90 e2       	ldi	r25, 0x20	; 32
     ec6:	88 a7       	std	Y+40, r24	; 0x28
     ec8:	99 a7       	std	Y+41, r25	; 0x29
     eca:	1a a6       	std	Y+42, r1	; 0x2a
     ecc:	30 ea       	ldi	r19, 0xA0	; 160
     ece:	3c a7       	std	Y+44, r19	; 0x2c
     ed0:	28 e0       	ldi	r18, 0x08	; 8
     ed2:	2d a7       	std	Y+45, r18	; 0x2d
     ed4:	1e a6       	std	Y+46, r1	; 0x2e
     ed6:	88 a1       	ldd	r24, Y+32	; 0x20
     ed8:	80 6a       	ori	r24, 0xA0	; 160
     eda:	88 a3       	std	Y+32, r24	; 0x20
     edc:	85 e5       	ldi	r24, 0x55	; 85
     ede:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     ee2:	1e aa       	std	Y+54, r1	; 0x36
     ee4:	84 e2       	ldi	r24, 0x24	; 36
     ee6:	88 ab       	std	Y+48, r24	; 0x30
     ee8:	19 aa       	std	Y+49, r1	; 0x31
     eea:	69 e5       	ldi	r22, 0x59	; 89
     eec:	6a ab       	std	Y+50, r22	; 0x32
     eee:	1b ab       	std	Y+51, r17	; 0x33
     ef0:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <dacBuf_len>
     ef4:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <dacBuf_len+0x1>
     ef8:	ec ab       	std	Y+52, r30	; 0x34
     efa:	fd ab       	std	Y+53, r31	; 0x35
     efc:	ea e9       	ldi	r30, 0x9A	; 154
     efe:	f1 e2       	ldi	r31, 0x21	; 33
     f00:	e8 af       	std	Y+56, r30	; 0x38
     f02:	f9 af       	std	Y+57, r31	; 0x39
     f04:	1a ae       	std	Y+58, r1	; 0x3a
     f06:	99 e3       	ldi	r25, 0x39	; 57
     f08:	9c af       	std	Y+60, r25	; 0x3c
     f0a:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f0e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f12:	98 a9       	ldd	r25, Y+48	; 0x30
     f14:	90 68       	ori	r25, 0x80	; 128
     f16:	98 ab       	std	Y+48, r25	; 0x30
     f18:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     f1c:	e0 e4       	ldi	r30, 0x40	; 64
     f1e:	f1 e0       	ldi	r31, 0x01	; 1
     f20:	80 83       	st	Z, r24
     f22:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f26:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f30:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     f34:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     f38:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     f3c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     f40:	6b ea       	ldi	r22, 0xAB	; 171
     f42:	73 e2       	ldi	r23, 0x23	; 35
     f44:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f48:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f4c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f50:	9b e3       	ldi	r25, 0x3B	; 59
     f52:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f56:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f5a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f5e:	90 81       	ld	r25, Z
     f60:	90 68       	ori	r25, 0x80	; 128
     f62:	90 83       	st	Z, r25
     f64:	18 8a       	std	Y+16, r1	; 0x10
     f66:	58 8b       	std	Y+16, r21	; 0x10
     f68:	88 8b       	std	Y+16, r24	; 0x10
     f6a:	19 8a       	std	Y+17, r1	; 0x11
     f6c:	85 e9       	ldi	r24, 0x95	; 149
     f6e:	8a 8b       	std	Y+18, r24	; 0x12
     f70:	4b 8b       	std	Y+19, r20	; 0x13
     f72:	8e ee       	ldi	r24, 0xEE	; 238
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	8c 8b       	std	Y+20, r24	; 0x14
     f78:	9d 8b       	std	Y+21, r25	; 0x15
     f7a:	38 8f       	std	Y+24, r19	; 0x18
     f7c:	29 8f       	std	Y+25, r18	; 0x19
     f7e:	1a 8e       	std	Y+26, r1	; 0x1a
     f80:	8c ec       	ldi	r24, 0xCC	; 204
     f82:	95 e2       	ldi	r25, 0x25	; 37
     f84:	8c 8f       	std	Y+28, r24	; 0x1c
     f86:	9d 8f       	std	Y+29, r25	; 0x1d
     f88:	1e 8e       	std	Y+30, r1	; 0x1e
     f8a:	68 ec       	ldi	r22, 0xC8	; 200
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	84 ef       	ldi	r24, 0xF4	; 244
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	a2 db       	rcall	.-2236   	; 0x6d8 <tiny_calibration_synchronise_phase>
     f94:	88 ec       	ldi	r24, 0xC8	; 200
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     f9c:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     fa6:	88 89       	ldd	r24, Y+16	; 0x10
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	88 8b       	std	Y+16, r24	; 0x10
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	08 95       	ret

00000fb4 <tiny_dma_set_mode_4>:
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	14 e0       	ldi	r17, 0x04	; 4
     fbc:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     fc0:	c7 dd       	rcall	.-1138   	; 0xb50 <tiny_dma_flush>
     fc2:	c0 e0       	ldi	r28, 0x00	; 0
     fc4:	d1 e0       	ldi	r29, 0x01	; 1
     fc6:	18 aa       	std	Y+48, r1	; 0x30
     fc8:	80 e4       	ldi	r24, 0x40	; 64
     fca:	88 ab       	std	Y+48, r24	; 0x30
     fcc:	18 ab       	std	Y+48, r17	; 0x30
     fce:	19 aa       	std	Y+49, r1	; 0x31
     fd0:	1a aa       	std	Y+50, r1	; 0x32
     fd2:	3b e4       	ldi	r19, 0x4B	; 75
     fd4:	3b ab       	std	Y+51, r19	; 0x33
     fd6:	1c aa       	std	Y+52, r1	; 0x34
     fd8:	1d aa       	std	Y+53, r1	; 0x35
     fda:	1e aa       	std	Y+54, r1	; 0x36
     fdc:	8a e0       	ldi	r24, 0x0A	; 10
     fde:	90 e2       	ldi	r25, 0x20	; 32
     fe0:	88 af       	std	Y+56, r24	; 0x38
     fe2:	99 af       	std	Y+57, r25	; 0x39
     fe4:	1a ae       	std	Y+58, r1	; 0x3a
     fe6:	50 ea       	ldi	r21, 0xA0	; 160
     fe8:	5c af       	std	Y+60, r21	; 0x3c
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     ff0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ff4:	98 a9       	ldd	r25, Y+48	; 0x30
     ff6:	90 6a       	ori	r25, 0xA0	; 160
     ff8:	98 ab       	std	Y+48, r25	; 0x30
     ffa:	95 e5       	ldi	r25, 0x55	; 85
     ffc:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1000:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1004:	e0 e4       	ldi	r30, 0x40	; 64
    1006:	f1 e0       	ldi	r31, 0x01	; 1
    1008:	94 e2       	ldi	r25, 0x24	; 36
    100a:	90 83       	st	Z, r25
    100c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1010:	29 e5       	ldi	r18, 0x59	; 89
    1012:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1016:	22 e0       	ldi	r18, 0x02	; 2
    1018:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    101c:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
    1020:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1024:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1028:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    102c:	6b ea       	ldi	r22, 0xAB	; 171
    102e:	73 e2       	ldi	r23, 0x23	; 35
    1030:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1034:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1038:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    103c:	2b e3       	ldi	r18, 0x3B	; 59
    103e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1042:	23 e0       	ldi	r18, 0x03	; 3
    1044:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1048:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    104c:	20 81       	ld	r18, Z
    104e:	20 68       	ori	r18, 0x80	; 128
    1050:	20 83       	st	Z, r18
    1052:	98 8b       	std	Y+16, r25	; 0x10
    1054:	19 8a       	std	Y+17, r1	; 0x11
    1056:	45 e9       	ldi	r20, 0x95	; 149
    1058:	4a 8b       	std	Y+18, r20	; 0x12
    105a:	3b 8b       	std	Y+19, r19	; 0x13
    105c:	2e ee       	ldi	r18, 0xEE	; 238
    105e:	32 e0       	ldi	r19, 0x02	; 2
    1060:	2c 8b       	std	Y+20, r18	; 0x14
    1062:	3d 8b       	std	Y+21, r19	; 0x15
    1064:	58 8f       	std	Y+24, r21	; 0x18
    1066:	89 8f       	std	Y+25, r24	; 0x19
    1068:	1a 8e       	std	Y+26, r1	; 0x1a
    106a:	6c ec       	ldi	r22, 0xCC	; 204
    106c:	75 e2       	ldi	r23, 0x25	; 37
    106e:	6c 8f       	std	Y+28, r22	; 0x1c
    1070:	7d 8f       	std	Y+29, r23	; 0x1d
    1072:	1e 8e       	std	Y+30, r1	; 0x1e
    1074:	98 a3       	std	Y+32, r25	; 0x20
    1076:	19 a2       	std	Y+33, r1	; 0x21
    1078:	4a a3       	std	Y+34, r20	; 0x22
    107a:	9a e4       	ldi	r25, 0x4A	; 74
    107c:	9b a3       	std	Y+35, r25	; 0x23
    107e:	2c a3       	std	Y+36, r18	; 0x24
    1080:	3d a3       	std	Y+37, r19	; 0x25
    1082:	93 ec       	ldi	r25, 0xC3	; 195
    1084:	98 a7       	std	Y+40, r25	; 0x28
    1086:	89 a7       	std	Y+41, r24	; 0x29
    1088:	1a a6       	std	Y+42, r1	; 0x2a
    108a:	8a eb       	ldi	r24, 0xBA	; 186
    108c:	98 e2       	ldi	r25, 0x28	; 40
    108e:	8c a7       	std	Y+44, r24	; 0x2c
    1090:	9d a7       	std	Y+45, r25	; 0x2d
    1092:	1e a6       	std	Y+46, r1	; 0x2e
    1094:	68 ec       	ldi	r22, 0xC8	; 200
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	84 ef       	ldi	r24, 0xF4	; 244
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	1d db       	rcall	.-2502   	; 0x6d8 <tiny_calibration_synchronise_phase>
    109e:	88 ec       	ldi	r24, 0xC8	; 200
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    10a6:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    10b0:	88 89       	ldd	r24, Y+16	; 0x10
    10b2:	80 68       	ori	r24, 0x80	; 128
    10b4:	88 8b       	std	Y+16, r24	; 0x10
    10b6:	88 a1       	ldd	r24, Y+32	; 0x20
    10b8:	80 68       	ori	r24, 0x80	; 128
    10ba:	88 a3       	std	Y+32, r24	; 0x20
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	08 95       	ret

000010c4 <tiny_dma_set_mode_5>:
    10c4:	ff cf       	rjmp	.-2      	; 0x10c4 <tiny_dma_set_mode_5>

000010c6 <tiny_dma_set_mode_6>:
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	86 e0       	ldi	r24, 0x06	; 6
    10cc:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    10d0:	3f dd       	rcall	.-1410   	; 0xb50 <tiny_dma_flush>
    10d2:	c0 e0       	ldi	r28, 0x00	; 0
    10d4:	d1 e0       	ldi	r29, 0x01	; 1
    10d6:	1e aa       	std	Y+54, r1	; 0x36
    10d8:	84 e2       	ldi	r24, 0x24	; 36
    10da:	88 ab       	std	Y+48, r24	; 0x30
    10dc:	19 aa       	std	Y+49, r1	; 0x31
    10de:	39 e5       	ldi	r19, 0x59	; 89
    10e0:	3a ab       	std	Y+50, r19	; 0x32
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	9b ab       	std	Y+51, r25	; 0x33
    10e6:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    10ea:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    10ee:	4c ab       	std	Y+52, r20	; 0x34
    10f0:	5d ab       	std	Y+53, r21	; 0x35
    10f2:	4a e9       	ldi	r20, 0x9A	; 154
    10f4:	51 e2       	ldi	r21, 0x21	; 33
    10f6:	48 af       	std	Y+56, r20	; 0x38
    10f8:	59 af       	std	Y+57, r21	; 0x39
    10fa:	1a ae       	std	Y+58, r1	; 0x3a
    10fc:	29 e3       	ldi	r18, 0x39	; 57
    10fe:	2c af       	std	Y+60, r18	; 0x3c
    1100:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1104:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1108:	28 a9       	ldd	r18, Y+48	; 0x30
    110a:	20 68       	ori	r18, 0x80	; 128
    110c:	28 ab       	std	Y+48, r18	; 0x30
    110e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1112:	e0 e4       	ldi	r30, 0x40	; 64
    1114:	f1 e0       	ldi	r31, 0x01	; 1
    1116:	80 83       	st	Z, r24
    1118:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    111c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1120:	32 e0       	ldi	r19, 0x02	; 2
    1122:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1126:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    112a:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    112e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1132:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1136:	4b ea       	ldi	r20, 0xAB	; 171
    1138:	53 e2       	ldi	r21, 0x23	; 35
    113a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    113e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1142:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1146:	2b e3       	ldi	r18, 0x3B	; 59
    1148:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    114c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1150:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1154:	20 81       	ld	r18, Z
    1156:	20 68       	ori	r18, 0x80	; 128
    1158:	20 83       	st	Z, r18
    115a:	18 8a       	std	Y+16, r1	; 0x10
    115c:	20 e4       	ldi	r18, 0x40	; 64
    115e:	28 8b       	std	Y+16, r18	; 0x10
    1160:	88 8b       	std	Y+16, r24	; 0x10
    1162:	99 8b       	std	Y+17, r25	; 0x11
    1164:	95 e9       	ldi	r25, 0x95	; 149
    1166:	9a 8b       	std	Y+18, r25	; 0x12
    1168:	90 e1       	ldi	r25, 0x10	; 16
    116a:	9b 8b       	std	Y+19, r25	; 0x13
    116c:	4c ed       	ldi	r20, 0xDC	; 220
    116e:	55 e0       	ldi	r21, 0x05	; 5
    1170:	4c 8b       	std	Y+20, r20	; 0x14
    1172:	5d 8b       	std	Y+21, r21	; 0x15
    1174:	88 8f       	std	Y+24, r24	; 0x18
    1176:	39 8f       	std	Y+25, r19	; 0x19
    1178:	1a 8e       	std	Y+26, r1	; 0x1a
    117a:	8c ec       	ldi	r24, 0xCC	; 204
    117c:	95 e2       	ldi	r25, 0x25	; 37
    117e:	8c 8f       	std	Y+28, r24	; 0x1c
    1180:	9d 8f       	std	Y+29, r25	; 0x1d
    1182:	1e 8e       	std	Y+30, r1	; 0x1e
    1184:	68 ec       	ldi	r22, 0xC8	; 200
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	84 ef       	ldi	r24, 0xF4	; 244
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	a5 da       	rcall	.-2742   	; 0x6d8 <tiny_calibration_synchronise_phase>
    118e:	80 e9       	ldi	r24, 0x90	; 144
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    1196:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    11a0:	88 89       	ldd	r24, Y+16	; 0x10
    11a2:	80 68       	ori	r24, 0x80	; 128
    11a4:	88 8b       	std	Y+16, r24	; 0x10
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <tiny_dma_set_mode_7>:
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	87 e0       	ldi	r24, 0x07	; 7
    11b2:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    11b6:	cc dc       	rcall	.-1640   	; 0xb50 <tiny_dma_flush>
    11b8:	c0 e0       	ldi	r28, 0x00	; 0
    11ba:	d1 e0       	ldi	r29, 0x01	; 1
    11bc:	1e aa       	std	Y+54, r1	; 0x36
    11be:	94 e2       	ldi	r25, 0x24	; 36
    11c0:	98 ab       	std	Y+48, r25	; 0x30
    11c2:	19 aa       	std	Y+49, r1	; 0x31
    11c4:	39 e5       	ldi	r19, 0x59	; 89
    11c6:	3a ab       	std	Y+50, r19	; 0x32
    11c8:	83 e0       	ldi	r24, 0x03	; 3
    11ca:	8b ab       	std	Y+51, r24	; 0x33
    11cc:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    11d0:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    11d4:	4c ab       	std	Y+52, r20	; 0x34
    11d6:	5d ab       	std	Y+53, r21	; 0x35
    11d8:	4a e9       	ldi	r20, 0x9A	; 154
    11da:	51 e2       	ldi	r21, 0x21	; 33
    11dc:	48 af       	std	Y+56, r20	; 0x38
    11de:	59 af       	std	Y+57, r21	; 0x39
    11e0:	1a ae       	std	Y+58, r1	; 0x3a
    11e2:	29 e3       	ldi	r18, 0x39	; 57
    11e4:	2c af       	std	Y+60, r18	; 0x3c
    11e6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    11ea:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    11ee:	28 a9       	ldd	r18, Y+48	; 0x30
    11f0:	20 68       	ori	r18, 0x80	; 128
    11f2:	28 ab       	std	Y+48, r18	; 0x30
    11f4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    11f8:	e0 e4       	ldi	r30, 0x40	; 64
    11fa:	f1 e0       	ldi	r31, 0x01	; 1
    11fc:	90 83       	st	Z, r25
    11fe:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1202:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1206:	32 e0       	ldi	r19, 0x02	; 2
    1208:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    120c:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    1210:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1214:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1218:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    121c:	4b ea       	ldi	r20, 0xAB	; 171
    121e:	53 e2       	ldi	r21, 0x23	; 35
    1220:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1224:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1228:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    122c:	2b e3       	ldi	r18, 0x3B	; 59
    122e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1232:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1236:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    123a:	20 81       	ld	r18, Z
    123c:	20 68       	ori	r18, 0x80	; 128
    123e:	20 83       	st	Z, r18
    1240:	18 8a       	std	Y+16, r1	; 0x10
    1242:	20 e4       	ldi	r18, 0x40	; 64
    1244:	28 8b       	std	Y+16, r18	; 0x10
    1246:	25 e2       	ldi	r18, 0x25	; 37
    1248:	28 8b       	std	Y+16, r18	; 0x10
    124a:	89 8b       	std	Y+17, r24	; 0x11
    124c:	85 e9       	ldi	r24, 0x95	; 149
    124e:	8a 8b       	std	Y+18, r24	; 0x12
    1250:	80 e1       	ldi	r24, 0x10	; 16
    1252:	8b 8b       	std	Y+19, r24	; 0x13
    1254:	4c ed       	ldi	r20, 0xDC	; 220
    1256:	55 e0       	ldi	r21, 0x05	; 5
    1258:	4c 8b       	std	Y+20, r20	; 0x14
    125a:	5d 8b       	std	Y+21, r21	; 0x15
    125c:	98 8f       	std	Y+24, r25	; 0x18
    125e:	39 8f       	std	Y+25, r19	; 0x19
    1260:	1a 8e       	std	Y+26, r1	; 0x1a
    1262:	8c ec       	ldi	r24, 0xCC	; 204
    1264:	95 e2       	ldi	r25, 0x25	; 37
    1266:	8c 8f       	std	Y+28, r24	; 0x1c
    1268:	9d 8f       	std	Y+29, r25	; 0x1d
    126a:	1e 8e       	std	Y+30, r1	; 0x1e
    126c:	68 ec       	ldi	r22, 0xC8	; 200
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	84 ef       	ldi	r24, 0xF4	; 244
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	31 da       	rcall	.-2974   	; 0x6d8 <tiny_calibration_synchronise_phase>
    1276:	80 e9       	ldi	r24, 0x90	; 144
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    127e:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    1288:	88 89       	ldd	r24, Y+16	; 0x10
    128a:	80 68       	ori	r24, 0x80	; 128
    128c:	88 8b       	std	Y+16, r24	; 0x10
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <__vector_6>:
}

ISR(DMA_CH0_vect){
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
	DMA.INTFLAGS = 0x01;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch0_ran++;
    12ac:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    12b0:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <dma_ch0_ran>
    12ba:	90 93 7d 21 	sts	0x217D, r25	; 0x80217d <dma_ch0_ran+0x1>
	uds.dma_ch0_cntL = dma_ch0_ran & 0xff;
    12be:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    12c2:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    12c6:	ee e7       	ldi	r30, 0x7E	; 126
    12c8:	f1 e2       	ldi	r31, 0x21	; 33
    12ca:	87 8b       	std	Z+23, r24	; 0x17
	uds.dma_ch0_cntH = (dma_ch0_ran >> 8) & 0xff;
    12cc:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    12d0:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    12d4:	90 8f       	std	Z+24, r25	; 0x18
}
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	0f 90       	pop	r0
    12e4:	1f 90       	pop	r1
    12e6:	18 95       	reti

000012e8 <__vector_7>:

ISR(DMA_CH1_vect){
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
	DMA.INTFLAGS = 0x02;
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch1_ran++;
    1300:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    1304:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <dma_ch1_ran>
    130e:	90 93 7b 21 	sts	0x217B, r25	; 0x80217b <dma_ch1_ran+0x1>
	uds.dma_ch1_cntL = dma_ch1_ran & 0xff;
    1312:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    1316:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    131a:	ee e7       	ldi	r30, 0x7E	; 126
    131c:	f1 e2       	ldi	r31, 0x21	; 33
    131e:	81 8f       	std	Z+25, r24	; 0x19
	uds.dma_ch1_cntH = (dma_ch1_ran >> 8) & 0xff;
    1320:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    1324:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    1328:	92 8f       	std	Z+26, r25	; 0x1a
}
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    133c:	e0 e7       	ldi	r30, 0x70	; 112
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	83 81       	ldd	r24, Z+3	; 0x03
    1342:	8c 7f       	andi	r24, 0xFC	; 252
    1344:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    1346:	84 81       	ldd	r24, Z+4	; 0x04
    1348:	8c 7f       	andi	r24, 0xFC	; 252
    134a:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    134c:	80 81       	ld	r24, Z
    134e:	8d 7f       	andi	r24, 0xFD	; 253
    1350:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    1352:	e0 e8       	ldi	r30, 0x80	; 128
    1354:	f1 e0       	ldi	r31, 0x01	; 1
    1356:	80 ec       	ldi	r24, 0xC0	; 192
    1358:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    135a:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    135c:	88 ec       	ldi	r24, 0xC8	; 200
    135e:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1360:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b8 e0       	ldi	r27, 0x08	; 8
    1366:	34 e0       	ldi	r19, 0x04	; 4
    1368:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    136a:	23 e0       	ldi	r18, 0x03	; 3
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	2c 93       	st	X, r18
    1370:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1372:	14 96       	adiw	r26, 0x04	; 4
    1374:	1c 92       	st	X, r1
    1376:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1378:	85 ed       	ldi	r24, 0xD5	; 213
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	96 96       	adiw	r26, 0x26	; 38
    137e:	8d 93       	st	X+, r24
    1380:	9c 93       	st	X, r25
    1382:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1384:	16 96       	adiw	r26, 0x06	; 6
    1386:	1c 92       	st	X, r1
    1388:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    138a:	e0 e4       	ldi	r30, 0x40	; 64
    138c:	f8 e0       	ldi	r31, 0x08	; 8
    138e:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1390:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1392:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    1394:	86 a3       	std	Z+38, r24	; 0x26
    1396:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1398:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    139a:	e0 e6       	ldi	r30, 0x60	; 96
    139c:	f6 e0       	ldi	r31, 0x06	; 6
    139e:	80 81       	ld	r24, Z
    13a0:	80 61       	ori	r24, 0x10	; 16
    13a2:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    13a4:	e0 e4       	ldi	r30, 0x40	; 64
    13a6:	f9 e0       	ldi	r31, 0x09	; 9
    13a8:	83 e1       	ldi	r24, 0x13	; 19
    13aa:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    13ac:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    13b2:	a6 a3       	std	Z+38, r26	; 0x26
    13b4:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    13b6:	10 a6       	std	Z+40, r1	; 0x28
    13b8:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 83       	st	Z, r24
    13be:	08 95       	ret

000013c0 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    13c0:	1f 92       	push	r1
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	0f 92       	push	r0
    13c8:	11 24       	eor	r1, r1
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	ef 93       	push	r30
    13d8:	ff 93       	push	r31
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	1f 92       	push	r1
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    13ea:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    13ee:	87 30       	cpi	r24, 0x07	; 7
    13f0:	31 f4       	brne	.+12     	; 0x13fe <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    13f2:	e0 e0       	ldi	r30, 0x00	; 0
    13f4:	f2 e0       	ldi	r31, 0x02	; 2
    13f6:	84 a5       	ldd	r24, Z+44	; 0x2c
    13f8:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    13fa:	95 a5       	ldd	r25, Z+45	; 0x2d
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    13fe:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    1402:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <PSU_target>
    1406:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    1408:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    140c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	0c f4       	brge	.+2      	; 0x1418 <__vector_83+0x58>
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	99 23       	and	r25, r25
    141a:	c9 f0       	breq	.+50     	; 0x144e <__vector_83+0x8e>
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	2a 3f       	cpi	r18, 0xFA	; 250
    1420:	37 40       	sbci	r19, 0x07	; 7
    1422:	08 f0       	brcs	.+2      	; 0x1426 <__vector_83+0x66>
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	99 23       	and	r25, r25
    1428:	91 f0       	breq	.+36     	; 0x144e <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    142a:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    142e:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1432:	89 30       	cpi	r24, 0x09	; 9
    1434:	1c f4       	brge	.+6      	; 0x143c <__vector_83+0x7c>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <__vector_83+0x80>
    143c:	86 e0       	ldi	r24, 0x06	; 6
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	82 0f       	add	r24, r18
    1442:	93 1f       	adc	r25, r19
    1444:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1448:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    144c:	23 c0       	rjmp	.+70     	; 0x1494 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    144e:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1452:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	8f 3f       	cpi	r24, 0xFF	; 255
    145a:	0c f0       	brlt	.+2      	; 0x145e <__vector_83+0x9e>
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	99 23       	and	r25, r25
    1460:	c9 f0       	breq	.+50     	; 0x1494 <__vector_83+0xd4>
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	27 30       	cpi	r18, 0x07	; 7
    1466:	31 05       	cpc	r19, r1
    1468:	08 f4       	brcc	.+2      	; 0x146c <__vector_83+0xac>
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	99 23       	and	r25, r25
    146e:	91 f0       	breq	.+36     	; 0x1494 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1470:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1474:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1478:	88 3f       	cpi	r24, 0xF8	; 248
    147a:	1c f0       	brlt	.+6      	; 0x1482 <__vector_83+0xc2>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <__vector_83+0xc6>
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	48 1b       	sub	r20, r24
    148a:	59 0b       	sbc	r21, r25
    148c:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1490:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1494:	0f 90       	pop	r0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	ff 91       	pop	r31
    149c:	ef 91       	pop	r30
    149e:	9f 91       	pop	r25
    14a0:	8f 91       	pop	r24
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    14b4:	e0 e7       	ldi	r30, 0x70	; 112
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	83 81       	ldd	r24, Z+3	; 0x03
    14ba:	8f 7e       	andi	r24, 0xEF	; 239
    14bc:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    14be:	e0 e4       	ldi	r30, 0x40	; 64
    14c0:	f6 e0       	ldi	r31, 0x06	; 6
    14c2:	80 81       	ld	r24, Z
    14c4:	8a 6a       	ori	r24, 0xAA	; 170
    14c6:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14cc:	88 e5       	ldi	r24, 0x58	; 88
    14ce:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLA = USART_RXCINTLVL_HI_gc;
    14d0:	e0 ea       	ldi	r30, 0xA0	; 160
    14d2:	f8 e0       	ldi	r31, 0x08	; 8
    14d4:	80 e3       	ldi	r24, 0x30	; 48
    14d6:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    14d8:	84 ec       	ldi	r24, 0xC4	; 196
    14da:	85 83       	std	Z+5, r24	; 0x05
	#if OVERCLOCK == 48
		USARTC0.BAUDCTRLA = 7;  	//BSEL = fper/(2fbaud) -1;  48/(2*3) - 1 = 7
    14dc:	87 e0       	ldi	r24, 0x07	; 7
    14de:	86 83       	std	Z+6, r24	; 0x06
	#else
		USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
	#endif
	USARTC0.BAUDCTRLB = 0x00;// USART_BSCALE0_bm goes to 1.5MHz for some reason;
    14e0:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    14e2:	88 e1       	ldi	r24, 0x18	; 24
    14e4:	84 83       	std	Z+4, r24	; 0x04
    14e6:	08 95       	ret

000014e8 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    14e8:	e0 e7       	ldi	r30, 0x70	; 112
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	83 81       	ldd	r24, Z+3	; 0x03
    14ee:	87 7f       	andi	r24, 0xF7	; 247
    14f0:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    14f2:	e0 ec       	ldi	r30, 0xC0	; 192
    14f4:	f8 e0       	ldi	r31, 0x08	; 8
    14f6:	80 e4       	ldi	r24, 0x40	; 64
    14f8:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    14fa:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14fc:	88 e5       	ldi	r24, 0x58	; 88
    14fe:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1502:	08 95       	ret

00001504 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
	asm("nop");
    150e:	00 00       	nop
}
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <__vector_25>:

ISR(USARTC0_RXC_vect){
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
    1524:	8f 93       	push	r24
    1526:	ef 93       	push	r30
    1528:	ff 93       	push	r31
	unsigned char temp = USARTC0.DATA;
    152a:	e0 ea       	ldi	r30, 0xA0	; 160
    152c:	f8 e0       	ldi	r31, 0x08	; 8
    152e:	80 81       	ld	r24, Z
	USARTC0.DATA = temp;
    1530:	80 83       	st	Z, r24
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	8f 91       	pop	r24
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1542:	9f b7       	in	r25, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	e8 2f       	mov	r30, r24
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	e0 59       	subi	r30, 0x90	; 144
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	60 95       	com	r22
    1550:	80 81       	ld	r24, Z
    1552:	68 23       	and	r22, r24
    1554:	60 83       	st	Z, r22
    1556:	9f bf       	out	0x3f, r25	; 63
    1558:	08 95       	ret

0000155a <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    155a:	86 30       	cpi	r24, 0x06	; 6
    155c:	11 f0       	breq	.+4      	; 0x1562 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1562:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1564:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1568:	81 fd       	sbrc	r24, 1
    156a:	26 c0       	rjmp	.+76     	; 0x15b8 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    156c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    156e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1570:	e0 e5       	ldi	r30, 0x50	; 80
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	82 60       	ori	r24, 0x02	; 2
    1578:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    157a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    157c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    157e:	81 ff       	sbrs	r24, 1
    1580:	fd cf       	rjmp	.-6      	; 0x157c <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1582:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1584:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1586:	a0 e5       	ldi	r26, 0x50	; 80
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	16 96       	adiw	r26, 0x06	; 6
    158c:	8c 91       	ld	r24, X
    158e:	16 97       	sbiw	r26, 0x06	; 6
    1590:	89 7f       	andi	r24, 0xF9	; 249
    1592:	16 96       	adiw	r26, 0x06	; 6
    1594:	8c 93       	st	X, r24
    1596:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1598:	e0 e6       	ldi	r30, 0x60	; 96
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 e8       	ldi	r24, 0x80	; 128
    159e:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    15a0:	8b eb       	ldi	r24, 0xBB	; 187
    15a2:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    15a4:	16 96       	adiw	r26, 0x06	; 6
    15a6:	8c 91       	ld	r24, X
    15a8:	16 97       	sbiw	r26, 0x06	; 6
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	16 96       	adiw	r26, 0x06	; 6
    15ae:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    15b0:	80 81       	ld	r24, Z
    15b2:	81 60       	ori	r24, 0x01	; 1
    15b4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15b6:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    15b8:	63 60       	ori	r22, 0x03	; 3
    15ba:	84 e4       	ldi	r24, 0x44	; 68
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0c d5       	rcall	.+2584   	; 0x1fd8 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    15c0:	60 e4       	ldi	r22, 0x40	; 64
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	be cf       	rjmp	.-132    	; 0x1542 <sysclk_enable_module>
    15c6:	08 95       	ret

000015c8 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    15c8:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <udi_vendor_alternate_setting>
    15cc:	08 95       	ret

000015ce <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    15ce:	1c d1       	rcall	.+568    	; 0x1808 <udc_get_interface_desc>
    15d0:	fc 01       	movw	r30, r24
    15d2:	83 81       	ldd	r24, Z+3	; 0x03
    15d4:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    15d8:	81 11       	cpse	r24, r1
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    15dc:	cc c9       	rjmp	.-3176   	; 0x976 <main_vendor_enable>
    15de:	08 95       	ret
			return false;
		}
	}
	return true;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
}
    15e2:	08 95       	ret

000015e4 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    15e4:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <udi_vendor_alternate_setting>
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    15ec:	01 ca       	rjmp	.-3070   	; 0x9f0 <main_vendor_disable>
    15ee:	08 95       	ret

000015f0 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    15f0:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    15f4:	88 23       	and	r24, r24
    15f6:	4c f4       	brge	.+18     	; 0x160a <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15f8:	80 76       	andi	r24, 0x60	; 96
    15fa:	80 34       	cpi	r24, 0x40	; 64
    15fc:	a9 f4       	brne	.+42     	; 0x1628 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    15fe:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1602:	81 11       	cpse	r24, r1
    1604:	13 c0       	rjmp	.+38     	; 0x162c <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1606:	f9 c9       	rjmp	.-3086   	; 0x9fa <main_setup_in_received>
    1608:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    160a:	80 76       	andi	r24, 0x60	; 96
    160c:	80 34       	cpi	r24, 0x40	; 64
    160e:	81 f4       	brne	.+32     	; 0x1630 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1610:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1614:	81 11       	cpse	r24, r1
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1618:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    161c:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1620:	89 2b       	or	r24, r25
    1622:	51 f0       	breq	.+20     	; 0x1638 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1624:	e8 c9       	rjmp	.-3120   	; 0x9f6 <main_setup_out_received>
    1626:	08 95       	ret
		}
	}
	return false; // Not supported request
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	08 95       	ret
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	08 95       	ret
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	08 95       	ret
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret
    1638:	80 e0       	ldi	r24, 0x00	; 0
}
    163a:	08 95       	ret

0000163c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    163c:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1640:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1644:	01 90       	ld	r0, Z+
    1646:	f0 81       	ld	r31, Z
    1648:	e0 2d       	mov	r30, r0
    164a:	22 81       	ldd	r18, Z+2	; 0x02
    164c:	33 81       	ldd	r19, Z+3	; 0x03
    164e:	2e 0f       	add	r18, r30
    1650:	3f 1f       	adc	r19, r31
    1652:	fc 01       	movw	r30, r24
    1654:	40 81       	ld	r20, Z
    1656:	e4 0f       	add	r30, r20
    1658:	f1 1d       	adc	r31, r1
    165a:	e2 17       	cp	r30, r18
    165c:	f3 07       	cpc	r31, r19
    165e:	b8 f4       	brcc	.+46     	; 0x168e <udc_next_desc_in_iface+0x52>
    1660:	81 81       	ldd	r24, Z+1	; 0x01
    1662:	84 30       	cpi	r24, 0x04	; 4
    1664:	b9 f0       	breq	.+46     	; 0x1694 <udc_next_desc_in_iface+0x58>
    1666:	86 13       	cpse	r24, r22
    1668:	09 c0       	rjmp	.+18     	; 0x167c <udc_next_desc_in_iface+0x40>
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <udc_next_desc_in_iface+0x3a>
    166c:	81 81       	ldd	r24, Z+1	; 0x01
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	a1 f0       	breq	.+40     	; 0x169a <udc_next_desc_in_iface+0x5e>
    1672:	86 13       	cpse	r24, r22
    1674:	03 c0       	rjmp	.+6      	; 0x167c <udc_next_desc_in_iface+0x40>
    1676:	8e 2f       	mov	r24, r30
    1678:	9f 2f       	mov	r25, r31
    167a:	08 95       	ret
    167c:	80 81       	ld	r24, Z
    167e:	e8 0f       	add	r30, r24
    1680:	f1 1d       	adc	r31, r1
    1682:	e2 17       	cp	r30, r18
    1684:	f3 07       	cpc	r31, r19
    1686:	90 f3       	brcs	.-28     	; 0x166c <udc_next_desc_in_iface+0x30>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	08 95       	ret
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	08 95       	ret
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	08 95       	ret
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	08 95       	ret

000016a0 <udc_valid_address>:
    16a0:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    16a4:	8f 77       	andi	r24, 0x7F	; 127
    16a6:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <udd_set_address>
    16aa:	08 95       	ret

000016ac <udc_update_iface_desc>:
    16ac:	90 91 a2 20 	lds	r25, 0x20A2	; 0x8020a2 <udc_num_configuration>
    16b0:	99 23       	and	r25, r25
    16b2:	81 f1       	breq	.+96     	; 0x1714 <udc_update_iface_desc+0x68>
    16b4:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    16b8:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    16bc:	01 90       	ld	r0, Z+
    16be:	f0 81       	ld	r31, Z
    16c0:	e0 2d       	mov	r30, r0
    16c2:	94 81       	ldd	r25, Z+4	; 0x04
    16c4:	89 17       	cp	r24, r25
    16c6:	40 f5       	brcc	.+80     	; 0x1718 <udc_update_iface_desc+0x6c>
    16c8:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    16cc:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    16d0:	22 81       	ldd	r18, Z+2	; 0x02
    16d2:	33 81       	ldd	r19, Z+3	; 0x03
    16d4:	2e 0f       	add	r18, r30
    16d6:	3f 1f       	adc	r19, r31
    16d8:	e2 17       	cp	r30, r18
    16da:	f3 07       	cpc	r31, r19
    16dc:	f8 f4       	brcc	.+62     	; 0x171c <udc_update_iface_desc+0x70>
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	94 30       	cpi	r25, 0x04	; 4
    16e2:	61 f4       	brne	.+24     	; 0x16fc <udc_update_iface_desc+0x50>
    16e4:	92 81       	ldd	r25, Z+2	; 0x02
    16e6:	98 13       	cpse	r25, r24
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <udc_update_iface_desc+0x50>
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	96 13       	cpse	r25, r22
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <udc_update_iface_desc+0x50>
    16f0:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    16f4:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	08 95       	ret
    16fc:	90 81       	ld	r25, Z
    16fe:	e9 0f       	add	r30, r25
    1700:	f1 1d       	adc	r31, r1
    1702:	e2 17       	cp	r30, r18
    1704:	f3 07       	cpc	r31, r19
    1706:	58 f3       	brcs	.-42     	; 0x16de <udc_update_iface_desc+0x32>
    1708:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    170c:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	08 95       	ret
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	08 95       	ret
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret

00001720 <udc_iface_disable>:
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	c8 2f       	mov	r28, r24
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	be df       	rcall	.-132    	; 0x16ac <udc_update_iface_desc>
    1730:	18 2f       	mov	r17, r24
    1732:	88 23       	and	r24, r24
    1734:	81 f1       	breq	.+96     	; 0x1796 <udc_iface_disable+0x76>
    1736:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    173a:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    173e:	ec 2f       	mov	r30, r28
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	12 96       	adiw	r26, 0x02	; 2
    1748:	8d 91       	ld	r24, X+
    174a:	9c 91       	ld	r25, X
    174c:	13 97       	sbiw	r26, 0x03	; 3
    174e:	e8 0f       	add	r30, r24
    1750:	f9 1f       	adc	r31, r25
    1752:	e0 80       	ld	r14, Z
    1754:	f1 80       	ldd	r15, Z+1	; 0x01
    1756:	d7 01       	movw	r26, r14
    1758:	16 96       	adiw	r26, 0x06	; 6
    175a:	ed 91       	ld	r30, X+
    175c:	fc 91       	ld	r31, X
    175e:	17 97       	sbiw	r26, 0x07	; 7
    1760:	09 95       	icall
    1762:	68 2f       	mov	r22, r24
    1764:	8c 2f       	mov	r24, r28
    1766:	a2 df       	rcall	.-188    	; 0x16ac <udc_update_iface_desc>
    1768:	18 2f       	mov	r17, r24
    176a:	88 23       	and	r24, r24
    176c:	a1 f0       	breq	.+40     	; 0x1796 <udc_iface_disable+0x76>
    176e:	c0 91 9d 20 	lds	r28, 0x209D	; 0x80209d <udc_ptr_iface>
    1772:	d0 91 9e 20 	lds	r29, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    1776:	65 e0       	ldi	r22, 0x05	; 5
    1778:	ce 01       	movw	r24, r28
    177a:	60 df       	rcall	.-320    	; 0x163c <udc_next_desc_in_iface>
    177c:	ec 01       	movw	r28, r24
    177e:	89 2b       	or	r24, r25
    1780:	21 f0       	breq	.+8      	; 0x178a <udc_iface_disable+0x6a>
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <udd_ep_free>
    1788:	f6 cf       	rjmp	.-20     	; 0x1776 <udc_iface_disable+0x56>
    178a:	d7 01       	movw	r26, r14
    178c:	12 96       	adiw	r26, 0x02	; 2
    178e:	ed 91       	ld	r30, X+
    1790:	fc 91       	ld	r31, X
    1792:	13 97       	sbiw	r26, 0x03	; 3
    1794:	09 95       	icall
    1796:	81 2f       	mov	r24, r17
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	08 95       	ret

000017a4 <udc_iface_enable>:
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	18 2f       	mov	r17, r24
    17ac:	7f df       	rcall	.-258    	; 0x16ac <udc_update_iface_desc>
    17ae:	88 23       	and	r24, r24
    17b0:	39 f1       	breq	.+78     	; 0x1800 <udc_iface_enable+0x5c>
    17b2:	c0 91 9d 20 	lds	r28, 0x209D	; 0x80209d <udc_ptr_iface>
    17b6:	d0 91 9e 20 	lds	r29, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    17ba:	65 e0       	ldi	r22, 0x05	; 5
    17bc:	ce 01       	movw	r24, r28
    17be:	3e df       	rcall	.-388    	; 0x163c <udc_next_desc_in_iface>
    17c0:	ec 01       	movw	r28, r24
    17c2:	89 2b       	or	r24, r25
    17c4:	41 f0       	breq	.+16     	; 0x17d6 <udc_iface_enable+0x32>
    17c6:	4c 81       	ldd	r20, Y+4	; 0x04
    17c8:	5d 81       	ldd	r21, Y+5	; 0x05
    17ca:	6b 81       	ldd	r22, Y+3	; 0x03
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	fb d7       	rcall	.+4086   	; 0x27c6 <udd_ep_alloc>
    17d0:	81 11       	cpse	r24, r1
    17d2:	f3 cf       	rjmp	.-26     	; 0x17ba <udc_iface_enable+0x16>
    17d4:	15 c0       	rjmp	.+42     	; 0x1800 <udc_iface_enable+0x5c>
    17d6:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    17da:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    17de:	e1 2f       	mov	r30, r17
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	12 96       	adiw	r26, 0x02	; 2
    17e8:	8d 91       	ld	r24, X+
    17ea:	9c 91       	ld	r25, X
    17ec:	13 97       	sbiw	r26, 0x03	; 3
    17ee:	e8 0f       	add	r30, r24
    17f0:	f9 1f       	adc	r31, r25
    17f2:	01 90       	ld	r0, Z+
    17f4:	f0 81       	ld	r31, Z
    17f6:	e0 2d       	mov	r30, r0
    17f8:	01 90       	ld	r0, Z+
    17fa:	f0 81       	ld	r31, Z
    17fc:	e0 2d       	mov	r30, r0
    17fe:	09 95       	icall
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	08 95       	ret

00001808 <udc_get_interface_desc>:
    1808:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <udc_ptr_iface>
    180c:	90 91 9e 20 	lds	r25, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    1810:	08 95       	ret

00001812 <udc_start>:
    1812:	65 c7       	rjmp	.+3786   	; 0x26de <udd_enable>
    1814:	08 95       	ret

00001816 <udc_reset>:
    1816:	cf 93       	push	r28
    1818:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    181c:	88 23       	and	r24, r24
    181e:	c1 f0       	breq	.+48     	; 0x1850 <udc_reset+0x3a>
    1820:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1824:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1828:	01 90       	ld	r0, Z+
    182a:	f0 81       	ld	r31, Z
    182c:	e0 2d       	mov	r30, r0
    182e:	84 81       	ldd	r24, Z+4	; 0x04
    1830:	88 23       	and	r24, r24
    1832:	71 f0       	breq	.+28     	; 0x1850 <udc_reset+0x3a>
    1834:	c0 e0       	ldi	r28, 0x00	; 0
    1836:	8c 2f       	mov	r24, r28
    1838:	73 df       	rcall	.-282    	; 0x1720 <udc_iface_disable>
    183a:	cf 5f       	subi	r28, 0xFF	; 255
    183c:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1840:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1844:	01 90       	ld	r0, Z+
    1846:	f0 81       	ld	r31, Z
    1848:	e0 2d       	mov	r30, r0
    184a:	84 81       	ldd	r24, Z+4	; 0x04
    184c:	c8 17       	cp	r28, r24
    184e:	98 f3       	brcs	.-26     	; 0x1836 <udc_reset+0x20>
    1850:	10 92 a2 20 	sts	0x20A2, r1	; 0x8020a2 <udc_num_configuration>
    1854:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <udc_device_status>
    1858:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <udc_device_status+0x1>
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1860:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1862:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1866:	88 23       	and	r24, r24
    1868:	49 f1       	breq	.+82     	; 0x18bc <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    186a:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    186e:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1872:	ed 91       	ld	r30, X+
    1874:	fc 91       	ld	r31, X
    1876:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1878:	84 81       	ldd	r24, Z+4	; 0x04
    187a:	88 23       	and	r24, r24
    187c:	f9 f0       	breq	.+62     	; 0x18bc <udc_sof_notify+0x5c>
    187e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1880:	ec 2f       	mov	r30, r28
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	12 96       	adiw	r26, 0x02	; 2
    188a:	8d 91       	ld	r24, X+
    188c:	9c 91       	ld	r25, X
    188e:	13 97       	sbiw	r26, 0x03	; 3
    1890:	e8 0f       	add	r30, r24
    1892:	f9 1f       	adc	r31, r25
    1894:	01 90       	ld	r0, Z+
    1896:	f0 81       	ld	r31, Z
    1898:	e0 2d       	mov	r30, r0
    189a:	00 84       	ldd	r0, Z+8	; 0x08
    189c:	f1 85       	ldd	r31, Z+9	; 0x09
    189e:	e0 2d       	mov	r30, r0
    18a0:	30 97       	sbiw	r30, 0x00	; 0
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    18a4:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    18a6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18a8:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    18ac:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    18b0:	ed 91       	ld	r30, X+
    18b2:	fc 91       	ld	r31, X
    18b4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18b6:	84 81       	ldd	r24, Z+4	; 0x04
    18b8:	c8 17       	cp	r28, r24
    18ba:	10 f3       	brcs	.-60     	; 0x1880 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    18c8:	ea e9       	ldi	r30, 0x9A	; 154
    18ca:	f3 e2       	ldi	r31, 0x23	; 35
    18cc:	12 86       	std	Z+10, r1	; 0x0a
    18ce:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    18d0:	14 86       	std	Z+12, r1	; 0x0c
    18d2:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    18d4:	16 86       	std	Z+14, r1	; 0x0e
    18d6:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	88 23       	and	r24, r24
    18de:	3c f4       	brge	.+14     	; 0x18ee <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    18e0:	40 91 a0 23 	lds	r20, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    18e4:	50 91 a1 23 	lds	r21, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    18e8:	45 2b       	or	r20, r21
    18ea:	09 f4       	brne	.+2      	; 0x18ee <udc_process_setup+0x2e>
    18ec:	69 c3       	rjmp	.+1746   	; 0x1fc0 <udc_process_setup+0x700>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    18ee:	98 2f       	mov	r25, r24
    18f0:	90 76       	andi	r25, 0x60	; 96
    18f2:	90 34       	cpi	r25, 0x40	; 64
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <udc_process_setup+0x38>
    18f6:	0a c1       	rjmp	.+532    	; 0x1b0c <udc_process_setup+0x24c>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    18f8:	e0 91 9b 23 	lds	r30, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    18fc:	4e 2f       	mov	r20, r30
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	fa 01       	movw	r30, r20
    1902:	e0 5a       	subi	r30, 0xA0	; 160
    1904:	f1 09       	sbc	r31, r1
    1906:	e9 30       	cpi	r30, 0x09	; 9
    1908:	f1 05       	cpc	r31, r1
    190a:	08 f0       	brcs	.+2      	; 0x190e <udc_process_setup+0x4e>
    190c:	ff c0       	rjmp	.+510    	; 0x1b0c <udc_process_setup+0x24c>
    190e:	ea 5f       	subi	r30, 0xFA	; 250
    1910:	fe 4f       	sbci	r31, 0xFE	; 254
    1912:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    191c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1920:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1924:	ee e7       	ldi	r30, 0x7E	; 126
    1926:	f1 e2       	ldi	r31, 0x21	; 33
    1928:	85 87       	std	Z+13, r24	; 0x0d
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    192a:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    192e:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1932:	96 87       	std	Z+14, r25	; 0x0e
			uds.calValNeg = cali_value_negative_gradient;
    1934:	80 91 72 21 	lds	r24, 0x2172	; 0x802172 <cali_value_negative_gradient>
    1938:	87 87       	std	Z+15, r24	; 0x0f
			uds.calValPos = cali_value_positive_gradient;
    193a:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <cali_value_positive_gradient>
    193e:	80 8b       	std	Z+16, r24	; 0x10
			uds.CALA = DFLLRC2M.CALA;
    1940:	a8 e6       	ldi	r26, 0x68	; 104
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	12 96       	adiw	r26, 0x02	; 2
    1946:	8c 91       	ld	r24, X
    1948:	12 97       	sbiw	r26, 0x02	; 2
    194a:	81 8b       	std	Z+17, r24	; 0x11
			uds.CALB = DFLLRC2M.CALB;
    194c:	13 96       	adiw	r26, 0x03	; 3
    194e:	8c 91       	ld	r24, X
    1950:	82 8b       	std	Z+18, r24	; 0x12
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    1952:	60 91 a0 23 	lds	r22, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1956:	70 91 a1 23 	lds	r23, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    195a:	cf 01       	movw	r24, r30
    195c:	2d d7       	rcall	.+3674   	; 0x27b8 <udd_set_setup_payload>
    195e:	34 c3       	rjmp	.+1640   	; 0x1fc8 <udc_process_setup+0x708>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1960:	e0 e0       	ldi	r30, 0x00	; 0
    1962:	f8 e0       	ldi	r31, 0x08	; 8
    1964:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1966:	ca e9       	ldi	r28, 0x9A	; 154
    1968:	d3 e2       	ldi	r29, 0x23	; 35
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	9b 81       	ldd	r25, Y+3	; 0x03
    196e:	86 ab       	std	Z+54, r24	; 0x36
    1970:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	8f 70       	andi	r24, 0x0F	; 15
    1976:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1978:	6e 81       	ldd	r22, Y+6	; 0x06
    197a:	7f 81       	ldd	r23, Y+7	; 0x07
    197c:	8a e9       	ldi	r24, 0x9A	; 154
    197e:	91 e2       	ldi	r25, 0x21	; 33
    1980:	1b d7       	rcall	.+3638   	; 0x27b8 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1982:	8e 81       	ldd	r24, Y+6	; 0x06
    1984:	9f 81       	ldd	r25, Y+7	; 0x07
    1986:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    198a:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    198e:	82 17       	cp	r24, r18
    1990:	93 07       	cpc	r25, r19
    1992:	09 f4       	brne	.+2      	; 0x1996 <udc_process_setup+0xd6>
    1994:	19 c3       	rjmp	.+1586   	; 0x1fc8 <udc_process_setup+0x708>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1996:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    199a:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				tiny_dma_delayed_set(global_mode);
    199e:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19a2:	f3 d8       	rcall	.-3610   	; 0xb8a <tiny_dma_delayed_set>
    19a4:	11 c3       	rjmp	.+1570   	; 0x1fc8 <udc_process_setup+0x708>
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    19a6:	e0 e4       	ldi	r30, 0x40	; 64
    19a8:	f8 e0       	ldi	r31, 0x08	; 8
    19aa:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    19ac:	ca e9       	ldi	r28, 0x9A	; 154
    19ae:	d3 e2       	ldi	r29, 0x23	; 35
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	9b 81       	ldd	r25, Y+3	; 0x03
    19b4:	86 ab       	std	Z+54, r24	; 0x36
    19b6:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	8f 70       	andi	r24, 0x0F	; 15
    19bc:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    19be:	6e 81       	ldd	r22, Y+6	; 0x06
    19c0:	7f 81       	ldd	r23, Y+7	; 0x07
    19c2:	8b ea       	ldi	r24, 0xAB	; 171
    19c4:	93 e2       	ldi	r25, 0x23	; 35
    19c6:	f8 d6       	rcall	.+3568   	; 0x27b8 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    19c8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ca:	9f 81       	ldd	r25, Y+7	; 0x07
    19cc:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    19d0:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    19d4:	82 17       	cp	r24, r18
    19d6:	93 07       	cpc	r25, r19
    19d8:	09 f4       	brne	.+2      	; 0x19dc <udc_process_setup+0x11c>
    19da:	f6 c2       	rjmp	.+1516   	; 0x1fc8 <udc_process_setup+0x708>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    19dc:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    19e0:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				tiny_dma_delayed_set(global_mode);
    19e4:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19e8:	d0 d8       	rcall	.-3680   	; 0xb8a <tiny_dma_delayed_set>
    19ea:	ee c2       	rjmp	.+1500   	; 0x1fc8 <udc_process_setup+0x708>
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    19ec:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    19f0:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    19f4:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    19f8:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <PSU_target>
    19fc:	e5 c2       	rjmp	.+1482   	; 0x1fc8 <udc_process_setup+0x708>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    19fe:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1a02:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1a06:	e0 c2       	rjmp	.+1472   	; 0x1fc8 <udc_process_setup+0x708>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1a08:	e0 91 9c 23 	lds	r30, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1a0c:	f0 91 9d 23 	lds	r31, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1a10:	e8 30       	cpi	r30, 0x08	; 8
    1a12:	f1 05       	cpc	r31, r1
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <udc_process_setup+0x158>
    1a16:	7a c0       	rjmp	.+244    	; 0x1b0c <udc_process_setup+0x24c>
    1a18:	e1 5f       	subi	r30, 0xF1	; 241
    1a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1c:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	18 d8       	rcall	.-4048   	; 0xa56 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a26:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a2a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <tiny_adc_ch0setup>
					tiny_dma_delayed_set(0);
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	ac d8       	rcall	.-3752   	; 0xb8a <tiny_dma_delayed_set>
    1a32:	ca c2       	rjmp	.+1428   	; 0x1fc8 <udc_process_setup+0x708>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	0e d8       	rcall	.-4068   	; 0xa56 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a3a:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a3e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <tiny_adc_ch0setup>
					tiny_dma_delayed_set(1);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	a2 d8       	rcall	.-3772   	; 0xb8a <tiny_dma_delayed_set>
    1a46:	c0 c2       	rjmp	.+1408   	; 0x1fc8 <udc_process_setup+0x708>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	04 d8       	rcall	.-4088   	; 0xa56 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a4e:	ca e9       	ldi	r28, 0x9A	; 154
    1a50:	d3 e2       	ldi	r29, 0x23	; 35
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	0e 94 ff 04 	call	0x9fe	; 0x9fe <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <tiny_adc_ch1setup>
					tiny_dma_delayed_set(2);
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	94 d8       	rcall	.-3800   	; 0xb8a <tiny_dma_delayed_set>
    1a62:	b2 c2       	rjmp	.+1380   	; 0x1fc8 <udc_process_setup+0x708>
					break;
				case 3:  //Mode 3
					tiny_dma_delayed_set(3);
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	91 d8       	rcall	.-3806   	; 0xb8a <tiny_dma_delayed_set>
    1a68:	af c2       	rjmp	.+1374   	; 0x1fc8 <udc_process_setup+0x708>
					break;
				case 4:  //Mode 4
					tiny_dma_delayed_set(4);
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	8e d8       	rcall	.-3812   	; 0xb8a <tiny_dma_delayed_set>
    1a6e:	ac c2       	rjmp	.+1368   	; 0x1fc8 <udc_process_setup+0x708>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	0e 94 2b 05 	call	0xa56	; 0xa56 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a78:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a7c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <tiny_adc_ch0setup>
					tiny_dma_delayed_set(5);
    1a80:	85 e0       	ldi	r24, 0x05	; 5
    1a82:	83 d8       	rcall	.-3834   	; 0xb8a <tiny_dma_delayed_set>
    1a84:	a1 c2       	rjmp	.+1346   	; 0x1fc8 <udc_process_setup+0x708>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1a86:	61 e0       	ldi	r22, 0x01	; 1
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	0e 94 2b 05 	call	0xa56	; 0xa56 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a8e:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a92:	0e 94 ff 04 	call	0x9fe	; 0x9fe <tiny_adc_ch0setup>
					tiny_dma_delayed_set(6);
    1a96:	86 e0       	ldi	r24, 0x06	; 6
    1a98:	78 d8       	rcall	.-3856   	; 0xb8a <tiny_dma_delayed_set>
    1a9a:	96 c2       	rjmp	.+1324   	; 0x1fc8 <udc_process_setup+0x708>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	0e 94 2b 05 	call	0xa56	; 0xa56 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1aa4:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1aa8:	80 68       	ori	r24, 0x80	; 128
    1aaa:	0e 94 ff 04 	call	0x9fe	; 0x9fe <tiny_adc_ch0setup>
					tiny_dma_delayed_set(7);
    1aae:	87 e0       	ldi	r24, 0x07	; 7
    1ab0:	6c d8       	rcall	.-3880   	; 0xb8a <tiny_dma_delayed_set>
    1ab2:	8a c2       	rjmp	.+1300   	; 0x1fc8 <udc_process_setup+0x708>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1ab4:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1ab8:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1abc:	85 c2       	rjmp	.+1290   	; 0x1fc8 <udc_process_setup+0x708>
			return 1;
		case 0xa7:  //Soft Reset
		//Fill EEPROM buffer with value
		
		if(udd_g_ctrlreq.req.wValue){
    1abe:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1ac2:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1ac6:	89 2b       	or	r24, r25
    1ac8:	91 f0       	breq	.+36     	; 0x1aee <udc_process_setup+0x22e>
			eeprom_safe_read();
    1aca:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_safe_read>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
    1ace:	80 e2       	ldi	r24, 0x20	; 32
    1ad0:	e8 ea       	ldi	r30, 0xA8	; 168
    1ad2:	fb e2       	ldi	r31, 0x2B	; 43
    1ad4:	ab ea       	ldi	r26, 0xAB	; 171
    1ad6:	b5 e2       	ldi	r27, 0x25	; 37
    1ad8:	01 90       	ld	r0, Z+
    1ada:	0d 92       	st	X+, r0
    1adc:	8a 95       	dec	r24
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <udc_process_setup+0x218>
			eeprom_buffer_write[0] = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 ab 25 	sts	0x25AB, r24	; 0x8025ab <eeprom_buffer_write>
			eeprom_safe_write();
    1ae6:	0e 94 9a 03 	call	0x734	; 0x734 <eeprom_safe_write>
			eeprom_safe_read();
    1aea:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_safe_read>
		}
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1aee:	e9 e7       	ldi	r30, 0x79	; 121
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	88 ed       	ldi	r24, 0xD8	; 216
    1af6:	f8 94       	cli
    1af8:	84 bf       	out	0x34, r24	; 52
    1afa:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		case 0xa8:  //Firmware Version Request
			udd_set_setup_payload(&firmver, udd_g_ctrlreq.req.wLength);
    1afc:	60 91 a0 23 	lds	r22, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1b00:	70 91 a1 23 	lds	r23, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1b04:	8a e8       	ldi	r24, 0x8A	; 138
    1b06:	90 e2       	ldi	r25, 0x20	; 32
    1b08:	57 d6       	rcall	.+3246   	; 0x27b8 <udd_set_setup_payload>
    1b0a:	5e c2       	rjmp	.+1212   	; 0x1fc8 <udc_process_setup+0x708>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1b0c:	91 11       	cpse	r25, r1
    1b0e:	e1 c1       	rjmp	.+962    	; 0x1ed2 <udc_process_setup+0x612>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1b10:	22 23       	and	r18, r18
    1b12:	0c f0       	brlt	.+2      	; 0x1b16 <udc_process_setup+0x256>
    1b14:	05 c1       	rjmp	.+522    	; 0x1d20 <udc_process_setup+0x460>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1b16:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1b1a:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1b1e:	21 15       	cp	r18, r1
    1b20:	31 05       	cpc	r19, r1
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <udc_process_setup+0x266>
    1b24:	d6 c1       	rjmp	.+940    	; 0x1ed2 <udc_process_setup+0x612>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b26:	8f 71       	andi	r24, 0x1F	; 31
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <udc_process_setup+0x26c>
    1b2a:	a3 c0       	rjmp	.+326    	; 0x1c72 <udc_process_setup+0x3b2>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b2c:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1b30:	96 30       	cpi	r25, 0x06	; 6
    1b32:	79 f0       	breq	.+30     	; 0x1b52 <udc_process_setup+0x292>
    1b34:	98 30       	cpi	r25, 0x08	; 8
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <udc_process_setup+0x27a>
    1b38:	92 c0       	rjmp	.+292    	; 0x1c5e <udc_process_setup+0x39e>
    1b3a:	91 11       	cpse	r25, r1
    1b3c:	9a c0       	rjmp	.+308    	; 0x1c72 <udc_process_setup+0x3b2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1b3e:	22 30       	cpi	r18, 0x02	; 2
    1b40:	31 05       	cpc	r19, r1
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <udc_process_setup+0x286>
    1b44:	c6 c1       	rjmp	.+908    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1b46:	62 e0       	ldi	r22, 0x02	; 2
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	86 ea       	ldi	r24, 0xA6	; 166
    1b4c:	90 e2       	ldi	r25, 0x20	; 32
    1b4e:	34 d6       	rcall	.+3176   	; 0x27b8 <udd_set_setup_payload>
    1b50:	3d c2       	rjmp	.+1146   	; 0x1fcc <udc_process_setup+0x70c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b52:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1b56:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b5a:	29 2f       	mov	r18, r25
    1b5c:	33 27       	eor	r19, r19
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	a9 f0       	breq	.+42     	; 0x1b8e <udc_process_setup+0x2ce>
    1b64:	24 f4       	brge	.+8      	; 0x1b6e <udc_process_setup+0x2ae>
    1b66:	21 30       	cpi	r18, 0x01	; 1
    1b68:	31 05       	cpc	r19, r1
    1b6a:	41 f0       	breq	.+16     	; 0x1b7c <udc_process_setup+0x2bc>
    1b6c:	a9 c1       	rjmp	.+850    	; 0x1ec0 <udc_process_setup+0x600>
    1b6e:	23 30       	cpi	r18, 0x03	; 3
    1b70:	31 05       	cpc	r19, r1
    1b72:	d9 f1       	breq	.+118    	; 0x1bea <udc_process_setup+0x32a>
    1b74:	2f 30       	cpi	r18, 0x0F	; 15
    1b76:	31 05       	cpc	r19, r1
    1b78:	51 f1       	breq	.+84     	; 0x1bce <udc_process_setup+0x30e>
    1b7a:	a2 c1       	rjmp	.+836    	; 0x1ec0 <udc_process_setup+0x600>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1b7c:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1b80:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1b84:	dc 01       	movw	r26, r24
    1b86:	6c 91       	ld	r22, X
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	16 d6       	rcall	.+3116   	; 0x27b8 <udd_set_setup_payload>
    1b8c:	59 c0       	rjmp	.+178    	; 0x1c40 <udc_process_setup+0x380>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1b8e:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1b92:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1b96:	21 89       	ldd	r18, Z+17	; 0x11
    1b98:	82 17       	cp	r24, r18
    1b9a:	08 f0       	brcs	.+2      	; 0x1b9e <udc_process_setup+0x2de>
    1b9c:	9a c1       	rjmp	.+820    	; 0x1ed2 <udc_process_setup+0x612>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1b9e:	99 27       	eor	r25, r25
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1bac:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1bb0:	e8 0f       	add	r30, r24
    1bb2:	f9 1f       	adc	r31, r25
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1bb8:	fc 01       	movw	r30, r24
    1bba:	62 81       	ldd	r22, Z+2	; 0x02
    1bbc:	73 81       	ldd	r23, Z+3	; 0x03
    1bbe:	fc d5       	rcall	.+3064   	; 0x27b8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1bc0:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    1bc4:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	81 83       	std	Z+1, r24	; 0x01
    1bcc:	39 c0       	rjmp	.+114    	; 0x1c40 <udc_process_setup+0x380>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1bce:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1bd2:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <udc_process_setup+0x31c>
    1bda:	7b c1       	rjmp	.+758    	; 0x1ed2 <udc_process_setup+0x612>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1bdc:	dc 01       	movw	r26, r24
    1bde:	12 96       	adiw	r26, 0x02	; 2
    1be0:	6d 91       	ld	r22, X+
    1be2:	7c 91       	ld	r23, X
    1be4:	13 97       	sbiw	r26, 0x03	; 3
    1be6:	e8 d5       	rcall	.+3024   	; 0x27b8 <udd_set_setup_payload>
    1be8:	2b c0       	rjmp	.+86     	; 0x1c40 <udc_process_setup+0x380>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1bea:	99 27       	eor	r25, r25
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	91 05       	cpc	r25, r1
    1bf0:	71 f0       	breq	.+28     	; 0x1c0e <udc_process_setup+0x34e>
    1bf2:	38 f0       	brcs	.+14     	; 0x1c02 <udc_process_setup+0x342>
    1bf4:	02 97       	sbiw	r24, 0x02	; 2
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <udc_process_setup+0x33a>
    1bf8:	6c c1       	rjmp	.+728    	; 0x1ed2 <udc_process_setup+0x612>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1bfa:	2a e6       	ldi	r18, 0x6A	; 106
    1bfc:	30 e2       	ldi	r19, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1bfe:	88 e0       	ldi	r24, 0x08	; 8
    1c00:	09 c0       	rjmp	.+18     	; 0x1c14 <udc_process_setup+0x354>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1c02:	64 e0       	ldi	r22, 0x04	; 4
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	8c e7       	ldi	r24, 0x7C	; 124
    1c08:	90 e2       	ldi	r25, 0x20	; 32
    1c0a:	d6 d5       	rcall	.+2988   	; 0x27b8 <udd_set_setup_payload>
    1c0c:	19 c0       	rjmp	.+50     	; 0x1c40 <udc_process_setup+0x380>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1c0e:	23 e7       	ldi	r18, 0x73	; 115
    1c10:	30 e2       	ldi	r19, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1c12:	87 e0       	ldi	r24, 0x07	; 7
    1c14:	42 2f       	mov	r20, r18
    1c16:	aa e5       	ldi	r26, 0x5A	; 90
    1c18:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1c1a:	e2 2f       	mov	r30, r18
    1c1c:	f3 2f       	mov	r31, r19
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1c1e:	21 91       	ld	r18, Z+
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	2d 93       	st	X+, r18
    1c24:	3d 93       	st	X+, r19
    1c26:	9e 2f       	mov	r25, r30
    1c28:	94 1b       	sub	r25, r20
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1c2a:	98 17       	cp	r25, r24
    1c2c:	c0 f3       	brcs	.-16     	; 0x1c1e <udc_process_setup+0x35e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1c2e:	68 2f       	mov	r22, r24
    1c30:	66 0f       	add	r22, r22
    1c32:	6e 5f       	subi	r22, 0xFE	; 254
    1c34:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	88 e5       	ldi	r24, 0x58	; 88
    1c3c:	90 e2       	ldi	r25, 0x20	; 32
    1c3e:	bc d5       	rcall	.+2936   	; 0x27b8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1c40:	ea e9       	ldi	r30, 0x9A	; 154
    1c42:	f3 e2       	ldi	r31, 0x23	; 35
    1c44:	86 81       	ldd	r24, Z+6	; 0x06
    1c46:	97 81       	ldd	r25, Z+7	; 0x07
    1c48:	22 85       	ldd	r18, Z+10	; 0x0a
    1c4a:	33 85       	ldd	r19, Z+11	; 0x0b
    1c4c:	82 17       	cp	r24, r18
    1c4e:	93 07       	cpc	r25, r19
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <udc_process_setup+0x394>
    1c52:	bc c1       	rjmp	.+888    	; 0x1fcc <udc_process_setup+0x70c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1c54:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <udd_g_ctrlreq+0xa>
    1c58:	90 93 a5 23 	sts	0x23A5, r25	; 0x8023a5 <udd_g_ctrlreq+0xb>
    1c5c:	b7 c1       	rjmp	.+878    	; 0x1fcc <udc_process_setup+0x70c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1c5e:	21 30       	cpi	r18, 0x01	; 1
    1c60:	31 05       	cpc	r19, r1
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <udc_process_setup+0x3a6>
    1c64:	36 c1       	rjmp	.+620    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	82 ea       	ldi	r24, 0xA2	; 162
    1c6c:	90 e2       	ldi	r25, 0x20	; 32
    1c6e:	a4 d5       	rcall	.+2888   	; 0x27b8 <udd_set_setup_payload>
    1c70:	ad c1       	rjmp	.+858    	; 0x1fcc <udc_process_setup+0x70c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	e1 f5       	brne	.+120    	; 0x1cee <udc_process_setup+0x42e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c76:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1c7a:	9a 30       	cpi	r25, 0x0A	; 10
    1c7c:	c1 f5       	brne	.+112    	; 0x1cee <udc_process_setup+0x42e>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1c7e:	21 30       	cpi	r18, 0x01	; 1
    1c80:	31 05       	cpc	r19, r1
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <udc_process_setup+0x3c6>
    1c84:	26 c1       	rjmp	.+588    	; 0x1ed2 <udc_process_setup+0x612>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c86:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1c8a:	88 23       	and	r24, r24
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <udc_process_setup+0x3d0>
    1c8e:	21 c1       	rjmp	.+578    	; 0x1ed2 <udc_process_setup+0x612>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c90:	c0 91 9e 23 	lds	r28, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1c94:	d0 91 9f 23 	lds	r29, 0x239F	; 0x80239f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c98:	00 91 9f 20 	lds	r16, 0x209F	; 0x80209f <udc_ptr_conf>
    1c9c:	10 91 a0 20 	lds	r17, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1ca0:	d8 01       	movw	r26, r16
    1ca2:	ed 91       	ld	r30, X+
    1ca4:	fc 91       	ld	r31, X
    1ca6:	84 81       	ldd	r24, Z+4	; 0x04
    1ca8:	c8 17       	cp	r28, r24
    1caa:	08 f0       	brcs	.+2      	; 0x1cae <udc_process_setup+0x3ee>
    1cac:	12 c1       	rjmp	.+548    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	8c 2f       	mov	r24, r28
    1cb2:	fc dc       	rcall	.-1544   	; 0x16ac <udc_update_iface_desc>
    1cb4:	88 23       	and	r24, r24
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <udc_process_setup+0x3fa>
    1cb8:	0c c1       	rjmp	.+536    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1cba:	ce 01       	movw	r24, r28
    1cbc:	99 27       	eor	r25, r25
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	d8 01       	movw	r26, r16
    1cc4:	12 96       	adiw	r26, 0x02	; 2
    1cc6:	ed 91       	ld	r30, X+
    1cc8:	fc 91       	ld	r31, X
    1cca:	13 97       	sbiw	r26, 0x03	; 3
    1ccc:	e8 0f       	add	r30, r24
    1cce:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	f0 81       	ld	r31, Z
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	86 81       	ldd	r24, Z+6	; 0x06
    1cd8:	97 81       	ldd	r25, Z+7	; 0x07
    1cda:	fc 01       	movw	r30, r24
    1cdc:	09 95       	icall
    1cde:	80 93 a4 20 	sts	0x20A4, r24	; 0x8020a4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	84 ea       	ldi	r24, 0xA4	; 164
    1ce8:	90 e2       	ldi	r25, 0x20	; 32
    1cea:	66 d5       	rcall	.+2764   	; 0x27b8 <udd_set_setup_payload>
    1cec:	6f c1       	rjmp	.+734    	; 0x1fcc <udc_process_setup+0x70c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <udc_process_setup+0x434>
    1cf2:	ef c0       	rjmp	.+478    	; 0x1ed2 <udc_process_setup+0x612>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cf4:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	e4 c0       	rjmp	.+456    	; 0x1ec4 <udc_process_setup+0x604>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <udc_process_setup+0x444>
    1d02:	e7 c0       	rjmp	.+462    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1d04:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1d08:	d3 d5       	rcall	.+2982   	; 0x28b0 <udd_ep_is_halted>
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	80 93 9b 20 	sts	0x209B, r24	; 0x80209b <udc_ep_status.5686>
    1d10:	90 93 9c 20 	sts	0x209C, r25	; 0x80209c <udc_ep_status.5686+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	8b e9       	ldi	r24, 0x9B	; 155
    1d1a:	90 e2       	ldi	r25, 0x20	; 32
    1d1c:	4d d5       	rcall	.+2714   	; 0x27b8 <udd_set_setup_payload>
    1d1e:	56 c1       	rjmp	.+684    	; 0x1fcc <udc_process_setup+0x70c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1d20:	8f 71       	andi	r24, 0x1F	; 31
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <udc_process_setup+0x466>
    1d24:	83 c0       	rjmp	.+262    	; 0x1e2c <udc_process_setup+0x56c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d26:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1d2a:	93 30       	cpi	r25, 0x03	; 3
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <udc_process_setup+0x470>
    1d2e:	cc c0       	rjmp	.+408    	; 0x1ec8 <udc_process_setup+0x608>
    1d30:	18 f4       	brcc	.+6      	; 0x1d38 <udc_process_setup+0x478>
    1d32:	91 30       	cpi	r25, 0x01	; 1
    1d34:	a1 f0       	breq	.+40     	; 0x1d5e <udc_process_setup+0x49e>
    1d36:	7a c0       	rjmp	.+244    	; 0x1e2c <udc_process_setup+0x56c>
    1d38:	95 30       	cpi	r25, 0x05	; 5
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <udc_process_setup+0x482>
    1d3c:	99 30       	cpi	r25, 0x09	; 9
    1d3e:	39 f1       	breq	.+78     	; 0x1d8e <udc_process_setup+0x4ce>
    1d40:	75 c0       	rjmp	.+234    	; 0x1e2c <udc_process_setup+0x56c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d42:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1d46:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1d4a:	89 2b       	or	r24, r25
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <udc_process_setup+0x490>
    1d4e:	c1 c0       	rjmp	.+386    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1d50:	80 e5       	ldi	r24, 0x50	; 80
    1d52:	9b e0       	ldi	r25, 0x0B	; 11
    1d54:	80 93 a6 23 	sts	0x23A6, r24	; 0x8023a6 <udd_g_ctrlreq+0xc>
    1d58:	90 93 a7 23 	sts	0x23A7, r25	; 0x8023a7 <udd_g_ctrlreq+0xd>
    1d5c:	37 c1       	rjmp	.+622    	; 0x1fcc <udc_process_setup+0x70c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d5e:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1d62:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1d66:	89 2b       	or	r24, r25
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <udc_process_setup+0x4ac>
    1d6a:	b3 c0       	rjmp	.+358    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1d6c:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1d70:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <udc_process_setup+0x4ba>
    1d78:	ac c0       	rjmp	.+344    	; 0x1ed2 <udc_process_setup+0x612>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1d7a:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <udc_device_status>
    1d7e:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <udc_device_status+0x1>
    1d82:	8d 7f       	andi	r24, 0xFD	; 253
    1d84:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <udc_device_status>
    1d88:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <udc_device_status+0x1>
    1d8c:	1f c1       	rjmp	.+574    	; 0x1fcc <udc_process_setup+0x70c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1d8e:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1d92:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1d96:	89 2b       	or	r24, r25
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <udc_process_setup+0x4dc>
    1d9a:	9b c0       	rjmp	.+310    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1d9c:	0a d5       	rcall	.+2580   	; 0x27b2 <udd_getaddress>
    1d9e:	88 23       	and	r24, r24
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <udc_process_setup+0x4e4>
    1da2:	97 c0       	rjmp	.+302    	; 0x1ed2 <udc_process_setup+0x612>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1da4:	20 91 9c 23 	lds	r18, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1da8:	30 91 9d 23 	lds	r19, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1dac:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1dae:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1db2:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1db6:	81 89       	ldd	r24, Z+17	; 0x11
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	82 17       	cp	r24, r18
    1dbc:	93 07       	cpc	r25, r19
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <udc_process_setup+0x502>
    1dc0:	88 c0       	rjmp	.+272    	; 0x1ed2 <udc_process_setup+0x612>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1dc2:	29 dd       	rcall	.-1454   	; 0x1816 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1dc4:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1dc8:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1dcc:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1dd0:	88 23       	and	r24, r24
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <udc_process_setup+0x516>
    1dd4:	fb c0       	rjmp	.+502    	; 0x1fcc <udc_process_setup+0x70c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1dd6:	99 27       	eor	r25, r25
    1dd8:	81 50       	subi	r24, 0x01	; 1
    1dda:	90 4c       	sbci	r25, 0xC0	; 192
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1de8:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1dec:	e8 0f       	add	r30, r24
    1dee:	f9 1f       	adc	r31, r25
    1df0:	e0 93 9f 20 	sts	0x209F, r30	; 0x80209f <udc_ptr_conf>
    1df4:	f0 93 a0 20 	sts	0x20A0, r31	; 0x8020a0 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1df8:	01 90       	ld	r0, Z+
    1dfa:	f0 81       	ld	r31, Z
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	84 81       	ldd	r24, Z+4	; 0x04
    1e00:	88 23       	and	r24, r24
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <udc_process_setup+0x546>
    1e04:	e3 c0       	rjmp	.+454    	; 0x1fcc <udc_process_setup+0x70c>
    1e06:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	8c 2f       	mov	r24, r28
    1e0c:	cb dc       	rcall	.-1642   	; 0x17a4 <udc_iface_enable>
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <udc_process_setup+0x554>
    1e12:	5f c0       	rjmp	.+190    	; 0x1ed2 <udc_process_setup+0x612>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1e14:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e16:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1e1a:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1e1e:	01 90       	ld	r0, Z+
    1e20:	f0 81       	ld	r31, Z
    1e22:	e0 2d       	mov	r30, r0
    1e24:	84 81       	ldd	r24, Z+4	; 0x04
    1e26:	c8 17       	cp	r28, r24
    1e28:	78 f3       	brcs	.-34     	; 0x1e08 <udc_process_setup+0x548>
    1e2a:	d0 c0       	rjmp	.+416    	; 0x1fcc <udc_process_setup+0x70c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	e1 f4       	brne	.+56     	; 0x1e68 <udc_process_setup+0x5a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e30:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1e34:	9b 30       	cpi	r25, 0x0B	; 11
    1e36:	c1 f4       	brne	.+48     	; 0x1e68 <udc_process_setup+0x5a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1e38:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1e3c:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1e40:	89 2b       	or	r24, r25
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <udc_process_setup+0x586>
    1e44:	46 c0       	rjmp	.+140    	; 0x1ed2 <udc_process_setup+0x612>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1e46:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1e4a:	88 23       	and	r24, r24
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <udc_process_setup+0x590>
    1e4e:	41 c0       	rjmp	.+130    	; 0x1ed2 <udc_process_setup+0x612>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e50:	ea e9       	ldi	r30, 0x9A	; 154
    1e52:	f3 e2       	ldi	r31, 0x23	; 35
    1e54:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1e56:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1e58:	8c 2f       	mov	r24, r28
    1e5a:	62 dc       	rcall	.-1852   	; 0x1720 <udc_iface_disable>
    1e5c:	88 23       	and	r24, r24
    1e5e:	c9 f1       	breq	.+114    	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1e60:	6d 2f       	mov	r22, r29
    1e62:	8c 2f       	mov	r24, r28
    1e64:	9f dc       	rcall	.-1730   	; 0x17a4 <udc_iface_enable>
    1e66:	33 c0       	rjmp	.+102    	; 0x1ece <udc_process_setup+0x60e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	99 f5       	brne	.+102    	; 0x1ed2 <udc_process_setup+0x612>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e6c:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	19 f0       	breq	.+6      	; 0x1e7a <udc_process_setup+0x5ba>
    1e74:	83 30       	cpi	r24, 0x03	; 3
    1e76:	89 f0       	breq	.+34     	; 0x1e9a <udc_process_setup+0x5da>
    1e78:	29 c0       	rjmp	.+82     	; 0x1ecc <udc_process_setup+0x60c>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e7a:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1e7e:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1e82:	89 2b       	or	r24, r25
    1e84:	31 f5       	brne	.+76     	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e86:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1e8a:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1e8e:	89 2b       	or	r24, r25
    1e90:	01 f5       	brne	.+64     	; 0x1ed2 <udc_process_setup+0x612>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e92:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1e96:	27 d5       	rcall	.+2638   	; 0x28e6 <udd_ep_clear_halt>
    1e98:	1a c0       	rjmp	.+52     	; 0x1ece <udc_process_setup+0x60e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e9a:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1e9e:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1ea2:	89 2b       	or	r24, r25
    1ea4:	b1 f4       	brne	.+44     	; 0x1ed2 <udc_process_setup+0x612>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1ea6:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1eaa:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1eae:	89 2b       	or	r24, r25
    1eb0:	81 f4       	brne	.+32     	; 0x1ed2 <udc_process_setup+0x612>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1eb2:	ca e9       	ldi	r28, 0x9A	; 154
    1eb4:	d3 e2       	ldi	r29, 0x23	; 35
    1eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb8:	05 d6       	rcall	.+3082   	; 0x2ac4 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	68 d6       	rcall	.+3280   	; 0x2b8e <udd_ep_set_halt>
    1ebe:	07 c0       	rjmp	.+14     	; 0x1ece <udc_process_setup+0x60e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <udc_process_setup+0x60e>
				break;
			}
		}
#endif
	}
	return false;
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <udc_process_setup+0x60e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <udc_process_setup+0x60e>
				break;
			}
		}
#endif
	}
	return false;
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1ece:	81 11       	cpse	r24, r1
    1ed0:	7e c0       	rjmp	.+252    	; 0x1fce <udc_process_setup+0x70e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1ed2:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    1ed6:	8f 71       	andi	r24, 0x1F	; 31
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	71 f5       	brne	.+92     	; 0x1f38 <udc_process_setup+0x678>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1edc:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1ee0:	88 23       	and	r24, r24
    1ee2:	51 f1       	breq	.+84     	; 0x1f38 <udc_process_setup+0x678>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ee4:	00 91 9e 23 	lds	r16, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1ee8:	10 91 9f 23 	lds	r17, 0x239F	; 0x80239f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1eec:	c0 91 9f 20 	lds	r28, 0x209F	; 0x80209f <udc_ptr_conf>
    1ef0:	d0 91 a0 20 	lds	r29, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1ef4:	e8 81       	ld	r30, Y
    1ef6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ef8:	84 81       	ldd	r24, Z+4	; 0x04
    1efa:	08 17       	cp	r16, r24
    1efc:	e8 f4       	brcc	.+58     	; 0x1f38 <udc_process_setup+0x678>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	80 2f       	mov	r24, r16
    1f02:	d4 db       	rcall	.-2136   	; 0x16ac <udc_update_iface_desc>
    1f04:	88 23       	and	r24, r24
    1f06:	c1 f0       	breq	.+48     	; 0x1f38 <udc_process_setup+0x678>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f08:	f8 01       	movw	r30, r16
    1f0a:	ff 27       	eor	r31, r31
    1f0c:	cf 01       	movw	r24, r30
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	ea 81       	ldd	r30, Y+2	; 0x02
    1f14:	fb 81       	ldd	r31, Y+3	; 0x03
    1f16:	e8 0f       	add	r30, r24
    1f18:	f9 1f       	adc	r31, r25
    1f1a:	c0 81       	ld	r28, Z
    1f1c:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f1e:	ee 81       	ldd	r30, Y+6	; 0x06
    1f20:	ff 81       	ldd	r31, Y+7	; 0x07
    1f22:	09 95       	icall
    1f24:	68 2f       	mov	r22, r24
    1f26:	80 2f       	mov	r24, r16
    1f28:	c1 db       	rcall	.-2174   	; 0x16ac <udc_update_iface_desc>
    1f2a:	88 23       	and	r24, r24
    1f2c:	29 f0       	breq	.+10     	; 0x1f38 <udc_process_setup+0x678>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1f2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f30:	fd 81       	ldd	r31, Y+5	; 0x05
    1f32:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1f34:	81 11       	cpse	r24, r1
    1f36:	4b c0       	rjmp	.+150    	; 0x1fce <udc_process_setup+0x70e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1f38:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    1f3c:	8f 71       	andi	r24, 0x1F	; 31
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <udc_process_setup+0x684>
    1f42:	40 c0       	rjmp	.+128    	; 0x1fc4 <udc_process_setup+0x704>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1f44:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1f48:	88 23       	and	r24, r24
    1f4a:	b1 f1       	breq	.+108    	; 0x1fb8 <udc_process_setup+0x6f8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f4c:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    1f50:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1f54:	ed 91       	ld	r30, X+
    1f56:	fc 91       	ld	r31, X
    1f58:	11 97       	sbiw	r26, 0x01	; 1
    1f5a:	84 81       	ldd	r24, Z+4	; 0x04
    1f5c:	88 23       	and	r24, r24
    1f5e:	71 f1       	breq	.+92     	; 0x1fbc <udc_process_setup+0x6fc>
    1f60:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f62:	ec 2f       	mov	r30, r28
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	ee 0f       	add	r30, r30
    1f68:	ff 1f       	adc	r31, r31
    1f6a:	12 96       	adiw	r26, 0x02	; 2
    1f6c:	8d 91       	ld	r24, X+
    1f6e:	9c 91       	ld	r25, X
    1f70:	13 97       	sbiw	r26, 0x03	; 3
    1f72:	e8 0f       	add	r30, r24
    1f74:	f9 1f       	adc	r31, r25
    1f76:	00 81       	ld	r16, Z
    1f78:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f7a:	d8 01       	movw	r26, r16
    1f7c:	16 96       	adiw	r26, 0x06	; 6
    1f7e:	ed 91       	ld	r30, X+
    1f80:	fc 91       	ld	r31, X
    1f82:	17 97       	sbiw	r26, 0x07	; 7
    1f84:	09 95       	icall
    1f86:	68 2f       	mov	r22, r24
    1f88:	8c 2f       	mov	r24, r28
    1f8a:	90 db       	rcall	.-2272   	; 0x16ac <udc_update_iface_desc>
    1f8c:	88 23       	and	r24, r24
    1f8e:	f9 f0       	breq	.+62     	; 0x1fce <udc_process_setup+0x70e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1f90:	d8 01       	movw	r26, r16
    1f92:	14 96       	adiw	r26, 0x04	; 4
    1f94:	ed 91       	ld	r30, X+
    1f96:	fc 91       	ld	r31, X
    1f98:	15 97       	sbiw	r26, 0x05	; 5
    1f9a:	09 95       	icall
    1f9c:	81 11       	cpse	r24, r1
    1f9e:	17 c0       	rjmp	.+46     	; 0x1fce <udc_process_setup+0x70e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1fa0:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fa2:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    1fa6:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1faa:	ed 91       	ld	r30, X+
    1fac:	fc 91       	ld	r31, X
    1fae:	11 97       	sbiw	r26, 0x01	; 1
    1fb0:	94 81       	ldd	r25, Z+4	; 0x04
    1fb2:	c9 17       	cp	r28, r25
    1fb4:	b0 f2       	brcs	.-84     	; 0x1f62 <udc_process_setup+0x6a2>
    1fb6:	0b c0       	rjmp	.+22     	; 0x1fce <udc_process_setup+0x70e>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	09 c0       	rjmp	.+18     	; 0x1fce <udc_process_setup+0x70e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	07 c0       	rjmp	.+14     	; 0x1fce <udc_process_setup+0x70e>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	05 c0       	rjmp	.+10     	; 0x1fce <udc_process_setup+0x70e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <udc_process_setup+0x70e>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <udc_process_setup+0x70e>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1fd8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1fda:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1fdc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1fde:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1fe0:	60 83       	st	Z, r22
	ret                             // Return to caller
    1fe2:	08 95       	ret

00001fe4 <nvm_eeprom_read_buffer>:
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
	nvm_exec();
	NVM.CMD = old_cmd;
}
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	9c 01       	movw	r18, r24
    1fea:	db 01       	movw	r26, r22
    1fec:	e0 ec       	ldi	r30, 0xC0	; 192
    1fee:	f1 e0       	ldi	r31, 0x01	; 1
    1ff0:	97 85       	ldd	r25, Z+15	; 0x0f
    1ff2:	99 23       	and	r25, r25
    1ff4:	ec f3       	brlt	.-6      	; 0x1ff0 <nvm_eeprom_read_buffer+0xc>
    1ff6:	cc ec       	ldi	r28, 0xCC	; 204
    1ff8:	d1 e0       	ldi	r29, 0x01	; 1
    1ffa:	98 81       	ld	r25, Y
    1ffc:	98 60       	ori	r25, 0x08	; 8
    1ffe:	98 83       	st	Y, r25
    2000:	b9 01       	movw	r22, r18
    2002:	70 5f       	subi	r23, 0xF0	; 240
    2004:	cd 01       	movw	r24, r26
    2006:	b9 d7       	rcall	.+3954   	; 0x2f7a <memcpy>
    2008:	88 81       	ld	r24, Y
    200a:	87 7f       	andi	r24, 0xF7	; 247
    200c:	88 83       	st	Y, r24
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	08 95       	ret

00002014 <nvm_eeprom_load_byte_to_buffer>:
    2014:	e0 ec       	ldi	r30, 0xC0	; 192
    2016:	f1 e0       	ldi	r31, 0x01	; 1
    2018:	97 85       	ldd	r25, Z+15	; 0x0f
    201a:	99 23       	and	r25, r25
    201c:	ec f3       	brlt	.-6      	; 0x2018 <nvm_eeprom_load_byte_to_buffer+0x4>
    201e:	ac ec       	ldi	r26, 0xCC	; 204
    2020:	b1 e0       	ldi	r27, 0x01	; 1
    2022:	9c 91       	ld	r25, X
    2024:	98 60       	ori	r25, 0x08	; 8
    2026:	9c 93       	st	X, r25
    2028:	e8 2f       	mov	r30, r24
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	f0 5f       	subi	r31, 0xF0	; 240
    202e:	60 83       	st	Z, r22
    2030:	8c 91       	ld	r24, X
    2032:	87 7f       	andi	r24, 0xF7	; 247
    2034:	8c 93       	st	X, r24
    2036:	08 95       	ret

00002038 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    2038:	ef 92       	push	r14
    203a:	ff 92       	push	r15
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2046:	e0 ec       	ldi	r30, 0xC0	; 192
    2048:	f1 e0       	ldi	r31, 0x01	; 1
    204a:	87 85       	ldd	r24, Z+15	; 0x0f
    204c:	88 23       	and	r24, r24
    204e:	ec f3       	brlt	.-6      	; 0x204a <nvm_eeprom_load_page_to_buffer+0x12>
    2050:	78 01       	movw	r14, r16
    2052:	80 e2       	ldi	r24, 0x20	; 32
    2054:	e8 0e       	add	r14, r24
    2056:	f1 1c       	adc	r15, r1
    2058:	e8 01       	movw	r28, r16
    205a:	8c 2f       	mov	r24, r28
    205c:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    205e:	69 91       	ld	r22, Y+
    2060:	d9 df       	rcall	.-78     	; 0x2014 <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2062:	ce 15       	cp	r28, r14
    2064:	df 05       	cpc	r29, r15
    2066:	c9 f7       	brne	.-14     	; 0x205a <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	08 95       	ret

00002076 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	e0 ec       	ldi	r30, 0xC0	; 192
    207e:	f1 e0       	ldi	r31, 0x01	; 1
    2080:	97 85       	ldd	r25, Z+15	; 0x0f
    2082:	99 23       	and	r25, r25
    2084:	ec f3       	brlt	.-6      	; 0x2080 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2086:	20 e2       	ldi	r18, 0x20	; 32
    2088:	82 9f       	mul	r24, r18
    208a:	c0 01       	movw	r24, r0
    208c:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    208e:	c0 ec       	ldi	r28, 0xC0	; 192
    2090:	d1 e0       	ldi	r29, 0x01	; 1
    2092:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2094:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2096:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    2098:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    209a:	85 e3       	ldi	r24, 0x35	; 53
    209c:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    209e:	61 e0       	ldi	r22, 0x01	; 1
    20a0:	8b ec       	ldi	r24, 0xCB	; 203
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	99 df       	rcall	.-206    	; 0x1fd8 <ccp_write_io>
	NVM.CMD = old_cmd;
    20a6:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	08 95       	ret

000020b0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    20b0:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    20b4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    20b6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    20b8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    20bc:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    20be:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    20c2:	08 95       	ret

000020c4 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    20c4:	81 11       	cpse	r24, r1
    20c6:	22 c0       	rjmp	.+68     	; 0x210c <udd_sleep_mode+0x48>
    20c8:	90 91 6c 21 	lds	r25, 0x216C	; 0x80216c <udd_b_idle>
    20cc:	99 23       	and	r25, r25
    20ce:	d9 f0       	breq	.+54     	; 0x2106 <udd_sleep_mode+0x42>
    20d0:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <sleepmgr_locks+0x1>
    20d4:	91 11       	cpse	r25, r1
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <udd_sleep_mode+0x16>
    20d8:	ff cf       	rjmp	.-2      	; 0x20d8 <udd_sleep_mode+0x14>
    20da:	2f b7       	in	r18, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	ea ec       	ldi	r30, 0xCA	; 202
    20e0:	fb e2       	ldi	r31, 0x2B	; 43
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	91 50       	subi	r25, 0x01	; 1
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	2f bf       	out	0x3f, r18	; 63
    20ea:	0d c0       	rjmp	.+26     	; 0x2106 <udd_sleep_mode+0x42>
    20ec:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <sleepmgr_locks+0x1>
    20f0:	9f 3f       	cpi	r25, 0xFF	; 255
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <udd_sleep_mode+0x32>
    20f4:	ff cf       	rjmp	.-2      	; 0x20f4 <udd_sleep_mode+0x30>
    20f6:	2f b7       	in	r18, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	ea ec       	ldi	r30, 0xCA	; 202
    20fc:	fb e2       	ldi	r31, 0x2B	; 43
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	9f 5f       	subi	r25, 0xFF	; 255
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	2f bf       	out	0x3f, r18	; 63
    2106:	80 93 6c 21 	sts	0x216C, r24	; 0x80216c <udd_b_idle>
    210a:	08 95       	ret
    210c:	90 91 6c 21 	lds	r25, 0x216C	; 0x80216c <udd_b_idle>
    2110:	99 23       	and	r25, r25
    2112:	61 f3       	breq	.-40     	; 0x20ec <udd_sleep_mode+0x28>
    2114:	f8 cf       	rjmp	.-16     	; 0x2106 <udd_sleep_mode+0x42>

00002116 <udd_ctrl_init>:
    2116:	0f 93       	push	r16
    2118:	e8 ec       	ldi	r30, 0xC8	; 200
    211a:	f4 e0       	ldi	r31, 0x04	; 4
    211c:	80 81       	ld	r24, Z
    211e:	8f 7d       	andi	r24, 0xDF	; 223
    2120:	80 83       	st	Z, r24
    2122:	80 81       	ld	r24, Z
    2124:	8f 7d       	andi	r24, 0xDF	; 223
    2126:	80 83       	st	Z, r24
    2128:	e0 e5       	ldi	r30, 0x50	; 80
    212a:	f1 e2       	ldi	r31, 0x21	; 33
    212c:	02 e0       	ldi	r16, 0x02	; 2
    212e:	05 93       	las	Z, r16
    2130:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <udd_sram+0x12>
    2134:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <udd_sram+0x13>
    2138:	00 e2       	ldi	r16, 0x20	; 32
    213a:	06 93       	lac	Z, r16
    213c:	00 e4       	ldi	r16, 0x40	; 64
    213e:	06 93       	lac	Z, r16
    2140:	e8 e4       	ldi	r30, 0x48	; 72
    2142:	f1 e2       	ldi	r31, 0x21	; 33
    2144:	00 e2       	ldi	r16, 0x20	; 32
    2146:	06 93       	lac	Z, r16
    2148:	00 e4       	ldi	r16, 0x40	; 64
    214a:	06 93       	lac	Z, r16
    214c:	ea e9       	ldi	r30, 0x9A	; 154
    214e:	f3 e2       	ldi	r31, 0x23	; 35
    2150:	14 86       	std	Z+12, r1	; 0x0c
    2152:	15 86       	std	Z+13, r1	; 0x0d
    2154:	16 86       	std	Z+14, r1	; 0x0e
    2156:	17 86       	std	Z+15, r1	; 0x0f
    2158:	12 86       	std	Z+10, r1	; 0x0a
    215a:	13 86       	std	Z+11, r1	; 0x0b
    215c:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <udd_ep_control_state>
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <udd_ctrl_stall_data>:
    2164:	0f 93       	push	r16
    2166:	85 e0       	ldi	r24, 0x05	; 5
    2168:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    216c:	e1 e5       	ldi	r30, 0x51	; 81
    216e:	f1 e2       	ldi	r31, 0x21	; 33
    2170:	04 e0       	ldi	r16, 0x04	; 4
    2172:	05 93       	las	Z, r16
    2174:	e9 e4       	ldi	r30, 0x49	; 73
    2176:	f1 e2       	ldi	r31, 0x21	; 33
    2178:	04 e0       	ldi	r16, 0x04	; 4
    217a:	05 93       	las	Z, r16
    217c:	0f 91       	pop	r16
    217e:	08 95       	ret

00002180 <udd_ctrl_send_zlp_in>:
    2180:	0f 93       	push	r16
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    2188:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <udd_sram+0x12>
    218c:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <udd_sram+0x13>
    2190:	e0 e5       	ldi	r30, 0x50	; 80
    2192:	f1 e2       	ldi	r31, 0x21	; 33
    2194:	02 e0       	ldi	r16, 0x02	; 2
    2196:	06 93       	lac	Z, r16
    2198:	0f 91       	pop	r16
    219a:	08 95       	ret

0000219c <udd_ctrl_endofrequest>:
    219c:	e0 91 a6 23 	lds	r30, 0x23A6	; 0x8023a6 <udd_g_ctrlreq+0xc>
    21a0:	f0 91 a7 23 	lds	r31, 0x23A7	; 0x8023a7 <udd_g_ctrlreq+0xd>
    21a4:	30 97       	sbiw	r30, 0x00	; 0
    21a6:	09 f0       	breq	.+2      	; 0x21aa <udd_ctrl_endofrequest+0xe>
    21a8:	09 95       	icall
    21aa:	08 95       	ret

000021ac <udd_ctrl_in_sent>:
    21ac:	0f 93       	push	r16
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    21b6:	83 30       	cpi	r24, 0x03	; 3
    21b8:	19 f4       	brne	.+6      	; 0x21c0 <udd_ctrl_in_sent+0x14>
    21ba:	f0 df       	rcall	.-32     	; 0x219c <udd_ctrl_endofrequest>
    21bc:	ac df       	rcall	.-168    	; 0x2116 <udd_ctrl_init>
    21be:	5e c0       	rjmp	.+188    	; 0x227c <udd_ctrl_in_sent+0xd0>
    21c0:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    21c4:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    21c8:	c0 91 a4 23 	lds	r28, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    21cc:	d0 91 a5 23 	lds	r29, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    21d0:	c8 1b       	sub	r28, r24
    21d2:	d9 0b       	sbc	r29, r25
    21d4:	71 f5       	brne	.+92     	; 0x2232 <udd_ctrl_in_sent+0x86>
    21d6:	20 91 3d 21 	lds	r18, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    21da:	30 91 3e 21 	lds	r19, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    21de:	82 0f       	add	r24, r18
    21e0:	93 1f       	adc	r25, r19
    21e2:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    21e6:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    21ea:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    21ee:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    21f2:	82 17       	cp	r24, r18
    21f4:	93 07       	cpc	r25, r19
    21f6:	21 f0       	breq	.+8      	; 0x2200 <udd_ctrl_in_sent+0x54>
    21f8:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <b_shortpacket.5296>
    21fc:	88 23       	and	r24, r24
    21fe:	41 f0       	breq	.+16     	; 0x2210 <udd_ctrl_in_sent+0x64>
    2200:	84 e0       	ldi	r24, 0x04	; 4
    2202:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    2206:	e8 e4       	ldi	r30, 0x48	; 72
    2208:	f1 e2       	ldi	r31, 0x21	; 33
    220a:	02 e0       	ldi	r16, 0x02	; 2
    220c:	06 93       	lac	Z, r16
    220e:	36 c0       	rjmp	.+108    	; 0x227c <udd_ctrl_in_sent+0xd0>
    2210:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <udd_g_ctrlreq+0xe>
    2214:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <udd_g_ctrlreq+0xf>
    2218:	30 97       	sbiw	r30, 0x00	; 0
    221a:	99 f0       	breq	.+38     	; 0x2242 <udd_ctrl_in_sent+0x96>
    221c:	09 95       	icall
    221e:	88 23       	and	r24, r24
    2220:	81 f0       	breq	.+32     	; 0x2242 <udd_ctrl_in_sent+0x96>
    2222:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    2226:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    222a:	c0 91 a4 23 	lds	r28, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    222e:	d0 91 a5 23 	lds	r29, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    2232:	c0 34       	cpi	r28, 0x40	; 64
    2234:	d1 05       	cpc	r29, r1
    2236:	28 f0       	brcs	.+10     	; 0x2242 <udd_ctrl_in_sent+0x96>
    2238:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <b_shortpacket.5296>
    223c:	c0 e4       	ldi	r28, 0x40	; 64
    223e:	d0 e0       	ldi	r29, 0x00	; 0
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <udd_ctrl_in_sent+0x9c>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <b_shortpacket.5296>
    2248:	e0 e4       	ldi	r30, 0x40	; 64
    224a:	f1 e2       	ldi	r31, 0x21	; 33
    224c:	c2 8b       	std	Z+18, r28	; 0x12
    224e:	d3 8b       	std	Z+19, r29	; 0x13
    2250:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2254:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2258:	20 91 a2 23 	lds	r18, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    225c:	30 91 a3 23 	lds	r19, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    2260:	28 0f       	add	r18, r24
    2262:	39 1f       	adc	r19, r25
    2264:	24 8b       	std	Z+20, r18	; 0x14
    2266:	35 8b       	std	Z+21, r19	; 0x15
    2268:	c8 0f       	add	r28, r24
    226a:	d9 1f       	adc	r29, r25
    226c:	c0 93 3b 21 	sts	0x213B, r28	; 0x80213b <udd_ctrl_payload_nb_trans>
    2270:	d0 93 3c 21 	sts	0x213C, r29	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2274:	e0 e5       	ldi	r30, 0x50	; 80
    2276:	f1 e2       	ldi	r31, 0x21	; 33
    2278:	02 e0       	ldi	r16, 0x02	; 2
    227a:	06 93       	lac	Z, r16
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	0f 91       	pop	r16
    2282:	08 95       	ret

00002284 <udd_ep_get_size>:
    2284:	fc 01       	movw	r30, r24
    2286:	81 81       	ldd	r24, Z+1	; 0x01
    2288:	e8 2f       	mov	r30, r24
    228a:	e7 70       	andi	r30, 0x07	; 7
    228c:	8e 2f       	mov	r24, r30
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	fc 01       	movw	r30, r24
    2292:	31 97       	sbiw	r30, 0x01	; 1
    2294:	e7 30       	cpi	r30, 0x07	; 7
    2296:	f1 05       	cpc	r31, r1
    2298:	c0 f4       	brcc	.+48     	; 0x22ca <udd_ep_get_size+0x46>
    229a:	e9 5e       	subi	r30, 0xE9	; 233
    229c:	fe 4f       	sbci	r31, 0xFE	; 254
    229e:	67 c6       	rjmp	.+3278   	; 0x2f6e <__tablejump2__>
    22a0:	80 e1       	ldi	r24, 0x10	; 16
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	08 95       	ret
    22a6:	80 e2       	ldi	r24, 0x20	; 32
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	08 95       	ret
    22ac:	80 e4       	ldi	r24, 0x40	; 64
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	08 95       	ret
    22b2:	80 e8       	ldi	r24, 0x80	; 128
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	08 95       	ret
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	08 95       	ret
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	92 e0       	ldi	r25, 0x02	; 2
    22c2:	08 95       	ret
    22c4:	8f ef       	ldi	r24, 0xFF	; 255
    22c6:	93 e0       	ldi	r25, 0x03	; 3
    22c8:	08 95       	ret
    22ca:	88 e0       	ldi	r24, 0x08	; 8
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	08 95       	ret

000022d0 <udd_ep_get_job>:
    22d0:	28 2f       	mov	r18, r24
    22d2:	2f 70       	andi	r18, 0x0F	; 15
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	08 2e       	mov	r0, r24
    22dc:	00 0c       	add	r0, r0
    22de:	99 0b       	sbc	r25, r25
    22e0:	88 27       	eor	r24, r24
    22e2:	99 0f       	add	r25, r25
    22e4:	88 1f       	adc	r24, r24
    22e6:	99 27       	eor	r25, r25
    22e8:	82 0f       	add	r24, r18
    22ea:	93 1f       	adc	r25, r19
    22ec:	02 97       	sbiw	r24, 0x02	; 2
    22ee:	9c 01       	movw	r18, r24
    22f0:	22 0f       	add	r18, r18
    22f2:	33 1f       	adc	r19, r19
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	22 0f       	add	r18, r18
    22fa:	33 1f       	adc	r19, r19
    22fc:	82 0f       	add	r24, r18
    22fe:	93 1f       	adc	r25, r19
    2300:	87 51       	subi	r24, 0x17	; 23
    2302:	9f 4d       	sbci	r25, 0xDF	; 223
    2304:	08 95       	ret

00002306 <udd_ctrl_interrupt_tc_setup>:
    2306:	0f 93       	push	r16
    2308:	cf 93       	push	r28
    230a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    230e:	80 ff       	sbrs	r24, 0
    2310:	62 c0       	rjmp	.+196    	; 0x23d6 <udd_ctrl_interrupt_tc_setup+0xd0>
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2318:	e8 e4       	ldi	r30, 0x48	; 72
    231a:	f1 e2       	ldi	r31, 0x21	; 33
    231c:	00 e8       	ldi	r16, 0x80	; 128
    231e:	06 93       	lac	Z, r16
    2320:	e0 e5       	ldi	r30, 0x50	; 80
    2322:	f1 e2       	ldi	r31, 0x21	; 33
    2324:	00 e8       	ldi	r16, 0x80	; 128
    2326:	06 93       	lac	Z, r16
    2328:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    232c:	e8 e4       	ldi	r30, 0x48	; 72
    232e:	f1 e2       	ldi	r31, 0x21	; 33
    2330:	00 e1       	ldi	r16, 0x10	; 16
    2332:	06 93       	lac	Z, r16
    2334:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2338:	88 23       	and	r24, r24
    233a:	29 f0       	breq	.+10     	; 0x2346 <udd_ctrl_interrupt_tc_setup+0x40>
    233c:	83 50       	subi	r24, 0x03	; 3
    233e:	82 30       	cpi	r24, 0x02	; 2
    2340:	08 f4       	brcc	.+2      	; 0x2344 <udd_ctrl_interrupt_tc_setup+0x3e>
    2342:	2c df       	rcall	.-424    	; 0x219c <udd_ctrl_endofrequest>
    2344:	e8 de       	rcall	.-560    	; 0x2116 <udd_ctrl_init>
    2346:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <udd_sram+0xa>
    234a:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <udd_sram+0xb>
    234e:	08 97       	sbiw	r24, 0x08	; 8
    2350:	09 f0       	breq	.+2      	; 0x2354 <udd_ctrl_interrupt_tc_setup+0x4e>
    2352:	43 c0       	rjmp	.+134    	; 0x23da <udd_ctrl_interrupt_tc_setup+0xd4>
    2354:	88 e0       	ldi	r24, 0x08	; 8
    2356:	eb ef       	ldi	r30, 0xFB	; 251
    2358:	f0 e2       	ldi	r31, 0x20	; 32
    235a:	aa e9       	ldi	r26, 0x9A	; 154
    235c:	b3 e2       	ldi	r27, 0x23	; 35
    235e:	01 90       	ld	r0, Z+
    2360:	0d 92       	st	X+, r0
    2362:	8a 95       	dec	r24
    2364:	e1 f7       	brne	.-8      	; 0x235e <udd_ctrl_interrupt_tc_setup+0x58>
    2366:	e8 ec       	ldi	r30, 0xC8	; 200
    2368:	f4 e0       	ldi	r31, 0x04	; 4
    236a:	80 81       	ld	r24, Z
    236c:	80 62       	ori	r24, 0x20	; 32
    236e:	80 83       	st	Z, r24
    2370:	80 81       	ld	r24, Z
    2372:	80 62       	ori	r24, 0x20	; 32
    2374:	80 83       	st	Z, r24
    2376:	a4 da       	rcall	.-2744   	; 0x18c0 <udc_process_setup>
    2378:	c8 2f       	mov	r28, r24
    237a:	81 11       	cpse	r24, r1
    237c:	03 c0       	rjmp	.+6      	; 0x2384 <udd_ctrl_interrupt_tc_setup+0x7e>
    237e:	f2 de       	rcall	.-540    	; 0x2164 <udd_ctrl_stall_data>
    2380:	c1 e0       	ldi	r28, 0x01	; 1
    2382:	2c c0       	rjmp	.+88     	; 0x23dc <udd_ctrl_interrupt_tc_setup+0xd6>
    2384:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    2388:	88 23       	and	r24, r24
    238a:	6c f4       	brge	.+26     	; 0x23a6 <udd_ctrl_interrupt_tc_setup+0xa0>
    238c:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2390:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2394:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    2398:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    23a2:	04 df       	rcall	.-504    	; 0x21ac <udd_ctrl_in_sent>
    23a4:	1b c0       	rjmp	.+54     	; 0x23dc <udd_ctrl_interrupt_tc_setup+0xd6>
    23a6:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    23aa:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    23ae:	89 2b       	or	r24, r25
    23b0:	11 f4       	brne	.+4      	; 0x23b6 <udd_ctrl_interrupt_tc_setup+0xb0>
    23b2:	e6 de       	rcall	.-564    	; 0x2180 <udd_ctrl_send_zlp_in>
    23b4:	13 c0       	rjmp	.+38     	; 0x23dc <udd_ctrl_interrupt_tc_setup+0xd6>
    23b6:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    23ba:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    23be:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    23c2:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    23cc:	e8 e4       	ldi	r30, 0x48	; 72
    23ce:	f1 e2       	ldi	r31, 0x21	; 33
    23d0:	02 e0       	ldi	r16, 0x02	; 2
    23d2:	06 93       	lac	Z, r16
    23d4:	03 c0       	rjmp	.+6      	; 0x23dc <udd_ctrl_interrupt_tc_setup+0xd6>
    23d6:	c0 e0       	ldi	r28, 0x00	; 0
    23d8:	01 c0       	rjmp	.+2      	; 0x23dc <udd_ctrl_interrupt_tc_setup+0xd6>
    23da:	c1 e0       	ldi	r28, 0x01	; 1
    23dc:	8c 2f       	mov	r24, r28
    23de:	cf 91       	pop	r28
    23e0:	0f 91       	pop	r16
    23e2:	08 95       	ret

000023e4 <udd_ep_trans_complet>:
    23e4:	8f 92       	push	r8
    23e6:	9f 92       	push	r9
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	d8 2e       	mov	r13, r24
    23fc:	69 df       	rcall	.-302    	; 0x22d0 <udd_ep_get_job>
    23fe:	8c 01       	movw	r16, r24
    2400:	bd 2c       	mov	r11, r13
    2402:	bb 1c       	adc	r11, r11
    2404:	bb 24       	eor	r11, r11
    2406:	bb 1c       	adc	r11, r11
    2408:	cd 2d       	mov	r28, r13
    240a:	cf 70       	andi	r28, 0x0F	; 15
    240c:	d0 e0       	ldi	r29, 0x00	; 0
    240e:	cc 0f       	add	r28, r28
    2410:	dd 1f       	adc	r29, r29
    2412:	cb 0d       	add	r28, r11
    2414:	d1 1d       	adc	r29, r1
    2416:	ce 01       	movw	r24, r28
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	9c 01       	movw	r18, r24
    2426:	28 5b       	subi	r18, 0xB8	; 184
    2428:	3e 4d       	sbci	r19, 0xDE	; 222
    242a:	79 01       	movw	r14, r18
    242c:	c9 01       	movw	r24, r18
    242e:	2a df       	rcall	.-428    	; 0x2284 <udd_ep_get_size>
    2430:	4c 01       	movw	r8, r24
    2432:	bb 20       	and	r11, r11
    2434:	09 f4       	brne	.+2      	; 0x2438 <udd_ep_trans_complet+0x54>
    2436:	70 c0       	rjmp	.+224    	; 0x2518 <udd_ep_trans_complet+0x134>
    2438:	fe 01       	movw	r30, r28
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	e0 5c       	subi	r30, 0xC0	; 192
    2448:	fe 4d       	sbci	r31, 0xDE	; 222
    244a:	26 85       	ldd	r18, Z+14	; 0x0e
    244c:	37 85       	ldd	r19, Z+15	; 0x0f
    244e:	d8 01       	movw	r26, r16
    2450:	15 96       	adiw	r26, 0x05	; 5
    2452:	8d 91       	ld	r24, X+
    2454:	9c 91       	ld	r25, X
    2456:	16 97       	sbiw	r26, 0x06	; 6
    2458:	82 0f       	add	r24, r18
    245a:	93 1f       	adc	r25, r19
    245c:	15 96       	adiw	r26, 0x05	; 5
    245e:	8d 93       	st	X+, r24
    2460:	9c 93       	st	X, r25
    2462:	16 97       	sbiw	r26, 0x06	; 6
    2464:	13 96       	adiw	r26, 0x03	; 3
    2466:	2d 91       	ld	r18, X+
    2468:	3c 91       	ld	r19, X
    246a:	14 97       	sbiw	r26, 0x04	; 4
    246c:	82 17       	cp	r24, r18
    246e:	93 07       	cpc	r25, r19
    2470:	09 f4       	brne	.+2      	; 0x2474 <udd_ep_trans_complet+0x90>
    2472:	3c c0       	rjmp	.+120    	; 0x24ec <udd_ep_trans_complet+0x108>
    2474:	28 1b       	sub	r18, r24
    2476:	39 0b       	sbc	r19, r25
    2478:	21 15       	cp	r18, r1
    247a:	b4 e0       	ldi	r27, 0x04	; 4
    247c:	3b 07       	cpc	r19, r27
    247e:	38 f0       	brcs	.+14     	; 0x248e <udd_ep_trans_complet+0xaa>
    2480:	2f ef       	ldi	r18, 0xFF	; 255
    2482:	33 e0       	ldi	r19, 0x03	; 3
    2484:	c9 01       	movw	r24, r18
    2486:	b4 01       	movw	r22, r8
    2488:	4b d5       	rcall	.+2710   	; 0x2f20 <__udivmodhi4>
    248a:	28 1b       	sub	r18, r24
    248c:	39 0b       	sbc	r19, r25
    248e:	f8 01       	movw	r30, r16
    2490:	80 81       	ld	r24, Z
    2492:	81 ff       	sbrs	r24, 1
    2494:	09 c0       	rjmp	.+18     	; 0x24a8 <udd_ep_trans_complet+0xc4>
    2496:	c9 01       	movw	r24, r18
    2498:	b4 01       	movw	r22, r8
    249a:	42 d5       	rcall	.+2692   	; 0x2f20 <__udivmodhi4>
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	89 2b       	or	r24, r25
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <udd_ep_trans_complet+0xc0>
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	84 2f       	mov	r24, r20
    24a6:	01 c0       	rjmp	.+2      	; 0x24aa <udd_ep_trans_complet+0xc6>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	d8 01       	movw	r26, r16
    24ac:	9c 91       	ld	r25, X
    24ae:	80 fb       	bst	r24, 0
    24b0:	91 f9       	bld	r25, 1
    24b2:	9c 93       	st	X, r25
    24b4:	cc 0f       	add	r28, r28
    24b6:	dd 1f       	adc	r29, r29
    24b8:	cc 0f       	add	r28, r28
    24ba:	dd 1f       	adc	r29, r29
    24bc:	cc 0f       	add	r28, r28
    24be:	dd 1f       	adc	r29, r29
    24c0:	c0 5c       	subi	r28, 0xC0	; 192
    24c2:	de 4d       	sbci	r29, 0xDE	; 222
    24c4:	1e 86       	std	Y+14, r1	; 0x0e
    24c6:	1f 86       	std	Y+15, r1	; 0x0f
    24c8:	2a 87       	std	Y+10, r18	; 0x0a
    24ca:	3b 87       	std	Y+11, r19	; 0x0b
    24cc:	11 96       	adiw	r26, 0x01	; 1
    24ce:	2d 91       	ld	r18, X+
    24d0:	3c 91       	ld	r19, X
    24d2:	12 97       	sbiw	r26, 0x02	; 2
    24d4:	15 96       	adiw	r26, 0x05	; 5
    24d6:	8d 91       	ld	r24, X+
    24d8:	9c 91       	ld	r25, X
    24da:	16 97       	sbiw	r26, 0x06	; 6
    24dc:	82 0f       	add	r24, r18
    24de:	93 1f       	adc	r25, r19
    24e0:	8c 87       	std	Y+12, r24	; 0x0c
    24e2:	9d 87       	std	Y+13, r25	; 0x0d
    24e4:	f7 01       	movw	r30, r14
    24e6:	02 e0       	ldi	r16, 0x02	; 2
    24e8:	06 93       	lac	Z, r16
    24ea:	ca c0       	rjmp	.+404    	; 0x2680 <udd_ep_trans_complet+0x29c>
    24ec:	d8 01       	movw	r26, r16
    24ee:	8c 91       	ld	r24, X
    24f0:	81 ff       	sbrs	r24, 1
    24f2:	b3 c0       	rjmp	.+358    	; 0x265a <udd_ep_trans_complet+0x276>
    24f4:	8d 7f       	andi	r24, 0xFD	; 253
    24f6:	8c 93       	st	X, r24
    24f8:	cc 0f       	add	r28, r28
    24fa:	dd 1f       	adc	r29, r29
    24fc:	cc 0f       	add	r28, r28
    24fe:	dd 1f       	adc	r29, r29
    2500:	cc 0f       	add	r28, r28
    2502:	dd 1f       	adc	r29, r29
    2504:	c0 5c       	subi	r28, 0xC0	; 192
    2506:	de 4d       	sbci	r29, 0xDE	; 222
    2508:	1e 86       	std	Y+14, r1	; 0x0e
    250a:	1f 86       	std	Y+15, r1	; 0x0f
    250c:	1a 86       	std	Y+10, r1	; 0x0a
    250e:	1b 86       	std	Y+11, r1	; 0x0b
    2510:	f7 01       	movw	r30, r14
    2512:	02 e0       	ldi	r16, 0x02	; 2
    2514:	06 93       	lac	Z, r16
    2516:	b4 c0       	rjmp	.+360    	; 0x2680 <udd_ep_trans_complet+0x29c>
    2518:	fe 01       	movw	r30, r28
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	e0 5c       	subi	r30, 0xC0	; 192
    2528:	fe 4d       	sbci	r31, 0xDE	; 222
    252a:	a2 84       	ldd	r10, Z+10	; 0x0a
    252c:	b3 84       	ldd	r11, Z+11	; 0x0b
    252e:	d8 01       	movw	r26, r16
    2530:	8c 91       	ld	r24, X
    2532:	82 ff       	sbrs	r24, 2
    2534:	19 c0       	rjmp	.+50     	; 0x2568 <udd_ep_trans_complet+0x184>
    2536:	11 96       	adiw	r26, 0x01	; 1
    2538:	ed 91       	ld	r30, X+
    253a:	fc 91       	ld	r31, X
    253c:	12 97       	sbiw	r26, 0x02	; 2
    253e:	15 96       	adiw	r26, 0x05	; 5
    2540:	2d 91       	ld	r18, X+
    2542:	3c 91       	ld	r19, X
    2544:	16 97       	sbiw	r26, 0x06	; 6
    2546:	13 96       	adiw	r26, 0x03	; 3
    2548:	8d 91       	ld	r24, X+
    254a:	9c 91       	ld	r25, X
    254c:	14 97       	sbiw	r26, 0x04	; 4
    254e:	b4 01       	movw	r22, r8
    2550:	e7 d4       	rcall	.+2510   	; 0x2f20 <__udivmodhi4>
    2552:	b0 e4       	ldi	r27, 0x40	; 64
    2554:	db 9e       	mul	r13, r27
    2556:	b0 01       	movw	r22, r0
    2558:	11 24       	eor	r1, r1
    255a:	67 59       	subi	r22, 0x97	; 151
    255c:	7f 4d       	sbci	r23, 0xDF	; 223
    255e:	ac 01       	movw	r20, r24
    2560:	cf 01       	movw	r24, r30
    2562:	82 0f       	add	r24, r18
    2564:	93 1f       	adc	r25, r19
    2566:	09 d5       	rcall	.+2578   	; 0x2f7a <memcpy>
    2568:	f8 01       	movw	r30, r16
    256a:	25 81       	ldd	r18, Z+5	; 0x05
    256c:	36 81       	ldd	r19, Z+6	; 0x06
    256e:	2a 0d       	add	r18, r10
    2570:	3b 1d       	adc	r19, r11
    2572:	25 83       	std	Z+5, r18	; 0x05
    2574:	36 83       	std	Z+6, r19	; 0x06
    2576:	83 81       	ldd	r24, Z+3	; 0x03
    2578:	94 81       	ldd	r25, Z+4	; 0x04
    257a:	82 17       	cp	r24, r18
    257c:	93 07       	cpc	r25, r19
    257e:	68 f4       	brcc	.+26     	; 0x259a <udd_ep_trans_complet+0x1b6>
    2580:	85 83       	std	Z+5, r24	; 0x05
    2582:	96 83       	std	Z+6, r25	; 0x06
    2584:	cc 0f       	add	r28, r28
    2586:	dd 1f       	adc	r29, r29
    2588:	cc 0f       	add	r28, r28
    258a:	dd 1f       	adc	r29, r29
    258c:	cc 0f       	add	r28, r28
    258e:	dd 1f       	adc	r29, r29
    2590:	c0 5c       	subi	r28, 0xC0	; 192
    2592:	de 4d       	sbci	r29, 0xDE	; 222
    2594:	8e 85       	ldd	r24, Y+14	; 0x0e
    2596:	9f 85       	ldd	r25, Y+15	; 0x0f
    2598:	60 c0       	rjmp	.+192    	; 0x265a <udd_ep_trans_complet+0x276>
    259a:	fe 01       	movw	r30, r28
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	ee 0f       	add	r30, r30
    25a6:	ff 1f       	adc	r31, r31
    25a8:	e0 5c       	subi	r30, 0xC0	; 192
    25aa:	fe 4d       	sbci	r31, 0xDE	; 222
    25ac:	46 85       	ldd	r20, Z+14	; 0x0e
    25ae:	57 85       	ldd	r21, Z+15	; 0x0f
    25b0:	4a 15       	cp	r20, r10
    25b2:	5b 05       	cpc	r21, r11
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <udd_ep_trans_complet+0x1d4>
    25b6:	51 c0       	rjmp	.+162    	; 0x265a <udd_ep_trans_complet+0x276>
    25b8:	28 17       	cp	r18, r24
    25ba:	39 07       	cpc	r19, r25
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <udd_ep_trans_complet+0x1dc>
    25be:	4d c0       	rjmp	.+154    	; 0x265a <udd_ep_trans_complet+0x276>
    25c0:	ac 01       	movw	r20, r24
    25c2:	42 1b       	sub	r20, r18
    25c4:	53 0b       	sbc	r21, r19
    25c6:	9a 01       	movw	r18, r20
    25c8:	21 15       	cp	r18, r1
    25ca:	54 e0       	ldi	r21, 0x04	; 4
    25cc:	35 07       	cpc	r19, r21
    25ce:	50 f0       	brcs	.+20     	; 0x25e4 <udd_ep_trans_complet+0x200>
    25d0:	2f ef       	ldi	r18, 0xFF	; 255
    25d2:	33 e0       	ldi	r19, 0x03	; 3
    25d4:	c9 01       	movw	r24, r18
    25d6:	b4 01       	movw	r22, r8
    25d8:	a3 d4       	rcall	.+2374   	; 0x2f20 <__udivmodhi4>
    25da:	d9 01       	movw	r26, r18
    25dc:	a8 1b       	sub	r26, r24
    25de:	b9 0b       	sbc	r27, r25
    25e0:	cd 01       	movw	r24, r26
    25e2:	07 c0       	rjmp	.+14     	; 0x25f2 <udd_ep_trans_complet+0x20e>
    25e4:	c9 01       	movw	r24, r18
    25e6:	b4 01       	movw	r22, r8
    25e8:	9b d4       	rcall	.+2358   	; 0x2f20 <__udivmodhi4>
    25ea:	f9 01       	movw	r30, r18
    25ec:	e8 1b       	sub	r30, r24
    25ee:	f9 0b       	sbc	r31, r25
    25f0:	cf 01       	movw	r24, r30
    25f2:	fe 01       	movw	r30, r28
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	ee 0f       	add	r30, r30
    25fa:	ff 1f       	adc	r31, r31
    25fc:	ee 0f       	add	r30, r30
    25fe:	ff 1f       	adc	r31, r31
    2600:	e0 5c       	subi	r30, 0xC0	; 192
    2602:	fe 4d       	sbci	r31, 0xDE	; 222
    2604:	12 86       	std	Z+10, r1	; 0x0a
    2606:	13 86       	std	Z+11, r1	; 0x0b
    2608:	88 15       	cp	r24, r8
    260a:	99 05       	cpc	r25, r9
    260c:	78 f4       	brcc	.+30     	; 0x262c <udd_ep_trans_complet+0x248>
    260e:	d8 01       	movw	r26, r16
    2610:	8c 91       	ld	r24, X
    2612:	84 60       	ori	r24, 0x04	; 4
    2614:	8c 93       	st	X, r24
    2616:	b0 e4       	ldi	r27, 0x40	; 64
    2618:	db 9e       	mul	r13, r27
    261a:	c0 01       	movw	r24, r0
    261c:	11 24       	eor	r1, r1
    261e:	87 59       	subi	r24, 0x97	; 151
    2620:	9f 4d       	sbci	r25, 0xDF	; 223
    2622:	84 87       	std	Z+12, r24	; 0x0c
    2624:	95 87       	std	Z+13, r25	; 0x0d
    2626:	86 86       	std	Z+14, r8	; 0x0e
    2628:	97 86       	std	Z+15, r9	; 0x0f
    262a:	13 c0       	rjmp	.+38     	; 0x2652 <udd_ep_trans_complet+0x26e>
    262c:	f8 01       	movw	r30, r16
    262e:	41 81       	ldd	r20, Z+1	; 0x01
    2630:	52 81       	ldd	r21, Z+2	; 0x02
    2632:	25 81       	ldd	r18, Z+5	; 0x05
    2634:	36 81       	ldd	r19, Z+6	; 0x06
    2636:	24 0f       	add	r18, r20
    2638:	35 1f       	adc	r19, r21
    263a:	cc 0f       	add	r28, r28
    263c:	dd 1f       	adc	r29, r29
    263e:	cc 0f       	add	r28, r28
    2640:	dd 1f       	adc	r29, r29
    2642:	cc 0f       	add	r28, r28
    2644:	dd 1f       	adc	r29, r29
    2646:	c0 5c       	subi	r28, 0xC0	; 192
    2648:	de 4d       	sbci	r29, 0xDE	; 222
    264a:	2c 87       	std	Y+12, r18	; 0x0c
    264c:	3d 87       	std	Y+13, r19	; 0x0d
    264e:	8e 87       	std	Y+14, r24	; 0x0e
    2650:	9f 87       	std	Y+15, r25	; 0x0f
    2652:	f7 01       	movw	r30, r14
    2654:	02 e0       	ldi	r16, 0x02	; 2
    2656:	06 93       	lac	Z, r16
    2658:	13 c0       	rjmp	.+38     	; 0x2680 <udd_ep_trans_complet+0x29c>
    265a:	d8 01       	movw	r26, r16
    265c:	8c 91       	ld	r24, X
    265e:	80 ff       	sbrs	r24, 0
    2660:	0f c0       	rjmp	.+30     	; 0x2680 <udd_ep_trans_complet+0x29c>
    2662:	8e 7f       	andi	r24, 0xFE	; 254
    2664:	8c 93       	st	X, r24
    2666:	17 96       	adiw	r26, 0x07	; 7
    2668:	ed 91       	ld	r30, X+
    266a:	fc 91       	ld	r31, X
    266c:	18 97       	sbiw	r26, 0x08	; 8
    266e:	30 97       	sbiw	r30, 0x00	; 0
    2670:	39 f0       	breq	.+14     	; 0x2680 <udd_ep_trans_complet+0x29c>
    2672:	15 96       	adiw	r26, 0x05	; 5
    2674:	6d 91       	ld	r22, X+
    2676:	7c 91       	ld	r23, X
    2678:	16 97       	sbiw	r26, 0x06	; 6
    267a:	4d 2d       	mov	r20, r13
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	09 95       	icall
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	df 90       	pop	r13
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	08 95       	ret

00002698 <udd_attach>:
    2698:	cf 93       	push	r28
    269a:	cf b7       	in	r28, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	11 dd       	rcall	.-1502   	; 0x20c4 <udd_sleep_mode>
    26a2:	ea ec       	ldi	r30, 0xCA	; 202
    26a4:	f4 e0       	ldi	r31, 0x04	; 4
    26a6:	80 e4       	ldi	r24, 0x40	; 64
    26a8:	80 83       	st	Z, r24
    26aa:	80 e2       	ldi	r24, 0x20	; 32
    26ac:	80 83       	st	Z, r24
    26ae:	e1 ec       	ldi	r30, 0xC1	; 193
    26b0:	f4 e0       	ldi	r31, 0x04	; 4
    26b2:	80 81       	ld	r24, Z
    26b4:	81 60       	ori	r24, 0x01	; 1
    26b6:	80 83       	st	Z, r24
    26b8:	a9 ec       	ldi	r26, 0xC9	; 201
    26ba:	b4 e0       	ldi	r27, 0x04	; 4
    26bc:	8c 91       	ld	r24, X
    26be:	82 60       	ori	r24, 0x02	; 2
    26c0:	8c 93       	st	X, r24
    26c2:	e8 ec       	ldi	r30, 0xC8	; 200
    26c4:	f4 e0       	ldi	r31, 0x04	; 4
    26c6:	80 81       	ld	r24, Z
    26c8:	80 64       	ori	r24, 0x40	; 64
    26ca:	80 83       	st	Z, r24
    26cc:	8c 91       	ld	r24, X
    26ce:	81 60       	ori	r24, 0x01	; 1
    26d0:	8c 93       	st	X, r24
    26d2:	80 81       	ld	r24, Z
    26d4:	80 68       	ori	r24, 0x80	; 128
    26d6:	80 83       	st	Z, r24
    26d8:	cf bf       	out	0x3f, r28	; 63
    26da:	cf 91       	pop	r28
    26dc:	08 95       	ret

000026de <udd_enable>:
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	c0 e6       	ldi	r28, 0x60	; 96
    26e4:	d0 e0       	ldi	r29, 0x00	; 0
    26e6:	18 82       	st	Y, r1
    26e8:	80 e3       	ldi	r24, 0x30	; 48
    26ea:	0e 94 ad 0a 	call	0x155a	; 0x155a <sysclk_enable_usb>
    26ee:	e0 ec       	ldi	r30, 0xC0	; 192
    26f0:	f4 e0       	ldi	r31, 0x04	; 4
    26f2:	80 81       	ld	r24, Z
    26f4:	80 64       	ori	r24, 0x40	; 64
    26f6:	80 83       	st	Z, r24
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	88 83       	st	Y, r24
    26fc:	cf b7       	in	r28, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	e0 e4       	ldi	r30, 0x40	; 64
    2702:	f1 e2       	ldi	r31, 0x21	; 33
    2704:	11 86       	std	Z+9, r1	; 0x09
    2706:	11 8a       	std	Z+17, r1	; 0x11
    2708:	11 8e       	std	Z+25, r1	; 0x19
    270a:	11 a2       	std	Z+33, r1	; 0x21
    270c:	e9 ee       	ldi	r30, 0xE9	; 233
    270e:	f0 e2       	ldi	r31, 0x20	; 32
    2710:	80 81       	ld	r24, Z
    2712:	8e 7f       	andi	r24, 0xFE	; 254
    2714:	80 83       	st	Z, r24
    2716:	e2 ef       	ldi	r30, 0xF2	; 242
    2718:	f0 e2       	ldi	r31, 0x20	; 32
    271a:	80 81       	ld	r24, Z
    271c:	8e 7f       	andi	r24, 0xFE	; 254
    271e:	80 83       	st	Z, r24
    2720:	6a e1       	ldi	r22, 0x1A	; 26
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	c4 dc       	rcall	.-1656   	; 0x20b0 <nvm_read_byte>
    2728:	8f 3f       	cpi	r24, 0xFF	; 255
    272a:	19 f0       	breq	.+6      	; 0x2732 <udd_enable+0x54>
    272c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2730:	03 c0       	rjmp	.+6      	; 0x2738 <udd_enable+0x5a>
    2732:	8f e1       	ldi	r24, 0x1F	; 31
    2734:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2738:	6b e1       	ldi	r22, 0x1B	; 27
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	b8 dc       	rcall	.-1680   	; 0x20b0 <nvm_read_byte>
    2740:	8f 3f       	cpi	r24, 0xFF	; 255
    2742:	19 f0       	breq	.+6      	; 0x274a <udd_enable+0x6c>
    2744:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <udd_enable+0x72>
    274a:	8f e1       	ldi	r24, 0x1F	; 31
    274c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2750:	e0 ec       	ldi	r30, 0xC0	; 192
    2752:	f4 e0       	ldi	r31, 0x04	; 4
    2754:	80 81       	ld	r24, Z
    2756:	81 60       	ori	r24, 0x01	; 1
    2758:	80 83       	st	Z, r24
    275a:	80 81       	ld	r24, Z
    275c:	80 68       	ori	r24, 0x80	; 128
    275e:	80 83       	st	Z, r24
    2760:	80 81       	ld	r24, Z
    2762:	80 61       	ori	r24, 0x10	; 16
    2764:	80 83       	st	Z, r24
    2766:	88 e4       	ldi	r24, 0x48	; 72
    2768:	91 e2       	ldi	r25, 0x21	; 33
    276a:	86 83       	std	Z+6, r24	; 0x06
    276c:	97 83       	std	Z+7, r25	; 0x07
    276e:	80 81       	ld	r24, Z
    2770:	80 62       	ori	r24, 0x20	; 32
    2772:	80 83       	st	Z, r24
    2774:	8f ef       	ldi	r24, 0xFF	; 255
    2776:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    277a:	e8 ec       	ldi	r30, 0xC8	; 200
    277c:	f4 e0       	ldi	r31, 0x04	; 4
    277e:	80 81       	ld	r24, Z
    2780:	82 60       	ori	r24, 0x02	; 2
    2782:	80 83       	st	Z, r24
    2784:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <udd_b_idle>
    2788:	80 91 cf 2b 	lds	r24, 0x2BCF	; 0x802bcf <sleepmgr_locks+0x5>
    278c:	8f 3f       	cpi	r24, 0xFF	; 255
    278e:	09 f4       	brne	.+2      	; 0x2792 <udd_enable+0xb4>
    2790:	ff cf       	rjmp	.-2      	; 0x2790 <udd_enable+0xb2>
    2792:	9f b7       	in	r25, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	ea ec       	ldi	r30, 0xCA	; 202
    2798:	fb e2       	ldi	r31, 0x2B	; 43
    279a:	85 81       	ldd	r24, Z+5	; 0x05
    279c:	8f 5f       	subi	r24, 0xFF	; 255
    279e:	85 83       	std	Z+5, r24	; 0x05
    27a0:	9f bf       	out	0x3f, r25	; 63
    27a2:	7a df       	rcall	.-268    	; 0x2698 <udd_attach>
    27a4:	cf bf       	out	0x3f, r28	; 63
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <udd_set_address>:
    27ac:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    27b0:	08 95       	ret

000027b2 <udd_getaddress>:
    27b2:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    27b6:	08 95       	ret

000027b8 <udd_set_setup_payload>:
    27b8:	ea e9       	ldi	r30, 0x9A	; 154
    27ba:	f3 e2       	ldi	r31, 0x23	; 35
    27bc:	80 87       	std	Z+8, r24	; 0x08
    27be:	91 87       	std	Z+9, r25	; 0x09
    27c0:	62 87       	std	Z+10, r22	; 0x0a
    27c2:	73 87       	std	Z+11, r23	; 0x0b
    27c4:	08 95       	ret

000027c6 <udd_ep_alloc>:
    27c6:	28 2f       	mov	r18, r24
    27c8:	2f 70       	andi	r18, 0x0F	; 15
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	22 0f       	add	r18, r18
    27ce:	33 1f       	adc	r19, r19
    27d0:	08 2e       	mov	r0, r24
    27d2:	00 0c       	add	r0, r0
    27d4:	99 0b       	sbc	r25, r25
    27d6:	88 27       	eor	r24, r24
    27d8:	99 0f       	add	r25, r25
    27da:	88 1f       	adc	r24, r24
    27dc:	99 27       	eor	r25, r25
    27de:	82 0f       	add	r24, r18
    27e0:	93 1f       	adc	r25, r19
    27e2:	fc 01       	movw	r30, r24
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	e0 5c       	subi	r30, 0xC0	; 192
    27f2:	fe 4d       	sbci	r31, 0xDE	; 222
    27f4:	21 85       	ldd	r18, Z+9	; 0x09
    27f6:	20 7c       	andi	r18, 0xC0	; 192
    27f8:	09 f0       	breq	.+2      	; 0x27fc <udd_ep_alloc+0x36>
    27fa:	58 c0       	rjmp	.+176    	; 0x28ac <udd_ep_alloc+0xe6>
    27fc:	63 70       	andi	r22, 0x03	; 3
    27fe:	61 30       	cpi	r22, 0x01	; 1
    2800:	11 f0       	breq	.+4      	; 0x2806 <udd_ep_alloc+0x40>
    2802:	18 f4       	brcc	.+6      	; 0x280a <udd_ep_alloc+0x44>
    2804:	04 c0       	rjmp	.+8      	; 0x280e <udd_ep_alloc+0x48>
    2806:	20 ec       	ldi	r18, 0xC0	; 192
    2808:	03 c0       	rjmp	.+6      	; 0x2810 <udd_ep_alloc+0x4a>
    280a:	20 e8       	ldi	r18, 0x80	; 128
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <udd_ep_alloc+0x4a>
    280e:	20 e4       	ldi	r18, 0x40	; 64
    2810:	40 38       	cpi	r20, 0x80	; 128
    2812:	51 05       	cpc	r21, r1
    2814:	e9 f0       	breq	.+58     	; 0x2850 <udd_ep_alloc+0x8a>
    2816:	50 f4       	brcc	.+20     	; 0x282c <udd_ep_alloc+0x66>
    2818:	40 32       	cpi	r20, 0x20	; 32
    281a:	51 05       	cpc	r21, r1
    281c:	a9 f0       	breq	.+42     	; 0x2848 <udd_ep_alloc+0x82>
    281e:	40 34       	cpi	r20, 0x40	; 64
    2820:	51 05       	cpc	r21, r1
    2822:	a1 f0       	breq	.+40     	; 0x284c <udd_ep_alloc+0x86>
    2824:	40 31       	cpi	r20, 0x10	; 16
    2826:	51 05       	cpc	r21, r1
    2828:	d9 f4       	brne	.+54     	; 0x2860 <udd_ep_alloc+0x9a>
    282a:	0c c0       	rjmp	.+24     	; 0x2844 <udd_ep_alloc+0x7e>
    282c:	41 15       	cp	r20, r1
    282e:	32 e0       	ldi	r19, 0x02	; 2
    2830:	53 07       	cpc	r21, r19
    2832:	91 f0       	breq	.+36     	; 0x2858 <udd_ep_alloc+0x92>
    2834:	4f 3f       	cpi	r20, 0xFF	; 255
    2836:	33 e0       	ldi	r19, 0x03	; 3
    2838:	53 07       	cpc	r21, r19
    283a:	81 f0       	breq	.+32     	; 0x285c <udd_ep_alloc+0x96>
    283c:	41 15       	cp	r20, r1
    283e:	51 40       	sbci	r21, 0x01	; 1
    2840:	79 f4       	brne	.+30     	; 0x2860 <udd_ep_alloc+0x9a>
    2842:	08 c0       	rjmp	.+16     	; 0x2854 <udd_ep_alloc+0x8e>
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0d c0       	rjmp	.+26     	; 0x2862 <udd_ep_alloc+0x9c>
    2848:	42 e0       	ldi	r20, 0x02	; 2
    284a:	0b c0       	rjmp	.+22     	; 0x2862 <udd_ep_alloc+0x9c>
    284c:	43 e0       	ldi	r20, 0x03	; 3
    284e:	09 c0       	rjmp	.+18     	; 0x2862 <udd_ep_alloc+0x9c>
    2850:	44 e0       	ldi	r20, 0x04	; 4
    2852:	07 c0       	rjmp	.+14     	; 0x2862 <udd_ep_alloc+0x9c>
    2854:	45 e0       	ldi	r20, 0x05	; 5
    2856:	05 c0       	rjmp	.+10     	; 0x2862 <udd_ep_alloc+0x9c>
    2858:	46 e0       	ldi	r20, 0x06	; 6
    285a:	03 c0       	rjmp	.+6      	; 0x2862 <udd_ep_alloc+0x9c>
    285c:	47 e0       	ldi	r20, 0x07	; 7
    285e:	01 c0       	rjmp	.+2      	; 0x2862 <udd_ep_alloc+0x9c>
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	fc 01       	movw	r30, r24
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	ee 0f       	add	r30, r30
    286a:	ff 1f       	adc	r31, r31
    286c:	ee 0f       	add	r30, r30
    286e:	ff 1f       	adc	r31, r31
    2870:	e0 5c       	subi	r30, 0xC0	; 192
    2872:	fe 4d       	sbci	r31, 0xDE	; 222
    2874:	11 86       	std	Z+9, r1	; 0x09
    2876:	dc 01       	movw	r26, r24
    2878:	aa 0f       	add	r26, r26
    287a:	bb 1f       	adc	r27, r27
    287c:	aa 0f       	add	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	aa 0f       	add	r26, r26
    2882:	bb 1f       	adc	r27, r27
    2884:	a8 5b       	subi	r26, 0xB8	; 184
    2886:	be 4d       	sbci	r27, 0xDE	; 222
    2888:	36 e0       	ldi	r19, 0x06	; 6
    288a:	3c 93       	st	X, r19
    288c:	24 2b       	or	r18, r20
    288e:	21 87       	std	Z+9, r18	; 0x09
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	fc 01       	movw	r30, r24
    289e:	e0 5c       	subi	r30, 0xC0	; 192
    28a0:	fe 4d       	sbci	r31, 0xDE	; 222
    28a2:	81 85       	ldd	r24, Z+9	; 0x09
    28a4:	80 62       	ori	r24, 0x20	; 32
    28a6:	81 87       	std	Z+9, r24	; 0x09
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	08 95       	ret
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	08 95       	ret

000028b0 <udd_ep_is_halted>:
    28b0:	e8 2f       	mov	r30, r24
    28b2:	ef 70       	andi	r30, 0x0F	; 15
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	08 2e       	mov	r0, r24
    28bc:	00 0c       	add	r0, r0
    28be:	99 0b       	sbc	r25, r25
    28c0:	88 27       	eor	r24, r24
    28c2:	99 0f       	add	r25, r25
    28c4:	88 1f       	adc	r24, r24
    28c6:	99 27       	eor	r25, r25
    28c8:	e8 0f       	add	r30, r24
    28ca:	f9 1f       	adc	r31, r25
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	ee 0f       	add	r30, r30
    28d2:	ff 1f       	adc	r31, r31
    28d4:	ee 0f       	add	r30, r30
    28d6:	ff 1f       	adc	r31, r31
    28d8:	e0 5c       	subi	r30, 0xC0	; 192
    28da:	fe 4d       	sbci	r31, 0xDE	; 222
    28dc:	81 85       	ldd	r24, Z+9	; 0x09
    28de:	82 fb       	bst	r24, 2
    28e0:	88 27       	eor	r24, r24
    28e2:	80 f9       	bld	r24, 0
    28e4:	08 95       	ret

000028e6 <udd_ep_clear_halt>:
    28e6:	28 2f       	mov	r18, r24
    28e8:	2f 70       	andi	r18, 0x0F	; 15
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	a9 01       	movw	r20, r18
    28ee:	44 0f       	add	r20, r20
    28f0:	55 1f       	adc	r21, r21
    28f2:	28 2f       	mov	r18, r24
    28f4:	08 2e       	mov	r0, r24
    28f6:	00 0c       	add	r0, r0
    28f8:	33 0b       	sbc	r19, r19
    28fa:	22 27       	eor	r18, r18
    28fc:	33 0f       	add	r19, r19
    28fe:	22 1f       	adc	r18, r18
    2900:	33 27       	eor	r19, r19
    2902:	24 0f       	add	r18, r20
    2904:	35 1f       	adc	r19, r21
    2906:	f9 01       	movw	r30, r18
    2908:	ee 0f       	add	r30, r30
    290a:	ff 1f       	adc	r31, r31
    290c:	ee 0f       	add	r30, r30
    290e:	ff 1f       	adc	r31, r31
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	e0 5c       	subi	r30, 0xC0	; 192
    2916:	fe 4d       	sbci	r31, 0xDE	; 222
    2918:	91 85       	ldd	r25, Z+9	; 0x09
    291a:	92 ff       	sbrs	r25, 2
    291c:	17 c0       	rjmp	.+46     	; 0x294c <udd_ep_clear_halt+0x66>
    291e:	22 0f       	add	r18, r18
    2920:	33 1f       	adc	r19, r19
    2922:	22 0f       	add	r18, r18
    2924:	33 1f       	adc	r19, r19
    2926:	22 0f       	add	r18, r18
    2928:	33 1f       	adc	r19, r19
    292a:	f9 01       	movw	r30, r18
    292c:	e0 5c       	subi	r30, 0xC0	; 192
    292e:	fe 4d       	sbci	r31, 0xDE	; 222
    2930:	91 85       	ldd	r25, Z+9	; 0x09
    2932:	9b 7f       	andi	r25, 0xFB	; 251
    2934:	91 87       	std	Z+9, r25	; 0x09
    2936:	cc dc       	rcall	.-1640   	; 0x22d0 <udd_ep_get_job>
    2938:	fc 01       	movw	r30, r24
    293a:	80 81       	ld	r24, Z
    293c:	80 ff       	sbrs	r24, 0
    293e:	06 c0       	rjmp	.+12     	; 0x294c <udd_ep_clear_halt+0x66>
    2940:	8e 7f       	andi	r24, 0xFE	; 254
    2942:	80 83       	st	Z, r24
    2944:	07 80       	ldd	r0, Z+7	; 0x07
    2946:	f0 85       	ldd	r31, Z+8	; 0x08
    2948:	e0 2d       	mov	r30, r0
    294a:	09 95       	icall
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	08 95       	ret

00002950 <udd_ep_run>:
    2950:	7f 92       	push	r7
    2952:	8f 92       	push	r8
    2954:	9f 92       	push	r9
    2956:	af 92       	push	r10
    2958:	bf 92       	push	r11
    295a:	cf 92       	push	r12
    295c:	df 92       	push	r13
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	98 2e       	mov	r9, r24
    296c:	86 2e       	mov	r8, r22
    296e:	6a 01       	movw	r12, r20
    2970:	79 01       	movw	r14, r18
    2972:	ae dc       	rcall	.-1700   	; 0x22d0 <udd_ep_get_job>
    2974:	5c 01       	movw	r10, r24
    2976:	79 2c       	mov	r7, r9
    2978:	77 1c       	adc	r7, r7
    297a:	77 24       	eor	r7, r7
    297c:	77 1c       	adc	r7, r7
    297e:	c9 2d       	mov	r28, r9
    2980:	cf 70       	andi	r28, 0x0F	; 15
    2982:	d0 e0       	ldi	r29, 0x00	; 0
    2984:	cc 0f       	add	r28, r28
    2986:	dd 1f       	adc	r29, r29
    2988:	c7 0d       	add	r28, r7
    298a:	d1 1d       	adc	r29, r1
    298c:	fe 01       	movw	r30, r28
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	ee 0f       	add	r30, r30
    2998:	ff 1f       	adc	r31, r31
    299a:	e0 5c       	subi	r30, 0xC0	; 192
    299c:	fe 4d       	sbci	r31, 0xDE	; 222
    299e:	81 85       	ldd	r24, Z+9	; 0x09
    29a0:	80 7c       	andi	r24, 0xC0	; 192
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <udd_ep_run+0x56>
    29a4:	7d c0       	rjmp	.+250    	; 0x2aa0 <udd_ep_run+0x150>
    29a6:	fe 01       	movw	r30, r28
    29a8:	ee 0f       	add	r30, r30
    29aa:	ff 1f       	adc	r31, r31
    29ac:	ee 0f       	add	r30, r30
    29ae:	ff 1f       	adc	r31, r31
    29b0:	ee 0f       	add	r30, r30
    29b2:	ff 1f       	adc	r31, r31
    29b4:	e0 5c       	subi	r30, 0xC0	; 192
    29b6:	fe 4d       	sbci	r31, 0xDE	; 222
    29b8:	81 85       	ldd	r24, Z+9	; 0x09
    29ba:	80 7c       	andi	r24, 0xC0	; 192
    29bc:	80 3c       	cpi	r24, 0xC0	; 192
    29be:	61 f0       	breq	.+24     	; 0x29d8 <udd_ep_run+0x88>
    29c0:	fe 01       	movw	r30, r28
    29c2:	ee 0f       	add	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	ee 0f       	add	r30, r30
    29c8:	ff 1f       	adc	r31, r31
    29ca:	ee 0f       	add	r30, r30
    29cc:	ff 1f       	adc	r31, r31
    29ce:	e0 5c       	subi	r30, 0xC0	; 192
    29d0:	fe 4d       	sbci	r31, 0xDE	; 222
    29d2:	81 85       	ldd	r24, Z+9	; 0x09
    29d4:	82 fd       	sbrc	r24, 2
    29d6:	66 c0       	rjmp	.+204    	; 0x2aa4 <udd_ep_run+0x154>
    29d8:	8f b7       	in	r24, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	f5 01       	movw	r30, r10
    29de:	90 81       	ld	r25, Z
    29e0:	90 ff       	sbrs	r25, 0
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <udd_ep_run+0x9a>
    29e4:	8f bf       	out	0x3f, r24	; 63
    29e6:	71 2c       	mov	r7, r1
    29e8:	5e c0       	rjmp	.+188    	; 0x2aa6 <udd_ep_run+0x156>
    29ea:	f5 01       	movw	r30, r10
    29ec:	90 81       	ld	r25, Z
    29ee:	91 60       	ori	r25, 0x01	; 1
    29f0:	90 83       	st	Z, r25
    29f2:	8f bf       	out	0x3f, r24	; 63
    29f4:	c1 82       	std	Z+1, r12	; 0x01
    29f6:	d2 82       	std	Z+2, r13	; 0x02
    29f8:	e3 82       	std	Z+3, r14	; 0x03
    29fa:	f4 82       	std	Z+4, r15	; 0x04
    29fc:	15 82       	std	Z+5, r1	; 0x05
    29fe:	16 82       	std	Z+6, r1	; 0x06
    2a00:	07 83       	std	Z+7, r16	; 0x07
    2a02:	10 87       	std	Z+8, r17	; 0x08
    2a04:	81 10       	cpse	r8, r1
    2a06:	06 c0       	rjmp	.+12     	; 0x2a14 <udd_ep_run+0xc4>
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	e1 14       	cp	r14, r1
    2a0c:	f1 04       	cpc	r15, r1
    2a0e:	19 f0       	breq	.+6      	; 0x2a16 <udd_ep_run+0xc6>
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	01 c0       	rjmp	.+2      	; 0x2a16 <udd_ep_run+0xc6>
    2a14:	91 e0       	ldi	r25, 0x01	; 1
    2a16:	f5 01       	movw	r30, r10
    2a18:	80 81       	ld	r24, Z
    2a1a:	90 fb       	bst	r25, 0
    2a1c:	81 f9       	bld	r24, 1
    2a1e:	8b 7f       	andi	r24, 0xFB	; 251
    2a20:	80 83       	st	Z, r24
    2a22:	77 20       	and	r7, r7
    2a24:	59 f0       	breq	.+22     	; 0x2a3c <udd_ep_run+0xec>
    2a26:	cc 0f       	add	r28, r28
    2a28:	dd 1f       	adc	r29, r29
    2a2a:	cc 0f       	add	r28, r28
    2a2c:	dd 1f       	adc	r29, r29
    2a2e:	cc 0f       	add	r28, r28
    2a30:	dd 1f       	adc	r29, r29
    2a32:	c0 5c       	subi	r28, 0xC0	; 192
    2a34:	de 4d       	sbci	r29, 0xDE	; 222
    2a36:	1e 86       	std	Y+14, r1	; 0x0e
    2a38:	1f 86       	std	Y+15, r1	; 0x0f
    2a3a:	2d c0       	rjmp	.+90     	; 0x2a96 <udd_ep_run+0x146>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ee 0f       	add	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	ee 0f       	add	r30, r30
    2a44:	ff 1f       	adc	r31, r31
    2a46:	ee 0f       	add	r30, r30
    2a48:	ff 1f       	adc	r31, r31
    2a4a:	e0 5c       	subi	r30, 0xC0	; 192
    2a4c:	fe 4d       	sbci	r31, 0xDE	; 222
    2a4e:	81 85       	ldd	r24, Z+9	; 0x09
    2a50:	80 7c       	andi	r24, 0xC0	; 192
    2a52:	80 3c       	cpi	r24, 0xC0	; 192
    2a54:	a1 f4       	brne	.+40     	; 0x2a7e <udd_ep_run+0x12e>
    2a56:	ce 01       	movw	r24, r28
    2a58:	88 0f       	add	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	88 5b       	subi	r24, 0xB8	; 184
    2a66:	9e 4d       	sbci	r25, 0xDE	; 222
    2a68:	0d dc       	rcall	.-2022   	; 0x2284 <udd_ep_get_size>
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	c7 01       	movw	r24, r14
    2a6e:	58 d2       	rcall	.+1200   	; 0x2f20 <__udivmodhi4>
    2a70:	89 2b       	or	r24, r25
    2a72:	29 f0       	breq	.+10     	; 0x2a7e <udd_ep_run+0x12e>
    2a74:	f5 01       	movw	r30, r10
    2a76:	80 81       	ld	r24, Z
    2a78:	8e 7f       	andi	r24, 0xFE	; 254
    2a7a:	80 83       	st	Z, r24
    2a7c:	14 c0       	rjmp	.+40     	; 0x2aa6 <udd_ep_run+0x156>
    2a7e:	cc 0f       	add	r28, r28
    2a80:	dd 1f       	adc	r29, r29
    2a82:	cc 0f       	add	r28, r28
    2a84:	dd 1f       	adc	r29, r29
    2a86:	cc 0f       	add	r28, r28
    2a88:	dd 1f       	adc	r29, r29
    2a8a:	c0 5c       	subi	r28, 0xC0	; 192
    2a8c:	de 4d       	sbci	r29, 0xDE	; 222
    2a8e:	1a 86       	std	Y+10, r1	; 0x0a
    2a90:	1b 86       	std	Y+11, r1	; 0x0b
    2a92:	1e 86       	std	Y+14, r1	; 0x0e
    2a94:	1f 86       	std	Y+15, r1	; 0x0f
    2a96:	89 2d       	mov	r24, r9
    2a98:	a5 dc       	rcall	.-1718   	; 0x23e4 <udd_ep_trans_complet>
    2a9a:	77 24       	eor	r7, r7
    2a9c:	73 94       	inc	r7
    2a9e:	03 c0       	rjmp	.+6      	; 0x2aa6 <udd_ep_run+0x156>
    2aa0:	71 2c       	mov	r7, r1
    2aa2:	01 c0       	rjmp	.+2      	; 0x2aa6 <udd_ep_run+0x156>
    2aa4:	71 2c       	mov	r7, r1
    2aa6:	87 2d       	mov	r24, r7
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	bf 90       	pop	r11
    2aba:	af 90       	pop	r10
    2abc:	9f 90       	pop	r9
    2abe:	8f 90       	pop	r8
    2ac0:	7f 90       	pop	r7
    2ac2:	08 95       	ret

00002ac4 <udd_ep_abort>:
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	18 2f       	mov	r17, r24
    2ad0:	f8 2e       	mov	r15, r24
    2ad2:	ff 1c       	adc	r15, r15
    2ad4:	ff 24       	eor	r15, r15
    2ad6:	ff 1c       	adc	r15, r15
    2ad8:	c8 2f       	mov	r28, r24
    2ada:	cf 70       	andi	r28, 0x0F	; 15
    2adc:	d0 e0       	ldi	r29, 0x00	; 0
    2ade:	cc 0f       	add	r28, r28
    2ae0:	dd 1f       	adc	r29, r29
    2ae2:	cf 0d       	add	r28, r15
    2ae4:	d1 1d       	adc	r29, r1
    2ae6:	f4 db       	rcall	.-2072   	; 0x22d0 <udd_ep_get_job>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	fe 01       	movw	r30, r28
    2aec:	ee 0f       	add	r30, r30
    2aee:	ff 1f       	adc	r31, r31
    2af0:	ee 0f       	add	r30, r30
    2af2:	ff 1f       	adc	r31, r31
    2af4:	ee 0f       	add	r30, r30
    2af6:	ff 1f       	adc	r31, r31
    2af8:	e8 5b       	subi	r30, 0xB8	; 184
    2afa:	fe 4d       	sbci	r31, 0xDE	; 222
    2afc:	02 e0       	ldi	r16, 0x02	; 2
    2afe:	05 93       	las	Z, r16
    2b00:	8c 91       	ld	r24, X
    2b02:	80 ff       	sbrs	r24, 0
    2b04:	22 c0       	rjmp	.+68     	; 0x2b4a <udd_ep_abort+0x86>
    2b06:	8e 7f       	andi	r24, 0xFE	; 254
    2b08:	8c 93       	st	X, r24
    2b0a:	17 96       	adiw	r26, 0x07	; 7
    2b0c:	ed 91       	ld	r30, X+
    2b0e:	fc 91       	ld	r31, X
    2b10:	18 97       	sbiw	r26, 0x08	; 8
    2b12:	30 97       	sbiw	r30, 0x00	; 0
    2b14:	d1 f0       	breq	.+52     	; 0x2b4a <udd_ep_abort+0x86>
    2b16:	ff 20       	and	r15, r15
    2b18:	59 f0       	breq	.+22     	; 0x2b30 <udd_ep_abort+0x6c>
    2b1a:	cc 0f       	add	r28, r28
    2b1c:	dd 1f       	adc	r29, r29
    2b1e:	cc 0f       	add	r28, r28
    2b20:	dd 1f       	adc	r29, r29
    2b22:	cc 0f       	add	r28, r28
    2b24:	dd 1f       	adc	r29, r29
    2b26:	c0 5c       	subi	r28, 0xC0	; 192
    2b28:	de 4d       	sbci	r29, 0xDE	; 222
    2b2a:	6e 85       	ldd	r22, Y+14	; 0x0e
    2b2c:	7f 85       	ldd	r23, Y+15	; 0x0f
    2b2e:	0a c0       	rjmp	.+20     	; 0x2b44 <udd_ep_abort+0x80>
    2b30:	cc 0f       	add	r28, r28
    2b32:	dd 1f       	adc	r29, r29
    2b34:	cc 0f       	add	r28, r28
    2b36:	dd 1f       	adc	r29, r29
    2b38:	cc 0f       	add	r28, r28
    2b3a:	dd 1f       	adc	r29, r29
    2b3c:	c0 5c       	subi	r28, 0xC0	; 192
    2b3e:	de 4d       	sbci	r29, 0xDE	; 222
    2b40:	6a 85       	ldd	r22, Y+10	; 0x0a
    2b42:	7b 85       	ldd	r23, Y+11	; 0x0b
    2b44:	41 2f       	mov	r20, r17
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	09 95       	icall
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	ff 90       	pop	r15
    2b54:	08 95       	ret

00002b56 <udd_ep_free>:
    2b56:	cf 93       	push	r28
    2b58:	c8 2f       	mov	r28, r24
    2b5a:	b4 df       	rcall	.-152    	; 0x2ac4 <udd_ep_abort>
    2b5c:	ec 2f       	mov	r30, r28
    2b5e:	ef 70       	andi	r30, 0x0F	; 15
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	ee 0f       	add	r30, r30
    2b64:	ff 1f       	adc	r31, r31
    2b66:	8c 2f       	mov	r24, r28
    2b68:	cc 0f       	add	r28, r28
    2b6a:	99 0b       	sbc	r25, r25
    2b6c:	88 27       	eor	r24, r24
    2b6e:	99 0f       	add	r25, r25
    2b70:	88 1f       	adc	r24, r24
    2b72:	99 27       	eor	r25, r25
    2b74:	e8 0f       	add	r30, r24
    2b76:	f9 1f       	adc	r31, r25
    2b78:	ee 0f       	add	r30, r30
    2b7a:	ff 1f       	adc	r31, r31
    2b7c:	ee 0f       	add	r30, r30
    2b7e:	ff 1f       	adc	r31, r31
    2b80:	ee 0f       	add	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	e0 5c       	subi	r30, 0xC0	; 192
    2b86:	fe 4d       	sbci	r31, 0xDE	; 222
    2b88:	11 86       	std	Z+9, r1	; 0x09
    2b8a:	cf 91       	pop	r28
    2b8c:	08 95       	ret

00002b8e <udd_ep_set_halt>:
    2b8e:	0f 93       	push	r16
    2b90:	e8 2f       	mov	r30, r24
    2b92:	ef 70       	andi	r30, 0x0F	; 15
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	ee 0f       	add	r30, r30
    2b98:	ff 1f       	adc	r31, r31
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	08 2e       	mov	r0, r24
    2b9e:	00 0c       	add	r0, r0
    2ba0:	33 0b       	sbc	r19, r19
    2ba2:	22 27       	eor	r18, r18
    2ba4:	33 0f       	add	r19, r19
    2ba6:	22 1f       	adc	r18, r18
    2ba8:	33 27       	eor	r19, r19
    2baa:	e2 0f       	add	r30, r18
    2bac:	f3 1f       	adc	r31, r19
    2bae:	df 01       	movw	r26, r30
    2bb0:	aa 0f       	add	r26, r26
    2bb2:	bb 1f       	adc	r27, r27
    2bb4:	aa 0f       	add	r26, r26
    2bb6:	bb 1f       	adc	r27, r27
    2bb8:	aa 0f       	add	r26, r26
    2bba:	bb 1f       	adc	r27, r27
    2bbc:	a0 5c       	subi	r26, 0xC0	; 192
    2bbe:	be 4d       	sbci	r27, 0xDE	; 222
    2bc0:	19 96       	adiw	r26, 0x09	; 9
    2bc2:	9c 91       	ld	r25, X
    2bc4:	19 97       	sbiw	r26, 0x09	; 9
    2bc6:	94 60       	ori	r25, 0x04	; 4
    2bc8:	19 96       	adiw	r26, 0x09	; 9
    2bca:	9c 93       	st	X, r25
    2bcc:	ee 0f       	add	r30, r30
    2bce:	ff 1f       	adc	r31, r31
    2bd0:	ee 0f       	add	r30, r30
    2bd2:	ff 1f       	adc	r31, r31
    2bd4:	ee 0f       	add	r30, r30
    2bd6:	ff 1f       	adc	r31, r31
    2bd8:	e8 5b       	subi	r30, 0xB8	; 184
    2bda:	fe 4d       	sbci	r31, 0xDE	; 222
    2bdc:	01 e0       	ldi	r16, 0x01	; 1
    2bde:	06 93       	lac	Z, r16
    2be0:	71 df       	rcall	.-286    	; 0x2ac4 <udd_ep_abort>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	0f 91       	pop	r16
    2be6:	08 95       	ret

00002be8 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2be8:	1f 92       	push	r1
    2bea:	0f 92       	push	r0
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	0f 92       	push	r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	0f 93       	push	r16
    2bf4:	2f 93       	push	r18
    2bf6:	3f 93       	push	r19
    2bf8:	4f 93       	push	r20
    2bfa:	5f 93       	push	r21
    2bfc:	6f 93       	push	r22
    2bfe:	7f 93       	push	r23
    2c00:	8f 93       	push	r24
    2c02:	9f 93       	push	r25
    2c04:	af 93       	push	r26
    2c06:	bf 93       	push	r27
    2c08:	ef 93       	push	r30
    2c0a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2c0c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c10:	88 23       	and	r24, r24
    2c12:	44 f4       	brge	.+16     	; 0x2c24 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2c14:	80 e8       	ldi	r24, 0x80	; 128
    2c16:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2c1a:	0e 94 30 0c 	call	0x1860	; 0x1860 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2c1e:	0e 94 45 04 	call	0x88a	; 0x88a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2c22:	82 c0       	rjmp	.+260    	; 0x2d28 <__vector_125+0x140>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2c24:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c28:	82 ff       	sbrs	r24, 2
    2c2a:	20 c0       	rjmp	.+64     	; 0x2c6c <__vector_125+0x84>
		udd_ack_underflow_event();
    2c2c:	84 e0       	ldi	r24, 0x04	; 4
    2c2e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2c32:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <udd_sram+0x10>
    2c36:	86 ff       	sbrs	r24, 6
    2c38:	77 c0       	rjmp	.+238    	; 0x2d28 <__vector_125+0x140>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c3a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c3e:	81 fd       	sbrc	r24, 1
    2c40:	73 c0       	rjmp	.+230    	; 0x2d28 <__vector_125+0x140>
    2c42:	61 db       	rcall	.-2366   	; 0x2306 <udd_ctrl_interrupt_tc_setup>
    2c44:	81 11       	cpse	r24, r1
    2c46:	70 c0       	rjmp	.+224    	; 0x2d28 <__vector_125+0x140>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2c48:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2c4c:	81 30       	cpi	r24, 0x01	; 1
    2c4e:	11 f4       	brne	.+4      	; 0x2c54 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2c50:	97 da       	rcall	.-2770   	; 0x2180 <udd_ctrl_send_zlp_in>
    2c52:	6a c0       	rjmp	.+212    	; 0x2d28 <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c54:	84 30       	cpi	r24, 0x04	; 4
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <__vector_125+0x72>
    2c58:	67 c0       	rjmp	.+206    	; 0x2d28 <__vector_125+0x140>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2c5a:	e1 e5       	ldi	r30, 0x51	; 81
    2c5c:	f1 e2       	ldi	r31, 0x21	; 33
    2c5e:	04 e0       	ldi	r16, 0x04	; 4
    2c60:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c62:	e9 e4       	ldi	r30, 0x49	; 73
    2c64:	f1 e2       	ldi	r31, 0x21	; 33
    2c66:	04 e0       	ldi	r16, 0x04	; 4
    2c68:	05 93       	las	Z, r16
    2c6a:	5e c0       	rjmp	.+188    	; 0x2d28 <__vector_125+0x140>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2c6c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c70:	81 ff       	sbrs	r24, 1
    2c72:	55 c0       	rjmp	.+170    	; 0x2d1e <__vector_125+0x136>
		udd_ack_overflow_event();
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2c7a:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <udd_sram+0x8>
    2c7e:	86 ff       	sbrs	r24, 6
    2c80:	53 c0       	rjmp	.+166    	; 0x2d28 <__vector_125+0x140>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c82:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c86:	81 fd       	sbrc	r24, 1
    2c88:	4f c0       	rjmp	.+158    	; 0x2d28 <__vector_125+0x140>
    2c8a:	3d db       	rcall	.-2438   	; 0x2306 <udd_ctrl_interrupt_tc_setup>
    2c8c:	81 11       	cpse	r24, r1
    2c8e:	4c c0       	rjmp	.+152    	; 0x2d28 <__vector_125+0x140>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2c90:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2c94:	82 30       	cpi	r24, 0x02	; 2
    2c96:	41 f4       	brne	.+16     	; 0x2ca8 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2c98:	84 e0       	ldi	r24, 0x04	; 4
    2c9a:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2c9e:	e8 e4       	ldi	r30, 0x48	; 72
    2ca0:	f1 e2       	ldi	r31, 0x21	; 33
    2ca2:	02 e0       	ldi	r16, 0x02	; 2
    2ca4:	06 93       	lac	Z, r16
    2ca6:	40 c0       	rjmp	.+128    	; 0x2d28 <__vector_125+0x140>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2ca8:	83 30       	cpi	r24, 0x03	; 3
    2caa:	09 f0       	breq	.+2      	; 0x2cae <__vector_125+0xc6>
    2cac:	3d c0       	rjmp	.+122    	; 0x2d28 <__vector_125+0x140>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2cae:	e1 e5       	ldi	r30, 0x51	; 81
    2cb0:	f1 e2       	ldi	r31, 0x21	; 33
    2cb2:	04 e0       	ldi	r16, 0x04	; 4
    2cb4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2cb6:	e9 e4       	ldi	r30, 0x49	; 73
    2cb8:	f1 e2       	ldi	r31, 0x21	; 33
    2cba:	04 e0       	ldi	r16, 0x04	; 4
    2cbc:	05 93       	las	Z, r16
    2cbe:	34 c0       	rjmp	.+104    	; 0x2d28 <__vector_125+0x140>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2cc0:	80 e1       	ldi	r24, 0x10	; 16
    2cc2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2cc6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2cca:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2cce:	e0 e4       	ldi	r30, 0x40	; 64
    2cd0:	f1 e2       	ldi	r31, 0x21	; 33
    2cd2:	11 86       	std	Z+9, r1	; 0x09
	udd_endpoint_clear_status(ep_ctrl);
    2cd4:	96 e0       	ldi	r25, 0x06	; 6
    2cd6:	90 87       	std	Z+8, r25	; 0x08
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2cd8:	83 e4       	ldi	r24, 0x43	; 67
    2cda:	81 87       	std	Z+9, r24	; 0x09
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2cdc:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2cde:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2ce0:	81 8b       	std	Z+17, r24	; 0x11
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2ce2:	8b ef       	ldi	r24, 0xFB	; 251
    2ce4:	90 e2       	ldi	r25, 0x20	; 32
    2ce6:	84 87       	std	Z+12, r24	; 0x0c
    2ce8:	95 87       	std	Z+13, r25	; 0x0d
		// Reset endpoint control management
		udd_ctrl_init();
    2cea:	15 da       	rcall	.-3030   	; 0x2116 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2cec:	1d c0       	rjmp	.+58     	; 0x2d28 <__vector_125+0x140>
	}

	if (udd_is_suspend_event()) {
    2cee:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cf2:	86 ff       	sbrs	r24, 6
    2cf4:	08 c0       	rjmp	.+16     	; 0x2d06 <__vector_125+0x11e>
		udd_ack_suspend_event();
    2cf6:	80 e4       	ldi	r24, 0x40	; 64
    2cf8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	e2 d9       	rcall	.-3132   	; 0x20c4 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2d00:	0e 94 43 04 	call	0x886	; 0x886 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2d04:	11 c0       	rjmp	.+34     	; 0x2d28 <__vector_125+0x140>
	}

	if (udd_is_resume_event()) {
    2d06:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d0a:	85 ff       	sbrs	r24, 5
    2d0c:	0d c0       	rjmp	.+26     	; 0x2d28 <__vector_125+0x140>
		udd_ack_resume_event();
    2d0e:	80 e2       	ldi	r24, 0x20	; 32
    2d10:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	d6 d9       	rcall	.-3156   	; 0x20c4 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2d18:	0e 94 44 04 	call	0x888	; 0x888 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2d1c:	05 c0       	rjmp	.+10     	; 0x2d28 <__vector_125+0x140>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2d1e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d22:	84 ff       	sbrs	r24, 4
    2d24:	e4 cf       	rjmp	.-56     	; 0x2cee <__vector_125+0x106>
    2d26:	cc cf       	rjmp	.-104    	; 0x2cc0 <__vector_125+0xd8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2d28:	ff 91       	pop	r31
    2d2a:	ef 91       	pop	r30
    2d2c:	bf 91       	pop	r27
    2d2e:	af 91       	pop	r26
    2d30:	9f 91       	pop	r25
    2d32:	8f 91       	pop	r24
    2d34:	7f 91       	pop	r23
    2d36:	6f 91       	pop	r22
    2d38:	5f 91       	pop	r21
    2d3a:	4f 91       	pop	r20
    2d3c:	3f 91       	pop	r19
    2d3e:	2f 91       	pop	r18
    2d40:	0f 91       	pop	r16
    2d42:	0f 90       	pop	r0
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	0f 90       	pop	r0
    2d48:	1f 90       	pop	r1
    2d4a:	18 95       	reti

00002d4c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2d4c:	1f 92       	push	r1
    2d4e:	0f 92       	push	r0
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	0f 92       	push	r0
    2d54:	11 24       	eor	r1, r1
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
    2d5a:	2f 93       	push	r18
    2d5c:	3f 93       	push	r19
    2d5e:	4f 93       	push	r20
    2d60:	5f 93       	push	r21
    2d62:	6f 93       	push	r22
    2d64:	7f 93       	push	r23
    2d66:	8f 93       	push	r24
    2d68:	9f 93       	push	r25
    2d6a:	af 93       	push	r26
    2d6c:	bf 93       	push	r27
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	ef 93       	push	r30
    2d74:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2d76:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2d7a:	81 fd       	sbrc	r24, 1
    2d7c:	03 c0       	rjmp	.+6      	; 0x2d84 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2d7e:	c3 da       	rcall	.-2682   	; 0x2306 <udd_ctrl_interrupt_tc_setup>
    2d80:	81 11       	cpse	r24, r1
    2d82:	b9 c0       	rjmp	.+370    	; 0x2ef6 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2d8a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2d8e:	81 95       	neg	r24
    2d90:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2d92:	e8 e4       	ldi	r30, 0x48	; 72
    2d94:	f1 e2       	ldi	r31, 0x21	; 33
    2d96:	e8 1b       	sub	r30, r24
    2d98:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2d9a:	20 81       	ld	r18, Z
    2d9c:	31 81       	ldd	r19, Z+1	; 0x01
    2d9e:	28 54       	subi	r18, 0x48	; 72
    2da0:	31 42       	sbci	r19, 0x21	; 33
    2da2:	36 95       	lsr	r19
    2da4:	27 95       	ror	r18
    2da6:	36 95       	lsr	r19
    2da8:	27 95       	ror	r18
    2daa:	36 95       	lsr	r19
    2dac:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2dae:	82 2f       	mov	r24, r18
    2db0:	86 95       	lsr	r24
    2db2:	20 fd       	sbrc	r18, 0
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <__vector_126+0x6e>
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	01 c0       	rjmp	.+2      	; 0x2dbc <__vector_126+0x70>
    2dba:	90 e8       	ldi	r25, 0x80	; 128
    2dbc:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2dbe:	e8 2f       	mov	r30, r24
    2dc0:	ef 70       	andi	r30, 0x0F	; 15
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	ee 0f       	add	r30, r30
    2dc6:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2dc8:	28 2f       	mov	r18, r24
    2dca:	08 2e       	mov	r0, r24
    2dcc:	00 0c       	add	r0, r0
    2dce:	33 0b       	sbc	r19, r19
    2dd0:	22 27       	eor	r18, r18
    2dd2:	33 0f       	add	r19, r19
    2dd4:	22 1f       	adc	r18, r18
    2dd6:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2dd8:	e2 0f       	add	r30, r18
    2dda:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2ddc:	df 01       	movw	r26, r30
    2dde:	aa 0f       	add	r26, r26
    2de0:	bb 1f       	adc	r27, r27
    2de2:	aa 0f       	add	r26, r26
    2de4:	bb 1f       	adc	r27, r27
    2de6:	aa 0f       	add	r26, r26
    2de8:	bb 1f       	adc	r27, r27
    2dea:	a8 5b       	subi	r26, 0xB8	; 184
    2dec:	be 4d       	sbci	r27, 0xDE	; 222
    2dee:	9c 91       	ld	r25, X
    2df0:	95 ff       	sbrs	r25, 5
    2df2:	81 c0       	rjmp	.+258    	; 0x2ef6 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2df4:	fd 01       	movw	r30, r26
    2df6:	00 e2       	ldi	r16, 0x20	; 32
    2df8:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2dfa:	81 11       	cpse	r24, r1
    2dfc:	77 c0       	rjmp	.+238    	; 0x2eec <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2dfe:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2e02:	84 30       	cpi	r24, 0x04	; 4
    2e04:	19 f4       	brne	.+6      	; 0x2e0c <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2e06:	ca d9       	rcall	.-3180   	; 0x219c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2e08:	86 d9       	rcall	.-3316   	; 0x2116 <udd_ctrl_init>
    2e0a:	75 c0       	rjmp	.+234    	; 0x2ef6 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2e0c:	00 91 4a 21 	lds	r16, 0x214A	; 0x80214a <udd_sram+0xa>
    2e10:	10 91 4b 21 	lds	r17, 0x214B	; 0x80214b <udd_sram+0xb>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2e14:	80 91 a4 23 	lds	r24, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    2e18:	90 91 a5 23 	lds	r25, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    2e1c:	c0 91 3b 21 	lds	r28, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2e20:	d0 91 3c 21 	lds	r29, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2e24:	9e 01       	movw	r18, r28
    2e26:	20 0f       	add	r18, r16
    2e28:	31 1f       	adc	r19, r17
    2e2a:	82 17       	cp	r24, r18
    2e2c:	93 07       	cpc	r25, r19
    2e2e:	18 f4       	brcc	.+6      	; 0x2e36 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2e30:	8c 01       	movw	r16, r24
    2e32:	0c 1b       	sub	r16, r28
    2e34:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2e36:	80 91 a2 23 	lds	r24, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    2e3a:	90 91 a3 23 	lds	r25, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    2e3e:	a8 01       	movw	r20, r16
    2e40:	6b ef       	ldi	r22, 0xFB	; 251
    2e42:	70 e2       	ldi	r23, 0x20	; 32
    2e44:	8c 0f       	add	r24, r28
    2e46:	9d 1f       	adc	r25, r29
    2e48:	98 d0       	rcall	.+304    	; 0x2f7a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2e4a:	c0 0f       	add	r28, r16
    2e4c:	d1 1f       	adc	r29, r17
    2e4e:	c0 93 3b 21 	sts	0x213B, r28	; 0x80213b <udd_ctrl_payload_nb_trans>
    2e52:	d0 93 3c 21 	sts	0x213C, r29	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e56:	00 34       	cpi	r16, 0x40	; 64
    2e58:	11 05       	cpc	r17, r1
    2e5a:	69 f4       	brne	.+26     	; 0x2e76 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2e5c:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2e60:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2e64:	8c 0f       	add	r24, r28
    2e66:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e68:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    2e6c:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    2e70:	82 17       	cp	r24, r18
    2e72:	93 07       	cpc	r25, r19
    2e74:	80 f0       	brcs	.+32     	; 0x2e96 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e76:	ea e9       	ldi	r30, 0x9A	; 154
    2e78:	f3 e2       	ldi	r31, 0x23	; 35
    2e7a:	c2 87       	std	Z+10, r28	; 0x0a
    2e7c:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e7e:	06 84       	ldd	r0, Z+14	; 0x0e
    2e80:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e82:	e0 2d       	mov	r30, r0
    2e84:	30 97       	sbiw	r30, 0x00	; 0
    2e86:	29 f0       	breq	.+10     	; 0x2e92 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e88:	09 95       	icall
    2e8a:	81 11       	cpse	r24, r1
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2e8e:	6a d9       	rcall	.-3372   	; 0x2164 <udd_ctrl_stall_data>
    2e90:	32 c0       	rjmp	.+100    	; 0x2ef6 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2e92:	76 d9       	rcall	.-3348   	; 0x2180 <udd_ctrl_send_zlp_in>
    2e94:	30 c0       	rjmp	.+96     	; 0x2ef6 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e96:	80 91 a4 23 	lds	r24, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    2e9a:	90 91 a5 23 	lds	r25, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    2e9e:	c8 17       	cp	r28, r24
    2ea0:	d9 07       	cpc	r29, r25
    2ea2:	f9 f4       	brne	.+62     	; 0x2ee2 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2ea4:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <udd_g_ctrlreq+0xe>
    2ea8:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <udd_g_ctrlreq+0xf>
    2eac:	30 97       	sbiw	r30, 0x00	; 0
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2eb0:	59 d9       	rcall	.-3406   	; 0x2164 <udd_ctrl_stall_data>
    2eb2:	21 c0       	rjmp	.+66     	; 0x2ef6 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2eb4:	09 95       	icall
    2eb6:	81 11       	cpse	r24, r1
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2eba:	54 d9       	rcall	.-3416   	; 0x2164 <udd_ctrl_stall_data>
    2ebc:	1c c0       	rjmp	.+56     	; 0x2ef6 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2ebe:	20 91 3d 21 	lds	r18, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2ec2:	30 91 3e 21 	lds	r19, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2ec6:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2eca:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2ece:	82 0f       	add	r24, r18
    2ed0:	93 1f       	adc	r25, r19
    2ed2:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2ed6:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2eda:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    2ede:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2ee2:	e8 e4       	ldi	r30, 0x48	; 72
    2ee4:	f1 e2       	ldi	r31, 0x21	; 33
    2ee6:	02 e0       	ldi	r16, 0x02	; 2
    2ee8:	06 93       	lac	Z, r16
    2eea:	05 c0       	rjmp	.+10     	; 0x2ef6 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2eec:	80 38       	cpi	r24, 0x80	; 128
    2eee:	11 f4       	brne	.+4      	; 0x2ef4 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2ef0:	5d d9       	rcall	.-3398   	; 0x21ac <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2ef2:	01 c0       	rjmp	.+2      	; 0x2ef6 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2ef4:	77 da       	rcall	.-2834   	; 0x23e4 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2ef6:	ff 91       	pop	r31
    2ef8:	ef 91       	pop	r30
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	bf 91       	pop	r27
    2f00:	af 91       	pop	r26
    2f02:	9f 91       	pop	r25
    2f04:	8f 91       	pop	r24
    2f06:	7f 91       	pop	r23
    2f08:	6f 91       	pop	r22
    2f0a:	5f 91       	pop	r21
    2f0c:	4f 91       	pop	r20
    2f0e:	3f 91       	pop	r19
    2f10:	2f 91       	pop	r18
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	0f 90       	pop	r0
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	0f 90       	pop	r0
    2f1c:	1f 90       	pop	r1
    2f1e:	18 95       	reti

00002f20 <__udivmodhi4>:
    2f20:	aa 1b       	sub	r26, r26
    2f22:	bb 1b       	sub	r27, r27
    2f24:	51 e1       	ldi	r21, 0x11	; 17
    2f26:	07 c0       	rjmp	.+14     	; 0x2f36 <__udivmodhi4_ep>

00002f28 <__udivmodhi4_loop>:
    2f28:	aa 1f       	adc	r26, r26
    2f2a:	bb 1f       	adc	r27, r27
    2f2c:	a6 17       	cp	r26, r22
    2f2e:	b7 07       	cpc	r27, r23
    2f30:	10 f0       	brcs	.+4      	; 0x2f36 <__udivmodhi4_ep>
    2f32:	a6 1b       	sub	r26, r22
    2f34:	b7 0b       	sbc	r27, r23

00002f36 <__udivmodhi4_ep>:
    2f36:	88 1f       	adc	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	5a 95       	dec	r21
    2f3c:	a9 f7       	brne	.-22     	; 0x2f28 <__udivmodhi4_loop>
    2f3e:	80 95       	com	r24
    2f40:	90 95       	com	r25
    2f42:	bc 01       	movw	r22, r24
    2f44:	cd 01       	movw	r24, r26
    2f46:	08 95       	ret

00002f48 <__divmodhi4>:
    2f48:	97 fb       	bst	r25, 7
    2f4a:	07 2e       	mov	r0, r23
    2f4c:	16 f4       	brtc	.+4      	; 0x2f52 <__divmodhi4+0xa>
    2f4e:	00 94       	com	r0
    2f50:	06 d0       	rcall	.+12     	; 0x2f5e <__divmodhi4_neg1>
    2f52:	77 fd       	sbrc	r23, 7
    2f54:	08 d0       	rcall	.+16     	; 0x2f66 <__divmodhi4_neg2>
    2f56:	e4 df       	rcall	.-56     	; 0x2f20 <__udivmodhi4>
    2f58:	07 fc       	sbrc	r0, 7
    2f5a:	05 d0       	rcall	.+10     	; 0x2f66 <__divmodhi4_neg2>
    2f5c:	3e f4       	brtc	.+14     	; 0x2f6c <__divmodhi4_exit>

00002f5e <__divmodhi4_neg1>:
    2f5e:	90 95       	com	r25
    2f60:	81 95       	neg	r24
    2f62:	9f 4f       	sbci	r25, 0xFF	; 255
    2f64:	08 95       	ret

00002f66 <__divmodhi4_neg2>:
    2f66:	70 95       	com	r23
    2f68:	61 95       	neg	r22
    2f6a:	7f 4f       	sbci	r23, 0xFF	; 255

00002f6c <__divmodhi4_exit>:
    2f6c:	08 95       	ret

00002f6e <__tablejump2__>:
    2f6e:	ee 0f       	add	r30, r30
    2f70:	ff 1f       	adc	r31, r31
    2f72:	05 90       	lpm	r0, Z+
    2f74:	f4 91       	lpm	r31, Z
    2f76:	e0 2d       	mov	r30, r0
    2f78:	09 94       	ijmp

00002f7a <memcpy>:
    2f7a:	fb 01       	movw	r30, r22
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <memcpy+0xa>
    2f80:	01 90       	ld	r0, Z+
    2f82:	0d 92       	st	X+, r0
    2f84:	41 50       	subi	r20, 0x01	; 1
    2f86:	50 40       	sbci	r21, 0x00	; 0
    2f88:	d8 f7       	brcc	.-10     	; 0x2f80 <memcpy+0x6>
    2f8a:	08 95       	ret

00002f8c <_exit>:
    2f8c:	f8 94       	cli

00002f8e <__stop_program>:
    2f8e:	ff cf       	rjmp	.-2      	; 0x2f8e <__stop_program>
