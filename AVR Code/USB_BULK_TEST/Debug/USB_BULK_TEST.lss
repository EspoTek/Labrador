
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00802000  00002f9a  00003030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b44  0080208c  0080208c  000030bc  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00003130  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db75  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024f0  00000000  00000000  000112a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000aced  00000000  00000000  00013795  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f30  00000000  00000000  0001e484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030168  00000000  00000000  0001f3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037a1  00000000  00000000  0004f51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00052cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c3d5  00000000  00000000  000531d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	25 c1       	rjmp	.+586    	; 0x24c <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	3b c1       	rjmp	.+630    	; 0x284 <__bad_interrupt>
       e:	00 00       	nop
      10:	39 c1       	rjmp	.+626    	; 0x284 <__bad_interrupt>
      12:	00 00       	nop
      14:	37 c1       	rjmp	.+622    	; 0x284 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_6>
      1c:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_7>
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c1       	rjmp	.+582    	; 0x284 <__bad_interrupt>
      3e:	00 00       	nop
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_24>
      64:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_25>
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	01 c1       	rjmp	.+514    	; 0x284 <__bad_interrupt>
      82:	00 00       	nop
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	db c0       	rjmp	.+438    	; 0x284 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cf c0       	rjmp	.+414    	; 0x284 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cd c0       	rjmp	.+410    	; 0x284 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	cb c0       	rjmp	.+406    	; 0x284 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c9 c0       	rjmp	.+402    	; 0x284 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c7 c0       	rjmp	.+398    	; 0x284 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c5 c0       	rjmp	.+394    	; 0x284 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c3 c0       	rjmp	.+390    	; 0x284 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c1 c0       	rjmp	.+386    	; 0x284 <__bad_interrupt>
     102:	00 00       	nop
     104:	bf c0       	rjmp	.+382    	; 0x284 <__bad_interrupt>
     106:	00 00       	nop
     108:	bd c0       	rjmp	.+378    	; 0x284 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bb c0       	rjmp	.+374    	; 0x284 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b9 c0       	rjmp	.+370    	; 0x284 <__bad_interrupt>
     112:	00 00       	nop
     114:	b7 c0       	rjmp	.+366    	; 0x284 <__bad_interrupt>
     116:	00 00       	nop
     118:	b5 c0       	rjmp	.+362    	; 0x284 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a6 c4       	rjmp	.+2380   	; 0xa6a <__vector_71>
     11e:	00 00       	nop
     120:	b1 c0       	rjmp	.+354    	; 0x284 <__bad_interrupt>
     122:	00 00       	nop
     124:	af c0       	rjmp	.+350    	; 0x284 <__bad_interrupt>
     126:	00 00       	nop
     128:	ad c0       	rjmp	.+346    	; 0x284 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	ab c0       	rjmp	.+342    	; 0x284 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a9 c0       	rjmp	.+338    	; 0x284 <__bad_interrupt>
     132:	00 00       	nop
     134:	a7 c0       	rjmp	.+334    	; 0x284 <__bad_interrupt>
     136:	00 00       	nop
     138:	a5 c0       	rjmp	.+330    	; 0x284 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a3 c0       	rjmp	.+326    	; 0x284 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a1 c0       	rjmp	.+322    	; 0x284 <__bad_interrupt>
     142:	00 00       	nop
     144:	9f c0       	rjmp	.+318    	; 0x284 <__bad_interrupt>
     146:	00 00       	nop
     148:	9d c0       	rjmp	.+314    	; 0x284 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_83>
     150:	99 c0       	rjmp	.+306    	; 0x284 <__bad_interrupt>
     152:	00 00       	nop
     154:	97 c0       	rjmp	.+302    	; 0x284 <__bad_interrupt>
     156:	00 00       	nop
     158:	95 c0       	rjmp	.+298    	; 0x284 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	93 c0       	rjmp	.+294    	; 0x284 <__bad_interrupt>
     15e:	00 00       	nop
     160:	91 c0       	rjmp	.+290    	; 0x284 <__bad_interrupt>
     162:	00 00       	nop
     164:	8f c0       	rjmp	.+286    	; 0x284 <__bad_interrupt>
     166:	00 00       	nop
     168:	8d c0       	rjmp	.+282    	; 0x284 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8b c0       	rjmp	.+278    	; 0x284 <__bad_interrupt>
     16e:	00 00       	nop
     170:	89 c0       	rjmp	.+274    	; 0x284 <__bad_interrupt>
     172:	00 00       	nop
     174:	87 c0       	rjmp	.+270    	; 0x284 <__bad_interrupt>
     176:	00 00       	nop
     178:	85 c0       	rjmp	.+266    	; 0x284 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	83 c0       	rjmp	.+262    	; 0x284 <__bad_interrupt>
     17e:	00 00       	nop
     180:	81 c0       	rjmp	.+258    	; 0x284 <__bad_interrupt>
     182:	00 00       	nop
     184:	7f c0       	rjmp	.+254    	; 0x284 <__bad_interrupt>
     186:	00 00       	nop
     188:	7d c0       	rjmp	.+250    	; 0x284 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7b c0       	rjmp	.+246    	; 0x284 <__bad_interrupt>
     18e:	00 00       	nop
     190:	79 c0       	rjmp	.+242    	; 0x284 <__bad_interrupt>
     192:	00 00       	nop
     194:	77 c0       	rjmp	.+238    	; 0x284 <__bad_interrupt>
     196:	00 00       	nop
     198:	75 c0       	rjmp	.+234    	; 0x284 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	73 c0       	rjmp	.+230    	; 0x284 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	71 c0       	rjmp	.+226    	; 0x284 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6f c0       	rjmp	.+222    	; 0x284 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6d c0       	rjmp	.+218    	; 0x284 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6b c0       	rjmp	.+214    	; 0x284 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	69 c0       	rjmp	.+210    	; 0x284 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	67 c0       	rjmp	.+206    	; 0x284 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	65 c0       	rjmp	.+202    	; 0x284 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	63 c0       	rjmp	.+198    	; 0x284 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	61 c0       	rjmp	.+194    	; 0x284 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5f c0       	rjmp	.+190    	; 0x284 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5d c0       	rjmp	.+186    	; 0x284 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5b c0       	rjmp	.+182    	; 0x284 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	59 c0       	rjmp	.+178    	; 0x284 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	57 c0       	rjmp	.+174    	; 0x284 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	55 c0       	rjmp	.+170    	; 0x284 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	53 c0       	rjmp	.+166    	; 0x284 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	51 c0       	rjmp	.+162    	; 0x284 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4f c0       	rjmp	.+158    	; 0x284 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4d c0       	rjmp	.+154    	; 0x284 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4b c0       	rjmp	.+150    	; 0x284 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	49 c0       	rjmp	.+146    	; 0x284 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__vector_125>
     1f8:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__vector_126>
     1fc:	21 04       	cpc	r2, r1
     1fe:	23 04       	cpc	r2, r3
     200:	25 04       	cpc	r2, r5
     202:	27 04       	cpc	r2, r7
     204:	29 04       	cpc	r2, r9
     206:	2b 04       	cpc	r2, r11
     208:	2d 04       	cpc	r2, r13
     20a:	2f 04       	cpc	r2, r15
     20c:	43 04       	cpc	r4, r3
     20e:	45 04       	cpc	r4, r5
     210:	47 04       	cpc	r4, r7
     212:	49 04       	cpc	r4, r9
     214:	4b 04       	cpc	r4, r11
     216:	50 04       	cpc	r5, r0
     218:	4d 04       	cpc	r4, r13
     21a:	4f 04       	cpc	r4, r15
     21c:	8d 0c       	add	r8, r13
     21e:	b2 0c       	add	r11, r2
     220:	d5 0c       	add	r13, r5
     222:	f8 0c       	add	r15, r8
     224:	01 0d       	add	r16, r1
     226:	06 0d       	add	r16, r6
     228:	5f 0d       	add	r21, r15
     22a:	64 0d       	add	r22, r4
     22c:	83 0d       	add	r24, r3
     22e:	12 0d       	add	r17, r2
     230:	1d 0d       	add	r17, r13
     232:	28 0d       	add	r18, r8
     234:	37 0d       	add	r19, r7
     236:	3a 0d       	add	r19, r10
     238:	3d 0d       	add	r19, r13
     23a:	48 0d       	add	r20, r8
     23c:	53 0d       	add	r21, r3
     23e:	55 11       	cpse	r21, r5
     240:	58 11       	cpse	r21, r8
     242:	5b 11       	cpse	r21, r11
     244:	5e 11       	cpse	r21, r14
     246:	61 11       	cpse	r22, r1
     248:	64 11       	cpse	r22, r4
     24a:	67 11       	cpse	r22, r7

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	cd bf       	out	0x3d, r28	; 61
     254:	df e2       	ldi	r29, 0x2F	; 47
     256:	de bf       	out	0x3e, r29	; 62

00000258 <__do_copy_data>:
     258:	10 e2       	ldi	r17, 0x20	; 32
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	ea e9       	ldi	r30, 0x9A	; 154
     260:	ff e2       	ldi	r31, 0x2F	; 47
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	ac 38       	cpi	r26, 0x8C	; 140
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	2b e2       	ldi	r18, 0x2B	; 43
     270:	ac e8       	ldi	r26, 0x8C	; 140
     272:	b0 e2       	ldi	r27, 0x20	; 32
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a0 3d       	cpi	r26, 0xD0	; 208
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	94 d2       	rcall	.+1320   	; 0x7a8 <main>
     280:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	c0 e5       	ldi	r28, 0x50	; 80
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	84 e0       	ldi	r24, 0x04	; 4
     290:	8e 83       	std	Y+6, r24	; 0x06
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	a4 d3       	rcall	.+1864   	; 0x9de <ReadCalibrationByte>
     296:	e0 e6       	ldi	r30, 0x60	; 96
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	8b eb       	ldi	r24, 0xBB	; 187
     29e:	86 83       	std	Z+6, r24	; 0x06
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	88 ed       	ldi	r24, 0xD8	; 216
     2aa:	84 bf       	out	0x34, r24	; 52
     2ac:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	88 83       	st	Y, r24
     2b4:	e0 e5       	ldi	r30, 0x50	; 80
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	81 81       	ldd	r24, Z+1	; 0x01
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	e9 f7       	brne	.-6      	; 0x2b8 <tiny_calibration_init+0x32>
     2be:	e0 e5       	ldi	r30, 0x50	; 80
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	88 e1       	ldi	r24, 0x18	; 24
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 ff       	sbrs	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x46>
     2d2:	e0 e5       	ldi	r30, 0x50	; 80
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 83       	st	Z, r24
     2dc:	81 81       	ldd	r24, Z+1	; 0x01
     2de:	84 ff       	sbrs	r24, 4
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <tiny_calibration_init+0x56>
     2e2:	88 ed       	ldi	r24, 0xD8	; 216
     2e4:	84 bf       	out	0x34, r24	; 52
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <tiny_calibration_first_sof>:
     2f2:	e0 e7       	ldi	r30, 0x70	; 112
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	85 81       	ldd	r24, Z+5	; 0x05
     2f8:	8e 7f       	andi	r24, 0xFE	; 254
     2fa:	85 83       	std	Z+5, r24	; 0x05
     2fc:	e0 e0       	ldi	r30, 0x00	; 0
     2fe:	fa e0       	ldi	r31, 0x0A	; 10
     300:	8f eb       	ldi	r24, 0xBF	; 191
     302:	9d e5       	ldi	r25, 0x5D	; 93
     304:	86 a3       	std	Z+38, r24	; 0x26
     306:	97 a3       	std	Z+39, r25	; 0x27
     308:	80 ee       	ldi	r24, 0xE0	; 224
     30a:	9e e2       	ldi	r25, 0x2E	; 46
     30c:	80 a3       	std	Z+32, r24	; 0x20
     30e:	91 a3       	std	Z+33, r25	; 0x21
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	80 83       	st	Z, r24
     314:	08 95       	ret

00000316 <tiny_calibration_maintain>:
     316:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     31a:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     31e:	81 3e       	cpi	r24, 0xE1	; 225
     320:	2e e2       	ldi	r18, 0x2E	; 46
     322:	92 07       	cpc	r25, r18
     324:	20 f0       	brcs	.+8      	; 0x32e <tiny_calibration_maintain+0x18>
     326:	20 91 72 21 	lds	r18, 0x2172	; 0x802172 <cali_value_negative_gradient>
     32a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     32e:	80 3e       	cpi	r24, 0xE0	; 224
     330:	2e e2       	ldi	r18, 0x2E	; 46
     332:	92 07       	cpc	r25, r18
     334:	20 f4       	brcc	.+8      	; 0x33e <tiny_calibration_maintain+0x28>
     336:	20 91 6f 21 	lds	r18, 0x216F	; 0x80216f <cali_value_positive_gradient>
     33a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     33e:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     342:	22 23       	and	r18, r18
     344:	31 f0       	breq	.+12     	; 0x352 <tiny_calibration_maintain+0x3c>
     346:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     350:	35 c0       	rjmp	.+106    	; 0x3bc <tiny_calibration_maintain+0xa6>
     352:	88 5f       	subi	r24, 0xF8	; 248
     354:	9a 42       	sbci	r25, 0x2A	; 42
     356:	81 3d       	cpi	r24, 0xD1	; 209
     358:	97 40       	sbci	r25, 0x07	; 7
     35a:	80 f1       	brcs	.+96     	; 0x3bc <tiny_calibration_maintain+0xa6>
     35c:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <__data_end>
     360:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     364:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     368:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     36c:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	a1 1d       	adc	r26, r1
     374:	b1 1d       	adc	r27, r1
     376:	80 93 8d 20 	sts	0x208D, r24	; 0x80208d <outOfRange>
     37a:	90 93 8e 20 	sts	0x208E, r25	; 0x80208e <outOfRange+0x1>
     37e:	a0 93 8f 20 	sts	0x208F, r26	; 0x80208f <outOfRange+0x2>
     382:	b0 93 90 20 	sts	0x2090, r27	; 0x802090 <outOfRange+0x3>
     386:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     38a:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     38e:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     392:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     396:	89 2f       	mov	r24, r25
     398:	9a 2f       	mov	r25, r26
     39a:	ab 2f       	mov	r26, r27
     39c:	bb 27       	eor	r27, r27
     39e:	ee e7       	ldi	r30, 0x7E	; 126
     3a0:	f1 e2       	ldi	r31, 0x21	; 33
     3a2:	84 8b       	std	Z+20, r24	; 0x14
     3a4:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <outOfRange>
     3a8:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <outOfRange+0x1>
     3ac:	a0 91 8f 20 	lds	r26, 0x208F	; 0x80208f <outOfRange+0x2>
     3b0:	b0 91 90 20 	lds	r27, 0x2090	; 0x802090 <outOfRange+0x3>
     3b4:	83 8b       	std	Z+19, r24	; 0x13
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3bc:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3c0:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	b1 f4       	brne	.+44     	; 0x3f4 <tiny_calibration_maintain+0xde>
     3c8:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3cc:	8f 3f       	cpi	r24, 0xFF	; 255
     3ce:	91 f0       	breq	.+36     	; 0x3f4 <tiny_calibration_maintain+0xde>
     3d0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3d4:	81 11       	cpse	r24, r1
     3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <tiny_calibration_maintain+0xce>
     3d8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3dc:	81 50       	subi	r24, 0x01	; 1
     3de:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3e2:	08 95       	ret
     3e4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3e8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3ec:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3f0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3f4:	08 95       	ret

000003f6 <tiny_calibration_safe_add>:
     3f6:	00 97       	sbiw	r24, 0x00	; 0
     3f8:	09 f4       	brne	.+2      	; 0x3fc <tiny_calibration_safe_add+0x6>
     3fa:	66 c0       	rjmp	.+204    	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
     3fc:	0c f0       	brlt	.+2      	; 0x400 <__FUSE_REGION_LENGTH__>
     3fe:	9c 01       	movw	r18, r24
     400:	99 23       	and	r25, r25
     402:	34 f4       	brge	.+12     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     404:	22 27       	eor	r18, r18
     406:	33 27       	eor	r19, r19
     408:	28 1b       	sub	r18, r24
     40a:	39 0b       	sbc	r19, r25
     40c:	51 e0       	ldi	r21, 0x01	; 1
     40e:	01 c0       	rjmp	.+2      	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	e8 e6       	ldi	r30, 0x68	; 104
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	83 81       	ldd	r24, Z+3	; 0x03
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     41e:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     422:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     426:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     42a:	96 95       	lsr	r25
     42c:	98 2f       	mov	r25, r24
     42e:	88 27       	eor	r24, r24
     430:	97 95       	ror	r25
     432:	87 95       	ror	r24
     434:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     438:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     43c:	42 81       	ldd	r20, Z+2	; 0x02
     43e:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     442:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     446:	84 0f       	add	r24, r20
     448:	91 1d       	adc	r25, r1
     44a:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     44e:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     452:	00 00       	nop
     454:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     458:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     45c:	82 17       	cp	r24, r18
     45e:	93 07       	cpc	r25, r19
     460:	28 f4       	brcc	.+10     	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
     462:	10 92 70 21 	sts	0x2170, r1	; 0x802170 <calTemp>
     466:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <calTemp+0x1>
     46a:	08 95       	ret
     46c:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     470:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     474:	82 0f       	add	r24, r18
     476:	93 1f       	adc	r25, r19
     478:	81 15       	cp	r24, r1
     47a:	90 42       	sbci	r25, 0x20	; 32
     47c:	38 f0       	brcs	.+14     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	9f e1       	ldi	r25, 0x1F	; 31
     482:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     486:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     48a:	08 95       	ret
     48c:	55 23       	and	r21, r21
     48e:	59 f0       	breq	.+22     	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
     490:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     494:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     498:	82 1b       	sub	r24, r18
     49a:	93 0b       	sbc	r25, r19
     49c:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <calTemp>
     4a0:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <calTemp+0x1>
     4a4:	0a c0       	rjmp	.+20     	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
     4a6:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     4aa:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     4ae:	28 0f       	add	r18, r24
     4b0:	39 1f       	adc	r19, r25
     4b2:	20 93 70 21 	sts	0x2170, r18	; 0x802170 <calTemp>
     4b6:	30 93 71 21 	sts	0x2171, r19	; 0x802171 <calTemp+0x1>
     4ba:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <calTemp>
     4be:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <calTemp+0x1>
     4c2:	8f 77       	andi	r24, 0x7F	; 127
     4c4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4c8:	08 95       	ret

000004ca <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4ce:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4d2:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4d6:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4da:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4de:	9e 01       	movw	r18, r28
     4e0:	28 1b       	sub	r18, r24
     4e2:	39 0b       	sbc	r19, r25
     4e4:	20 93 73 21 	sts	0x2173, r18	; 0x802173 <gradient>
     4e8:	30 93 74 21 	sts	0x2174, r19	; 0x802174 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4ec:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     4f0:	81 11       	cpse	r24, r1
     4f2:	4d c0       	rjmp	.+154    	; 0x58e <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4f4:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     4f8:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     4fc:	8e 3c       	cpi	r24, 0xCE	; 206
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	e4 f4       	brge	.+56     	; 0x53a <tiny_calibration_find_values+0x70>
     502:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     506:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     50a:	8b 36       	cpi	r24, 0x6B	; 107
     50c:	9f 4f       	sbci	r25, 0xFF	; 255
     50e:	ac f0       	brlt	.+42     	; 0x53a <tiny_calibration_find_values+0x70>
			if(inarow){
     510:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     514:	88 23       	and	r24, r24
     516:	31 f0       	breq	.+12     	; 0x524 <tiny_calibration_find_values+0x5a>
				inarow--;
     518:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     522:	35 c0       	rjmp	.+106    	; 0x58e <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     524:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     528:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <__data_end>
				inarow = NUM_INAROW;
     532:	8c e0       	ldi	r24, 0x0C	; 12
     534:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     538:	2a c0       	rjmp	.+84     	; 0x58e <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     53a:	8c e0       	ldi	r24, 0x0C	; 12
     53c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     540:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     544:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     548:	8a 36       	cpi	r24, 0x6A	; 106
     54a:	9f 4f       	sbci	r25, 0xFF	; 255
     54c:	1c f0       	brlt	.+6      	; 0x554 <tiny_calibration_find_values+0x8a>
     54e:	8f ef       	ldi	r24, 0xFF	; 255
     550:	9f ef       	ldi	r25, 0xFF	; 255
     552:	02 c0       	rjmp	.+4      	; 0x558 <tiny_calibration_find_values+0x8e>
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <calChange>
     55c:	90 93 6e 21 	sts	0x216E, r25	; 0x80216e <calChange+0x1>
			calChange -= gradient / 48;
     560:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     564:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     568:	20 91 6d 21 	lds	r18, 0x216D	; 0x80216d <calChange>
     56c:	30 91 6e 21 	lds	r19, 0x216E	; 0x80216e <calChange+0x1>
     570:	60 e3       	ldi	r22, 0x30	; 48
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__divmodhi4>
     578:	26 1b       	sub	r18, r22
     57a:	37 0b       	sbc	r19, r23
     57c:	20 93 6d 21 	sts	0x216D, r18	; 0x80216d <calChange>
     580:	30 93 6e 21 	sts	0x216E, r19	; 0x80216e <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     584:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <calChange>
     588:	90 91 6e 21 	lds	r25, 0x216E	; 0x80216e <calChange+0x1>
     58c:	34 df       	rcall	.-408    	; 0x3f6 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     58e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	29 f5       	brne	.+74     	; 0x5e0 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     596:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     59a:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     59e:	c3 97       	sbiw	r24, 0x33	; 51
     5a0:	94 f0       	brlt	.+36     	; 0x5c6 <tiny_calibration_find_values+0xfc>
			if(inarow){
     5a2:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     5a6:	88 23       	and	r24, r24
     5a8:	31 f0       	breq	.+12     	; 0x5b6 <tiny_calibration_find_values+0xec>
				inarow--;
     5aa:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     5ae:	81 50       	subi	r24, 0x01	; 1
     5b0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5b4:	15 c0       	rjmp	.+42     	; 0x5e0 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5ba:	80 93 6f 21 	sts	0x216F, r24	; 0x80216f <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <__data_end>
     5c4:	0d c0       	rjmp	.+26     	; 0x5e0 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5c6:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <gradient>
     5ca:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <gradient+0x1>
     5ce:	87 39       	cpi	r24, 0x97	; 151
     5d0:	91 05       	cpc	r25, r1
     5d2:	1c f4       	brge	.+6      	; 0x5da <tiny_calibration_find_values+0x110>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <tiny_calibration_find_values+0x114>
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	9f ef       	ldi	r25, 0xFF	; 255
     5de:	0b df       	rcall	.-490    	; 0x3f6 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5e0:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5e4:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5ee:	86 17       	cp	r24, r22
     5f0:	97 07       	cpc	r25, r23
     5f2:	79 f0       	breq	.+30     	; 0x612 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5f4:	68 17       	cp	r22, r24
     5f6:	79 07       	cpc	r23, r25
     5f8:	28 f4       	brcc	.+10     	; 0x604 <magnitude_difference+0x16>
     5fa:	9c 01       	movw	r18, r24
     5fc:	26 1b       	sub	r18, r22
     5fe:	37 0b       	sbc	r19, r23
     600:	b9 01       	movw	r22, r18
     602:	09 c0       	rjmp	.+18     	; 0x616 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     604:	86 17       	cp	r24, r22
     606:	97 07       	cpc	r25, r23
     608:	18 f4       	brcc	.+6      	; 0x610 <magnitude_difference+0x22>
     60a:	68 1b       	sub	r22, r24
     60c:	79 0b       	sbc	r23, r25
     60e:	03 c0       	rjmp	.+6      	; 0x616 <magnitude_difference+0x28>
     610:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	86 2f       	mov	r24, r22
     618:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     61a:	08 95       	ret

0000061c <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     624:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     628:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     62c:	89 2b       	or	r24, r25
     62e:	51 f0       	breq	.+20     	; 0x644 <tiny_calibration_layer2+0x28>
		layer2_counter--;
     630:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     634:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     63e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     642:	4d c0       	rjmp	.+154    	; 0x6de <tiny_calibration_layer2+0xc2>
	}
	layer2_counter = LAYER2_INTERVAL;
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     64c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     650:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     654:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	09 f4       	brne	.+2      	; 0x65e <tiny_calibration_layer2+0x42>
     65c:	40 c0       	rjmp	.+128    	; 0x6de <tiny_calibration_layer2+0xc2>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     65e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     662:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	TRFCNT_temp = TRFCNT_temp % (global_mode > 5 ? PACKET_SIZE : HALFPACKET_SIZE);
     666:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <global_mode>
     66a:	26 30       	cpi	r18, 0x06	; 6
     66c:	18 f4       	brcc	.+6      	; 0x674 <tiny_calibration_layer2+0x58>
     66e:	67 e7       	ldi	r22, 0x77	; 119
     670:	71 e0       	ldi	r23, 0x01	; 1
     672:	02 c0       	rjmp	.+4      	; 0x678 <tiny_calibration_layer2+0x5c>
     674:	6e ee       	ldi	r22, 0xEE	; 238
     676:	72 e0       	ldi	r23, 0x02	; 2
     678:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__udivmodhi4>
     67c:	08 2f       	mov	r16, r24
     67e:	19 2f       	mov	r17, r25
     680:	c8 2f       	mov	r28, r24
     682:	d1 2f       	mov	r29, r17
	
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     684:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     688:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68c:	8c 17       	cp	r24, r28
     68e:	9d 07       	cpc	r25, r29
     690:	80 f4       	brcc	.+32     	; 0x6b2 <tiny_calibration_layer2+0x96>
     692:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     696:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     69a:	80 2f       	mov	r24, r16
     69c:	91 2f       	mov	r25, r17
     69e:	a7 df       	rcall	.-178    	; 0x5ee <magnitude_difference>
     6a0:	02 97       	sbiw	r24, 0x02	; 2
     6a2:	38 f0       	brcs	.+14     	; 0x6b2 <tiny_calibration_layer2+0x96>
		TC_CALI.PERBUF = 24000;
     6a4:	80 ec       	ldi	r24, 0xC0	; 192
     6a6:	9d e5       	ldi	r25, 0x5D	; 93
     6a8:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ac:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6b0:	16 c0       	rjmp	.+44     	; 0x6de <tiny_calibration_layer2+0xc2>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6b2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6b6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6ba:	c8 17       	cp	r28, r24
     6bc:	d9 07       	cpc	r29, r25
     6be:	78 f4       	brcc	.+30     	; 0x6de <tiny_calibration_layer2+0xc2>
     6c0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6c4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6c8:	80 2f       	mov	r24, r16
     6ca:	91 2f       	mov	r25, r17
     6cc:	90 df       	rcall	.-224    	; 0x5ee <magnitude_difference>
     6ce:	02 97       	sbiw	r24, 0x02	; 2
     6d0:	30 f0       	brcs	.+12     	; 0x6de <tiny_calibration_layer2+0xc2>
		TC_CALI.PERBUF = 23999;
     6d2:	8f eb       	ldi	r24, 0xBF	; 191
     6d4:	9d e5       	ldi	r25, 0x5D	; 93
     6d6:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6da:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	08 95       	ret

000006e8 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6e8:	ac 01       	movw	r20, r24
     6ea:	46 0f       	add	r20, r22
     6ec:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6ee:	86 1b       	sub	r24, r22
     6f0:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6f2:	e0 e0       	ldi	r30, 0x00	; 0
     6f4:	fa e0       	ldi	r31, 0x0A	; 10
     6f6:	20 a1       	ldd	r18, Z+32	; 0x20
     6f8:	31 a1       	ldd	r19, Z+33	; 0x21
     6fa:	24 17       	cp	r18, r20
     6fc:	35 07       	cpc	r19, r21
     6fe:	d8 f7       	brcc	.-10     	; 0x6f6 <tiny_calibration_synchronise_phase+0xe>
     700:	20 a1       	ldd	r18, Z+32	; 0x20
     702:	31 a1       	ldd	r19, Z+33	; 0x21
     704:	82 17       	cp	r24, r18
     706:	93 07       	cpc	r25, r19
     708:	b0 f7       	brcc	.-20     	; 0x6f6 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     70a:	08 95       	ret

0000070c <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     70c:	e0 e8       	ldi	r30, 0x80	; 128
     70e:	f6 e0       	ldi	r31, 0x06	; 6
     710:	8f e0       	ldi	r24, 0x0F	; 15
     712:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     714:	85 e0       	ldi	r24, 0x05	; 5
     716:	84 83       	std	Z+4, r24	; 0x04
     718:	08 95       	ret

0000071a <eeprom_safe_read>:
 *  Author: Esposch
 */ 
#include <asf.h>
#include "tiny_eeprom.h"

void eeprom_safe_read(){
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     720:	c0 e4       	ldi	r28, 0x40	; 64
     722:	d0 e0       	ldi	r29, 0x00	; 0
     724:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     726:	80 e4       	ldi	r24, 0x40	; 64
     728:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_read_buffer(EEPROM_CURRENT_PAGE*EEPROM_PAGE_SIZE, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     72a:	40 e2       	ldi	r20, 0x20	; 32
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	68 ea       	ldi	r22, 0xA8	; 168
     730:	7b e2       	ldi	r23, 0x2B	; 43
     732:	80 e2       	ldi	r24, 0x20	; 32
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <nvm_eeprom_read_buffer>
	CLK.PSCTRL = previous_clk_settings;
     73a:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	08 95       	ret

00000744 <eeprom_safe_write>:

void eeprom_safe_write(){
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     74a:	c0 e4       	ldi	r28, 0x40	; 64
     74c:	d0 e0       	ldi	r29, 0x00	; 0
     74e:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     750:	80 e4       	ldi	r24, 0x40	; 64
     752:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_load_page_to_buffer(eeprom_buffer_write);
     754:	8b ea       	ldi	r24, 0xAB	; 171
     756:	95 e2       	ldi	r25, 0x25	; 37
     758:	0e 94 21 10 	call	0x2042	; 0x2042 <nvm_eeprom_load_page_to_buffer>
	nvm_eeprom_atomic_write_page(EEPROM_CURRENT_PAGE);
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 40 10 	call	0x2080	; 0x2080 <nvm_eeprom_atomic_write_page>
	CLK.PSCTRL = previous_clk_settings;
     762:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	08 95       	ret

0000076c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     76c:	08 95       	ret

0000076e <iso_callback>:
bool main_setup_in_received(void)
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
		else{
			udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE + offset], 125, iso_callback);
		}
		return;
	#else
		udd_ep_run(0x81, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE], PACKET_SIZE, iso_callback);
     772:	20 91 96 20 	lds	r18, 0x2096	; 0x802096 <usb_state>
     776:	8e ee       	ldi	r24, 0xEE	; 238
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	28 9f       	mul	r18, r24
     77c:	a0 01       	movw	r20, r0
     77e:	29 9f       	mul	r18, r25
     780:	50 0d       	add	r21, r0
     782:	11 24       	eor	r1, r1
     784:	44 53       	subi	r20, 0x34	; 52
     786:	5a 4d       	sbci	r21, 0xDA	; 218
     788:	07 eb       	ldi	r16, 0xB7	; 183
     78a:	13 e0       	ldi	r17, 0x03	; 3
     78c:	2e ee       	ldi	r18, 0xEE	; 238
     78e:	32 e0       	ldi	r19, 0x02	; 2
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	81 e8       	ldi	r24, 0x81	; 129
     794:	0e 94 ad 14 	call	0x295a	; 0x295a <udd_ep_run>
	#endif
}
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <jump_to_bootloader>:
volatile unsigned char eeprom_buffer_write[EEPROM_PAGE_SIZE];
volatile unsigned char eeprom_buffer_read[EEPROM_PAGE_SIZE];

void jump_to_bootloader(){
	void(* start_bootloader)(void) = (void (*)(void))((BOOT_SECTION_START + ATMEL_DFU_OFFSET)>>1);
	EIND = BOOT_SECTION_START>>17;
     79e:	1c be       	out	0x3c, r1	; 60
	start_bootloader();
     7a0:	ee ef       	ldi	r30, 0xFE	; 254
     7a2:	f0 e4       	ldi	r31, 0x40	; 64
     7a4:	09 95       	icall
     7a6:	08 95       	ret

000007a8 <main>:
}

int main(void){	
	eeprom_safe_read();
     7a8:	b8 df       	rcall	.-144    	; 0x71a <eeprom_safe_read>
	if(eeprom_buffer_read[0]){
     7aa:	80 91 a8 2b 	lds	r24, 0x2BA8	; 0x802ba8 <eeprom_buffer_read>
     7ae:	88 23       	and	r24, r24
     7b0:	69 f0       	breq	.+26     	; 0x7cc <main+0x24>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     7b2:	80 e2       	ldi	r24, 0x20	; 32
     7b4:	e8 ea       	ldi	r30, 0xA8	; 168
     7b6:	fb e2       	ldi	r31, 0x2B	; 43
     7b8:	ab ea       	ldi	r26, 0xAB	; 171
     7ba:	b5 e2       	ldi	r27, 0x25	; 37
     7bc:	01 90       	ld	r0, Z+
     7be:	0d 92       	st	X+, r0
     7c0:	8a 95       	dec	r24
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <main+0x14>
			eeprom_buffer_write[0] = 0;
     7c4:	10 92 ab 25 	sts	0x25AB, r1	; 0x8025ab <eeprom_buffer_write>
			eeprom_safe_write();
     7c8:	bd df       	rcall	.-134    	; 0x744 <eeprom_safe_write>
			//eeprom_safe_read();
			jump_to_bootloader();
     7ca:	e9 df       	rcall	.-46     	; 0x79e <jump_to_bootloader>
	}
	
	irq_initialize_vectors();
     7cc:	87 e0       	ldi	r24, 0x07	; 7
     7ce:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     7d2:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     7d4:	58 dd       	rcall	.-1360   	; 0x286 <tiny_calibration_init>
		
	board_init();
     7d6:	ca df       	rcall	.-108    	; 0x76c <board_init>
	udc_start();
     7d8:	0e 94 0b 0c 	call	0x1816	; 0x1816 <udc_start>
	tiny_dac_setup();
     7dc:	59 d1       	rcall	.+690    	; 0xa90 <tiny_dac_setup>
	tiny_dma_setup();
     7de:	7c d1       	rcall	.+760    	; 0xad8 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	05 d1       	rcall	.+522    	; 0x9f0 <tiny_adc_setup>
	tiny_adc_pid_setup();
     7e6:	f1 d0       	rcall	.+482    	; 0x9ca <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     7e8:	8c e0       	ldi	r24, 0x0C	; 12
     7ea:	e5 d0       	rcall	.+458    	; 0x9b6 <tiny_adc_ch1setup>
	tiny_timer_setup();
     7ec:	a9 d5       	rcall	.+2898   	; 0x1340 <tiny_timer_setup>
	tiny_uart_setup();
     7ee:	64 d6       	rcall	.+3272   	; 0x14b8 <tiny_uart_setup>
	tiny_spi_setup();
     7f0:	7d d6       	rcall	.+3322   	; 0x14ec <tiny_spi_setup>
	tiny_dig_setup();
     7f2:	8c df       	rcall	.-232    	; 0x70c <tiny_dig_setup>
	//USARTC0.DATA = 0x55;
	//asm("nop");
	


	strcpy(uds.header, "debug123");
     7f4:	89 e0       	ldi	r24, 0x09	; 9
     7f6:	e0 e8       	ldi	r30, 0x80	; 128
     7f8:	f0 e2       	ldi	r31, 0x20	; 32
     7fa:	ae e7       	ldi	r26, 0x7E	; 126
     7fc:	b1 e2       	ldi	r27, 0x21	; 33
     7fe:	01 90       	ld	r0, Z+
     800:	0d 92       	st	X+, r0
     802:	8a 95       	dec	r24
     804:	e1 f7       	brne	.-8      	; 0x7fe <main+0x56>
	...
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			if(modeChanged){
     822:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <modeChanged>
     826:	88 23       	and	r24, r24
     828:	71 f3       	breq	.-36     	; 0x806 <main+0x5e>
				switch(futureMode){
     82a:	e0 91 aa 23 	lds	r30, 0x23AA	; 0x8023aa <futureMode>
     82e:	8e 2f       	mov	r24, r30
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	88 30       	cpi	r24, 0x08	; 8
     834:	91 05       	cpc	r25, r1
     836:	a0 f4       	brcc	.+40     	; 0x860 <main+0xb8>
     838:	fc 01       	movw	r30, r24
     83a:	e2 50       	subi	r30, 0x02	; 2
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
     842:	76 d1       	rcall	.+748    	; 0xb30 <tiny_dma_set_mode_0>
					break;
     844:	0d c0       	rjmp	.+26     	; 0x860 <main+0xb8>
					case 1:
					tiny_dma_set_mode_1();
     846:	e8 d1       	rcall	.+976    	; 0xc18 <tiny_dma_set_mode_1>
					break;
     848:	0b c0       	rjmp	.+22     	; 0x860 <main+0xb8>
					case 2:
					tiny_dma_set_mode_2();
     84a:	70 d2       	rcall	.+1248   	; 0xd2c <tiny_dma_set_mode_2>
					break;
     84c:	09 c0       	rjmp	.+18     	; 0x860 <main+0xb8>
					case 3:
					tiny_dma_set_mode_3();
     84e:	f5 d2       	rcall	.+1514   	; 0xe3a <tiny_dma_set_mode_3>
					break;
     850:	07 c0       	rjmp	.+14     	; 0x860 <main+0xb8>
					case 4:
					tiny_dma_set_mode_4();
     852:	82 d3       	rcall	.+1796   	; 0xf58 <tiny_dma_set_mode_4>
					break;
     854:	05 c0       	rjmp	.+10     	; 0x860 <main+0xb8>
					case 5:
					tiny_dma_set_mode_5();
     856:	09 d4       	rcall	.+2066   	; 0x106a <tiny_dma_set_mode_5>
					break;
     858:	03 c0       	rjmp	.+6      	; 0x860 <main+0xb8>
					case 6:
					tiny_dma_set_mode_6();
     85a:	08 d4       	rcall	.+2064   	; 0x106c <tiny_dma_set_mode_6>
					break;
     85c:	01 c0       	rjmp	.+2      	; 0x860 <main+0xb8>
					case 7:
					tiny_dma_set_mode_7();
     85e:	7a d4       	rcall	.+2292   	; 0x1154 <tiny_dma_set_mode_7>
					break;
				}
				modeChanged = 0;
     860:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <modeChanged>
     864:	d0 cf       	rjmp	.-96     	; 0x806 <main+0x5e>

00000866 <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     866:	08 95       	ret

00000868 <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     868:	08 95       	ret

0000086a <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
	#ifdef SINGLE_ENDPOINT_INTERFACE
	switch(global_mode){
     86e:	e0 91 09 20 	lds	r30, 0x2009	; 0x802009 <global_mode>
     872:	8e 2f       	mov	r24, r30
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	88 30       	cpi	r24, 0x08	; 8
     878:	91 05       	cpc	r25, r1
     87a:	90 f4       	brcc	.+36     	; 0x8a0 <main_sof_action+0x36>
     87c:	fc 01       	movw	r30, r24
     87e:	ea 5f       	subi	r30, 0xFA	; 250
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__tablejump2__>
		case 0:
		tiny_dma_loop_mode_0();
     886:	c7 d1       	rcall	.+910    	; 0xc16 <tiny_dma_loop_mode_0>
		break;
     888:	0b c0       	rjmp	.+22     	; 0x8a0 <main_sof_action+0x36>
		case 1:
		tiny_dma_loop_mode_1();
     88a:	4f d2       	rcall	.+1182   	; 0xd2a <tiny_dma_loop_mode_1>
		break;
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <main_sof_action+0x36>
		case 2:
		tiny_dma_loop_mode_2();
     88e:	d4 d2       	rcall	.+1448   	; 0xe38 <tiny_dma_loop_mode_2>
		break;
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <main_sof_action+0x36>
		case 3:
		tiny_dma_loop_mode_3();
     892:	61 d3       	rcall	.+1730   	; 0xf56 <tiny_dma_loop_mode_3>
		break;
     894:	05 c0       	rjmp	.+10     	; 0x8a0 <main_sof_action+0x36>
		case 4:
		tiny_dma_loop_mode_4();
     896:	e8 d3       	rcall	.+2000   	; 0x1068 <tiny_dma_loop_mode_4>
		break;
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <main_sof_action+0x36>
		case 6:
		tiny_dma_loop_mode_6();
     89a:	5b d4       	rcall	.+2230   	; 0x1152 <tiny_dma_loop_mode_6>
		break;
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <main_sof_action+0x36>
		case 7:
		tiny_dma_loop_mode_7();
     89e:	ce d4       	rcall	.+2460   	; 0x123c <tiny_dma_loop_mode_7>
		default:
		break;
	}
	#endif

	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     8a0:	a0 e0       	ldi	r26, 0x00	; 0
     8a2:	b1 e0       	ldi	r27, 0x01	; 1
     8a4:	54 96       	adiw	r26, 0x14	; 20
     8a6:	8c 91       	ld	r24, X
     8a8:	54 97       	sbiw	r26, 0x14	; 20
     8aa:	ee e7       	ldi	r30, 0x7E	; 126
     8ac:	f1 e2       	ldi	r31, 0x21	; 33
     8ae:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     8b0:	55 96       	adiw	r26, 0x15	; 21
     8b2:	8c 91       	ld	r24, X
     8b4:	55 97       	sbiw	r26, 0x15	; 21
     8b6:	82 87       	std	Z+10, r24	; 0x0a
	uds.trfcntL1 = DMA.CH1.TRFCNTL;
     8b8:	94 96       	adiw	r26, 0x24	; 36
     8ba:	8c 91       	ld	r24, X
     8bc:	94 97       	sbiw	r26, 0x24	; 36
     8be:	83 87       	std	Z+11, r24	; 0x0b
	uds.trfcntH1 = DMA.CH1.TRFCNTH;
     8c0:	95 96       	adiw	r26, 0x25	; 37
     8c2:	8c 91       	ld	r24, X
     8c4:	95 97       	sbiw	r26, 0x25	; 37
     8c6:	84 87       	std	Z+12, r24	; 0x0c
	uds.counterL = TC_CALI.CNTL;
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	da e0       	ldi	r29, 0x0A	; 10
     8cc:	88 a1       	ldd	r24, Y+32	; 0x20
     8ce:	85 8b       	std	Z+21, r24	; 0x15
	uds.counterH = TC_CALI.CNTH;
     8d0:	89 a1       	ldd	r24, Y+33	; 0x21
     8d2:	86 8b       	std	Z+22, r24	; 0x16
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     8d4:	54 96       	adiw	r26, 0x14	; 20
     8d6:	8d 91       	ld	r24, X+
     8d8:	9c 91       	ld	r25, X
     8da:	55 97       	sbiw	r26, 0x15	; 21
     8dc:	86 34       	cpi	r24, 0x46	; 70
     8de:	91 40       	sbci	r25, 0x01	; 1
     8e0:	80 f0       	brcs	.+32     	; 0x902 <main_sof_action+0x98>
     8e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8e6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8ea:	89 3a       	cpi	r24, 0xA9	; 169
     8ec:	91 40       	sbci	r25, 0x01	; 1
     8ee:	48 f4       	brcc	.+18     	; 0x902 <main_sof_action+0x98>
		currentTrfcnt = DMA.CH0.TRFCNT;
     8f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8f4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8f8:	80 93 c8 2b 	sts	0x2BC8, r24	; 0x802bc8 <currentTrfcnt>
     8fc:	90 93 c9 2b 	sts	0x2BC9, r25	; 0x802bc9 <currentTrfcnt+0x1>
		asm("nop");
     900:	00 00       	nop
	}
	if(firstFrame){
     902:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <firstFrame>
     906:	88 23       	and	r24, r24
     908:	39 f0       	breq	.+14     	; 0x918 <main_sof_action+0xae>
		tiny_calibration_first_sof();
     90a:	f3 dc       	rcall	.-1562   	; 0x2f2 <tiny_calibration_first_sof>
		firstFrame = 0;
     90c:	10 92 94 20 	sts	0x2094, r1	; 0x802094 <firstFrame>
		tcinit = 1;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <tcinit>
		return;
     916:	21 c0       	rjmp	.+66     	; 0x95a <main_sof_action+0xf0>
	}
	else{
		if(tcinit){
     918:	80 91 93 20 	lds	r24, 0x2093	; 0x802093 <tcinit>
     91c:	88 23       	and	r24, r24
     91e:	41 f0       	breq	.+16     	; 0x930 <main_sof_action+0xc6>
			if(calibration_values_found == 0x03){
     920:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__data_end>
     924:	83 30       	cpi	r24, 0x03	; 3
     926:	19 f4       	brne	.+6      	; 0x92e <main_sof_action+0xc4>
				tiny_calibration_maintain();
     928:	f6 dc       	rcall	.-1556   	; 0x316 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     92a:	78 de       	rcall	.-784    	; 0x61c <tiny_calibration_layer2>
     92c:	01 c0       	rjmp	.+2      	; 0x930 <main_sof_action+0xc6>
			} else tiny_calibration_find_values();
     92e:	cd dd       	rcall	.-1126   	; 0x4ca <tiny_calibration_find_values>
			}
			else debug_divider++;*/
		}
	}
	
	if(debugOnNextEnd){
     930:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <debugOnNextEnd>
     934:	88 23       	and	r24, r24
     936:	51 f0       	breq	.+20     	; 0x94c <main_sof_action+0xe2>
		currentTrfcnt = DMA.CH0.TRFCNT;
     938:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     93c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     940:	80 93 c8 2b 	sts	0x2BC8, r24	; 0x802bc8 <currentTrfcnt>
     944:	90 93 c9 2b 	sts	0x2BC9, r25	; 0x802bc9 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     948:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <debugOnNextEnd>
		}
		else{
			usb_state = (DMA.CH0.TRFCNT < 750) ? 1 : 0;
		}
	#else
		usb_state = !usb_state;
     94c:	90 91 96 20 	lds	r25, 0x2096	; 0x802096 <usb_state>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	91 11       	cpse	r25, r1
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <usb_state>
	#endif
		
	return;
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <main_vendor_enable>:

bool main_vendor_enable(void)
{
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
	main_b_vendor_enable = true;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 99 20 	sts	0x2099, r24	; 0x802099 <main_b_vendor_enable>
	firstFrame = 1;
     96a:	80 93 94 20 	sts	0x2094, r24	; 0x802094 <firstFrame>
	udd_ep_run(0x81, false, (uint8_t *)&isoBuf[0], 125, iso_callback);
     96e:	07 eb       	ldi	r16, 0xB7	; 183
     970:	13 e0       	ldi	r17, 0x03	; 3
     972:	2d e7       	ldi	r18, 0x7D	; 125
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	4c ec       	ldi	r20, 0xCC	; 204
     978:	55 e2       	ldi	r21, 0x25	; 37
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	81 e8       	ldi	r24, 0x81	; 129
     97e:	0e 94 ad 14 	call	0x295a	; 0x295a <udd_ep_run>
	udd_ep_run(0x84, false, (uint8_t *)&isoBuf[375], 125, iso_callback);
	udd_ep_run(0x85, false, (uint8_t *)&isoBuf[500], 125, iso_callback);
	udd_ep_run(0x86, false, (uint8_t *)&isoBuf[625], 125, iso_callback);
	#endif
	return true;
}
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	08 95       	ret

0000098a <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     98a:	10 92 99 20 	sts	0x2099, r1	; 0x802099 <main_b_vendor_enable>
     98e:	08 95       	ret

00000990 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	08 95       	ret

00000994 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	08 95       	ret

00000998 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     998:	e0 e0       	ldi	r30, 0x00	; 0
     99a:	f2 e0       	ldi	r31, 0x02	; 2
     99c:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     99e:	98 2f       	mov	r25, r24
     9a0:	9c 71       	andi	r25, 0x1C	; 28
     9a2:	93 68       	ori	r25, 0x83	; 131
     9a4:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     9a6:	88 1f       	adc	r24, r24
     9a8:	88 27       	eor	r24, r24
     9aa:	88 1f       	adc	r24, r24
     9ac:	88 0f       	add	r24, r24
     9ae:	81 a3       	std	Z+33, r24	; 0x21
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9b0:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     9b2:	16 a2       	std	Z+38, r1	; 0x26
     9b4:	08 95       	ret

000009b6 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     9b6:	e0 e0       	ldi	r30, 0x00	; 0
     9b8:	f2 e0       	ldi	r31, 0x02	; 2
     9ba:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     9bc:	83 68       	ori	r24, 0x83	; 131
     9be:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     9c0:	80 e1       	ldi	r24, 0x10	; 16
     9c2:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9c4:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     9c6:	16 aa       	std	Z+54, r1	; 0x36
     9c8:	08 95       	ret

000009ca <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     9ca:	e0 e0       	ldi	r30, 0x00	; 0
     9cc:	f2 e0       	ldi	r31, 0x02	; 2
     9ce:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     9d0:	83 e8       	ldi	r24, 0x83	; 131
     9d2:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     9d4:	8f e2       	ldi	r24, 0x2F	; 47
     9d6:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     9d8:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     9da:	16 a6       	std	Z+46, r1	; 0x2e
     9dc:	08 95       	ret

000009de <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     9de:	aa ec       	ldi	r26, 0xCA	; 202
     9e0:	b1 e0       	ldi	r27, 0x01	; 1
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     9e6:	e8 2f       	mov	r30, r24
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     9ec:	1c 92       	st	X, r1

	return( result );
}
     9ee:	08 95       	ret

000009f0 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     9f4:	e0 e7       	ldi	r30, 0x70	; 112
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	9d 7f       	andi	r25, 0xFD	; 253
     9fc:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     9fe:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a02:	62 30       	cpi	r22, 0x02	; 2
     a04:	31 f1       	breq	.+76     	; 0xa52 <tiny_adc_setup+0x62>
     a06:	e0 e0       	ldi	r30, 0x00	; 0
     a08:	f2 e0       	ldi	r31, 0x02	; 2
     a0a:	9c e1       	ldi	r25, 0x1C	; 28
     a0c:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a0e:	90 e4       	ldi	r25, 0x40	; 64
     a10:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a12:	81 11       	cpse	r24, r1
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <tiny_adc_setup+0x2a>
     a16:	80 e4       	ldi	r24, 0x40	; 64
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <tiny_adc_setup+0x2c>
     a1a:	80 ec       	ldi	r24, 0xC0	; 192
     a1c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     a20:	61 30       	cpi	r22, 0x01	; 1
     a22:	11 f0       	breq	.+4      	; 0xa28 <tiny_adc_setup+0x38>
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <tiny_adc_setup+0x3a>
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	d2 e0       	ldi	r29, 0x02	; 2
     a2e:	8c 83       	std	Y+4, r24	; 0x04
	#else
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
	#endif
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     a30:	80 e2       	ldi	r24, 0x20	; 32
     a32:	d5 df       	rcall	.-86     	; 0x9de <ReadCalibrationByte>
     a34:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     a36:	81 e2       	ldi	r24, 0x21	; 33
     a38:	d2 df       	rcall	.-92     	; 0x9de <ReadCalibrationByte>
     a3a:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     a3c:	18 8e       	std	Y+24, r1	; 0x18
     a3e:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     a44:	c2 df       	rcall	.-124    	; 0x9ca <tiny_adc_pid_setup>
     a46:	0e c0       	rjmp	.+28     	; 0xa64 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a48:	80 ec       	ldi	r24, 0xC0	; 192
     a4a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     a4e:	84 e0       	ldi	r24, 0x04	; 4
     a50:	ec cf       	rjmp	.-40     	; 0xa2a <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a52:	e0 e0       	ldi	r30, 0x00	; 0
     a54:	f2 e0       	ldi	r31, 0x02	; 2
     a56:	9e e1       	ldi	r25, 0x1E	; 30
     a58:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a5a:	90 e4       	ldi	r25, 0x40	; 64
     a5c:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a5e:	81 11       	cpse	r24, r1
     a60:	f3 cf       	rjmp	.-26     	; 0xa48 <tiny_adc_setup+0x58>
     a62:	d9 cf       	rjmp	.-78     	; 0xa16 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     a84:	8f 91       	pop	r24
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     a94:	e0 e7       	ldi	r30, 0x70	; 112
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	82 81       	ldd	r24, Z+2	; 0x02
     a9a:	8b 7f       	andi	r24, 0xFB	; 251
     a9c:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     a9e:	c0 e2       	ldi	r28, 0x20	; 32
     aa0:	d3 e0       	ldi	r29, 0x03	; 3
     aa2:	8d e0       	ldi	r24, 0x0D	; 13
     aa4:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     aa6:	80 e4       	ldi	r24, 0x40	; 64
     aa8:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     aaa:	89 e0       	ldi	r24, 0x09	; 9
     aac:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     aae:	83 e3       	ldi	r24, 0x33	; 51
     ab0:	96 df       	rcall	.-212    	; 0x9de <ReadCalibrationByte>
     ab2:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     ab4:	82 e3       	ldi	r24, 0x32	; 50
     ab6:	93 df       	rcall	.-218    	; 0x9de <ReadCalibrationByte>
     ab8:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     aba:	87 e3       	ldi	r24, 0x37	; 55
     abc:	90 df       	rcall	.-224    	; 0x9de <ReadCalibrationByte>
     abe:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     ac0:	86 e3       	ldi	r24, 0x36	; 54
     ac2:	8d df       	rcall	.-230    	; 0x9de <ReadCalibrationByte>
     ac4:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     ac6:	e0 e2       	ldi	r30, 0x20	; 32
     ac8:	f6 e0       	ldi	r31, 0x06	; 6
     aca:	80 81       	ld	r24, Z
     acc:	83 60       	ori	r24, 0x03	; 3
     ace:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     ad0:	14 82       	std	Z+4, r1	; 0x04
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <tiny_dma_setup>:
#include "util/delay.h"


void tiny_dma_setup(void){
	//Turn on DMA
	PR.PRGEN &=0b111111110; //Turn on DMA clk
     ad8:	e0 e7       	ldi	r30, 0x70	; 112
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	8e 7f       	andi	r24, 0xFE	; 254
     ae0:	80 83       	st	Z, r24
	DMA.CTRL = DMA_ENABLE_bm | DMA_PRIMODE_CH0123_gc;
     ae2:	83 e8       	ldi	r24, 0x83	; 131
     ae4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     ae8:	08 95       	ret

00000aea <tiny_dma_flush>:
}
void tiny_dma_flush(void){
	DMA.CH0.CTRLA = 0x00;
     aea:	e0 e0       	ldi	r30, 0x00	; 0
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     af0:	80 e4       	ldi	r24, 0x40	; 64
     af2:	80 8b       	std	Z+16, r24	; 0x10

	DMA.CH1.CTRLA = 0x00;
     af4:	10 a2       	std	Z+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     af6:	80 a3       	std	Z+32, r24	; 0x20
	
	DMA.CH2.CTRLA = 0x00;
     af8:	10 aa       	std	Z+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     afa:	80 ab       	std	Z+48, r24	; 0x30
	
	DMA.CH3.CTRLA = 0x00;
     afc:	e0 e4       	ldi	r30, 0x40	; 64
     afe:	f1 e0       	ldi	r31, 0x01	; 1
     b00:	10 82       	st	Z, r1
	DMA.CH3.CTRLA = DMA_CH_RESET_bm;
     b02:	80 83       	st	Z, r24
	
	b1_state = 0;
     b04:	10 92 98 20 	sts	0x2098, r1	; 0x802098 <b1_state>
	b2_state = 0;
     b08:	10 92 97 20 	sts	0x2097, r1	; 0x802097 <b2_state>
	usb_state = 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <usb_state>
	
	dma_ch0_ran = 0;
     b12:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <dma_ch0_ran>
     b16:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <dma_ch0_ran+0x1>
	dma_ch1_ran = 0;
     b1a:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <dma_ch1_ran>
     b1e:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <dma_ch1_ran+0x1>
     b22:	08 95       	ret

00000b24 <tiny_dma_delayed_set>:
}
void tiny_dma_delayed_set(unsigned char mode){
	futureMode = mode;
     b24:	80 93 aa 23 	sts	0x23AA, r24	; 0x8023aa <futureMode>
	modeChanged = 1;	
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <modeChanged>
     b2e:	08 95       	ret

00000b30 <tiny_dma_set_mode_0>:
}
void tiny_dma_set_mode_0(void){
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
	
	global_mode = 0;
     b34:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
	
	tiny_dma_flush();
     b38:	d8 df       	rcall	.-80     	; 0xaea <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     b3a:	c0 e0       	ldi	r28, 0x00	; 0
     b3c:	d1 e0       	ldi	r29, 0x01	; 1
     b3e:	1e aa       	std	Y+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b40:	94 e2       	ldi	r25, 0x24	; 36
     b42:	98 ab       	std	Y+48, r25	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     b44:	19 aa       	std	Y+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     b46:	49 e5       	ldi	r20, 0x59	; 89
     b48:	4a ab       	std	Y+50, r20	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     b4a:	32 e0       	ldi	r19, 0x02	; 2
     b4c:	3b ab       	std	Y+51, r19	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     b4e:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     b52:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     b56:	6c ab       	std	Y+52, r22	; 0x34
     b58:	7d ab       	std	Y+53, r23	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     b5a:	6b ea       	ldi	r22, 0xAB	; 171
     b5c:	73 e2       	ldi	r23, 0x23	; 35
     b5e:	68 af       	std	Y+56, r22	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     b60:	79 af       	std	Y+57, r23	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     b62:	1a ae       	std	Y+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     b64:	8b e3       	ldi	r24, 0x3B	; 59
     b66:	8c af       	std	Y+60, r24	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     b6e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     b72:	28 a9       	ldd	r18, Y+48	; 0x30
     b74:	20 68       	ori	r18, 0x80	; 128
     b76:	28 ab       	std	Y+48, r18	; 0x30
		
	DMA.CH3.REPCNT = 0; //Repeat forever!
     b78:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	90 83       	st	Z, r25
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     b82:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     b86:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     b8a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     b8e:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     b92:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     b96:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     b9a:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     b9e:	4a e9       	ldi	r20, 0x9A	; 154
     ba0:	51 e2       	ldi	r21, 0x21	; 33
     ba2:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     ba6:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     baa:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     bae:	29 e3       	ldi	r18, 0x39	; 57
     bb0:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     bb4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     bb8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
     bbc:	20 81       	ld	r18, Z
     bbe:	20 68       	ori	r18, 0x80	; 128
     bc0:	20 83       	st	Z, r18
	
	DMA.CH0.CTRLA = 0x00;
     bc2:	18 8a       	std	Y+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     bc4:	20 e4       	ldi	r18, 0x40	; 64
     bc6:	28 8b       	std	Y+16, r18	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     bc8:	24 e0       	ldi	r18, 0x04	; 4
     bca:	28 8b       	std	Y+16, r18	; 0x10
	DMA.CH0.CTRLB = 0x03; //No interrupt!
     bcc:	89 8b       	std	Y+17, r24	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     bce:	85 e9       	ldi	r24, 0x95	; 149
     bd0:	8a 8b       	std	Y+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     bd2:	80 e1       	ldi	r24, 0x10	; 16
     bd4:	8b 8b       	std	Y+19, r24	; 0x13
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     bd6:	47 e7       	ldi	r20, 0x77	; 119
     bd8:	51 e0       	ldi	r21, 0x01	; 1
     bda:	4c 8b       	std	Y+20, r20	; 0x14
     bdc:	5d 8b       	std	Y+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     bde:	98 8f       	std	Y+24, r25	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     be0:	39 8f       	std	Y+25, r19	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     be2:	1a 8e       	std	Y+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     be4:	8c ec       	ldi	r24, 0xCC	; 204
     be6:	95 e2       	ldi	r25, 0x25	; 37
     be8:	8c 8f       	std	Y+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     bea:	9d 8f       	std	Y+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     bec:	1e 8e       	std	Y+30, r1	; 0x1e
		
	tiny_calibration_synchronise_phase(500, 200);
     bee:	68 ec       	ldi	r22, 0xC8	; 200
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	84 ef       	ldi	r24, 0xF4	; 244
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	78 dd       	rcall	.-1296   	; 0x6e8 <tiny_calibration_synchronise_phase>
	median_TRFCNT = 200;
     bf8:	88 ec       	ldi	r24, 0xC8	; 200
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     c00:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
	median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     c0a:	88 89       	ldd	r24, Y+16	; 0x10
     c0c:	80 68       	ori	r24, 0x80	; 128
     c0e:	88 8b       	std	Y+16, r24	; 0x10
	
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <tiny_dma_loop_mode_0>:

void tiny_dma_loop_mode_0(void){
     c16:	08 95       	ret

00000c18 <tiny_dma_set_mode_1>:
	return;
}

void tiny_dma_set_mode_1(void){
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
	
	
	global_mode = 1;
     c1e:	11 e0       	ldi	r17, 0x01	; 1
     c20:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
	
	tiny_dma_flush();
     c24:	62 df       	rcall	.-316    	; 0xaea <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH2.CTRLA = 0x00;
     c26:	c0 e0       	ldi	r28, 0x00	; 0
     c28:	d1 e0       	ldi	r29, 0x01	; 1
     c2a:	18 aa       	std	Y+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     c2c:	80 e4       	ldi	r24, 0x40	; 64
     c2e:	88 ab       	std	Y+48, r24	; 0x30
		
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	88 ab       	std	Y+48, r24	; 0x30
	DMA.CH2.CTRLB = 0x00;  //No int
     c34:	19 aa       	std	Y+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     c36:	1a aa       	std	Y+50, r1	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     c38:	4b e4       	ldi	r20, 0x4B	; 75
     c3a:	4b ab       	std	Y+51, r20	; 0x33
	DMA.CH2.TRFCNT = 0;
     c3c:	1c aa       	std	Y+52, r1	; 0x34
     c3e:	1d aa       	std	Y+53, r1	; 0x35
	DMA.CH2.REPCNT = 0;
     c40:	1e aa       	std	Y+54, r1	; 0x36
		
	DMA.CH2.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     c42:	8a e0       	ldi	r24, 0x0A	; 10
     c44:	90 e2       	ldi	r25, 0x20	; 32
     c46:	88 af       	std	Y+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     c48:	99 af       	std	Y+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     c4a:	1a ae       	std	Y+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     c4c:	70 ea       	ldi	r23, 0xA0	; 160
     c4e:	7c af       	std	Y+60, r23	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     c50:	68 e0       	ldi	r22, 0x08	; 8
     c52:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     c56:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     c5a:	88 a9       	ldd	r24, Y+48	; 0x30
     c5c:	80 6a       	ori	r24, 0xA0	; 160
     c5e:	88 ab       	std	Y+48, r24	; 0x30

	USARTC0.DATA = 0x55;
     c60:	e0 ea       	ldi	r30, 0xA0	; 160
     c62:	f8 e0       	ldi	r31, 0x08	; 8
     c64:	85 e5       	ldi	r24, 0x55	; 85
     c66:	80 83       	st	Z, r24
	USARTC0.DATA = 0x55;
     c68:	80 83       	st	Z, r24

	DMA.CH3.REPCNT = 0; //Repeat forever!
     c6a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	84 e2       	ldi	r24, 0x24	; 36
     c74:	80 83       	st	Z, r24
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     c76:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     c7a:	99 e5       	ldi	r25, 0x59	; 89
     c7c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     c80:	32 e0       	ldi	r19, 0x02	; 2
     c82:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     c86:	a0 91 0b 20 	lds	r26, 0x200B	; 0x80200b <auxDacBufLen>
     c8a:	b0 91 0c 20 	lds	r27, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     c8e:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c92:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     c96:	ab ea       	ldi	r26, 0xAB	; 171
     c98:	b3 e2       	ldi	r27, 0x23	; 35
     c9a:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     c9e:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     ca2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     ca6:	9b e3       	ldi	r25, 0x3B	; 59
     ca8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     cac:	93 e0       	ldi	r25, 0x03	; 3
     cae:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     cb2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     cb6:	20 81       	ld	r18, Z
     cb8:	20 68       	ori	r18, 0x80	; 128
     cba:	20 83       	st	Z, r18
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm; //Do not repeat!
     cbc:	88 a3       	std	Y+32, r24	; 0x20
	DMA.CH1.CTRLB = 0x03; //Hi interrupt
     cbe:	99 a3       	std	Y+33, r25	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     cc0:	25 e9       	ldi	r18, 0x95	; 149
     cc2:	2a a3       	std	Y+34, r18	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     cc4:	4b a3       	std	Y+35, r20	; 0x23
	DMA.CH1.TRFCNT = PACKET_SIZE;
     cc6:	4e ee       	ldi	r20, 0xEE	; 238
     cc8:	52 e0       	ldi	r21, 0x02	; 2
     cca:	4c a3       	std	Y+36, r20	; 0x24
     ccc:	5d a3       	std	Y+37, r21	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     cce:	78 a7       	std	Y+40, r23	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     cd0:	69 a7       	std	Y+41, r22	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     cd2:	1a a6       	std	Y+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     cd4:	6a eb       	ldi	r22, 0xBA	; 186
     cd6:	78 e2       	ldi	r23, 0x28	; 40
     cd8:	6c a7       	std	Y+44, r22	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[PACKET_SIZE]) >> 8) & 0xFF;
     cda:	7d a7       	std	Y+45, r23	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     cdc:	1e a6       	std	Y+46, r1	; 0x2e
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm; //Do not repeat!
     cde:	88 8b       	std	Y+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x03; //No interrupt!
     ce0:	99 8b       	std	Y+17, r25	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     ce2:	2a 8b       	std	Y+18, r18	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     ce4:	90 e1       	ldi	r25, 0x10	; 16
     ce6:	9b 8b       	std	Y+19, r25	; 0x13
	DMA.CH0.TRFCNT = PACKET_SIZE;
     ce8:	4c 8b       	std	Y+20, r20	; 0x14
     cea:	5d 8b       	std	Y+21, r21	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     cec:	88 8f       	std	Y+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     cee:	39 8f       	std	Y+25, r19	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     cf0:	1a 8e       	std	Y+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     cf2:	8c ec       	ldi	r24, 0xCC	; 204
     cf4:	95 e2       	ldi	r25, 0x25	; 37
     cf6:	8c 8f       	std	Y+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     cf8:	9d 8f       	std	Y+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     cfa:	1e 8e       	std	Y+30, r1	; 0x1e
	
	tiny_calibration_synchronise_phase(500, 200);
     cfc:	68 ec       	ldi	r22, 0xC8	; 200
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	84 ef       	ldi	r24, 0xF4	; 244
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	f1 dc       	rcall	.-1566   	; 0x6e8 <tiny_calibration_synchronise_phase>
	median_TRFCNT = 200;
     d06:	88 ec       	ldi	r24, 0xC8	; 200
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     d0e:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
	median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
     d12:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <median_TRFCNT_delay>
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d16:	88 a1       	ldd	r24, Y+32	; 0x20
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	88 a3       	std	Y+32, r24	; 0x20
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d1c:	88 89       	ldd	r24, Y+16	; 0x10
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	88 8b       	std	Y+16, r24	; 0x10
	
		
		
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	08 95       	ret

00000d2a <tiny_dma_loop_mode_1>:

void tiny_dma_loop_mode_1(void){
     d2a:	08 95       	ret

00000d2c <tiny_dma_set_mode_2>:
	return;
}

void tiny_dma_set_mode_2(void){
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
	
	global_mode = 2;
     d32:	12 e0       	ldi	r17, 0x02	; 2
     d34:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
	
	tiny_dma_flush();
     d38:	d8 de       	rcall	.-592    	; 0xaea <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     d3a:	c0 e0       	ldi	r28, 0x00	; 0
     d3c:	d1 e0       	ldi	r29, 0x01	; 1
     d3e:	1e aa       	std	Y+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     d40:	84 e2       	ldi	r24, 0x24	; 36
     d42:	88 ab       	std	Y+48, r24	; 0x30
	DMA.CH2.CTRLB = 0x00; //No interrupt for DacBuf!!
     d44:	19 aa       	std	Y+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     d46:	39 e5       	ldi	r19, 0x59	; 89
     d48:	3a ab       	std	Y+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     d4a:	1b ab       	std	Y+51, r17	; 0x33
	DMA.CH2.TRFCNT = auxDacBufLen;
     d4c:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     d50:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     d54:	4c ab       	std	Y+52, r20	; 0x34
     d56:	5d ab       	std	Y+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     d58:	4b ea       	ldi	r20, 0xAB	; 171
     d5a:	53 e2       	ldi	r21, 0x23	; 35
     d5c:	48 af       	std	Y+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     d5e:	59 af       	std	Y+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     d60:	1a ae       	std	Y+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     d62:	9b e3       	ldi	r25, 0x3B	; 59
     d64:	9c af       	std	Y+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     d6c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d70:	28 a9       	ldd	r18, Y+48	; 0x30
     d72:	20 68       	ori	r18, 0x80	; 128
     d74:	28 ab       	std	Y+48, r18	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     d76:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     d7a:	e0 e4       	ldi	r30, 0x40	; 64
     d7c:	f1 e0       	ldi	r31, 0x01	; 1
     d7e:	80 83       	st	Z, r24
	DMA.CH3.CTRLB = 0x00; //Hi interrupt on block complete
     d80:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     d84:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     d88:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = dacBuf_len;
     d8c:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     d90:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     d94:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d98:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     d9c:	2a e9       	ldi	r18, 0x9A	; 154
     d9e:	31 e2       	ldi	r19, 0x21	; 33
     da0:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     da4:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     da8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     dac:	29 e3       	ldi	r18, 0x39	; 57
     dae:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     db2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     db6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     dba:	90 81       	ld	r25, Z
     dbc:	90 68       	ori	r25, 0x80	; 128
     dbe:	90 83       	st	Z, r25
	
	DMA.CH0.CTRLA = 0x00;
     dc0:	18 8a       	std	Y+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     dc2:	90 e4       	ldi	r25, 0x40	; 64
     dc4:	98 8b       	std	Y+16, r25	; 0x10
	
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm; //Do not repeat!
     dc6:	88 8b       	std	Y+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt!
     dc8:	19 8a       	std	Y+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     dca:	45 e9       	ldi	r20, 0x95	; 149
     dcc:	4a 8b       	std	Y+18, r20	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     dce:	90 e1       	ldi	r25, 0x10	; 16
     dd0:	9b 8b       	std	Y+19, r25	; 0x13
	DMA.CH0.TRFCNT = PACKET_SIZE;
     dd2:	2e ee       	ldi	r18, 0xEE	; 238
     dd4:	32 e0       	ldi	r19, 0x02	; 2
     dd6:	2c 8b       	std	Y+20, r18	; 0x14
     dd8:	3d 8b       	std	Y+21, r19	; 0x15
	
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
     dda:	88 8f       	std	Y+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
     ddc:	19 8f       	std	Y+25, r17	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     dde:	1a 8e       	std	Y+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     de0:	6c ec       	ldi	r22, 0xCC	; 204
     de2:	75 e2       	ldi	r23, 0x25	; 37
     de4:	6c 8f       	std	Y+28, r22	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     de6:	7d 8f       	std	Y+29, r23	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     de8:	1e 8e       	std	Y+30, r1	; 0x1e
	
				
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm; //Do not repeat!
     dea:	88 a3       	std	Y+32, r24	; 0x20
	DMA.CH1.CTRLB = 0x00; //No interrupt!
     dec:	19 a2       	std	Y+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     dee:	4a a3       	std	Y+34, r20	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
     df0:	9b a3       	std	Y+35, r25	; 0x23
	DMA.CH1.TRFCNT = PACKET_SIZE;
     df2:	2c a3       	std	Y+36, r18	; 0x24
     df4:	3d a3       	std	Y+37, r19	; 0x25
				
	DMA.CH1.SRCADDR0 = (( (uint16_t) &ADCA.CH2.RESL) >> 0) & 0xFF; //Source address is ADC
     df6:	84 e3       	ldi	r24, 0x34	; 52
     df8:	88 a7       	std	Y+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &ADCA.CH2.RESL) >> 8) & 0xFF;
     dfa:	19 a7       	std	Y+41, r17	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     dfc:	1a a6       	std	Y+42, r1	; 0x2a
				
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
     dfe:	8a eb       	ldi	r24, 0xBA	; 186
     e00:	98 e2       	ldi	r25, 0x28	; 40
     e02:	8c a7       	std	Y+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[PACKET_SIZE]) >> 8) & 0xFF;
     e04:	9d a7       	std	Y+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     e06:	1e a6       	std	Y+46, r1	; 0x2e
				
	//Must enable last for REPCNT won't work!

	tiny_calibration_synchronise_phase(500, 200);
     e08:	68 ec       	ldi	r22, 0xC8	; 200
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	84 ef       	ldi	r24, 0xF4	; 244
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	6b dc       	rcall	.-1834   	; 0x6e8 <tiny_calibration_synchronise_phase>
	median_TRFCNT = 200;
     e12:	88 ec       	ldi	r24, 0xC8	; 200
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     e1a:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
	median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e24:	88 89       	ldd	r24, Y+16	; 0x10
     e26:	80 68       	ori	r24, 0x80	; 128
     e28:	88 8b       	std	Y+16, r24	; 0x10
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     e2a:	88 a1       	ldd	r24, Y+32	; 0x20
     e2c:	80 68       	ori	r24, 0x80	; 128
     e2e:	88 a3       	std	Y+32, r24	; 0x20
	
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	08 95       	ret

00000e38 <tiny_dma_loop_mode_2>:

void tiny_dma_loop_mode_2(void){
     e38:	08 95       	ret

00000e3a <tiny_dma_set_mode_3>:
	return;
}



void tiny_dma_set_mode_3(void){
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
	
	global_mode = 3;
     e40:	13 e0       	ldi	r17, 0x03	; 3
     e42:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
		
	tiny_dma_flush();	
     e46:	51 de       	rcall	.-862    	; 0xaea <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH1.CTRLA = 0x00;
     e48:	c0 e0       	ldi	r28, 0x00	; 0
     e4a:	d1 e0       	ldi	r29, 0x01	; 1
     e4c:	18 a2       	std	Y+32, r1	; 0x20
	DMA.CH1.CTRLA = DMA_CH_RESET_bm;
     e4e:	50 e4       	ldi	r21, 0x40	; 64
     e50:	58 a3       	std	Y+32, r21	; 0x20
	
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     e52:	84 e0       	ldi	r24, 0x04	; 4
     e54:	88 a3       	std	Y+32, r24	; 0x20
	DMA.CH1.CTRLB = 0x00;  //No int
     e56:	19 a2       	std	Y+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     e58:	1a a2       	std	Y+34, r1	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     e5a:	4b e4       	ldi	r20, 0x4B	; 75
     e5c:	4b a3       	std	Y+35, r20	; 0x23
	DMA.CH1.TRFCNT = 0;
     e5e:	1c a2       	std	Y+36, r1	; 0x24
     e60:	1d a2       	std	Y+37, r1	; 0x25
	DMA.CH1.REPCNT = 0;
     e62:	1e a2       	std	Y+38, r1	; 0x26
	
	DMA.CH1.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     e64:	8a e0       	ldi	r24, 0x0A	; 10
     e66:	90 e2       	ldi	r25, 0x20	; 32
     e68:	88 a7       	std	Y+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     e6a:	99 a7       	std	Y+41, r25	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
     e6c:	1a a6       	std	Y+42, r1	; 0x2a
	
	DMA.CH1.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     e6e:	30 ea       	ldi	r19, 0xA0	; 160
     e70:	3c a7       	std	Y+44, r19	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     e72:	28 e0       	ldi	r18, 0x08	; 8
     e74:	2d a7       	std	Y+45, r18	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
     e76:	1e a6       	std	Y+46, r1	; 0x2e
	
	//Must enable last for REPCNT won't work!
	DMA.CH1.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     e78:	88 a1       	ldd	r24, Y+32	; 0x20
     e7a:	80 6a       	ori	r24, 0xA0	; 160
     e7c:	88 a3       	std	Y+32, r24	; 0x20
	
	USARTC0.DATA = 0x55;
     e7e:	85 e5       	ldi	r24, 0x55	; 85
     e80:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
     e84:	1e aa       	std	Y+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     e86:	84 e2       	ldi	r24, 0x24	; 36
     e88:	88 ab       	std	Y+48, r24	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
     e8a:	19 aa       	std	Y+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     e8c:	69 e5       	ldi	r22, 0x59	; 89
     e8e:	6a ab       	std	Y+50, r22	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
     e90:	1b ab       	std	Y+51, r17	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
     e92:	e0 91 0d 20 	lds	r30, 0x200D	; 0x80200d <dacBuf_len>
     e96:	f0 91 0e 20 	lds	r31, 0x200E	; 0x80200e <dacBuf_len+0x1>
     e9a:	ec ab       	std	Y+52, r30	; 0x34
     e9c:	fd ab       	std	Y+53, r31	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
     e9e:	ea e9       	ldi	r30, 0x9A	; 154
     ea0:	f1 e2       	ldi	r31, 0x21	; 33
     ea2:	e8 af       	std	Y+56, r30	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
     ea4:	f9 af       	std	Y+57, r31	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     ea6:	1a ae       	std	Y+58, r1	; 0x3a
		
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     ea8:	99 e3       	ldi	r25, 0x39	; 57
     eaa:	9c af       	std	Y+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
     eac:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     eb0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
		
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     eb4:	98 a9       	ldd	r25, Y+48	; 0x30
     eb6:	90 68       	ori	r25, 0x80	; 128
     eb8:	98 ab       	std	Y+48, r25	; 0x30

	DMA.CH3.REPCNT = 0; //Repeat forever!
     eba:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     ebe:	e0 e4       	ldi	r30, 0x40	; 64
     ec0:	f1 e0       	ldi	r31, 0x01	; 1
     ec2:	80 83       	st	Z, r24
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     ec4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     ec8:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     ed2:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     ed6:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     eda:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ede:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     ee2:	6b ea       	ldi	r22, 0xAB	; 171
     ee4:	73 e2       	ldi	r23, 0x23	; 35
     ee6:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     eea:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     eee:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     ef2:	9b e3       	ldi	r25, 0x3B	; 59
     ef4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     ef8:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     efc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     f00:	90 81       	ld	r25, Z
     f02:	90 68       	ori	r25, 0x80	; 128
     f04:	90 83       	st	Z, r25
	
	//Actual data being transferred
	DMA.CH0.CTRLA = 0x00;
     f06:	18 8a       	std	Y+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
     f08:	58 8b       	std	Y+16, r21	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm; //Do not repeat!
     f0a:	88 8b       	std	Y+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x00; //Hi interrupt
     f0c:	19 8a       	std	Y+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     f0e:	85 e9       	ldi	r24, 0x95	; 149
     f10:	8a 8b       	std	Y+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     f12:	4b 8b       	std	Y+19, r20	; 0x13
	DMA.CH0.TRFCNT = PACKET_SIZE;
     f14:	8e ee       	ldi	r24, 0xEE	; 238
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	8c 8b       	std	Y+20, r24	; 0x14
     f1a:	9d 8b       	std	Y+21, r25	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
     f1c:	38 8f       	std	Y+24, r19	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     f1e:	29 8f       	std	Y+25, r18	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
     f20:	1a 8e       	std	Y+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
     f22:	8c ec       	ldi	r24, 0xCC	; 204
     f24:	95 e2       	ldi	r25, 0x25	; 37
     f26:	8c 8f       	std	Y+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
     f28:	9d 8f       	std	Y+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
     f2a:	1e 8e       	std	Y+30, r1	; 0x1e
		
	tiny_calibration_synchronise_phase(500, 200);
     f2c:	68 ec       	ldi	r22, 0xC8	; 200
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	84 ef       	ldi	r24, 0xF4	; 244
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	d9 db       	rcall	.-2126   	; 0x6e8 <tiny_calibration_synchronise_phase>
	median_TRFCNT = 200;
     f36:	88 ec       	ldi	r24, 0xC8	; 200
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     f3e:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
	median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>

	//Must enable last for REPCNT won't work!
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     f48:	88 89       	ldd	r24, Y+16	; 0x10
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	88 8b       	std	Y+16, r24	; 0x10

	
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	08 95       	ret

00000f56 <tiny_dma_loop_mode_3>:

void tiny_dma_loop_mode_3(void){
     f56:	08 95       	ret

00000f58 <tiny_dma_set_mode_4>:
	return;
}

void tiny_dma_set_mode_4(void){
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
	
	global_mode = 4;
     f5e:	14 e0       	ldi	r17, 0x04	; 4
     f60:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
	
	tiny_dma_flush();
     f64:	c2 dd       	rcall	.-1148   	; 0xaea <tiny_dma_flush>
	
	//AUX channel (to keep it tx, therefore always rx)
	DMA.CH2.CTRLA = 0x00;
     f66:	c0 e0       	ldi	r28, 0x00	; 0
     f68:	d1 e0       	ldi	r29, 0x01	; 1
     f6a:	18 aa       	std	Y+48, r1	; 0x30
	DMA.CH2.CTRLA = DMA_CH_RESET_bm;
     f6c:	80 e4       	ldi	r24, 0x40	; 64
     f6e:	88 ab       	std	Y+48, r24	; 0x30

	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
     f70:	18 ab       	std	Y+48, r17	; 0x30
	DMA.CH2.CTRLB = 0x00;  //No int
     f72:	19 aa       	std	Y+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_SRCDIR_FIXED_gc | DMA_CH_DESTDIR_FIXED_gc;   //Source and address fixed.
     f74:	1a aa       	std	Y+50, r1	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     f76:	3b e4       	ldi	r19, 0x4B	; 75
     f78:	3b ab       	std	Y+51, r19	; 0x33
	DMA.CH2.TRFCNT = 0;
     f7a:	1c aa       	std	Y+52, r1	; 0x34
     f7c:	1d aa       	std	Y+53, r1	; 0x35
	DMA.CH2.REPCNT = 0;
     f7e:	1e aa       	std	Y+54, r1	; 0x36
	
	DMA.CH2.SRCADDR0 = (( (uint16_t) &dummy) >> 0) & 0xFF;
     f80:	8a e0       	ldi	r24, 0x0A	; 10
     f82:	90 e2       	ldi	r25, 0x20	; 32
     f84:	88 af       	std	Y+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dummy) >> 8) & 0xFF;
     f86:	99 af       	std	Y+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
     f88:	1a ae       	std	Y+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF;
     f8a:	50 ea       	ldi	r21, 0xA0	; 160
     f8c:	5c af       	std	Y+60, r21	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
     f94:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_REPEAT_bm | DMA_CH_ENABLE_bm;  //Enable!
     f98:	98 a9       	ldd	r25, Y+48	; 0x30
     f9a:	90 6a       	ori	r25, 0xA0	; 160
     f9c:	98 ab       	std	Y+48, r25	; 0x30
	
	USARTC0.DATA = 0x55;
     f9e:	95 e5       	ldi	r25, 0x55	; 85
     fa0:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
     fa4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
     fa8:	e0 e4       	ldi	r30, 0x40	; 64
     faa:	f1 e0       	ldi	r31, 0x01	; 1
     fac:	94 e2       	ldi	r25, 0x24	; 36
     fae:	90 83       	st	Z, r25
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
     fb0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
     fb4:	29 e5       	ldi	r18, 0x59	; 89
     fb6:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
     fba:	22 e0       	ldi	r18, 0x02	; 2
     fbc:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
     fc0:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     fc4:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     fc8:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     fcc:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
     fd0:	6b ea       	ldi	r22, 0xAB	; 171
     fd2:	73 e2       	ldi	r23, 0x23	; 35
     fd4:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
     fd8:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
     fdc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
     fe0:	2b e3       	ldi	r18, 0x3B	; 59
     fe2:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
     fe6:	23 e0       	ldi	r18, 0x03	; 3
     fe8:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
     fec:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ff0:	20 81       	ld	r18, Z
     ff2:	20 68       	ori	r18, 0x80	; 128
     ff4:	20 83       	st	Z, r18
	
	//Actual data being transferred
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm; //Do not repeat!
     ff6:	98 8b       	std	Y+16, r25	; 0x10
	DMA.CH0.CTRLB = 0x00; //No interrupt
     ff8:	19 8a       	std	Y+17, r1	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
     ffa:	45 e9       	ldi	r20, 0x95	; 149
     ffc:	4a 8b       	std	Y+18, r20	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     ffe:	3b 8b       	std	Y+19, r19	; 0x13
	DMA.CH0.TRFCNT = PACKET_SIZE;
    1000:	2e ee       	ldi	r18, 0xEE	; 238
    1002:	32 e0       	ldi	r19, 0x02	; 2
    1004:	2c 8b       	std	Y+20, r18	; 0x14
    1006:	3d 8b       	std	Y+21, r19	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &USARTC0.DATA) >> 0) & 0xFF; //Source address is ADC
    1008:	58 8f       	std	Y+24, r21	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &USARTC0.DATA) >> 8) & 0xFF;
    100a:	89 8f       	std	Y+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    100c:	1a 8e       	std	Y+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
    100e:	6c ec       	ldi	r22, 0xCC	; 204
    1010:	75 e2       	ldi	r23, 0x25	; 37
    1012:	6c 8f       	std	Y+28, r22	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
    1014:	7d 8f       	std	Y+29, r23	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    1016:	1e 8e       	std	Y+30, r1	; 0x1e
		
		
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm; //Do not repeat!
    1018:	98 a3       	std	Y+32, r25	; 0x20
	DMA.CH1.CTRLB = 0x00; //Hi interrupt on block complete
    101a:	19 a2       	std	Y+33, r1	; 0x21
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
    101c:	4a a3       	std	Y+34, r20	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_SPIC_gc;
    101e:	9a e4       	ldi	r25, 0x4A	; 74
    1020:	9b a3       	std	Y+35, r25	; 0x23
	DMA.CH1.TRFCNT = PACKET_SIZE;
    1022:	2c a3       	std	Y+36, r18	; 0x24
    1024:	3d a3       	std	Y+37, r19	; 0x25
		
	DMA.CH1.SRCADDR0 = (( (uint16_t) &SPIC.DATA) >> 0) & 0xFF; //Source address is ADC
    1026:	93 ec       	ldi	r25, 0xC3	; 195
    1028:	98 a7       	std	Y+40, r25	; 0x28
	DMA.CH1.SRCADDR1 = (( (uint16_t) &SPIC.DATA) >> 8) & 0xFF;
    102a:	89 a7       	std	Y+41, r24	; 0x29
	DMA.CH1.SRCADDR2 = 0x00;
    102c:	1a a6       	std	Y+42, r1	; 0x2a
		
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    102e:	8a eb       	ldi	r24, 0xBA	; 186
    1030:	98 e2       	ldi	r25, 0x28	; 40
    1032:	8c a7       	std	Y+44, r24	; 0x2c
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[PACKET_SIZE]) >> 8) & 0xFF;
    1034:	9d a7       	std	Y+45, r25	; 0x2d
	DMA.CH1.DESTADDR2 = 0x00;
    1036:	1e a6       	std	Y+46, r1	; 0x2e
		
	tiny_calibration_synchronise_phase(500, 200);
    1038:	68 ec       	ldi	r22, 0xC8	; 200
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	84 ef       	ldi	r24, 0xF4	; 244
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	53 db       	rcall	.-2394   	; 0x6e8 <tiny_calibration_synchronise_phase>
	median_TRFCNT = 200;
    1042:	88 ec       	ldi	r24, 0xC8	; 200
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    104a:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
	median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    1054:	88 89       	ldd	r24, Y+16	; 0x10
    1056:	80 68       	ori	r24, 0x80	; 128
    1058:	88 8b       	std	Y+16, r24	; 0x10
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    105a:	88 a1       	ldd	r24, Y+32	; 0x20
    105c:	80 68       	ori	r24, 0x80	; 128
    105e:	88 a3       	std	Y+32, r24	; 0x20
	
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	08 95       	ret

00001068 <tiny_dma_loop_mode_4>:

void tiny_dma_loop_mode_4(void){
    1068:	08 95       	ret

0000106a <tiny_dma_set_mode_5>:
return;
}
	
	
void tiny_dma_set_mode_5(void){
	while(1); //Deliberate Crash!  Mode 5 should be invalid.
    106a:	ff cf       	rjmp	.-2      	; 0x106a <tiny_dma_set_mode_5>

0000106c <tiny_dma_set_mode_6>:
}

void tiny_dma_set_mode_6(void){
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
		
	global_mode = 6;
    1070:	86 e0       	ldi	r24, 0x06	; 6
    1072:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
	
	tiny_dma_flush();
    1076:	39 dd       	rcall	.-1422   	; 0xaea <tiny_dma_flush>
	
	DMA.CH2.REPCNT = 0; //Repeat forever!
    1078:	c0 e0       	ldi	r28, 0x00	; 0
    107a:	d1 e0       	ldi	r29, 0x01	; 1
    107c:	1e aa       	std	Y+54, r1	; 0x36
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    107e:	84 e2       	ldi	r24, 0x24	; 36
    1080:	88 ab       	std	Y+48, r24	; 0x30
	DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
    1082:	19 aa       	std	Y+49, r1	; 0x31
	DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
    1084:	39 e5       	ldi	r19, 0x59	; 89
    1086:	3a ab       	std	Y+50, r19	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
    1088:	93 e0       	ldi	r25, 0x03	; 3
    108a:	9b ab       	std	Y+51, r25	; 0x33
	DMA.CH2.TRFCNT = dacBuf_len;
    108c:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    1090:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1094:	4c ab       	std	Y+52, r20	; 0x34
    1096:	5d ab       	std	Y+53, r21	; 0x35

	DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
    1098:	4a e9       	ldi	r20, 0x9A	; 154
    109a:	51 e2       	ldi	r21, 0x21	; 33
    109c:	48 af       	std	Y+56, r20	; 0x38
	DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
    109e:	59 af       	std	Y+57, r21	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
    10a0:	1a ae       	std	Y+58, r1	; 0x3a
	
	DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
    10a2:	29 e3       	ldi	r18, 0x39	; 57
    10a4:	2c af       	std	Y+60, r18	; 0x3c
	DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
    10a6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
	DMA.CH2.DESTADDR2 = 0x00;
    10aa:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    10ae:	28 a9       	ldd	r18, Y+48	; 0x30
    10b0:	20 68       	ori	r18, 0x80	; 128
    10b2:	28 ab       	std	Y+48, r18	; 0x30
	
	DMA.CH3.REPCNT = 0; //Repeat forever!
    10b4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    10b8:	e0 e4       	ldi	r30, 0x40	; 64
    10ba:	f1 e0       	ldi	r31, 0x01	; 1
    10bc:	80 83       	st	Z, r24
	DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
    10be:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
	DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
    10c2:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
    10c6:	32 e0       	ldi	r19, 0x02	; 2
    10c8:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
	DMA.CH3.TRFCNT = auxDacBufLen;
    10cc:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    10d0:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    10d4:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    10d8:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

	DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
    10dc:	4b ea       	ldi	r20, 0xAB	; 171
    10de:	53 e2       	ldi	r21, 0x23	; 35
    10e0:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
	DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
    10e4:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
	DMA.CH3.SRCADDR2 = 0x00;
    10e8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
	
	DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
    10ec:	2b e3       	ldi	r18, 0x3B	; 59
    10ee:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
	DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
    10f2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
	DMA.CH3.DESTADDR2 = 0x00;
    10f6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
	
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    10fa:	20 81       	ld	r18, Z
    10fc:	20 68       	ori	r18, 0x80	; 128
    10fe:	20 83       	st	Z, r18
	
	DMA.CH0.CTRLA = 0x00;
    1100:	18 8a       	std	Y+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_RESET_bm;
    1102:	20 e4       	ldi	r18, 0x40	; 64
    1104:	28 8b       	std	Y+16, r18	; 0x10
		
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    1106:	88 8b       	std	Y+16, r24	; 0x10
	DMA.CH0.CTRLB = 0x03; //Hi interrupt!
    1108:	99 8b       	std	Y+17, r25	; 0x11
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
    110a:	95 e9       	ldi	r25, 0x95	; 149
    110c:	9a 8b       	std	Y+18, r25	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
    110e:	90 e1       	ldi	r25, 0x10	; 16
    1110:	9b 8b       	std	Y+19, r25	; 0x13
	DMA.CH0.TRFCNT = BUFFER_SIZE;
    1112:	4c ed       	ldi	r20, 0xDC	; 220
    1114:	55 e0       	ldi	r21, 0x05	; 5
    1116:	4c 8b       	std	Y+20, r20	; 0x14
    1118:	5d 8b       	std	Y+21, r21	; 0x15
		
	DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
    111a:	88 8f       	std	Y+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
    111c:	39 8f       	std	Y+25, r19	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    111e:	1a 8e       	std	Y+26, r1	; 0x1a
		
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
    1120:	8c ec       	ldi	r24, 0xCC	; 204
    1122:	95 e2       	ldi	r25, 0x25	; 37
    1124:	8c 8f       	std	Y+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
    1126:	9d 8f       	std	Y+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    1128:	1e 8e       	std	Y+30, r1	; 0x1e
		
	tiny_calibration_synchronise_phase(500, 200);
    112a:	68 ec       	ldi	r22, 0xC8	; 200
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	84 ef       	ldi	r24, 0xF4	; 244
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	da da       	rcall	.-2636   	; 0x6e8 <tiny_calibration_synchronise_phase>
	median_TRFCNT = 400;
    1134:	80 e9       	ldi	r24, 0x90	; 144
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    113c:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
	median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
    1146:	88 89       	ldd	r24, Y+16	; 0x10
    1148:	80 68       	ori	r24, 0x80	; 128
    114a:	88 8b       	std	Y+16, r24	; 0x10
	
	
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <tiny_dma_loop_mode_6>:

void tiny_dma_loop_mode_6(void){
    1152:	08 95       	ret

00001154 <tiny_dma_set_mode_7>:
	return;
}

void tiny_dma_set_mode_7(void){
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
				
		global_mode = 7;
    1158:	87 e0       	ldi	r24, 0x07	; 7
    115a:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
		
		tiny_dma_flush();
    115e:	c5 dc       	rcall	.-1654   	; 0xaea <tiny_dma_flush>
		
		DMA.CH2.REPCNT = 0; //Repeat forever!
    1160:	c0 e0       	ldi	r28, 0x00	; 0
    1162:	d1 e0       	ldi	r29, 0x01	; 1
    1164:	1e aa       	std	Y+54, r1	; 0x36
		DMA.CH2.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    1166:	94 e2       	ldi	r25, 0x24	; 36
    1168:	98 ab       	std	Y+48, r25	; 0x30
		DMA.CH2.CTRLB = 0x00; //Hi interrupt on block complete
    116a:	19 aa       	std	Y+49, r1	; 0x31
		DMA.CH2.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
    116c:	39 e5       	ldi	r19, 0x59	; 89
    116e:	3a ab       	std	Y+50, r19	; 0x32
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH2_gc;	//Triggered from TCC0 when it hits PER
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	8b ab       	std	Y+51, r24	; 0x33
		DMA.CH2.TRFCNT = dacBuf_len;
    1174:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    1178:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    117c:	4c ab       	std	Y+52, r20	; 0x34
    117e:	5d ab       	std	Y+53, r21	; 0x35

		DMA.CH2.SRCADDR0 = (( (uint16_t) &dacBuf_CH1[0]) >> 0) & 0xFF; //Source address is dacbuf
    1180:	4a e9       	ldi	r20, 0x9A	; 154
    1182:	51 e2       	ldi	r21, 0x21	; 33
    1184:	48 af       	std	Y+56, r20	; 0x38
		DMA.CH2.SRCADDR1 = (( (uint16_t) &dacBuf_CH1[0]) >> 8) & 0xFF;
    1186:	59 af       	std	Y+57, r21	; 0x39
		DMA.CH2.SRCADDR2 = 0x00;
    1188:	1a ae       	std	Y+58, r1	; 0x3a
			
		DMA.CH2.DESTADDR0 = (( (uint16_t) &DACB.CH0DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
    118a:	29 e3       	ldi	r18, 0x39	; 57
    118c:	2c af       	std	Y+60, r18	; 0x3c
		DMA.CH2.DESTADDR1 = (( (uint16_t) &DACB.CH0DATAH) >> 8) & 0xFF;
    118e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
		DMA.CH2.DESTADDR2 = 0x00;
    1192:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
			
		//Must enable last for REPCNT won't work!
		DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
    1196:	28 a9       	ldd	r18, Y+48	; 0x30
    1198:	20 68       	ori	r18, 0x80	; 128
    119a:	28 ab       	std	Y+48, r18	; 0x30
		
		DMA.CH3.REPCNT = 0; //Repeat forever!
    119c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
		DMA.CH3.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    11a0:	e0 e4       	ldi	r30, 0x40	; 64
    11a2:	f1 e0       	ldi	r31, 0x01	; 1
    11a4:	90 83       	st	Z, r25
		DMA.CH3.CTRLB = 0x00; //No interrupt for DacBuf!!
    11a6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
		DMA.CH3.ADDRCTRL = DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc;   //Dest reloads after each burst, with byte incrementing.  Src reloads at end of block, also incrementing address.
    11aa:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH1_gc;	//Triggered from TCC0 when it hits PER
    11ae:	32 e0       	ldi	r19, 0x02	; 2
    11b0:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
		DMA.CH3.TRFCNT = auxDacBufLen;
    11b4:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    11b8:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    11bc:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    11c0:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>

		DMA.CH3.SRCADDR0 = (( (uint16_t) &dacBuf_CH2[0]) >> 0) & 0xFF; //Source address is dacbuf
    11c4:	4b ea       	ldi	r20, 0xAB	; 171
    11c6:	53 e2       	ldi	r21, 0x23	; 35
    11c8:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
		DMA.CH3.SRCADDR1 = (( (uint16_t) &dacBuf_CH2[0]) >> 8) & 0xFF;
    11cc:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
		DMA.CH3.SRCADDR2 = 0x00;
    11d0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
		
		DMA.CH3.DESTADDR0 = (( (uint16_t) &DACB.CH1DATAH) >> 0) & 0xFF;  //Dest address is high byte of DAC register
    11d4:	2b e3       	ldi	r18, 0x3B	; 59
    11d6:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
		DMA.CH3.DESTADDR1 = (( (uint16_t) &DACB.CH1DATAH) >> 8) & 0xFF;
    11da:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
		DMA.CH3.DESTADDR2 = 0x00;
    11de:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
		
		//Must enable last for REPCNT won't work!
		DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
    11e2:	20 81       	ld	r18, Z
    11e4:	20 68       	ori	r18, 0x80	; 128
    11e6:	20 83       	st	Z, r18
		
		DMA.CH0.CTRLA = 0x00;
    11e8:	18 8a       	std	Y+16, r1	; 0x10
		DMA.CH0.CTRLA = DMA_CH_RESET_bm;
    11ea:	20 e4       	ldi	r18, 0x40	; 64
    11ec:	28 8b       	std	Y+16, r18	; 0x10
				
		DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm; //Do not repeat!
    11ee:	25 e2       	ldi	r18, 0x25	; 37
    11f0:	28 8b       	std	Y+16, r18	; 0x10
		DMA.CH0.CTRLB = 0x03; //No interrupt!
    11f2:	89 8b       	std	Y+17, r24	; 0x11
		DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc;   //Source reloads after each burst, with byte incrementing.  Dest does not reload, but does increment address.
    11f4:	85 e9       	ldi	r24, 0x95	; 149
    11f6:	8a 8b       	std	Y+18, r24	; 0x12
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;	//Triggered from ADCA channel 0
    11f8:	80 e1       	ldi	r24, 0x10	; 16
    11fa:	8b 8b       	std	Y+19, r24	; 0x13
		DMA.CH0.TRFCNT = BUFFER_SIZE;
    11fc:	4c ed       	ldi	r20, 0xDC	; 220
    11fe:	55 e0       	ldi	r21, 0x05	; 5
    1200:	4c 8b       	std	Y+20, r20	; 0x14
    1202:	5d 8b       	std	Y+21, r21	; 0x15
				
		DMA.CH0.SRCADDR0 = (( (uint16_t) &ADCA.CH0.RESL) >> 0) & 0xFF; //Source address is ADC
    1204:	98 8f       	std	Y+24, r25	; 0x18
		DMA.CH0.SRCADDR1 = (( (uint16_t) &ADCA.CH0.RESL) >> 8) & 0xFF;
    1206:	39 8f       	std	Y+25, r19	; 0x19
		DMA.CH0.SRCADDR2 = 0x00;
    1208:	1a 8e       	std	Y+26, r1	; 0x1a
				
		DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[0]) >> 0) & 0xFF;  //Dest address is isoBuf
    120a:	8c ec       	ldi	r24, 0xCC	; 204
    120c:	95 e2       	ldi	r25, 0x25	; 37
    120e:	8c 8f       	std	Y+28, r24	; 0x1c
		DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[0]) >> 8) & 0xFF;
    1210:	9d 8f       	std	Y+29, r25	; 0x1d
		DMA.CH0.DESTADDR2 = 0x00;
    1212:	1e 8e       	std	Y+30, r1	; 0x1e
				
		tiny_calibration_synchronise_phase(500, 200);
    1214:	68 ec       	ldi	r22, 0xC8	; 200
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	84 ef       	ldi	r24, 0xF4	; 244
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	65 da       	rcall	.-2870   	; 0x6e8 <tiny_calibration_synchronise_phase>
		median_TRFCNT = 400;
    121e:	80 e9       	ldi	r24, 0x90	; 144
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    1226:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
		median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
    1230:	88 89       	ldd	r24, Y+16	; 0x10
    1232:	80 68       	ori	r24, 0x80	; 128
    1234:	88 8b       	std	Y+16, r24	; 0x10
		
}
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <tiny_dma_loop_mode_7>:

void tiny_dma_loop_mode_7(void){
    123c:	08 95       	ret

0000123e <__vector_6>:
}

ISR(DMA_CH0_vect){
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
	DMA.INTFLAGS = 0x01;
    1254:	e0 e0       	ldi	r30, 0x00	; 0
    1256:	f1 e0       	ldi	r31, 0x01	; 1
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	83 83       	std	Z+3, r24	; 0x03
	dma_ch0_ran++;
    125c:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    1260:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <dma_ch0_ran>
    126a:	90 93 7d 21 	sts	0x217D, r25	; 0x80217d <dma_ch0_ran+0x1>
	uds.dma_ch0_cntL = dma_ch0_ran & 0xff;
    126e:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    1272:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    1276:	ae e7       	ldi	r26, 0x7E	; 126
    1278:	b1 e2       	ldi	r27, 0x21	; 33
    127a:	57 96       	adiw	r26, 0x17	; 23
    127c:	8c 93       	st	X, r24
    127e:	57 97       	sbiw	r26, 0x17	; 23
	uds.dma_ch0_cntH = (dma_ch0_ran >> 8) & 0xff;
    1280:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <dma_ch0_ran>
    1284:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <dma_ch0_ran+0x1>
    1288:	58 96       	adiw	r26, 0x18	; 24
    128a:	9c 93       	st	X, r25
	
	DMA.CH0.CTRLA = 0x00;	
    128c:	10 8a       	std	Z+16, r1	; 0x10
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; //Do not repeat!
    128e:	84 e0       	ldi	r24, 0x04	; 4
    1290:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH0.TRFCNT = HALFPACKET_SIZE;
    1292:	87 e7       	ldi	r24, 0x77	; 119
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	84 8b       	std	Z+20, r24	; 0x14
    1298:	95 8b       	std	Z+21, r25	; 0x15
			
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[!usb_state * PACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
    129a:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <usb_state>
    129e:	88 23       	and	r24, r24
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <__vector_6+0x6a>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <__vector_6+0x6e>
    12a8:	8e ee       	ldi	r24, 0xEE	; 238
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	84 53       	subi	r24, 0x34	; 52
    12ae:	9a 4d       	sbci	r25, 0xDA	; 218
    12b0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__TEXT_REGION_LENGTH__+0x70011c>
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[!usb_state * PACKET_SIZE]) >> 8) & 0xFF;
    12b4:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <usb_state>
    12b8:	88 23       	and	r24, r24
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <__vector_6+0x84>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <__vector_6+0x88>
    12c2:	8e ee       	ldi	r24, 0xEE	; 238
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	84 53       	subi	r24, 0x34	; 52
    12c8:	9a 4d       	sbci	r25, 0xDA	; 218
    12ca:	e0 e0       	ldi	r30, 0x00	; 0
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	95 8f       	std	Z+29, r25	; 0x1d

	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
    12d0:	80 89       	ldd	r24, Z+16	; 0x10
    12d2:	80 68       	ori	r24, 0x80	; 128
    12d4:	80 8b       	std	Z+16, r24	; 0x10
}
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	bf 91       	pop	r27
    12dc:	af 91       	pop	r26
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_7>:

ISR(DMA_CH1_vect){
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
	DMA.INTFLAGS = 0x02;
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	dma_ch1_ran++;
    1304:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    1308:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <dma_ch1_ran>
    1312:	90 93 7b 21 	sts	0x217B, r25	; 0x80217b <dma_ch1_ran+0x1>
	uds.dma_ch1_cntL = dma_ch1_ran & 0xff;
    1316:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    131a:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    131e:	ee e7       	ldi	r30, 0x7E	; 126
    1320:	f1 e2       	ldi	r31, 0x21	; 33
    1322:	81 8f       	std	Z+25, r24	; 0x19
	uds.dma_ch1_cntH = (dma_ch1_ran >> 8) & 0xff;
    1324:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <dma_ch1_ran>
    1328:	90 91 7b 21 	lds	r25, 0x217B	; 0x80217b <dma_ch1_ran+0x1>
    132c:	92 8f       	std	Z+26, r25	; 0x1a
}
    132e:	ff 91       	pop	r31
    1330:	ef 91       	pop	r30
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    1340:	e0 e7       	ldi	r30, 0x70	; 112
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	83 81       	ldd	r24, Z+3	; 0x03
    1346:	8c 7f       	andi	r24, 0xFC	; 252
    1348:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	8c 7f       	andi	r24, 0xFC	; 252
    134e:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1350:	80 81       	ld	r24, Z
    1352:	8d 7f       	andi	r24, 0xFD	; 253
    1354:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    1356:	e0 e8       	ldi	r30, 0x80	; 128
    1358:	f1 e0       	ldi	r31, 0x01	; 1
    135a:	80 ec       	ldi	r24, 0xC0	; 192
    135c:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    135e:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1360:	88 ec       	ldi	r24, 0xC8	; 200
    1362:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1364:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1366:	a0 e0       	ldi	r26, 0x00	; 0
    1368:	b8 e0       	ldi	r27, 0x08	; 8
    136a:	34 e0       	ldi	r19, 0x04	; 4
    136c:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    136e:	23 e0       	ldi	r18, 0x03	; 3
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	2c 93       	st	X, r18
    1374:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1376:	14 96       	adiw	r26, 0x04	; 4
    1378:	1c 92       	st	X, r1
    137a:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    137c:	85 ed       	ldi	r24, 0xD5	; 213
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	96 96       	adiw	r26, 0x26	; 38
    1382:	8d 93       	st	X+, r24
    1384:	9c 93       	st	X, r25
    1386:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    1388:	16 96       	adiw	r26, 0x06	; 6
    138a:	1c 92       	st	X, r1
    138c:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    138e:	e0 e4       	ldi	r30, 0x40	; 64
    1390:	f8 e0       	ldi	r31, 0x08	; 8
    1392:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1394:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    1396:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    1398:	86 a3       	std	Z+38, r24	; 0x26
    139a:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    139c:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    139e:	e0 e6       	ldi	r30, 0x60	; 96
    13a0:	f6 e0       	ldi	r31, 0x06	; 6
    13a2:	80 81       	ld	r24, Z
    13a4:	80 61       	ori	r24, 0x10	; 16
    13a6:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    13a8:	e0 e4       	ldi	r30, 0x40	; 64
    13aa:	f9 e0       	ldi	r31, 0x09	; 9
    13ac:	83 e1       	ldi	r24, 0x13	; 19
    13ae:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    13b0:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    13b6:	a6 a3       	std	Z+38, r26	; 0x26
    13b8:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    13ba:	10 a6       	std	Z+40, r1	; 0x28
    13bc:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 83       	st	Z, r24
    13c2:	08 95       	ret

000013c4 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	1f 92       	push	r1
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    13ee:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    13f2:	87 30       	cpi	r24, 0x07	; 7
    13f4:	31 f4       	brne	.+12     	; 0x1402 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    13f6:	e0 e0       	ldi	r30, 0x00	; 0
    13f8:	f2 e0       	ldi	r31, 0x02	; 2
    13fa:	84 a5       	ldd	r24, Z+44	; 0x2c
    13fc:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    13fe:	95 a5       	ldd	r25, Z+45	; 0x2d
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    1402:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    1406:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <PSU_target>
    140a:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    140c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1410:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	0c f4       	brge	.+2      	; 0x141c <__vector_83+0x58>
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	99 23       	and	r25, r25
    141e:	c9 f0       	breq	.+50     	; 0x1452 <__vector_83+0x8e>
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	2a 3f       	cpi	r18, 0xFA	; 250
    1424:	37 40       	sbci	r19, 0x07	; 7
    1426:	08 f0       	brcs	.+2      	; 0x142a <__vector_83+0x66>
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	99 23       	and	r25, r25
    142c:	91 f0       	breq	.+36     	; 0x1452 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    142e:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1432:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1436:	89 30       	cpi	r24, 0x09	; 9
    1438:	1c f4       	brge	.+6      	; 0x1440 <__vector_83+0x7c>
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <__vector_83+0x80>
    1440:	86 e0       	ldi	r24, 0x06	; 6
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	82 0f       	add	r24, r18
    1446:	93 1f       	adc	r25, r19
    1448:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    144c:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1450:	23 c0       	rjmp	.+70     	; 0x1498 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1452:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1456:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	8f 3f       	cpi	r24, 0xFF	; 255
    145e:	0c f0       	brlt	.+2      	; 0x1462 <__vector_83+0x9e>
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	99 23       	and	r25, r25
    1464:	c9 f0       	breq	.+50     	; 0x1498 <__vector_83+0xd4>
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	27 30       	cpi	r18, 0x07	; 7
    146a:	31 05       	cpc	r19, r1
    146c:	08 f4       	brcc	.+2      	; 0x1470 <__vector_83+0xac>
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	99 23       	and	r25, r25
    1472:	91 f0       	breq	.+36     	; 0x1498 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1474:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1478:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    147c:	88 3f       	cpi	r24, 0xF8	; 248
    147e:	1c f0       	brlt	.+6      	; 0x1486 <__vector_83+0xc2>
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <__vector_83+0xc6>
    1486:	86 e0       	ldi	r24, 0x06	; 6
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	48 1b       	sub	r20, r24
    148e:	59 0b       	sbc	r21, r25
    1490:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1494:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    1498:	0f 90       	pop	r0
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	9f 91       	pop	r25
    14a4:	8f 91       	pop	r24
    14a6:	5f 91       	pop	r21
    14a8:	4f 91       	pop	r20
    14aa:	3f 91       	pop	r19
    14ac:	2f 91       	pop	r18
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	0f 90       	pop	r0
    14b4:	1f 90       	pop	r1
    14b6:	18 95       	reti

000014b8 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    14b8:	e0 e7       	ldi	r30, 0x70	; 112
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	83 81       	ldd	r24, Z+3	; 0x03
    14be:	8f 7e       	andi	r24, 0xEF	; 239
    14c0:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    14c2:	e0 e4       	ldi	r30, 0x40	; 64
    14c4:	f6 e0       	ldi	r31, 0x06	; 6
    14c6:	80 81       	ld	r24, Z
    14c8:	8a 6a       	ori	r24, 0xAA	; 170
    14ca:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14d0:	88 e5       	ldi	r24, 0x58	; 88
    14d2:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLA = USART_RXCINTLVL_HI_gc;
    14d4:	e0 ea       	ldi	r30, 0xA0	; 160
    14d6:	f8 e0       	ldi	r31, 0x08	; 8
    14d8:	80 e3       	ldi	r24, 0x30	; 48
    14da:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    14dc:	84 ec       	ldi	r24, 0xC4	; 196
    14de:	85 83       	std	Z+5, r24	; 0x05
	#if OVERCLOCK == 48
		USARTC0.BAUDCTRLA = 7;  	//BSEL = fper/(2fbaud) -1;  48/(2*3) - 1 = 7
    14e0:	87 e0       	ldi	r24, 0x07	; 7
    14e2:	86 83       	std	Z+6, r24	; 0x06
	#else
		USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
	#endif
	USARTC0.BAUDCTRLB = 0x00;// USART_BSCALE0_bm goes to 1.5MHz for some reason;
    14e4:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    14e6:	88 e1       	ldi	r24, 0x18	; 24
    14e8:	84 83       	std	Z+4, r24	; 0x04
    14ea:	08 95       	ret

000014ec <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    14ec:	e0 e7       	ldi	r30, 0x70	; 112
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	83 81       	ldd	r24, Z+3	; 0x03
    14f2:	87 7f       	andi	r24, 0xF7	; 247
    14f4:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    14f6:	e0 ec       	ldi	r30, 0xC0	; 192
    14f8:	f8 e0       	ldi	r31, 0x08	; 8
    14fa:	80 e4       	ldi	r24, 0x40	; 64
    14fc:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    14fe:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1500:	88 e5       	ldi	r24, 0x58	; 88
    1502:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    1506:	08 95       	ret

00001508 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
	asm("nop");
    1512:	00 00       	nop
}
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <__vector_25>:

ISR(USARTC0_RXC_vect){
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	8f 93       	push	r24
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
	unsigned char temp = USARTC0.DATA;
    152e:	e0 ea       	ldi	r30, 0xA0	; 160
    1530:	f8 e0       	ldi	r31, 0x08	; 8
    1532:	80 81       	ld	r24, Z
	USARTC0.DATA = temp;
    1534:	80 83       	st	Z, r24
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	8f 91       	pop	r24
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1546:	9f b7       	in	r25, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	e8 2f       	mov	r30, r24
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	e0 59       	subi	r30, 0x90	; 144
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	60 95       	com	r22
    1554:	80 81       	ld	r24, Z
    1556:	68 23       	and	r22, r24
    1558:	60 83       	st	Z, r22
    155a:	9f bf       	out	0x3f, r25	; 63
    155c:	08 95       	ret

0000155e <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    155e:	86 30       	cpi	r24, 0x06	; 6
    1560:	11 f0       	breq	.+4      	; 0x1566 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1566:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1568:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    156c:	81 fd       	sbrc	r24, 1
    156e:	26 c0       	rjmp	.+76     	; 0x15bc <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1570:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1572:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1574:	e0 e5       	ldi	r30, 0x50	; 80
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	82 60       	ori	r24, 0x02	; 2
    157c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    157e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1580:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1582:	81 ff       	sbrs	r24, 1
    1584:	fd cf       	rjmp	.-6      	; 0x1580 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1586:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1588:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    158a:	a0 e5       	ldi	r26, 0x50	; 80
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	16 96       	adiw	r26, 0x06	; 6
    1590:	8c 91       	ld	r24, X
    1592:	16 97       	sbiw	r26, 0x06	; 6
    1594:	89 7f       	andi	r24, 0xF9	; 249
    1596:	16 96       	adiw	r26, 0x06	; 6
    1598:	8c 93       	st	X, r24
    159a:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    159c:	e0 e6       	ldi	r30, 0x60	; 96
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 e8       	ldi	r24, 0x80	; 128
    15a2:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    15a4:	8b eb       	ldi	r24, 0xBB	; 187
    15a6:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    15a8:	16 96       	adiw	r26, 0x06	; 6
    15aa:	8c 91       	ld	r24, X
    15ac:	16 97       	sbiw	r26, 0x06	; 6
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	16 96       	adiw	r26, 0x06	; 6
    15b2:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    15b4:	80 81       	ld	r24, Z
    15b6:	81 60       	ori	r24, 0x01	; 1
    15b8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15ba:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    15bc:	63 60       	ori	r22, 0x03	; 3
    15be:	84 e4       	ldi	r24, 0x44	; 68
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0f d5       	rcall	.+2590   	; 0x1fe2 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    15c4:	60 e4       	ldi	r22, 0x40	; 64
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	be cf       	rjmp	.-132    	; 0x1546 <sysclk_enable_module>
    15ca:	08 95       	ret

000015cc <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    15cc:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <udi_vendor_alternate_setting>
    15d0:	08 95       	ret

000015d2 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    15d2:	1c d1       	rcall	.+568    	; 0x180c <udc_get_interface_desc>
    15d4:	fc 01       	movw	r30, r24
    15d6:	83 81       	ldd	r24, Z+3	; 0x03
    15d8:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    15dc:	81 11       	cpse	r24, r1
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    15e0:	bf c9       	rjmp	.-3202   	; 0x960 <main_vendor_enable>
    15e2:	08 95       	ret
			return false;
		}
	}
	return true;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
}
    15e6:	08 95       	ret

000015e8 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    15e8:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <udi_vendor_alternate_setting>
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    15f0:	cc c9       	rjmp	.-3176   	; 0x98a <main_vendor_disable>
    15f2:	08 95       	ret

000015f4 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    15f4:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    15f8:	88 23       	and	r24, r24
    15fa:	4c f4       	brge	.+18     	; 0x160e <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15fc:	80 76       	andi	r24, 0x60	; 96
    15fe:	80 34       	cpi	r24, 0x40	; 64
    1600:	a9 f4       	brne	.+42     	; 0x162c <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    1602:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1606:	81 11       	cpse	r24, r1
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    160a:	c4 c9       	rjmp	.-3192   	; 0x994 <main_setup_in_received>
    160c:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    160e:	80 76       	andi	r24, 0x60	; 96
    1610:	80 34       	cpi	r24, 0x40	; 64
    1612:	81 f4       	brne	.+32     	; 0x1634 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1614:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1618:	81 11       	cpse	r24, r1
    161a:	0e c0       	rjmp	.+28     	; 0x1638 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    161c:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1620:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1624:	89 2b       	or	r24, r25
    1626:	51 f0       	breq	.+20     	; 0x163c <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1628:	b3 c9       	rjmp	.-3226   	; 0x990 <main_setup_out_received>
    162a:	08 95       	ret
		}
	}
	return false; // Not supported request
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	08 95       	ret
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	08 95       	ret
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	08 95       	ret
    163c:	80 e0       	ldi	r24, 0x00	; 0
}
    163e:	08 95       	ret

00001640 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1640:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1644:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1648:	01 90       	ld	r0, Z+
    164a:	f0 81       	ld	r31, Z
    164c:	e0 2d       	mov	r30, r0
    164e:	22 81       	ldd	r18, Z+2	; 0x02
    1650:	33 81       	ldd	r19, Z+3	; 0x03
    1652:	2e 0f       	add	r18, r30
    1654:	3f 1f       	adc	r19, r31
    1656:	fc 01       	movw	r30, r24
    1658:	40 81       	ld	r20, Z
    165a:	e4 0f       	add	r30, r20
    165c:	f1 1d       	adc	r31, r1
    165e:	e2 17       	cp	r30, r18
    1660:	f3 07       	cpc	r31, r19
    1662:	b8 f4       	brcc	.+46     	; 0x1692 <udc_next_desc_in_iface+0x52>
    1664:	81 81       	ldd	r24, Z+1	; 0x01
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	b9 f0       	breq	.+46     	; 0x1698 <udc_next_desc_in_iface+0x58>
    166a:	86 13       	cpse	r24, r22
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <udc_next_desc_in_iface+0x40>
    166e:	05 c0       	rjmp	.+10     	; 0x167a <udc_next_desc_in_iface+0x3a>
    1670:	81 81       	ldd	r24, Z+1	; 0x01
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	a1 f0       	breq	.+40     	; 0x169e <udc_next_desc_in_iface+0x5e>
    1676:	86 13       	cpse	r24, r22
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <udc_next_desc_in_iface+0x40>
    167a:	8e 2f       	mov	r24, r30
    167c:	9f 2f       	mov	r25, r31
    167e:	08 95       	ret
    1680:	80 81       	ld	r24, Z
    1682:	e8 0f       	add	r30, r24
    1684:	f1 1d       	adc	r31, r1
    1686:	e2 17       	cp	r30, r18
    1688:	f3 07       	cpc	r31, r19
    168a:	90 f3       	brcs	.-28     	; 0x1670 <udc_next_desc_in_iface+0x30>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	08 95       	ret
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	08 95       	ret
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	08 95       	ret
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	08 95       	ret

000016a4 <udc_valid_address>:
    16a4:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    16a8:	8f 77       	andi	r24, 0x7F	; 127
    16aa:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <udd_set_address>
    16ae:	08 95       	ret

000016b0 <udc_update_iface_desc>:
    16b0:	90 91 a2 20 	lds	r25, 0x20A2	; 0x8020a2 <udc_num_configuration>
    16b4:	99 23       	and	r25, r25
    16b6:	81 f1       	breq	.+96     	; 0x1718 <udc_update_iface_desc+0x68>
    16b8:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    16bc:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    16c0:	01 90       	ld	r0, Z+
    16c2:	f0 81       	ld	r31, Z
    16c4:	e0 2d       	mov	r30, r0
    16c6:	94 81       	ldd	r25, Z+4	; 0x04
    16c8:	89 17       	cp	r24, r25
    16ca:	40 f5       	brcc	.+80     	; 0x171c <udc_update_iface_desc+0x6c>
    16cc:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    16d0:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    16d4:	22 81       	ldd	r18, Z+2	; 0x02
    16d6:	33 81       	ldd	r19, Z+3	; 0x03
    16d8:	2e 0f       	add	r18, r30
    16da:	3f 1f       	adc	r19, r31
    16dc:	e2 17       	cp	r30, r18
    16de:	f3 07       	cpc	r31, r19
    16e0:	f8 f4       	brcc	.+62     	; 0x1720 <udc_update_iface_desc+0x70>
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	94 30       	cpi	r25, 0x04	; 4
    16e6:	61 f4       	brne	.+24     	; 0x1700 <udc_update_iface_desc+0x50>
    16e8:	92 81       	ldd	r25, Z+2	; 0x02
    16ea:	98 13       	cpse	r25, r24
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <udc_update_iface_desc+0x50>
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	96 13       	cpse	r25, r22
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <udc_update_iface_desc+0x50>
    16f4:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    16f8:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	08 95       	ret
    1700:	90 81       	ld	r25, Z
    1702:	e9 0f       	add	r30, r25
    1704:	f1 1d       	adc	r31, r1
    1706:	e2 17       	cp	r30, r18
    1708:	f3 07       	cpc	r31, r19
    170a:	58 f3       	brcs	.-42     	; 0x16e2 <udc_update_iface_desc+0x32>
    170c:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <udc_ptr_iface>
    1710:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <udc_ptr_iface+0x1>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	08 95       	ret
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	08 95       	ret

00001724 <udc_iface_disable>:
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	c8 2f       	mov	r28, r24
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	be df       	rcall	.-132    	; 0x16b0 <udc_update_iface_desc>
    1734:	18 2f       	mov	r17, r24
    1736:	88 23       	and	r24, r24
    1738:	81 f1       	breq	.+96     	; 0x179a <udc_iface_disable+0x76>
    173a:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    173e:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1742:	ec 2f       	mov	r30, r28
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	ee 0f       	add	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	12 96       	adiw	r26, 0x02	; 2
    174c:	8d 91       	ld	r24, X+
    174e:	9c 91       	ld	r25, X
    1750:	13 97       	sbiw	r26, 0x03	; 3
    1752:	e8 0f       	add	r30, r24
    1754:	f9 1f       	adc	r31, r25
    1756:	e0 80       	ld	r14, Z
    1758:	f1 80       	ldd	r15, Z+1	; 0x01
    175a:	d7 01       	movw	r26, r14
    175c:	16 96       	adiw	r26, 0x06	; 6
    175e:	ed 91       	ld	r30, X+
    1760:	fc 91       	ld	r31, X
    1762:	17 97       	sbiw	r26, 0x07	; 7
    1764:	09 95       	icall
    1766:	68 2f       	mov	r22, r24
    1768:	8c 2f       	mov	r24, r28
    176a:	a2 df       	rcall	.-188    	; 0x16b0 <udc_update_iface_desc>
    176c:	18 2f       	mov	r17, r24
    176e:	88 23       	and	r24, r24
    1770:	a1 f0       	breq	.+40     	; 0x179a <udc_iface_disable+0x76>
    1772:	c0 91 9d 20 	lds	r28, 0x209D	; 0x80209d <udc_ptr_iface>
    1776:	d0 91 9e 20 	lds	r29, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    177a:	65 e0       	ldi	r22, 0x05	; 5
    177c:	ce 01       	movw	r24, r28
    177e:	60 df       	rcall	.-320    	; 0x1640 <udc_next_desc_in_iface>
    1780:	ec 01       	movw	r28, r24
    1782:	89 2b       	or	r24, r25
    1784:	21 f0       	breq	.+8      	; 0x178e <udc_iface_disable+0x6a>
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <udd_ep_free>
    178c:	f6 cf       	rjmp	.-20     	; 0x177a <udc_iface_disable+0x56>
    178e:	d7 01       	movw	r26, r14
    1790:	12 96       	adiw	r26, 0x02	; 2
    1792:	ed 91       	ld	r30, X+
    1794:	fc 91       	ld	r31, X
    1796:	13 97       	sbiw	r26, 0x03	; 3
    1798:	09 95       	icall
    179a:	81 2f       	mov	r24, r17
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <udc_iface_enable>:
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	18 2f       	mov	r17, r24
    17b0:	7f df       	rcall	.-258    	; 0x16b0 <udc_update_iface_desc>
    17b2:	88 23       	and	r24, r24
    17b4:	39 f1       	breq	.+78     	; 0x1804 <udc_iface_enable+0x5c>
    17b6:	c0 91 9d 20 	lds	r28, 0x209D	; 0x80209d <udc_ptr_iface>
    17ba:	d0 91 9e 20 	lds	r29, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    17be:	65 e0       	ldi	r22, 0x05	; 5
    17c0:	ce 01       	movw	r24, r28
    17c2:	3e df       	rcall	.-388    	; 0x1640 <udc_next_desc_in_iface>
    17c4:	ec 01       	movw	r28, r24
    17c6:	89 2b       	or	r24, r25
    17c8:	41 f0       	breq	.+16     	; 0x17da <udc_iface_enable+0x32>
    17ca:	4c 81       	ldd	r20, Y+4	; 0x04
    17cc:	5d 81       	ldd	r21, Y+5	; 0x05
    17ce:	6b 81       	ldd	r22, Y+3	; 0x03
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	fe d7       	rcall	.+4092   	; 0x27d0 <udd_ep_alloc>
    17d4:	81 11       	cpse	r24, r1
    17d6:	f3 cf       	rjmp	.-26     	; 0x17be <udc_iface_enable+0x16>
    17d8:	15 c0       	rjmp	.+42     	; 0x1804 <udc_iface_enable+0x5c>
    17da:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    17de:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    17e2:	e1 2f       	mov	r30, r17
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	12 96       	adiw	r26, 0x02	; 2
    17ec:	8d 91       	ld	r24, X+
    17ee:	9c 91       	ld	r25, X
    17f0:	13 97       	sbiw	r26, 0x03	; 3
    17f2:	e8 0f       	add	r30, r24
    17f4:	f9 1f       	adc	r31, r25
    17f6:	01 90       	ld	r0, Z+
    17f8:	f0 81       	ld	r31, Z
    17fa:	e0 2d       	mov	r30, r0
    17fc:	01 90       	ld	r0, Z+
    17fe:	f0 81       	ld	r31, Z
    1800:	e0 2d       	mov	r30, r0
    1802:	09 95       	icall
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	08 95       	ret

0000180c <udc_get_interface_desc>:
    180c:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <udc_ptr_iface>
    1810:	90 91 9e 20 	lds	r25, 0x209E	; 0x80209e <udc_ptr_iface+0x1>
    1814:	08 95       	ret

00001816 <udc_start>:
    1816:	68 c7       	rjmp	.+3792   	; 0x26e8 <udd_enable>
    1818:	08 95       	ret

0000181a <udc_reset>:
    181a:	cf 93       	push	r28
    181c:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1820:	88 23       	and	r24, r24
    1822:	c1 f0       	breq	.+48     	; 0x1854 <udc_reset+0x3a>
    1824:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1828:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    182c:	01 90       	ld	r0, Z+
    182e:	f0 81       	ld	r31, Z
    1830:	e0 2d       	mov	r30, r0
    1832:	84 81       	ldd	r24, Z+4	; 0x04
    1834:	88 23       	and	r24, r24
    1836:	71 f0       	breq	.+28     	; 0x1854 <udc_reset+0x3a>
    1838:	c0 e0       	ldi	r28, 0x00	; 0
    183a:	8c 2f       	mov	r24, r28
    183c:	73 df       	rcall	.-282    	; 0x1724 <udc_iface_disable>
    183e:	cf 5f       	subi	r28, 0xFF	; 255
    1840:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1844:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1848:	01 90       	ld	r0, Z+
    184a:	f0 81       	ld	r31, Z
    184c:	e0 2d       	mov	r30, r0
    184e:	84 81       	ldd	r24, Z+4	; 0x04
    1850:	c8 17       	cp	r28, r24
    1852:	98 f3       	brcs	.-26     	; 0x183a <udc_reset+0x20>
    1854:	10 92 a2 20 	sts	0x20A2, r1	; 0x8020a2 <udc_num_configuration>
    1858:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <udc_device_status>
    185c:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <udc_device_status+0x1>
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1864:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1866:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    186a:	88 23       	and	r24, r24
    186c:	49 f1       	breq	.+82     	; 0x18c0 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    186e:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    1872:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    187c:	84 81       	ldd	r24, Z+4	; 0x04
    187e:	88 23       	and	r24, r24
    1880:	f9 f0       	breq	.+62     	; 0x18c0 <udc_sof_notify+0x5c>
    1882:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1884:	ec 2f       	mov	r30, r28
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	12 96       	adiw	r26, 0x02	; 2
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	13 97       	sbiw	r26, 0x03	; 3
    1894:	e8 0f       	add	r30, r24
    1896:	f9 1f       	adc	r31, r25
    1898:	01 90       	ld	r0, Z+
    189a:	f0 81       	ld	r31, Z
    189c:	e0 2d       	mov	r30, r0
    189e:	00 84       	ldd	r0, Z+8	; 0x08
    18a0:	f1 85       	ldd	r31, Z+9	; 0x09
    18a2:	e0 2d       	mov	r30, r0
    18a4:	30 97       	sbiw	r30, 0x00	; 0
    18a6:	09 f0       	breq	.+2      	; 0x18aa <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    18a8:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    18aa:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18ac:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    18b0:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    18b4:	ed 91       	ld	r30, X+
    18b6:	fc 91       	ld	r31, X
    18b8:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    18ba:	84 81       	ldd	r24, Z+4	; 0x04
    18bc:	c8 17       	cp	r28, r24
    18be:	10 f3       	brcs	.-60     	; 0x1884 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    18c0:	cf 91       	pop	r28
    18c2:	08 95       	ret

000018c4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    18cc:	ea e9       	ldi	r30, 0x9A	; 154
    18ce:	f3 e2       	ldi	r31, 0x23	; 35
    18d0:	12 86       	std	Z+10, r1	; 0x0a
    18d2:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    18d4:	14 86       	std	Z+12, r1	; 0x0c
    18d6:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    18d8:	16 86       	std	Z+14, r1	; 0x0e
    18da:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	88 23       	and	r24, r24
    18e2:	3c f4       	brge	.+14     	; 0x18f2 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    18e4:	40 91 a0 23 	lds	r20, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    18e8:	50 91 a1 23 	lds	r21, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    18ec:	45 2b       	or	r20, r21
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <udc_process_setup+0x2e>
    18f0:	6c c3       	rjmp	.+1752   	; 0x1fca <udc_process_setup+0x706>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    18f2:	98 2f       	mov	r25, r24
    18f4:	90 76       	andi	r25, 0x60	; 96
    18f6:	90 34       	cpi	r25, 0x40	; 64
    18f8:	09 f0       	breq	.+2      	; 0x18fc <udc_process_setup+0x38>
    18fa:	0d c1       	rjmp	.+538    	; 0x1b16 <udc_process_setup+0x252>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    18fc:	e0 91 9b 23 	lds	r30, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1900:	4e 2f       	mov	r20, r30
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	fa 01       	movw	r30, r20
    1906:	e0 5a       	subi	r30, 0xA0	; 160
    1908:	f1 09       	sbc	r31, r1
    190a:	e9 30       	cpi	r30, 0x09	; 9
    190c:	f1 05       	cpc	r31, r1
    190e:	08 f0       	brcs	.+2      	; 0x1912 <udc_process_setup+0x4e>
    1910:	02 c1       	rjmp	.+516    	; 0x1b16 <udc_process_setup+0x252>
    1912:	e2 5f       	subi	r30, 0xF2	; 242
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    1920:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1924:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1928:	ee e7       	ldi	r30, 0x7E	; 126
    192a:	f1 e2       	ldi	r31, 0x21	; 33
    192c:	85 87       	std	Z+13, r24	; 0x0d
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    192e:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    1932:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    1936:	96 87       	std	Z+14, r25	; 0x0e
			uds.calValNeg = cali_value_negative_gradient;
    1938:	80 91 72 21 	lds	r24, 0x2172	; 0x802172 <cali_value_negative_gradient>
    193c:	87 87       	std	Z+15, r24	; 0x0f
			uds.calValPos = cali_value_positive_gradient;
    193e:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <cali_value_positive_gradient>
    1942:	80 8b       	std	Z+16, r24	; 0x10
			uds.CALA = DFLLRC2M.CALA;
    1944:	a8 e6       	ldi	r26, 0x68	; 104
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	12 96       	adiw	r26, 0x02	; 2
    194a:	8c 91       	ld	r24, X
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	81 8b       	std	Z+17, r24	; 0x11
			uds.CALB = DFLLRC2M.CALB;
    1950:	13 96       	adiw	r26, 0x03	; 3
    1952:	8c 91       	ld	r24, X
    1954:	82 8b       	std	Z+18, r24	; 0x12
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    1956:	60 91 a0 23 	lds	r22, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    195a:	70 91 a1 23 	lds	r23, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    195e:	cf 01       	movw	r24, r30
    1960:	30 d7       	rcall	.+3680   	; 0x27c2 <udd_set_setup_payload>
    1962:	37 c3       	rjmp	.+1646   	; 0x1fd2 <udc_process_setup+0x70e>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1964:	e0 e0       	ldi	r30, 0x00	; 0
    1966:	f8 e0       	ldi	r31, 0x08	; 8
    1968:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    196a:	ca e9       	ldi	r28, 0x9A	; 154
    196c:	d3 e2       	ldi	r29, 0x23	; 35
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	9b 81       	ldd	r25, Y+3	; 0x03
    1972:	86 ab       	std	Z+54, r24	; 0x36
    1974:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	8f 70       	andi	r24, 0x0F	; 15
    197a:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    197c:	6e 81       	ldd	r22, Y+6	; 0x06
    197e:	7f 81       	ldd	r23, Y+7	; 0x07
    1980:	8a e9       	ldi	r24, 0x9A	; 154
    1982:	91 e2       	ldi	r25, 0x21	; 33
    1984:	1e d7       	rcall	.+3644   	; 0x27c2 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	9f 81       	ldd	r25, Y+7	; 0x07
    198a:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    198e:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1992:	82 17       	cp	r24, r18
    1994:	93 07       	cpc	r25, r19
    1996:	09 f4       	brne	.+2      	; 0x199a <udc_process_setup+0xd6>
    1998:	1c c3       	rjmp	.+1592   	; 0x1fd2 <udc_process_setup+0x70e>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    199a:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    199e:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				tiny_dma_delayed_set(global_mode);
    19a2:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19a6:	be d8       	rcall	.-3716   	; 0xb24 <tiny_dma_delayed_set>
    19a8:	14 c3       	rjmp	.+1576   	; 0x1fd2 <udc_process_setup+0x70e>
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    19aa:	e0 e4       	ldi	r30, 0x40	; 64
    19ac:	f8 e0       	ldi	r31, 0x08	; 8
    19ae:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    19b0:	ca e9       	ldi	r28, 0x9A	; 154
    19b2:	d3 e2       	ldi	r29, 0x23	; 35
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	86 ab       	std	Z+54, r24	; 0x36
    19ba:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	8f 70       	andi	r24, 0x0F	; 15
    19c0:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    19c2:	6e 81       	ldd	r22, Y+6	; 0x06
    19c4:	7f 81       	ldd	r23, Y+7	; 0x07
    19c6:	8b ea       	ldi	r24, 0xAB	; 171
    19c8:	93 e2       	ldi	r25, 0x23	; 35
    19ca:	fb d6       	rcall	.+3574   	; 0x27c2 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    19d4:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    19d8:	82 17       	cp	r24, r18
    19da:	93 07       	cpc	r25, r19
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <udc_process_setup+0x11c>
    19de:	f9 c2       	rjmp	.+1522   	; 0x1fd2 <udc_process_setup+0x70e>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    19e0:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    19e4:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				tiny_dma_delayed_set(global_mode);
    19e8:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19ec:	9b d8       	rcall	.-3786   	; 0xb24 <tiny_dma_delayed_set>
    19ee:	f1 c2       	rjmp	.+1506   	; 0x1fd2 <udc_process_setup+0x70e>
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    19f0:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    19f4:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    19f8:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    19fc:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <PSU_target>
    1a00:	e8 c2       	rjmp	.+1488   	; 0x1fd2 <udc_process_setup+0x70e>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1a02:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1a06:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1a0a:	e3 c2       	rjmp	.+1478   	; 0x1fd2 <udc_process_setup+0x70e>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1a0c:	e0 91 9c 23 	lds	r30, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1a10:	f0 91 9d 23 	lds	r31, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1a14:	e8 30       	cpi	r30, 0x08	; 8
    1a16:	f1 05       	cpc	r31, r1
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <udc_process_setup+0x158>
    1a1a:	7d c0       	rjmp	.+250    	; 0x1b16 <udc_process_setup+0x252>
    1a1c:	e9 5e       	subi	r30, 0xE9	; 233
    1a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a20:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a2c:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a30:	0e 94 cc 04 	call	0x998	; 0x998 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(0);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	76 d8       	rcall	.-3860   	; 0xb24 <tiny_dma_delayed_set>
    1a38:	cc c2       	rjmp	.+1432   	; 0x1fd2 <udc_process_setup+0x70e>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a42:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a46:	0e 94 cc 04 	call	0x998	; 0x998 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(1);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	6b d8       	rcall	.-3882   	; 0xb24 <tiny_dma_delayed_set>
    1a4e:	c1 c2       	rjmp	.+1410   	; 0x1fd2 <udc_process_setup+0x70e>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a58:	ca e9       	ldi	r28, 0x9A	; 154
    1a5a:	d3 e2       	ldi	r29, 0x23	; 35
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	0e 94 cc 04 	call	0x998	; 0x998 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	0e 94 db 04 	call	0x9b6	; 0x9b6 <tiny_adc_ch1setup>
					tiny_dma_delayed_set(2);
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	5c d8       	rcall	.-3912   	; 0xb24 <tiny_dma_delayed_set>
    1a6c:	b2 c2       	rjmp	.+1380   	; 0x1fd2 <udc_process_setup+0x70e>
					break;
				case 3:  //Mode 3
					tiny_dma_delayed_set(3);
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	59 d8       	rcall	.-3918   	; 0xb24 <tiny_dma_delayed_set>
    1a72:	af c2       	rjmp	.+1374   	; 0x1fd2 <udc_process_setup+0x70e>
					break;
				case 4:  //Mode 4
					tiny_dma_delayed_set(4);
    1a74:	84 e0       	ldi	r24, 0x04	; 4
    1a76:	56 d8       	rcall	.-3924   	; 0xb24 <tiny_dma_delayed_set>
    1a78:	ac c2       	rjmp	.+1368   	; 0x1fd2 <udc_process_setup+0x70e>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a82:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a86:	0e 94 cc 04 	call	0x998	; 0x998 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(5);
    1a8a:	85 e0       	ldi	r24, 0x05	; 5
    1a8c:	4b d8       	rcall	.-3946   	; 0xb24 <tiny_dma_delayed_set>
    1a8e:	a1 c2       	rjmp	.+1346   	; 0x1fd2 <udc_process_setup+0x70e>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a98:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1a9c:	0e 94 cc 04 	call	0x998	; 0x998 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(6);
    1aa0:	86 e0       	ldi	r24, 0x06	; 6
    1aa2:	40 d8       	rcall	.-3968   	; 0xb24 <tiny_dma_delayed_set>
    1aa4:	96 c2       	rjmp	.+1324   	; 0x1fd2 <udc_process_setup+0x70e>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1aa6:	62 e0       	ldi	r22, 0x02	; 2
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1aae:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1ab2:	80 68       	ori	r24, 0x80	; 128
    1ab4:	0e 94 cc 04 	call	0x998	; 0x998 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(7);
    1ab8:	87 e0       	ldi	r24, 0x07	; 7
    1aba:	34 d8       	rcall	.-3992   	; 0xb24 <tiny_dma_delayed_set>
    1abc:	8a c2       	rjmp	.+1300   	; 0x1fd2 <udc_process_setup+0x70e>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1abe:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1ac2:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1ac6:	85 c2       	rjmp	.+1290   	; 0x1fd2 <udc_process_setup+0x70e>
			return 1;
		case 0xa7:  //Soft Reset
		//Fill EEPROM buffer with value
		
		if(udd_g_ctrlreq.req.wValue){
    1ac8:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1acc:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1ad0:	89 2b       	or	r24, r25
    1ad2:	91 f0       	breq	.+36     	; 0x1af8 <udc_process_setup+0x234>
			eeprom_safe_read();
    1ad4:	0e 94 8d 03 	call	0x71a	; 0x71a <eeprom_safe_read>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
    1ad8:	80 e2       	ldi	r24, 0x20	; 32
    1ada:	e8 ea       	ldi	r30, 0xA8	; 168
    1adc:	fb e2       	ldi	r31, 0x2B	; 43
    1ade:	ab ea       	ldi	r26, 0xAB	; 171
    1ae0:	b5 e2       	ldi	r27, 0x25	; 37
    1ae2:	01 90       	ld	r0, Z+
    1ae4:	0d 92       	st	X+, r0
    1ae6:	8a 95       	dec	r24
    1ae8:	e1 f7       	brne	.-8      	; 0x1ae2 <udc_process_setup+0x21e>
			eeprom_buffer_write[0] = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	80 93 ab 25 	sts	0x25AB, r24	; 0x8025ab <eeprom_buffer_write>
			eeprom_safe_write();
    1af0:	0e 94 a2 03 	call	0x744	; 0x744 <eeprom_safe_write>
			eeprom_safe_read();
    1af4:	0e 94 8d 03 	call	0x71a	; 0x71a <eeprom_safe_read>
		}
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1af8:	e9 e7       	ldi	r30, 0x79	; 121
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	88 ed       	ldi	r24, 0xD8	; 216
    1b00:	f8 94       	cli
    1b02:	84 bf       	out	0x34, r24	; 52
    1b04:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		case 0xa8:  //Firmware Version Request
			udd_set_setup_payload(&firmver, udd_g_ctrlreq.req.wLength);
    1b06:	60 91 a0 23 	lds	r22, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1b0a:	70 91 a1 23 	lds	r23, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1b0e:	8a e8       	ldi	r24, 0x8A	; 138
    1b10:	90 e2       	ldi	r25, 0x20	; 32
    1b12:	57 d6       	rcall	.+3246   	; 0x27c2 <udd_set_setup_payload>
    1b14:	5e c2       	rjmp	.+1212   	; 0x1fd2 <udc_process_setup+0x70e>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1b16:	91 11       	cpse	r25, r1
    1b18:	e1 c1       	rjmp	.+962    	; 0x1edc <udc_process_setup+0x618>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1b1a:	22 23       	and	r18, r18
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <udc_process_setup+0x25c>
    1b1e:	05 c1       	rjmp	.+522    	; 0x1d2a <udc_process_setup+0x466>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1b20:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1b24:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1b28:	21 15       	cp	r18, r1
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <udc_process_setup+0x26c>
    1b2e:	d6 c1       	rjmp	.+940    	; 0x1edc <udc_process_setup+0x618>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1b30:	8f 71       	andi	r24, 0x1F	; 31
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <udc_process_setup+0x272>
    1b34:	a3 c0       	rjmp	.+326    	; 0x1c7c <udc_process_setup+0x3b8>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b36:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1b3a:	96 30       	cpi	r25, 0x06	; 6
    1b3c:	79 f0       	breq	.+30     	; 0x1b5c <udc_process_setup+0x298>
    1b3e:	98 30       	cpi	r25, 0x08	; 8
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <udc_process_setup+0x280>
    1b42:	92 c0       	rjmp	.+292    	; 0x1c68 <udc_process_setup+0x3a4>
    1b44:	91 11       	cpse	r25, r1
    1b46:	9a c0       	rjmp	.+308    	; 0x1c7c <udc_process_setup+0x3b8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <udc_process_setup+0x28c>
    1b4e:	c6 c1       	rjmp	.+908    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	86 ea       	ldi	r24, 0xA6	; 166
    1b56:	90 e2       	ldi	r25, 0x20	; 32
    1b58:	34 d6       	rcall	.+3176   	; 0x27c2 <udd_set_setup_payload>
    1b5a:	3d c2       	rjmp	.+1146   	; 0x1fd6 <udc_process_setup+0x712>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b5c:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1b60:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b64:	29 2f       	mov	r18, r25
    1b66:	33 27       	eor	r19, r19
    1b68:	22 30       	cpi	r18, 0x02	; 2
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	a9 f0       	breq	.+42     	; 0x1b98 <udc_process_setup+0x2d4>
    1b6e:	24 f4       	brge	.+8      	; 0x1b78 <udc_process_setup+0x2b4>
    1b70:	21 30       	cpi	r18, 0x01	; 1
    1b72:	31 05       	cpc	r19, r1
    1b74:	41 f0       	breq	.+16     	; 0x1b86 <udc_process_setup+0x2c2>
    1b76:	a9 c1       	rjmp	.+850    	; 0x1eca <udc_process_setup+0x606>
    1b78:	23 30       	cpi	r18, 0x03	; 3
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	d9 f1       	breq	.+118    	; 0x1bf4 <udc_process_setup+0x330>
    1b7e:	2f 30       	cpi	r18, 0x0F	; 15
    1b80:	31 05       	cpc	r19, r1
    1b82:	51 f1       	breq	.+84     	; 0x1bd8 <udc_process_setup+0x314>
    1b84:	a2 c1       	rjmp	.+836    	; 0x1eca <udc_process_setup+0x606>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1b86:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1b8a:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1b8e:	dc 01       	movw	r26, r24
    1b90:	6c 91       	ld	r22, X
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	16 d6       	rcall	.+3116   	; 0x27c2 <udd_set_setup_payload>
    1b96:	59 c0       	rjmp	.+178    	; 0x1c4a <udc_process_setup+0x386>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1b98:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1b9c:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1ba0:	21 89       	ldd	r18, Z+17	; 0x11
    1ba2:	82 17       	cp	r24, r18
    1ba4:	08 f0       	brcs	.+2      	; 0x1ba8 <udc_process_setup+0x2e4>
    1ba6:	9a c1       	rjmp	.+820    	; 0x1edc <udc_process_setup+0x618>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1ba8:	99 27       	eor	r25, r25
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1bb6:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1bba:	e8 0f       	add	r30, r24
    1bbc:	f9 1f       	adc	r31, r25
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	62 81       	ldd	r22, Z+2	; 0x02
    1bc6:	73 81       	ldd	r23, Z+3	; 0x03
    1bc8:	fc d5       	rcall	.+3064   	; 0x27c2 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1bca:	e0 91 a2 23 	lds	r30, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    1bce:	f0 91 a3 23 	lds	r31, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	81 83       	std	Z+1, r24	; 0x01
    1bd6:	39 c0       	rjmp	.+114    	; 0x1c4a <udc_process_setup+0x386>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1bd8:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1bdc:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <udc_process_setup+0x322>
    1be4:	7b c1       	rjmp	.+758    	; 0x1edc <udc_process_setup+0x618>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1be6:	dc 01       	movw	r26, r24
    1be8:	12 96       	adiw	r26, 0x02	; 2
    1bea:	6d 91       	ld	r22, X+
    1bec:	7c 91       	ld	r23, X
    1bee:	13 97       	sbiw	r26, 0x03	; 3
    1bf0:	e8 d5       	rcall	.+3024   	; 0x27c2 <udd_set_setup_payload>
    1bf2:	2b c0       	rjmp	.+86     	; 0x1c4a <udc_process_setup+0x386>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1bf4:	99 27       	eor	r25, r25
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	71 f0       	breq	.+28     	; 0x1c18 <udc_process_setup+0x354>
    1bfc:	38 f0       	brcs	.+14     	; 0x1c0c <udc_process_setup+0x348>
    1bfe:	02 97       	sbiw	r24, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <udc_process_setup+0x340>
    1c02:	6c c1       	rjmp	.+728    	; 0x1edc <udc_process_setup+0x618>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1c04:	2a e6       	ldi	r18, 0x6A	; 106
    1c06:	30 e2       	ldi	r19, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <udc_process_setup+0x35a>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1c0c:	64 e0       	ldi	r22, 0x04	; 4
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	8c e7       	ldi	r24, 0x7C	; 124
    1c12:	90 e2       	ldi	r25, 0x20	; 32
    1c14:	d6 d5       	rcall	.+2988   	; 0x27c2 <udd_set_setup_payload>
    1c16:	19 c0       	rjmp	.+50     	; 0x1c4a <udc_process_setup+0x386>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1c18:	23 e7       	ldi	r18, 0x73	; 115
    1c1a:	30 e2       	ldi	r19, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1c1c:	87 e0       	ldi	r24, 0x07	; 7
    1c1e:	42 2f       	mov	r20, r18
    1c20:	aa e5       	ldi	r26, 0x5A	; 90
    1c22:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1c24:	e2 2f       	mov	r30, r18
    1c26:	f3 2f       	mov	r31, r19
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1c28:	21 91       	ld	r18, Z+
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	2d 93       	st	X+, r18
    1c2e:	3d 93       	st	X+, r19
    1c30:	9e 2f       	mov	r25, r30
    1c32:	94 1b       	sub	r25, r20
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1c34:	98 17       	cp	r25, r24
    1c36:	c0 f3       	brcs	.-16     	; 0x1c28 <udc_process_setup+0x364>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1c38:	68 2f       	mov	r22, r24
    1c3a:	66 0f       	add	r22, r22
    1c3c:	6e 5f       	subi	r22, 0xFE	; 254
    1c3e:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	88 e5       	ldi	r24, 0x58	; 88
    1c46:	90 e2       	ldi	r25, 0x20	; 32
    1c48:	bc d5       	rcall	.+2936   	; 0x27c2 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1c4a:	ea e9       	ldi	r30, 0x9A	; 154
    1c4c:	f3 e2       	ldi	r31, 0x23	; 35
    1c4e:	86 81       	ldd	r24, Z+6	; 0x06
    1c50:	97 81       	ldd	r25, Z+7	; 0x07
    1c52:	22 85       	ldd	r18, Z+10	; 0x0a
    1c54:	33 85       	ldd	r19, Z+11	; 0x0b
    1c56:	82 17       	cp	r24, r18
    1c58:	93 07       	cpc	r25, r19
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <udc_process_setup+0x39a>
    1c5c:	bc c1       	rjmp	.+888    	; 0x1fd6 <udc_process_setup+0x712>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1c5e:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <udd_g_ctrlreq+0xa>
    1c62:	90 93 a5 23 	sts	0x23A5, r25	; 0x8023a5 <udd_g_ctrlreq+0xb>
    1c66:	b7 c1       	rjmp	.+878    	; 0x1fd6 <udc_process_setup+0x712>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1c68:	21 30       	cpi	r18, 0x01	; 1
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <udc_process_setup+0x3ac>
    1c6e:	36 c1       	rjmp	.+620    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	82 ea       	ldi	r24, 0xA2	; 162
    1c76:	90 e2       	ldi	r25, 0x20	; 32
    1c78:	a4 d5       	rcall	.+2888   	; 0x27c2 <udd_set_setup_payload>
    1c7a:	ad c1       	rjmp	.+858    	; 0x1fd6 <udc_process_setup+0x712>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	e1 f5       	brne	.+120    	; 0x1cf8 <udc_process_setup+0x434>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c80:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1c84:	9a 30       	cpi	r25, 0x0A	; 10
    1c86:	c1 f5       	brne	.+112    	; 0x1cf8 <udc_process_setup+0x434>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1c88:	21 30       	cpi	r18, 0x01	; 1
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <udc_process_setup+0x3cc>
    1c8e:	26 c1       	rjmp	.+588    	; 0x1edc <udc_process_setup+0x618>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c90:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1c94:	88 23       	and	r24, r24
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <udc_process_setup+0x3d6>
    1c98:	21 c1       	rjmp	.+578    	; 0x1edc <udc_process_setup+0x618>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c9a:	c0 91 9e 23 	lds	r28, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1c9e:	d0 91 9f 23 	lds	r29, 0x239F	; 0x80239f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ca2:	00 91 9f 20 	lds	r16, 0x209F	; 0x80209f <udc_ptr_conf>
    1ca6:	10 91 a0 20 	lds	r17, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1caa:	d8 01       	movw	r26, r16
    1cac:	ed 91       	ld	r30, X+
    1cae:	fc 91       	ld	r31, X
    1cb0:	84 81       	ldd	r24, Z+4	; 0x04
    1cb2:	c8 17       	cp	r28, r24
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <udc_process_setup+0x3f4>
    1cb6:	12 c1       	rjmp	.+548    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	8c 2f       	mov	r24, r28
    1cbc:	f9 dc       	rcall	.-1550   	; 0x16b0 <udc_update_iface_desc>
    1cbe:	88 23       	and	r24, r24
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <udc_process_setup+0x400>
    1cc2:	0c c1       	rjmp	.+536    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	99 27       	eor	r25, r25
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	d8 01       	movw	r26, r16
    1cce:	12 96       	adiw	r26, 0x02	; 2
    1cd0:	ed 91       	ld	r30, X+
    1cd2:	fc 91       	ld	r31, X
    1cd4:	13 97       	sbiw	r26, 0x03	; 3
    1cd6:	e8 0f       	add	r30, r24
    1cd8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1cda:	01 90       	ld	r0, Z+
    1cdc:	f0 81       	ld	r31, Z
    1cde:	e0 2d       	mov	r30, r0
    1ce0:	86 81       	ldd	r24, Z+6	; 0x06
    1ce2:	97 81       	ldd	r25, Z+7	; 0x07
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	09 95       	icall
    1ce8:	80 93 a4 20 	sts	0x20A4, r24	; 0x8020a4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	84 ea       	ldi	r24, 0xA4	; 164
    1cf2:	90 e2       	ldi	r25, 0x20	; 32
    1cf4:	66 d5       	rcall	.+2764   	; 0x27c2 <udd_set_setup_payload>
    1cf6:	6f c1       	rjmp	.+734    	; 0x1fd6 <udc_process_setup+0x712>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1cf8:	82 30       	cpi	r24, 0x02	; 2
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <udc_process_setup+0x43a>
    1cfc:	ef c0       	rjmp	.+478    	; 0x1edc <udc_process_setup+0x618>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cfe:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1d02:	81 11       	cpse	r24, r1
    1d04:	e4 c0       	rjmp	.+456    	; 0x1ece <udc_process_setup+0x60a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1d06:	22 30       	cpi	r18, 0x02	; 2
    1d08:	31 05       	cpc	r19, r1
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <udc_process_setup+0x44a>
    1d0c:	e7 c0       	rjmp	.+462    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1d0e:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1d12:	d3 d5       	rcall	.+2982   	; 0x28ba <udd_ep_is_halted>
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	80 93 9b 20 	sts	0x209B, r24	; 0x80209b <udc_ep_status.5686>
    1d1a:	90 93 9c 20 	sts	0x209C, r25	; 0x80209c <udc_ep_status.5686+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1d1e:	62 e0       	ldi	r22, 0x02	; 2
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	8b e9       	ldi	r24, 0x9B	; 155
    1d24:	90 e2       	ldi	r25, 0x20	; 32
    1d26:	4d d5       	rcall	.+2714   	; 0x27c2 <udd_set_setup_payload>
    1d28:	56 c1       	rjmp	.+684    	; 0x1fd6 <udc_process_setup+0x712>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1d2a:	8f 71       	andi	r24, 0x1F	; 31
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <udc_process_setup+0x46c>
    1d2e:	83 c0       	rjmp	.+262    	; 0x1e36 <udc_process_setup+0x572>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1d30:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1d34:	93 30       	cpi	r25, 0x03	; 3
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <udc_process_setup+0x476>
    1d38:	cc c0       	rjmp	.+408    	; 0x1ed2 <udc_process_setup+0x60e>
    1d3a:	18 f4       	brcc	.+6      	; 0x1d42 <udc_process_setup+0x47e>
    1d3c:	91 30       	cpi	r25, 0x01	; 1
    1d3e:	a1 f0       	breq	.+40     	; 0x1d68 <udc_process_setup+0x4a4>
    1d40:	7a c0       	rjmp	.+244    	; 0x1e36 <udc_process_setup+0x572>
    1d42:	95 30       	cpi	r25, 0x05	; 5
    1d44:	19 f0       	breq	.+6      	; 0x1d4c <udc_process_setup+0x488>
    1d46:	99 30       	cpi	r25, 0x09	; 9
    1d48:	39 f1       	breq	.+78     	; 0x1d98 <udc_process_setup+0x4d4>
    1d4a:	75 c0       	rjmp	.+234    	; 0x1e36 <udc_process_setup+0x572>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d4c:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1d50:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1d54:	89 2b       	or	r24, r25
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <udc_process_setup+0x496>
    1d58:	c1 c0       	rjmp	.+386    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1d5a:	82 e5       	ldi	r24, 0x52	; 82
    1d5c:	9b e0       	ldi	r25, 0x0B	; 11
    1d5e:	80 93 a6 23 	sts	0x23A6, r24	; 0x8023a6 <udd_g_ctrlreq+0xc>
    1d62:	90 93 a7 23 	sts	0x23A7, r25	; 0x8023a7 <udd_g_ctrlreq+0xd>
    1d66:	37 c1       	rjmp	.+622    	; 0x1fd6 <udc_process_setup+0x712>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d68:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1d6c:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1d70:	89 2b       	or	r24, r25
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <udc_process_setup+0x4b2>
    1d74:	b3 c0       	rjmp	.+358    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1d76:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1d7a:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <udc_process_setup+0x4c0>
    1d82:	ac c0       	rjmp	.+344    	; 0x1edc <udc_process_setup+0x618>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1d84:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <udc_device_status>
    1d88:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <udc_device_status+0x1>
    1d8c:	8d 7f       	andi	r24, 0xFD	; 253
    1d8e:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <udc_device_status>
    1d92:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <udc_device_status+0x1>
    1d96:	1f c1       	rjmp	.+574    	; 0x1fd6 <udc_process_setup+0x712>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1d98:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1d9c:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1da0:	89 2b       	or	r24, r25
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <udc_process_setup+0x4e2>
    1da4:	9b c0       	rjmp	.+310    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1da6:	0a d5       	rcall	.+2580   	; 0x27bc <udd_getaddress>
    1da8:	88 23       	and	r24, r24
    1daa:	09 f4       	brne	.+2      	; 0x1dae <udc_process_setup+0x4ea>
    1dac:	97 c0       	rjmp	.+302    	; 0x1edc <udc_process_setup+0x618>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1dae:	20 91 9c 23 	lds	r18, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1db2:	30 91 9d 23 	lds	r19, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1db6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1db8:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1dbc:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1dc0:	81 89       	ldd	r24, Z+17	; 0x11
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	82 17       	cp	r24, r18
    1dc6:	93 07       	cpc	r25, r19
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <udc_process_setup+0x508>
    1dca:	88 c0       	rjmp	.+272    	; 0x1edc <udc_process_setup+0x618>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1dcc:	26 dd       	rcall	.-1460   	; 0x181a <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1dce:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1dd2:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1dd6:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1dda:	88 23       	and	r24, r24
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <udc_process_setup+0x51c>
    1dde:	fb c0       	rjmp	.+502    	; 0x1fd6 <udc_process_setup+0x712>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1de0:	99 27       	eor	r25, r25
    1de2:	81 50       	subi	r24, 0x01	; 1
    1de4:	90 4c       	sbci	r25, 0xC0	; 192
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1df2:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1df6:	e8 0f       	add	r30, r24
    1df8:	f9 1f       	adc	r31, r25
    1dfa:	e0 93 9f 20 	sts	0x209F, r30	; 0x80209f <udc_ptr_conf>
    1dfe:	f0 93 a0 20 	sts	0x20A0, r31	; 0x8020a0 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e02:	01 90       	ld	r0, Z+
    1e04:	f0 81       	ld	r31, Z
    1e06:	e0 2d       	mov	r30, r0
    1e08:	84 81       	ldd	r24, Z+4	; 0x04
    1e0a:	88 23       	and	r24, r24
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <udc_process_setup+0x54c>
    1e0e:	e3 c0       	rjmp	.+454    	; 0x1fd6 <udc_process_setup+0x712>
    1e10:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	8c 2f       	mov	r24, r28
    1e16:	c8 dc       	rcall	.-1648   	; 0x17a8 <udc_iface_enable>
    1e18:	88 23       	and	r24, r24
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <udc_process_setup+0x55a>
    1e1c:	5f c0       	rjmp	.+190    	; 0x1edc <udc_process_setup+0x618>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1e1e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e20:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <udc_ptr_conf>
    1e24:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1e28:	01 90       	ld	r0, Z+
    1e2a:	f0 81       	ld	r31, Z
    1e2c:	e0 2d       	mov	r30, r0
    1e2e:	84 81       	ldd	r24, Z+4	; 0x04
    1e30:	c8 17       	cp	r28, r24
    1e32:	78 f3       	brcs	.-34     	; 0x1e12 <udc_process_setup+0x54e>
    1e34:	d0 c0       	rjmp	.+416    	; 0x1fd6 <udc_process_setup+0x712>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	e1 f4       	brne	.+56     	; 0x1e72 <udc_process_setup+0x5ae>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e3a:	90 91 9b 23 	lds	r25, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1e3e:	9b 30       	cpi	r25, 0x0B	; 11
    1e40:	c1 f4       	brne	.+48     	; 0x1e72 <udc_process_setup+0x5ae>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1e42:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1e46:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1e4a:	89 2b       	or	r24, r25
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <udc_process_setup+0x58c>
    1e4e:	46 c0       	rjmp	.+140    	; 0x1edc <udc_process_setup+0x618>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1e50:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1e54:	88 23       	and	r24, r24
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <udc_process_setup+0x596>
    1e58:	41 c0       	rjmp	.+130    	; 0x1edc <udc_process_setup+0x618>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e5a:	ea e9       	ldi	r30, 0x9A	; 154
    1e5c:	f3 e2       	ldi	r31, 0x23	; 35
    1e5e:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1e60:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1e62:	8c 2f       	mov	r24, r28
    1e64:	5f dc       	rcall	.-1858   	; 0x1724 <udc_iface_disable>
    1e66:	88 23       	and	r24, r24
    1e68:	c9 f1       	breq	.+114    	; 0x1edc <udc_process_setup+0x618>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1e6a:	6d 2f       	mov	r22, r29
    1e6c:	8c 2f       	mov	r24, r28
    1e6e:	9c dc       	rcall	.-1736   	; 0x17a8 <udc_iface_enable>
    1e70:	33 c0       	rjmp	.+102    	; 0x1ed8 <udc_process_setup+0x614>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e72:	82 30       	cpi	r24, 0x02	; 2
    1e74:	99 f5       	brne	.+102    	; 0x1edc <udc_process_setup+0x618>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e76:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <udd_g_ctrlreq+0x1>
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	19 f0       	breq	.+6      	; 0x1e84 <udc_process_setup+0x5c0>
    1e7e:	83 30       	cpi	r24, 0x03	; 3
    1e80:	89 f0       	breq	.+34     	; 0x1ea4 <udc_process_setup+0x5e0>
    1e82:	29 c0       	rjmp	.+82     	; 0x1ed6 <udc_process_setup+0x612>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e84:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1e88:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1e8c:	89 2b       	or	r24, r25
    1e8e:	31 f5       	brne	.+76     	; 0x1edc <udc_process_setup+0x618>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e90:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1e94:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1e98:	89 2b       	or	r24, r25
    1e9a:	01 f5       	brne	.+64     	; 0x1edc <udc_process_setup+0x618>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e9c:	80 91 9e 23 	lds	r24, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1ea0:	27 d5       	rcall	.+2638   	; 0x28f0 <udd_ep_clear_halt>
    1ea2:	1a c0       	rjmp	.+52     	; 0x1ed8 <udc_process_setup+0x614>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1ea4:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    1ea8:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    1eac:	89 2b       	or	r24, r25
    1eae:	b1 f4       	brne	.+44     	; 0x1edc <udc_process_setup+0x618>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1eb0:	80 91 9c 23 	lds	r24, 0x239C	; 0x80239c <udd_g_ctrlreq+0x2>
    1eb4:	90 91 9d 23 	lds	r25, 0x239D	; 0x80239d <udd_g_ctrlreq+0x3>
    1eb8:	89 2b       	or	r24, r25
    1eba:	81 f4       	brne	.+32     	; 0x1edc <udc_process_setup+0x618>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ebc:	ca e9       	ldi	r28, 0x9A	; 154
    1ebe:	d3 e2       	ldi	r29, 0x23	; 35
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	05 d6       	rcall	.+3082   	; 0x2ace <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	68 d6       	rcall	.+3280   	; 0x2b98 <udd_ep_set_halt>
    1ec8:	07 c0       	rjmp	.+14     	; 0x1ed8 <udc_process_setup+0x614>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <udc_process_setup+0x614>
				break;
			}
		}
#endif
	}
	return false;
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	03 c0       	rjmp	.+6      	; 0x1ed8 <udc_process_setup+0x614>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <udc_process_setup+0x614>
				break;
			}
		}
#endif
	}
	return false;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1ed8:	81 11       	cpse	r24, r1
    1eda:	7e c0       	rjmp	.+252    	; 0x1fd8 <udc_process_setup+0x714>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1edc:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    1ee0:	8f 71       	andi	r24, 0x1F	; 31
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	71 f5       	brne	.+92     	; 0x1f42 <udc_process_setup+0x67e>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ee6:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1eea:	88 23       	and	r24, r24
    1eec:	51 f1       	breq	.+84     	; 0x1f42 <udc_process_setup+0x67e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1eee:	00 91 9e 23 	lds	r16, 0x239E	; 0x80239e <udd_g_ctrlreq+0x4>
    1ef2:	10 91 9f 23 	lds	r17, 0x239F	; 0x80239f <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ef6:	c0 91 9f 20 	lds	r28, 0x209F	; 0x80209f <udc_ptr_conf>
    1efa:	d0 91 a0 20 	lds	r29, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1efe:	e8 81       	ld	r30, Y
    1f00:	f9 81       	ldd	r31, Y+1	; 0x01
    1f02:	84 81       	ldd	r24, Z+4	; 0x04
    1f04:	08 17       	cp	r16, r24
    1f06:	e8 f4       	brcc	.+58     	; 0x1f42 <udc_process_setup+0x67e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	80 2f       	mov	r24, r16
    1f0c:	d1 db       	rcall	.-2142   	; 0x16b0 <udc_update_iface_desc>
    1f0e:	88 23       	and	r24, r24
    1f10:	c1 f0       	breq	.+48     	; 0x1f42 <udc_process_setup+0x67e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f12:	f8 01       	movw	r30, r16
    1f14:	ff 27       	eor	r31, r31
    1f16:	cf 01       	movw	r24, r30
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f20:	e8 0f       	add	r30, r24
    1f22:	f9 1f       	adc	r31, r25
    1f24:	c0 81       	ld	r28, Z
    1f26:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f28:	ee 81       	ldd	r30, Y+6	; 0x06
    1f2a:	ff 81       	ldd	r31, Y+7	; 0x07
    1f2c:	09 95       	icall
    1f2e:	68 2f       	mov	r22, r24
    1f30:	80 2f       	mov	r24, r16
    1f32:	be db       	rcall	.-2180   	; 0x16b0 <udc_update_iface_desc>
    1f34:	88 23       	and	r24, r24
    1f36:	29 f0       	breq	.+10     	; 0x1f42 <udc_process_setup+0x67e>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1f38:	ec 81       	ldd	r30, Y+4	; 0x04
    1f3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f3c:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1f3e:	81 11       	cpse	r24, r1
    1f40:	4b c0       	rjmp	.+150    	; 0x1fd8 <udc_process_setup+0x714>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1f42:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    1f46:	8f 71       	andi	r24, 0x1F	; 31
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <udc_process_setup+0x68a>
    1f4c:	40 c0       	rjmp	.+128    	; 0x1fce <udc_process_setup+0x70a>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1f4e:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <udc_num_configuration>
    1f52:	88 23       	and	r24, r24
    1f54:	b1 f1       	breq	.+108    	; 0x1fc2 <udc_process_setup+0x6fe>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f56:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    1f5a:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1f5e:	ed 91       	ld	r30, X+
    1f60:	fc 91       	ld	r31, X
    1f62:	11 97       	sbiw	r26, 0x01	; 1
    1f64:	84 81       	ldd	r24, Z+4	; 0x04
    1f66:	88 23       	and	r24, r24
    1f68:	71 f1       	breq	.+92     	; 0x1fc6 <udc_process_setup+0x702>
    1f6a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f6c:	ec 2f       	mov	r30, r28
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	12 96       	adiw	r26, 0x02	; 2
    1f76:	8d 91       	ld	r24, X+
    1f78:	9c 91       	ld	r25, X
    1f7a:	13 97       	sbiw	r26, 0x03	; 3
    1f7c:	e8 0f       	add	r30, r24
    1f7e:	f9 1f       	adc	r31, r25
    1f80:	00 81       	ld	r16, Z
    1f82:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f84:	d8 01       	movw	r26, r16
    1f86:	16 96       	adiw	r26, 0x06	; 6
    1f88:	ed 91       	ld	r30, X+
    1f8a:	fc 91       	ld	r31, X
    1f8c:	17 97       	sbiw	r26, 0x07	; 7
    1f8e:	09 95       	icall
    1f90:	68 2f       	mov	r22, r24
    1f92:	8c 2f       	mov	r24, r28
    1f94:	8d db       	rcall	.-2278   	; 0x16b0 <udc_update_iface_desc>
    1f96:	88 23       	and	r24, r24
    1f98:	f9 f0       	breq	.+62     	; 0x1fd8 <udc_process_setup+0x714>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1f9a:	d8 01       	movw	r26, r16
    1f9c:	14 96       	adiw	r26, 0x04	; 4
    1f9e:	ed 91       	ld	r30, X+
    1fa0:	fc 91       	ld	r31, X
    1fa2:	15 97       	sbiw	r26, 0x05	; 5
    1fa4:	09 95       	icall
    1fa6:	81 11       	cpse	r24, r1
    1fa8:	17 c0       	rjmp	.+46     	; 0x1fd8 <udc_process_setup+0x714>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1faa:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fac:	a0 91 9f 20 	lds	r26, 0x209F	; 0x80209f <udc_ptr_conf>
    1fb0:	b0 91 a0 20 	lds	r27, 0x20A0	; 0x8020a0 <udc_ptr_conf+0x1>
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	11 97       	sbiw	r26, 0x01	; 1
    1fba:	94 81       	ldd	r25, Z+4	; 0x04
    1fbc:	c9 17       	cp	r28, r25
    1fbe:	b0 f2       	brcs	.-84     	; 0x1f6c <udc_process_setup+0x6a8>
    1fc0:	0b c0       	rjmp	.+22     	; 0x1fd8 <udc_process_setup+0x714>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	09 c0       	rjmp	.+18     	; 0x1fd8 <udc_process_setup+0x714>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	07 c0       	rjmp	.+14     	; 0x1fd8 <udc_process_setup+0x714>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <udc_process_setup+0x714>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <udc_process_setup+0x714>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <udc_process_setup+0x714>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	08 95       	ret

00001fe2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1fe2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1fe4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1fe6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1fe8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1fea:	60 83       	st	Z, r22
	ret                             // Return to caller
    1fec:	08 95       	ret

00001fee <nvm_eeprom_read_buffer>:
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
	nvm_exec();
	NVM.CMD = old_cmd;
}
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	9c 01       	movw	r18, r24
    1ff4:	db 01       	movw	r26, r22
    1ff6:	e0 ec       	ldi	r30, 0xC0	; 192
    1ff8:	f1 e0       	ldi	r31, 0x01	; 1
    1ffa:	97 85       	ldd	r25, Z+15	; 0x0f
    1ffc:	99 23       	and	r25, r25
    1ffe:	ec f3       	brlt	.-6      	; 0x1ffa <nvm_eeprom_read_buffer+0xc>
    2000:	cc ec       	ldi	r28, 0xCC	; 204
    2002:	d1 e0       	ldi	r29, 0x01	; 1
    2004:	98 81       	ld	r25, Y
    2006:	98 60       	ori	r25, 0x08	; 8
    2008:	98 83       	st	Y, r25
    200a:	b9 01       	movw	r22, r18
    200c:	70 5f       	subi	r23, 0xF0	; 240
    200e:	cd 01       	movw	r24, r26
    2010:	b9 d7       	rcall	.+3954   	; 0x2f84 <memcpy>
    2012:	88 81       	ld	r24, Y
    2014:	87 7f       	andi	r24, 0xF7	; 247
    2016:	88 83       	st	Y, r24
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	08 95       	ret

0000201e <nvm_eeprom_load_byte_to_buffer>:
    201e:	e0 ec       	ldi	r30, 0xC0	; 192
    2020:	f1 e0       	ldi	r31, 0x01	; 1
    2022:	97 85       	ldd	r25, Z+15	; 0x0f
    2024:	99 23       	and	r25, r25
    2026:	ec f3       	brlt	.-6      	; 0x2022 <nvm_eeprom_load_byte_to_buffer+0x4>
    2028:	ac ec       	ldi	r26, 0xCC	; 204
    202a:	b1 e0       	ldi	r27, 0x01	; 1
    202c:	9c 91       	ld	r25, X
    202e:	98 60       	ori	r25, 0x08	; 8
    2030:	9c 93       	st	X, r25
    2032:	e8 2f       	mov	r30, r24
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	f0 5f       	subi	r31, 0xF0	; 240
    2038:	60 83       	st	Z, r22
    203a:	8c 91       	ld	r24, X
    203c:	87 7f       	andi	r24, 0xF7	; 247
    203e:	8c 93       	st	X, r24
    2040:	08 95       	ret

00002042 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2050:	e0 ec       	ldi	r30, 0xC0	; 192
    2052:	f1 e0       	ldi	r31, 0x01	; 1
    2054:	87 85       	ldd	r24, Z+15	; 0x0f
    2056:	88 23       	and	r24, r24
    2058:	ec f3       	brlt	.-6      	; 0x2054 <nvm_eeprom_load_page_to_buffer+0x12>
    205a:	78 01       	movw	r14, r16
    205c:	80 e2       	ldi	r24, 0x20	; 32
    205e:	e8 0e       	add	r14, r24
    2060:	f1 1c       	adc	r15, r1
    2062:	e8 01       	movw	r28, r16
    2064:	8c 2f       	mov	r24, r28
    2066:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    2068:	69 91       	ld	r22, Y+
    206a:	d9 df       	rcall	.-78     	; 0x201e <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    206c:	ce 15       	cp	r28, r14
    206e:	df 05       	cpc	r29, r15
    2070:	c9 f7       	brne	.-14     	; 0x2064 <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	08 95       	ret

00002080 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	e0 ec       	ldi	r30, 0xC0	; 192
    2088:	f1 e0       	ldi	r31, 0x01	; 1
    208a:	97 85       	ldd	r25, Z+15	; 0x0f
    208c:	99 23       	and	r25, r25
    208e:	ec f3       	brlt	.-6      	; 0x208a <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2090:	20 e2       	ldi	r18, 0x20	; 32
    2092:	82 9f       	mul	r24, r18
    2094:	c0 01       	movw	r24, r0
    2096:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    2098:	c0 ec       	ldi	r28, 0xC0	; 192
    209a:	d1 e0       	ldi	r29, 0x01	; 1
    209c:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    209e:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    20a0:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    20a2:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    20a4:	85 e3       	ldi	r24, 0x35	; 53
    20a6:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    20a8:	61 e0       	ldi	r22, 0x01	; 1
    20aa:	8b ec       	ldi	r24, 0xCB	; 203
    20ac:	91 e0       	ldi	r25, 0x01	; 1
    20ae:	99 df       	rcall	.-206    	; 0x1fe2 <ccp_write_io>
	NVM.CMD = old_cmd;
    20b0:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	08 95       	ret

000020ba <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    20ba:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    20be:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    20c0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    20c2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    20c6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    20c8:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    20cc:	08 95       	ret

000020ce <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    20ce:	81 11       	cpse	r24, r1
    20d0:	22 c0       	rjmp	.+68     	; 0x2116 <udd_sleep_mode+0x48>
    20d2:	90 91 6c 21 	lds	r25, 0x216C	; 0x80216c <udd_b_idle>
    20d6:	99 23       	and	r25, r25
    20d8:	d9 f0       	breq	.+54     	; 0x2110 <udd_sleep_mode+0x42>
    20da:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <sleepmgr_locks+0x1>
    20de:	91 11       	cpse	r25, r1
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <udd_sleep_mode+0x16>
    20e2:	ff cf       	rjmp	.-2      	; 0x20e2 <udd_sleep_mode+0x14>
    20e4:	2f b7       	in	r18, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	ea ec       	ldi	r30, 0xCA	; 202
    20ea:	fb e2       	ldi	r31, 0x2B	; 43
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	91 50       	subi	r25, 0x01	; 1
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	2f bf       	out	0x3f, r18	; 63
    20f4:	0d c0       	rjmp	.+26     	; 0x2110 <udd_sleep_mode+0x42>
    20f6:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <sleepmgr_locks+0x1>
    20fa:	9f 3f       	cpi	r25, 0xFF	; 255
    20fc:	09 f4       	brne	.+2      	; 0x2100 <udd_sleep_mode+0x32>
    20fe:	ff cf       	rjmp	.-2      	; 0x20fe <udd_sleep_mode+0x30>
    2100:	2f b7       	in	r18, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	ea ec       	ldi	r30, 0xCA	; 202
    2106:	fb e2       	ldi	r31, 0x2B	; 43
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	9f 5f       	subi	r25, 0xFF	; 255
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	2f bf       	out	0x3f, r18	; 63
    2110:	80 93 6c 21 	sts	0x216C, r24	; 0x80216c <udd_b_idle>
    2114:	08 95       	ret
    2116:	90 91 6c 21 	lds	r25, 0x216C	; 0x80216c <udd_b_idle>
    211a:	99 23       	and	r25, r25
    211c:	61 f3       	breq	.-40     	; 0x20f6 <udd_sleep_mode+0x28>
    211e:	f8 cf       	rjmp	.-16     	; 0x2110 <udd_sleep_mode+0x42>

00002120 <udd_ctrl_init>:
    2120:	0f 93       	push	r16
    2122:	e8 ec       	ldi	r30, 0xC8	; 200
    2124:	f4 e0       	ldi	r31, 0x04	; 4
    2126:	80 81       	ld	r24, Z
    2128:	8f 7d       	andi	r24, 0xDF	; 223
    212a:	80 83       	st	Z, r24
    212c:	80 81       	ld	r24, Z
    212e:	8f 7d       	andi	r24, 0xDF	; 223
    2130:	80 83       	st	Z, r24
    2132:	e0 e5       	ldi	r30, 0x50	; 80
    2134:	f1 e2       	ldi	r31, 0x21	; 33
    2136:	02 e0       	ldi	r16, 0x02	; 2
    2138:	05 93       	las	Z, r16
    213a:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <udd_sram+0x12>
    213e:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <udd_sram+0x13>
    2142:	00 e2       	ldi	r16, 0x20	; 32
    2144:	06 93       	lac	Z, r16
    2146:	00 e4       	ldi	r16, 0x40	; 64
    2148:	06 93       	lac	Z, r16
    214a:	e8 e4       	ldi	r30, 0x48	; 72
    214c:	f1 e2       	ldi	r31, 0x21	; 33
    214e:	00 e2       	ldi	r16, 0x20	; 32
    2150:	06 93       	lac	Z, r16
    2152:	00 e4       	ldi	r16, 0x40	; 64
    2154:	06 93       	lac	Z, r16
    2156:	ea e9       	ldi	r30, 0x9A	; 154
    2158:	f3 e2       	ldi	r31, 0x23	; 35
    215a:	14 86       	std	Z+12, r1	; 0x0c
    215c:	15 86       	std	Z+13, r1	; 0x0d
    215e:	16 86       	std	Z+14, r1	; 0x0e
    2160:	17 86       	std	Z+15, r1	; 0x0f
    2162:	12 86       	std	Z+10, r1	; 0x0a
    2164:	13 86       	std	Z+11, r1	; 0x0b
    2166:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <udd_ep_control_state>
    216a:	0f 91       	pop	r16
    216c:	08 95       	ret

0000216e <udd_ctrl_stall_data>:
    216e:	0f 93       	push	r16
    2170:	85 e0       	ldi	r24, 0x05	; 5
    2172:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    2176:	e1 e5       	ldi	r30, 0x51	; 81
    2178:	f1 e2       	ldi	r31, 0x21	; 33
    217a:	04 e0       	ldi	r16, 0x04	; 4
    217c:	05 93       	las	Z, r16
    217e:	e9 e4       	ldi	r30, 0x49	; 73
    2180:	f1 e2       	ldi	r31, 0x21	; 33
    2182:	04 e0       	ldi	r16, 0x04	; 4
    2184:	05 93       	las	Z, r16
    2186:	0f 91       	pop	r16
    2188:	08 95       	ret

0000218a <udd_ctrl_send_zlp_in>:
    218a:	0f 93       	push	r16
    218c:	83 e0       	ldi	r24, 0x03	; 3
    218e:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    2192:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <udd_sram+0x12>
    2196:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <udd_sram+0x13>
    219a:	e0 e5       	ldi	r30, 0x50	; 80
    219c:	f1 e2       	ldi	r31, 0x21	; 33
    219e:	02 e0       	ldi	r16, 0x02	; 2
    21a0:	06 93       	lac	Z, r16
    21a2:	0f 91       	pop	r16
    21a4:	08 95       	ret

000021a6 <udd_ctrl_endofrequest>:
    21a6:	e0 91 a6 23 	lds	r30, 0x23A6	; 0x8023a6 <udd_g_ctrlreq+0xc>
    21aa:	f0 91 a7 23 	lds	r31, 0x23A7	; 0x8023a7 <udd_g_ctrlreq+0xd>
    21ae:	30 97       	sbiw	r30, 0x00	; 0
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <udd_ctrl_endofrequest+0xe>
    21b2:	09 95       	icall
    21b4:	08 95       	ret

000021b6 <udd_ctrl_in_sent>:
    21b6:	0f 93       	push	r16
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    21c0:	83 30       	cpi	r24, 0x03	; 3
    21c2:	19 f4       	brne	.+6      	; 0x21ca <udd_ctrl_in_sent+0x14>
    21c4:	f0 df       	rcall	.-32     	; 0x21a6 <udd_ctrl_endofrequest>
    21c6:	ac df       	rcall	.-168    	; 0x2120 <udd_ctrl_init>
    21c8:	5e c0       	rjmp	.+188    	; 0x2286 <udd_ctrl_in_sent+0xd0>
    21ca:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    21ce:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    21d2:	c0 91 a4 23 	lds	r28, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    21d6:	d0 91 a5 23 	lds	r29, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    21da:	c8 1b       	sub	r28, r24
    21dc:	d9 0b       	sbc	r29, r25
    21de:	71 f5       	brne	.+92     	; 0x223c <udd_ctrl_in_sent+0x86>
    21e0:	20 91 3d 21 	lds	r18, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    21e4:	30 91 3e 21 	lds	r19, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    21e8:	82 0f       	add	r24, r18
    21ea:	93 1f       	adc	r25, r19
    21ec:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    21f0:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    21f4:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    21f8:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    21fc:	82 17       	cp	r24, r18
    21fe:	93 07       	cpc	r25, r19
    2200:	21 f0       	breq	.+8      	; 0x220a <udd_ctrl_in_sent+0x54>
    2202:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <b_shortpacket.5296>
    2206:	88 23       	and	r24, r24
    2208:	41 f0       	breq	.+16     	; 0x221a <udd_ctrl_in_sent+0x64>
    220a:	84 e0       	ldi	r24, 0x04	; 4
    220c:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    2210:	e8 e4       	ldi	r30, 0x48	; 72
    2212:	f1 e2       	ldi	r31, 0x21	; 33
    2214:	02 e0       	ldi	r16, 0x02	; 2
    2216:	06 93       	lac	Z, r16
    2218:	36 c0       	rjmp	.+108    	; 0x2286 <udd_ctrl_in_sent+0xd0>
    221a:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <udd_g_ctrlreq+0xe>
    221e:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <udd_g_ctrlreq+0xf>
    2222:	30 97       	sbiw	r30, 0x00	; 0
    2224:	99 f0       	breq	.+38     	; 0x224c <udd_ctrl_in_sent+0x96>
    2226:	09 95       	icall
    2228:	88 23       	and	r24, r24
    222a:	81 f0       	breq	.+32     	; 0x224c <udd_ctrl_in_sent+0x96>
    222c:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    2230:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2234:	c0 91 a4 23 	lds	r28, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    2238:	d0 91 a5 23 	lds	r29, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    223c:	c0 34       	cpi	r28, 0x40	; 64
    223e:	d1 05       	cpc	r29, r1
    2240:	28 f0       	brcs	.+10     	; 0x224c <udd_ctrl_in_sent+0x96>
    2242:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <b_shortpacket.5296>
    2246:	c0 e4       	ldi	r28, 0x40	; 64
    2248:	d0 e0       	ldi	r29, 0x00	; 0
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <udd_ctrl_in_sent+0x9c>
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <b_shortpacket.5296>
    2252:	e0 e4       	ldi	r30, 0x40	; 64
    2254:	f1 e2       	ldi	r31, 0x21	; 33
    2256:	c2 8b       	std	Z+18, r28	; 0x12
    2258:	d3 8b       	std	Z+19, r29	; 0x13
    225a:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    225e:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2262:	20 91 a2 23 	lds	r18, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    2266:	30 91 a3 23 	lds	r19, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    226a:	28 0f       	add	r18, r24
    226c:	39 1f       	adc	r19, r25
    226e:	24 8b       	std	Z+20, r18	; 0x14
    2270:	35 8b       	std	Z+21, r19	; 0x15
    2272:	c8 0f       	add	r28, r24
    2274:	d9 1f       	adc	r29, r25
    2276:	c0 93 3b 21 	sts	0x213B, r28	; 0x80213b <udd_ctrl_payload_nb_trans>
    227a:	d0 93 3c 21 	sts	0x213C, r29	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    227e:	e0 e5       	ldi	r30, 0x50	; 80
    2280:	f1 e2       	ldi	r31, 0x21	; 33
    2282:	02 e0       	ldi	r16, 0x02	; 2
    2284:	06 93       	lac	Z, r16
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	0f 91       	pop	r16
    228c:	08 95       	ret

0000228e <udd_ep_get_size>:
    228e:	fc 01       	movw	r30, r24
    2290:	81 81       	ldd	r24, Z+1	; 0x01
    2292:	e8 2f       	mov	r30, r24
    2294:	e7 70       	andi	r30, 0x07	; 7
    2296:	8e 2f       	mov	r24, r30
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	fc 01       	movw	r30, r24
    229c:	31 97       	sbiw	r30, 0x01	; 1
    229e:	e7 30       	cpi	r30, 0x07	; 7
    22a0:	f1 05       	cpc	r31, r1
    22a2:	c0 f4       	brcc	.+48     	; 0x22d4 <udd_ep_get_size+0x46>
    22a4:	e1 5e       	subi	r30, 0xE1	; 225
    22a6:	fe 4f       	sbci	r31, 0xFE	; 254
    22a8:	67 c6       	rjmp	.+3278   	; 0x2f78 <__tablejump2__>
    22aa:	80 e1       	ldi	r24, 0x10	; 16
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	08 95       	ret
    22b0:	80 e2       	ldi	r24, 0x20	; 32
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	08 95       	ret
    22b6:	80 e4       	ldi	r24, 0x40	; 64
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	08 95       	ret
    22bc:	80 e8       	ldi	r24, 0x80	; 128
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	08 95       	ret
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	08 95       	ret
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	92 e0       	ldi	r25, 0x02	; 2
    22cc:	08 95       	ret
    22ce:	8f ef       	ldi	r24, 0xFF	; 255
    22d0:	93 e0       	ldi	r25, 0x03	; 3
    22d2:	08 95       	ret
    22d4:	88 e0       	ldi	r24, 0x08	; 8
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	08 95       	ret

000022da <udd_ep_get_job>:
    22da:	28 2f       	mov	r18, r24
    22dc:	2f 70       	andi	r18, 0x0F	; 15
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	22 0f       	add	r18, r18
    22e2:	33 1f       	adc	r19, r19
    22e4:	08 2e       	mov	r0, r24
    22e6:	00 0c       	add	r0, r0
    22e8:	99 0b       	sbc	r25, r25
    22ea:	88 27       	eor	r24, r24
    22ec:	99 0f       	add	r25, r25
    22ee:	88 1f       	adc	r24, r24
    22f0:	99 27       	eor	r25, r25
    22f2:	82 0f       	add	r24, r18
    22f4:	93 1f       	adc	r25, r19
    22f6:	02 97       	sbiw	r24, 0x02	; 2
    22f8:	9c 01       	movw	r18, r24
    22fa:	22 0f       	add	r18, r18
    22fc:	33 1f       	adc	r19, r19
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	82 0f       	add	r24, r18
    2308:	93 1f       	adc	r25, r19
    230a:	87 51       	subi	r24, 0x17	; 23
    230c:	9f 4d       	sbci	r25, 0xDF	; 223
    230e:	08 95       	ret

00002310 <udd_ctrl_interrupt_tc_setup>:
    2310:	0f 93       	push	r16
    2312:	cf 93       	push	r28
    2314:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2318:	80 ff       	sbrs	r24, 0
    231a:	62 c0       	rjmp	.+196    	; 0x23e0 <udd_ctrl_interrupt_tc_setup+0xd0>
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2322:	e8 e4       	ldi	r30, 0x48	; 72
    2324:	f1 e2       	ldi	r31, 0x21	; 33
    2326:	00 e8       	ldi	r16, 0x80	; 128
    2328:	06 93       	lac	Z, r16
    232a:	e0 e5       	ldi	r30, 0x50	; 80
    232c:	f1 e2       	ldi	r31, 0x21	; 33
    232e:	00 e8       	ldi	r16, 0x80	; 128
    2330:	06 93       	lac	Z, r16
    2332:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    2336:	e8 e4       	ldi	r30, 0x48	; 72
    2338:	f1 e2       	ldi	r31, 0x21	; 33
    233a:	00 e1       	ldi	r16, 0x10	; 16
    233c:	06 93       	lac	Z, r16
    233e:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2342:	88 23       	and	r24, r24
    2344:	29 f0       	breq	.+10     	; 0x2350 <udd_ctrl_interrupt_tc_setup+0x40>
    2346:	83 50       	subi	r24, 0x03	; 3
    2348:	82 30       	cpi	r24, 0x02	; 2
    234a:	08 f4       	brcc	.+2      	; 0x234e <udd_ctrl_interrupt_tc_setup+0x3e>
    234c:	2c df       	rcall	.-424    	; 0x21a6 <udd_ctrl_endofrequest>
    234e:	e8 de       	rcall	.-560    	; 0x2120 <udd_ctrl_init>
    2350:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <udd_sram+0xa>
    2354:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <udd_sram+0xb>
    2358:	08 97       	sbiw	r24, 0x08	; 8
    235a:	09 f0       	breq	.+2      	; 0x235e <udd_ctrl_interrupt_tc_setup+0x4e>
    235c:	43 c0       	rjmp	.+134    	; 0x23e4 <udd_ctrl_interrupt_tc_setup+0xd4>
    235e:	88 e0       	ldi	r24, 0x08	; 8
    2360:	eb ef       	ldi	r30, 0xFB	; 251
    2362:	f0 e2       	ldi	r31, 0x20	; 32
    2364:	aa e9       	ldi	r26, 0x9A	; 154
    2366:	b3 e2       	ldi	r27, 0x23	; 35
    2368:	01 90       	ld	r0, Z+
    236a:	0d 92       	st	X+, r0
    236c:	8a 95       	dec	r24
    236e:	e1 f7       	brne	.-8      	; 0x2368 <udd_ctrl_interrupt_tc_setup+0x58>
    2370:	e8 ec       	ldi	r30, 0xC8	; 200
    2372:	f4 e0       	ldi	r31, 0x04	; 4
    2374:	80 81       	ld	r24, Z
    2376:	80 62       	ori	r24, 0x20	; 32
    2378:	80 83       	st	Z, r24
    237a:	80 81       	ld	r24, Z
    237c:	80 62       	ori	r24, 0x20	; 32
    237e:	80 83       	st	Z, r24
    2380:	a1 da       	rcall	.-2750   	; 0x18c4 <udc_process_setup>
    2382:	c8 2f       	mov	r28, r24
    2384:	81 11       	cpse	r24, r1
    2386:	03 c0       	rjmp	.+6      	; 0x238e <udd_ctrl_interrupt_tc_setup+0x7e>
    2388:	f2 de       	rcall	.-540    	; 0x216e <udd_ctrl_stall_data>
    238a:	c1 e0       	ldi	r28, 0x01	; 1
    238c:	2c c0       	rjmp	.+88     	; 0x23e6 <udd_ctrl_interrupt_tc_setup+0xd6>
    238e:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <udd_g_ctrlreq>
    2392:	88 23       	and	r24, r24
    2394:	6c f4       	brge	.+26     	; 0x23b0 <udd_ctrl_interrupt_tc_setup+0xa0>
    2396:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    239a:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    239e:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    23a2:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    23ac:	04 df       	rcall	.-504    	; 0x21b6 <udd_ctrl_in_sent>
    23ae:	1b c0       	rjmp	.+54     	; 0x23e6 <udd_ctrl_interrupt_tc_setup+0xd6>
    23b0:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    23b4:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    23b8:	89 2b       	or	r24, r25
    23ba:	11 f4       	brne	.+4      	; 0x23c0 <udd_ctrl_interrupt_tc_setup+0xb0>
    23bc:	e6 de       	rcall	.-564    	; 0x218a <udd_ctrl_send_zlp_in>
    23be:	13 c0       	rjmp	.+38     	; 0x23e6 <udd_ctrl_interrupt_tc_setup+0xd6>
    23c0:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    23c4:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    23c8:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    23cc:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
    23d6:	e8 e4       	ldi	r30, 0x48	; 72
    23d8:	f1 e2       	ldi	r31, 0x21	; 33
    23da:	02 e0       	ldi	r16, 0x02	; 2
    23dc:	06 93       	lac	Z, r16
    23de:	03 c0       	rjmp	.+6      	; 0x23e6 <udd_ctrl_interrupt_tc_setup+0xd6>
    23e0:	c0 e0       	ldi	r28, 0x00	; 0
    23e2:	01 c0       	rjmp	.+2      	; 0x23e6 <udd_ctrl_interrupt_tc_setup+0xd6>
    23e4:	c1 e0       	ldi	r28, 0x01	; 1
    23e6:	8c 2f       	mov	r24, r28
    23e8:	cf 91       	pop	r28
    23ea:	0f 91       	pop	r16
    23ec:	08 95       	ret

000023ee <udd_ep_trans_complet>:
    23ee:	8f 92       	push	r8
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	df 92       	push	r13
    23f8:	ef 92       	push	r14
    23fa:	ff 92       	push	r15
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	d8 2e       	mov	r13, r24
    2406:	69 df       	rcall	.-302    	; 0x22da <udd_ep_get_job>
    2408:	8c 01       	movw	r16, r24
    240a:	bd 2c       	mov	r11, r13
    240c:	bb 1c       	adc	r11, r11
    240e:	bb 24       	eor	r11, r11
    2410:	bb 1c       	adc	r11, r11
    2412:	cd 2d       	mov	r28, r13
    2414:	cf 70       	andi	r28, 0x0F	; 15
    2416:	d0 e0       	ldi	r29, 0x00	; 0
    2418:	cc 0f       	add	r28, r28
    241a:	dd 1f       	adc	r29, r29
    241c:	cb 0d       	add	r28, r11
    241e:	d1 1d       	adc	r29, r1
    2420:	ce 01       	movw	r24, r28
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	9c 01       	movw	r18, r24
    2430:	28 5b       	subi	r18, 0xB8	; 184
    2432:	3e 4d       	sbci	r19, 0xDE	; 222
    2434:	79 01       	movw	r14, r18
    2436:	c9 01       	movw	r24, r18
    2438:	2a df       	rcall	.-428    	; 0x228e <udd_ep_get_size>
    243a:	4c 01       	movw	r8, r24
    243c:	bb 20       	and	r11, r11
    243e:	09 f4       	brne	.+2      	; 0x2442 <udd_ep_trans_complet+0x54>
    2440:	70 c0       	rjmp	.+224    	; 0x2522 <udd_ep_trans_complet+0x134>
    2442:	fe 01       	movw	r30, r28
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	e0 5c       	subi	r30, 0xC0	; 192
    2452:	fe 4d       	sbci	r31, 0xDE	; 222
    2454:	26 85       	ldd	r18, Z+14	; 0x0e
    2456:	37 85       	ldd	r19, Z+15	; 0x0f
    2458:	d8 01       	movw	r26, r16
    245a:	15 96       	adiw	r26, 0x05	; 5
    245c:	8d 91       	ld	r24, X+
    245e:	9c 91       	ld	r25, X
    2460:	16 97       	sbiw	r26, 0x06	; 6
    2462:	82 0f       	add	r24, r18
    2464:	93 1f       	adc	r25, r19
    2466:	15 96       	adiw	r26, 0x05	; 5
    2468:	8d 93       	st	X+, r24
    246a:	9c 93       	st	X, r25
    246c:	16 97       	sbiw	r26, 0x06	; 6
    246e:	13 96       	adiw	r26, 0x03	; 3
    2470:	2d 91       	ld	r18, X+
    2472:	3c 91       	ld	r19, X
    2474:	14 97       	sbiw	r26, 0x04	; 4
    2476:	82 17       	cp	r24, r18
    2478:	93 07       	cpc	r25, r19
    247a:	09 f4       	brne	.+2      	; 0x247e <udd_ep_trans_complet+0x90>
    247c:	3c c0       	rjmp	.+120    	; 0x24f6 <udd_ep_trans_complet+0x108>
    247e:	28 1b       	sub	r18, r24
    2480:	39 0b       	sbc	r19, r25
    2482:	21 15       	cp	r18, r1
    2484:	b4 e0       	ldi	r27, 0x04	; 4
    2486:	3b 07       	cpc	r19, r27
    2488:	38 f0       	brcs	.+14     	; 0x2498 <udd_ep_trans_complet+0xaa>
    248a:	2f ef       	ldi	r18, 0xFF	; 255
    248c:	33 e0       	ldi	r19, 0x03	; 3
    248e:	c9 01       	movw	r24, r18
    2490:	b4 01       	movw	r22, r8
    2492:	4b d5       	rcall	.+2710   	; 0x2f2a <__udivmodhi4>
    2494:	28 1b       	sub	r18, r24
    2496:	39 0b       	sbc	r19, r25
    2498:	f8 01       	movw	r30, r16
    249a:	80 81       	ld	r24, Z
    249c:	81 ff       	sbrs	r24, 1
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <udd_ep_trans_complet+0xc4>
    24a0:	c9 01       	movw	r24, r18
    24a2:	b4 01       	movw	r22, r8
    24a4:	42 d5       	rcall	.+2692   	; 0x2f2a <__udivmodhi4>
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	89 2b       	or	r24, r25
    24aa:	09 f0       	breq	.+2      	; 0x24ae <udd_ep_trans_complet+0xc0>
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	84 2f       	mov	r24, r20
    24b0:	01 c0       	rjmp	.+2      	; 0x24b4 <udd_ep_trans_complet+0xc6>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	d8 01       	movw	r26, r16
    24b6:	9c 91       	ld	r25, X
    24b8:	80 fb       	bst	r24, 0
    24ba:	91 f9       	bld	r25, 1
    24bc:	9c 93       	st	X, r25
    24be:	cc 0f       	add	r28, r28
    24c0:	dd 1f       	adc	r29, r29
    24c2:	cc 0f       	add	r28, r28
    24c4:	dd 1f       	adc	r29, r29
    24c6:	cc 0f       	add	r28, r28
    24c8:	dd 1f       	adc	r29, r29
    24ca:	c0 5c       	subi	r28, 0xC0	; 192
    24cc:	de 4d       	sbci	r29, 0xDE	; 222
    24ce:	1e 86       	std	Y+14, r1	; 0x0e
    24d0:	1f 86       	std	Y+15, r1	; 0x0f
    24d2:	2a 87       	std	Y+10, r18	; 0x0a
    24d4:	3b 87       	std	Y+11, r19	; 0x0b
    24d6:	11 96       	adiw	r26, 0x01	; 1
    24d8:	2d 91       	ld	r18, X+
    24da:	3c 91       	ld	r19, X
    24dc:	12 97       	sbiw	r26, 0x02	; 2
    24de:	15 96       	adiw	r26, 0x05	; 5
    24e0:	8d 91       	ld	r24, X+
    24e2:	9c 91       	ld	r25, X
    24e4:	16 97       	sbiw	r26, 0x06	; 6
    24e6:	82 0f       	add	r24, r18
    24e8:	93 1f       	adc	r25, r19
    24ea:	8c 87       	std	Y+12, r24	; 0x0c
    24ec:	9d 87       	std	Y+13, r25	; 0x0d
    24ee:	f7 01       	movw	r30, r14
    24f0:	02 e0       	ldi	r16, 0x02	; 2
    24f2:	06 93       	lac	Z, r16
    24f4:	ca c0       	rjmp	.+404    	; 0x268a <udd_ep_trans_complet+0x29c>
    24f6:	d8 01       	movw	r26, r16
    24f8:	8c 91       	ld	r24, X
    24fa:	81 ff       	sbrs	r24, 1
    24fc:	b3 c0       	rjmp	.+358    	; 0x2664 <udd_ep_trans_complet+0x276>
    24fe:	8d 7f       	andi	r24, 0xFD	; 253
    2500:	8c 93       	st	X, r24
    2502:	cc 0f       	add	r28, r28
    2504:	dd 1f       	adc	r29, r29
    2506:	cc 0f       	add	r28, r28
    2508:	dd 1f       	adc	r29, r29
    250a:	cc 0f       	add	r28, r28
    250c:	dd 1f       	adc	r29, r29
    250e:	c0 5c       	subi	r28, 0xC0	; 192
    2510:	de 4d       	sbci	r29, 0xDE	; 222
    2512:	1e 86       	std	Y+14, r1	; 0x0e
    2514:	1f 86       	std	Y+15, r1	; 0x0f
    2516:	1a 86       	std	Y+10, r1	; 0x0a
    2518:	1b 86       	std	Y+11, r1	; 0x0b
    251a:	f7 01       	movw	r30, r14
    251c:	02 e0       	ldi	r16, 0x02	; 2
    251e:	06 93       	lac	Z, r16
    2520:	b4 c0       	rjmp	.+360    	; 0x268a <udd_ep_trans_complet+0x29c>
    2522:	fe 01       	movw	r30, r28
    2524:	ee 0f       	add	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	e0 5c       	subi	r30, 0xC0	; 192
    2532:	fe 4d       	sbci	r31, 0xDE	; 222
    2534:	a2 84       	ldd	r10, Z+10	; 0x0a
    2536:	b3 84       	ldd	r11, Z+11	; 0x0b
    2538:	d8 01       	movw	r26, r16
    253a:	8c 91       	ld	r24, X
    253c:	82 ff       	sbrs	r24, 2
    253e:	19 c0       	rjmp	.+50     	; 0x2572 <udd_ep_trans_complet+0x184>
    2540:	11 96       	adiw	r26, 0x01	; 1
    2542:	ed 91       	ld	r30, X+
    2544:	fc 91       	ld	r31, X
    2546:	12 97       	sbiw	r26, 0x02	; 2
    2548:	15 96       	adiw	r26, 0x05	; 5
    254a:	2d 91       	ld	r18, X+
    254c:	3c 91       	ld	r19, X
    254e:	16 97       	sbiw	r26, 0x06	; 6
    2550:	13 96       	adiw	r26, 0x03	; 3
    2552:	8d 91       	ld	r24, X+
    2554:	9c 91       	ld	r25, X
    2556:	14 97       	sbiw	r26, 0x04	; 4
    2558:	b4 01       	movw	r22, r8
    255a:	e7 d4       	rcall	.+2510   	; 0x2f2a <__udivmodhi4>
    255c:	b0 e4       	ldi	r27, 0x40	; 64
    255e:	db 9e       	mul	r13, r27
    2560:	b0 01       	movw	r22, r0
    2562:	11 24       	eor	r1, r1
    2564:	67 59       	subi	r22, 0x97	; 151
    2566:	7f 4d       	sbci	r23, 0xDF	; 223
    2568:	ac 01       	movw	r20, r24
    256a:	cf 01       	movw	r24, r30
    256c:	82 0f       	add	r24, r18
    256e:	93 1f       	adc	r25, r19
    2570:	09 d5       	rcall	.+2578   	; 0x2f84 <memcpy>
    2572:	f8 01       	movw	r30, r16
    2574:	25 81       	ldd	r18, Z+5	; 0x05
    2576:	36 81       	ldd	r19, Z+6	; 0x06
    2578:	2a 0d       	add	r18, r10
    257a:	3b 1d       	adc	r19, r11
    257c:	25 83       	std	Z+5, r18	; 0x05
    257e:	36 83       	std	Z+6, r19	; 0x06
    2580:	83 81       	ldd	r24, Z+3	; 0x03
    2582:	94 81       	ldd	r25, Z+4	; 0x04
    2584:	82 17       	cp	r24, r18
    2586:	93 07       	cpc	r25, r19
    2588:	68 f4       	brcc	.+26     	; 0x25a4 <udd_ep_trans_complet+0x1b6>
    258a:	85 83       	std	Z+5, r24	; 0x05
    258c:	96 83       	std	Z+6, r25	; 0x06
    258e:	cc 0f       	add	r28, r28
    2590:	dd 1f       	adc	r29, r29
    2592:	cc 0f       	add	r28, r28
    2594:	dd 1f       	adc	r29, r29
    2596:	cc 0f       	add	r28, r28
    2598:	dd 1f       	adc	r29, r29
    259a:	c0 5c       	subi	r28, 0xC0	; 192
    259c:	de 4d       	sbci	r29, 0xDE	; 222
    259e:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a2:	60 c0       	rjmp	.+192    	; 0x2664 <udd_ep_trans_complet+0x276>
    25a4:	fe 01       	movw	r30, r28
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	e0 5c       	subi	r30, 0xC0	; 192
    25b4:	fe 4d       	sbci	r31, 0xDE	; 222
    25b6:	46 85       	ldd	r20, Z+14	; 0x0e
    25b8:	57 85       	ldd	r21, Z+15	; 0x0f
    25ba:	4a 15       	cp	r20, r10
    25bc:	5b 05       	cpc	r21, r11
    25be:	09 f0       	breq	.+2      	; 0x25c2 <udd_ep_trans_complet+0x1d4>
    25c0:	51 c0       	rjmp	.+162    	; 0x2664 <udd_ep_trans_complet+0x276>
    25c2:	28 17       	cp	r18, r24
    25c4:	39 07       	cpc	r19, r25
    25c6:	09 f4       	brne	.+2      	; 0x25ca <udd_ep_trans_complet+0x1dc>
    25c8:	4d c0       	rjmp	.+154    	; 0x2664 <udd_ep_trans_complet+0x276>
    25ca:	ac 01       	movw	r20, r24
    25cc:	42 1b       	sub	r20, r18
    25ce:	53 0b       	sbc	r21, r19
    25d0:	9a 01       	movw	r18, r20
    25d2:	21 15       	cp	r18, r1
    25d4:	54 e0       	ldi	r21, 0x04	; 4
    25d6:	35 07       	cpc	r19, r21
    25d8:	50 f0       	brcs	.+20     	; 0x25ee <udd_ep_trans_complet+0x200>
    25da:	2f ef       	ldi	r18, 0xFF	; 255
    25dc:	33 e0       	ldi	r19, 0x03	; 3
    25de:	c9 01       	movw	r24, r18
    25e0:	b4 01       	movw	r22, r8
    25e2:	a3 d4       	rcall	.+2374   	; 0x2f2a <__udivmodhi4>
    25e4:	d9 01       	movw	r26, r18
    25e6:	a8 1b       	sub	r26, r24
    25e8:	b9 0b       	sbc	r27, r25
    25ea:	cd 01       	movw	r24, r26
    25ec:	07 c0       	rjmp	.+14     	; 0x25fc <udd_ep_trans_complet+0x20e>
    25ee:	c9 01       	movw	r24, r18
    25f0:	b4 01       	movw	r22, r8
    25f2:	9b d4       	rcall	.+2358   	; 0x2f2a <__udivmodhi4>
    25f4:	f9 01       	movw	r30, r18
    25f6:	e8 1b       	sub	r30, r24
    25f8:	f9 0b       	sbc	r31, r25
    25fa:	cf 01       	movw	r24, r30
    25fc:	fe 01       	movw	r30, r28
    25fe:	ee 0f       	add	r30, r30
    2600:	ff 1f       	adc	r31, r31
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	e0 5c       	subi	r30, 0xC0	; 192
    260c:	fe 4d       	sbci	r31, 0xDE	; 222
    260e:	12 86       	std	Z+10, r1	; 0x0a
    2610:	13 86       	std	Z+11, r1	; 0x0b
    2612:	88 15       	cp	r24, r8
    2614:	99 05       	cpc	r25, r9
    2616:	78 f4       	brcc	.+30     	; 0x2636 <udd_ep_trans_complet+0x248>
    2618:	d8 01       	movw	r26, r16
    261a:	8c 91       	ld	r24, X
    261c:	84 60       	ori	r24, 0x04	; 4
    261e:	8c 93       	st	X, r24
    2620:	b0 e4       	ldi	r27, 0x40	; 64
    2622:	db 9e       	mul	r13, r27
    2624:	c0 01       	movw	r24, r0
    2626:	11 24       	eor	r1, r1
    2628:	87 59       	subi	r24, 0x97	; 151
    262a:	9f 4d       	sbci	r25, 0xDF	; 223
    262c:	84 87       	std	Z+12, r24	; 0x0c
    262e:	95 87       	std	Z+13, r25	; 0x0d
    2630:	86 86       	std	Z+14, r8	; 0x0e
    2632:	97 86       	std	Z+15, r9	; 0x0f
    2634:	13 c0       	rjmp	.+38     	; 0x265c <udd_ep_trans_complet+0x26e>
    2636:	f8 01       	movw	r30, r16
    2638:	41 81       	ldd	r20, Z+1	; 0x01
    263a:	52 81       	ldd	r21, Z+2	; 0x02
    263c:	25 81       	ldd	r18, Z+5	; 0x05
    263e:	36 81       	ldd	r19, Z+6	; 0x06
    2640:	24 0f       	add	r18, r20
    2642:	35 1f       	adc	r19, r21
    2644:	cc 0f       	add	r28, r28
    2646:	dd 1f       	adc	r29, r29
    2648:	cc 0f       	add	r28, r28
    264a:	dd 1f       	adc	r29, r29
    264c:	cc 0f       	add	r28, r28
    264e:	dd 1f       	adc	r29, r29
    2650:	c0 5c       	subi	r28, 0xC0	; 192
    2652:	de 4d       	sbci	r29, 0xDE	; 222
    2654:	2c 87       	std	Y+12, r18	; 0x0c
    2656:	3d 87       	std	Y+13, r19	; 0x0d
    2658:	8e 87       	std	Y+14, r24	; 0x0e
    265a:	9f 87       	std	Y+15, r25	; 0x0f
    265c:	f7 01       	movw	r30, r14
    265e:	02 e0       	ldi	r16, 0x02	; 2
    2660:	06 93       	lac	Z, r16
    2662:	13 c0       	rjmp	.+38     	; 0x268a <udd_ep_trans_complet+0x29c>
    2664:	d8 01       	movw	r26, r16
    2666:	8c 91       	ld	r24, X
    2668:	80 ff       	sbrs	r24, 0
    266a:	0f c0       	rjmp	.+30     	; 0x268a <udd_ep_trans_complet+0x29c>
    266c:	8e 7f       	andi	r24, 0xFE	; 254
    266e:	8c 93       	st	X, r24
    2670:	17 96       	adiw	r26, 0x07	; 7
    2672:	ed 91       	ld	r30, X+
    2674:	fc 91       	ld	r31, X
    2676:	18 97       	sbiw	r26, 0x08	; 8
    2678:	30 97       	sbiw	r30, 0x00	; 0
    267a:	39 f0       	breq	.+14     	; 0x268a <udd_ep_trans_complet+0x29c>
    267c:	15 96       	adiw	r26, 0x05	; 5
    267e:	6d 91       	ld	r22, X+
    2680:	7c 91       	ld	r23, X
    2682:	16 97       	sbiw	r26, 0x06	; 6
    2684:	4d 2d       	mov	r20, r13
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	09 95       	icall
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	df 90       	pop	r13
    2698:	bf 90       	pop	r11
    269a:	af 90       	pop	r10
    269c:	9f 90       	pop	r9
    269e:	8f 90       	pop	r8
    26a0:	08 95       	ret

000026a2 <udd_attach>:
    26a2:	cf 93       	push	r28
    26a4:	cf b7       	in	r28, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	11 dd       	rcall	.-1502   	; 0x20ce <udd_sleep_mode>
    26ac:	ea ec       	ldi	r30, 0xCA	; 202
    26ae:	f4 e0       	ldi	r31, 0x04	; 4
    26b0:	80 e4       	ldi	r24, 0x40	; 64
    26b2:	80 83       	st	Z, r24
    26b4:	80 e2       	ldi	r24, 0x20	; 32
    26b6:	80 83       	st	Z, r24
    26b8:	e1 ec       	ldi	r30, 0xC1	; 193
    26ba:	f4 e0       	ldi	r31, 0x04	; 4
    26bc:	80 81       	ld	r24, Z
    26be:	81 60       	ori	r24, 0x01	; 1
    26c0:	80 83       	st	Z, r24
    26c2:	a9 ec       	ldi	r26, 0xC9	; 201
    26c4:	b4 e0       	ldi	r27, 0x04	; 4
    26c6:	8c 91       	ld	r24, X
    26c8:	82 60       	ori	r24, 0x02	; 2
    26ca:	8c 93       	st	X, r24
    26cc:	e8 ec       	ldi	r30, 0xC8	; 200
    26ce:	f4 e0       	ldi	r31, 0x04	; 4
    26d0:	80 81       	ld	r24, Z
    26d2:	80 64       	ori	r24, 0x40	; 64
    26d4:	80 83       	st	Z, r24
    26d6:	8c 91       	ld	r24, X
    26d8:	81 60       	ori	r24, 0x01	; 1
    26da:	8c 93       	st	X, r24
    26dc:	80 81       	ld	r24, Z
    26de:	80 68       	ori	r24, 0x80	; 128
    26e0:	80 83       	st	Z, r24
    26e2:	cf bf       	out	0x3f, r28	; 63
    26e4:	cf 91       	pop	r28
    26e6:	08 95       	ret

000026e8 <udd_enable>:
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	c0 e6       	ldi	r28, 0x60	; 96
    26ee:	d0 e0       	ldi	r29, 0x00	; 0
    26f0:	18 82       	st	Y, r1
    26f2:	80 e3       	ldi	r24, 0x30	; 48
    26f4:	0e 94 af 0a 	call	0x155e	; 0x155e <sysclk_enable_usb>
    26f8:	e0 ec       	ldi	r30, 0xC0	; 192
    26fa:	f4 e0       	ldi	r31, 0x04	; 4
    26fc:	80 81       	ld	r24, Z
    26fe:	80 64       	ori	r24, 0x40	; 64
    2700:	80 83       	st	Z, r24
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	88 83       	st	Y, r24
    2706:	cf b7       	in	r28, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	e0 e4       	ldi	r30, 0x40	; 64
    270c:	f1 e2       	ldi	r31, 0x21	; 33
    270e:	11 86       	std	Z+9, r1	; 0x09
    2710:	11 8a       	std	Z+17, r1	; 0x11
    2712:	11 8e       	std	Z+25, r1	; 0x19
    2714:	11 a2       	std	Z+33, r1	; 0x21
    2716:	e9 ee       	ldi	r30, 0xE9	; 233
    2718:	f0 e2       	ldi	r31, 0x20	; 32
    271a:	80 81       	ld	r24, Z
    271c:	8e 7f       	andi	r24, 0xFE	; 254
    271e:	80 83       	st	Z, r24
    2720:	e2 ef       	ldi	r30, 0xF2	; 242
    2722:	f0 e2       	ldi	r31, 0x20	; 32
    2724:	80 81       	ld	r24, Z
    2726:	8e 7f       	andi	r24, 0xFE	; 254
    2728:	80 83       	st	Z, r24
    272a:	6a e1       	ldi	r22, 0x1A	; 26
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	c4 dc       	rcall	.-1656   	; 0x20ba <nvm_read_byte>
    2732:	8f 3f       	cpi	r24, 0xFF	; 255
    2734:	19 f0       	breq	.+6      	; 0x273c <udd_enable+0x54>
    2736:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <udd_enable+0x5a>
    273c:	8f e1       	ldi	r24, 0x1F	; 31
    273e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2742:	6b e1       	ldi	r22, 0x1B	; 27
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	b8 dc       	rcall	.-1680   	; 0x20ba <nvm_read_byte>
    274a:	8f 3f       	cpi	r24, 0xFF	; 255
    274c:	19 f0       	breq	.+6      	; 0x2754 <udd_enable+0x6c>
    274e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2752:	03 c0       	rjmp	.+6      	; 0x275a <udd_enable+0x72>
    2754:	8f e1       	ldi	r24, 0x1F	; 31
    2756:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    275a:	e0 ec       	ldi	r30, 0xC0	; 192
    275c:	f4 e0       	ldi	r31, 0x04	; 4
    275e:	80 81       	ld	r24, Z
    2760:	81 60       	ori	r24, 0x01	; 1
    2762:	80 83       	st	Z, r24
    2764:	80 81       	ld	r24, Z
    2766:	80 68       	ori	r24, 0x80	; 128
    2768:	80 83       	st	Z, r24
    276a:	80 81       	ld	r24, Z
    276c:	80 61       	ori	r24, 0x10	; 16
    276e:	80 83       	st	Z, r24
    2770:	88 e4       	ldi	r24, 0x48	; 72
    2772:	91 e2       	ldi	r25, 0x21	; 33
    2774:	86 83       	std	Z+6, r24	; 0x06
    2776:	97 83       	std	Z+7, r25	; 0x07
    2778:	80 81       	ld	r24, Z
    277a:	80 62       	ori	r24, 0x20	; 32
    277c:	80 83       	st	Z, r24
    277e:	8f ef       	ldi	r24, 0xFF	; 255
    2780:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2784:	e8 ec       	ldi	r30, 0xC8	; 200
    2786:	f4 e0       	ldi	r31, 0x04	; 4
    2788:	80 81       	ld	r24, Z
    278a:	82 60       	ori	r24, 0x02	; 2
    278c:	80 83       	st	Z, r24
    278e:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <udd_b_idle>
    2792:	80 91 cf 2b 	lds	r24, 0x2BCF	; 0x802bcf <sleepmgr_locks+0x5>
    2796:	8f 3f       	cpi	r24, 0xFF	; 255
    2798:	09 f4       	brne	.+2      	; 0x279c <udd_enable+0xb4>
    279a:	ff cf       	rjmp	.-2      	; 0x279a <udd_enable+0xb2>
    279c:	9f b7       	in	r25, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	ea ec       	ldi	r30, 0xCA	; 202
    27a2:	fb e2       	ldi	r31, 0x2B	; 43
    27a4:	85 81       	ldd	r24, Z+5	; 0x05
    27a6:	8f 5f       	subi	r24, 0xFF	; 255
    27a8:	85 83       	std	Z+5, r24	; 0x05
    27aa:	9f bf       	out	0x3f, r25	; 63
    27ac:	7a df       	rcall	.-268    	; 0x26a2 <udd_attach>
    27ae:	cf bf       	out	0x3f, r28	; 63
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	08 95       	ret

000027b6 <udd_set_address>:
    27b6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    27ba:	08 95       	ret

000027bc <udd_getaddress>:
    27bc:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    27c0:	08 95       	ret

000027c2 <udd_set_setup_payload>:
    27c2:	ea e9       	ldi	r30, 0x9A	; 154
    27c4:	f3 e2       	ldi	r31, 0x23	; 35
    27c6:	80 87       	std	Z+8, r24	; 0x08
    27c8:	91 87       	std	Z+9, r25	; 0x09
    27ca:	62 87       	std	Z+10, r22	; 0x0a
    27cc:	73 87       	std	Z+11, r23	; 0x0b
    27ce:	08 95       	ret

000027d0 <udd_ep_alloc>:
    27d0:	28 2f       	mov	r18, r24
    27d2:	2f 70       	andi	r18, 0x0F	; 15
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	22 0f       	add	r18, r18
    27d8:	33 1f       	adc	r19, r19
    27da:	08 2e       	mov	r0, r24
    27dc:	00 0c       	add	r0, r0
    27de:	99 0b       	sbc	r25, r25
    27e0:	88 27       	eor	r24, r24
    27e2:	99 0f       	add	r25, r25
    27e4:	88 1f       	adc	r24, r24
    27e6:	99 27       	eor	r25, r25
    27e8:	82 0f       	add	r24, r18
    27ea:	93 1f       	adc	r25, r19
    27ec:	fc 01       	movw	r30, r24
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	e0 5c       	subi	r30, 0xC0	; 192
    27fc:	fe 4d       	sbci	r31, 0xDE	; 222
    27fe:	21 85       	ldd	r18, Z+9	; 0x09
    2800:	20 7c       	andi	r18, 0xC0	; 192
    2802:	09 f0       	breq	.+2      	; 0x2806 <udd_ep_alloc+0x36>
    2804:	58 c0       	rjmp	.+176    	; 0x28b6 <udd_ep_alloc+0xe6>
    2806:	63 70       	andi	r22, 0x03	; 3
    2808:	61 30       	cpi	r22, 0x01	; 1
    280a:	11 f0       	breq	.+4      	; 0x2810 <udd_ep_alloc+0x40>
    280c:	18 f4       	brcc	.+6      	; 0x2814 <udd_ep_alloc+0x44>
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <udd_ep_alloc+0x48>
    2810:	20 ec       	ldi	r18, 0xC0	; 192
    2812:	03 c0       	rjmp	.+6      	; 0x281a <udd_ep_alloc+0x4a>
    2814:	20 e8       	ldi	r18, 0x80	; 128
    2816:	01 c0       	rjmp	.+2      	; 0x281a <udd_ep_alloc+0x4a>
    2818:	20 e4       	ldi	r18, 0x40	; 64
    281a:	40 38       	cpi	r20, 0x80	; 128
    281c:	51 05       	cpc	r21, r1
    281e:	e9 f0       	breq	.+58     	; 0x285a <udd_ep_alloc+0x8a>
    2820:	50 f4       	brcc	.+20     	; 0x2836 <udd_ep_alloc+0x66>
    2822:	40 32       	cpi	r20, 0x20	; 32
    2824:	51 05       	cpc	r21, r1
    2826:	a9 f0       	breq	.+42     	; 0x2852 <udd_ep_alloc+0x82>
    2828:	40 34       	cpi	r20, 0x40	; 64
    282a:	51 05       	cpc	r21, r1
    282c:	a1 f0       	breq	.+40     	; 0x2856 <udd_ep_alloc+0x86>
    282e:	40 31       	cpi	r20, 0x10	; 16
    2830:	51 05       	cpc	r21, r1
    2832:	d9 f4       	brne	.+54     	; 0x286a <udd_ep_alloc+0x9a>
    2834:	0c c0       	rjmp	.+24     	; 0x284e <udd_ep_alloc+0x7e>
    2836:	41 15       	cp	r20, r1
    2838:	32 e0       	ldi	r19, 0x02	; 2
    283a:	53 07       	cpc	r21, r19
    283c:	91 f0       	breq	.+36     	; 0x2862 <udd_ep_alloc+0x92>
    283e:	4f 3f       	cpi	r20, 0xFF	; 255
    2840:	33 e0       	ldi	r19, 0x03	; 3
    2842:	53 07       	cpc	r21, r19
    2844:	81 f0       	breq	.+32     	; 0x2866 <udd_ep_alloc+0x96>
    2846:	41 15       	cp	r20, r1
    2848:	51 40       	sbci	r21, 0x01	; 1
    284a:	79 f4       	brne	.+30     	; 0x286a <udd_ep_alloc+0x9a>
    284c:	08 c0       	rjmp	.+16     	; 0x285e <udd_ep_alloc+0x8e>
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0d c0       	rjmp	.+26     	; 0x286c <udd_ep_alloc+0x9c>
    2852:	42 e0       	ldi	r20, 0x02	; 2
    2854:	0b c0       	rjmp	.+22     	; 0x286c <udd_ep_alloc+0x9c>
    2856:	43 e0       	ldi	r20, 0x03	; 3
    2858:	09 c0       	rjmp	.+18     	; 0x286c <udd_ep_alloc+0x9c>
    285a:	44 e0       	ldi	r20, 0x04	; 4
    285c:	07 c0       	rjmp	.+14     	; 0x286c <udd_ep_alloc+0x9c>
    285e:	45 e0       	ldi	r20, 0x05	; 5
    2860:	05 c0       	rjmp	.+10     	; 0x286c <udd_ep_alloc+0x9c>
    2862:	46 e0       	ldi	r20, 0x06	; 6
    2864:	03 c0       	rjmp	.+6      	; 0x286c <udd_ep_alloc+0x9c>
    2866:	47 e0       	ldi	r20, 0x07	; 7
    2868:	01 c0       	rjmp	.+2      	; 0x286c <udd_ep_alloc+0x9c>
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	fc 01       	movw	r30, r24
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	e0 5c       	subi	r30, 0xC0	; 192
    287c:	fe 4d       	sbci	r31, 0xDE	; 222
    287e:	11 86       	std	Z+9, r1	; 0x09
    2880:	dc 01       	movw	r26, r24
    2882:	aa 0f       	add	r26, r26
    2884:	bb 1f       	adc	r27, r27
    2886:	aa 0f       	add	r26, r26
    2888:	bb 1f       	adc	r27, r27
    288a:	aa 0f       	add	r26, r26
    288c:	bb 1f       	adc	r27, r27
    288e:	a8 5b       	subi	r26, 0xB8	; 184
    2890:	be 4d       	sbci	r27, 0xDE	; 222
    2892:	36 e0       	ldi	r19, 0x06	; 6
    2894:	3c 93       	st	X, r19
    2896:	24 2b       	or	r18, r20
    2898:	21 87       	std	Z+9, r18	; 0x09
    289a:	88 0f       	add	r24, r24
    289c:	99 1f       	adc	r25, r25
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	fc 01       	movw	r30, r24
    28a8:	e0 5c       	subi	r30, 0xC0	; 192
    28aa:	fe 4d       	sbci	r31, 0xDE	; 222
    28ac:	81 85       	ldd	r24, Z+9	; 0x09
    28ae:	80 62       	ori	r24, 0x20	; 32
    28b0:	81 87       	std	Z+9, r24	; 0x09
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	08 95       	ret
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	08 95       	ret

000028ba <udd_ep_is_halted>:
    28ba:	e8 2f       	mov	r30, r24
    28bc:	ef 70       	andi	r30, 0x0F	; 15
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	ee 0f       	add	r30, r30
    28c2:	ff 1f       	adc	r31, r31
    28c4:	08 2e       	mov	r0, r24
    28c6:	00 0c       	add	r0, r0
    28c8:	99 0b       	sbc	r25, r25
    28ca:	88 27       	eor	r24, r24
    28cc:	99 0f       	add	r25, r25
    28ce:	88 1f       	adc	r24, r24
    28d0:	99 27       	eor	r25, r25
    28d2:	e8 0f       	add	r30, r24
    28d4:	f9 1f       	adc	r31, r25
    28d6:	ee 0f       	add	r30, r30
    28d8:	ff 1f       	adc	r31, r31
    28da:	ee 0f       	add	r30, r30
    28dc:	ff 1f       	adc	r31, r31
    28de:	ee 0f       	add	r30, r30
    28e0:	ff 1f       	adc	r31, r31
    28e2:	e0 5c       	subi	r30, 0xC0	; 192
    28e4:	fe 4d       	sbci	r31, 0xDE	; 222
    28e6:	81 85       	ldd	r24, Z+9	; 0x09
    28e8:	82 fb       	bst	r24, 2
    28ea:	88 27       	eor	r24, r24
    28ec:	80 f9       	bld	r24, 0
    28ee:	08 95       	ret

000028f0 <udd_ep_clear_halt>:
    28f0:	28 2f       	mov	r18, r24
    28f2:	2f 70       	andi	r18, 0x0F	; 15
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	a9 01       	movw	r20, r18
    28f8:	44 0f       	add	r20, r20
    28fa:	55 1f       	adc	r21, r21
    28fc:	28 2f       	mov	r18, r24
    28fe:	08 2e       	mov	r0, r24
    2900:	00 0c       	add	r0, r0
    2902:	33 0b       	sbc	r19, r19
    2904:	22 27       	eor	r18, r18
    2906:	33 0f       	add	r19, r19
    2908:	22 1f       	adc	r18, r18
    290a:	33 27       	eor	r19, r19
    290c:	24 0f       	add	r18, r20
    290e:	35 1f       	adc	r19, r21
    2910:	f9 01       	movw	r30, r18
    2912:	ee 0f       	add	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	ee 0f       	add	r30, r30
    2918:	ff 1f       	adc	r31, r31
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	e0 5c       	subi	r30, 0xC0	; 192
    2920:	fe 4d       	sbci	r31, 0xDE	; 222
    2922:	91 85       	ldd	r25, Z+9	; 0x09
    2924:	92 ff       	sbrs	r25, 2
    2926:	17 c0       	rjmp	.+46     	; 0x2956 <udd_ep_clear_halt+0x66>
    2928:	22 0f       	add	r18, r18
    292a:	33 1f       	adc	r19, r19
    292c:	22 0f       	add	r18, r18
    292e:	33 1f       	adc	r19, r19
    2930:	22 0f       	add	r18, r18
    2932:	33 1f       	adc	r19, r19
    2934:	f9 01       	movw	r30, r18
    2936:	e0 5c       	subi	r30, 0xC0	; 192
    2938:	fe 4d       	sbci	r31, 0xDE	; 222
    293a:	91 85       	ldd	r25, Z+9	; 0x09
    293c:	9b 7f       	andi	r25, 0xFB	; 251
    293e:	91 87       	std	Z+9, r25	; 0x09
    2940:	cc dc       	rcall	.-1640   	; 0x22da <udd_ep_get_job>
    2942:	fc 01       	movw	r30, r24
    2944:	80 81       	ld	r24, Z
    2946:	80 ff       	sbrs	r24, 0
    2948:	06 c0       	rjmp	.+12     	; 0x2956 <udd_ep_clear_halt+0x66>
    294a:	8e 7f       	andi	r24, 0xFE	; 254
    294c:	80 83       	st	Z, r24
    294e:	07 80       	ldd	r0, Z+7	; 0x07
    2950:	f0 85       	ldd	r31, Z+8	; 0x08
    2952:	e0 2d       	mov	r30, r0
    2954:	09 95       	icall
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	08 95       	ret

0000295a <udd_ep_run>:
    295a:	7f 92       	push	r7
    295c:	8f 92       	push	r8
    295e:	9f 92       	push	r9
    2960:	af 92       	push	r10
    2962:	bf 92       	push	r11
    2964:	cf 92       	push	r12
    2966:	df 92       	push	r13
    2968:	ef 92       	push	r14
    296a:	ff 92       	push	r15
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	98 2e       	mov	r9, r24
    2976:	86 2e       	mov	r8, r22
    2978:	6a 01       	movw	r12, r20
    297a:	79 01       	movw	r14, r18
    297c:	ae dc       	rcall	.-1700   	; 0x22da <udd_ep_get_job>
    297e:	5c 01       	movw	r10, r24
    2980:	79 2c       	mov	r7, r9
    2982:	77 1c       	adc	r7, r7
    2984:	77 24       	eor	r7, r7
    2986:	77 1c       	adc	r7, r7
    2988:	c9 2d       	mov	r28, r9
    298a:	cf 70       	andi	r28, 0x0F	; 15
    298c:	d0 e0       	ldi	r29, 0x00	; 0
    298e:	cc 0f       	add	r28, r28
    2990:	dd 1f       	adc	r29, r29
    2992:	c7 0d       	add	r28, r7
    2994:	d1 1d       	adc	r29, r1
    2996:	fe 01       	movw	r30, r28
    2998:	ee 0f       	add	r30, r30
    299a:	ff 1f       	adc	r31, r31
    299c:	ee 0f       	add	r30, r30
    299e:	ff 1f       	adc	r31, r31
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	e0 5c       	subi	r30, 0xC0	; 192
    29a6:	fe 4d       	sbci	r31, 0xDE	; 222
    29a8:	81 85       	ldd	r24, Z+9	; 0x09
    29aa:	80 7c       	andi	r24, 0xC0	; 192
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <udd_ep_run+0x56>
    29ae:	7d c0       	rjmp	.+250    	; 0x2aaa <udd_ep_run+0x150>
    29b0:	fe 01       	movw	r30, r28
    29b2:	ee 0f       	add	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	ee 0f       	add	r30, r30
    29b8:	ff 1f       	adc	r31, r31
    29ba:	ee 0f       	add	r30, r30
    29bc:	ff 1f       	adc	r31, r31
    29be:	e0 5c       	subi	r30, 0xC0	; 192
    29c0:	fe 4d       	sbci	r31, 0xDE	; 222
    29c2:	81 85       	ldd	r24, Z+9	; 0x09
    29c4:	80 7c       	andi	r24, 0xC0	; 192
    29c6:	80 3c       	cpi	r24, 0xC0	; 192
    29c8:	61 f0       	breq	.+24     	; 0x29e2 <udd_ep_run+0x88>
    29ca:	fe 01       	movw	r30, r28
    29cc:	ee 0f       	add	r30, r30
    29ce:	ff 1f       	adc	r31, r31
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	e0 5c       	subi	r30, 0xC0	; 192
    29da:	fe 4d       	sbci	r31, 0xDE	; 222
    29dc:	81 85       	ldd	r24, Z+9	; 0x09
    29de:	82 fd       	sbrc	r24, 2
    29e0:	66 c0       	rjmp	.+204    	; 0x2aae <udd_ep_run+0x154>
    29e2:	8f b7       	in	r24, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	f5 01       	movw	r30, r10
    29e8:	90 81       	ld	r25, Z
    29ea:	90 ff       	sbrs	r25, 0
    29ec:	03 c0       	rjmp	.+6      	; 0x29f4 <udd_ep_run+0x9a>
    29ee:	8f bf       	out	0x3f, r24	; 63
    29f0:	71 2c       	mov	r7, r1
    29f2:	5e c0       	rjmp	.+188    	; 0x2ab0 <udd_ep_run+0x156>
    29f4:	f5 01       	movw	r30, r10
    29f6:	90 81       	ld	r25, Z
    29f8:	91 60       	ori	r25, 0x01	; 1
    29fa:	90 83       	st	Z, r25
    29fc:	8f bf       	out	0x3f, r24	; 63
    29fe:	c1 82       	std	Z+1, r12	; 0x01
    2a00:	d2 82       	std	Z+2, r13	; 0x02
    2a02:	e3 82       	std	Z+3, r14	; 0x03
    2a04:	f4 82       	std	Z+4, r15	; 0x04
    2a06:	15 82       	std	Z+5, r1	; 0x05
    2a08:	16 82       	std	Z+6, r1	; 0x06
    2a0a:	07 83       	std	Z+7, r16	; 0x07
    2a0c:	10 87       	std	Z+8, r17	; 0x08
    2a0e:	81 10       	cpse	r8, r1
    2a10:	06 c0       	rjmp	.+12     	; 0x2a1e <udd_ep_run+0xc4>
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	e1 14       	cp	r14, r1
    2a16:	f1 04       	cpc	r15, r1
    2a18:	19 f0       	breq	.+6      	; 0x2a20 <udd_ep_run+0xc6>
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <udd_ep_run+0xc6>
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	f5 01       	movw	r30, r10
    2a22:	80 81       	ld	r24, Z
    2a24:	90 fb       	bst	r25, 0
    2a26:	81 f9       	bld	r24, 1
    2a28:	8b 7f       	andi	r24, 0xFB	; 251
    2a2a:	80 83       	st	Z, r24
    2a2c:	77 20       	and	r7, r7
    2a2e:	59 f0       	breq	.+22     	; 0x2a46 <udd_ep_run+0xec>
    2a30:	cc 0f       	add	r28, r28
    2a32:	dd 1f       	adc	r29, r29
    2a34:	cc 0f       	add	r28, r28
    2a36:	dd 1f       	adc	r29, r29
    2a38:	cc 0f       	add	r28, r28
    2a3a:	dd 1f       	adc	r29, r29
    2a3c:	c0 5c       	subi	r28, 0xC0	; 192
    2a3e:	de 4d       	sbci	r29, 0xDE	; 222
    2a40:	1e 86       	std	Y+14, r1	; 0x0e
    2a42:	1f 86       	std	Y+15, r1	; 0x0f
    2a44:	2d c0       	rjmp	.+90     	; 0x2aa0 <udd_ep_run+0x146>
    2a46:	fe 01       	movw	r30, r28
    2a48:	ee 0f       	add	r30, r30
    2a4a:	ff 1f       	adc	r31, r31
    2a4c:	ee 0f       	add	r30, r30
    2a4e:	ff 1f       	adc	r31, r31
    2a50:	ee 0f       	add	r30, r30
    2a52:	ff 1f       	adc	r31, r31
    2a54:	e0 5c       	subi	r30, 0xC0	; 192
    2a56:	fe 4d       	sbci	r31, 0xDE	; 222
    2a58:	81 85       	ldd	r24, Z+9	; 0x09
    2a5a:	80 7c       	andi	r24, 0xC0	; 192
    2a5c:	80 3c       	cpi	r24, 0xC0	; 192
    2a5e:	a1 f4       	brne	.+40     	; 0x2a88 <udd_ep_run+0x12e>
    2a60:	ce 01       	movw	r24, r28
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	88 5b       	subi	r24, 0xB8	; 184
    2a70:	9e 4d       	sbci	r25, 0xDE	; 222
    2a72:	0d dc       	rcall	.-2022   	; 0x228e <udd_ep_get_size>
    2a74:	bc 01       	movw	r22, r24
    2a76:	c7 01       	movw	r24, r14
    2a78:	58 d2       	rcall	.+1200   	; 0x2f2a <__udivmodhi4>
    2a7a:	89 2b       	or	r24, r25
    2a7c:	29 f0       	breq	.+10     	; 0x2a88 <udd_ep_run+0x12e>
    2a7e:	f5 01       	movw	r30, r10
    2a80:	80 81       	ld	r24, Z
    2a82:	8e 7f       	andi	r24, 0xFE	; 254
    2a84:	80 83       	st	Z, r24
    2a86:	14 c0       	rjmp	.+40     	; 0x2ab0 <udd_ep_run+0x156>
    2a88:	cc 0f       	add	r28, r28
    2a8a:	dd 1f       	adc	r29, r29
    2a8c:	cc 0f       	add	r28, r28
    2a8e:	dd 1f       	adc	r29, r29
    2a90:	cc 0f       	add	r28, r28
    2a92:	dd 1f       	adc	r29, r29
    2a94:	c0 5c       	subi	r28, 0xC0	; 192
    2a96:	de 4d       	sbci	r29, 0xDE	; 222
    2a98:	1a 86       	std	Y+10, r1	; 0x0a
    2a9a:	1b 86       	std	Y+11, r1	; 0x0b
    2a9c:	1e 86       	std	Y+14, r1	; 0x0e
    2a9e:	1f 86       	std	Y+15, r1	; 0x0f
    2aa0:	89 2d       	mov	r24, r9
    2aa2:	a5 dc       	rcall	.-1718   	; 0x23ee <udd_ep_trans_complet>
    2aa4:	77 24       	eor	r7, r7
    2aa6:	73 94       	inc	r7
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <udd_ep_run+0x156>
    2aaa:	71 2c       	mov	r7, r1
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <udd_ep_run+0x156>
    2aae:	71 2c       	mov	r7, r1
    2ab0:	87 2d       	mov	r24, r7
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	ff 90       	pop	r15
    2abc:	ef 90       	pop	r14
    2abe:	df 90       	pop	r13
    2ac0:	cf 90       	pop	r12
    2ac2:	bf 90       	pop	r11
    2ac4:	af 90       	pop	r10
    2ac6:	9f 90       	pop	r9
    2ac8:	8f 90       	pop	r8
    2aca:	7f 90       	pop	r7
    2acc:	08 95       	ret

00002ace <udd_ep_abort>:
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	18 2f       	mov	r17, r24
    2ada:	f8 2e       	mov	r15, r24
    2adc:	ff 1c       	adc	r15, r15
    2ade:	ff 24       	eor	r15, r15
    2ae0:	ff 1c       	adc	r15, r15
    2ae2:	c8 2f       	mov	r28, r24
    2ae4:	cf 70       	andi	r28, 0x0F	; 15
    2ae6:	d0 e0       	ldi	r29, 0x00	; 0
    2ae8:	cc 0f       	add	r28, r28
    2aea:	dd 1f       	adc	r29, r29
    2aec:	cf 0d       	add	r28, r15
    2aee:	d1 1d       	adc	r29, r1
    2af0:	f4 db       	rcall	.-2072   	; 0x22da <udd_ep_get_job>
    2af2:	dc 01       	movw	r26, r24
    2af4:	fe 01       	movw	r30, r28
    2af6:	ee 0f       	add	r30, r30
    2af8:	ff 1f       	adc	r31, r31
    2afa:	ee 0f       	add	r30, r30
    2afc:	ff 1f       	adc	r31, r31
    2afe:	ee 0f       	add	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	e8 5b       	subi	r30, 0xB8	; 184
    2b04:	fe 4d       	sbci	r31, 0xDE	; 222
    2b06:	02 e0       	ldi	r16, 0x02	; 2
    2b08:	05 93       	las	Z, r16
    2b0a:	8c 91       	ld	r24, X
    2b0c:	80 ff       	sbrs	r24, 0
    2b0e:	22 c0       	rjmp	.+68     	; 0x2b54 <udd_ep_abort+0x86>
    2b10:	8e 7f       	andi	r24, 0xFE	; 254
    2b12:	8c 93       	st	X, r24
    2b14:	17 96       	adiw	r26, 0x07	; 7
    2b16:	ed 91       	ld	r30, X+
    2b18:	fc 91       	ld	r31, X
    2b1a:	18 97       	sbiw	r26, 0x08	; 8
    2b1c:	30 97       	sbiw	r30, 0x00	; 0
    2b1e:	d1 f0       	breq	.+52     	; 0x2b54 <udd_ep_abort+0x86>
    2b20:	ff 20       	and	r15, r15
    2b22:	59 f0       	breq	.+22     	; 0x2b3a <udd_ep_abort+0x6c>
    2b24:	cc 0f       	add	r28, r28
    2b26:	dd 1f       	adc	r29, r29
    2b28:	cc 0f       	add	r28, r28
    2b2a:	dd 1f       	adc	r29, r29
    2b2c:	cc 0f       	add	r28, r28
    2b2e:	dd 1f       	adc	r29, r29
    2b30:	c0 5c       	subi	r28, 0xC0	; 192
    2b32:	de 4d       	sbci	r29, 0xDE	; 222
    2b34:	6e 85       	ldd	r22, Y+14	; 0x0e
    2b36:	7f 85       	ldd	r23, Y+15	; 0x0f
    2b38:	0a c0       	rjmp	.+20     	; 0x2b4e <udd_ep_abort+0x80>
    2b3a:	cc 0f       	add	r28, r28
    2b3c:	dd 1f       	adc	r29, r29
    2b3e:	cc 0f       	add	r28, r28
    2b40:	dd 1f       	adc	r29, r29
    2b42:	cc 0f       	add	r28, r28
    2b44:	dd 1f       	adc	r29, r29
    2b46:	c0 5c       	subi	r28, 0xC0	; 192
    2b48:	de 4d       	sbci	r29, 0xDE	; 222
    2b4a:	6a 85       	ldd	r22, Y+10	; 0x0a
    2b4c:	7b 85       	ldd	r23, Y+11	; 0x0b
    2b4e:	41 2f       	mov	r20, r17
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	09 95       	icall
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	ff 90       	pop	r15
    2b5e:	08 95       	ret

00002b60 <udd_ep_free>:
    2b60:	cf 93       	push	r28
    2b62:	c8 2f       	mov	r28, r24
    2b64:	b4 df       	rcall	.-152    	; 0x2ace <udd_ep_abort>
    2b66:	ec 2f       	mov	r30, r28
    2b68:	ef 70       	andi	r30, 0x0F	; 15
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	ee 0f       	add	r30, r30
    2b6e:	ff 1f       	adc	r31, r31
    2b70:	8c 2f       	mov	r24, r28
    2b72:	cc 0f       	add	r28, r28
    2b74:	99 0b       	sbc	r25, r25
    2b76:	88 27       	eor	r24, r24
    2b78:	99 0f       	add	r25, r25
    2b7a:	88 1f       	adc	r24, r24
    2b7c:	99 27       	eor	r25, r25
    2b7e:	e8 0f       	add	r30, r24
    2b80:	f9 1f       	adc	r31, r25
    2b82:	ee 0f       	add	r30, r30
    2b84:	ff 1f       	adc	r31, r31
    2b86:	ee 0f       	add	r30, r30
    2b88:	ff 1f       	adc	r31, r31
    2b8a:	ee 0f       	add	r30, r30
    2b8c:	ff 1f       	adc	r31, r31
    2b8e:	e0 5c       	subi	r30, 0xC0	; 192
    2b90:	fe 4d       	sbci	r31, 0xDE	; 222
    2b92:	11 86       	std	Z+9, r1	; 0x09
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <udd_ep_set_halt>:
    2b98:	0f 93       	push	r16
    2b9a:	e8 2f       	mov	r30, r24
    2b9c:	ef 70       	andi	r30, 0x0F	; 15
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	ee 0f       	add	r30, r30
    2ba2:	ff 1f       	adc	r31, r31
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	08 2e       	mov	r0, r24
    2ba8:	00 0c       	add	r0, r0
    2baa:	33 0b       	sbc	r19, r19
    2bac:	22 27       	eor	r18, r18
    2bae:	33 0f       	add	r19, r19
    2bb0:	22 1f       	adc	r18, r18
    2bb2:	33 27       	eor	r19, r19
    2bb4:	e2 0f       	add	r30, r18
    2bb6:	f3 1f       	adc	r31, r19
    2bb8:	df 01       	movw	r26, r30
    2bba:	aa 0f       	add	r26, r26
    2bbc:	bb 1f       	adc	r27, r27
    2bbe:	aa 0f       	add	r26, r26
    2bc0:	bb 1f       	adc	r27, r27
    2bc2:	aa 0f       	add	r26, r26
    2bc4:	bb 1f       	adc	r27, r27
    2bc6:	a0 5c       	subi	r26, 0xC0	; 192
    2bc8:	be 4d       	sbci	r27, 0xDE	; 222
    2bca:	19 96       	adiw	r26, 0x09	; 9
    2bcc:	9c 91       	ld	r25, X
    2bce:	19 97       	sbiw	r26, 0x09	; 9
    2bd0:	94 60       	ori	r25, 0x04	; 4
    2bd2:	19 96       	adiw	r26, 0x09	; 9
    2bd4:	9c 93       	st	X, r25
    2bd6:	ee 0f       	add	r30, r30
    2bd8:	ff 1f       	adc	r31, r31
    2bda:	ee 0f       	add	r30, r30
    2bdc:	ff 1f       	adc	r31, r31
    2bde:	ee 0f       	add	r30, r30
    2be0:	ff 1f       	adc	r31, r31
    2be2:	e8 5b       	subi	r30, 0xB8	; 184
    2be4:	fe 4d       	sbci	r31, 0xDE	; 222
    2be6:	01 e0       	ldi	r16, 0x01	; 1
    2be8:	06 93       	lac	Z, r16
    2bea:	71 df       	rcall	.-286    	; 0x2ace <udd_ep_abort>
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2bf2:	1f 92       	push	r1
    2bf4:	0f 92       	push	r0
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	0f 92       	push	r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	0f 93       	push	r16
    2bfe:	2f 93       	push	r18
    2c00:	3f 93       	push	r19
    2c02:	4f 93       	push	r20
    2c04:	5f 93       	push	r21
    2c06:	6f 93       	push	r22
    2c08:	7f 93       	push	r23
    2c0a:	8f 93       	push	r24
    2c0c:	9f 93       	push	r25
    2c0e:	af 93       	push	r26
    2c10:	bf 93       	push	r27
    2c12:	ef 93       	push	r30
    2c14:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2c16:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c1a:	88 23       	and	r24, r24
    2c1c:	44 f4       	brge	.+16     	; 0x2c2e <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2c1e:	80 e8       	ldi	r24, 0x80	; 128
    2c20:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2c24:	0e 94 32 0c 	call	0x1864	; 0x1864 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2c28:	0e 94 35 04 	call	0x86a	; 0x86a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2c2c:	82 c0       	rjmp	.+260    	; 0x2d32 <__vector_125+0x140>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2c2e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c32:	82 ff       	sbrs	r24, 2
    2c34:	20 c0       	rjmp	.+64     	; 0x2c76 <__vector_125+0x84>
		udd_ack_underflow_event();
    2c36:	84 e0       	ldi	r24, 0x04	; 4
    2c38:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2c3c:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <udd_sram+0x10>
    2c40:	86 ff       	sbrs	r24, 6
    2c42:	77 c0       	rjmp	.+238    	; 0x2d32 <__vector_125+0x140>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c44:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c48:	81 fd       	sbrc	r24, 1
    2c4a:	73 c0       	rjmp	.+230    	; 0x2d32 <__vector_125+0x140>
    2c4c:	61 db       	rcall	.-2366   	; 0x2310 <udd_ctrl_interrupt_tc_setup>
    2c4e:	81 11       	cpse	r24, r1
    2c50:	70 c0       	rjmp	.+224    	; 0x2d32 <__vector_125+0x140>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2c52:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2c56:	81 30       	cpi	r24, 0x01	; 1
    2c58:	11 f4       	brne	.+4      	; 0x2c5e <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2c5a:	97 da       	rcall	.-2770   	; 0x218a <udd_ctrl_send_zlp_in>
    2c5c:	6a c0       	rjmp	.+212    	; 0x2d32 <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c5e:	84 30       	cpi	r24, 0x04	; 4
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <__vector_125+0x72>
    2c62:	67 c0       	rjmp	.+206    	; 0x2d32 <__vector_125+0x140>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2c64:	e1 e5       	ldi	r30, 0x51	; 81
    2c66:	f1 e2       	ldi	r31, 0x21	; 33
    2c68:	04 e0       	ldi	r16, 0x04	; 4
    2c6a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c6c:	e9 e4       	ldi	r30, 0x49	; 73
    2c6e:	f1 e2       	ldi	r31, 0x21	; 33
    2c70:	04 e0       	ldi	r16, 0x04	; 4
    2c72:	05 93       	las	Z, r16
    2c74:	5e c0       	rjmp	.+188    	; 0x2d32 <__vector_125+0x140>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2c76:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c7a:	81 ff       	sbrs	r24, 1
    2c7c:	55 c0       	rjmp	.+170    	; 0x2d28 <__vector_125+0x136>
		udd_ack_overflow_event();
    2c7e:	82 e0       	ldi	r24, 0x02	; 2
    2c80:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2c84:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <udd_sram+0x8>
    2c88:	86 ff       	sbrs	r24, 6
    2c8a:	53 c0       	rjmp	.+166    	; 0x2d32 <__vector_125+0x140>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c8c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c90:	81 fd       	sbrc	r24, 1
    2c92:	4f c0       	rjmp	.+158    	; 0x2d32 <__vector_125+0x140>
    2c94:	3d db       	rcall	.-2438   	; 0x2310 <udd_ctrl_interrupt_tc_setup>
    2c96:	81 11       	cpse	r24, r1
    2c98:	4c c0       	rjmp	.+152    	; 0x2d32 <__vector_125+0x140>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2c9a:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2c9e:	82 30       	cpi	r24, 0x02	; 2
    2ca0:	41 f4       	brne	.+16     	; 0x2cb2 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2ca2:	84 e0       	ldi	r24, 0x04	; 4
    2ca4:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2ca8:	e8 e4       	ldi	r30, 0x48	; 72
    2caa:	f1 e2       	ldi	r31, 0x21	; 33
    2cac:	02 e0       	ldi	r16, 0x02	; 2
    2cae:	06 93       	lac	Z, r16
    2cb0:	40 c0       	rjmp	.+128    	; 0x2d32 <__vector_125+0x140>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2cb2:	83 30       	cpi	r24, 0x03	; 3
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <__vector_125+0xc6>
    2cb6:	3d c0       	rjmp	.+122    	; 0x2d32 <__vector_125+0x140>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2cb8:	e1 e5       	ldi	r30, 0x51	; 81
    2cba:	f1 e2       	ldi	r31, 0x21	; 33
    2cbc:	04 e0       	ldi	r16, 0x04	; 4
    2cbe:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2cc0:	e9 e4       	ldi	r30, 0x49	; 73
    2cc2:	f1 e2       	ldi	r31, 0x21	; 33
    2cc4:	04 e0       	ldi	r16, 0x04	; 4
    2cc6:	05 93       	las	Z, r16
    2cc8:	34 c0       	rjmp	.+104    	; 0x2d32 <__vector_125+0x140>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2cca:	80 e1       	ldi	r24, 0x10	; 16
    2ccc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2cd0:	0e 94 0d 0c 	call	0x181a	; 0x181a <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2cd4:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2cd8:	e0 e4       	ldi	r30, 0x40	; 64
    2cda:	f1 e2       	ldi	r31, 0x21	; 33
    2cdc:	11 86       	std	Z+9, r1	; 0x09
	udd_endpoint_clear_status(ep_ctrl);
    2cde:	96 e0       	ldi	r25, 0x06	; 6
    2ce0:	90 87       	std	Z+8, r25	; 0x08
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2ce2:	83 e4       	ldi	r24, 0x43	; 67
    2ce4:	81 87       	std	Z+9, r24	; 0x09
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2ce6:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2ce8:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2cea:	81 8b       	std	Z+17, r24	; 0x11
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2cec:	8b ef       	ldi	r24, 0xFB	; 251
    2cee:	90 e2       	ldi	r25, 0x20	; 32
    2cf0:	84 87       	std	Z+12, r24	; 0x0c
    2cf2:	95 87       	std	Z+13, r25	; 0x0d
		// Reset endpoint control management
		udd_ctrl_init();
    2cf4:	15 da       	rcall	.-3030   	; 0x2120 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2cf6:	1d c0       	rjmp	.+58     	; 0x2d32 <__vector_125+0x140>
	}

	if (udd_is_suspend_event()) {
    2cf8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cfc:	86 ff       	sbrs	r24, 6
    2cfe:	08 c0       	rjmp	.+16     	; 0x2d10 <__vector_125+0x11e>
		udd_ack_suspend_event();
    2d00:	80 e4       	ldi	r24, 0x40	; 64
    2d02:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	e2 d9       	rcall	.-3132   	; 0x20ce <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2d0a:	0e 94 33 04 	call	0x866	; 0x866 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2d0e:	11 c0       	rjmp	.+34     	; 0x2d32 <__vector_125+0x140>
	}

	if (udd_is_resume_event()) {
    2d10:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d14:	85 ff       	sbrs	r24, 5
    2d16:	0d c0       	rjmp	.+26     	; 0x2d32 <__vector_125+0x140>
		udd_ack_resume_event();
    2d18:	80 e2       	ldi	r24, 0x20	; 32
    2d1a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	d6 d9       	rcall	.-3156   	; 0x20ce <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2d22:	0e 94 34 04 	call	0x868	; 0x868 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2d26:	05 c0       	rjmp	.+10     	; 0x2d32 <__vector_125+0x140>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2d28:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d2c:	84 ff       	sbrs	r24, 4
    2d2e:	e4 cf       	rjmp	.-56     	; 0x2cf8 <__vector_125+0x106>
    2d30:	cc cf       	rjmp	.-104    	; 0x2cca <__vector_125+0xd8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2d32:	ff 91       	pop	r31
    2d34:	ef 91       	pop	r30
    2d36:	bf 91       	pop	r27
    2d38:	af 91       	pop	r26
    2d3a:	9f 91       	pop	r25
    2d3c:	8f 91       	pop	r24
    2d3e:	7f 91       	pop	r23
    2d40:	6f 91       	pop	r22
    2d42:	5f 91       	pop	r21
    2d44:	4f 91       	pop	r20
    2d46:	3f 91       	pop	r19
    2d48:	2f 91       	pop	r18
    2d4a:	0f 91       	pop	r16
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	0f 90       	pop	r0
    2d52:	1f 90       	pop	r1
    2d54:	18 95       	reti

00002d56 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2d56:	1f 92       	push	r1
    2d58:	0f 92       	push	r0
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	0f 92       	push	r0
    2d5e:	11 24       	eor	r1, r1
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	2f 93       	push	r18
    2d66:	3f 93       	push	r19
    2d68:	4f 93       	push	r20
    2d6a:	5f 93       	push	r21
    2d6c:	6f 93       	push	r22
    2d6e:	7f 93       	push	r23
    2d70:	8f 93       	push	r24
    2d72:	9f 93       	push	r25
    2d74:	af 93       	push	r26
    2d76:	bf 93       	push	r27
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	ef 93       	push	r30
    2d7e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2d80:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2d84:	81 fd       	sbrc	r24, 1
    2d86:	03 c0       	rjmp	.+6      	; 0x2d8e <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2d88:	c3 da       	rcall	.-2682   	; 0x2310 <udd_ctrl_interrupt_tc_setup>
    2d8a:	81 11       	cpse	r24, r1
    2d8c:	b9 c0       	rjmp	.+370    	; 0x2f00 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2d94:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2d98:	81 95       	neg	r24
    2d9a:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2d9c:	e8 e4       	ldi	r30, 0x48	; 72
    2d9e:	f1 e2       	ldi	r31, 0x21	; 33
    2da0:	e8 1b       	sub	r30, r24
    2da2:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2da4:	20 81       	ld	r18, Z
    2da6:	31 81       	ldd	r19, Z+1	; 0x01
    2da8:	28 54       	subi	r18, 0x48	; 72
    2daa:	31 42       	sbci	r19, 0x21	; 33
    2dac:	36 95       	lsr	r19
    2dae:	27 95       	ror	r18
    2db0:	36 95       	lsr	r19
    2db2:	27 95       	ror	r18
    2db4:	36 95       	lsr	r19
    2db6:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2db8:	82 2f       	mov	r24, r18
    2dba:	86 95       	lsr	r24
    2dbc:	20 fd       	sbrc	r18, 0
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <__vector_126+0x6e>
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <__vector_126+0x70>
    2dc4:	90 e8       	ldi	r25, 0x80	; 128
    2dc6:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2dc8:	e8 2f       	mov	r30, r24
    2dca:	ef 70       	andi	r30, 0x0F	; 15
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	ee 0f       	add	r30, r30
    2dd0:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	08 2e       	mov	r0, r24
    2dd6:	00 0c       	add	r0, r0
    2dd8:	33 0b       	sbc	r19, r19
    2dda:	22 27       	eor	r18, r18
    2ddc:	33 0f       	add	r19, r19
    2dde:	22 1f       	adc	r18, r18
    2de0:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2de2:	e2 0f       	add	r30, r18
    2de4:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2de6:	df 01       	movw	r26, r30
    2de8:	aa 0f       	add	r26, r26
    2dea:	bb 1f       	adc	r27, r27
    2dec:	aa 0f       	add	r26, r26
    2dee:	bb 1f       	adc	r27, r27
    2df0:	aa 0f       	add	r26, r26
    2df2:	bb 1f       	adc	r27, r27
    2df4:	a8 5b       	subi	r26, 0xB8	; 184
    2df6:	be 4d       	sbci	r27, 0xDE	; 222
    2df8:	9c 91       	ld	r25, X
    2dfa:	95 ff       	sbrs	r25, 5
    2dfc:	81 c0       	rjmp	.+258    	; 0x2f00 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2dfe:	fd 01       	movw	r30, r26
    2e00:	00 e2       	ldi	r16, 0x20	; 32
    2e02:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2e04:	81 11       	cpse	r24, r1
    2e06:	77 c0       	rjmp	.+238    	; 0x2ef6 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2e08:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <udd_ep_control_state>
    2e0c:	84 30       	cpi	r24, 0x04	; 4
    2e0e:	19 f4       	brne	.+6      	; 0x2e16 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2e10:	ca d9       	rcall	.-3180   	; 0x21a6 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2e12:	86 d9       	rcall	.-3316   	; 0x2120 <udd_ctrl_init>
    2e14:	75 c0       	rjmp	.+234    	; 0x2f00 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2e16:	00 91 4a 21 	lds	r16, 0x214A	; 0x80214a <udd_sram+0xa>
    2e1a:	10 91 4b 21 	lds	r17, 0x214B	; 0x80214b <udd_sram+0xb>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2e1e:	80 91 a4 23 	lds	r24, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    2e22:	90 91 a5 23 	lds	r25, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    2e26:	c0 91 3b 21 	lds	r28, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2e2a:	d0 91 3c 21 	lds	r29, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2e2e:	9e 01       	movw	r18, r28
    2e30:	20 0f       	add	r18, r16
    2e32:	31 1f       	adc	r19, r17
    2e34:	82 17       	cp	r24, r18
    2e36:	93 07       	cpc	r25, r19
    2e38:	18 f4       	brcc	.+6      	; 0x2e40 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2e3a:	8c 01       	movw	r16, r24
    2e3c:	0c 1b       	sub	r16, r28
    2e3e:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2e40:	80 91 a2 23 	lds	r24, 0x23A2	; 0x8023a2 <udd_g_ctrlreq+0x8>
    2e44:	90 91 a3 23 	lds	r25, 0x23A3	; 0x8023a3 <udd_g_ctrlreq+0x9>
    2e48:	a8 01       	movw	r20, r16
    2e4a:	6b ef       	ldi	r22, 0xFB	; 251
    2e4c:	70 e2       	ldi	r23, 0x20	; 32
    2e4e:	8c 0f       	add	r24, r28
    2e50:	9d 1f       	adc	r25, r29
    2e52:	98 d0       	rcall	.+304    	; 0x2f84 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2e54:	c0 0f       	add	r28, r16
    2e56:	d1 1f       	adc	r29, r17
    2e58:	c0 93 3b 21 	sts	0x213B, r28	; 0x80213b <udd_ctrl_payload_nb_trans>
    2e5c:	d0 93 3c 21 	sts	0x213C, r29	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e60:	00 34       	cpi	r16, 0x40	; 64
    2e62:	11 05       	cpc	r17, r1
    2e64:	69 f4       	brne	.+26     	; 0x2e80 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2e66:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2e6a:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2e6e:	8c 0f       	add	r24, r28
    2e70:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e72:	20 91 a0 23 	lds	r18, 0x23A0	; 0x8023a0 <udd_g_ctrlreq+0x6>
    2e76:	30 91 a1 23 	lds	r19, 0x23A1	; 0x8023a1 <udd_g_ctrlreq+0x7>
    2e7a:	82 17       	cp	r24, r18
    2e7c:	93 07       	cpc	r25, r19
    2e7e:	80 f0       	brcs	.+32     	; 0x2ea0 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e80:	ea e9       	ldi	r30, 0x9A	; 154
    2e82:	f3 e2       	ldi	r31, 0x23	; 35
    2e84:	c2 87       	std	Z+10, r28	; 0x0a
    2e86:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e88:	06 84       	ldd	r0, Z+14	; 0x0e
    2e8a:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e8c:	e0 2d       	mov	r30, r0
    2e8e:	30 97       	sbiw	r30, 0x00	; 0
    2e90:	29 f0       	breq	.+10     	; 0x2e9c <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e92:	09 95       	icall
    2e94:	81 11       	cpse	r24, r1
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    2e98:	6a d9       	rcall	.-3372   	; 0x216e <udd_ctrl_stall_data>
    2e9a:	32 c0       	rjmp	.+100    	; 0x2f00 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2e9c:	76 d9       	rcall	.-3348   	; 0x218a <udd_ctrl_send_zlp_in>
    2e9e:	30 c0       	rjmp	.+96     	; 0x2f00 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2ea0:	80 91 a4 23 	lds	r24, 0x23A4	; 0x8023a4 <udd_g_ctrlreq+0xa>
    2ea4:	90 91 a5 23 	lds	r25, 0x23A5	; 0x8023a5 <udd_g_ctrlreq+0xb>
    2ea8:	c8 17       	cp	r28, r24
    2eaa:	d9 07       	cpc	r29, r25
    2eac:	f9 f4       	brne	.+62     	; 0x2eec <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2eae:	e0 91 a8 23 	lds	r30, 0x23A8	; 0x8023a8 <udd_g_ctrlreq+0xe>
    2eb2:	f0 91 a9 23 	lds	r31, 0x23A9	; 0x8023a9 <udd_g_ctrlreq+0xf>
    2eb6:	30 97       	sbiw	r30, 0x00	; 0
    2eb8:	11 f4       	brne	.+4      	; 0x2ebe <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2eba:	59 d9       	rcall	.-3406   	; 0x216e <udd_ctrl_stall_data>
    2ebc:	21 c0       	rjmp	.+66     	; 0x2f00 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2ebe:	09 95       	icall
    2ec0:	81 11       	cpse	r24, r1
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2ec4:	54 d9       	rcall	.-3416   	; 0x216e <udd_ctrl_stall_data>
    2ec6:	1c c0       	rjmp	.+56     	; 0x2f00 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2ec8:	20 91 3d 21 	lds	r18, 0x213D	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2ecc:	30 91 3e 21 	lds	r19, 0x213E	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
    2ed0:	80 91 3b 21 	lds	r24, 0x213B	; 0x80213b <udd_ctrl_payload_nb_trans>
    2ed4:	90 91 3c 21 	lds	r25, 0x213C	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
    2ed8:	82 0f       	add	r24, r18
    2eda:	93 1f       	adc	r25, r19
    2edc:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <udd_ctrl_prev_payload_nb_trans>
    2ee0:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2ee4:	10 92 3b 21 	sts	0x213B, r1	; 0x80213b <udd_ctrl_payload_nb_trans>
    2ee8:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2eec:	e8 e4       	ldi	r30, 0x48	; 72
    2eee:	f1 e2       	ldi	r31, 0x21	; 33
    2ef0:	02 e0       	ldi	r16, 0x02	; 2
    2ef2:	06 93       	lac	Z, r16
    2ef4:	05 c0       	rjmp	.+10     	; 0x2f00 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2ef6:	80 38       	cpi	r24, 0x80	; 128
    2ef8:	11 f4       	brne	.+4      	; 0x2efe <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2efa:	5d d9       	rcall	.-3398   	; 0x21b6 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2efc:	01 c0       	rjmp	.+2      	; 0x2f00 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2efe:	77 da       	rcall	.-2834   	; 0x23ee <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2f00:	ff 91       	pop	r31
    2f02:	ef 91       	pop	r30
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	bf 91       	pop	r27
    2f0a:	af 91       	pop	r26
    2f0c:	9f 91       	pop	r25
    2f0e:	8f 91       	pop	r24
    2f10:	7f 91       	pop	r23
    2f12:	6f 91       	pop	r22
    2f14:	5f 91       	pop	r21
    2f16:	4f 91       	pop	r20
    2f18:	3f 91       	pop	r19
    2f1a:	2f 91       	pop	r18
    2f1c:	1f 91       	pop	r17
    2f1e:	0f 91       	pop	r16
    2f20:	0f 90       	pop	r0
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	0f 90       	pop	r0
    2f26:	1f 90       	pop	r1
    2f28:	18 95       	reti

00002f2a <__udivmodhi4>:
    2f2a:	aa 1b       	sub	r26, r26
    2f2c:	bb 1b       	sub	r27, r27
    2f2e:	51 e1       	ldi	r21, 0x11	; 17
    2f30:	07 c0       	rjmp	.+14     	; 0x2f40 <__udivmodhi4_ep>

00002f32 <__udivmodhi4_loop>:
    2f32:	aa 1f       	adc	r26, r26
    2f34:	bb 1f       	adc	r27, r27
    2f36:	a6 17       	cp	r26, r22
    2f38:	b7 07       	cpc	r27, r23
    2f3a:	10 f0       	brcs	.+4      	; 0x2f40 <__udivmodhi4_ep>
    2f3c:	a6 1b       	sub	r26, r22
    2f3e:	b7 0b       	sbc	r27, r23

00002f40 <__udivmodhi4_ep>:
    2f40:	88 1f       	adc	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	5a 95       	dec	r21
    2f46:	a9 f7       	brne	.-22     	; 0x2f32 <__udivmodhi4_loop>
    2f48:	80 95       	com	r24
    2f4a:	90 95       	com	r25
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	cd 01       	movw	r24, r26
    2f50:	08 95       	ret

00002f52 <__divmodhi4>:
    2f52:	97 fb       	bst	r25, 7
    2f54:	07 2e       	mov	r0, r23
    2f56:	16 f4       	brtc	.+4      	; 0x2f5c <__divmodhi4+0xa>
    2f58:	00 94       	com	r0
    2f5a:	06 d0       	rcall	.+12     	; 0x2f68 <__divmodhi4_neg1>
    2f5c:	77 fd       	sbrc	r23, 7
    2f5e:	08 d0       	rcall	.+16     	; 0x2f70 <__divmodhi4_neg2>
    2f60:	e4 df       	rcall	.-56     	; 0x2f2a <__udivmodhi4>
    2f62:	07 fc       	sbrc	r0, 7
    2f64:	05 d0       	rcall	.+10     	; 0x2f70 <__divmodhi4_neg2>
    2f66:	3e f4       	brtc	.+14     	; 0x2f76 <__divmodhi4_exit>

00002f68 <__divmodhi4_neg1>:
    2f68:	90 95       	com	r25
    2f6a:	81 95       	neg	r24
    2f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6e:	08 95       	ret

00002f70 <__divmodhi4_neg2>:
    2f70:	70 95       	com	r23
    2f72:	61 95       	neg	r22
    2f74:	7f 4f       	sbci	r23, 0xFF	; 255

00002f76 <__divmodhi4_exit>:
    2f76:	08 95       	ret

00002f78 <__tablejump2__>:
    2f78:	ee 0f       	add	r30, r30
    2f7a:	ff 1f       	adc	r31, r31
    2f7c:	05 90       	lpm	r0, Z+
    2f7e:	f4 91       	lpm	r31, Z
    2f80:	e0 2d       	mov	r30, r0
    2f82:	09 94       	ijmp

00002f84 <memcpy>:
    2f84:	fb 01       	movw	r30, r22
    2f86:	dc 01       	movw	r26, r24
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <memcpy+0xa>
    2f8a:	01 90       	ld	r0, Z+
    2f8c:	0d 92       	st	X+, r0
    2f8e:	41 50       	subi	r20, 0x01	; 1
    2f90:	50 40       	sbci	r21, 0x00	; 0
    2f92:	d8 f7       	brcc	.-10     	; 0x2f8a <memcpy+0x6>
    2f94:	08 95       	ret

00002f96 <_exit>:
    2f96:	f8 94       	cli

00002f98 <__stop_program>:
    2f98:	ff cf       	rjmp	.-2      	; 0x2f98 <__stop_program>
