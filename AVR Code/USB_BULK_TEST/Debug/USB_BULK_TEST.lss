
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00802000  00002fb2  00003048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d44  008020ac  008020ac  000030f4  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00003168  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db86  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024d6  00000000  00000000  000112ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000acb5  00000000  00000000  000137c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f0c  00000000  00000000  0001e47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030911  00000000  00000000  0001f388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000379b  00000000  00000000  0004fc99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00053438  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c3e1  00000000  00000000  00053950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_6>
      1c:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_7>
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c1       	rjmp	.+586    	; 0x274 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c1       	rjmp	.+534    	; 0x274 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_24>
      64:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__vector_25>
      68:	05 c1       	rjmp	.+522    	; 0x274 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop
      98:	ed c0       	rjmp	.+474    	; 0x274 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	eb c0       	rjmp	.+470    	; 0x274 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e9 c0       	rjmp	.+466    	; 0x274 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e7 c0       	rjmp	.+462    	; 0x274 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e5 c0       	rjmp	.+458    	; 0x274 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e3 c0       	rjmp	.+454    	; 0x274 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e1 c0       	rjmp	.+450    	; 0x274 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	df c0       	rjmp	.+446    	; 0x274 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dd c0       	rjmp	.+442    	; 0x274 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c0       	rjmp	.+438    	; 0x274 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d9 c0       	rjmp	.+434    	; 0x274 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d7 c0       	rjmp	.+430    	; 0x274 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d5 c0       	rjmp	.+426    	; 0x274 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d3 c0       	rjmp	.+422    	; 0x274 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d1 c0       	rjmp	.+418    	; 0x274 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cf c0       	rjmp	.+414    	; 0x274 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cd c0       	rjmp	.+410    	; 0x274 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cb c0       	rjmp	.+406    	; 0x274 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c9 c0       	rjmp	.+402    	; 0x274 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c7 c0       	rjmp	.+398    	; 0x274 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c5 c0       	rjmp	.+394    	; 0x274 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c3 c0       	rjmp	.+390    	; 0x274 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c1 c0       	rjmp	.+386    	; 0x274 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bf c0       	rjmp	.+382    	; 0x274 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	bd c0       	rjmp	.+378    	; 0x274 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	bb c0       	rjmp	.+374    	; 0x274 <__bad_interrupt>
      fe:	00 00       	nop
     100:	b9 c0       	rjmp	.+370    	; 0x274 <__bad_interrupt>
     102:	00 00       	nop
     104:	b7 c0       	rjmp	.+366    	; 0x274 <__bad_interrupt>
     106:	00 00       	nop
     108:	b5 c0       	rjmp	.+362    	; 0x274 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b3 c0       	rjmp	.+358    	; 0x274 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b1 c0       	rjmp	.+354    	; 0x274 <__bad_interrupt>
     112:	00 00       	nop
     114:	af c0       	rjmp	.+350    	; 0x274 <__bad_interrupt>
     116:	00 00       	nop
     118:	ad c0       	rjmp	.+346    	; 0x274 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	eb c4       	rjmp	.+2518   	; 0xaf4 <__vector_71>
     11e:	00 00       	nop
     120:	a9 c0       	rjmp	.+338    	; 0x274 <__bad_interrupt>
     122:	00 00       	nop
     124:	a7 c0       	rjmp	.+334    	; 0x274 <__bad_interrupt>
     126:	00 00       	nop
     128:	a5 c0       	rjmp	.+330    	; 0x274 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a3 c0       	rjmp	.+326    	; 0x274 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a1 c0       	rjmp	.+322    	; 0x274 <__bad_interrupt>
     132:	00 00       	nop
     134:	9f c0       	rjmp	.+318    	; 0x274 <__bad_interrupt>
     136:	00 00       	nop
     138:	9d c0       	rjmp	.+314    	; 0x274 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	9b c0       	rjmp	.+310    	; 0x274 <__bad_interrupt>
     13e:	00 00       	nop
     140:	99 c0       	rjmp	.+306    	; 0x274 <__bad_interrupt>
     142:	00 00       	nop
     144:	97 c0       	rjmp	.+302    	; 0x274 <__bad_interrupt>
     146:	00 00       	nop
     148:	95 c0       	rjmp	.+298    	; 0x274 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_83>
     150:	91 c0       	rjmp	.+290    	; 0x274 <__bad_interrupt>
     152:	00 00       	nop
     154:	8f c0       	rjmp	.+286    	; 0x274 <__bad_interrupt>
     156:	00 00       	nop
     158:	8d c0       	rjmp	.+282    	; 0x274 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	8b c0       	rjmp	.+278    	; 0x274 <__bad_interrupt>
     15e:	00 00       	nop
     160:	89 c0       	rjmp	.+274    	; 0x274 <__bad_interrupt>
     162:	00 00       	nop
     164:	87 c0       	rjmp	.+270    	; 0x274 <__bad_interrupt>
     166:	00 00       	nop
     168:	85 c0       	rjmp	.+266    	; 0x274 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	83 c0       	rjmp	.+262    	; 0x274 <__bad_interrupt>
     16e:	00 00       	nop
     170:	81 c0       	rjmp	.+258    	; 0x274 <__bad_interrupt>
     172:	00 00       	nop
     174:	7f c0       	rjmp	.+254    	; 0x274 <__bad_interrupt>
     176:	00 00       	nop
     178:	7d c0       	rjmp	.+250    	; 0x274 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	7b c0       	rjmp	.+246    	; 0x274 <__bad_interrupt>
     17e:	00 00       	nop
     180:	79 c0       	rjmp	.+242    	; 0x274 <__bad_interrupt>
     182:	00 00       	nop
     184:	77 c0       	rjmp	.+238    	; 0x274 <__bad_interrupt>
     186:	00 00       	nop
     188:	75 c0       	rjmp	.+234    	; 0x274 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	73 c0       	rjmp	.+230    	; 0x274 <__bad_interrupt>
     18e:	00 00       	nop
     190:	71 c0       	rjmp	.+226    	; 0x274 <__bad_interrupt>
     192:	00 00       	nop
     194:	6f c0       	rjmp	.+222    	; 0x274 <__bad_interrupt>
     196:	00 00       	nop
     198:	6d c0       	rjmp	.+218    	; 0x274 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	6b c0       	rjmp	.+214    	; 0x274 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	69 c0       	rjmp	.+210    	; 0x274 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	67 c0       	rjmp	.+206    	; 0x274 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	65 c0       	rjmp	.+202    	; 0x274 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	63 c0       	rjmp	.+198    	; 0x274 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	5f c0       	rjmp	.+190    	; 0x274 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	5d c0       	rjmp	.+186    	; 0x274 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	5b c0       	rjmp	.+182    	; 0x274 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	59 c0       	rjmp	.+178    	; 0x274 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	57 c0       	rjmp	.+174    	; 0x274 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	55 c0       	rjmp	.+170    	; 0x274 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	53 c0       	rjmp	.+166    	; 0x274 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	51 c0       	rjmp	.+162    	; 0x274 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4f c0       	rjmp	.+158    	; 0x274 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	4d c0       	rjmp	.+154    	; 0x274 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	4b c0       	rjmp	.+150    	; 0x274 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	49 c0       	rjmp	.+146    	; 0x274 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	47 c0       	rjmp	.+142    	; 0x274 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	45 c0       	rjmp	.+138    	; 0x274 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	43 c0       	rjmp	.+134    	; 0x274 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	41 c0       	rjmp	.+130    	; 0x274 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__vector_125>
     1f8:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__vector_126>
     1fc:	43 04       	cpc	r4, r3
     1fe:	45 04       	cpc	r4, r5
     200:	47 04       	cpc	r4, r7
     202:	49 04       	cpc	r4, r9
     204:	4b 04       	cpc	r4, r11
     206:	4d 04       	cpc	r4, r13
     208:	4f 04       	cpc	r4, r15
     20a:	51 04       	cpc	r5, r1
     20c:	68 0c       	add	r6, r8
     20e:	8d 0c       	add	r8, r13
     210:	b0 0c       	add	r11, r0
     212:	d3 0c       	add	r13, r3
     214:	dc 0c       	add	r13, r12
     216:	e1 0c       	add	r14, r1
     218:	30 0d       	add	r19, r0
     21a:	35 0d       	add	r19, r5
     21c:	54 0d       	add	r21, r4
     21e:	ed 0c       	add	r14, r13
     220:	f6 0c       	add	r15, r6
     222:	ff 0c       	add	r15, r15
     224:	0b 0d       	add	r16, r11
     226:	0e 0d       	add	r16, r14
     228:	11 0d       	add	r17, r1
     22a:	1b 0d       	add	r17, r11
     22c:	25 0d       	add	r18, r5
     22e:	26 11       	cpse	r18, r6
     230:	29 11       	cpse	r18, r9
     232:	2c 11       	cpse	r18, r12
     234:	2f 11       	cpse	r18, r15
     236:	32 11       	cpse	r19, r2
     238:	35 11       	cpse	r19, r5
     23a:	38 11       	cpse	r19, r8

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df e2       	ldi	r29, 0x2F	; 47
     246:	de bf       	out	0x3e, r29	; 62

00000248 <__do_copy_data>:
     248:	10 e2       	ldi	r17, 0x20	; 32
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e2       	ldi	r27, 0x20	; 32
     24e:	e2 eb       	ldi	r30, 0xB2	; 178
     250:	ff e2       	ldi	r31, 0x2F	; 47
     252:	02 c0       	rjmp	.+4      	; 0x258 <__do_copy_data+0x10>
     254:	05 90       	lpm	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	ac 3a       	cpi	r26, 0xAC	; 172
     25a:	b1 07       	cpc	r27, r17
     25c:	d9 f7       	brne	.-10     	; 0x254 <__do_copy_data+0xc>

0000025e <__do_clear_bss>:
     25e:	2d e2       	ldi	r18, 0x2D	; 45
     260:	ac ea       	ldi	r26, 0xAC	; 172
     262:	b0 e2       	ldi	r27, 0x20	; 32
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a0 3f       	cpi	r26, 0xF0	; 240
     26a:	b2 07       	cpc	r27, r18
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>
     26e:	bf d2       	rcall	.+1406   	; 0x7ee <main>
     270:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <_exit>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <tiny_calibration_init>:
	}

int tiny_distance_from_centre(unsigned int point){
	int midVal = point-12000;
	return midVal < 0 ? -midVal : midVal;
}
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	c0 e5       	ldi	r28, 0x50	; 80
     27c:	d0 e0       	ldi	r29, 0x00	; 0
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	8e 83       	std	Y+6, r24	; 0x06
     282:	8c e1       	ldi	r24, 0x1C	; 28
     284:	f1 d3       	rcall	.+2018   	; 0xa68 <ReadCalibrationByte>
     286:	e0 e6       	ldi	r30, 0x60	; 96
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	83 83       	std	Z+3, r24	; 0x03
     28c:	8b eb       	ldi	r24, 0xBB	; 187
     28e:	86 83       	std	Z+6, r24	; 0x06
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	85 83       	std	Z+5, r24	; 0x05
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	88 ed       	ldi	r24, 0xD8	; 216
     29a:	84 bf       	out	0x34, r24	; 52
     29c:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	88 83       	st	Y, r24
     2a4:	e0 e5       	ldi	r30, 0x50	; 80
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	81 81       	ldd	r24, Z+1	; 0x01
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	e9 f7       	brne	.-6      	; 0x2a8 <tiny_calibration_init+0x32>
     2ae:	e0 e5       	ldi	r30, 0x50	; 80
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	80 83       	st	Z, r24
     2b8:	88 e1       	ldi	r24, 0x18	; 24
     2ba:	85 83       	std	Z+5, r24	; 0x05
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	80 ff       	sbrs	r24, 0
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <tiny_calibration_init+0x46>
     2c2:	e0 e5       	ldi	r30, 0x50	; 80
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 83       	st	Z, r24
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	84 ff       	sbrs	r24, 4
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <tiny_calibration_init+0x56>
     2d2:	88 ed       	ldi	r24, 0xD8	; 216
     2d4:	84 bf       	out	0x34, r24	; 52
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <tiny_calibration_first_sof>:
     2e2:	e0 e7       	ldi	r30, 0x70	; 112
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	85 81       	ldd	r24, Z+5	; 0x05
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	85 83       	std	Z+5, r24	; 0x05
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	fa e0       	ldi	r31, 0x0A	; 10
     2f0:	8f eb       	ldi	r24, 0xBF	; 191
     2f2:	9d e5       	ldi	r25, 0x5D	; 93
     2f4:	86 a3       	std	Z+38, r24	; 0x26
     2f6:	97 a3       	std	Z+39, r25	; 0x27
     2f8:	80 ee       	ldi	r24, 0xE0	; 224
     2fa:	9e e2       	ldi	r25, 0x2E	; 46
     2fc:	80 a3       	std	Z+32, r24	; 0x20
     2fe:	91 a3       	std	Z+33, r25	; 0x21
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
     304:	08 95       	ret

00000306 <tiny_calibration_maintain>:
     306:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     30a:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
     30e:	81 3e       	cpi	r24, 0xE1	; 225
     310:	2e e2       	ldi	r18, 0x2E	; 46
     312:	92 07       	cpc	r25, r18
     314:	20 f0       	brcs	.+8      	; 0x31e <tiny_calibration_maintain+0x18>
     316:	20 91 92 23 	lds	r18, 0x2392	; 0x802392 <cali_value_negative_gradient>
     31a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     31e:	80 3e       	cpi	r24, 0xE0	; 224
     320:	2e e2       	ldi	r18, 0x2E	; 46
     322:	92 07       	cpc	r25, r18
     324:	20 f4       	brcc	.+8      	; 0x32e <tiny_calibration_maintain+0x28>
     326:	20 91 8f 23 	lds	r18, 0x238F	; 0x80238f <cali_value_positive_gradient>
     32a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     32e:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <warmup>
     332:	22 23       	and	r18, r18
     334:	31 f0       	breq	.+12     	; 0x342 <tiny_calibration_maintain+0x3c>
     336:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <warmup>
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     340:	35 c0       	rjmp	.+106    	; 0x3ac <tiny_calibration_maintain+0xa6>
     342:	88 5f       	subi	r24, 0xF8	; 248
     344:	9a 42       	sbci	r25, 0x2A	; 42
     346:	81 3d       	cpi	r24, 0xD1	; 209
     348:	97 40       	sbci	r25, 0x07	; 7
     34a:	80 f1       	brcs	.+96     	; 0x3ac <tiny_calibration_maintain+0xa6>
     34c:	10 92 ac 20 	sts	0x20AC, r1	; 0x8020ac <__data_end>
     350:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     354:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     358:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     35c:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	a1 1d       	adc	r26, r1
     364:	b1 1d       	adc	r27, r1
     366:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <outOfRange>
     36a:	90 93 ae 20 	sts	0x20AE, r25	; 0x8020ae <outOfRange+0x1>
     36e:	a0 93 af 20 	sts	0x20AF, r26	; 0x8020af <outOfRange+0x2>
     372:	b0 93 b0 20 	sts	0x20B0, r27	; 0x8020b0 <outOfRange+0x3>
     376:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     37a:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     37e:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     382:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     386:	89 2f       	mov	r24, r25
     388:	9a 2f       	mov	r25, r26
     38a:	ab 2f       	mov	r26, r27
     38c:	bb 27       	eor	r27, r27
     38e:	ee e9       	ldi	r30, 0x9E	; 158
     390:	f3 e2       	ldi	r31, 0x23	; 35
     392:	84 8b       	std	Z+20, r24	; 0x14
     394:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <outOfRange>
     398:	90 91 ae 20 	lds	r25, 0x20AE	; 0x8020ae <outOfRange+0x1>
     39c:	a0 91 af 20 	lds	r26, 0x20AF	; 0x8020af <outOfRange+0x2>
     3a0:	b0 91 b0 20 	lds	r27, 0x20B0	; 0x8020b0 <outOfRange+0x3>
     3a4:	83 8b       	std	Z+19, r24	; 0x13
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <warmup>
     3ac:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     3b0:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b1 f4       	brne	.+44     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3b8:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     3bc:	8f 3f       	cpi	r24, 0xFF	; 255
     3be:	91 f0       	breq	.+36     	; 0x3e4 <tiny_calibration_maintain+0xde>
     3c0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3c4:	81 11       	cpse	r24, r1
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <tiny_calibration_maintain+0xce>
     3c8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <median_TRFCNT_delay>
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     3d2:	08 95       	ret
     3d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     3d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     3dc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     3e0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     3e4:	08 95       	ret

000003e6 <tiny_calibration_safe_add>:
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	09 f4       	brne	.+2      	; 0x3ec <tiny_calibration_safe_add+0x6>
     3ea:	66 c0       	rjmp	.+204    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <tiny_calibration_safe_add+0xa>
     3ee:	9c 01       	movw	r18, r24
     3f0:	99 23       	and	r25, r25
     3f2:	34 f4       	brge	.+12     	; 0x400 <__FUSE_REGION_LENGTH__>
     3f4:	22 27       	eor	r18, r18
     3f6:	33 27       	eor	r19, r19
     3f8:	28 1b       	sub	r18, r24
     3fa:	39 0b       	sbc	r19, r25
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	e8 e6       	ldi	r30, 0x68	; 104
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	83 81       	ldd	r24, Z+3	; 0x03
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     40e:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     412:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     416:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     41a:	96 95       	lsr	r25
     41c:	98 2f       	mov	r25, r24
     41e:	88 27       	eor	r24, r24
     420:	97 95       	ror	r25
     422:	87 95       	ror	r24
     424:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     428:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     42c:	42 81       	ldd	r20, Z+2	; 0x02
     42e:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     432:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     436:	84 0f       	add	r24, r20
     438:	91 1d       	adc	r25, r1
     43a:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     43e:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     442:	00 00       	nop
     444:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     448:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	28 f4       	brcc	.+10     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
     452:	10 92 90 23 	sts	0x2390, r1	; 0x802390 <calTemp>
     456:	10 92 91 23 	sts	0x2391, r1	; 0x802391 <calTemp+0x1>
     45a:	08 95       	ret
     45c:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     460:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	81 15       	cp	r24, r1
     46a:	90 42       	sbci	r25, 0x20	; 32
     46c:	38 f0       	brcs	.+14     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	9f e1       	ldi	r25, 0x1F	; 31
     472:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     476:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     47a:	08 95       	ret
     47c:	55 23       	and	r21, r21
     47e:	59 f0       	breq	.+22     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     480:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     484:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     488:	82 1b       	sub	r24, r18
     48a:	93 0b       	sbc	r25, r19
     48c:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <calTemp>
     490:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <calTemp+0x1>
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     496:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     49a:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     49e:	28 0f       	add	r18, r24
     4a0:	39 1f       	adc	r19, r25
     4a2:	20 93 90 23 	sts	0x2390, r18	; 0x802390 <calTemp>
     4a6:	30 93 91 23 	sts	0x2391, r19	; 0x802391 <calTemp+0x1>
     4aa:	80 91 90 23 	lds	r24, 0x2390	; 0x802390 <calTemp>
     4ae:	90 91 91 23 	lds	r25, 0x2391	; 0x802391 <calTemp+0x1>
     4b2:	8f 77       	andi	r24, 0x7F	; 127
     4b4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     4b8:	08 95       	ret

000004ba <tiny_calibration_find_values>:
volatile int gradient;
volatile unsigned int calChange;
#define NUM_INAROW 12
volatile unsigned char inarow = NUM_INAROW;

void tiny_calibration_find_values(){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
	unsigned int cnt = TC_CALI.CNT;
     4be:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
     4c2:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	gradient = cnt - last_val;
     4c6:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <last_val>
     4ca:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <last_val+0x1>
     4ce:	9e 01       	movw	r18, r28
     4d0:	28 1b       	sub	r18, r24
     4d2:	39 0b       	sbc	r19, r25
     4d4:	20 93 93 23 	sts	0x2393, r18	; 0x802393 <gradient>
     4d8:	30 93 94 23 	sts	0x2394, r19	; 0x802394 <gradient+0x1>
	
	//Find the negative value first.
	if(calibration_values_found == 0x00){
     4dc:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     4e0:	81 11       	cpse	r24, r1
     4e2:	4d c0       	rjmp	.+154    	; 0x57e <tiny_calibration_find_values+0xc4>
		if((gradient < -50) && (gradient > -150)){
     4e4:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     4e8:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     4ec:	8e 3c       	cpi	r24, 0xCE	; 206
     4ee:	9f 4f       	sbci	r25, 0xFF	; 255
     4f0:	e4 f4       	brge	.+56     	; 0x52a <tiny_calibration_find_values+0x70>
     4f2:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     4f6:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     4fa:	8b 36       	cpi	r24, 0x6B	; 107
     4fc:	9f 4f       	sbci	r25, 0xFF	; 255
     4fe:	ac f0       	brlt	.+42     	; 0x52a <tiny_calibration_find_values+0x70>
			if(inarow){
     500:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     504:	88 23       	and	r24, r24
     506:	31 f0       	breq	.+12     	; 0x514 <tiny_calibration_find_values+0x5a>
				inarow--;
     508:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     512:	35 c0       	rjmp	.+106    	; 0x57e <tiny_calibration_find_values+0xc4>
				}else{
				cali_value_negative_gradient = DFLLRC2M.CALA;
     514:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     518:	80 93 92 23 	sts	0x2392, r24	; 0x802392 <cali_value_negative_gradient>
				calibration_values_found = 0x01;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 ac 20 	sts	0x20AC, r24	; 0x8020ac <__data_end>
				inarow = NUM_INAROW;
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     528:	2a c0       	rjmp	.+84     	; 0x57e <tiny_calibration_find_values+0xc4>
			}
		}
		else{
			inarow = NUM_INAROW;
     52a:	8c e0       	ldi	r24, 0x0C	; 12
     52c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
			calChange = gradient < -150 ? 1 : -1;
     530:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     534:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     538:	8a 36       	cpi	r24, 0x6A	; 106
     53a:	9f 4f       	sbci	r25, 0xFF	; 255
     53c:	1c f0       	brlt	.+6      	; 0x544 <tiny_calibration_find_values+0x8a>
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	9f ef       	ldi	r25, 0xFF	; 255
     542:	02 c0       	rjmp	.+4      	; 0x548 <tiny_calibration_find_values+0x8e>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	80 93 8d 23 	sts	0x238D, r24	; 0x80238d <calChange>
     54c:	90 93 8e 23 	sts	0x238E, r25	; 0x80238e <calChange+0x1>
			calChange -= gradient / 48;
     550:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     554:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     558:	20 91 8d 23 	lds	r18, 0x238D	; 0x80238d <calChange>
     55c:	30 91 8e 23 	lds	r19, 0x238E	; 0x80238e <calChange+0x1>
     560:	60 e3       	ldi	r22, 0x30	; 48
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <__divmodhi4>
     568:	26 1b       	sub	r18, r22
     56a:	37 0b       	sbc	r19, r23
     56c:	20 93 8d 23 	sts	0x238D, r18	; 0x80238d <calChange>
     570:	30 93 8e 23 	sts	0x238E, r19	; 0x80238e <calChange+0x1>
			tiny_calibration_safe_add(calChange);
     574:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <calChange>
     578:	90 91 8e 23 	lds	r25, 0x238E	; 0x80238e <calChange+0x1>
     57c:	34 df       	rcall	.-408    	; 0x3e6 <tiny_calibration_safe_add>
		}
	}
	
	//Search for the positive gradient
	if(calibration_values_found == 0x01){
     57e:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	29 f5       	brne	.+74     	; 0x5d0 <tiny_calibration_find_values+0x116>
		if(gradient > 50){
     586:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     58a:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     58e:	c3 97       	sbiw	r24, 0x33	; 51
     590:	94 f0       	brlt	.+36     	; 0x5b6 <tiny_calibration_find_values+0xfc>
			if(inarow){
     592:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     596:	88 23       	and	r24, r24
     598:	31 f0       	breq	.+12     	; 0x5a6 <tiny_calibration_find_values+0xec>
				inarow--;
     59a:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <inarow>
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <inarow>
     5a4:	15 c0       	rjmp	.+42     	; 0x5d0 <tiny_calibration_find_values+0x116>
				} else{
				cali_value_positive_gradient = DFLLRC2M.CALA;
     5a6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     5aa:	80 93 8f 23 	sts	0x238F, r24	; 0x80238f <cali_value_positive_gradient>
				calibration_values_found = 0x03;
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	80 93 ac 20 	sts	0x20AC, r24	; 0x8020ac <__data_end>
     5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <tiny_calibration_find_values+0x116>
			}
		}
		else tiny_calibration_safe_add((gradient > 150 ? -1 : 1));
     5b6:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <gradient>
     5ba:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <gradient+0x1>
     5be:	87 39       	cpi	r24, 0x97	; 151
     5c0:	91 05       	cpc	r25, r1
     5c2:	1c f4       	brge	.+6      	; 0x5ca <tiny_calibration_find_values+0x110>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <tiny_calibration_find_values+0x114>
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	0b df       	rcall	.-490    	; 0x3e6 <tiny_calibration_safe_add>
	}
	last_val = cnt;
     5d0:	c0 93 03 20 	sts	0x2003, r28	; 0x802003 <last_val>
     5d4:	d0 93 04 20 	sts	0x2004, r29	; 0x802004 <last_val+0x1>
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <magnitude_difference>:
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     5de:	86 17       	cp	r24, r22
     5e0:	97 07       	cpc	r25, r23
     5e2:	79 f0       	breq	.+30     	; 0x602 <magnitude_difference+0x24>
	if(a>b)	return a - b;
     5e4:	68 17       	cp	r22, r24
     5e6:	79 07       	cpc	r23, r25
     5e8:	28 f4       	brcc	.+10     	; 0x5f4 <magnitude_difference+0x16>
     5ea:	9c 01       	movw	r18, r24
     5ec:	26 1b       	sub	r18, r22
     5ee:	37 0b       	sbc	r19, r23
     5f0:	b9 01       	movw	r22, r18
     5f2:	09 c0       	rjmp	.+18     	; 0x606 <magnitude_difference+0x28>
	if(b>a)	return b - a;
     5f4:	86 17       	cp	r24, r22
     5f6:	97 07       	cpc	r25, r23
     5f8:	18 f4       	brcc	.+6      	; 0x600 <magnitude_difference+0x22>
     5fa:	68 1b       	sub	r22, r24
     5fc:	79 0b       	sbc	r23, r25
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <magnitude_difference+0x28>
     600:	08 95       	ret
		return;
	}
}

unsigned int magnitude_difference(unsigned int a, unsigned int b){
	if(a==b) return 0;
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	86 2f       	mov	r24, r22
     608:	97 2f       	mov	r25, r23
	if(a>b)	return a - b;
	if(b>a)	return b - a;
}
     60a:	08 95       	ret

0000060c <tiny_calibration_layer2>:
}

#define LAYER2_INTERVAL 64
#define MAXIMUM_DEVIATION 1
volatile unsigned int layer2_counter = LAYER2_INTERVAL;
void tiny_calibration_layer2(){
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
	//Run only once every LAYER2_INTERVAL milliseconds.
	if(layer2_counter){
     614:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     618:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     61c:	89 2b       	or	r24, r25
     61e:	51 f0       	breq	.+20     	; 0x634 <tiny_calibration_layer2+0x28>
		layer2_counter--;
     620:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     624:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     62e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		return;
     632:	4d c0       	rjmp	.+154    	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	layer2_counter = LAYER2_INTERVAL;
     634:	80 e4       	ldi	r24, 0x40	; 64
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     63c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	
	//Return if a median TRFCNT hasn't been set yet.
	if(median_TRFCNT == 65535){
     640:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     644:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <tiny_calibration_layer2+0x42>
     64c:	40 c0       	rjmp	.+128    	; 0x6ce <tiny_calibration_layer2+0xc2>
		return;
	}
	unsigned int TRFCNT_temp = DMA.CH0.TRFCNT;
     64e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     652:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	TRFCNT_temp = TRFCNT_temp % (global_mode > 5 ? PACKET_SIZE : HALFPACKET_SIZE);
     656:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <global_mode>
     65a:	26 30       	cpi	r18, 0x06	; 6
     65c:	18 f4       	brcc	.+6      	; 0x664 <tiny_calibration_layer2+0x58>
     65e:	67 e7       	ldi	r22, 0x77	; 119
     660:	71 e0       	ldi	r23, 0x01	; 1
     662:	02 c0       	rjmp	.+4      	; 0x668 <tiny_calibration_layer2+0x5c>
     664:	6e ee       	ldi	r22, 0xEE	; 238
     666:	72 e0       	ldi	r23, 0x02	; 2
     668:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__udivmodhi4>
     66c:	08 2f       	mov	r16, r24
     66e:	19 2f       	mov	r17, r25
     670:	c8 2f       	mov	r28, r24
     672:	d1 2f       	mov	r29, r17
	
	if((TRFCNT_temp > median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     674:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     678:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     67c:	8c 17       	cp	r24, r28
     67e:	9d 07       	cpc	r25, r29
     680:	80 f4       	brcc	.+32     	; 0x6a2 <tiny_calibration_layer2+0x96>
     682:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     686:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     68a:	80 2f       	mov	r24, r16
     68c:	91 2f       	mov	r25, r17
     68e:	a7 df       	rcall	.-178    	; 0x5de <magnitude_difference>
     690:	02 97       	sbiw	r24, 0x02	; 2
     692:	38 f0       	brcs	.+14     	; 0x6a2 <tiny_calibration_layer2+0x96>
		TC_CALI.PERBUF = 24000;
     694:	80 ec       	ldi	r24, 0xC0	; 192
     696:	9d e5       	ldi	r25, 0x5D	; 93
     698:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     69c:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
     6a0:	16 c0       	rjmp	.+44     	; 0x6ce <tiny_calibration_layer2+0xc2>
	}
	if((TRFCNT_temp < median_TRFCNT) &&  (magnitude_difference(TRFCNT_temp, median_TRFCNT) > MAXIMUM_DEVIATION)){
     6a2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
     6a6:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6aa:	c8 17       	cp	r28, r24
     6ac:	d9 07       	cpc	r29, r25
     6ae:	78 f4       	brcc	.+30     	; 0x6ce <tiny_calibration_layer2+0xc2>
     6b0:	60 91 07 20 	lds	r22, 0x2007	; 0x802007 <median_TRFCNT>
     6b4:	70 91 08 20 	lds	r23, 0x2008	; 0x802008 <median_TRFCNT+0x1>
     6b8:	80 2f       	mov	r24, r16
     6ba:	91 2f       	mov	r25, r17
     6bc:	90 df       	rcall	.-224    	; 0x5de <magnitude_difference>
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	30 f0       	brcs	.+12     	; 0x6ce <tiny_calibration_layer2+0xc2>
		TC_CALI.PERBUF = 23999;
     6c2:	8f eb       	ldi	r24, 0xBF	; 191
     6c4:	9d e5       	ldi	r25, 0x5D	; 93
     6c6:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <__TEXT_REGION_LENGTH__+0x700a36>
     6ca:	90 93 37 0a 	sts	0x0A37, r25	; 0x800a37 <__TEXT_REGION_LENGTH__+0x700a37>
		return;
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <tiny_calibration_synchronise_phase>:
	if(b>a)	return b - a;
}

void tiny_calibration_synchronise_phase(unsigned int phase, unsigned int precision){
	//Wait for the calibration timer to roughly equal a phase value, then return.
	unsigned int maxVal = phase + precision;
     6d8:	ac 01       	movw	r20, r24
     6da:	46 0f       	add	r20, r22
     6dc:	57 1f       	adc	r21, r23
	unsigned int minVal = phase - precision;
     6de:	86 1b       	sub	r24, r22
     6e0:	97 0b       	sbc	r25, r23
	while (!((TC_CALI.CNT < maxVal) && (TC_CALI.CNT > minVal)));
     6e2:	e0 e0       	ldi	r30, 0x00	; 0
     6e4:	fa e0       	ldi	r31, 0x0A	; 10
     6e6:	20 a1       	ldd	r18, Z+32	; 0x20
     6e8:	31 a1       	ldd	r19, Z+33	; 0x21
     6ea:	24 17       	cp	r18, r20
     6ec:	35 07       	cpc	r19, r21
     6ee:	d8 f7       	brcc	.-10     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
     6f0:	20 a1       	ldd	r18, Z+32	; 0x20
     6f2:	31 a1       	ldd	r19, Z+33	; 0x21
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	b0 f7       	brcc	.-20     	; 0x6e6 <tiny_calibration_synchronise_phase+0xe>
	return;
}
     6fa:	08 95       	ret

000006fc <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     6fc:	e0 e8       	ldi	r30, 0x80	; 128
     6fe:	f6 e0       	ldi	r31, 0x06	; 6
     700:	8f e0       	ldi	r24, 0x0F	; 15
     702:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	84 83       	std	Z+4, r24	; 0x04
     708:	08 95       	ret

0000070a <eeprom_safe_read>:
 *  Author: Esposch
 */ 
#include <asf.h>
#include "tiny_eeprom.h"

void eeprom_safe_read(){
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     710:	c0 e4       	ldi	r28, 0x40	; 64
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     716:	80 e4       	ldi	r24, 0x40	; 64
     718:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_read_buffer(EEPROM_CURRENT_PAGE*EEPROM_PAGE_SIZE, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     71a:	40 e2       	ldi	r20, 0x20	; 32
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	68 ec       	ldi	r22, 0xC8	; 200
     720:	7d e2       	ldi	r23, 0x2D	; 45
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <nvm_eeprom_read_buffer>
	CLK.PSCTRL = previous_clk_settings;
     72a:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	08 95       	ret

00000734 <eeprom_safe_write>:

void eeprom_safe_write(){
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
	unsigned char previous_clk_settings = CLK.PSCTRL;
     73a:	c0 e4       	ldi	r28, 0x40	; 64
     73c:	d0 e0       	ldi	r29, 0x00	; 0
     73e:	19 81       	ldd	r17, Y+1	; 0x01
	CLK.PSCTRL = CLK_PSADIV4_bm; //Slow down the clock to prevent EEPROM misses
     740:	80 e4       	ldi	r24, 0x40	; 64
     742:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_load_page_to_buffer(eeprom_buffer_write);
     744:	8b ec       	ldi	r24, 0xCB	; 203
     746:	97 e2       	ldi	r25, 0x27	; 39
     748:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <nvm_eeprom_load_page_to_buffer>
	nvm_eeprom_atomic_write_page(EEPROM_CURRENT_PAGE);
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 11 10 	call	0x2022	; 0x2022 <nvm_eeprom_atomic_write_page>
	CLK.PSCTRL = previous_clk_settings;
     752:	19 83       	std	Y+1, r17	; 0x01
	return;
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     75c:	08 95       	ret

0000075e <iso_callback>:
bool main_setup_in_received(void)
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	84 2f       	mov	r24, r20
	#ifndef SINGLE_ENDPOINT_INTERFACE
		unsigned short offset = (ep - 0x81) * 125;
     764:	24 2f       	mov	r18, r20
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	21 58       	subi	r18, 0x81	; 129
     76a:	31 09       	sbc	r19, r1
     76c:	9d e7       	ldi	r25, 0x7D	; 125
     76e:	92 9f       	mul	r25, r18
     770:	b0 01       	movw	r22, r0
     772:	93 9f       	mul	r25, r19
     774:	70 0d       	add	r23, r0
     776:	11 24       	eor	r1, r1
		if (global_mode < 5){
     778:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <global_mode>
     77c:	95 30       	cpi	r25, 0x05	; 5
     77e:	d0 f4       	brcc	.+52     	; 0x7b4 <iso_callback+0x56>
			if(ep > 0x83) offset += 375; //Shift from range [375, 750]  to [750, 1125]  Don't do this in modes 6 and 7 because they use 750 byte long sub-buffers.
     780:	44 38       	cpi	r20, 0x84	; 132
     782:	10 f0       	brcs	.+4      	; 0x788 <iso_callback+0x2a>
     784:	69 58       	subi	r22, 0x89	; 137
     786:	7e 4f       	sbci	r23, 0xFE	; 254
			udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * HALFPACKET_SIZE + offset], 125, iso_callback);
     788:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <usb_state>
     78c:	47 e7       	ldi	r20, 0x77	; 119
     78e:	51 e0       	ldi	r21, 0x01	; 1
     790:	94 9f       	mul	r25, r20
     792:	90 01       	movw	r18, r0
     794:	95 9f       	mul	r25, r21
     796:	30 0d       	add	r19, r0
     798:	11 24       	eor	r1, r1
     79a:	62 0f       	add	r22, r18
     79c:	73 1f       	adc	r23, r19
     79e:	ab 01       	movw	r20, r22
     7a0:	44 51       	subi	r20, 0x14	; 20
     7a2:	58 4d       	sbci	r21, 0xD8	; 216
     7a4:	0f ea       	ldi	r16, 0xAF	; 175
     7a6:	13 e0       	ldi	r17, 0x03	; 3
     7a8:	2d e7       	ldi	r18, 0x7D	; 125
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	0e 94 ac 14 	call	0x2958	; 0x2958 <udd_ep_run>
     7b2:	15 c0       	rjmp	.+42     	; 0x7de <iso_callback+0x80>
		}
		else{
			udd_ep_run(ep, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE + offset], 125, iso_callback);
     7b4:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <usb_state>
     7b8:	2e ee       	ldi	r18, 0xEE	; 238
     7ba:	32 e0       	ldi	r19, 0x02	; 2
     7bc:	92 9f       	mul	r25, r18
     7be:	a0 01       	movw	r20, r0
     7c0:	93 9f       	mul	r25, r19
     7c2:	50 0d       	add	r21, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	64 0f       	add	r22, r20
     7c8:	75 1f       	adc	r23, r21
     7ca:	ab 01       	movw	r20, r22
     7cc:	44 51       	subi	r20, 0x14	; 20
     7ce:	58 4d       	sbci	r21, 0xD8	; 216
     7d0:	0f ea       	ldi	r16, 0xAF	; 175
     7d2:	13 e0       	ldi	r17, 0x03	; 3
     7d4:	2d e7       	ldi	r18, 0x7D	; 125
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	0e 94 ac 14 	call	0x2958	; 0x2958 <udd_ep_run>
		}
		return;
	#else
		udd_ep_run(0x81, false, (uint8_t *)&isoBuf[usb_state * PACKET_SIZE], PACKET_SIZE, iso_callback);
	#endif
}
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <jump_to_bootloader>:
volatile unsigned char eeprom_buffer_write[EEPROM_PAGE_SIZE];
volatile unsigned char eeprom_buffer_read[EEPROM_PAGE_SIZE];

void jump_to_bootloader(){
	void(* start_bootloader)(void) = (void (*)(void))((BOOT_SECTION_START + ATMEL_DFU_OFFSET)>>1);
	EIND = BOOT_SECTION_START>>17;
     7e4:	1c be       	out	0x3c, r1	; 60
	start_bootloader();
     7e6:	ee ef       	ldi	r30, 0xFE	; 254
     7e8:	f0 e4       	ldi	r31, 0x40	; 64
     7ea:	09 95       	icall
     7ec:	08 95       	ret

000007ee <main>:
}

int main(void){	
	eeprom_safe_read();
     7ee:	8d df       	rcall	.-230    	; 0x70a <eeprom_safe_read>
	if(eeprom_buffer_read[0]){
     7f0:	80 91 c8 2d 	lds	r24, 0x2DC8	; 0x802dc8 <eeprom_buffer_read>
     7f4:	88 23       	and	r24, r24
     7f6:	69 f0       	breq	.+26     	; 0x812 <main+0x24>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
     7f8:	80 e2       	ldi	r24, 0x20	; 32
     7fa:	e8 ec       	ldi	r30, 0xC8	; 200
     7fc:	fd e2       	ldi	r31, 0x2D	; 45
     7fe:	ab ec       	ldi	r26, 0xCB	; 203
     800:	b7 e2       	ldi	r27, 0x27	; 39
     802:	01 90       	ld	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	8a 95       	dec	r24
     808:	e1 f7       	brne	.-8      	; 0x802 <main+0x14>
			eeprom_buffer_write[0] = 0;
     80a:	10 92 cb 27 	sts	0x27CB, r1	; 0x8027cb <eeprom_buffer_write>
			eeprom_safe_write();
     80e:	92 df       	rcall	.-220    	; 0x734 <eeprom_safe_write>
			//eeprom_safe_read();
			jump_to_bootloader();
     810:	e9 df       	rcall	.-46     	; 0x7e4 <jump_to_bootloader>
	}
	
	irq_initialize_vectors();
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     818:	78 94       	sei
//	sysclk_init();	
	tiny_calibration_init();
     81a:	2d dd       	rcall	.-1446   	; 0x276 <tiny_calibration_init>
		
	board_init();
     81c:	9f df       	rcall	.-194    	; 0x75c <board_init>
	udc_start();
     81e:	d6 d7       	rcall	.+4012   	; 0x17cc <udc_start>
	tiny_dac_setup();
     820:	7c d1       	rcall	.+760    	; 0xb1a <tiny_dac_setup>
	tiny_dma_setup();
     822:	9f d1       	rcall	.+830    	; 0xb62 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	28 d1       	rcall	.+592    	; 0xa7a <tiny_adc_setup>
	tiny_adc_pid_setup();
     82a:	14 d1       	rcall	.+552    	; 0xa54 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     82c:	8c e0       	ldi	r24, 0x0C	; 12
     82e:	08 d1       	rcall	.+528    	; 0xa40 <tiny_adc_ch1setup>
	tiny_timer_setup();
     830:	61 d5       	rcall	.+2754   	; 0x12f4 <tiny_timer_setup>
	tiny_uart_setup();
     832:	1c d6       	rcall	.+3128   	; 0x146c <tiny_uart_setup>
	tiny_spi_setup();
     834:	35 d6       	rcall	.+3178   	; 0x14a0 <tiny_spi_setup>
	tiny_dig_setup();
     836:	62 df       	rcall	.-316    	; 0x6fc <tiny_dig_setup>
	//USARTC0.DATA = 0x55;
	//asm("nop");
	


	strcpy(uds.header, "debug123");
     838:	89 e0       	ldi	r24, 0x09	; 9
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f0 e2       	ldi	r31, 0x20	; 32
     83e:	ae e9       	ldi	r26, 0x9E	; 158
     840:	b3 e2       	ldi	r27, 0x23	; 35
     842:	01 90       	ld	r0, Z+
     844:	0d 92       	st	X+, r0
     846:	8a 95       	dec	r24
     848:	e1 f7       	brne	.-8      	; 0x842 <main+0x54>
	...
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			asm("nop");
			if(modeChanged){
     866:	80 91 b1 20 	lds	r24, 0x20B1	; 0x8020b1 <modeChanged>
     86a:	88 23       	and	r24, r24
     86c:	71 f3       	breq	.-36     	; 0x84a <main+0x5c>
				switch(futureMode){
     86e:	e0 91 ca 25 	lds	r30, 0x25CA	; 0x8025ca <futureMode>
     872:	8e 2f       	mov	r24, r30
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	88 30       	cpi	r24, 0x08	; 8
     878:	91 05       	cpc	r25, r1
     87a:	a0 f4       	brcc	.+40     	; 0x8a4 <main+0xb6>
     87c:	fc 01       	movw	r30, r24
     87e:	e2 50       	subi	r30, 0x02	; 2
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
     886:	99 d1       	rcall	.+818    	; 0xbba <tiny_dma_set_mode_0>
					break;
     888:	0d c0       	rjmp	.+26     	; 0x8a4 <main+0xb6>
					case 1:
					tiny_dma_set_mode_1();
     88a:	09 d2       	rcall	.+1042   	; 0xc9e <tiny_dma_set_mode_1>
					break;
     88c:	0b c0       	rjmp	.+22     	; 0x8a4 <main+0xb6>
					case 2:
					tiny_dma_set_mode_2();
     88e:	90 d2       	rcall	.+1312   	; 0xdb0 <tiny_dma_set_mode_2>
					break;
     890:	09 c0       	rjmp	.+18     	; 0x8a4 <main+0xb6>
					case 3:
					tiny_dma_set_mode_3();
     892:	14 d3       	rcall	.+1576   	; 0xebc <tiny_dma_set_mode_3>
					break;
     894:	07 c0       	rjmp	.+14     	; 0x8a4 <main+0xb6>
					case 4:
					tiny_dma_set_mode_4();
     896:	a0 d3       	rcall	.+1856   	; 0xfd8 <tiny_dma_set_mode_4>
					break;
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <main+0xb6>
					case 5:
					tiny_dma_set_mode_5();
     89a:	26 d4       	rcall	.+2124   	; 0x10e8 <tiny_dma_set_mode_5>
					break;
     89c:	03 c0       	rjmp	.+6      	; 0x8a4 <main+0xb6>
					case 6:
					tiny_dma_set_mode_6();
     89e:	25 d4       	rcall	.+2122   	; 0x10ea <tiny_dma_set_mode_6>
					break;
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <main+0xb6>
					case 7:
					tiny_dma_set_mode_7();
     8a2:	96 d4       	rcall	.+2348   	; 0x11d0 <tiny_dma_set_mode_7>
					break;
				}
				modeChanged = 0;
     8a4:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <modeChanged>
     8a8:	d0 cf       	rjmp	.-96     	; 0x84a <main+0x5c>

000008aa <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     8aa:	08 95       	ret

000008ac <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     8ac:	08 95       	ret

000008ae <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
		default:
		break;
	}
	#endif

	uds.trfcntL0 = DMA.CH0.TRFCNTL;
     8b2:	a0 e0       	ldi	r26, 0x00	; 0
     8b4:	b1 e0       	ldi	r27, 0x01	; 1
     8b6:	54 96       	adiw	r26, 0x14	; 20
     8b8:	8c 91       	ld	r24, X
     8ba:	54 97       	sbiw	r26, 0x14	; 20
     8bc:	ee e9       	ldi	r30, 0x9E	; 158
     8be:	f3 e2       	ldi	r31, 0x23	; 35
     8c0:	81 87       	std	Z+9, r24	; 0x09
	uds.trfcntH0 = DMA.CH0.TRFCNTH;	
     8c2:	55 96       	adiw	r26, 0x15	; 21
     8c4:	8c 91       	ld	r24, X
     8c6:	55 97       	sbiw	r26, 0x15	; 21
     8c8:	82 87       	std	Z+10, r24	; 0x0a
	uds.trfcntL1 = DMA.CH1.TRFCNTL;
     8ca:	94 96       	adiw	r26, 0x24	; 36
     8cc:	8c 91       	ld	r24, X
     8ce:	94 97       	sbiw	r26, 0x24	; 36
     8d0:	83 87       	std	Z+11, r24	; 0x0b
	uds.trfcntH1 = DMA.CH1.TRFCNTH;
     8d2:	95 96       	adiw	r26, 0x25	; 37
     8d4:	8c 91       	ld	r24, X
     8d6:	95 97       	sbiw	r26, 0x25	; 37
     8d8:	84 87       	std	Z+12, r24	; 0x0c
	uds.counterL = TC_CALI.CNTL;
     8da:	c0 e0       	ldi	r28, 0x00	; 0
     8dc:	da e0       	ldi	r29, 0x0A	; 10
     8de:	88 a1       	ldd	r24, Y+32	; 0x20
     8e0:	85 8b       	std	Z+21, r24	; 0x15
	uds.counterH = TC_CALI.CNTH;
     8e2:	89 a1       	ldd	r24, Y+33	; 0x21
     8e4:	86 8b       	std	Z+22, r24	; 0x16
	if((DMA.CH0.TRFCNT > 325) && (DMA.CH0.TRFCNT < 425)){
     8e6:	54 96       	adiw	r26, 0x14	; 20
     8e8:	8d 91       	ld	r24, X+
     8ea:	9c 91       	ld	r25, X
     8ec:	55 97       	sbiw	r26, 0x15	; 21
     8ee:	86 34       	cpi	r24, 0x46	; 70
     8f0:	91 40       	sbci	r25, 0x01	; 1
     8f2:	80 f0       	brcs	.+32     	; 0x914 <main_sof_action+0x66>
     8f4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     8f8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     8fc:	89 3a       	cpi	r24, 0xA9	; 169
     8fe:	91 40       	sbci	r25, 0x01	; 1
     900:	48 f4       	brcc	.+18     	; 0x914 <main_sof_action+0x66>
		currentTrfcnt = DMA.CH0.TRFCNT;
     902:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     906:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     90a:	80 93 e8 2d 	sts	0x2DE8, r24	; 0x802de8 <currentTrfcnt>
     90e:	90 93 e9 2d 	sts	0x2DE9, r25	; 0x802de9 <currentTrfcnt+0x1>
		asm("nop");
     912:	00 00       	nop
	}
	if(firstFrame){
     914:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <firstFrame>
     918:	88 23       	and	r24, r24
     91a:	39 f0       	breq	.+14     	; 0x92a <main_sof_action+0x7c>
		tiny_calibration_first_sof();
     91c:	e2 dc       	rcall	.-1596   	; 0x2e2 <tiny_calibration_first_sof>
		firstFrame = 0;
     91e:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <firstFrame>
		tcinit = 1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <tcinit>
		return;
     928:	35 c0       	rjmp	.+106    	; 0x994 <main_sof_action+0xe6>
	}
	else{
		if(tcinit){
     92a:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <tcinit>
     92e:	88 23       	and	r24, r24
     930:	41 f0       	breq	.+16     	; 0x942 <main_sof_action+0x94>
			if(calibration_values_found == 0x03){
     932:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__data_end>
     936:	83 30       	cpi	r24, 0x03	; 3
     938:	19 f4       	brne	.+6      	; 0x940 <main_sof_action+0x92>
				tiny_calibration_maintain();
     93a:	e5 dc       	rcall	.-1590   	; 0x306 <tiny_calibration_maintain>
				tiny_calibration_layer2();
     93c:	67 de       	rcall	.-818    	; 0x60c <tiny_calibration_layer2>
     93e:	01 c0       	rjmp	.+2      	; 0x942 <main_sof_action+0x94>
			} else tiny_calibration_find_values();
     940:	bc dd       	rcall	.-1160   	; 0x4ba <tiny_calibration_find_values>
			}
			else debug_divider++;*/
		}
	}
	
	if(debugOnNextEnd){
     942:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <debugOnNextEnd>
     946:	88 23       	and	r24, r24
     948:	51 f0       	breq	.+20     	; 0x95e <main_sof_action+0xb0>
		currentTrfcnt = DMA.CH0.TRFCNT;
     94a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     94e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     952:	80 93 e8 2d 	sts	0x2DE8, r24	; 0x802de8 <currentTrfcnt>
     956:	90 93 e9 2d 	sts	0x2DE9, r25	; 0x802de9 <currentTrfcnt+0x1>
		debugOnNextEnd = 0;
     95a:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <debugOnNextEnd>
	}
	#ifndef SINGLE_ENDPOINT_INTERFACE
		if(global_mode < 5){
     95e:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
     962:	85 30       	cpi	r24, 0x05	; 5
     964:	60 f4       	brcc	.+24     	; 0x97e <main_sof_action+0xd0>
			usb_state = (DMA.CH0.TRFCNT < 375) ? 1 : 0;
     966:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     96a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	27 37       	cpi	r18, 0x77	; 119
     972:	31 40       	sbci	r19, 0x01	; 1
     974:	08 f0       	brcs	.+2      	; 0x978 <main_sof_action+0xca>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <usb_state>
     97c:	0b c0       	rjmp	.+22     	; 0x994 <main_sof_action+0xe6>
		}
		else{
			usb_state = (DMA.CH0.TRFCNT < 750) ? 1 : 0;
     97e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     982:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	2e 3e       	cpi	r18, 0xEE	; 238
     98a:	32 40       	sbci	r19, 0x02	; 2
     98c:	08 f0       	brcs	.+2      	; 0x990 <main_sof_action+0xe2>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <usb_state>
	#else
		usb_state = !usb_state;
	#endif
		
	return;
}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <main_vendor_enable>:

bool main_vendor_enable(void)
{
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
	main_b_vendor_enable = true;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <main_b_vendor_enable>
	firstFrame = 1;
     9a4:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <firstFrame>
	udd_ep_run(0x81, false, (uint8_t *)&isoBuf[0], 125, iso_callback);
     9a8:	0f ea       	ldi	r16, 0xAF	; 175
     9aa:	13 e0       	ldi	r17, 0x03	; 3
     9ac:	2d e7       	ldi	r18, 0x7D	; 125
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	4c ee       	ldi	r20, 0xEC	; 236
     9b2:	57 e2       	ldi	r21, 0x27	; 39
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	81 e8       	ldi	r24, 0x81	; 129
     9b8:	0e 94 ac 14 	call	0x2958	; 0x2958 <udd_ep_run>
	#ifndef SINGLE_ENDPOINT_INTERFACE
	udd_ep_run(0x82, false, (uint8_t *)&isoBuf[125], 125, iso_callback);
     9bc:	2d e7       	ldi	r18, 0x7D	; 125
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	49 e6       	ldi	r20, 0x69	; 105
     9c2:	58 e2       	ldi	r21, 0x28	; 40
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	82 e8       	ldi	r24, 0x82	; 130
     9c8:	0e 94 ac 14 	call	0x2958	; 0x2958 <udd_ep_run>
	udd_ep_run(0x83, false, (uint8_t *)&isoBuf[250], 125, iso_callback);
     9cc:	2d e7       	ldi	r18, 0x7D	; 125
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	46 ee       	ldi	r20, 0xE6	; 230
     9d2:	58 e2       	ldi	r21, 0x28	; 40
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	83 e8       	ldi	r24, 0x83	; 131
     9d8:	0e 94 ac 14 	call	0x2958	; 0x2958 <udd_ep_run>
	udd_ep_run(0x84, false, (uint8_t *)&isoBuf[375], 125, iso_callback);
     9dc:	2d e7       	ldi	r18, 0x7D	; 125
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	43 e6       	ldi	r20, 0x63	; 99
     9e2:	59 e2       	ldi	r21, 0x29	; 41
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	84 e8       	ldi	r24, 0x84	; 132
     9e8:	0e 94 ac 14 	call	0x2958	; 0x2958 <udd_ep_run>
	udd_ep_run(0x85, false, (uint8_t *)&isoBuf[500], 125, iso_callback);
     9ec:	2d e7       	ldi	r18, 0x7D	; 125
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 ee       	ldi	r20, 0xE0	; 224
     9f2:	59 e2       	ldi	r21, 0x29	; 41
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	85 e8       	ldi	r24, 0x85	; 133
     9f8:	0e 94 ac 14 	call	0x2958	; 0x2958 <udd_ep_run>
	udd_ep_run(0x86, false, (uint8_t *)&isoBuf[625], 125, iso_callback);
     9fc:	2d e7       	ldi	r18, 0x7D	; 125
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	4d e5       	ldi	r20, 0x5D	; 93
     a02:	5a e2       	ldi	r21, 0x2A	; 42
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	86 e8       	ldi	r24, 0x86	; 134
     a08:	0e 94 ac 14 	call	0x2958	; 0x2958 <udd_ep_run>
	#endif
	return true;
}
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     a14:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <main_b_vendor_enable>
     a18:	08 95       	ret

00000a1a <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	08 95       	ret

00000a1e <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	08 95       	ret

00000a22 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     a22:	e0 e0       	ldi	r30, 0x00	; 0
     a24:	f2 e0       	ldi	r31, 0x02	; 2
     a26:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a28:	98 2f       	mov	r25, r24
     a2a:	9c 71       	andi	r25, 0x1C	; 28
     a2c:	93 68       	ori	r25, 0x83	; 131
     a2e:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     a30:	88 1f       	adc	r24, r24
     a32:	88 27       	eor	r24, r24
     a34:	88 1f       	adc	r24, r24
     a36:	88 0f       	add	r24, r24
     a38:	81 a3       	std	Z+33, r24	; 0x21
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a3a:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     a3c:	16 a2       	std	Z+38, r1	; 0x26
     a3e:	08 95       	ret

00000a40 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     a40:	e0 e0       	ldi	r30, 0x00	; 0
     a42:	f2 e0       	ldi	r31, 0x02	; 2
     a44:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a46:	83 68       	ori	r24, 0x83	; 131
     a48:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     a4a:	80 e1       	ldi	r24, 0x10	; 16
     a4c:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a4e:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     a50:	16 aa       	std	Z+54, r1	; 0x36
     a52:	08 95       	ret

00000a54 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     a54:	e0 e0       	ldi	r30, 0x00	; 0
     a56:	f2 e0       	ldi	r31, 0x02	; 2
     a58:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     a5a:	83 e8       	ldi	r24, 0x83	; 131
     a5c:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     a5e:	8f e2       	ldi	r24, 0x2F	; 47
     a60:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a62:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     a64:	16 a6       	std	Z+46, r1	; 0x2e
     a66:	08 95       	ret

00000a68 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     a68:	aa ec       	ldi	r26, 0xCA	; 202
     a6a:	b1 e0       	ldi	r27, 0x01	; 1
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     a70:	e8 2f       	mov	r30, r24
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     a76:	1c 92       	st	X, r1

	return( result );
}
     a78:	08 95       	ret

00000a7a <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     a7e:	e0 e7       	ldi	r30, 0x70	; 112
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	9d 7f       	andi	r25, 0xFD	; 253
     a86:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     a88:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     a8c:	62 30       	cpi	r22, 0x02	; 2
     a8e:	31 f1       	breq	.+76     	; 0xadc <tiny_adc_setup+0x62>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f2 e0       	ldi	r31, 0x02	; 2
     a94:	9c e1       	ldi	r25, 0x1C	; 28
     a96:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     a98:	90 e4       	ldi	r25, 0x40	; 64
     a9a:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     a9c:	81 11       	cpse	r24, r1
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <tiny_adc_setup+0x2a>
     aa0:	80 e4       	ldi	r24, 0x40	; 64
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <tiny_adc_setup+0x2c>
     aa4:	80 ec       	ldi	r24, 0xC0	; 192
     aa6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     aaa:	61 30       	cpi	r22, 0x01	; 1
     aac:	11 f0       	breq	.+4      	; 0xab2 <tiny_adc_setup+0x38>
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <tiny_adc_setup+0x3a>
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	c0 e0       	ldi	r28, 0x00	; 0
     ab6:	d2 e0       	ldi	r29, 0x02	; 2
     ab8:	8c 83       	std	Y+4, r24	; 0x04
	#else
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
	#endif
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	d5 df       	rcall	.-86     	; 0xa68 <ReadCalibrationByte>
     abe:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     ac0:	81 e2       	ldi	r24, 0x21	; 33
     ac2:	d2 df       	rcall	.-92     	; 0xa68 <ReadCalibrationByte>
     ac4:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     ac6:	18 8e       	std	Y+24, r1	; 0x18
     ac8:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     ace:	c2 df       	rcall	.-124    	; 0xa54 <tiny_adc_pid_setup>
     ad0:	0e c0       	rjmp	.+28     	; 0xaee <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ad2:	80 ec       	ldi	r24, 0xC0	; 192
     ad4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	#if OVERCLOCK == 48
		ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV32_gc : ADC_PRESCALER_DIV64_gc;  //ADC Clock = Sysclock/128
     ad8:	84 e0       	ldi	r24, 0x04	; 4
     ada:	ec cf       	rjmp	.-40     	; 0xab4 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     adc:	e0 e0       	ldi	r30, 0x00	; 0
     ade:	f2 e0       	ldi	r31, 0x02	; 2
     ae0:	9e e1       	ldi	r25, 0x1E	; 30
     ae2:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     ae4:	90 e4       	ldi	r25, 0x40	; 64
     ae6:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     ae8:	81 11       	cpse	r24, r1
     aea:	f3 cf       	rjmp	.-26     	; 0xad2 <tiny_adc_setup+0x58>
     aec:	d9 cf       	rjmp	.-78     	; 0xaa0 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <__vector_71>:
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}

ISR(ADCA_CH0_vect){
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	8f 93       	push	r24
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	ADCA.CH0.INTFLAGS = 0x01;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
     b0e:	8f 91       	pop	r24
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     b1e:	e0 e7       	ldi	r30, 0x70	; 112
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	8b 7f       	andi	r24, 0xFB	; 251
     b26:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     b28:	c0 e2       	ldi	r28, 0x20	; 32
     b2a:	d3 e0       	ldi	r29, 0x03	; 3
     b2c:	8d e0       	ldi	r24, 0x0D	; 13
     b2e:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     b30:	80 e4       	ldi	r24, 0x40	; 64
     b32:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     b34:	89 e0       	ldi	r24, 0x09	; 9
     b36:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     b38:	83 e3       	ldi	r24, 0x33	; 51
     b3a:	96 df       	rcall	.-212    	; 0xa68 <ReadCalibrationByte>
     b3c:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     b3e:	82 e3       	ldi	r24, 0x32	; 50
     b40:	93 df       	rcall	.-218    	; 0xa68 <ReadCalibrationByte>
     b42:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     b44:	87 e3       	ldi	r24, 0x37	; 55
     b46:	90 df       	rcall	.-224    	; 0xa68 <ReadCalibrationByte>
     b48:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     b4a:	86 e3       	ldi	r24, 0x36	; 54
     b4c:	8d df       	rcall	.-230    	; 0xa68 <ReadCalibrationByte>
     b4e:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     b50:	e0 e2       	ldi	r30, 0x20	; 32
     b52:	f6 e0       	ldi	r31, 0x06	; 6
     b54:	80 81       	ld	r24, Z
     b56:	83 60       	ori	r24, 0x03	; 3
     b58:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     b5a:	14 82       	std	Z+4, r1	; 0x04
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <tiny_dma_setup>:
		median_TRFCNT_delay = 1; //Wait a few frames before actually setting median_TRFCNT, in case a SOF interrupt was queued during tiny_dma_set_mode_xxx.
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
		
}

void tiny_dma_loop_mode_7(void){
     b62:	e0 e7       	ldi	r30, 0x70	; 112
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	8e 7f       	andi	r24, 0xFE	; 254
     b6a:	80 83       	st	Z, r24
     b6c:	83 e8       	ldi	r24, 0x83	; 131
     b6e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     b72:	08 95       	ret

00000b74 <tiny_dma_flush>:
     b74:	e0 e0       	ldi	r30, 0x00	; 0
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	10 8a       	std	Z+16, r1	; 0x10
     b7a:	80 e4       	ldi	r24, 0x40	; 64
     b7c:	80 8b       	std	Z+16, r24	; 0x10
     b7e:	10 a2       	std	Z+32, r1	; 0x20
     b80:	80 a3       	std	Z+32, r24	; 0x20
     b82:	10 aa       	std	Z+48, r1	; 0x30
     b84:	80 ab       	std	Z+48, r24	; 0x30
     b86:	e0 e4       	ldi	r30, 0x40	; 64
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	10 82       	st	Z, r1
     b8c:	80 83       	st	Z, r24
     b8e:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <b1_state>
     b92:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <b2_state>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <usb_state>
     b9c:	10 92 9c 23 	sts	0x239C, r1	; 0x80239c <dma_ch0_ran>
     ba0:	10 92 9d 23 	sts	0x239D, r1	; 0x80239d <dma_ch0_ran+0x1>
     ba4:	10 92 9a 23 	sts	0x239A, r1	; 0x80239a <dma_ch1_ran>
     ba8:	10 92 9b 23 	sts	0x239B, r1	; 0x80239b <dma_ch1_ran+0x1>
     bac:	08 95       	ret

00000bae <tiny_dma_delayed_set>:
     bae:	80 93 ca 25 	sts	0x25CA, r24	; 0x8025ca <futureMode>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <modeChanged>
     bb8:	08 95       	ret

00000bba <tiny_dma_set_mode_0>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <global_mode>
     bc2:	d8 df       	rcall	.-80     	; 0xb74 <tiny_dma_flush>
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	d1 e0       	ldi	r29, 0x01	; 1
     bc8:	1e aa       	std	Y+54, r1	; 0x36
     bca:	84 e2       	ldi	r24, 0x24	; 36
     bcc:	88 ab       	std	Y+48, r24	; 0x30
     bce:	19 aa       	std	Y+49, r1	; 0x31
     bd0:	49 e5       	ldi	r20, 0x59	; 89
     bd2:	4a ab       	std	Y+50, r20	; 0x32
     bd4:	32 e0       	ldi	r19, 0x02	; 2
     bd6:	3b ab       	std	Y+51, r19	; 0x33
     bd8:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
     bdc:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     be0:	6c ab       	std	Y+52, r22	; 0x34
     be2:	7d ab       	std	Y+53, r23	; 0x35
     be4:	6b ec       	ldi	r22, 0xCB	; 203
     be6:	75 e2       	ldi	r23, 0x25	; 37
     be8:	68 af       	std	Y+56, r22	; 0x38
     bea:	79 af       	std	Y+57, r23	; 0x39
     bec:	1a ae       	std	Y+58, r1	; 0x3a
     bee:	9b e3       	ldi	r25, 0x3B	; 59
     bf0:	9c af       	std	Y+60, r25	; 0x3c
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     bf8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     bfc:	28 a9       	ldd	r18, Y+48	; 0x30
     bfe:	20 68       	ori	r18, 0x80	; 128
     c00:	28 ab       	std	Y+48, r18	; 0x30
     c02:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     c06:	e0 e4       	ldi	r30, 0x40	; 64
     c08:	f1 e0       	ldi	r31, 0x01	; 1
     c0a:	80 83       	st	Z, r24
     c0c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c10:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c14:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     c18:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
     c1c:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
     c20:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     c24:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     c28:	4a eb       	ldi	r20, 0xBA	; 186
     c2a:	53 e2       	ldi	r21, 0x23	; 35
     c2c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c30:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c34:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c38:	29 e3       	ldi	r18, 0x39	; 57
     c3a:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c3e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c42:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     c46:	90 81       	ld	r25, Z
     c48:	90 68       	ori	r25, 0x80	; 128
     c4a:	90 83       	st	Z, r25
     c4c:	18 8a       	std	Y+16, r1	; 0x10
     c4e:	90 e4       	ldi	r25, 0x40	; 64
     c50:	98 8b       	std	Y+16, r25	; 0x10
     c52:	88 8b       	std	Y+16, r24	; 0x10
     c54:	19 8a       	std	Y+17, r1	; 0x11
     c56:	95 e9       	ldi	r25, 0x95	; 149
     c58:	9a 8b       	std	Y+18, r25	; 0x12
     c5a:	90 e1       	ldi	r25, 0x10	; 16
     c5c:	9b 8b       	std	Y+19, r25	; 0x13
     c5e:	4e ee       	ldi	r20, 0xEE	; 238
     c60:	52 e0       	ldi	r21, 0x02	; 2
     c62:	4c 8b       	std	Y+20, r20	; 0x14
     c64:	5d 8b       	std	Y+21, r21	; 0x15
     c66:	88 8f       	std	Y+24, r24	; 0x18
     c68:	39 8f       	std	Y+25, r19	; 0x19
     c6a:	1a 8e       	std	Y+26, r1	; 0x1a
     c6c:	8c ee       	ldi	r24, 0xEC	; 236
     c6e:	97 e2       	ldi	r25, 0x27	; 39
     c70:	8c 8f       	std	Y+28, r24	; 0x1c
     c72:	9d 8f       	std	Y+29, r25	; 0x1d
     c74:	1e 8e       	std	Y+30, r1	; 0x1e
     c76:	68 ec       	ldi	r22, 0xC8	; 200
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	84 ef       	ldi	r24, 0xF4	; 244
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	2c dd       	rcall	.-1448   	; 0x6d8 <tiny_calibration_synchronise_phase>
     c80:	88 ec       	ldi	r24, 0xC8	; 200
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     c88:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     c92:	88 89       	ldd	r24, Y+16	; 0x10
     c94:	80 68       	ori	r24, 0x80	; 128
     c96:	88 8b       	std	Y+16, r24	; 0x10
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <tiny_dma_set_mode_1>:
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	11 e0       	ldi	r17, 0x01	; 1
     ca6:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     caa:	64 df       	rcall	.-312    	; 0xb74 <tiny_dma_flush>
     cac:	c0 e0       	ldi	r28, 0x00	; 0
     cae:	d1 e0       	ldi	r29, 0x01	; 1
     cb0:	18 aa       	std	Y+48, r1	; 0x30
     cb2:	80 e4       	ldi	r24, 0x40	; 64
     cb4:	88 ab       	std	Y+48, r24	; 0x30
     cb6:	84 e0       	ldi	r24, 0x04	; 4
     cb8:	88 ab       	std	Y+48, r24	; 0x30
     cba:	19 aa       	std	Y+49, r1	; 0x31
     cbc:	1a aa       	std	Y+50, r1	; 0x32
     cbe:	4b e4       	ldi	r20, 0x4B	; 75
     cc0:	4b ab       	std	Y+51, r20	; 0x33
     cc2:	1c aa       	std	Y+52, r1	; 0x34
     cc4:	1d aa       	std	Y+53, r1	; 0x35
     cc6:	1e aa       	std	Y+54, r1	; 0x36
     cc8:	8a e0       	ldi	r24, 0x0A	; 10
     cca:	90 e2       	ldi	r25, 0x20	; 32
     ccc:	88 af       	std	Y+56, r24	; 0x38
     cce:	99 af       	std	Y+57, r25	; 0x39
     cd0:	1a ae       	std	Y+58, r1	; 0x3a
     cd2:	60 ea       	ldi	r22, 0xA0	; 160
     cd4:	6c af       	std	Y+60, r22	; 0x3c
     cd6:	38 e0       	ldi	r19, 0x08	; 8
     cd8:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     cdc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ce0:	88 a9       	ldd	r24, Y+48	; 0x30
     ce2:	80 6a       	ori	r24, 0xA0	; 160
     ce4:	88 ab       	std	Y+48, r24	; 0x30
     ce6:	e0 ea       	ldi	r30, 0xA0	; 160
     ce8:	f8 e0       	ldi	r31, 0x08	; 8
     cea:	85 e5       	ldi	r24, 0x55	; 85
     cec:	80 83       	st	Z, r24
     cee:	80 83       	st	Z, r24
     cf0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     cf4:	e0 e4       	ldi	r30, 0x40	; 64
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	84 e2       	ldi	r24, 0x24	; 36
     cfa:	80 83       	st	Z, r24
     cfc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d00:	99 e5       	ldi	r25, 0x59	; 89
     d02:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d0c:	a0 91 0b 20 	lds	r26, 0x200B	; 0x80200b <auxDacBufLen>
     d10:	b0 91 0c 20 	lds	r27, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     d14:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     d18:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     d1c:	ab ec       	ldi	r26, 0xCB	; 203
     d1e:	b5 e2       	ldi	r27, 0x25	; 37
     d20:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d24:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d28:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d2c:	9b e3       	ldi	r25, 0x3B	; 59
     d2e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d32:	93 e0       	ldi	r25, 0x03	; 3
     d34:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d38:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     d3c:	90 81       	ld	r25, Z
     d3e:	90 68       	ori	r25, 0x80	; 128
     d40:	90 83       	st	Z, r25
     d42:	88 a3       	std	Y+32, r24	; 0x20
     d44:	19 a2       	std	Y+33, r1	; 0x21
     d46:	95 e9       	ldi	r25, 0x95	; 149
     d48:	9a a3       	std	Y+34, r25	; 0x22
     d4a:	4b a3       	std	Y+35, r20	; 0x23
     d4c:	4e ee       	ldi	r20, 0xEE	; 238
     d4e:	52 e0       	ldi	r21, 0x02	; 2
     d50:	4c a3       	std	Y+36, r20	; 0x24
     d52:	5d a3       	std	Y+37, r21	; 0x25
     d54:	68 a7       	std	Y+40, r22	; 0x28
     d56:	39 a7       	std	Y+41, r19	; 0x29
     d58:	1a a6       	std	Y+42, r1	; 0x2a
     d5a:	6a ed       	ldi	r22, 0xDA	; 218
     d5c:	7a e2       	ldi	r23, 0x2A	; 42
     d5e:	6c a7       	std	Y+44, r22	; 0x2c
     d60:	7d a7       	std	Y+45, r23	; 0x2d
     d62:	1e a6       	std	Y+46, r1	; 0x2e
     d64:	88 8b       	std	Y+16, r24	; 0x10
     d66:	19 8a       	std	Y+17, r1	; 0x11
     d68:	9a 8b       	std	Y+18, r25	; 0x12
     d6a:	90 e1       	ldi	r25, 0x10	; 16
     d6c:	9b 8b       	std	Y+19, r25	; 0x13
     d6e:	4c 8b       	std	Y+20, r20	; 0x14
     d70:	5d 8b       	std	Y+21, r21	; 0x15
     d72:	88 8f       	std	Y+24, r24	; 0x18
     d74:	29 8f       	std	Y+25, r18	; 0x19
     d76:	1a 8e       	std	Y+26, r1	; 0x1a
     d78:	8c ee       	ldi	r24, 0xEC	; 236
     d7a:	97 e2       	ldi	r25, 0x27	; 39
     d7c:	8c 8f       	std	Y+28, r24	; 0x1c
     d7e:	9d 8f       	std	Y+29, r25	; 0x1d
     d80:	1e 8e       	std	Y+30, r1	; 0x1e
     d82:	68 ec       	ldi	r22, 0xC8	; 200
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	84 ef       	ldi	r24, 0xF4	; 244
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	a6 dc       	rcall	.-1716   	; 0x6d8 <tiny_calibration_synchronise_phase>
     d8c:	88 ec       	ldi	r24, 0xC8	; 200
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     d94:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     d98:	10 93 06 20 	sts	0x2006, r17	; 0x802006 <median_TRFCNT_delay>
     d9c:	88 a1       	ldd	r24, Y+32	; 0x20
     d9e:	80 68       	ori	r24, 0x80	; 128
     da0:	88 a3       	std	Y+32, r24	; 0x20
     da2:	88 89       	ldd	r24, Y+16	; 0x10
     da4:	80 68       	ori	r24, 0x80	; 128
     da6:	88 8b       	std	Y+16, r24	; 0x10
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	08 95       	ret

00000db0 <tiny_dma_set_mode_2>:
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	12 e0       	ldi	r17, 0x02	; 2
     db8:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     dbc:	db de       	rcall	.-586    	; 0xb74 <tiny_dma_flush>
     dbe:	c0 e0       	ldi	r28, 0x00	; 0
     dc0:	d1 e0       	ldi	r29, 0x01	; 1
     dc2:	1e aa       	std	Y+54, r1	; 0x36
     dc4:	84 e2       	ldi	r24, 0x24	; 36
     dc6:	88 ab       	std	Y+48, r24	; 0x30
     dc8:	19 aa       	std	Y+49, r1	; 0x31
     dca:	39 e5       	ldi	r19, 0x59	; 89
     dcc:	3a ab       	std	Y+50, r19	; 0x32
     dce:	1b ab       	std	Y+51, r17	; 0x33
     dd0:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     dd4:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     dd8:	4c ab       	std	Y+52, r20	; 0x34
     dda:	5d ab       	std	Y+53, r21	; 0x35
     ddc:	4b ec       	ldi	r20, 0xCB	; 203
     dde:	55 e2       	ldi	r21, 0x25	; 37
     de0:	48 af       	std	Y+56, r20	; 0x38
     de2:	59 af       	std	Y+57, r21	; 0x39
     de4:	1a ae       	std	Y+58, r1	; 0x3a
     de6:	9b e3       	ldi	r25, 0x3B	; 59
     de8:	9c af       	std	Y+60, r25	; 0x3c
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     df0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     df4:	28 a9       	ldd	r18, Y+48	; 0x30
     df6:	20 68       	ori	r18, 0x80	; 128
     df8:	28 ab       	std	Y+48, r18	; 0x30
     dfa:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     dfe:	e0 e4       	ldi	r30, 0x40	; 64
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	80 83       	st	Z, r24
     e04:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e08:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     e0c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e10:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     e14:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     e18:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     e1c:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     e20:	2a eb       	ldi	r18, 0xBA	; 186
     e22:	33 e2       	ldi	r19, 0x23	; 35
     e24:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     e28:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     e2c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e30:	29 e3       	ldi	r18, 0x39	; 57
     e32:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e36:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e3a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     e3e:	90 81       	ld	r25, Z
     e40:	90 68       	ori	r25, 0x80	; 128
     e42:	90 83       	st	Z, r25
     e44:	18 8a       	std	Y+16, r1	; 0x10
     e46:	90 e4       	ldi	r25, 0x40	; 64
     e48:	98 8b       	std	Y+16, r25	; 0x10
     e4a:	88 8b       	std	Y+16, r24	; 0x10
     e4c:	19 8a       	std	Y+17, r1	; 0x11
     e4e:	45 e9       	ldi	r20, 0x95	; 149
     e50:	4a 8b       	std	Y+18, r20	; 0x12
     e52:	90 e1       	ldi	r25, 0x10	; 16
     e54:	9b 8b       	std	Y+19, r25	; 0x13
     e56:	2e ee       	ldi	r18, 0xEE	; 238
     e58:	32 e0       	ldi	r19, 0x02	; 2
     e5a:	2c 8b       	std	Y+20, r18	; 0x14
     e5c:	3d 8b       	std	Y+21, r19	; 0x15
     e5e:	88 8f       	std	Y+24, r24	; 0x18
     e60:	19 8f       	std	Y+25, r17	; 0x19
     e62:	1a 8e       	std	Y+26, r1	; 0x1a
     e64:	6c ee       	ldi	r22, 0xEC	; 236
     e66:	77 e2       	ldi	r23, 0x27	; 39
     e68:	6c 8f       	std	Y+28, r22	; 0x1c
     e6a:	7d 8f       	std	Y+29, r23	; 0x1d
     e6c:	1e 8e       	std	Y+30, r1	; 0x1e
     e6e:	88 a3       	std	Y+32, r24	; 0x20
     e70:	19 a2       	std	Y+33, r1	; 0x21
     e72:	4a a3       	std	Y+34, r20	; 0x22
     e74:	9b a3       	std	Y+35, r25	; 0x23
     e76:	2c a3       	std	Y+36, r18	; 0x24
     e78:	3d a3       	std	Y+37, r19	; 0x25
     e7a:	84 e3       	ldi	r24, 0x34	; 52
     e7c:	88 a7       	std	Y+40, r24	; 0x28
     e7e:	19 a7       	std	Y+41, r17	; 0x29
     e80:	1a a6       	std	Y+42, r1	; 0x2a
     e82:	8a ed       	ldi	r24, 0xDA	; 218
     e84:	9a e2       	ldi	r25, 0x2A	; 42
     e86:	8c a7       	std	Y+44, r24	; 0x2c
     e88:	9d a7       	std	Y+45, r25	; 0x2d
     e8a:	1e a6       	std	Y+46, r1	; 0x2e
     e8c:	68 ec       	ldi	r22, 0xC8	; 200
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	84 ef       	ldi	r24, 0xF4	; 244
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	21 dc       	rcall	.-1982   	; 0x6d8 <tiny_calibration_synchronise_phase>
     e96:	88 ec       	ldi	r24, 0xC8	; 200
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     e9e:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     ea8:	88 89       	ldd	r24, Y+16	; 0x10
     eaa:	80 68       	ori	r24, 0x80	; 128
     eac:	88 8b       	std	Y+16, r24	; 0x10
     eae:	88 a1       	ldd	r24, Y+32	; 0x20
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	88 a3       	std	Y+32, r24	; 0x20
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	08 95       	ret

00000ebc <tiny_dma_set_mode_3>:
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	13 e0       	ldi	r17, 0x03	; 3
     ec4:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     ec8:	55 de       	rcall	.-854    	; 0xb74 <tiny_dma_flush>
     eca:	c0 e0       	ldi	r28, 0x00	; 0
     ecc:	d1 e0       	ldi	r29, 0x01	; 1
     ece:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f1 e0       	ldi	r31, 0x01	; 1
     ed6:	84 e2       	ldi	r24, 0x24	; 36
     ed8:	80 83       	st	Z, r24
     eda:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ede:	29 e5       	ldi	r18, 0x59	; 89
     ee0:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     eea:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
     eee:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
     ef2:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     ef6:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     efa:	4b ec       	ldi	r20, 0xCB	; 203
     efc:	55 e2       	ldi	r21, 0x25	; 37
     efe:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f02:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f06:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f0a:	9b e3       	ldi	r25, 0x3B	; 59
     f0c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f10:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f14:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     f18:	90 81       	ld	r25, Z
     f1a:	90 68       	ori	r25, 0x80	; 128
     f1c:	90 83       	st	Z, r25
     f1e:	1e aa       	std	Y+54, r1	; 0x36
     f20:	88 ab       	std	Y+48, r24	; 0x30
     f22:	19 aa       	std	Y+49, r1	; 0x31
     f24:	2a ab       	std	Y+50, r18	; 0x32
     f26:	1b ab       	std	Y+51, r17	; 0x33
     f28:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
     f2c:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
     f30:	2c ab       	std	Y+52, r18	; 0x34
     f32:	3d ab       	std	Y+53, r19	; 0x35
     f34:	2a eb       	ldi	r18, 0xBA	; 186
     f36:	33 e2       	ldi	r19, 0x23	; 35
     f38:	28 af       	std	Y+56, r18	; 0x38
     f3a:	39 af       	std	Y+57, r19	; 0x39
     f3c:	1a ae       	std	Y+58, r1	; 0x3a
     f3e:	99 e3       	ldi	r25, 0x39	; 57
     f40:	9c af       	std	Y+60, r25	; 0x3c
     f42:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     f46:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     f4a:	98 a9       	ldd	r25, Y+48	; 0x30
     f4c:	90 68       	ori	r25, 0x80	; 128
     f4e:	98 ab       	std	Y+48, r25	; 0x30
     f50:	18 a2       	std	Y+32, r1	; 0x20
     f52:	50 e4       	ldi	r21, 0x40	; 64
     f54:	58 a3       	std	Y+32, r21	; 0x20
     f56:	94 e0       	ldi	r25, 0x04	; 4
     f58:	98 a3       	std	Y+32, r25	; 0x20
     f5a:	19 a2       	std	Y+33, r1	; 0x21
     f5c:	1a a2       	std	Y+34, r1	; 0x22
     f5e:	4b e4       	ldi	r20, 0x4B	; 75
     f60:	4b a3       	std	Y+35, r20	; 0x23
     f62:	1c a2       	std	Y+36, r1	; 0x24
     f64:	1d a2       	std	Y+37, r1	; 0x25
     f66:	1e a2       	std	Y+38, r1	; 0x26
     f68:	2a e0       	ldi	r18, 0x0A	; 10
     f6a:	30 e2       	ldi	r19, 0x20	; 32
     f6c:	28 a7       	std	Y+40, r18	; 0x28
     f6e:	39 a7       	std	Y+41, r19	; 0x29
     f70:	1a a6       	std	Y+42, r1	; 0x2a
     f72:	30 ea       	ldi	r19, 0xA0	; 160
     f74:	3c a7       	std	Y+44, r19	; 0x2c
     f76:	28 e0       	ldi	r18, 0x08	; 8
     f78:	2d a7       	std	Y+45, r18	; 0x2d
     f7a:	1e a6       	std	Y+46, r1	; 0x2e
     f7c:	98 a1       	ldd	r25, Y+32	; 0x20
     f7e:	90 6a       	ori	r25, 0xA0	; 160
     f80:	98 a3       	std	Y+32, r25	; 0x20
     f82:	95 e5       	ldi	r25, 0x55	; 85
     f84:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     f88:	18 8a       	std	Y+16, r1	; 0x10
     f8a:	58 8b       	std	Y+16, r21	; 0x10
     f8c:	88 8b       	std	Y+16, r24	; 0x10
     f8e:	19 8a       	std	Y+17, r1	; 0x11
     f90:	85 e9       	ldi	r24, 0x95	; 149
     f92:	8a 8b       	std	Y+18, r24	; 0x12
     f94:	4b 8b       	std	Y+19, r20	; 0x13
     f96:	8e ee       	ldi	r24, 0xEE	; 238
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	8c 8b       	std	Y+20, r24	; 0x14
     f9c:	9d 8b       	std	Y+21, r25	; 0x15
     f9e:	38 8f       	std	Y+24, r19	; 0x18
     fa0:	29 8f       	std	Y+25, r18	; 0x19
     fa2:	1a 8e       	std	Y+26, r1	; 0x1a
     fa4:	8c ee       	ldi	r24, 0xEC	; 236
     fa6:	97 e2       	ldi	r25, 0x27	; 39
     fa8:	8c 8f       	std	Y+28, r24	; 0x1c
     faa:	9d 8f       	std	Y+29, r25	; 0x1d
     fac:	1e 8e       	std	Y+30, r1	; 0x1e
     fae:	68 ec       	ldi	r22, 0xC8	; 200
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	84 ef       	ldi	r24, 0xF4	; 244
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	90 db       	rcall	.-2272   	; 0x6d8 <tiny_calibration_synchronise_phase>
     fb8:	88 ec       	ldi	r24, 0xC8	; 200
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
     fc0:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
     fca:	88 89       	ldd	r24, Y+16	; 0x10
     fcc:	80 68       	ori	r24, 0x80	; 128
     fce:	88 8b       	std	Y+16, r24	; 0x10
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	08 95       	ret

00000fd8 <tiny_dma_set_mode_4>:
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	14 e0       	ldi	r17, 0x04	; 4
     fe0:	10 93 09 20 	sts	0x2009, r17	; 0x802009 <global_mode>
     fe4:	c7 dd       	rcall	.-1138   	; 0xb74 <tiny_dma_flush>
     fe6:	c0 e0       	ldi	r28, 0x00	; 0
     fe8:	d1 e0       	ldi	r29, 0x01	; 1
     fea:	18 aa       	std	Y+48, r1	; 0x30
     fec:	80 e4       	ldi	r24, 0x40	; 64
     fee:	88 ab       	std	Y+48, r24	; 0x30
     ff0:	18 ab       	std	Y+48, r17	; 0x30
     ff2:	19 aa       	std	Y+49, r1	; 0x31
     ff4:	1a aa       	std	Y+50, r1	; 0x32
     ff6:	3b e4       	ldi	r19, 0x4B	; 75
     ff8:	3b ab       	std	Y+51, r19	; 0x33
     ffa:	1c aa       	std	Y+52, r1	; 0x34
     ffc:	1d aa       	std	Y+53, r1	; 0x35
     ffe:	1e aa       	std	Y+54, r1	; 0x36
    1000:	8a e0       	ldi	r24, 0x0A	; 10
    1002:	90 e2       	ldi	r25, 0x20	; 32
    1004:	88 af       	std	Y+56, r24	; 0x38
    1006:	99 af       	std	Y+57, r25	; 0x39
    1008:	1a ae       	std	Y+58, r1	; 0x3a
    100a:	50 ea       	ldi	r21, 0xA0	; 160
    100c:	5c af       	std	Y+60, r21	; 0x3c
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1014:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1018:	98 a9       	ldd	r25, Y+48	; 0x30
    101a:	90 6a       	ori	r25, 0xA0	; 160
    101c:	98 ab       	std	Y+48, r25	; 0x30
    101e:	95 e5       	ldi	r25, 0x55	; 85
    1020:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1024:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1028:	e0 e4       	ldi	r30, 0x40	; 64
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	94 e2       	ldi	r25, 0x24	; 36
    102e:	90 83       	st	Z, r25
    1030:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1034:	29 e5       	ldi	r18, 0x59	; 89
    1036:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    103a:	22 e0       	ldi	r18, 0x02	; 2
    103c:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1040:	60 91 0b 20 	lds	r22, 0x200B	; 0x80200b <auxDacBufLen>
    1044:	70 91 0c 20 	lds	r23, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1048:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    104c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1050:	6b ec       	ldi	r22, 0xCB	; 203
    1052:	75 e2       	ldi	r23, 0x25	; 37
    1054:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1058:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    105c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1060:	2b e3       	ldi	r18, 0x3B	; 59
    1062:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1066:	23 e0       	ldi	r18, 0x03	; 3
    1068:	20 93 4d 01 	sts	0x014D, r18	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    106c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1070:	20 81       	ld	r18, Z
    1072:	20 68       	ori	r18, 0x80	; 128
    1074:	20 83       	st	Z, r18
    1076:	98 8b       	std	Y+16, r25	; 0x10
    1078:	19 8a       	std	Y+17, r1	; 0x11
    107a:	45 e9       	ldi	r20, 0x95	; 149
    107c:	4a 8b       	std	Y+18, r20	; 0x12
    107e:	3b 8b       	std	Y+19, r19	; 0x13
    1080:	2e ee       	ldi	r18, 0xEE	; 238
    1082:	32 e0       	ldi	r19, 0x02	; 2
    1084:	2c 8b       	std	Y+20, r18	; 0x14
    1086:	3d 8b       	std	Y+21, r19	; 0x15
    1088:	58 8f       	std	Y+24, r21	; 0x18
    108a:	89 8f       	std	Y+25, r24	; 0x19
    108c:	1a 8e       	std	Y+26, r1	; 0x1a
    108e:	6c ee       	ldi	r22, 0xEC	; 236
    1090:	77 e2       	ldi	r23, 0x27	; 39
    1092:	6c 8f       	std	Y+28, r22	; 0x1c
    1094:	7d 8f       	std	Y+29, r23	; 0x1d
    1096:	1e 8e       	std	Y+30, r1	; 0x1e
    1098:	98 a3       	std	Y+32, r25	; 0x20
    109a:	19 a2       	std	Y+33, r1	; 0x21
    109c:	4a a3       	std	Y+34, r20	; 0x22
    109e:	9a e4       	ldi	r25, 0x4A	; 74
    10a0:	9b a3       	std	Y+35, r25	; 0x23
    10a2:	2c a3       	std	Y+36, r18	; 0x24
    10a4:	3d a3       	std	Y+37, r19	; 0x25
    10a6:	93 ec       	ldi	r25, 0xC3	; 195
    10a8:	98 a7       	std	Y+40, r25	; 0x28
    10aa:	89 a7       	std	Y+41, r24	; 0x29
    10ac:	1a a6       	std	Y+42, r1	; 0x2a
    10ae:	8a ed       	ldi	r24, 0xDA	; 218
    10b0:	9a e2       	ldi	r25, 0x2A	; 42
    10b2:	8c a7       	std	Y+44, r24	; 0x2c
    10b4:	9d a7       	std	Y+45, r25	; 0x2d
    10b6:	1e a6       	std	Y+46, r1	; 0x2e
    10b8:	68 ec       	ldi	r22, 0xC8	; 200
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	84 ef       	ldi	r24, 0xF4	; 244
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	0b db       	rcall	.-2538   	; 0x6d8 <tiny_calibration_synchronise_phase>
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    10ca:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    10d4:	88 89       	ldd	r24, Y+16	; 0x10
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	88 8b       	std	Y+16, r24	; 0x10
    10da:	88 a1       	ldd	r24, Y+32	; 0x20
    10dc:	80 68       	ori	r24, 0x80	; 128
    10de:	88 a3       	std	Y+32, r24	; 0x20
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	08 95       	ret

000010e8 <tiny_dma_set_mode_5>:
    10e8:	ff cf       	rjmp	.-2      	; 0x10e8 <tiny_dma_set_mode_5>

000010ea <tiny_dma_set_mode_6>:
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	86 e0       	ldi	r24, 0x06	; 6
    10f0:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    10f4:	3f dd       	rcall	.-1410   	; 0xb74 <tiny_dma_flush>
    10f6:	c0 e0       	ldi	r28, 0x00	; 0
    10f8:	d1 e0       	ldi	r29, 0x01	; 1
    10fa:	1e aa       	std	Y+54, r1	; 0x36
    10fc:	84 e2       	ldi	r24, 0x24	; 36
    10fe:	88 ab       	std	Y+48, r24	; 0x30
    1100:	19 aa       	std	Y+49, r1	; 0x31
    1102:	39 e5       	ldi	r19, 0x59	; 89
    1104:	3a ab       	std	Y+50, r19	; 0x32
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	9b ab       	std	Y+51, r25	; 0x33
    110a:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    110e:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1112:	4c ab       	std	Y+52, r20	; 0x34
    1114:	5d ab       	std	Y+53, r21	; 0x35
    1116:	4a eb       	ldi	r20, 0xBA	; 186
    1118:	53 e2       	ldi	r21, 0x23	; 35
    111a:	48 af       	std	Y+56, r20	; 0x38
    111c:	59 af       	std	Y+57, r21	; 0x39
    111e:	1a ae       	std	Y+58, r1	; 0x3a
    1120:	29 e3       	ldi	r18, 0x39	; 57
    1122:	2c af       	std	Y+60, r18	; 0x3c
    1124:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    1128:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    112c:	28 a9       	ldd	r18, Y+48	; 0x30
    112e:	20 68       	ori	r18, 0x80	; 128
    1130:	28 ab       	std	Y+48, r18	; 0x30
    1132:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    1136:	e0 e4       	ldi	r30, 0x40	; 64
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	80 83       	st	Z, r24
    113c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1140:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1144:	32 e0       	ldi	r19, 0x02	; 2
    1146:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    114a:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    114e:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1152:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    1156:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    115a:	4b ec       	ldi	r20, 0xCB	; 203
    115c:	55 e2       	ldi	r21, 0x25	; 37
    115e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1162:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1166:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    116a:	2b e3       	ldi	r18, 0x3B	; 59
    116c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1170:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1174:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    1178:	20 81       	ld	r18, Z
    117a:	20 68       	ori	r18, 0x80	; 128
    117c:	20 83       	st	Z, r18
    117e:	18 8a       	std	Y+16, r1	; 0x10
    1180:	20 e4       	ldi	r18, 0x40	; 64
    1182:	28 8b       	std	Y+16, r18	; 0x10
    1184:	88 8b       	std	Y+16, r24	; 0x10
    1186:	99 8b       	std	Y+17, r25	; 0x11
    1188:	95 e9       	ldi	r25, 0x95	; 149
    118a:	9a 8b       	std	Y+18, r25	; 0x12
    118c:	90 e1       	ldi	r25, 0x10	; 16
    118e:	9b 8b       	std	Y+19, r25	; 0x13
    1190:	4c ed       	ldi	r20, 0xDC	; 220
    1192:	55 e0       	ldi	r21, 0x05	; 5
    1194:	4c 8b       	std	Y+20, r20	; 0x14
    1196:	5d 8b       	std	Y+21, r21	; 0x15
    1198:	88 8f       	std	Y+24, r24	; 0x18
    119a:	39 8f       	std	Y+25, r19	; 0x19
    119c:	1a 8e       	std	Y+26, r1	; 0x1a
    119e:	8c ee       	ldi	r24, 0xEC	; 236
    11a0:	97 e2       	ldi	r25, 0x27	; 39
    11a2:	8c 8f       	std	Y+28, r24	; 0x1c
    11a4:	9d 8f       	std	Y+29, r25	; 0x1d
    11a6:	1e 8e       	std	Y+30, r1	; 0x1e
    11a8:	68 ec       	ldi	r22, 0xC8	; 200
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	84 ef       	ldi	r24, 0xF4	; 244
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	93 da       	rcall	.-2778   	; 0x6d8 <tiny_calibration_synchronise_phase>
    11b2:	80 e9       	ldi	r24, 0x90	; 144
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    11ba:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    11c4:	88 89       	ldd	r24, Y+16	; 0x10
    11c6:	80 68       	ori	r24, 0x80	; 128
    11c8:	88 8b       	std	Y+16, r24	; 0x10
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <tiny_dma_set_mode_7>:
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	87 e0       	ldi	r24, 0x07	; 7
    11d6:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <global_mode>
    11da:	cc dc       	rcall	.-1640   	; 0xb74 <tiny_dma_flush>
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
    11de:	d1 e0       	ldi	r29, 0x01	; 1
    11e0:	1e aa       	std	Y+54, r1	; 0x36
    11e2:	94 e2       	ldi	r25, 0x24	; 36
    11e4:	98 ab       	std	Y+48, r25	; 0x30
    11e6:	19 aa       	std	Y+49, r1	; 0x31
    11e8:	39 e5       	ldi	r19, 0x59	; 89
    11ea:	3a ab       	std	Y+50, r19	; 0x32
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	8b ab       	std	Y+51, r24	; 0x33
    11f0:	40 91 0d 20 	lds	r20, 0x200D	; 0x80200d <dacBuf_len>
    11f4:	50 91 0e 20 	lds	r21, 0x200E	; 0x80200e <dacBuf_len+0x1>
    11f8:	4c ab       	std	Y+52, r20	; 0x34
    11fa:	5d ab       	std	Y+53, r21	; 0x35
    11fc:	4a eb       	ldi	r20, 0xBA	; 186
    11fe:	53 e2       	ldi	r21, 0x23	; 35
    1200:	48 af       	std	Y+56, r20	; 0x38
    1202:	59 af       	std	Y+57, r21	; 0x39
    1204:	1a ae       	std	Y+58, r1	; 0x3a
    1206:	29 e3       	ldi	r18, 0x39	; 57
    1208:	2c af       	std	Y+60, r18	; 0x3c
    120a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
    120e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
    1212:	28 a9       	ldd	r18, Y+48	; 0x30
    1214:	20 68       	ori	r18, 0x80	; 128
    1216:	28 ab       	std	Y+48, r18	; 0x30
    1218:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
    121c:	e0 e4       	ldi	r30, 0x40	; 64
    121e:	f1 e0       	ldi	r31, 0x01	; 1
    1220:	90 83       	st	Z, r25
    1222:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1226:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    122a:	32 e0       	ldi	r19, 0x02	; 2
    122c:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1230:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <auxDacBufLen>
    1234:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    1238:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
    123c:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
    1240:	4b ec       	ldi	r20, 0xCB	; 203
    1242:	55 e2       	ldi	r21, 0x25	; 37
    1244:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1248:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    124c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1250:	2b e3       	ldi	r18, 0x3B	; 59
    1252:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1256:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    125a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
    125e:	20 81       	ld	r18, Z
    1260:	20 68       	ori	r18, 0x80	; 128
    1262:	20 83       	st	Z, r18
    1264:	18 8a       	std	Y+16, r1	; 0x10
    1266:	20 e4       	ldi	r18, 0x40	; 64
    1268:	28 8b       	std	Y+16, r18	; 0x10
    126a:	25 e2       	ldi	r18, 0x25	; 37
    126c:	28 8b       	std	Y+16, r18	; 0x10
    126e:	89 8b       	std	Y+17, r24	; 0x11
    1270:	85 e9       	ldi	r24, 0x95	; 149
    1272:	8a 8b       	std	Y+18, r24	; 0x12
    1274:	80 e1       	ldi	r24, 0x10	; 16
    1276:	8b 8b       	std	Y+19, r24	; 0x13
    1278:	4c ed       	ldi	r20, 0xDC	; 220
    127a:	55 e0       	ldi	r21, 0x05	; 5
    127c:	4c 8b       	std	Y+20, r20	; 0x14
    127e:	5d 8b       	std	Y+21, r21	; 0x15
    1280:	98 8f       	std	Y+24, r25	; 0x18
    1282:	39 8f       	std	Y+25, r19	; 0x19
    1284:	1a 8e       	std	Y+26, r1	; 0x1a
    1286:	8c ee       	ldi	r24, 0xEC	; 236
    1288:	97 e2       	ldi	r25, 0x27	; 39
    128a:	8c 8f       	std	Y+28, r24	; 0x1c
    128c:	9d 8f       	std	Y+29, r25	; 0x1d
    128e:	1e 8e       	std	Y+30, r1	; 0x1e
    1290:	68 ec       	ldi	r22, 0xC8	; 200
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	84 ef       	ldi	r24, 0xF4	; 244
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	1f da       	rcall	.-3010   	; 0x6d8 <tiny_calibration_synchronise_phase>
    129a:	80 e9       	ldi	r24, 0x90	; 144
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <median_TRFCNT>
    12a2:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <median_TRFCNT+0x1>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <median_TRFCNT_delay>
    12ac:	88 89       	ldd	r24, Y+16	; 0x10
    12ae:	80 68       	ori	r24, 0x80	; 128
    12b0:	88 8b       	std	Y+16, r24	; 0x10
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <__vector_6>:
}

ISR(DMA_CH0_vect){
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	8f 93       	push	r24
	DMA.INTFLAGS = 0x01;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	DMA.CH0.DESTADDR0 = (( (uint16_t) &isoBuf[ptr]) >> 0) & 0xFF;  //Dest address is isoBuf
	DMA.CH0.DESTADDR1 = (( (uint16_t) &isoBuf[ptr]) >> 8) & 0xFF;

	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
	#endif
}
    12ca:	8f 91       	pop	r24
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <__vector_7>:

ISR(DMA_CH1_vect){
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	8f 93       	push	r24
	DMA.INTFLAGS = 0x02;
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	DMA.CH1.DESTADDR0 = (( (uint16_t) &isoBuf[ptr]) >> 0) & 0xFF;  //Dest address is isoBuf
	DMA.CH1.DESTADDR1 = (( (uint16_t) &isoBuf[ptr]) >> 8) & 0xFF;

	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;
	#endif
}
    12e8:	8f 91       	pop	r24
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	0f 90       	pop	r0
    12f0:	1f 90       	pop	r1
    12f2:	18 95       	reti

000012f4 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
    12f4:	e0 e7       	ldi	r30, 0x70	; 112
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	83 81       	ldd	r24, Z+3	; 0x03
    12fa:	8c 7f       	andi	r24, 0xFC	; 252
    12fc:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
    12fe:	84 81       	ldd	r24, Z+4	; 0x04
    1300:	8c 7f       	andi	r24, 0xFC	; 252
    1302:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
    1304:	80 81       	ld	r24, Z
    1306:	8d 7f       	andi	r24, 0xFD	; 253
    1308:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
    130a:	e0 e8       	ldi	r30, 0x80	; 128
    130c:	f1 e0       	ldi	r31, 0x01	; 1
    130e:	80 ec       	ldi	r24, 0xC0	; 192
    1310:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
    1312:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = TCDAC_AUX_OVF;
    1314:	88 ec       	ldi	r24, 0xC8	; 200
    1316:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
    1318:	11 86       	std	Z+9, r1	; 0x09
			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    131a:	a0 e0       	ldi	r26, 0x00	; 0
    131c:	b8 e0       	ldi	r27, 0x08	; 8
    131e:	34 e0       	ldi	r19, 0x04	; 4
    1320:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1322:	23 e0       	ldi	r18, 0x03	; 3
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	2c 93       	st	X, r18
    1328:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
    132a:	14 96       	adiw	r26, 0x04	; 4
    132c:	1c 92       	st	X, r1
    132e:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
    1330:	85 ed       	ldi	r24, 0xD5	; 213
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	96 96       	adiw	r26, 0x26	; 38
    1336:	8d 93       	st	X+, r24
    1338:	9c 93       	st	X, r25
    133a:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
    133c:	16 96       	adiw	r26, 0x06	; 6
    133e:	1c 92       	st	X, r1
    1340:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
    1342:	e0 e4       	ldi	r30, 0x40	; 64
    1344:	f8 e0       	ldi	r31, 0x08	; 8
    1346:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
    1348:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
    134a:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
    134c:	86 a3       	std	Z+38, r24	; 0x26
    134e:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
    1350:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
    1352:	e0 e6       	ldi	r30, 0x60	; 96
    1354:	f6 e0       	ldi	r31, 0x06	; 6
    1356:	80 81       	ld	r24, Z
    1358:	80 61       	ori	r24, 0x10	; 16
    135a:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
    135c:	e0 e4       	ldi	r30, 0x40	; 64
    135e:	f9 e0       	ldi	r31, 0x09	; 9
    1360:	83 e1       	ldi	r24, 0x13	; 19
    1362:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
    1364:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
    136a:	a6 a3       	std	Z+38, r26	; 0x26
    136c:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
    136e:	10 a6       	std	Z+40, r1	; 0x28
    1370:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	80 83       	st	Z, r24
    1376:	08 95       	ret

00001378 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	ef 93       	push	r30
    1390:	ff 93       	push	r31
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	1f 92       	push	r1
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
    139c:	8f ef       	ldi	r24, 0xFF	; 255
    139e:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
    13a2:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    13a6:	87 30       	cpi	r24, 0x07	; 7
    13a8:	31 f4       	brne	.+12     	; 0x13b6 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
    13aa:	e0 e0       	ldi	r30, 0x00	; 0
    13ac:	f2 e0       	ldi	r31, 0x02	; 2
    13ae:	84 a5       	ldd	r24, Z+44	; 0x2c
    13b0:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
    13b2:	95 a5       	ldd	r25, Z+45	; 0x2d
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
    13b6:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
    13ba:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <PSU_target>
    13be:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
    13c0:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    13c4:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	0c f4       	brge	.+2      	; 0x13d0 <__vector_83+0x58>
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	99 23       	and	r25, r25
    13d2:	c9 f0       	breq	.+50     	; 0x1406 <__vector_83+0x8e>
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	2a 3f       	cpi	r18, 0xFA	; 250
    13d8:	37 40       	sbci	r19, 0x07	; 7
    13da:	08 f0       	brcs	.+2      	; 0x13de <__vector_83+0x66>
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	99 23       	and	r25, r25
    13e0:	91 f0       	breq	.+36     	; 0x1406 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
    13e2:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    13e6:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    13ea:	89 30       	cpi	r24, 0x09	; 9
    13ec:	1c f4       	brge	.+6      	; 0x13f4 <__vector_83+0x7c>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <__vector_83+0x80>
    13f4:	86 e0       	ldi	r24, 0x06	; 6
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1400:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    1404:	23 c0       	rjmp	.+70     	; 0x144c <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
    1406:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    140a:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	8f 3f       	cpi	r24, 0xFF	; 255
    1412:	0c f0       	brlt	.+2      	; 0x1416 <__vector_83+0x9e>
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	99 23       	and	r25, r25
    1418:	c9 f0       	breq	.+50     	; 0x144c <__vector_83+0xd4>
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	27 30       	cpi	r18, 0x07	; 7
    141e:	31 05       	cpc	r19, r1
    1420:	08 f4       	brcc	.+2      	; 0x1424 <__vector_83+0xac>
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	99 23       	and	r25, r25
    1426:	91 f0       	breq	.+36     	; 0x144c <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
    1428:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    142c:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1430:	88 3f       	cpi	r24, 0xF8	; 248
    1432:	1c f0       	brlt	.+6      	; 0x143a <__vector_83+0xc2>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <__vector_83+0xc6>
    143a:	86 e0       	ldi	r24, 0x06	; 6
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	48 1b       	sub	r20, r24
    1442:	59 0b       	sbc	r21, r25
    1444:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1448:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	ff 91       	pop	r31
    1454:	ef 91       	pop	r30
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
    146c:	e0 e7       	ldi	r30, 0x70	; 112
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	83 81       	ldd	r24, Z+3	; 0x03
    1472:	8f 7e       	andi	r24, 0xEF	; 239
    1474:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
    1476:	e0 e4       	ldi	r30, 0x40	; 64
    1478:	f6 e0       	ldi	r31, 0x06	; 6
    147a:	80 81       	ld	r24, Z
    147c:	8a 6a       	ori	r24, 0xAA	; 170
    147e:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    1484:	88 e5       	ldi	r24, 0x58	; 88
    1486:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLA = USART_RXCINTLVL_HI_gc;
    1488:	e0 ea       	ldi	r30, 0xA0	; 160
    148a:	f8 e0       	ldi	r31, 0x08	; 8
    148c:	80 e3       	ldi	r24, 0x30	; 48
    148e:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
    1490:	84 ec       	ldi	r24, 0xC4	; 196
    1492:	85 83       	std	Z+5, r24	; 0x05
	#if OVERCLOCK == 48
		USARTC0.BAUDCTRLA = 7;  	//BSEL = fper/(2fbaud) -1;  48/(2*3) - 1 = 7
    1494:	87 e0       	ldi	r24, 0x07	; 7
    1496:	86 83       	std	Z+6, r24	; 0x06
	#else
		USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
	#endif
	USARTC0.BAUDCTRLB = 0x00;// USART_BSCALE0_bm goes to 1.5MHz for some reason;
    1498:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    149a:	88 e1       	ldi	r24, 0x18	; 24
    149c:	84 83       	std	Z+4, r24	; 0x04
    149e:	08 95       	ret

000014a0 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
    14a0:	e0 e7       	ldi	r30, 0x70	; 112
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	83 81       	ldd	r24, Z+3	; 0x03
    14a6:	87 7f       	andi	r24, 0xF7	; 247
    14a8:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
    14aa:	e0 ec       	ldi	r30, 0xC0	; 192
    14ac:	f8 e0       	ldi	r31, 0x08	; 8
    14ae:	80 e4       	ldi	r24, 0x40	; 64
    14b0:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
    14b2:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
    14b4:	88 e5       	ldi	r24, 0x58	; 88
    14b6:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
    14ba:	08 95       	ret

000014bc <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
	asm("nop");
    14c6:	00 00       	nop
}
    14c8:	0f 90       	pop	r0
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	0f 90       	pop	r0
    14ce:	1f 90       	pop	r1
    14d0:	18 95       	reti

000014d2 <__vector_25>:

ISR(USARTC0_RXC_vect){
    14d2:	1f 92       	push	r1
    14d4:	0f 92       	push	r0
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	0f 92       	push	r0
    14da:	11 24       	eor	r1, r1
    14dc:	8f 93       	push	r24
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
	unsigned char temp = USARTC0.DATA;
    14e2:	e0 ea       	ldi	r30, 0xA0	; 160
    14e4:	f8 e0       	ldi	r31, 0x08	; 8
    14e6:	80 81       	ld	r24, Z
	USARTC0.DATA = temp;
    14e8:	80 83       	st	Z, r24
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	8f 91       	pop	r24
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <sysclk_enable_module>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14fa:	9f b7       	in	r25, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	e8 2f       	mov	r30, r24
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	e0 59       	subi	r30, 0x90	; 144
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	60 95       	com	r22
    1508:	80 81       	ld	r24, Z
    150a:	68 23       	and	r22, r24
    150c:	60 83       	st	Z, r22
    150e:	9f bf       	out	0x3f, r25	; 63
    1510:	08 95       	ret

00001512 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1512:	86 30       	cpi	r24, 0x06	; 6
    1514:	11 f0       	breq	.+4      	; 0x151a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	01 c0       	rjmp	.+2      	; 0x151c <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    151a:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    151c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1520:	81 fd       	sbrc	r24, 1
    1522:	26 c0       	rjmp	.+76     	; 0x1570 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1524:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1526:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1528:	e0 e5       	ldi	r30, 0x50	; 80
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	82 60       	ori	r24, 0x02	; 2
    1530:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1532:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1534:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1536:	81 ff       	sbrs	r24, 1
    1538:	fd cf       	rjmp	.-6      	; 0x1534 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    153a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    153c:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    153e:	a0 e5       	ldi	r26, 0x50	; 80
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	16 96       	adiw	r26, 0x06	; 6
    1544:	8c 91       	ld	r24, X
    1546:	16 97       	sbiw	r26, 0x06	; 6
    1548:	89 7f       	andi	r24, 0xF9	; 249
    154a:	16 96       	adiw	r26, 0x06	; 6
    154c:	8c 93       	st	X, r24
    154e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1550:	e0 e6       	ldi	r30, 0x60	; 96
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 e8       	ldi	r24, 0x80	; 128
    1556:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1558:	8b eb       	ldi	r24, 0xBB	; 187
    155a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    155c:	16 96       	adiw	r26, 0x06	; 6
    155e:	8c 91       	ld	r24, X
    1560:	16 97       	sbiw	r26, 0x06	; 6
    1562:	84 60       	ori	r24, 0x04	; 4
    1564:	16 96       	adiw	r26, 0x06	; 6
    1566:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1568:	80 81       	ld	r24, Z
    156a:	81 60       	ori	r24, 0x01	; 1
    156c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    156e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1570:	63 60       	ori	r22, 0x03	; 3
    1572:	84 e4       	ldi	r24, 0x44	; 68
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	06 d5       	rcall	.+2572   	; 0x1f84 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1578:	60 e4       	ldi	r22, 0x40	; 64
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	be cf       	rjmp	.-132    	; 0x14fa <sysclk_enable_module>
    157e:	08 95       	ret

00001580 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1580:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udi_vendor_alternate_setting>
    1584:	08 95       	ret

00001586 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    1586:	1d d1       	rcall	.+570    	; 0x17c2 <udc_get_interface_desc>
    1588:	fc 01       	movw	r30, r24
    158a:	83 81       	ldd	r24, Z+3	; 0x03
    158c:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    1590:	81 11       	cpse	r24, r1
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    1594:	02 ca       	rjmp	.-3068   	; 0x99a <main_vendor_enable>
    1596:	08 95       	ret
			return false;
		}
	}
	return true;
    1598:	81 e0       	ldi	r24, 0x01	; 1
}
    159a:	08 95       	ret

0000159c <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    159c:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <udi_vendor_alternate_setting>
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    15a4:	37 ca       	rjmp	.-2962   	; 0xa14 <main_vendor_disable>
    15a6:	08 95       	ret

000015a8 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    15a8:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    15ac:	88 23       	and	r24, r24
    15ae:	4c f4       	brge	.+18     	; 0x15c2 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15b0:	80 76       	andi	r24, 0x60	; 96
    15b2:	80 34       	cpi	r24, 0x40	; 64
    15b4:	a9 f4       	brne	.+42     	; 0x15e0 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    15b6:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    15ba:	81 11       	cpse	r24, r1
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    15be:	2f ca       	rjmp	.-2978   	; 0xa1e <main_setup_in_received>
    15c0:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    15c2:	80 76       	andi	r24, 0x60	; 96
    15c4:	80 34       	cpi	r24, 0x40	; 64
    15c6:	81 f4       	brne	.+32     	; 0x15e8 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    15c8:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    15cc:	81 11       	cpse	r24, r1
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    15d0:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    15d4:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    15d8:	89 2b       	or	r24, r25
    15da:	51 f0       	breq	.+20     	; 0x15f0 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    15dc:	1e ca       	rjmp	.-3012   	; 0xa1a <main_setup_out_received>
    15de:	08 95       	ret
		}
	}
	return false; // Not supported request
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	08 95       	ret
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	08 95       	ret
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	08 95       	ret
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	08 95       	ret
    15f0:	80 e0       	ldi	r24, 0x00	; 0
}
    15f2:	08 95       	ret

000015f4 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    15f4:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    15f8:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    15fc:	01 90       	ld	r0, Z+
    15fe:	f0 81       	ld	r31, Z
    1600:	e0 2d       	mov	r30, r0
    1602:	22 81       	ldd	r18, Z+2	; 0x02
    1604:	33 81       	ldd	r19, Z+3	; 0x03
    1606:	2e 0f       	add	r18, r30
    1608:	3f 1f       	adc	r19, r31
    160a:	fc 01       	movw	r30, r24
    160c:	40 81       	ld	r20, Z
    160e:	e4 0f       	add	r30, r20
    1610:	f1 1d       	adc	r31, r1
    1612:	e2 17       	cp	r30, r18
    1614:	f3 07       	cpc	r31, r19
    1616:	b8 f4       	brcc	.+46     	; 0x1646 <udc_next_desc_in_iface+0x52>
    1618:	81 81       	ldd	r24, Z+1	; 0x01
    161a:	84 30       	cpi	r24, 0x04	; 4
    161c:	b9 f0       	breq	.+46     	; 0x164c <udc_next_desc_in_iface+0x58>
    161e:	86 13       	cpse	r24, r22
    1620:	09 c0       	rjmp	.+18     	; 0x1634 <udc_next_desc_in_iface+0x40>
    1622:	05 c0       	rjmp	.+10     	; 0x162e <udc_next_desc_in_iface+0x3a>
    1624:	81 81       	ldd	r24, Z+1	; 0x01
    1626:	84 30       	cpi	r24, 0x04	; 4
    1628:	a1 f0       	breq	.+40     	; 0x1652 <udc_next_desc_in_iface+0x5e>
    162a:	86 13       	cpse	r24, r22
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <udc_next_desc_in_iface+0x40>
    162e:	8e 2f       	mov	r24, r30
    1630:	9f 2f       	mov	r25, r31
    1632:	08 95       	ret
    1634:	80 81       	ld	r24, Z
    1636:	e8 0f       	add	r30, r24
    1638:	f1 1d       	adc	r31, r1
    163a:	e2 17       	cp	r30, r18
    163c:	f3 07       	cpc	r31, r19
    163e:	90 f3       	brcs	.-28     	; 0x1624 <udc_next_desc_in_iface+0x30>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	08 95       	ret
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	08 95       	ret
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	08 95       	ret
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	08 95       	ret

00001658 <udc_valid_address>:
    1658:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    165c:	8f 77       	andi	r24, 0x7F	; 127
    165e:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <udd_set_address>
    1662:	08 95       	ret

00001664 <udc_update_iface_desc>:
    1664:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1668:	99 23       	and	r25, r25
    166a:	81 f1       	breq	.+96     	; 0x16cc <udc_update_iface_desc+0x68>
    166c:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1670:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1674:	01 90       	ld	r0, Z+
    1676:	f0 81       	ld	r31, Z
    1678:	e0 2d       	mov	r30, r0
    167a:	94 81       	ldd	r25, Z+4	; 0x04
    167c:	89 17       	cp	r24, r25
    167e:	40 f5       	brcc	.+80     	; 0x16d0 <udc_update_iface_desc+0x6c>
    1680:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    1684:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    1688:	22 81       	ldd	r18, Z+2	; 0x02
    168a:	33 81       	ldd	r19, Z+3	; 0x03
    168c:	2e 0f       	add	r18, r30
    168e:	3f 1f       	adc	r19, r31
    1690:	e2 17       	cp	r30, r18
    1692:	f3 07       	cpc	r31, r19
    1694:	f8 f4       	brcc	.+62     	; 0x16d4 <udc_update_iface_desc+0x70>
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	94 30       	cpi	r25, 0x04	; 4
    169a:	61 f4       	brne	.+24     	; 0x16b4 <udc_update_iface_desc+0x50>
    169c:	92 81       	ldd	r25, Z+2	; 0x02
    169e:	98 13       	cpse	r25, r24
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <udc_update_iface_desc+0x50>
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	96 13       	cpse	r25, r22
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <udc_update_iface_desc+0x50>
    16a8:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    16ac:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	08 95       	ret
    16b4:	90 81       	ld	r25, Z
    16b6:	e9 0f       	add	r30, r25
    16b8:	f1 1d       	adc	r31, r1
    16ba:	e2 17       	cp	r30, r18
    16bc:	f3 07       	cpc	r31, r19
    16be:	58 f3       	brcs	.-42     	; 0x1696 <udc_update_iface_desc+0x32>
    16c0:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_iface>
    16c4:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_iface+0x1>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	08 95       	ret
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	08 95       	ret
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	08 95       	ret

000016d8 <udc_iface_disable>:
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	c8 2f       	mov	r28, r24
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	be df       	rcall	.-132    	; 0x1664 <udc_update_iface_desc>
    16e8:	18 2f       	mov	r17, r24
    16ea:	88 23       	and	r24, r24
    16ec:	81 f1       	breq	.+96     	; 0x174e <udc_iface_disable+0x76>
    16ee:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    16f2:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    16f6:	ec 2f       	mov	r30, r28
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	12 96       	adiw	r26, 0x02	; 2
    1700:	8d 91       	ld	r24, X+
    1702:	9c 91       	ld	r25, X
    1704:	13 97       	sbiw	r26, 0x03	; 3
    1706:	e8 0f       	add	r30, r24
    1708:	f9 1f       	adc	r31, r25
    170a:	e0 80       	ld	r14, Z
    170c:	f1 80       	ldd	r15, Z+1	; 0x01
    170e:	d7 01       	movw	r26, r14
    1710:	16 96       	adiw	r26, 0x06	; 6
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	17 97       	sbiw	r26, 0x07	; 7
    1718:	09 95       	icall
    171a:	68 2f       	mov	r22, r24
    171c:	8c 2f       	mov	r24, r28
    171e:	a2 df       	rcall	.-188    	; 0x1664 <udc_update_iface_desc>
    1720:	18 2f       	mov	r17, r24
    1722:	88 23       	and	r24, r24
    1724:	a1 f0       	breq	.+40     	; 0x174e <udc_iface_disable+0x76>
    1726:	c0 91 bd 20 	lds	r28, 0x20BD	; 0x8020bd <udc_ptr_iface>
    172a:	d0 91 be 20 	lds	r29, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    172e:	65 e0       	ldi	r22, 0x05	; 5
    1730:	ce 01       	movw	r24, r28
    1732:	60 df       	rcall	.-320    	; 0x15f4 <udc_next_desc_in_iface>
    1734:	ec 01       	movw	r28, r24
    1736:	89 2b       	or	r24, r25
    1738:	21 f0       	breq	.+8      	; 0x1742 <udc_iface_disable+0x6a>
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <udd_ep_free>
    1740:	f6 cf       	rjmp	.-20     	; 0x172e <udc_iface_disable+0x56>
    1742:	d7 01       	movw	r26, r14
    1744:	12 96       	adiw	r26, 0x02	; 2
    1746:	ed 91       	ld	r30, X+
    1748:	fc 91       	ld	r31, X
    174a:	13 97       	sbiw	r26, 0x03	; 3
    174c:	09 95       	icall
    174e:	81 2f       	mov	r24, r17
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	08 95       	ret

0000175c <udc_iface_enable>:
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	18 2f       	mov	r17, r24
    1764:	7f df       	rcall	.-258    	; 0x1664 <udc_update_iface_desc>
    1766:	88 23       	and	r24, r24
    1768:	41 f1       	breq	.+80     	; 0x17ba <udc_iface_enable+0x5e>
    176a:	c0 91 bd 20 	lds	r28, 0x20BD	; 0x8020bd <udc_ptr_iface>
    176e:	d0 91 be 20 	lds	r29, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    1772:	65 e0       	ldi	r22, 0x05	; 5
    1774:	ce 01       	movw	r24, r28
    1776:	3e df       	rcall	.-388    	; 0x15f4 <udc_next_desc_in_iface>
    1778:	ec 01       	movw	r28, r24
    177a:	89 2b       	or	r24, r25
    177c:	49 f0       	breq	.+18     	; 0x1790 <udc_iface_enable+0x34>
    177e:	4c 81       	ldd	r20, Y+4	; 0x04
    1780:	5d 81       	ldd	r21, Y+5	; 0x05
    1782:	6b 81       	ldd	r22, Y+3	; 0x03
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <udd_ep_alloc>
    178a:	81 11       	cpse	r24, r1
    178c:	f2 cf       	rjmp	.-28     	; 0x1772 <udc_iface_enable+0x16>
    178e:	15 c0       	rjmp	.+42     	; 0x17ba <udc_iface_enable+0x5e>
    1790:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1794:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1798:	e1 2f       	mov	r30, r17
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	12 96       	adiw	r26, 0x02	; 2
    17a2:	8d 91       	ld	r24, X+
    17a4:	9c 91       	ld	r25, X
    17a6:	13 97       	sbiw	r26, 0x03	; 3
    17a8:	e8 0f       	add	r30, r24
    17aa:	f9 1f       	adc	r31, r25
    17ac:	01 90       	ld	r0, Z+
    17ae:	f0 81       	ld	r31, Z
    17b0:	e0 2d       	mov	r30, r0
    17b2:	01 90       	ld	r0, Z+
    17b4:	f0 81       	ld	r31, Z
    17b6:	e0 2d       	mov	r30, r0
    17b8:	09 95       	icall
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	08 95       	ret

000017c2 <udc_get_interface_desc>:
    17c2:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <udc_ptr_iface>
    17c6:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <udc_ptr_iface+0x1>
    17ca:	08 95       	ret

000017cc <udc_start>:
    17cc:	81 c7       	rjmp	.+3842   	; 0x26d0 <udd_enable>
    17ce:	08 95       	ret

000017d0 <udc_reset>:
    17d0:	cf 93       	push	r28
    17d2:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    17d6:	88 23       	and	r24, r24
    17d8:	c1 f0       	breq	.+48     	; 0x180a <udc_reset+0x3a>
    17da:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    17de:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    17e2:	01 90       	ld	r0, Z+
    17e4:	f0 81       	ld	r31, Z
    17e6:	e0 2d       	mov	r30, r0
    17e8:	84 81       	ldd	r24, Z+4	; 0x04
    17ea:	88 23       	and	r24, r24
    17ec:	71 f0       	breq	.+28     	; 0x180a <udc_reset+0x3a>
    17ee:	c0 e0       	ldi	r28, 0x00	; 0
    17f0:	8c 2f       	mov	r24, r28
    17f2:	72 df       	rcall	.-284    	; 0x16d8 <udc_iface_disable>
    17f4:	cf 5f       	subi	r28, 0xFF	; 255
    17f6:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    17fa:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    17fe:	01 90       	ld	r0, Z+
    1800:	f0 81       	ld	r31, Z
    1802:	e0 2d       	mov	r30, r0
    1804:	84 81       	ldd	r24, Z+4	; 0x04
    1806:	c8 17       	cp	r28, r24
    1808:	98 f3       	brcs	.-26     	; 0x17f0 <udc_reset+0x20>
    180a:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udc_num_configuration>
    180e:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <udc_device_status>
    1812:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <udc_device_status+0x1>
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    181a:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    181c:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1820:	88 23       	and	r24, r24
    1822:	49 f1       	breq	.+82     	; 0x1876 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1824:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1828:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    182c:	ed 91       	ld	r30, X+
    182e:	fc 91       	ld	r31, X
    1830:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1832:	84 81       	ldd	r24, Z+4	; 0x04
    1834:	88 23       	and	r24, r24
    1836:	f9 f0       	breq	.+62     	; 0x1876 <udc_sof_notify+0x5c>
    1838:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    183a:	ec 2f       	mov	r30, r28
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	12 96       	adiw	r26, 0x02	; 2
    1844:	8d 91       	ld	r24, X+
    1846:	9c 91       	ld	r25, X
    1848:	13 97       	sbiw	r26, 0x03	; 3
    184a:	e8 0f       	add	r30, r24
    184c:	f9 1f       	adc	r31, r25
    184e:	01 90       	ld	r0, Z+
    1850:	f0 81       	ld	r31, Z
    1852:	e0 2d       	mov	r30, r0
    1854:	00 84       	ldd	r0, Z+8	; 0x08
    1856:	f1 85       	ldd	r31, Z+9	; 0x09
    1858:	e0 2d       	mov	r30, r0
    185a:	30 97       	sbiw	r30, 0x00	; 0
    185c:	09 f0       	breq	.+2      	; 0x1860 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    185e:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1860:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1862:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1866:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    186a:	ed 91       	ld	r30, X+
    186c:	fc 91       	ld	r31, X
    186e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1870:	84 81       	ldd	r24, Z+4	; 0x04
    1872:	c8 17       	cp	r28, r24
    1874:	10 f3       	brcs	.-60     	; 0x183a <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1876:	cf 91       	pop	r28
    1878:	08 95       	ret

0000187a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1882:	ea eb       	ldi	r30, 0xBA	; 186
    1884:	f5 e2       	ldi	r31, 0x25	; 37
    1886:	12 86       	std	Z+10, r1	; 0x0a
    1888:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    188a:	14 86       	std	Z+12, r1	; 0x0c
    188c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    188e:	16 86       	std	Z+14, r1	; 0x0e
    1890:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1892:	80 81       	ld	r24, Z
    1894:	28 2f       	mov	r18, r24
    1896:	88 23       	and	r24, r24
    1898:	3c f4       	brge	.+14     	; 0x18a8 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    189a:	40 91 c0 25 	lds	r20, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    189e:	50 91 c1 25 	lds	r21, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    18a2:	45 2b       	or	r20, r21
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <udc_process_setup+0x2e>
    18a6:	62 c3       	rjmp	.+1732   	; 0x1f6c <udc_process_setup+0x6f2>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    18a8:	98 2f       	mov	r25, r24
    18aa:	90 76       	andi	r25, 0x60	; 96
    18ac:	90 34       	cpi	r25, 0x40	; 64
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <udc_process_setup+0x38>
    18b0:	03 c1       	rjmp	.+518    	; 0x1ab8 <udc_process_setup+0x23e>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    18b2:	e0 91 bb 25 	lds	r30, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    18b6:	4e 2f       	mov	r20, r30
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	fa 01       	movw	r30, r20
    18bc:	e0 5a       	subi	r30, 0xA0	; 160
    18be:	f1 09       	sbc	r31, r1
    18c0:	e9 30       	cpi	r30, 0x09	; 9
    18c2:	f1 05       	cpc	r31, r1
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <udc_process_setup+0x4e>
    18c6:	f8 c0       	rjmp	.+496    	; 0x1ab8 <udc_process_setup+0x23e>
    18c8:	ea 5f       	subi	r30, 0xFA	; 250
    18ca:	fe 4f       	sbci	r31, 0xFE	; 254
    18cc:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			debugOnNextEnd = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <debugOnNextEnd>
			uds.medianTrfcntL = median_TRFCNT & 0xff;
    18d6:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    18da:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    18de:	ee e9       	ldi	r30, 0x9E	; 158
    18e0:	f3 e2       	ldi	r31, 0x23	; 35
    18e2:	85 87       	std	Z+13, r24	; 0x0d
			uds.medianTrfcntH = (median_TRFCNT >> 8) & 0xff;
    18e4:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <median_TRFCNT>
    18e8:	90 91 08 20 	lds	r25, 0x2008	; 0x802008 <median_TRFCNT+0x1>
    18ec:	96 87       	std	Z+14, r25	; 0x0e
			uds.calValNeg = cali_value_negative_gradient;
    18ee:	80 91 92 23 	lds	r24, 0x2392	; 0x802392 <cali_value_negative_gradient>
    18f2:	87 87       	std	Z+15, r24	; 0x0f
			uds.calValPos = cali_value_positive_gradient;
    18f4:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <cali_value_positive_gradient>
    18f8:	80 8b       	std	Z+16, r24	; 0x10
			uds.CALA = DFLLRC2M.CALA;
    18fa:	a8 e6       	ldi	r26, 0x68	; 104
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	12 96       	adiw	r26, 0x02	; 2
    1900:	8c 91       	ld	r24, X
    1902:	12 97       	sbiw	r26, 0x02	; 2
    1904:	81 8b       	std	Z+17, r24	; 0x11
			uds.CALB = DFLLRC2M.CALB;
    1906:	13 96       	adiw	r26, 0x03	; 3
    1908:	8c 91       	ld	r24, X
    190a:	82 8b       	std	Z+18, r24	; 0x12
			udd_set_setup_payload(&uds, udd_g_ctrlreq.req.wLength);
    190c:	60 91 c0 25 	lds	r22, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1910:	70 91 c1 25 	lds	r23, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1914:	cf 01       	movw	r24, r30
    1916:	5d d7       	rcall	.+3770   	; 0x27d2 <udd_set_setup_payload>
    1918:	2d c3       	rjmp	.+1626   	; 0x1f74 <udc_process_setup+0x6fa>
			//asm("nop");
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    191a:	e0 e0       	ldi	r30, 0x00	; 0
    191c:	f8 e0       	ldi	r31, 0x08	; 8
    191e:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1920:	ca eb       	ldi	r28, 0xBA	; 186
    1922:	d5 e2       	ldi	r29, 0x25	; 37
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	86 ab       	std	Z+54, r24	; 0x36
    192a:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	8f 70       	andi	r24, 0x0F	; 15
    1930:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    1932:	6e 81       	ldd	r22, Y+6	; 0x06
    1934:	7f 81       	ldd	r23, Y+7	; 0x07
    1936:	8a eb       	ldi	r24, 0xBA	; 186
    1938:	93 e2       	ldi	r25, 0x23	; 35
    193a:	4b d7       	rcall	.+3734   	; 0x27d2 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    193c:	8e 81       	ldd	r24, Y+6	; 0x06
    193e:	9f 81       	ldd	r25, Y+7	; 0x07
    1940:	20 91 0d 20 	lds	r18, 0x200D	; 0x80200d <dacBuf_len>
    1944:	30 91 0e 20 	lds	r19, 0x200E	; 0x80200e <dacBuf_len+0x1>
    1948:	82 17       	cp	r24, r18
    194a:	93 07       	cpc	r25, r19
    194c:	09 f4       	brne	.+2      	; 0x1950 <udc_process_setup+0xd6>
    194e:	12 c3       	rjmp	.+1572   	; 0x1f74 <udc_process_setup+0x6fa>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    1950:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <dacBuf_len>
    1954:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <dacBuf_len+0x1>
				tiny_dma_delayed_set(global_mode);
    1958:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    195c:	28 d9       	rcall	.-3504   	; 0xbae <tiny_dma_delayed_set>
    195e:	0a c3       	rjmp	.+1556   	; 0x1f74 <udc_process_setup+0x6fa>
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    1960:	e0 e4       	ldi	r30, 0x40	; 64
    1962:	f8 e0       	ldi	r31, 0x08	; 8
    1964:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1966:	ca eb       	ldi	r28, 0xBA	; 186
    1968:	d5 e2       	ldi	r29, 0x25	; 37
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	9b 81       	ldd	r25, Y+3	; 0x03
    196e:	86 ab       	std	Z+54, r24	; 0x36
    1970:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	8f 70       	andi	r24, 0x0F	; 15
    1976:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    1978:	6e 81       	ldd	r22, Y+6	; 0x06
    197a:	7f 81       	ldd	r23, Y+7	; 0x07
    197c:	8b ec       	ldi	r24, 0xCB	; 203
    197e:	95 e2       	ldi	r25, 0x25	; 37
    1980:	28 d7       	rcall	.+3664   	; 0x27d2 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    1982:	8e 81       	ldd	r24, Y+6	; 0x06
    1984:	9f 81       	ldd	r25, Y+7	; 0x07
    1986:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <auxDacBufLen>
    198a:	30 91 0c 20 	lds	r19, 0x200C	; 0x80200c <auxDacBufLen+0x1>
    198e:	82 17       	cp	r24, r18
    1990:	93 07       	cpc	r25, r19
    1992:	09 f4       	brne	.+2      	; 0x1996 <udc_process_setup+0x11c>
    1994:	ef c2       	rjmp	.+1502   	; 0x1f74 <udc_process_setup+0x6fa>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1996:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <auxDacBufLen>
    199a:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <auxDacBufLen+0x1>
				tiny_dma_delayed_set(global_mode);
    199e:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <global_mode>
    19a2:	05 d9       	rcall	.-3574   	; 0xbae <tiny_dma_delayed_set>
    19a4:	e7 c2       	rjmp	.+1486   	; 0x1f74 <udc_process_setup+0x6fa>
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    19a6:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    19aa:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    19ae:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    19b2:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <PSU_target>
    19b6:	de c2       	rjmp	.+1468   	; 0x1f74 <udc_process_setup+0x6fa>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    19b8:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    19bc:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    19c0:	d9 c2       	rjmp	.+1458   	; 0x1f74 <udc_process_setup+0x6fa>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    19c2:	e0 91 bc 25 	lds	r30, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    19c6:	f0 91 bd 25 	lds	r31, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    19ca:	e8 30       	cpi	r30, 0x08	; 8
    19cc:	f1 05       	cpc	r31, r1
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <udc_process_setup+0x158>
    19d0:	73 c0       	rjmp	.+230    	; 0x1ab8 <udc_process_setup+0x23e>
    19d2:	e1 5f       	subi	r30, 0xF1	; 241
    19d4:	fe 4f       	sbci	r31, 0xFE	; 254
    19d6:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	4d d8       	rcall	.-3942   	; 0xa7a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19e0:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    19e4:	1e d8       	rcall	.-4036   	; 0xa22 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(0);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	e2 d8       	rcall	.-3644   	; 0xbae <tiny_dma_delayed_set>
    19ea:	c4 c2       	rjmp	.+1416   	; 0x1f74 <udc_process_setup+0x6fa>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	44 d8       	rcall	.-3960   	; 0xa7a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    19f2:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    19f6:	15 d8       	rcall	.-4054   	; 0xa22 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(1);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	d9 d8       	rcall	.-3662   	; 0xbae <tiny_dma_delayed_set>
    19fc:	bb c2       	rjmp	.+1398   	; 0x1f74 <udc_process_setup+0x6fa>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	3b d8       	rcall	.-3978   	; 0xa7a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a04:	ca eb       	ldi	r28, 0xBA	; 186
    1a06:	d5 e2       	ldi	r29, 0x25	; 37
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	0b d8       	rcall	.-4074   	; 0xa22 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	18 d8       	rcall	.-4048   	; 0xa40 <tiny_adc_ch1setup>
					tiny_dma_delayed_set(2);
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	cd d8       	rcall	.-3686   	; 0xbae <tiny_dma_delayed_set>
    1a14:	af c2       	rjmp	.+1374   	; 0x1f74 <udc_process_setup+0x6fa>
					break;
				case 3:  //Mode 3
					tiny_dma_delayed_set(3);
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	ca d8       	rcall	.-3692   	; 0xbae <tiny_dma_delayed_set>
    1a1a:	ac c2       	rjmp	.+1368   	; 0x1f74 <udc_process_setup+0x6fa>
					break;
				case 4:  //Mode 4
					tiny_dma_delayed_set(4);
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	c7 d8       	rcall	.-3698   	; 0xbae <tiny_dma_delayed_set>
    1a20:	a9 c2       	rjmp	.+1362   	; 0x1f74 <udc_process_setup+0x6fa>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	29 d8       	rcall	.-4014   	; 0xa7a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a28:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a2c:	0e 94 11 05 	call	0xa22	; 0xa22 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(5);
    1a30:	85 e0       	ldi	r24, 0x05	; 5
    1a32:	bd d8       	rcall	.-3718   	; 0xbae <tiny_dma_delayed_set>
    1a34:	9f c2       	rjmp	.+1342   	; 0x1f74 <udc_process_setup+0x6fa>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	1f d8       	rcall	.-4034   	; 0xa7a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1a3c:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a40:	0e 94 11 05 	call	0xa22	; 0xa22 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(6);
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	b3 d8       	rcall	.-3738   	; 0xbae <tiny_dma_delayed_set>
    1a48:	95 c2       	rjmp	.+1322   	; 0x1f74 <udc_process_setup+0x6fa>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	15 d8       	rcall	.-4054   	; 0xa7a <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1a50:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1a54:	80 68       	ori	r24, 0x80	; 128
    1a56:	0e 94 11 05 	call	0xa22	; 0xa22 <tiny_adc_ch0setup>
					tiny_dma_delayed_set(7);
    1a5a:	87 e0       	ldi	r24, 0x07	; 7
    1a5c:	a8 d8       	rcall	.-3760   	; 0xbae <tiny_dma_delayed_set>
    1a5e:	8a c2       	rjmp	.+1300   	; 0x1f74 <udc_process_setup+0x6fa>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1a60:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a64:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    1a68:	85 c2       	rjmp	.+1290   	; 0x1f74 <udc_process_setup+0x6fa>
			return 1;
		case 0xa7:  //Soft Reset
		//Fill EEPROM buffer with value
		
		if(udd_g_ctrlreq.req.wValue){
    1a6a:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1a6e:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1a72:	89 2b       	or	r24, r25
    1a74:	91 f0       	breq	.+36     	; 0x1a9a <udc_process_setup+0x220>
			eeprom_safe_read();
    1a76:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_safe_read>
			memcpy(eeprom_buffer_write, eeprom_buffer_read, EEPROM_PAGE_SIZE);
    1a7a:	80 e2       	ldi	r24, 0x20	; 32
    1a7c:	e8 ec       	ldi	r30, 0xC8	; 200
    1a7e:	fd e2       	ldi	r31, 0x2D	; 45
    1a80:	ab ec       	ldi	r26, 0xCB	; 203
    1a82:	b7 e2       	ldi	r27, 0x27	; 39
    1a84:	01 90       	ld	r0, Z+
    1a86:	0d 92       	st	X+, r0
    1a88:	8a 95       	dec	r24
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <udc_process_setup+0x20a>
			eeprom_buffer_write[0] = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	80 93 cb 27 	sts	0x27CB, r24	; 0x8027cb <eeprom_buffer_write>
			eeprom_safe_write();
    1a92:	0e 94 9a 03 	call	0x734	; 0x734 <eeprom_safe_write>
			eeprom_safe_read();
    1a96:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_safe_read>
		}
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    1a9a:	e9 e7       	ldi	r30, 0x79	; 121
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	88 ed       	ldi	r24, 0xD8	; 216
    1aa2:	f8 94       	cli
    1aa4:	84 bf       	out	0x34, r24	; 52
    1aa6:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		case 0xa8:  //Firmware Version Request
			udd_set_setup_payload(&firmver, udd_g_ctrlreq.req.wLength);
    1aa8:	60 91 c0 25 	lds	r22, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1aac:	70 91 c1 25 	lds	r23, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1ab0:	8a ea       	ldi	r24, 0xAA	; 170
    1ab2:	90 e2       	ldi	r25, 0x20	; 32
    1ab4:	8e d6       	rcall	.+3356   	; 0x27d2 <udd_set_setup_payload>
    1ab6:	5e c2       	rjmp	.+1212   	; 0x1f74 <udc_process_setup+0x6fa>
			return true;
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1ab8:	91 11       	cpse	r25, r1
    1aba:	e1 c1       	rjmp	.+962    	; 0x1e7e <udc_process_setup+0x604>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1abc:	22 23       	and	r18, r18
    1abe:	0c f0       	brlt	.+2      	; 0x1ac2 <udc_process_setup+0x248>
    1ac0:	05 c1       	rjmp	.+522    	; 0x1ccc <udc_process_setup+0x452>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1ac2:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1ac6:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1aca:	21 15       	cp	r18, r1
    1acc:	31 05       	cpc	r19, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <udc_process_setup+0x258>
    1ad0:	d6 c1       	rjmp	.+940    	; 0x1e7e <udc_process_setup+0x604>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ad2:	8f 71       	andi	r24, 0x1F	; 31
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <udc_process_setup+0x25e>
    1ad6:	a3 c0       	rjmp	.+326    	; 0x1c1e <udc_process_setup+0x3a4>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ad8:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1adc:	96 30       	cpi	r25, 0x06	; 6
    1ade:	79 f0       	breq	.+30     	; 0x1afe <udc_process_setup+0x284>
    1ae0:	98 30       	cpi	r25, 0x08	; 8
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <udc_process_setup+0x26c>
    1ae4:	92 c0       	rjmp	.+292    	; 0x1c0a <udc_process_setup+0x390>
    1ae6:	91 11       	cpse	r25, r1
    1ae8:	9a c0       	rjmp	.+308    	; 0x1c1e <udc_process_setup+0x3a4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <udc_process_setup+0x278>
    1af0:	c6 c1       	rjmp	.+908    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1af2:	62 e0       	ldi	r22, 0x02	; 2
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	86 ec       	ldi	r24, 0xC6	; 198
    1af8:	90 e2       	ldi	r25, 0x20	; 32
    1afa:	6b d6       	rcall	.+3286   	; 0x27d2 <udd_set_setup_payload>
    1afc:	3d c2       	rjmp	.+1146   	; 0x1f78 <udc_process_setup+0x6fe>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1afe:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1b02:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b06:	29 2f       	mov	r18, r25
    1b08:	33 27       	eor	r19, r19
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	a9 f0       	breq	.+42     	; 0x1b3a <udc_process_setup+0x2c0>
    1b10:	24 f4       	brge	.+8      	; 0x1b1a <udc_process_setup+0x2a0>
    1b12:	21 30       	cpi	r18, 0x01	; 1
    1b14:	31 05       	cpc	r19, r1
    1b16:	41 f0       	breq	.+16     	; 0x1b28 <udc_process_setup+0x2ae>
    1b18:	a9 c1       	rjmp	.+850    	; 0x1e6c <udc_process_setup+0x5f2>
    1b1a:	23 30       	cpi	r18, 0x03	; 3
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	d9 f1       	breq	.+118    	; 0x1b96 <udc_process_setup+0x31c>
    1b20:	2f 30       	cpi	r18, 0x0F	; 15
    1b22:	31 05       	cpc	r19, r1
    1b24:	51 f1       	breq	.+84     	; 0x1b7a <udc_process_setup+0x300>
    1b26:	a2 c1       	rjmp	.+836    	; 0x1e6c <udc_process_setup+0x5f2>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1b28:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <udc_config>
    1b2c:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1b30:	dc 01       	movw	r26, r24
    1b32:	6c 91       	ld	r22, X
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	4d d6       	rcall	.+3226   	; 0x27d2 <udd_set_setup_payload>
    1b38:	59 c0       	rjmp	.+178    	; 0x1bec <udc_process_setup+0x372>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1b3a:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1b3e:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
    1b42:	21 89       	ldd	r18, Z+17	; 0x11
    1b44:	82 17       	cp	r24, r18
    1b46:	08 f0       	brcs	.+2      	; 0x1b4a <udc_process_setup+0x2d0>
    1b48:	9a c1       	rjmp	.+820    	; 0x1e7e <udc_process_setup+0x604>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1b4a:	99 27       	eor	r25, r25
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1b58:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1b5c:	e8 0f       	add	r30, r24
    1b5e:	f9 1f       	adc	r31, r25
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1b64:	fc 01       	movw	r30, r24
    1b66:	62 81       	ldd	r22, Z+2	; 0x02
    1b68:	73 81       	ldd	r23, Z+3	; 0x03
    1b6a:	33 d6       	rcall	.+3174   	; 0x27d2 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1b6c:	e0 91 c2 25 	lds	r30, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    1b70:	f0 91 c3 25 	lds	r31, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	81 83       	std	Z+1, r24	; 0x01
    1b78:	39 c0       	rjmp	.+114    	; 0x1bec <udc_process_setup+0x372>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1b7a:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <udc_config+0x4>
    1b7e:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <udc_config+0x5>
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <udc_process_setup+0x30e>
    1b86:	7b c1       	rjmp	.+758    	; 0x1e7e <udc_process_setup+0x604>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1b88:	dc 01       	movw	r26, r24
    1b8a:	12 96       	adiw	r26, 0x02	; 2
    1b8c:	6d 91       	ld	r22, X+
    1b8e:	7c 91       	ld	r23, X
    1b90:	13 97       	sbiw	r26, 0x03	; 3
    1b92:	1f d6       	rcall	.+3134   	; 0x27d2 <udd_set_setup_payload>
    1b94:	2b c0       	rjmp	.+86     	; 0x1bec <udc_process_setup+0x372>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1b96:	99 27       	eor	r25, r25
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	71 f0       	breq	.+28     	; 0x1bba <udc_process_setup+0x340>
    1b9e:	38 f0       	brcs	.+14     	; 0x1bae <udc_process_setup+0x334>
    1ba0:	02 97       	sbiw	r24, 0x02	; 2
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <udc_process_setup+0x32c>
    1ba4:	6c c1       	rjmp	.+728    	; 0x1e7e <udc_process_setup+0x604>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1ba6:	2a e8       	ldi	r18, 0x8A	; 138
    1ba8:	30 e2       	ldi	r19, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1baa:	88 e0       	ldi	r24, 0x08	; 8
    1bac:	09 c0       	rjmp	.+18     	; 0x1bc0 <udc_process_setup+0x346>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1bae:	64 e0       	ldi	r22, 0x04	; 4
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	8c e9       	ldi	r24, 0x9C	; 156
    1bb4:	90 e2       	ldi	r25, 0x20	; 32
    1bb6:	0d d6       	rcall	.+3098   	; 0x27d2 <udd_set_setup_payload>
    1bb8:	19 c0       	rjmp	.+50     	; 0x1bec <udc_process_setup+0x372>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1bba:	23 e9       	ldi	r18, 0x93	; 147
    1bbc:	30 e2       	ldi	r19, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1bbe:	87 e0       	ldi	r24, 0x07	; 7
    1bc0:	42 2f       	mov	r20, r18
    1bc2:	aa e7       	ldi	r26, 0x7A	; 122
    1bc4:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1bc6:	e2 2f       	mov	r30, r18
    1bc8:	f3 2f       	mov	r31, r19
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1bca:	21 91       	ld	r18, Z+
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	2d 93       	st	X+, r18
    1bd0:	3d 93       	st	X+, r19
    1bd2:	9e 2f       	mov	r25, r30
    1bd4:	94 1b       	sub	r25, r20
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1bd6:	98 17       	cp	r25, r24
    1bd8:	c0 f3       	brcs	.-16     	; 0x1bca <udc_process_setup+0x350>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1bda:	68 2f       	mov	r22, r24
    1bdc:	66 0f       	add	r22, r22
    1bde:	6e 5f       	subi	r22, 0xFE	; 254
    1be0:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
		udd_set_setup_payload(
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	88 e7       	ldi	r24, 0x78	; 120
    1be8:	90 e2       	ldi	r25, 0x20	; 32
    1bea:	f3 d5       	rcall	.+3046   	; 0x27d2 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1bec:	ea eb       	ldi	r30, 0xBA	; 186
    1bee:	f5 e2       	ldi	r31, 0x25	; 37
    1bf0:	86 81       	ldd	r24, Z+6	; 0x06
    1bf2:	97 81       	ldd	r25, Z+7	; 0x07
    1bf4:	22 85       	ldd	r18, Z+10	; 0x0a
    1bf6:	33 85       	ldd	r19, Z+11	; 0x0b
    1bf8:	82 17       	cp	r24, r18
    1bfa:	93 07       	cpc	r25, r19
    1bfc:	08 f0       	brcs	.+2      	; 0x1c00 <udc_process_setup+0x386>
    1bfe:	bc c1       	rjmp	.+888    	; 0x1f78 <udc_process_setup+0x6fe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1c00:	80 93 c4 25 	sts	0x25C4, r24	; 0x8025c4 <udd_g_ctrlreq+0xa>
    1c04:	90 93 c5 25 	sts	0x25C5, r25	; 0x8025c5 <udd_g_ctrlreq+0xb>
    1c08:	b7 c1       	rjmp	.+878    	; 0x1f78 <udc_process_setup+0x6fe>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1c0a:	21 30       	cpi	r18, 0x01	; 1
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	09 f0       	breq	.+2      	; 0x1c12 <udc_process_setup+0x398>
    1c10:	36 c1       	rjmp	.+620    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	82 ec       	ldi	r24, 0xC2	; 194
    1c18:	90 e2       	ldi	r25, 0x20	; 32
    1c1a:	db d5       	rcall	.+2998   	; 0x27d2 <udd_set_setup_payload>
    1c1c:	ad c1       	rjmp	.+858    	; 0x1f78 <udc_process_setup+0x6fe>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	e1 f5       	brne	.+120    	; 0x1c9a <udc_process_setup+0x420>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1c22:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1c26:	9a 30       	cpi	r25, 0x0A	; 10
    1c28:	c1 f5       	brne	.+112    	; 0x1c9a <udc_process_setup+0x420>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1c2a:	21 30       	cpi	r18, 0x01	; 1
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <udc_process_setup+0x3b8>
    1c30:	26 c1       	rjmp	.+588    	; 0x1e7e <udc_process_setup+0x604>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1c32:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1c36:	88 23       	and	r24, r24
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <udc_process_setup+0x3c2>
    1c3a:	21 c1       	rjmp	.+578    	; 0x1e7e <udc_process_setup+0x604>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c3c:	c0 91 be 25 	lds	r28, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1c40:	d0 91 bf 25 	lds	r29, 0x25BF	; 0x8025bf <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c44:	00 91 bf 20 	lds	r16, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1c48:	10 91 c0 20 	lds	r17, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1c4c:	d8 01       	movw	r26, r16
    1c4e:	ed 91       	ld	r30, X+
    1c50:	fc 91       	ld	r31, X
    1c52:	84 81       	ldd	r24, Z+4	; 0x04
    1c54:	c8 17       	cp	r28, r24
    1c56:	08 f0       	brcs	.+2      	; 0x1c5a <udc_process_setup+0x3e0>
    1c58:	12 c1       	rjmp	.+548    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	8c 2f       	mov	r24, r28
    1c5e:	02 dd       	rcall	.-1532   	; 0x1664 <udc_update_iface_desc>
    1c60:	88 23       	and	r24, r24
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <udc_process_setup+0x3ec>
    1c64:	0c c1       	rjmp	.+536    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c66:	ce 01       	movw	r24, r28
    1c68:	99 27       	eor	r25, r25
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	d8 01       	movw	r26, r16
    1c70:	12 96       	adiw	r26, 0x02	; 2
    1c72:	ed 91       	ld	r30, X+
    1c74:	fc 91       	ld	r31, X
    1c76:	13 97       	sbiw	r26, 0x03	; 3
    1c78:	e8 0f       	add	r30, r24
    1c7a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1c7c:	01 90       	ld	r0, Z+
    1c7e:	f0 81       	ld	r31, Z
    1c80:	e0 2d       	mov	r30, r0
    1c82:	86 81       	ldd	r24, Z+6	; 0x06
    1c84:	97 81       	ldd	r25, Z+7	; 0x07
    1c86:	fc 01       	movw	r30, r24
    1c88:	09 95       	icall
    1c8a:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	84 ec       	ldi	r24, 0xC4	; 196
    1c94:	90 e2       	ldi	r25, 0x20	; 32
    1c96:	9d d5       	rcall	.+2874   	; 0x27d2 <udd_set_setup_payload>
    1c98:	6f c1       	rjmp	.+734    	; 0x1f78 <udc_process_setup+0x6fe>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <udc_process_setup+0x426>
    1c9e:	ef c0       	rjmp	.+478    	; 0x1e7e <udc_process_setup+0x604>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ca0:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	e4 c0       	rjmp	.+456    	; 0x1e70 <udc_process_setup+0x5f6>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1ca8:	22 30       	cpi	r18, 0x02	; 2
    1caa:	31 05       	cpc	r19, r1
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <udc_process_setup+0x436>
    1cae:	e7 c0       	rjmp	.+462    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1cb0:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1cb4:	01 d6       	rcall	.+3074   	; 0x28b8 <udd_ep_is_halted>
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <udc_ep_status.5691>
    1cbc:	90 93 bc 20 	sts	0x20BC, r25	; 0x8020bc <udc_ep_status.5691+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1cc0:	62 e0       	ldi	r22, 0x02	; 2
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	8b eb       	ldi	r24, 0xBB	; 187
    1cc6:	90 e2       	ldi	r25, 0x20	; 32
    1cc8:	84 d5       	rcall	.+2824   	; 0x27d2 <udd_set_setup_payload>
    1cca:	56 c1       	rjmp	.+684    	; 0x1f78 <udc_process_setup+0x6fe>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ccc:	8f 71       	andi	r24, 0x1F	; 31
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <udc_process_setup+0x458>
    1cd0:	83 c0       	rjmp	.+262    	; 0x1dd8 <udc_process_setup+0x55e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cd2:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1cd6:	93 30       	cpi	r25, 0x03	; 3
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <udc_process_setup+0x462>
    1cda:	cc c0       	rjmp	.+408    	; 0x1e74 <udc_process_setup+0x5fa>
    1cdc:	18 f4       	brcc	.+6      	; 0x1ce4 <udc_process_setup+0x46a>
    1cde:	91 30       	cpi	r25, 0x01	; 1
    1ce0:	a1 f0       	breq	.+40     	; 0x1d0a <udc_process_setup+0x490>
    1ce2:	7a c0       	rjmp	.+244    	; 0x1dd8 <udc_process_setup+0x55e>
    1ce4:	95 30       	cpi	r25, 0x05	; 5
    1ce6:	19 f0       	breq	.+6      	; 0x1cee <udc_process_setup+0x474>
    1ce8:	99 30       	cpi	r25, 0x09	; 9
    1cea:	39 f1       	breq	.+78     	; 0x1d3a <udc_process_setup+0x4c0>
    1cec:	75 c0       	rjmp	.+234    	; 0x1dd8 <udc_process_setup+0x55e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1cee:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1cf2:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1cf6:	89 2b       	or	r24, r25
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <udc_process_setup+0x482>
    1cfa:	c1 c0       	rjmp	.+386    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1cfc:	8c e2       	ldi	r24, 0x2C	; 44
    1cfe:	9b e0       	ldi	r25, 0x0B	; 11
    1d00:	80 93 c6 25 	sts	0x25C6, r24	; 0x8025c6 <udd_g_ctrlreq+0xc>
    1d04:	90 93 c7 25 	sts	0x25C7, r25	; 0x8025c7 <udd_g_ctrlreq+0xd>
    1d08:	37 c1       	rjmp	.+622    	; 0x1f78 <udc_process_setup+0x6fe>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d0a:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d0e:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d12:	89 2b       	or	r24, r25
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <udc_process_setup+0x49e>
    1d16:	b3 c0       	rjmp	.+358    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1d18:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d1c:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <udc_process_setup+0x4ac>
    1d24:	ac c0       	rjmp	.+344    	; 0x1e7e <udc_process_setup+0x604>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1d26:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <udc_device_status>
    1d2a:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <udc_device_status+0x1>
    1d2e:	8d 7f       	andi	r24, 0xFD	; 253
    1d30:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <udc_device_status>
    1d34:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <udc_device_status+0x1>
    1d38:	1f c1       	rjmp	.+574    	; 0x1f78 <udc_process_setup+0x6fe>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1d3a:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1d3e:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1d42:	89 2b       	or	r24, r25
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <udc_process_setup+0x4ce>
    1d46:	9b c0       	rjmp	.+310    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1d48:	41 d5       	rcall	.+2690   	; 0x27cc <udd_getaddress>
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <udc_process_setup+0x4d6>
    1d4e:	97 c0       	rjmp	.+302    	; 0x1e7e <udc_process_setup+0x604>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d50:	20 91 bc 25 	lds	r18, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d54:	30 91 bd 25 	lds	r19, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1d58:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1d5a:	e0 91 19 20 	lds	r30, 0x2019	; 0x802019 <udc_config>
    1d5e:	f0 91 1a 20 	lds	r31, 0x201A	; 0x80201a <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1d62:	81 89       	ldd	r24, Z+17	; 0x11
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	82 17       	cp	r24, r18
    1d68:	93 07       	cpc	r25, r19
    1d6a:	08 f4       	brcc	.+2      	; 0x1d6e <udc_process_setup+0x4f4>
    1d6c:	88 c0       	rjmp	.+272    	; 0x1e7e <udc_process_setup+0x604>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1d6e:	30 dd       	rcall	.-1440   	; 0x17d0 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1d70:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1d74:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1d78:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <udc_process_setup+0x508>
    1d80:	fb c0       	rjmp	.+502    	; 0x1f78 <udc_process_setup+0x6fe>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1d82:	99 27       	eor	r25, r25
    1d84:	81 50       	subi	r24, 0x01	; 1
    1d86:	90 4c       	sbci	r25, 0xC0	; 192
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	e0 91 1b 20 	lds	r30, 0x201B	; 0x80201b <udc_config+0x2>
    1d94:	f0 91 1c 20 	lds	r31, 0x201C	; 0x80201c <udc_config+0x3>
    1d98:	e8 0f       	add	r30, r24
    1d9a:	f9 1f       	adc	r31, r25
    1d9c:	e0 93 bf 20 	sts	0x20BF, r30	; 0x8020bf <udc_ptr_conf>
    1da0:	f0 93 c0 20 	sts	0x20C0, r31	; 0x8020c0 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1da4:	01 90       	ld	r0, Z+
    1da6:	f0 81       	ld	r31, Z
    1da8:	e0 2d       	mov	r30, r0
    1daa:	84 81       	ldd	r24, Z+4	; 0x04
    1dac:	88 23       	and	r24, r24
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <udc_process_setup+0x538>
    1db0:	e3 c0       	rjmp	.+454    	; 0x1f78 <udc_process_setup+0x6fe>
    1db2:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	8c 2f       	mov	r24, r28
    1db8:	d1 dc       	rcall	.-1630   	; 0x175c <udc_iface_enable>
    1dba:	88 23       	and	r24, r24
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <udc_process_setup+0x546>
    1dbe:	5f c0       	rjmp	.+190    	; 0x1e7e <udc_process_setup+0x604>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1dc0:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dc2:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1dc6:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1dca:	01 90       	ld	r0, Z+
    1dcc:	f0 81       	ld	r31, Z
    1dce:	e0 2d       	mov	r30, r0
    1dd0:	84 81       	ldd	r24, Z+4	; 0x04
    1dd2:	c8 17       	cp	r28, r24
    1dd4:	78 f3       	brcs	.-34     	; 0x1db4 <udc_process_setup+0x53a>
    1dd6:	d0 c0       	rjmp	.+416    	; 0x1f78 <udc_process_setup+0x6fe>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	e1 f4       	brne	.+56     	; 0x1e14 <udc_process_setup+0x59a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ddc:	90 91 bb 25 	lds	r25, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1de0:	9b 30       	cpi	r25, 0x0B	; 11
    1de2:	c1 f4       	brne	.+48     	; 0x1e14 <udc_process_setup+0x59a>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1de4:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1de8:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1dec:	89 2b       	or	r24, r25
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <udc_process_setup+0x578>
    1df0:	46 c0       	rjmp	.+140    	; 0x1e7e <udc_process_setup+0x604>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1df2:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1df6:	88 23       	and	r24, r24
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <udc_process_setup+0x582>
    1dfa:	41 c0       	rjmp	.+130    	; 0x1e7e <udc_process_setup+0x604>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1dfc:	ea eb       	ldi	r30, 0xBA	; 186
    1dfe:	f5 e2       	ldi	r31, 0x25	; 37
    1e00:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1e02:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1e04:	8c 2f       	mov	r24, r28
    1e06:	68 dc       	rcall	.-1840   	; 0x16d8 <udc_iface_disable>
    1e08:	88 23       	and	r24, r24
    1e0a:	c9 f1       	breq	.+114    	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1e0c:	6d 2f       	mov	r22, r29
    1e0e:	8c 2f       	mov	r24, r28
    1e10:	a5 dc       	rcall	.-1718   	; 0x175c <udc_iface_enable>
    1e12:	33 c0       	rjmp	.+102    	; 0x1e7a <udc_process_setup+0x600>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	99 f5       	brne	.+102    	; 0x1e7e <udc_process_setup+0x604>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1e18:	80 91 bb 25 	lds	r24, 0x25BB	; 0x8025bb <udd_g_ctrlreq+0x1>
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	19 f0       	breq	.+6      	; 0x1e26 <udc_process_setup+0x5ac>
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	89 f0       	breq	.+34     	; 0x1e46 <udc_process_setup+0x5cc>
    1e24:	29 c0       	rjmp	.+82     	; 0x1e78 <udc_process_setup+0x5fe>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e26:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e2a:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e2e:	89 2b       	or	r24, r25
    1e30:	31 f5       	brne	.+76     	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e32:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1e36:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1e3a:	89 2b       	or	r24, r25
    1e3c:	01 f5       	brne	.+64     	; 0x1e7e <udc_process_setup+0x604>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e3e:	80 91 be 25 	lds	r24, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1e42:	55 d5       	rcall	.+2730   	; 0x28ee <udd_ep_clear_halt>
    1e44:	1a c0       	rjmp	.+52     	; 0x1e7a <udc_process_setup+0x600>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1e46:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    1e4a:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    1e4e:	89 2b       	or	r24, r25
    1e50:	b1 f4       	brne	.+44     	; 0x1e7e <udc_process_setup+0x604>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e52:	80 91 bc 25 	lds	r24, 0x25BC	; 0x8025bc <udd_g_ctrlreq+0x2>
    1e56:	90 91 bd 25 	lds	r25, 0x25BD	; 0x8025bd <udd_g_ctrlreq+0x3>
    1e5a:	89 2b       	or	r24, r25
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <udc_process_setup+0x604>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e5e:	ca eb       	ldi	r28, 0xBA	; 186
    1e60:	d5 e2       	ldi	r29, 0x25	; 37
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	33 d6       	rcall	.+3174   	; 0x2acc <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	96 d6       	rcall	.+3372   	; 0x2b96 <udd_ep_set_halt>
    1e6a:	07 c0       	rjmp	.+14     	; 0x1e7a <udc_process_setup+0x600>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <udc_process_setup+0x600>
				break;
			}
		}
#endif
	}
	return false;
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <udc_process_setup+0x600>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <udc_process_setup+0x600>
				break;
			}
		}
#endif
	}
	return false;
    1e78:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1e7a:	81 11       	cpse	r24, r1
    1e7c:	7e c0       	rjmp	.+252    	; 0x1f7a <udc_process_setup+0x700>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1e7e:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1e82:	8f 71       	andi	r24, 0x1F	; 31
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	71 f5       	brne	.+92     	; 0x1ee4 <udc_process_setup+0x66a>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1e88:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1e8c:	88 23       	and	r24, r24
    1e8e:	51 f1       	breq	.+84     	; 0x1ee4 <udc_process_setup+0x66a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e90:	00 91 be 25 	lds	r16, 0x25BE	; 0x8025be <udd_g_ctrlreq+0x4>
    1e94:	10 91 bf 25 	lds	r17, 0x25BF	; 0x8025bf <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1e98:	c0 91 bf 20 	lds	r28, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1e9c:	d0 91 c0 20 	lds	r29, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1ea0:	e8 81       	ld	r30, Y
    1ea2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ea4:	84 81       	ldd	r24, Z+4	; 0x04
    1ea6:	08 17       	cp	r16, r24
    1ea8:	e8 f4       	brcc	.+58     	; 0x1ee4 <udc_process_setup+0x66a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	80 2f       	mov	r24, r16
    1eae:	da db       	rcall	.-2124   	; 0x1664 <udc_update_iface_desc>
    1eb0:	88 23       	and	r24, r24
    1eb2:	c1 f0       	breq	.+48     	; 0x1ee4 <udc_process_setup+0x66a>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	ff 27       	eor	r31, r31
    1eb8:	cf 01       	movw	r24, r30
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec2:	e8 0f       	add	r30, r24
    1ec4:	f9 1f       	adc	r31, r25
    1ec6:	c0 81       	ld	r28, Z
    1ec8:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1eca:	ee 81       	ldd	r30, Y+6	; 0x06
    1ecc:	ff 81       	ldd	r31, Y+7	; 0x07
    1ece:	09 95       	icall
    1ed0:	68 2f       	mov	r22, r24
    1ed2:	80 2f       	mov	r24, r16
    1ed4:	c7 db       	rcall	.-2162   	; 0x1664 <udc_update_iface_desc>
    1ed6:	88 23       	and	r24, r24
    1ed8:	29 f0       	breq	.+10     	; 0x1ee4 <udc_process_setup+0x66a>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1eda:	ec 81       	ldd	r30, Y+4	; 0x04
    1edc:	fd 81       	ldd	r31, Y+5	; 0x05
    1ede:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	4b c0       	rjmp	.+150    	; 0x1f7a <udc_process_setup+0x700>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1ee4:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    1ee8:	8f 71       	andi	r24, 0x1F	; 31
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <udc_process_setup+0x676>
    1eee:	40 c0       	rjmp	.+128    	; 0x1f70 <udc_process_setup+0x6f6>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1ef0:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udc_num_configuration>
    1ef4:	88 23       	and	r24, r24
    1ef6:	b1 f1       	breq	.+108    	; 0x1f64 <udc_process_setup+0x6ea>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ef8:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1efc:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1f00:	ed 91       	ld	r30, X+
    1f02:	fc 91       	ld	r31, X
    1f04:	11 97       	sbiw	r26, 0x01	; 1
    1f06:	84 81       	ldd	r24, Z+4	; 0x04
    1f08:	88 23       	and	r24, r24
    1f0a:	71 f1       	breq	.+92     	; 0x1f68 <udc_process_setup+0x6ee>
    1f0c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f0e:	ec 2f       	mov	r30, r28
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	ee 0f       	add	r30, r30
    1f14:	ff 1f       	adc	r31, r31
    1f16:	12 96       	adiw	r26, 0x02	; 2
    1f18:	8d 91       	ld	r24, X+
    1f1a:	9c 91       	ld	r25, X
    1f1c:	13 97       	sbiw	r26, 0x03	; 3
    1f1e:	e8 0f       	add	r30, r24
    1f20:	f9 1f       	adc	r31, r25
    1f22:	00 81       	ld	r16, Z
    1f24:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f26:	d8 01       	movw	r26, r16
    1f28:	16 96       	adiw	r26, 0x06	; 6
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	17 97       	sbiw	r26, 0x07	; 7
    1f30:	09 95       	icall
    1f32:	68 2f       	mov	r22, r24
    1f34:	8c 2f       	mov	r24, r28
    1f36:	96 db       	rcall	.-2260   	; 0x1664 <udc_update_iface_desc>
    1f38:	88 23       	and	r24, r24
    1f3a:	f9 f0       	breq	.+62     	; 0x1f7a <udc_process_setup+0x700>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1f3c:	d8 01       	movw	r26, r16
    1f3e:	14 96       	adiw	r26, 0x04	; 4
    1f40:	ed 91       	ld	r30, X+
    1f42:	fc 91       	ld	r31, X
    1f44:	15 97       	sbiw	r26, 0x05	; 5
    1f46:	09 95       	icall
    1f48:	81 11       	cpse	r24, r1
    1f4a:	17 c0       	rjmp	.+46     	; 0x1f7a <udc_process_setup+0x700>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1f4c:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f4e:	a0 91 bf 20 	lds	r26, 0x20BF	; 0x8020bf <udc_ptr_conf>
    1f52:	b0 91 c0 20 	lds	r27, 0x20C0	; 0x8020c0 <udc_ptr_conf+0x1>
    1f56:	ed 91       	ld	r30, X+
    1f58:	fc 91       	ld	r31, X
    1f5a:	11 97       	sbiw	r26, 0x01	; 1
    1f5c:	94 81       	ldd	r25, Z+4	; 0x04
    1f5e:	c9 17       	cp	r28, r25
    1f60:	b0 f2       	brcs	.-84     	; 0x1f0e <udc_process_setup+0x694>
    1f62:	0b c0       	rjmp	.+22     	; 0x1f7a <udc_process_setup+0x700>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <udc_process_setup+0x700>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	07 c0       	rjmp	.+14     	; 0x1f7a <udc_process_setup+0x700>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <udc_process_setup+0x700>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <udc_process_setup+0x700>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <udc_process_setup+0x700>
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	08 95       	ret

00001f84 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f84:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1f86:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1f88:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1f8a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1f8c:	60 83       	st	Z, r22
	ret                             // Return to caller
    1f8e:	08 95       	ret

00001f90 <nvm_eeprom_read_buffer>:
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
	nvm_exec();
	NVM.CMD = old_cmd;
}
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	9c 01       	movw	r18, r24
    1f96:	db 01       	movw	r26, r22
    1f98:	e0 ec       	ldi	r30, 0xC0	; 192
    1f9a:	f1 e0       	ldi	r31, 0x01	; 1
    1f9c:	97 85       	ldd	r25, Z+15	; 0x0f
    1f9e:	99 23       	and	r25, r25
    1fa0:	ec f3       	brlt	.-6      	; 0x1f9c <nvm_eeprom_read_buffer+0xc>
    1fa2:	cc ec       	ldi	r28, 0xCC	; 204
    1fa4:	d1 e0       	ldi	r29, 0x01	; 1
    1fa6:	98 81       	ld	r25, Y
    1fa8:	98 60       	ori	r25, 0x08	; 8
    1faa:	98 83       	st	Y, r25
    1fac:	b9 01       	movw	r22, r18
    1fae:	70 5f       	subi	r23, 0xF0	; 240
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	f4 d7       	rcall	.+4072   	; 0x2f9c <memcpy>
    1fb4:	88 81       	ld	r24, Y
    1fb6:	87 7f       	andi	r24, 0xF7	; 247
    1fb8:	88 83       	st	Y, r24
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <nvm_eeprom_load_byte_to_buffer>:
    1fc0:	e0 ec       	ldi	r30, 0xC0	; 192
    1fc2:	f1 e0       	ldi	r31, 0x01	; 1
    1fc4:	97 85       	ldd	r25, Z+15	; 0x0f
    1fc6:	99 23       	and	r25, r25
    1fc8:	ec f3       	brlt	.-6      	; 0x1fc4 <nvm_eeprom_load_byte_to_buffer+0x4>
    1fca:	ac ec       	ldi	r26, 0xCC	; 204
    1fcc:	b1 e0       	ldi	r27, 0x01	; 1
    1fce:	9c 91       	ld	r25, X
    1fd0:	98 60       	ori	r25, 0x08	; 8
    1fd2:	9c 93       	st	X, r25
    1fd4:	e8 2f       	mov	r30, r24
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	f0 5f       	subi	r31, 0xF0	; 240
    1fda:	60 83       	st	Z, r22
    1fdc:	8c 91       	ld	r24, X
    1fde:	87 7f       	andi	r24, 0xF7	; 247
    1fe0:	8c 93       	st	X, r24
    1fe2:	08 95       	ret

00001fe4 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1ff2:	e0 ec       	ldi	r30, 0xC0	; 192
    1ff4:	f1 e0       	ldi	r31, 0x01	; 1
    1ff6:	87 85       	ldd	r24, Z+15	; 0x0f
    1ff8:	88 23       	and	r24, r24
    1ffa:	ec f3       	brlt	.-6      	; 0x1ff6 <nvm_eeprom_load_page_to_buffer+0x12>
    1ffc:	78 01       	movw	r14, r16
    1ffe:	80 e2       	ldi	r24, 0x20	; 32
    2000:	e8 0e       	add	r14, r24
    2002:	f1 1c       	adc	r15, r1
    2004:	e8 01       	movw	r28, r16
    2006:	8c 2f       	mov	r24, r28
    2008:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    200a:	69 91       	ld	r22, Y+
    200c:	d9 df       	rcall	.-78     	; 0x1fc0 <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    200e:	ce 15       	cp	r28, r14
    2010:	df 05       	cpc	r29, r15
    2012:	c9 f7       	brne	.-14     	; 0x2006 <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	08 95       	ret

00002022 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	e0 ec       	ldi	r30, 0xC0	; 192
    202a:	f1 e0       	ldi	r31, 0x01	; 1
    202c:	97 85       	ldd	r25, Z+15	; 0x0f
    202e:	99 23       	and	r25, r25
    2030:	ec f3       	brlt	.-6      	; 0x202c <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2032:	20 e2       	ldi	r18, 0x20	; 32
    2034:	82 9f       	mul	r24, r18
    2036:	c0 01       	movw	r24, r0
    2038:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    203a:	c0 ec       	ldi	r28, 0xC0	; 192
    203c:	d1 e0       	ldi	r29, 0x01	; 1
    203e:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2040:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2042:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    2044:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    2046:	85 e3       	ldi	r24, 0x35	; 53
    2048:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	8b ec       	ldi	r24, 0xCB	; 203
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	99 df       	rcall	.-206    	; 0x1f84 <ccp_write_io>
	NVM.CMD = old_cmd;
    2052:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	1f 91       	pop	r17
    205a:	08 95       	ret

0000205c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    205c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2060:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2062:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2064:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2068:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    206a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    206e:	08 95       	ret

00002070 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    2070:	81 11       	cpse	r24, r1
    2072:	22 c0       	rjmp	.+68     	; 0x20b8 <udd_sleep_mode+0x48>
    2074:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <udd_b_idle>
    2078:	99 23       	and	r25, r25
    207a:	d9 f0       	breq	.+54     	; 0x20b2 <udd_sleep_mode+0x42>
    207c:	90 91 eb 2d 	lds	r25, 0x2DEB	; 0x802deb <sleepmgr_locks+0x1>
    2080:	91 11       	cpse	r25, r1
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <udd_sleep_mode+0x16>
    2084:	ff cf       	rjmp	.-2      	; 0x2084 <udd_sleep_mode+0x14>
    2086:	2f b7       	in	r18, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	ea ee       	ldi	r30, 0xEA	; 234
    208c:	fd e2       	ldi	r31, 0x2D	; 45
    208e:	91 81       	ldd	r25, Z+1	; 0x01
    2090:	91 50       	subi	r25, 0x01	; 1
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	2f bf       	out	0x3f, r18	; 63
    2096:	0d c0       	rjmp	.+26     	; 0x20b2 <udd_sleep_mode+0x42>
    2098:	90 91 eb 2d 	lds	r25, 0x2DEB	; 0x802deb <sleepmgr_locks+0x1>
    209c:	9f 3f       	cpi	r25, 0xFF	; 255
    209e:	09 f4       	brne	.+2      	; 0x20a2 <udd_sleep_mode+0x32>
    20a0:	ff cf       	rjmp	.-2      	; 0x20a0 <udd_sleep_mode+0x30>
    20a2:	2f b7       	in	r18, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	ea ee       	ldi	r30, 0xEA	; 234
    20a8:	fd e2       	ldi	r31, 0x2D	; 45
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	9f 5f       	subi	r25, 0xFF	; 255
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	2f bf       	out	0x3f, r18	; 63
    20b2:	80 93 8c 23 	sts	0x238C, r24	; 0x80238c <udd_b_idle>
    20b6:	08 95       	ret
    20b8:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <udd_b_idle>
    20bc:	99 23       	and	r25, r25
    20be:	61 f3       	breq	.-40     	; 0x2098 <udd_sleep_mode+0x28>
    20c0:	f8 cf       	rjmp	.-16     	; 0x20b2 <udd_sleep_mode+0x42>

000020c2 <udd_ctrl_init>:
    20c2:	0f 93       	push	r16
    20c4:	e8 ec       	ldi	r30, 0xC8	; 200
    20c6:	f4 e0       	ldi	r31, 0x04	; 4
    20c8:	80 81       	ld	r24, Z
    20ca:	8f 7d       	andi	r24, 0xDF	; 223
    20cc:	80 83       	st	Z, r24
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 7d       	andi	r24, 0xDF	; 223
    20d2:	80 83       	st	Z, r24
    20d4:	e0 e2       	ldi	r30, 0x20	; 32
    20d6:	f3 e2       	ldi	r31, 0x23	; 35
    20d8:	02 e0       	ldi	r16, 0x02	; 2
    20da:	05 93       	las	Z, r16
    20dc:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udd_sram+0x26>
    20e0:	10 92 23 23 	sts	0x2323, r1	; 0x802323 <udd_sram+0x27>
    20e4:	00 e2       	ldi	r16, 0x20	; 32
    20e6:	06 93       	lac	Z, r16
    20e8:	00 e4       	ldi	r16, 0x40	; 64
    20ea:	06 93       	lac	Z, r16
    20ec:	e8 e1       	ldi	r30, 0x18	; 24
    20ee:	f3 e2       	ldi	r31, 0x23	; 35
    20f0:	00 e2       	ldi	r16, 0x20	; 32
    20f2:	06 93       	lac	Z, r16
    20f4:	00 e4       	ldi	r16, 0x40	; 64
    20f6:	06 93       	lac	Z, r16
    20f8:	ea eb       	ldi	r30, 0xBA	; 186
    20fa:	f5 e2       	ldi	r31, 0x25	; 37
    20fc:	14 86       	std	Z+12, r1	; 0x0c
    20fe:	15 86       	std	Z+13, r1	; 0x0d
    2100:	16 86       	std	Z+14, r1	; 0x0e
    2102:	17 86       	std	Z+15, r1	; 0x0f
    2104:	12 86       	std	Z+10, r1	; 0x0a
    2106:	13 86       	std	Z+11, r1	; 0x0b
    2108:	10 92 f9 22 	sts	0x22F9, r1	; 0x8022f9 <udd_ep_control_state>
    210c:	0f 91       	pop	r16
    210e:	08 95       	ret

00002110 <udd_ctrl_stall_data>:
    2110:	0f 93       	push	r16
    2112:	85 e0       	ldi	r24, 0x05	; 5
    2114:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    2118:	e1 e2       	ldi	r30, 0x21	; 33
    211a:	f3 e2       	ldi	r31, 0x23	; 35
    211c:	04 e0       	ldi	r16, 0x04	; 4
    211e:	05 93       	las	Z, r16
    2120:	e9 e1       	ldi	r30, 0x19	; 25
    2122:	f3 e2       	ldi	r31, 0x23	; 35
    2124:	04 e0       	ldi	r16, 0x04	; 4
    2126:	05 93       	las	Z, r16
    2128:	0f 91       	pop	r16
    212a:	08 95       	ret

0000212c <udd_ctrl_send_zlp_in>:
    212c:	0f 93       	push	r16
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    2134:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <udd_sram+0x26>
    2138:	10 92 23 23 	sts	0x2323, r1	; 0x802323 <udd_sram+0x27>
    213c:	e0 e2       	ldi	r30, 0x20	; 32
    213e:	f3 e2       	ldi	r31, 0x23	; 35
    2140:	02 e0       	ldi	r16, 0x02	; 2
    2142:	06 93       	lac	Z, r16
    2144:	0f 91       	pop	r16
    2146:	08 95       	ret

00002148 <udd_ctrl_endofrequest>:
    2148:	e0 91 c6 25 	lds	r30, 0x25C6	; 0x8025c6 <udd_g_ctrlreq+0xc>
    214c:	f0 91 c7 25 	lds	r31, 0x25C7	; 0x8025c7 <udd_g_ctrlreq+0xd>
    2150:	30 97       	sbiw	r30, 0x00	; 0
    2152:	09 f0       	breq	.+2      	; 0x2156 <udd_ctrl_endofrequest+0xe>
    2154:	09 95       	icall
    2156:	08 95       	ret

00002158 <udd_ctrl_in_sent>:
    2158:	0f 93       	push	r16
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2162:	83 30       	cpi	r24, 0x03	; 3
    2164:	19 f4       	brne	.+6      	; 0x216c <udd_ctrl_in_sent+0x14>
    2166:	f0 df       	rcall	.-32     	; 0x2148 <udd_ctrl_endofrequest>
    2168:	ac df       	rcall	.-168    	; 0x20c2 <udd_ctrl_init>
    216a:	5e c0       	rjmp	.+188    	; 0x2228 <udd_ctrl_in_sent+0xd0>
    216c:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2170:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2174:	c0 91 c4 25 	lds	r28, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2178:	d0 91 c5 25 	lds	r29, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    217c:	c8 1b       	sub	r28, r24
    217e:	d9 0b       	sbc	r29, r25
    2180:	71 f5       	brne	.+92     	; 0x21de <udd_ctrl_in_sent+0x86>
    2182:	20 91 f7 22 	lds	r18, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2186:	30 91 f8 22 	lds	r19, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    218a:	82 0f       	add	r24, r18
    218c:	93 1f       	adc	r25, r19
    218e:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2192:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2196:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    219a:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    219e:	82 17       	cp	r24, r18
    21a0:	93 07       	cpc	r25, r19
    21a2:	21 f0       	breq	.+8      	; 0x21ac <udd_ctrl_in_sent+0x54>
    21a4:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b_shortpacket.5301>
    21a8:	88 23       	and	r24, r24
    21aa:	41 f0       	breq	.+16     	; 0x21bc <udd_ctrl_in_sent+0x64>
    21ac:	84 e0       	ldi	r24, 0x04	; 4
    21ae:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    21b2:	e8 e1       	ldi	r30, 0x18	; 24
    21b4:	f3 e2       	ldi	r31, 0x23	; 35
    21b6:	02 e0       	ldi	r16, 0x02	; 2
    21b8:	06 93       	lac	Z, r16
    21ba:	36 c0       	rjmp	.+108    	; 0x2228 <udd_ctrl_in_sent+0xd0>
    21bc:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0xe>
    21c0:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0xf>
    21c4:	30 97       	sbiw	r30, 0x00	; 0
    21c6:	99 f0       	breq	.+38     	; 0x21ee <udd_ctrl_in_sent+0x96>
    21c8:	09 95       	icall
    21ca:	88 23       	and	r24, r24
    21cc:	81 f0       	breq	.+32     	; 0x21ee <udd_ctrl_in_sent+0x96>
    21ce:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    21d2:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    21d6:	c0 91 c4 25 	lds	r28, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    21da:	d0 91 c5 25 	lds	r29, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    21de:	c0 34       	cpi	r28, 0x40	; 64
    21e0:	d1 05       	cpc	r29, r1
    21e2:	28 f0       	brcs	.+10     	; 0x21ee <udd_ctrl_in_sent+0x96>
    21e4:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b_shortpacket.5301>
    21e8:	c0 e4       	ldi	r28, 0x40	; 64
    21ea:	d0 e0       	ldi	r29, 0x00	; 0
    21ec:	03 c0       	rjmp	.+6      	; 0x21f4 <udd_ctrl_in_sent+0x9c>
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <b_shortpacket.5301>
    21f4:	ec ef       	ldi	r30, 0xFC	; 252
    21f6:	f2 e2       	ldi	r31, 0x22	; 34
    21f8:	c6 a3       	std	Z+38, r28	; 0x26
    21fa:	d7 a3       	std	Z+39, r29	; 0x27
    21fc:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2200:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2204:	20 91 c2 25 	lds	r18, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    2208:	30 91 c3 25 	lds	r19, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    220c:	28 0f       	add	r18, r24
    220e:	39 1f       	adc	r19, r25
    2210:	20 a7       	std	Z+40, r18	; 0x28
    2212:	31 a7       	std	Z+41, r19	; 0x29
    2214:	c8 0f       	add	r28, r24
    2216:	d9 1f       	adc	r29, r25
    2218:	c0 93 f5 22 	sts	0x22F5, r28	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    221c:	d0 93 f6 22 	sts	0x22F6, r29	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2220:	e0 e2       	ldi	r30, 0x20	; 32
    2222:	f3 e2       	ldi	r31, 0x23	; 35
    2224:	02 e0       	ldi	r16, 0x02	; 2
    2226:	06 93       	lac	Z, r16
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	0f 91       	pop	r16
    222e:	08 95       	ret

00002230 <udd_ep_get_size>:
    2230:	fc 01       	movw	r30, r24
    2232:	81 81       	ldd	r24, Z+1	; 0x01
    2234:	e8 2f       	mov	r30, r24
    2236:	e7 70       	andi	r30, 0x07	; 7
    2238:	8e 2f       	mov	r24, r30
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	fc 01       	movw	r30, r24
    223e:	31 97       	sbiw	r30, 0x01	; 1
    2240:	e7 30       	cpi	r30, 0x07	; 7
    2242:	f1 05       	cpc	r31, r1
    2244:	c0 f4       	brcc	.+48     	; 0x2276 <udd_ep_get_size+0x46>
    2246:	e9 5e       	subi	r30, 0xE9	; 233
    2248:	fe 4f       	sbci	r31, 0xFE	; 254
    224a:	a2 c6       	rjmp	.+3396   	; 0x2f90 <__tablejump2__>
    224c:	80 e1       	ldi	r24, 0x10	; 16
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	08 95       	ret
    2252:	80 e2       	ldi	r24, 0x20	; 32
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	08 95       	ret
    2258:	80 e4       	ldi	r24, 0x40	; 64
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	08 95       	ret
    225e:	80 e8       	ldi	r24, 0x80	; 128
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	08 95       	ret
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	08 95       	ret
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	92 e0       	ldi	r25, 0x02	; 2
    226e:	08 95       	ret
    2270:	8f ef       	ldi	r24, 0xFF	; 255
    2272:	93 e0       	ldi	r25, 0x03	; 3
    2274:	08 95       	ret
    2276:	88 e0       	ldi	r24, 0x08	; 8
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	08 95       	ret

0000227c <udd_ep_get_job>:
    227c:	28 2f       	mov	r18, r24
    227e:	2f 70       	andi	r18, 0x0F	; 15
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	22 0f       	add	r18, r18
    2284:	33 1f       	adc	r19, r19
    2286:	08 2e       	mov	r0, r24
    2288:	00 0c       	add	r0, r0
    228a:	99 0b       	sbc	r25, r25
    228c:	88 27       	eor	r24, r24
    228e:	99 0f       	add	r25, r25
    2290:	88 1f       	adc	r24, r24
    2292:	99 27       	eor	r25, r25
    2294:	82 0f       	add	r24, r18
    2296:	93 1f       	adc	r25, r19
    2298:	02 97       	sbiw	r24, 0x02	; 2
    229a:	9c 01       	movw	r18, r24
    229c:	22 0f       	add	r18, r18
    229e:	33 1f       	adc	r19, r19
    22a0:	22 0f       	add	r18, r18
    22a2:	33 1f       	adc	r19, r19
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	82 0f       	add	r24, r18
    22aa:	93 1f       	adc	r25, r19
    22ac:	87 5b       	subi	r24, 0xB7	; 183
    22ae:	9d 4d       	sbci	r25, 0xDD	; 221
    22b0:	08 95       	ret

000022b2 <udd_ctrl_interrupt_tc_setup>:
    22b2:	0f 93       	push	r16
    22b4:	cf 93       	push	r28
    22b6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    22ba:	80 ff       	sbrs	r24, 0
    22bc:	62 c0       	rjmp	.+196    	; 0x2382 <udd_ctrl_interrupt_tc_setup+0xd0>
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    22c4:	e8 e1       	ldi	r30, 0x18	; 24
    22c6:	f3 e2       	ldi	r31, 0x23	; 35
    22c8:	00 e8       	ldi	r16, 0x80	; 128
    22ca:	06 93       	lac	Z, r16
    22cc:	e0 e2       	ldi	r30, 0x20	; 32
    22ce:	f3 e2       	ldi	r31, 0x23	; 35
    22d0:	00 e8       	ldi	r16, 0x80	; 128
    22d2:	06 93       	lac	Z, r16
    22d4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    22d8:	e8 e1       	ldi	r30, 0x18	; 24
    22da:	f3 e2       	ldi	r31, 0x23	; 35
    22dc:	00 e1       	ldi	r16, 0x10	; 16
    22de:	06 93       	lac	Z, r16
    22e0:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    22e4:	88 23       	and	r24, r24
    22e6:	29 f0       	breq	.+10     	; 0x22f2 <udd_ctrl_interrupt_tc_setup+0x40>
    22e8:	83 50       	subi	r24, 0x03	; 3
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	08 f4       	brcc	.+2      	; 0x22f0 <udd_ctrl_interrupt_tc_setup+0x3e>
    22ee:	2c df       	rcall	.-424    	; 0x2148 <udd_ctrl_endofrequest>
    22f0:	e8 de       	rcall	.-560    	; 0x20c2 <udd_ctrl_init>
    22f2:	80 91 1a 23 	lds	r24, 0x231A	; 0x80231a <udd_sram+0x1e>
    22f6:	90 91 1b 23 	lds	r25, 0x231B	; 0x80231b <udd_sram+0x1f>
    22fa:	08 97       	sbiw	r24, 0x08	; 8
    22fc:	09 f0       	breq	.+2      	; 0x2300 <udd_ctrl_interrupt_tc_setup+0x4e>
    22fe:	43 c0       	rjmp	.+134    	; 0x2386 <udd_ctrl_interrupt_tc_setup+0xd4>
    2300:	88 e0       	ldi	r24, 0x08	; 8
    2302:	e5 eb       	ldi	r30, 0xB5	; 181
    2304:	f2 e2       	ldi	r31, 0x22	; 34
    2306:	aa eb       	ldi	r26, 0xBA	; 186
    2308:	b5 e2       	ldi	r27, 0x25	; 37
    230a:	01 90       	ld	r0, Z+
    230c:	0d 92       	st	X+, r0
    230e:	8a 95       	dec	r24
    2310:	e1 f7       	brne	.-8      	; 0x230a <udd_ctrl_interrupt_tc_setup+0x58>
    2312:	e8 ec       	ldi	r30, 0xC8	; 200
    2314:	f4 e0       	ldi	r31, 0x04	; 4
    2316:	80 81       	ld	r24, Z
    2318:	80 62       	ori	r24, 0x20	; 32
    231a:	80 83       	st	Z, r24
    231c:	80 81       	ld	r24, Z
    231e:	80 62       	ori	r24, 0x20	; 32
    2320:	80 83       	st	Z, r24
    2322:	ab da       	rcall	.-2730   	; 0x187a <udc_process_setup>
    2324:	c8 2f       	mov	r28, r24
    2326:	81 11       	cpse	r24, r1
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <udd_ctrl_interrupt_tc_setup+0x7e>
    232a:	f2 de       	rcall	.-540    	; 0x2110 <udd_ctrl_stall_data>
    232c:	c1 e0       	ldi	r28, 0x01	; 1
    232e:	2c c0       	rjmp	.+88     	; 0x2388 <udd_ctrl_interrupt_tc_setup+0xd6>
    2330:	80 91 ba 25 	lds	r24, 0x25BA	; 0x8025ba <udd_g_ctrlreq>
    2334:	88 23       	and	r24, r24
    2336:	6c f4       	brge	.+26     	; 0x2352 <udd_ctrl_interrupt_tc_setup+0xa0>
    2338:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    233c:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2340:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2344:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    234e:	04 df       	rcall	.-504    	; 0x2158 <udd_ctrl_in_sent>
    2350:	1b c0       	rjmp	.+54     	; 0x2388 <udd_ctrl_interrupt_tc_setup+0xd6>
    2352:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    2356:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    235a:	89 2b       	or	r24, r25
    235c:	11 f4       	brne	.+4      	; 0x2362 <udd_ctrl_interrupt_tc_setup+0xb0>
    235e:	e6 de       	rcall	.-564    	; 0x212c <udd_ctrl_send_zlp_in>
    2360:	13 c0       	rjmp	.+38     	; 0x2388 <udd_ctrl_interrupt_tc_setup+0xd6>
    2362:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2366:	10 92 f8 22 	sts	0x22F8, r1	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    236a:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    236e:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
    2378:	e8 e1       	ldi	r30, 0x18	; 24
    237a:	f3 e2       	ldi	r31, 0x23	; 35
    237c:	02 e0       	ldi	r16, 0x02	; 2
    237e:	06 93       	lac	Z, r16
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <udd_ctrl_interrupt_tc_setup+0xd6>
    2382:	c0 e0       	ldi	r28, 0x00	; 0
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <udd_ctrl_interrupt_tc_setup+0xd6>
    2386:	c1 e0       	ldi	r28, 0x01	; 1
    2388:	8c 2f       	mov	r24, r28
    238a:	cf 91       	pop	r28
    238c:	0f 91       	pop	r16
    238e:	08 95       	ret

00002390 <udd_ep_trans_complet>:
    2390:	8f 92       	push	r8
    2392:	9f 92       	push	r9
    2394:	af 92       	push	r10
    2396:	bf 92       	push	r11
    2398:	df 92       	push	r13
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	d8 2e       	mov	r13, r24
    23a8:	69 df       	rcall	.-302    	; 0x227c <udd_ep_get_job>
    23aa:	8c 01       	movw	r16, r24
    23ac:	bd 2c       	mov	r11, r13
    23ae:	bb 1c       	adc	r11, r11
    23b0:	bb 24       	eor	r11, r11
    23b2:	bb 1c       	adc	r11, r11
    23b4:	cd 2d       	mov	r28, r13
    23b6:	cf 70       	andi	r28, 0x0F	; 15
    23b8:	d0 e0       	ldi	r29, 0x00	; 0
    23ba:	cc 0f       	add	r28, r28
    23bc:	dd 1f       	adc	r29, r29
    23be:	cb 0d       	add	r28, r11
    23c0:	d1 1d       	adc	r29, r1
    23c2:	ce 01       	movw	r24, r28
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	9c 01       	movw	r18, r24
    23d2:	28 5e       	subi	r18, 0xE8	; 232
    23d4:	3c 4d       	sbci	r19, 0xDC	; 220
    23d6:	79 01       	movw	r14, r18
    23d8:	c9 01       	movw	r24, r18
    23da:	2a df       	rcall	.-428    	; 0x2230 <udd_ep_get_size>
    23dc:	4c 01       	movw	r8, r24
    23de:	bb 20       	and	r11, r11
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <udd_ep_trans_complet+0x54>
    23e2:	79 c0       	rjmp	.+242    	; 0x24d6 <udd_ep_trans_complet+0x146>
    23e4:	fe 01       	movw	r30, r28
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	ee 0f       	add	r30, r30
    23f0:	ff 1f       	adc	r31, r31
    23f2:	e4 50       	subi	r30, 0x04	; 4
    23f4:	fd 4d       	sbci	r31, 0xDD	; 221
    23f6:	22 a1       	ldd	r18, Z+34	; 0x22
    23f8:	33 a1       	ldd	r19, Z+35	; 0x23
    23fa:	d8 01       	movw	r26, r16
    23fc:	15 96       	adiw	r26, 0x05	; 5
    23fe:	8d 91       	ld	r24, X+
    2400:	9c 91       	ld	r25, X
    2402:	16 97       	sbiw	r26, 0x06	; 6
    2404:	82 0f       	add	r24, r18
    2406:	93 1f       	adc	r25, r19
    2408:	15 96       	adiw	r26, 0x05	; 5
    240a:	8d 93       	st	X+, r24
    240c:	9c 93       	st	X, r25
    240e:	16 97       	sbiw	r26, 0x06	; 6
    2410:	13 96       	adiw	r26, 0x03	; 3
    2412:	2d 91       	ld	r18, X+
    2414:	3c 91       	ld	r19, X
    2416:	14 97       	sbiw	r26, 0x04	; 4
    2418:	82 17       	cp	r24, r18
    241a:	93 07       	cpc	r25, r19
    241c:	09 f4       	brne	.+2      	; 0x2420 <udd_ep_trans_complet+0x90>
    241e:	45 c0       	rjmp	.+138    	; 0x24aa <udd_ep_trans_complet+0x11a>
    2420:	28 1b       	sub	r18, r24
    2422:	39 0b       	sbc	r19, r25
    2424:	21 15       	cp	r18, r1
    2426:	b4 e0       	ldi	r27, 0x04	; 4
    2428:	3b 07       	cpc	r19, r27
    242a:	38 f0       	brcs	.+14     	; 0x243a <udd_ep_trans_complet+0xaa>
    242c:	2f ef       	ldi	r18, 0xFF	; 255
    242e:	33 e0       	ldi	r19, 0x03	; 3
    2430:	c9 01       	movw	r24, r18
    2432:	b4 01       	movw	r22, r8
    2434:	86 d5       	rcall	.+2828   	; 0x2f42 <__udivmodhi4>
    2436:	28 1b       	sub	r18, r24
    2438:	39 0b       	sbc	r19, r25
    243a:	f8 01       	movw	r30, r16
    243c:	80 81       	ld	r24, Z
    243e:	81 ff       	sbrs	r24, 1
    2440:	09 c0       	rjmp	.+18     	; 0x2454 <udd_ep_trans_complet+0xc4>
    2442:	c9 01       	movw	r24, r18
    2444:	b4 01       	movw	r22, r8
    2446:	7d d5       	rcall	.+2810   	; 0x2f42 <__udivmodhi4>
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	89 2b       	or	r24, r25
    244c:	09 f0       	breq	.+2      	; 0x2450 <udd_ep_trans_complet+0xc0>
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	84 2f       	mov	r24, r20
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <udd_ep_trans_complet+0xc6>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	d8 01       	movw	r26, r16
    2458:	9c 91       	ld	r25, X
    245a:	80 fb       	bst	r24, 0
    245c:	91 f9       	bld	r25, 1
    245e:	9c 93       	st	X, r25
    2460:	fe 01       	movw	r30, r28
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	ee 0f       	add	r30, r30
    2468:	ff 1f       	adc	r31, r31
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	e4 50       	subi	r30, 0x04	; 4
    2470:	fd 4d       	sbci	r31, 0xDD	; 221
    2472:	12 a2       	std	Z+34, r1	; 0x22
    2474:	13 a2       	std	Z+35, r1	; 0x23
    2476:	26 8f       	std	Z+30, r18	; 0x1e
    2478:	37 8f       	std	Z+31, r19	; 0x1f
    247a:	11 96       	adiw	r26, 0x01	; 1
    247c:	2d 91       	ld	r18, X+
    247e:	3c 91       	ld	r19, X
    2480:	12 97       	sbiw	r26, 0x02	; 2
    2482:	15 96       	adiw	r26, 0x05	; 5
    2484:	8d 91       	ld	r24, X+
    2486:	9c 91       	ld	r25, X
    2488:	16 97       	sbiw	r26, 0x06	; 6
    248a:	82 0f       	add	r24, r18
    248c:	93 1f       	adc	r25, r19
    248e:	cc 0f       	add	r28, r28
    2490:	dd 1f       	adc	r29, r29
    2492:	cc 0f       	add	r28, r28
    2494:	dd 1f       	adc	r29, r29
    2496:	cc 0f       	add	r28, r28
    2498:	dd 1f       	adc	r29, r29
    249a:	c4 5e       	subi	r28, 0xE4	; 228
    249c:	dc 4d       	sbci	r29, 0xDC	; 220
    249e:	88 83       	st	Y, r24
    24a0:	99 83       	std	Y+1, r25	; 0x01
    24a2:	f7 01       	movw	r30, r14
    24a4:	02 e0       	ldi	r16, 0x02	; 2
    24a6:	06 93       	lac	Z, r16
    24a8:	e4 c0       	rjmp	.+456    	; 0x2672 <udd_ep_trans_complet+0x2e2>
    24aa:	d8 01       	movw	r26, r16
    24ac:	8c 91       	ld	r24, X
    24ae:	81 ff       	sbrs	r24, 1
    24b0:	cd c0       	rjmp	.+410    	; 0x264c <udd_ep_trans_complet+0x2bc>
    24b2:	8d 7f       	andi	r24, 0xFD	; 253
    24b4:	8c 93       	st	X, r24
    24b6:	cc 0f       	add	r28, r28
    24b8:	dd 1f       	adc	r29, r29
    24ba:	cc 0f       	add	r28, r28
    24bc:	dd 1f       	adc	r29, r29
    24be:	cc 0f       	add	r28, r28
    24c0:	dd 1f       	adc	r29, r29
    24c2:	c4 50       	subi	r28, 0x04	; 4
    24c4:	dd 4d       	sbci	r29, 0xDD	; 221
    24c6:	1a a2       	std	Y+34, r1	; 0x22
    24c8:	1b a2       	std	Y+35, r1	; 0x23
    24ca:	1e 8e       	std	Y+30, r1	; 0x1e
    24cc:	1f 8e       	std	Y+31, r1	; 0x1f
    24ce:	f7 01       	movw	r30, r14
    24d0:	02 e0       	ldi	r16, 0x02	; 2
    24d2:	06 93       	lac	Z, r16
    24d4:	ce c0       	rjmp	.+412    	; 0x2672 <udd_ep_trans_complet+0x2e2>
    24d6:	fe 01       	movw	r30, r28
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	e4 50       	subi	r30, 0x04	; 4
    24e6:	fd 4d       	sbci	r31, 0xDD	; 221
    24e8:	a6 8c       	ldd	r10, Z+30	; 0x1e
    24ea:	b7 8c       	ldd	r11, Z+31	; 0x1f
    24ec:	d8 01       	movw	r26, r16
    24ee:	8c 91       	ld	r24, X
    24f0:	82 ff       	sbrs	r24, 2
    24f2:	19 c0       	rjmp	.+50     	; 0x2526 <udd_ep_trans_complet+0x196>
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	ed 91       	ld	r30, X+
    24f8:	fc 91       	ld	r31, X
    24fa:	12 97       	sbiw	r26, 0x02	; 2
    24fc:	15 96       	adiw	r26, 0x05	; 5
    24fe:	2d 91       	ld	r18, X+
    2500:	3c 91       	ld	r19, X
    2502:	16 97       	sbiw	r26, 0x06	; 6
    2504:	13 96       	adiw	r26, 0x03	; 3
    2506:	8d 91       	ld	r24, X+
    2508:	9c 91       	ld	r25, X
    250a:	14 97       	sbiw	r26, 0x04	; 4
    250c:	b4 01       	movw	r22, r8
    250e:	19 d5       	rcall	.+2610   	; 0x2f42 <__udivmodhi4>
    2510:	b0 e4       	ldi	r27, 0x40	; 64
    2512:	db 9e       	mul	r13, r27
    2514:	b0 01       	movw	r22, r0
    2516:	11 24       	eor	r1, r1
    2518:	67 57       	subi	r22, 0x77	; 119
    251a:	7f 4d       	sbci	r23, 0xDF	; 223
    251c:	ac 01       	movw	r20, r24
    251e:	cf 01       	movw	r24, r30
    2520:	82 0f       	add	r24, r18
    2522:	93 1f       	adc	r25, r19
    2524:	3b d5       	rcall	.+2678   	; 0x2f9c <memcpy>
    2526:	f8 01       	movw	r30, r16
    2528:	25 81       	ldd	r18, Z+5	; 0x05
    252a:	36 81       	ldd	r19, Z+6	; 0x06
    252c:	2a 0d       	add	r18, r10
    252e:	3b 1d       	adc	r19, r11
    2530:	25 83       	std	Z+5, r18	; 0x05
    2532:	36 83       	std	Z+6, r19	; 0x06
    2534:	83 81       	ldd	r24, Z+3	; 0x03
    2536:	94 81       	ldd	r25, Z+4	; 0x04
    2538:	82 17       	cp	r24, r18
    253a:	93 07       	cpc	r25, r19
    253c:	68 f4       	brcc	.+26     	; 0x2558 <udd_ep_trans_complet+0x1c8>
    253e:	85 83       	std	Z+5, r24	; 0x05
    2540:	96 83       	std	Z+6, r25	; 0x06
    2542:	cc 0f       	add	r28, r28
    2544:	dd 1f       	adc	r29, r29
    2546:	cc 0f       	add	r28, r28
    2548:	dd 1f       	adc	r29, r29
    254a:	cc 0f       	add	r28, r28
    254c:	dd 1f       	adc	r29, r29
    254e:	c4 50       	subi	r28, 0x04	; 4
    2550:	dd 4d       	sbci	r29, 0xDD	; 221
    2552:	8a a1       	ldd	r24, Y+34	; 0x22
    2554:	9b a1       	ldd	r25, Y+35	; 0x23
    2556:	7a c0       	rjmp	.+244    	; 0x264c <udd_ep_trans_complet+0x2bc>
    2558:	fe 01       	movw	r30, r28
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	e4 50       	subi	r30, 0x04	; 4
    2568:	fd 4d       	sbci	r31, 0xDD	; 221
    256a:	42 a1       	ldd	r20, Z+34	; 0x22
    256c:	53 a1       	ldd	r21, Z+35	; 0x23
    256e:	4a 15       	cp	r20, r10
    2570:	5b 05       	cpc	r21, r11
    2572:	09 f0       	breq	.+2      	; 0x2576 <udd_ep_trans_complet+0x1e6>
    2574:	6b c0       	rjmp	.+214    	; 0x264c <udd_ep_trans_complet+0x2bc>
    2576:	28 17       	cp	r18, r24
    2578:	39 07       	cpc	r19, r25
    257a:	09 f4       	brne	.+2      	; 0x257e <udd_ep_trans_complet+0x1ee>
    257c:	67 c0       	rjmp	.+206    	; 0x264c <udd_ep_trans_complet+0x2bc>
    257e:	ac 01       	movw	r20, r24
    2580:	42 1b       	sub	r20, r18
    2582:	53 0b       	sbc	r21, r19
    2584:	9a 01       	movw	r18, r20
    2586:	21 15       	cp	r18, r1
    2588:	54 e0       	ldi	r21, 0x04	; 4
    258a:	35 07       	cpc	r19, r21
    258c:	50 f0       	brcs	.+20     	; 0x25a2 <udd_ep_trans_complet+0x212>
    258e:	2f ef       	ldi	r18, 0xFF	; 255
    2590:	33 e0       	ldi	r19, 0x03	; 3
    2592:	c9 01       	movw	r24, r18
    2594:	b4 01       	movw	r22, r8
    2596:	d5 d4       	rcall	.+2474   	; 0x2f42 <__udivmodhi4>
    2598:	d9 01       	movw	r26, r18
    259a:	a8 1b       	sub	r26, r24
    259c:	b9 0b       	sbc	r27, r25
    259e:	cd 01       	movw	r24, r26
    25a0:	07 c0       	rjmp	.+14     	; 0x25b0 <udd_ep_trans_complet+0x220>
    25a2:	c9 01       	movw	r24, r18
    25a4:	b4 01       	movw	r22, r8
    25a6:	cd d4       	rcall	.+2458   	; 0x2f42 <__udivmodhi4>
    25a8:	f9 01       	movw	r30, r18
    25aa:	e8 1b       	sub	r30, r24
    25ac:	f9 0b       	sbc	r31, r25
    25ae:	cf 01       	movw	r24, r30
    25b0:	fe 01       	movw	r30, r28
    25b2:	ee 0f       	add	r30, r30
    25b4:	ff 1f       	adc	r31, r31
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	e4 50       	subi	r30, 0x04	; 4
    25c0:	fd 4d       	sbci	r31, 0xDD	; 221
    25c2:	16 8e       	std	Z+30, r1	; 0x1e
    25c4:	17 8e       	std	Z+31, r1	; 0x1f
    25c6:	88 15       	cp	r24, r8
    25c8:	99 05       	cpc	r25, r9
    25ca:	00 f5       	brcc	.+64     	; 0x260c <udd_ep_trans_complet+0x27c>
    25cc:	d8 01       	movw	r26, r16
    25ce:	8c 91       	ld	r24, X
    25d0:	84 60       	ori	r24, 0x04	; 4
    25d2:	8c 93       	st	X, r24
    25d4:	b0 e4       	ldi	r27, 0x40	; 64
    25d6:	db 9e       	mul	r13, r27
    25d8:	c0 01       	movw	r24, r0
    25da:	11 24       	eor	r1, r1
    25dc:	87 57       	subi	r24, 0x77	; 119
    25de:	9f 4d       	sbci	r25, 0xDF	; 223
    25e0:	fe 01       	movw	r30, r28
    25e2:	ee 0f       	add	r30, r30
    25e4:	ff 1f       	adc	r31, r31
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	ee 0f       	add	r30, r30
    25ec:	ff 1f       	adc	r31, r31
    25ee:	e4 5e       	subi	r30, 0xE4	; 228
    25f0:	fc 4d       	sbci	r31, 0xDC	; 220
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	cc 0f       	add	r28, r28
    25f8:	dd 1f       	adc	r29, r29
    25fa:	cc 0f       	add	r28, r28
    25fc:	dd 1f       	adc	r29, r29
    25fe:	cc 0f       	add	r28, r28
    2600:	dd 1f       	adc	r29, r29
    2602:	c4 50       	subi	r28, 0x04	; 4
    2604:	dd 4d       	sbci	r29, 0xDD	; 221
    2606:	8a a2       	std	Y+34, r8	; 0x22
    2608:	9b a2       	std	Y+35, r9	; 0x23
    260a:	1c c0       	rjmp	.+56     	; 0x2644 <udd_ep_trans_complet+0x2b4>
    260c:	f8 01       	movw	r30, r16
    260e:	41 81       	ldd	r20, Z+1	; 0x01
    2610:	52 81       	ldd	r21, Z+2	; 0x02
    2612:	25 81       	ldd	r18, Z+5	; 0x05
    2614:	36 81       	ldd	r19, Z+6	; 0x06
    2616:	24 0f       	add	r18, r20
    2618:	35 1f       	adc	r19, r21
    261a:	fe 01       	movw	r30, r28
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	ee 0f       	add	r30, r30
    2622:	ff 1f       	adc	r31, r31
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	e4 5e       	subi	r30, 0xE4	; 228
    262a:	fc 4d       	sbci	r31, 0xDC	; 220
    262c:	20 83       	st	Z, r18
    262e:	31 83       	std	Z+1, r19	; 0x01
    2630:	cc 0f       	add	r28, r28
    2632:	dd 1f       	adc	r29, r29
    2634:	cc 0f       	add	r28, r28
    2636:	dd 1f       	adc	r29, r29
    2638:	cc 0f       	add	r28, r28
    263a:	dd 1f       	adc	r29, r29
    263c:	c4 50       	subi	r28, 0x04	; 4
    263e:	dd 4d       	sbci	r29, 0xDD	; 221
    2640:	8a a3       	std	Y+34, r24	; 0x22
    2642:	9b a3       	std	Y+35, r25	; 0x23
    2644:	f7 01       	movw	r30, r14
    2646:	02 e0       	ldi	r16, 0x02	; 2
    2648:	06 93       	lac	Z, r16
    264a:	13 c0       	rjmp	.+38     	; 0x2672 <udd_ep_trans_complet+0x2e2>
    264c:	d8 01       	movw	r26, r16
    264e:	8c 91       	ld	r24, X
    2650:	80 ff       	sbrs	r24, 0
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <udd_ep_trans_complet+0x2e2>
    2654:	8e 7f       	andi	r24, 0xFE	; 254
    2656:	8c 93       	st	X, r24
    2658:	17 96       	adiw	r26, 0x07	; 7
    265a:	ed 91       	ld	r30, X+
    265c:	fc 91       	ld	r31, X
    265e:	18 97       	sbiw	r26, 0x08	; 8
    2660:	30 97       	sbiw	r30, 0x00	; 0
    2662:	39 f0       	breq	.+14     	; 0x2672 <udd_ep_trans_complet+0x2e2>
    2664:	15 96       	adiw	r26, 0x05	; 5
    2666:	6d 91       	ld	r22, X+
    2668:	7c 91       	ld	r23, X
    266a:	16 97       	sbiw	r26, 0x06	; 6
    266c:	4d 2d       	mov	r20, r13
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	09 95       	icall
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
    267e:	df 90       	pop	r13
    2680:	bf 90       	pop	r11
    2682:	af 90       	pop	r10
    2684:	9f 90       	pop	r9
    2686:	8f 90       	pop	r8
    2688:	08 95       	ret

0000268a <udd_attach>:
    268a:	cf 93       	push	r28
    268c:	cf b7       	in	r28, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	ee dc       	rcall	.-1572   	; 0x2070 <udd_sleep_mode>
    2694:	ea ec       	ldi	r30, 0xCA	; 202
    2696:	f4 e0       	ldi	r31, 0x04	; 4
    2698:	80 e4       	ldi	r24, 0x40	; 64
    269a:	80 83       	st	Z, r24
    269c:	80 e2       	ldi	r24, 0x20	; 32
    269e:	80 83       	st	Z, r24
    26a0:	e1 ec       	ldi	r30, 0xC1	; 193
    26a2:	f4 e0       	ldi	r31, 0x04	; 4
    26a4:	80 81       	ld	r24, Z
    26a6:	81 60       	ori	r24, 0x01	; 1
    26a8:	80 83       	st	Z, r24
    26aa:	a9 ec       	ldi	r26, 0xC9	; 201
    26ac:	b4 e0       	ldi	r27, 0x04	; 4
    26ae:	8c 91       	ld	r24, X
    26b0:	82 60       	ori	r24, 0x02	; 2
    26b2:	8c 93       	st	X, r24
    26b4:	e8 ec       	ldi	r30, 0xC8	; 200
    26b6:	f4 e0       	ldi	r31, 0x04	; 4
    26b8:	80 81       	ld	r24, Z
    26ba:	80 64       	ori	r24, 0x40	; 64
    26bc:	80 83       	st	Z, r24
    26be:	8c 91       	ld	r24, X
    26c0:	81 60       	ori	r24, 0x01	; 1
    26c2:	8c 93       	st	X, r24
    26c4:	80 81       	ld	r24, Z
    26c6:	80 68       	ori	r24, 0x80	; 128
    26c8:	80 83       	st	Z, r24
    26ca:	cf bf       	out	0x3f, r28	; 63
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <udd_enable>:
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	c0 e6       	ldi	r28, 0x60	; 96
    26d6:	d0 e0       	ldi	r29, 0x00	; 0
    26d8:	18 82       	st	Y, r1
    26da:	80 e3       	ldi	r24, 0x30	; 48
    26dc:	0e 94 89 0a 	call	0x1512	; 0x1512 <sysclk_enable_usb>
    26e0:	e0 ec       	ldi	r30, 0xC0	; 192
    26e2:	f4 e0       	ldi	r31, 0x04	; 4
    26e4:	80 81       	ld	r24, Z
    26e6:	80 64       	ori	r24, 0x40	; 64
    26e8:	80 83       	st	Z, r24
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	88 83       	st	Y, r24
    26ee:	cf b7       	in	r28, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	fc 01       	movw	r30, r24
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	e4 50       	subi	r30, 0x04	; 4
    2706:	fd 4d       	sbci	r31, 0xDD	; 221
    2708:	15 8e       	std	Z+29, r1	; 0x1d
    270a:	01 96       	adiw	r24, 0x01	; 1
    270c:	8e 30       	cpi	r24, 0x0E	; 14
    270e:	91 05       	cpc	r25, r1
    2710:	91 f7       	brne	.-28     	; 0x26f6 <udd_enable+0x26>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	fc 01       	movw	r30, r24
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	ee 0f       	add	r30, r30
    2722:	ff 1f       	adc	r31, r31
    2724:	e8 0f       	add	r30, r24
    2726:	f9 1f       	adc	r31, r25
    2728:	e7 5b       	subi	r30, 0xB7	; 183
    272a:	fd 4d       	sbci	r31, 0xDD	; 221
    272c:	20 81       	ld	r18, Z
    272e:	2e 7f       	andi	r18, 0xFE	; 254
    2730:	20 83       	st	Z, r18
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	8c 30       	cpi	r24, 0x0C	; 12
    2736:	91 05       	cpc	r25, r1
    2738:	71 f7       	brne	.-36     	; 0x2716 <udd_enable+0x46>
    273a:	6a e1       	ldi	r22, 0x1A	; 26
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	8d dc       	rcall	.-1766   	; 0x205c <nvm_read_byte>
    2742:	8f 3f       	cpi	r24, 0xFF	; 255
    2744:	19 f0       	breq	.+6      	; 0x274c <udd_enable+0x7c>
    2746:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    274a:	03 c0       	rjmp	.+6      	; 0x2752 <udd_enable+0x82>
    274c:	8f e1       	ldi	r24, 0x1F	; 31
    274e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2752:	6b e1       	ldi	r22, 0x1B	; 27
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	82 e0       	ldi	r24, 0x02	; 2
    2758:	81 dc       	rcall	.-1790   	; 0x205c <nvm_read_byte>
    275a:	8f 3f       	cpi	r24, 0xFF	; 255
    275c:	19 f0       	breq	.+6      	; 0x2764 <udd_enable+0x94>
    275e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2762:	03 c0       	rjmp	.+6      	; 0x276a <udd_enable+0x9a>
    2764:	8f e1       	ldi	r24, 0x1F	; 31
    2766:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    276a:	e0 ec       	ldi	r30, 0xC0	; 192
    276c:	f4 e0       	ldi	r31, 0x04	; 4
    276e:	80 81       	ld	r24, Z
    2770:	86 60       	ori	r24, 0x06	; 6
    2772:	80 83       	st	Z, r24
    2774:	80 81       	ld	r24, Z
    2776:	80 68       	ori	r24, 0x80	; 128
    2778:	80 83       	st	Z, r24
    277a:	80 81       	ld	r24, Z
    277c:	80 61       	ori	r24, 0x10	; 16
    277e:	80 83       	st	Z, r24
    2780:	88 e1       	ldi	r24, 0x18	; 24
    2782:	93 e2       	ldi	r25, 0x23	; 35
    2784:	86 83       	std	Z+6, r24	; 0x06
    2786:	97 83       	std	Z+7, r25	; 0x07
    2788:	80 81       	ld	r24, Z
    278a:	80 62       	ori	r24, 0x20	; 32
    278c:	80 83       	st	Z, r24
    278e:	8f ef       	ldi	r24, 0xFF	; 255
    2790:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2794:	e8 ec       	ldi	r30, 0xC8	; 200
    2796:	f4 e0       	ldi	r31, 0x04	; 4
    2798:	80 81       	ld	r24, Z
    279a:	82 60       	ori	r24, 0x02	; 2
    279c:	80 83       	st	Z, r24
    279e:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <udd_b_idle>
    27a2:	80 91 ef 2d 	lds	r24, 0x2DEF	; 0x802def <sleepmgr_locks+0x5>
    27a6:	8f 3f       	cpi	r24, 0xFF	; 255
    27a8:	09 f4       	brne	.+2      	; 0x27ac <udd_enable+0xdc>
    27aa:	ff cf       	rjmp	.-2      	; 0x27aa <udd_enable+0xda>
    27ac:	9f b7       	in	r25, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	ea ee       	ldi	r30, 0xEA	; 234
    27b2:	fd e2       	ldi	r31, 0x2D	; 45
    27b4:	85 81       	ldd	r24, Z+5	; 0x05
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	85 83       	std	Z+5, r24	; 0x05
    27ba:	9f bf       	out	0x3f, r25	; 63
    27bc:	66 df       	rcall	.-308    	; 0x268a <udd_attach>
    27be:	cf bf       	out	0x3f, r28	; 63
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <udd_set_address>:
    27c6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    27ca:	08 95       	ret

000027cc <udd_getaddress>:
    27cc:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    27d0:	08 95       	ret

000027d2 <udd_set_setup_payload>:
    27d2:	ea eb       	ldi	r30, 0xBA	; 186
    27d4:	f5 e2       	ldi	r31, 0x25	; 37
    27d6:	80 87       	std	Z+8, r24	; 0x08
    27d8:	91 87       	std	Z+9, r25	; 0x09
    27da:	62 87       	std	Z+10, r22	; 0x0a
    27dc:	73 87       	std	Z+11, r23	; 0x0b
    27de:	08 95       	ret

000027e0 <udd_ep_alloc>:
    27e0:	28 2f       	mov	r18, r24
    27e2:	2f 70       	andi	r18, 0x0F	; 15
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	22 0f       	add	r18, r18
    27e8:	33 1f       	adc	r19, r19
    27ea:	08 2e       	mov	r0, r24
    27ec:	00 0c       	add	r0, r0
    27ee:	99 0b       	sbc	r25, r25
    27f0:	88 27       	eor	r24, r24
    27f2:	99 0f       	add	r25, r25
    27f4:	88 1f       	adc	r24, r24
    27f6:	99 27       	eor	r25, r25
    27f8:	82 0f       	add	r24, r18
    27fa:	93 1f       	adc	r25, r19
    27fc:	fc 01       	movw	r30, r24
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	e4 50       	subi	r30, 0x04	; 4
    280c:	fd 4d       	sbci	r31, 0xDD	; 221
    280e:	25 8d       	ldd	r18, Z+29	; 0x1d
    2810:	20 7c       	andi	r18, 0xC0	; 192
    2812:	09 f0       	breq	.+2      	; 0x2816 <udd_ep_alloc+0x36>
    2814:	4f c0       	rjmp	.+158    	; 0x28b4 <udd_ep_alloc+0xd4>
    2816:	63 70       	andi	r22, 0x03	; 3
    2818:	61 30       	cpi	r22, 0x01	; 1
    281a:	11 f0       	breq	.+4      	; 0x2820 <udd_ep_alloc+0x40>
    281c:	18 f4       	brcc	.+6      	; 0x2824 <udd_ep_alloc+0x44>
    281e:	04 c0       	rjmp	.+8      	; 0x2828 <udd_ep_alloc+0x48>
    2820:	20 ec       	ldi	r18, 0xC0	; 192
    2822:	03 c0       	rjmp	.+6      	; 0x282a <udd_ep_alloc+0x4a>
    2824:	20 e8       	ldi	r18, 0x80	; 128
    2826:	01 c0       	rjmp	.+2      	; 0x282a <udd_ep_alloc+0x4a>
    2828:	20 e4       	ldi	r18, 0x40	; 64
    282a:	40 38       	cpi	r20, 0x80	; 128
    282c:	51 05       	cpc	r21, r1
    282e:	e9 f0       	breq	.+58     	; 0x286a <udd_ep_alloc+0x8a>
    2830:	50 f4       	brcc	.+20     	; 0x2846 <udd_ep_alloc+0x66>
    2832:	40 32       	cpi	r20, 0x20	; 32
    2834:	51 05       	cpc	r21, r1
    2836:	a9 f0       	breq	.+42     	; 0x2862 <udd_ep_alloc+0x82>
    2838:	40 34       	cpi	r20, 0x40	; 64
    283a:	51 05       	cpc	r21, r1
    283c:	a1 f0       	breq	.+40     	; 0x2866 <udd_ep_alloc+0x86>
    283e:	40 31       	cpi	r20, 0x10	; 16
    2840:	51 05       	cpc	r21, r1
    2842:	d9 f4       	brne	.+54     	; 0x287a <udd_ep_alloc+0x9a>
    2844:	0c c0       	rjmp	.+24     	; 0x285e <udd_ep_alloc+0x7e>
    2846:	41 15       	cp	r20, r1
    2848:	32 e0       	ldi	r19, 0x02	; 2
    284a:	53 07       	cpc	r21, r19
    284c:	91 f0       	breq	.+36     	; 0x2872 <udd_ep_alloc+0x92>
    284e:	4f 3f       	cpi	r20, 0xFF	; 255
    2850:	33 e0       	ldi	r19, 0x03	; 3
    2852:	53 07       	cpc	r21, r19
    2854:	81 f0       	breq	.+32     	; 0x2876 <udd_ep_alloc+0x96>
    2856:	41 15       	cp	r20, r1
    2858:	51 40       	sbci	r21, 0x01	; 1
    285a:	79 f4       	brne	.+30     	; 0x287a <udd_ep_alloc+0x9a>
    285c:	08 c0       	rjmp	.+16     	; 0x286e <udd_ep_alloc+0x8e>
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0d c0       	rjmp	.+26     	; 0x287c <udd_ep_alloc+0x9c>
    2862:	42 e0       	ldi	r20, 0x02	; 2
    2864:	0b c0       	rjmp	.+22     	; 0x287c <udd_ep_alloc+0x9c>
    2866:	43 e0       	ldi	r20, 0x03	; 3
    2868:	09 c0       	rjmp	.+18     	; 0x287c <udd_ep_alloc+0x9c>
    286a:	44 e0       	ldi	r20, 0x04	; 4
    286c:	07 c0       	rjmp	.+14     	; 0x287c <udd_ep_alloc+0x9c>
    286e:	45 e0       	ldi	r20, 0x05	; 5
    2870:	05 c0       	rjmp	.+10     	; 0x287c <udd_ep_alloc+0x9c>
    2872:	46 e0       	ldi	r20, 0x06	; 6
    2874:	03 c0       	rjmp	.+6      	; 0x287c <udd_ep_alloc+0x9c>
    2876:	47 e0       	ldi	r20, 0x07	; 7
    2878:	01 c0       	rjmp	.+2      	; 0x287c <udd_ep_alloc+0x9c>
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	fc 01       	movw	r30, r24
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	e4 50       	subi	r30, 0x04	; 4
    288c:	fd 4d       	sbci	r31, 0xDD	; 221
    288e:	15 8e       	std	Z+29, r1	; 0x1d
    2890:	36 e0       	ldi	r19, 0x06	; 6
    2892:	34 8f       	std	Z+28, r19	; 0x1c
    2894:	24 2b       	or	r18, r20
    2896:	25 8f       	std	Z+29, r18	; 0x1d
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	88 0f       	add	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	fc 01       	movw	r30, r24
    28a6:	e4 50       	subi	r30, 0x04	; 4
    28a8:	fd 4d       	sbci	r31, 0xDD	; 221
    28aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    28ac:	80 62       	ori	r24, 0x20	; 32
    28ae:	85 8f       	std	Z+29, r24	; 0x1d
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	08 95       	ret
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	08 95       	ret

000028b8 <udd_ep_is_halted>:
    28b8:	e8 2f       	mov	r30, r24
    28ba:	ef 70       	andi	r30, 0x0F	; 15
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	ee 0f       	add	r30, r30
    28c0:	ff 1f       	adc	r31, r31
    28c2:	08 2e       	mov	r0, r24
    28c4:	00 0c       	add	r0, r0
    28c6:	99 0b       	sbc	r25, r25
    28c8:	88 27       	eor	r24, r24
    28ca:	99 0f       	add	r25, r25
    28cc:	88 1f       	adc	r24, r24
    28ce:	99 27       	eor	r25, r25
    28d0:	e8 0f       	add	r30, r24
    28d2:	f9 1f       	adc	r31, r25
    28d4:	ee 0f       	add	r30, r30
    28d6:	ff 1f       	adc	r31, r31
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	ee 0f       	add	r30, r30
    28de:	ff 1f       	adc	r31, r31
    28e0:	e4 50       	subi	r30, 0x04	; 4
    28e2:	fd 4d       	sbci	r31, 0xDD	; 221
    28e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    28e6:	82 fb       	bst	r24, 2
    28e8:	88 27       	eor	r24, r24
    28ea:	80 f9       	bld	r24, 0
    28ec:	08 95       	ret

000028ee <udd_ep_clear_halt>:
    28ee:	28 2f       	mov	r18, r24
    28f0:	2f 70       	andi	r18, 0x0F	; 15
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	a9 01       	movw	r20, r18
    28f6:	44 0f       	add	r20, r20
    28f8:	55 1f       	adc	r21, r21
    28fa:	28 2f       	mov	r18, r24
    28fc:	08 2e       	mov	r0, r24
    28fe:	00 0c       	add	r0, r0
    2900:	33 0b       	sbc	r19, r19
    2902:	22 27       	eor	r18, r18
    2904:	33 0f       	add	r19, r19
    2906:	22 1f       	adc	r18, r18
    2908:	33 27       	eor	r19, r19
    290a:	24 0f       	add	r18, r20
    290c:	35 1f       	adc	r19, r21
    290e:	f9 01       	movw	r30, r18
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	ee 0f       	add	r30, r30
    291a:	ff 1f       	adc	r31, r31
    291c:	e4 50       	subi	r30, 0x04	; 4
    291e:	fd 4d       	sbci	r31, 0xDD	; 221
    2920:	95 8d       	ldd	r25, Z+29	; 0x1d
    2922:	92 ff       	sbrs	r25, 2
    2924:	17 c0       	rjmp	.+46     	; 0x2954 <udd_ep_clear_halt+0x66>
    2926:	22 0f       	add	r18, r18
    2928:	33 1f       	adc	r19, r19
    292a:	22 0f       	add	r18, r18
    292c:	33 1f       	adc	r19, r19
    292e:	22 0f       	add	r18, r18
    2930:	33 1f       	adc	r19, r19
    2932:	f9 01       	movw	r30, r18
    2934:	e4 50       	subi	r30, 0x04	; 4
    2936:	fd 4d       	sbci	r31, 0xDD	; 221
    2938:	95 8d       	ldd	r25, Z+29	; 0x1d
    293a:	9b 7f       	andi	r25, 0xFB	; 251
    293c:	95 8f       	std	Z+29, r25	; 0x1d
    293e:	9e dc       	rcall	.-1732   	; 0x227c <udd_ep_get_job>
    2940:	fc 01       	movw	r30, r24
    2942:	80 81       	ld	r24, Z
    2944:	80 ff       	sbrs	r24, 0
    2946:	06 c0       	rjmp	.+12     	; 0x2954 <udd_ep_clear_halt+0x66>
    2948:	8e 7f       	andi	r24, 0xFE	; 254
    294a:	80 83       	st	Z, r24
    294c:	07 80       	ldd	r0, Z+7	; 0x07
    294e:	f0 85       	ldd	r31, Z+8	; 0x08
    2950:	e0 2d       	mov	r30, r0
    2952:	09 95       	icall
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	08 95       	ret

00002958 <udd_ep_run>:
    2958:	7f 92       	push	r7
    295a:	8f 92       	push	r8
    295c:	9f 92       	push	r9
    295e:	af 92       	push	r10
    2960:	bf 92       	push	r11
    2962:	cf 92       	push	r12
    2964:	df 92       	push	r13
    2966:	ef 92       	push	r14
    2968:	ff 92       	push	r15
    296a:	0f 93       	push	r16
    296c:	1f 93       	push	r17
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	98 2e       	mov	r9, r24
    2974:	86 2e       	mov	r8, r22
    2976:	6a 01       	movw	r12, r20
    2978:	79 01       	movw	r14, r18
    297a:	80 dc       	rcall	.-1792   	; 0x227c <udd_ep_get_job>
    297c:	5c 01       	movw	r10, r24
    297e:	79 2c       	mov	r7, r9
    2980:	77 1c       	adc	r7, r7
    2982:	77 24       	eor	r7, r7
    2984:	77 1c       	adc	r7, r7
    2986:	c9 2d       	mov	r28, r9
    2988:	cf 70       	andi	r28, 0x0F	; 15
    298a:	d0 e0       	ldi	r29, 0x00	; 0
    298c:	cc 0f       	add	r28, r28
    298e:	dd 1f       	adc	r29, r29
    2990:	c7 0d       	add	r28, r7
    2992:	d1 1d       	adc	r29, r1
    2994:	fe 01       	movw	r30, r28
    2996:	ee 0f       	add	r30, r30
    2998:	ff 1f       	adc	r31, r31
    299a:	ee 0f       	add	r30, r30
    299c:	ff 1f       	adc	r31, r31
    299e:	ee 0f       	add	r30, r30
    29a0:	ff 1f       	adc	r31, r31
    29a2:	e4 50       	subi	r30, 0x04	; 4
    29a4:	fd 4d       	sbci	r31, 0xDD	; 221
    29a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    29a8:	80 7c       	andi	r24, 0xC0	; 192
    29aa:	09 f4       	brne	.+2      	; 0x29ae <udd_ep_run+0x56>
    29ac:	7d c0       	rjmp	.+250    	; 0x2aa8 <udd_ep_run+0x150>
    29ae:	fe 01       	movw	r30, r28
    29b0:	ee 0f       	add	r30, r30
    29b2:	ff 1f       	adc	r31, r31
    29b4:	ee 0f       	add	r30, r30
    29b6:	ff 1f       	adc	r31, r31
    29b8:	ee 0f       	add	r30, r30
    29ba:	ff 1f       	adc	r31, r31
    29bc:	e4 50       	subi	r30, 0x04	; 4
    29be:	fd 4d       	sbci	r31, 0xDD	; 221
    29c0:	85 8d       	ldd	r24, Z+29	; 0x1d
    29c2:	80 7c       	andi	r24, 0xC0	; 192
    29c4:	80 3c       	cpi	r24, 0xC0	; 192
    29c6:	61 f0       	breq	.+24     	; 0x29e0 <udd_ep_run+0x88>
    29c8:	fe 01       	movw	r30, r28
    29ca:	ee 0f       	add	r30, r30
    29cc:	ff 1f       	adc	r31, r31
    29ce:	ee 0f       	add	r30, r30
    29d0:	ff 1f       	adc	r31, r31
    29d2:	ee 0f       	add	r30, r30
    29d4:	ff 1f       	adc	r31, r31
    29d6:	e4 50       	subi	r30, 0x04	; 4
    29d8:	fd 4d       	sbci	r31, 0xDD	; 221
    29da:	85 8d       	ldd	r24, Z+29	; 0x1d
    29dc:	82 fd       	sbrc	r24, 2
    29de:	66 c0       	rjmp	.+204    	; 0x2aac <udd_ep_run+0x154>
    29e0:	8f b7       	in	r24, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	f5 01       	movw	r30, r10
    29e6:	90 81       	ld	r25, Z
    29e8:	90 ff       	sbrs	r25, 0
    29ea:	03 c0       	rjmp	.+6      	; 0x29f2 <udd_ep_run+0x9a>
    29ec:	8f bf       	out	0x3f, r24	; 63
    29ee:	71 2c       	mov	r7, r1
    29f0:	5e c0       	rjmp	.+188    	; 0x2aae <udd_ep_run+0x156>
    29f2:	f5 01       	movw	r30, r10
    29f4:	90 81       	ld	r25, Z
    29f6:	91 60       	ori	r25, 0x01	; 1
    29f8:	90 83       	st	Z, r25
    29fa:	8f bf       	out	0x3f, r24	; 63
    29fc:	c1 82       	std	Z+1, r12	; 0x01
    29fe:	d2 82       	std	Z+2, r13	; 0x02
    2a00:	e3 82       	std	Z+3, r14	; 0x03
    2a02:	f4 82       	std	Z+4, r15	; 0x04
    2a04:	15 82       	std	Z+5, r1	; 0x05
    2a06:	16 82       	std	Z+6, r1	; 0x06
    2a08:	07 83       	std	Z+7, r16	; 0x07
    2a0a:	10 87       	std	Z+8, r17	; 0x08
    2a0c:	81 10       	cpse	r8, r1
    2a0e:	06 c0       	rjmp	.+12     	; 0x2a1c <udd_ep_run+0xc4>
    2a10:	91 e0       	ldi	r25, 0x01	; 1
    2a12:	e1 14       	cp	r14, r1
    2a14:	f1 04       	cpc	r15, r1
    2a16:	19 f0       	breq	.+6      	; 0x2a1e <udd_ep_run+0xc6>
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	01 c0       	rjmp	.+2      	; 0x2a1e <udd_ep_run+0xc6>
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	f5 01       	movw	r30, r10
    2a20:	80 81       	ld	r24, Z
    2a22:	90 fb       	bst	r25, 0
    2a24:	81 f9       	bld	r24, 1
    2a26:	8b 7f       	andi	r24, 0xFB	; 251
    2a28:	80 83       	st	Z, r24
    2a2a:	77 20       	and	r7, r7
    2a2c:	59 f0       	breq	.+22     	; 0x2a44 <udd_ep_run+0xec>
    2a2e:	cc 0f       	add	r28, r28
    2a30:	dd 1f       	adc	r29, r29
    2a32:	cc 0f       	add	r28, r28
    2a34:	dd 1f       	adc	r29, r29
    2a36:	cc 0f       	add	r28, r28
    2a38:	dd 1f       	adc	r29, r29
    2a3a:	c4 50       	subi	r28, 0x04	; 4
    2a3c:	dd 4d       	sbci	r29, 0xDD	; 221
    2a3e:	1a a2       	std	Y+34, r1	; 0x22
    2a40:	1b a2       	std	Y+35, r1	; 0x23
    2a42:	2d c0       	rjmp	.+90     	; 0x2a9e <udd_ep_run+0x146>
    2a44:	fe 01       	movw	r30, r28
    2a46:	ee 0f       	add	r30, r30
    2a48:	ff 1f       	adc	r31, r31
    2a4a:	ee 0f       	add	r30, r30
    2a4c:	ff 1f       	adc	r31, r31
    2a4e:	ee 0f       	add	r30, r30
    2a50:	ff 1f       	adc	r31, r31
    2a52:	e4 50       	subi	r30, 0x04	; 4
    2a54:	fd 4d       	sbci	r31, 0xDD	; 221
    2a56:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a58:	80 7c       	andi	r24, 0xC0	; 192
    2a5a:	80 3c       	cpi	r24, 0xC0	; 192
    2a5c:	a1 f4       	brne	.+40     	; 0x2a86 <udd_ep_run+0x12e>
    2a5e:	ce 01       	movw	r24, r28
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	88 5e       	subi	r24, 0xE8	; 232
    2a6e:	9c 4d       	sbci	r25, 0xDC	; 220
    2a70:	df db       	rcall	.-2114   	; 0x2230 <udd_ep_get_size>
    2a72:	bc 01       	movw	r22, r24
    2a74:	c7 01       	movw	r24, r14
    2a76:	65 d2       	rcall	.+1226   	; 0x2f42 <__udivmodhi4>
    2a78:	89 2b       	or	r24, r25
    2a7a:	29 f0       	breq	.+10     	; 0x2a86 <udd_ep_run+0x12e>
    2a7c:	f5 01       	movw	r30, r10
    2a7e:	80 81       	ld	r24, Z
    2a80:	8e 7f       	andi	r24, 0xFE	; 254
    2a82:	80 83       	st	Z, r24
    2a84:	14 c0       	rjmp	.+40     	; 0x2aae <udd_ep_run+0x156>
    2a86:	cc 0f       	add	r28, r28
    2a88:	dd 1f       	adc	r29, r29
    2a8a:	cc 0f       	add	r28, r28
    2a8c:	dd 1f       	adc	r29, r29
    2a8e:	cc 0f       	add	r28, r28
    2a90:	dd 1f       	adc	r29, r29
    2a92:	c4 50       	subi	r28, 0x04	; 4
    2a94:	dd 4d       	sbci	r29, 0xDD	; 221
    2a96:	1e 8e       	std	Y+30, r1	; 0x1e
    2a98:	1f 8e       	std	Y+31, r1	; 0x1f
    2a9a:	1a a2       	std	Y+34, r1	; 0x22
    2a9c:	1b a2       	std	Y+35, r1	; 0x23
    2a9e:	89 2d       	mov	r24, r9
    2aa0:	77 dc       	rcall	.-1810   	; 0x2390 <udd_ep_trans_complet>
    2aa2:	77 24       	eor	r7, r7
    2aa4:	73 94       	inc	r7
    2aa6:	03 c0       	rjmp	.+6      	; 0x2aae <udd_ep_run+0x156>
    2aa8:	71 2c       	mov	r7, r1
    2aaa:	01 c0       	rjmp	.+2      	; 0x2aae <udd_ep_run+0x156>
    2aac:	71 2c       	mov	r7, r1
    2aae:	87 2d       	mov	r24, r7
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
    2ac0:	bf 90       	pop	r11
    2ac2:	af 90       	pop	r10
    2ac4:	9f 90       	pop	r9
    2ac6:	8f 90       	pop	r8
    2ac8:	7f 90       	pop	r7
    2aca:	08 95       	ret

00002acc <udd_ep_abort>:
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	18 2f       	mov	r17, r24
    2ad8:	f8 2e       	mov	r15, r24
    2ada:	ff 1c       	adc	r15, r15
    2adc:	ff 24       	eor	r15, r15
    2ade:	ff 1c       	adc	r15, r15
    2ae0:	c8 2f       	mov	r28, r24
    2ae2:	cf 70       	andi	r28, 0x0F	; 15
    2ae4:	d0 e0       	ldi	r29, 0x00	; 0
    2ae6:	cc 0f       	add	r28, r28
    2ae8:	dd 1f       	adc	r29, r29
    2aea:	cf 0d       	add	r28, r15
    2aec:	d1 1d       	adc	r29, r1
    2aee:	c6 db       	rcall	.-2164   	; 0x227c <udd_ep_get_job>
    2af0:	dc 01       	movw	r26, r24
    2af2:	fe 01       	movw	r30, r28
    2af4:	ee 0f       	add	r30, r30
    2af6:	ff 1f       	adc	r31, r31
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	ee 0f       	add	r30, r30
    2afe:	ff 1f       	adc	r31, r31
    2b00:	e8 5e       	subi	r30, 0xE8	; 232
    2b02:	fc 4d       	sbci	r31, 0xDC	; 220
    2b04:	02 e0       	ldi	r16, 0x02	; 2
    2b06:	05 93       	las	Z, r16
    2b08:	8c 91       	ld	r24, X
    2b0a:	80 ff       	sbrs	r24, 0
    2b0c:	22 c0       	rjmp	.+68     	; 0x2b52 <udd_ep_abort+0x86>
    2b0e:	8e 7f       	andi	r24, 0xFE	; 254
    2b10:	8c 93       	st	X, r24
    2b12:	17 96       	adiw	r26, 0x07	; 7
    2b14:	ed 91       	ld	r30, X+
    2b16:	fc 91       	ld	r31, X
    2b18:	18 97       	sbiw	r26, 0x08	; 8
    2b1a:	30 97       	sbiw	r30, 0x00	; 0
    2b1c:	d1 f0       	breq	.+52     	; 0x2b52 <udd_ep_abort+0x86>
    2b1e:	ff 20       	and	r15, r15
    2b20:	59 f0       	breq	.+22     	; 0x2b38 <udd_ep_abort+0x6c>
    2b22:	cc 0f       	add	r28, r28
    2b24:	dd 1f       	adc	r29, r29
    2b26:	cc 0f       	add	r28, r28
    2b28:	dd 1f       	adc	r29, r29
    2b2a:	cc 0f       	add	r28, r28
    2b2c:	dd 1f       	adc	r29, r29
    2b2e:	c4 50       	subi	r28, 0x04	; 4
    2b30:	dd 4d       	sbci	r29, 0xDD	; 221
    2b32:	6a a1       	ldd	r22, Y+34	; 0x22
    2b34:	7b a1       	ldd	r23, Y+35	; 0x23
    2b36:	0a c0       	rjmp	.+20     	; 0x2b4c <udd_ep_abort+0x80>
    2b38:	cc 0f       	add	r28, r28
    2b3a:	dd 1f       	adc	r29, r29
    2b3c:	cc 0f       	add	r28, r28
    2b3e:	dd 1f       	adc	r29, r29
    2b40:	cc 0f       	add	r28, r28
    2b42:	dd 1f       	adc	r29, r29
    2b44:	c4 50       	subi	r28, 0x04	; 4
    2b46:	dd 4d       	sbci	r29, 0xDD	; 221
    2b48:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2b4a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2b4c:	41 2f       	mov	r20, r17
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	09 95       	icall
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	ff 90       	pop	r15
    2b5c:	08 95       	ret

00002b5e <udd_ep_free>:
    2b5e:	cf 93       	push	r28
    2b60:	c8 2f       	mov	r28, r24
    2b62:	b4 df       	rcall	.-152    	; 0x2acc <udd_ep_abort>
    2b64:	ec 2f       	mov	r30, r28
    2b66:	ef 70       	andi	r30, 0x0F	; 15
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	ee 0f       	add	r30, r30
    2b6c:	ff 1f       	adc	r31, r31
    2b6e:	8c 2f       	mov	r24, r28
    2b70:	cc 0f       	add	r28, r28
    2b72:	99 0b       	sbc	r25, r25
    2b74:	88 27       	eor	r24, r24
    2b76:	99 0f       	add	r25, r25
    2b78:	88 1f       	adc	r24, r24
    2b7a:	99 27       	eor	r25, r25
    2b7c:	e8 0f       	add	r30, r24
    2b7e:	f9 1f       	adc	r31, r25
    2b80:	ee 0f       	add	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	ee 0f       	add	r30, r30
    2b86:	ff 1f       	adc	r31, r31
    2b88:	ee 0f       	add	r30, r30
    2b8a:	ff 1f       	adc	r31, r31
    2b8c:	e4 50       	subi	r30, 0x04	; 4
    2b8e:	fd 4d       	sbci	r31, 0xDD	; 221
    2b90:	15 8e       	std	Z+29, r1	; 0x1d
    2b92:	cf 91       	pop	r28
    2b94:	08 95       	ret

00002b96 <udd_ep_set_halt>:
    2b96:	0f 93       	push	r16
    2b98:	e8 2f       	mov	r30, r24
    2b9a:	ef 70       	andi	r30, 0x0F	; 15
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	ee 0f       	add	r30, r30
    2ba0:	ff 1f       	adc	r31, r31
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	08 2e       	mov	r0, r24
    2ba6:	00 0c       	add	r0, r0
    2ba8:	33 0b       	sbc	r19, r19
    2baa:	22 27       	eor	r18, r18
    2bac:	33 0f       	add	r19, r19
    2bae:	22 1f       	adc	r18, r18
    2bb0:	33 27       	eor	r19, r19
    2bb2:	e2 0f       	add	r30, r18
    2bb4:	f3 1f       	adc	r31, r19
    2bb6:	ee 0f       	add	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	ee 0f       	add	r30, r30
    2bc0:	ff 1f       	adc	r31, r31
    2bc2:	df 01       	movw	r26, r30
    2bc4:	a4 50       	subi	r26, 0x04	; 4
    2bc6:	bd 4d       	sbci	r27, 0xDD	; 221
    2bc8:	5d 96       	adiw	r26, 0x1d	; 29
    2bca:	9c 91       	ld	r25, X
    2bcc:	5d 97       	sbiw	r26, 0x1d	; 29
    2bce:	94 60       	ori	r25, 0x04	; 4
    2bd0:	5d 96       	adiw	r26, 0x1d	; 29
    2bd2:	9c 93       	st	X, r25
    2bd4:	e8 5e       	subi	r30, 0xE8	; 232
    2bd6:	fc 4d       	sbci	r31, 0xDC	; 220
    2bd8:	01 e0       	ldi	r16, 0x01	; 1
    2bda:	06 93       	lac	Z, r16
    2bdc:	77 df       	rcall	.-274    	; 0x2acc <udd_ep_abort>
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	0f 91       	pop	r16
    2be2:	08 95       	ret

00002be4 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2be4:	1f 92       	push	r1
    2be6:	0f 92       	push	r0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	0f 92       	push	r0
    2bec:	11 24       	eor	r1, r1
    2bee:	0f 93       	push	r16
    2bf0:	2f 93       	push	r18
    2bf2:	3f 93       	push	r19
    2bf4:	4f 93       	push	r20
    2bf6:	5f 93       	push	r21
    2bf8:	6f 93       	push	r22
    2bfa:	7f 93       	push	r23
    2bfc:	8f 93       	push	r24
    2bfe:	9f 93       	push	r25
    2c00:	af 93       	push	r26
    2c02:	bf 93       	push	r27
    2c04:	cf 93       	push	r28
    2c06:	ef 93       	push	r30
    2c08:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2c0a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c0e:	88 23       	and	r24, r24
    2c10:	44 f4       	brge	.+16     	; 0x2c22 <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    2c12:	80 e8       	ldi	r24, 0x80	; 128
    2c14:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2c18:	0e 94 0d 0c 	call	0x181a	; 0x181a <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2c1c:	0e 94 57 04 	call	0x8ae	; 0x8ae <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2c20:	8b c0       	rjmp	.+278    	; 0x2d38 <__vector_125+0x154>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2c22:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c26:	82 ff       	sbrs	r24, 2
    2c28:	20 c0       	rjmp	.+64     	; 0x2c6a <__vector_125+0x86>
		udd_ack_underflow_event();
    2c2a:	84 e0       	ldi	r24, 0x04	; 4
    2c2c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2c30:	80 91 20 23 	lds	r24, 0x2320	; 0x802320 <udd_sram+0x24>
    2c34:	86 ff       	sbrs	r24, 6
    2c36:	80 c0       	rjmp	.+256    	; 0x2d38 <__vector_125+0x154>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c38:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c3c:	81 fd       	sbrc	r24, 1
    2c3e:	7c c0       	rjmp	.+248    	; 0x2d38 <__vector_125+0x154>
    2c40:	38 db       	rcall	.-2448   	; 0x22b2 <udd_ctrl_interrupt_tc_setup>
    2c42:	81 11       	cpse	r24, r1
    2c44:	79 c0       	rjmp	.+242    	; 0x2d38 <__vector_125+0x154>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2c46:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2c4a:	81 30       	cpi	r24, 0x01	; 1
    2c4c:	11 f4       	brne	.+4      	; 0x2c52 <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2c4e:	6e da       	rcall	.-2852   	; 0x212c <udd_ctrl_send_zlp_in>
    2c50:	73 c0       	rjmp	.+230    	; 0x2d38 <__vector_125+0x154>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2c52:	84 30       	cpi	r24, 0x04	; 4
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <__vector_125+0x74>
    2c56:	70 c0       	rjmp	.+224    	; 0x2d38 <__vector_125+0x154>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2c58:	e1 e2       	ldi	r30, 0x21	; 33
    2c5a:	f3 e2       	ldi	r31, 0x23	; 35
    2c5c:	04 e0       	ldi	r16, 0x04	; 4
    2c5e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2c60:	e9 e1       	ldi	r30, 0x19	; 25
    2c62:	f3 e2       	ldi	r31, 0x23	; 35
    2c64:	04 e0       	ldi	r16, 0x04	; 4
    2c66:	05 93       	las	Z, r16
    2c68:	67 c0       	rjmp	.+206    	; 0x2d38 <__vector_125+0x154>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2c6a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c6e:	81 ff       	sbrs	r24, 1
    2c70:	5e c0       	rjmp	.+188    	; 0x2d2e <__vector_125+0x14a>
		udd_ack_overflow_event();
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2c78:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <udd_sram+0x1c>
    2c7c:	86 ff       	sbrs	r24, 6
    2c7e:	5c c0       	rjmp	.+184    	; 0x2d38 <__vector_125+0x154>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2c80:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2c84:	81 fd       	sbrc	r24, 1
    2c86:	58 c0       	rjmp	.+176    	; 0x2d38 <__vector_125+0x154>
    2c88:	14 db       	rcall	.-2520   	; 0x22b2 <udd_ctrl_interrupt_tc_setup>
    2c8a:	81 11       	cpse	r24, r1
    2c8c:	55 c0       	rjmp	.+170    	; 0x2d38 <__vector_125+0x154>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2c8e:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2c92:	82 30       	cpi	r24, 0x02	; 2
    2c94:	41 f4       	brne	.+16     	; 0x2ca6 <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2c96:	84 e0       	ldi	r24, 0x04	; 4
    2c98:	80 93 f9 22 	sts	0x22F9, r24	; 0x8022f9 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2c9c:	e8 e1       	ldi	r30, 0x18	; 24
    2c9e:	f3 e2       	ldi	r31, 0x23	; 35
    2ca0:	02 e0       	ldi	r16, 0x02	; 2
    2ca2:	06 93       	lac	Z, r16
    2ca4:	49 c0       	rjmp	.+146    	; 0x2d38 <__vector_125+0x154>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2ca6:	83 30       	cpi	r24, 0x03	; 3
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <__vector_125+0xc8>
    2caa:	46 c0       	rjmp	.+140    	; 0x2d38 <__vector_125+0x154>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2cac:	e1 e2       	ldi	r30, 0x21	; 33
    2cae:	f3 e2       	ldi	r31, 0x23	; 35
    2cb0:	04 e0       	ldi	r16, 0x04	; 4
    2cb2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2cb4:	e9 e1       	ldi	r30, 0x19	; 25
    2cb6:	f3 e2       	ldi	r31, 0x23	; 35
    2cb8:	04 e0       	ldi	r16, 0x04	; 4
    2cba:	05 93       	las	Z, r16
    2cbc:	3d c0       	rjmp	.+122    	; 0x2d38 <__vector_125+0x154>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2cbe:	80 e1       	ldi	r24, 0x10	; 16
    2cc0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2cc4:	c1 e0       	ldi	r28, 0x01	; 1
			udd_ep_abort(i);
    2cc6:	8c 2f       	mov	r24, r28
    2cc8:	01 df       	rcall	.-510    	; 0x2acc <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2cca:	8c 2f       	mov	r24, r28
    2ccc:	80 68       	ori	r24, 0x80	; 128
    2cce:	fe de       	rcall	.-516    	; 0x2acc <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
    2cd0:	cf 5f       	subi	r28, 0xFF	; 255
    2cd2:	c6 30       	cpi	r28, 0x06	; 6
    2cd4:	c1 f7       	brne	.-16     	; 0x2cc6 <__vector_125+0xe2>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2cd6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2cda:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2cde:	ec ef       	ldi	r30, 0xFC	; 252
    2ce0:	f2 e2       	ldi	r31, 0x22	; 34
    2ce2:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
    2ce4:	96 e0       	ldi	r25, 0x06	; 6
    2ce6:	94 8f       	std	Z+28, r25	; 0x1c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2ce8:	83 e4       	ldi	r24, 0x43	; 67
    2cea:	85 8f       	std	Z+29, r24	; 0x1d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2cec:	15 a2       	std	Z+37, r1	; 0x25
	udd_endpoint_clear_status(ep_ctrl);
    2cee:	94 a3       	std	Z+36, r25	; 0x24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2cf0:	85 a3       	std	Z+37, r24	; 0x25
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2cf2:	85 eb       	ldi	r24, 0xB5	; 181
    2cf4:	92 e2       	ldi	r25, 0x22	; 34
    2cf6:	80 a3       	std	Z+32, r24	; 0x20
    2cf8:	91 a3       	std	Z+33, r25	; 0x21
		// Reset endpoint control management
		udd_ctrl_init();
    2cfa:	e3 d9       	rcall	.-3130   	; 0x20c2 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2cfc:	1d c0       	rjmp	.+58     	; 0x2d38 <__vector_125+0x154>
	}

	if (udd_is_suspend_event()) {
    2cfe:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d02:	86 ff       	sbrs	r24, 6
    2d04:	08 c0       	rjmp	.+16     	; 0x2d16 <__vector_125+0x132>
		udd_ack_suspend_event();
    2d06:	80 e4       	ldi	r24, 0x40	; 64
    2d08:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	b0 d9       	rcall	.-3232   	; 0x2070 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2d10:	0e 94 55 04 	call	0x8aa	; 0x8aa <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2d14:	11 c0       	rjmp	.+34     	; 0x2d38 <__vector_125+0x154>
	}

	if (udd_is_resume_event()) {
    2d16:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d1a:	85 ff       	sbrs	r24, 5
    2d1c:	0d c0       	rjmp	.+26     	; 0x2d38 <__vector_125+0x154>
		udd_ack_resume_event();
    2d1e:	80 e2       	ldi	r24, 0x20	; 32
    2d20:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	a4 d9       	rcall	.-3256   	; 0x2070 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2d28:	0e 94 56 04 	call	0x8ac	; 0x8ac <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2d2c:	05 c0       	rjmp	.+10     	; 0x2d38 <__vector_125+0x154>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2d2e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d32:	84 fd       	sbrc	r24, 4
    2d34:	c4 cf       	rjmp	.-120    	; 0x2cbe <__vector_125+0xda>
    2d36:	e3 cf       	rjmp	.-58     	; 0x2cfe <__vector_125+0x11a>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2d38:	ff 91       	pop	r31
    2d3a:	ef 91       	pop	r30
    2d3c:	cf 91       	pop	r28
    2d3e:	bf 91       	pop	r27
    2d40:	af 91       	pop	r26
    2d42:	9f 91       	pop	r25
    2d44:	8f 91       	pop	r24
    2d46:	7f 91       	pop	r23
    2d48:	6f 91       	pop	r22
    2d4a:	5f 91       	pop	r21
    2d4c:	4f 91       	pop	r20
    2d4e:	3f 91       	pop	r19
    2d50:	2f 91       	pop	r18
    2d52:	0f 91       	pop	r16
    2d54:	0f 90       	pop	r0
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	0f 90       	pop	r0
    2d5a:	1f 90       	pop	r1
    2d5c:	18 95       	reti

00002d5e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2d5e:	1f 92       	push	r1
    2d60:	0f 92       	push	r0
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	0f 92       	push	r0
    2d66:	11 24       	eor	r1, r1
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	2f 93       	push	r18
    2d6e:	3f 93       	push	r19
    2d70:	4f 93       	push	r20
    2d72:	5f 93       	push	r21
    2d74:	6f 93       	push	r22
    2d76:	7f 93       	push	r23
    2d78:	8f 93       	push	r24
    2d7a:	9f 93       	push	r25
    2d7c:	af 93       	push	r26
    2d7e:	bf 93       	push	r27
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	ef 93       	push	r30
    2d86:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2d88:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2d8c:	81 fd       	sbrc	r24, 1
    2d8e:	03 c0       	rjmp	.+6      	; 0x2d96 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2d90:	90 da       	rcall	.-2784   	; 0x22b2 <udd_ctrl_interrupt_tc_setup>
    2d92:	81 11       	cpse	r24, r1
    2d94:	c1 c0       	rjmp	.+386    	; 0x2f18 <__vector_126+0x1ba>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2d9c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2da0:	81 95       	neg	r24
    2da2:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2da4:	e8 e1       	ldi	r30, 0x18	; 24
    2da6:	f3 e2       	ldi	r31, 0x23	; 35
    2da8:	e8 1b       	sub	r30, r24
    2daa:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2dac:	20 81       	ld	r18, Z
    2dae:	31 81       	ldd	r19, Z+1	; 0x01
    2db0:	28 51       	subi	r18, 0x18	; 24
    2db2:	33 42       	sbci	r19, 0x23	; 35
    2db4:	36 95       	lsr	r19
    2db6:	27 95       	ror	r18
    2db8:	36 95       	lsr	r19
    2dba:	27 95       	ror	r18
    2dbc:	36 95       	lsr	r19
    2dbe:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2dc0:	82 2f       	mov	r24, r18
    2dc2:	86 95       	lsr	r24
    2dc4:	20 fd       	sbrc	r18, 0
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <__vector_126+0x6e>
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	01 c0       	rjmp	.+2      	; 0x2dce <__vector_126+0x70>
    2dcc:	90 e8       	ldi	r25, 0x80	; 128
    2dce:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2dd0:	e8 2f       	mov	r30, r24
    2dd2:	ef 70       	andi	r30, 0x0F	; 15
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	ee 0f       	add	r30, r30
    2dd8:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2dda:	28 2f       	mov	r18, r24
    2ddc:	08 2e       	mov	r0, r24
    2dde:	00 0c       	add	r0, r0
    2de0:	33 0b       	sbc	r19, r19
    2de2:	22 27       	eor	r18, r18
    2de4:	33 0f       	add	r19, r19
    2de6:	22 1f       	adc	r18, r18
    2de8:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2dea:	e2 0f       	add	r30, r18
    2dec:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2dee:	df 01       	movw	r26, r30
    2df0:	aa 0f       	add	r26, r26
    2df2:	bb 1f       	adc	r27, r27
    2df4:	aa 0f       	add	r26, r26
    2df6:	bb 1f       	adc	r27, r27
    2df8:	aa 0f       	add	r26, r26
    2dfa:	bb 1f       	adc	r27, r27
    2dfc:	a4 50       	subi	r26, 0x04	; 4
    2dfe:	bd 4d       	sbci	r27, 0xDD	; 221
    2e00:	5c 96       	adiw	r26, 0x1c	; 28
    2e02:	9c 91       	ld	r25, X
    2e04:	95 ff       	sbrs	r25, 5
    2e06:	88 c0       	rjmp	.+272    	; 0x2f18 <__vector_126+0x1ba>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2e08:	ee 0f       	add	r30, r30
    2e0a:	ff 1f       	adc	r31, r31
    2e0c:	ee 0f       	add	r30, r30
    2e0e:	ff 1f       	adc	r31, r31
    2e10:	ee 0f       	add	r30, r30
    2e12:	ff 1f       	adc	r31, r31
    2e14:	e8 5e       	subi	r30, 0xE8	; 232
    2e16:	fc 4d       	sbci	r31, 0xDC	; 220
    2e18:	00 e2       	ldi	r16, 0x20	; 32
    2e1a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2e1c:	81 11       	cpse	r24, r1
    2e1e:	77 c0       	rjmp	.+238    	; 0x2f0e <__vector_126+0x1b0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2e20:	80 91 f9 22 	lds	r24, 0x22F9	; 0x8022f9 <udd_ep_control_state>
    2e24:	84 30       	cpi	r24, 0x04	; 4
    2e26:	19 f4       	brne	.+6      	; 0x2e2e <__vector_126+0xd0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2e28:	8f d9       	rcall	.-3298   	; 0x2148 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2e2a:	4b d9       	rcall	.-3434   	; 0x20c2 <udd_ctrl_init>
    2e2c:	75 c0       	rjmp	.+234    	; 0x2f18 <__vector_126+0x1ba>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2e2e:	00 91 1a 23 	lds	r16, 0x231A	; 0x80231a <udd_sram+0x1e>
    2e32:	10 91 1b 23 	lds	r17, 0x231B	; 0x80231b <udd_sram+0x1f>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2e36:	80 91 c4 25 	lds	r24, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2e3a:	90 91 c5 25 	lds	r25, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2e3e:	c0 91 f5 22 	lds	r28, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2e42:	d0 91 f6 22 	lds	r29, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2e46:	9e 01       	movw	r18, r28
    2e48:	20 0f       	add	r18, r16
    2e4a:	31 1f       	adc	r19, r17
    2e4c:	82 17       	cp	r24, r18
    2e4e:	93 07       	cpc	r25, r19
    2e50:	18 f4       	brcc	.+6      	; 0x2e58 <__vector_126+0xfa>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2e52:	8c 01       	movw	r16, r24
    2e54:	0c 1b       	sub	r16, r28
    2e56:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2e58:	80 91 c2 25 	lds	r24, 0x25C2	; 0x8025c2 <udd_g_ctrlreq+0x8>
    2e5c:	90 91 c3 25 	lds	r25, 0x25C3	; 0x8025c3 <udd_g_ctrlreq+0x9>
    2e60:	a8 01       	movw	r20, r16
    2e62:	65 eb       	ldi	r22, 0xB5	; 181
    2e64:	72 e2       	ldi	r23, 0x22	; 34
    2e66:	8c 0f       	add	r24, r28
    2e68:	9d 1f       	adc	r25, r29
    2e6a:	98 d0       	rcall	.+304    	; 0x2f9c <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2e6c:	c0 0f       	add	r28, r16
    2e6e:	d1 1f       	adc	r29, r17
    2e70:	c0 93 f5 22 	sts	0x22F5, r28	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2e74:	d0 93 f6 22 	sts	0x22F6, r29	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e78:	00 34       	cpi	r16, 0x40	; 64
    2e7a:	11 05       	cpc	r17, r1
    2e7c:	69 f4       	brne	.+26     	; 0x2e98 <__vector_126+0x13a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2e7e:	80 91 f7 22 	lds	r24, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2e82:	90 91 f8 22 	lds	r25, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2e86:	8c 0f       	add	r24, r28
    2e88:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2e8a:	20 91 c0 25 	lds	r18, 0x25C0	; 0x8025c0 <udd_g_ctrlreq+0x6>
    2e8e:	30 91 c1 25 	lds	r19, 0x25C1	; 0x8025c1 <udd_g_ctrlreq+0x7>
    2e92:	82 17       	cp	r24, r18
    2e94:	93 07       	cpc	r25, r19
    2e96:	80 f0       	brcs	.+32     	; 0x2eb8 <__vector_126+0x15a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e98:	ea eb       	ldi	r30, 0xBA	; 186
    2e9a:	f5 e2       	ldi	r31, 0x25	; 37
    2e9c:	c2 87       	std	Z+10, r28	; 0x0a
    2e9e:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2ea0:	06 84       	ldd	r0, Z+14	; 0x0e
    2ea2:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ea4:	e0 2d       	mov	r30, r0
    2ea6:	30 97       	sbiw	r30, 0x00	; 0
    2ea8:	29 f0       	breq	.+10     	; 0x2eb4 <__vector_126+0x156>
			if (!udd_g_ctrlreq.over_under_run()) {
    2eaa:	09 95       	icall
    2eac:	81 11       	cpse	r24, r1
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <__vector_126+0x156>
				// Stall ZLP
				udd_ctrl_stall_data();
    2eb0:	2f d9       	rcall	.-3490   	; 0x2110 <udd_ctrl_stall_data>
    2eb2:	32 c0       	rjmp	.+100    	; 0x2f18 <__vector_126+0x1ba>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2eb4:	3b d9       	rcall	.-3466   	; 0x212c <udd_ctrl_send_zlp_in>
    2eb6:	30 c0       	rjmp	.+96     	; 0x2f18 <__vector_126+0x1ba>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2eb8:	80 91 c4 25 	lds	r24, 0x25C4	; 0x8025c4 <udd_g_ctrlreq+0xa>
    2ebc:	90 91 c5 25 	lds	r25, 0x25C5	; 0x8025c5 <udd_g_ctrlreq+0xb>
    2ec0:	c8 17       	cp	r28, r24
    2ec2:	d9 07       	cpc	r29, r25
    2ec4:	f9 f4       	brne	.+62     	; 0x2f04 <__vector_126+0x1a6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2ec6:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <udd_g_ctrlreq+0xe>
    2eca:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <udd_g_ctrlreq+0xf>
    2ece:	30 97       	sbiw	r30, 0x00	; 0
    2ed0:	11 f4       	brne	.+4      	; 0x2ed6 <__vector_126+0x178>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2ed2:	1e d9       	rcall	.-3524   	; 0x2110 <udd_ctrl_stall_data>
    2ed4:	21 c0       	rjmp	.+66     	; 0x2f18 <__vector_126+0x1ba>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2ed6:	09 95       	icall
    2ed8:	81 11       	cpse	r24, r1
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <__vector_126+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2edc:	19 d9       	rcall	.-3534   	; 0x2110 <udd_ctrl_stall_data>
    2ede:	1c c0       	rjmp	.+56     	; 0x2f18 <__vector_126+0x1ba>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2ee0:	20 91 f7 22 	lds	r18, 0x22F7	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2ee4:	30 91 f8 22 	lds	r19, 0x22F8	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
    2ee8:	80 91 f5 22 	lds	r24, 0x22F5	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2eec:	90 91 f6 22 	lds	r25, 0x22F6	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
    2ef0:	82 0f       	add	r24, r18
    2ef2:	93 1f       	adc	r25, r19
    2ef4:	80 93 f7 22 	sts	0x22F7, r24	; 0x8022f7 <udd_ctrl_prev_payload_nb_trans>
    2ef8:	90 93 f8 22 	sts	0x22F8, r25	; 0x8022f8 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2efc:	10 92 f5 22 	sts	0x22F5, r1	; 0x8022f5 <udd_ctrl_payload_nb_trans>
    2f00:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2f04:	e8 e1       	ldi	r30, 0x18	; 24
    2f06:	f3 e2       	ldi	r31, 0x23	; 35
    2f08:	02 e0       	ldi	r16, 0x02	; 2
    2f0a:	06 93       	lac	Z, r16
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <__vector_126+0x1ba>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2f0e:	80 38       	cpi	r24, 0x80	; 128
    2f10:	11 f4       	brne	.+4      	; 0x2f16 <__vector_126+0x1b8>
		udd_ctrl_in_sent();
    2f12:	22 d9       	rcall	.-3516   	; 0x2158 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2f14:	01 c0       	rjmp	.+2      	; 0x2f18 <__vector_126+0x1ba>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2f16:	3c da       	rcall	.-2952   	; 0x2390 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2f18:	ff 91       	pop	r31
    2f1a:	ef 91       	pop	r30
    2f1c:	df 91       	pop	r29
    2f1e:	cf 91       	pop	r28
    2f20:	bf 91       	pop	r27
    2f22:	af 91       	pop	r26
    2f24:	9f 91       	pop	r25
    2f26:	8f 91       	pop	r24
    2f28:	7f 91       	pop	r23
    2f2a:	6f 91       	pop	r22
    2f2c:	5f 91       	pop	r21
    2f2e:	4f 91       	pop	r20
    2f30:	3f 91       	pop	r19
    2f32:	2f 91       	pop	r18
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	0f 90       	pop	r0
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	0f 90       	pop	r0
    2f3e:	1f 90       	pop	r1
    2f40:	18 95       	reti

00002f42 <__udivmodhi4>:
    2f42:	aa 1b       	sub	r26, r26
    2f44:	bb 1b       	sub	r27, r27
    2f46:	51 e1       	ldi	r21, 0x11	; 17
    2f48:	07 c0       	rjmp	.+14     	; 0x2f58 <__udivmodhi4_ep>

00002f4a <__udivmodhi4_loop>:
    2f4a:	aa 1f       	adc	r26, r26
    2f4c:	bb 1f       	adc	r27, r27
    2f4e:	a6 17       	cp	r26, r22
    2f50:	b7 07       	cpc	r27, r23
    2f52:	10 f0       	brcs	.+4      	; 0x2f58 <__udivmodhi4_ep>
    2f54:	a6 1b       	sub	r26, r22
    2f56:	b7 0b       	sbc	r27, r23

00002f58 <__udivmodhi4_ep>:
    2f58:	88 1f       	adc	r24, r24
    2f5a:	99 1f       	adc	r25, r25
    2f5c:	5a 95       	dec	r21
    2f5e:	a9 f7       	brne	.-22     	; 0x2f4a <__udivmodhi4_loop>
    2f60:	80 95       	com	r24
    2f62:	90 95       	com	r25
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	08 95       	ret

00002f6a <__divmodhi4>:
    2f6a:	97 fb       	bst	r25, 7
    2f6c:	07 2e       	mov	r0, r23
    2f6e:	16 f4       	brtc	.+4      	; 0x2f74 <__divmodhi4+0xa>
    2f70:	00 94       	com	r0
    2f72:	06 d0       	rcall	.+12     	; 0x2f80 <__divmodhi4_neg1>
    2f74:	77 fd       	sbrc	r23, 7
    2f76:	08 d0       	rcall	.+16     	; 0x2f88 <__divmodhi4_neg2>
    2f78:	e4 df       	rcall	.-56     	; 0x2f42 <__udivmodhi4>
    2f7a:	07 fc       	sbrc	r0, 7
    2f7c:	05 d0       	rcall	.+10     	; 0x2f88 <__divmodhi4_neg2>
    2f7e:	3e f4       	brtc	.+14     	; 0x2f8e <__divmodhi4_exit>

00002f80 <__divmodhi4_neg1>:
    2f80:	90 95       	com	r25
    2f82:	81 95       	neg	r24
    2f84:	9f 4f       	sbci	r25, 0xFF	; 255
    2f86:	08 95       	ret

00002f88 <__divmodhi4_neg2>:
    2f88:	70 95       	com	r23
    2f8a:	61 95       	neg	r22
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255

00002f8e <__divmodhi4_exit>:
    2f8e:	08 95       	ret

00002f90 <__tablejump2__>:
    2f90:	ee 0f       	add	r30, r30
    2f92:	ff 1f       	adc	r31, r31
    2f94:	05 90       	lpm	r0, Z+
    2f96:	f4 91       	lpm	r31, Z
    2f98:	e0 2d       	mov	r30, r0
    2f9a:	09 94       	ijmp

00002f9c <memcpy>:
    2f9c:	fb 01       	movw	r30, r22
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <memcpy+0xa>
    2fa2:	01 90       	ld	r0, Z+
    2fa4:	0d 92       	st	X+, r0
    2fa6:	41 50       	subi	r20, 0x01	; 1
    2fa8:	50 40       	sbci	r21, 0x00	; 0
    2faa:	d8 f7       	brcc	.-10     	; 0x2fa2 <memcpy+0x6>
    2fac:	08 95       	ret

00002fae <_exit>:
    2fae:	f8 94       	cli

00002fb0 <__stop_program>:
    2fb0:	ff cf       	rjmp	.-2      	; 0x2fb0 <__stop_program>
