
USB_BULK_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  000029ea  00002a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ba9  008020b2  008020b2  00002b32  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00002ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a691  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bc1  00000000  00000000  0000d701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008b31  00000000  00000000  0000f2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a84  00000000  00000000  00017df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002fbc1  00000000  00000000  00018878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022ab  00000000  00000000  00048439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0004a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ba5c  00000000  00000000  0004aae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	ff c5       	rjmp	.+3070   	; 0xc18 <__vector_6>
      1a:	00 00       	nop
      1c:	4a c6       	rjmp	.+3220   	; 0xcb2 <__vector_7>
      1e:	00 00       	nop
      20:	88 c6       	rjmp	.+3344   	; 0xd32 <__vector_8>
      22:	00 00       	nop
      24:	90 c6       	rjmp	.+3360   	; 0xd46 <__vector_9>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c7       	rjmp	.+3778   	; 0xf24 <__vector_24>
      62:	00 00       	nop
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b2 c0       	rjmp	.+356    	; 0x282 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	4b c6       	rjmp	.+3222   	; 0xde4 <__vector_83>
     14e:	00 00       	nop
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__vector_125>
     1f8:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__vector_126>
     1fc:	19 0a       	sbc	r1, r25
     1fe:	1b 0a       	sbc	r1, r27
     200:	57 0a       	sbc	r5, r23
     202:	93 0a       	sbc	r9, r19
     204:	9c 0a       	sbc	r9, r28
     206:	a1 0a       	sbc	r10, r17
     208:	f3 0a       	sbc	r15, r19
     20a:	f8 0a       	sbc	r15, r24
     20c:	47 0a       	sbc	r4, r23
     20e:	49 0a       	sbc	r4, r25
     210:	4b 0a       	sbc	r4, r27
     212:	4d 0a       	sbc	r4, r29
     214:	4f 0a       	sbc	r4, r31
     216:	51 0a       	sbc	r5, r17
     218:	53 0a       	sbc	r5, r19
     21a:	55 0a       	sbc	r5, r21
     21c:	83 0a       	sbc	r8, r19
     21e:	85 0a       	sbc	r8, r21
     220:	87 0a       	sbc	r8, r23
     222:	89 0a       	sbc	r8, r25
     224:	8b 0a       	sbc	r8, r27
     226:	8d 0a       	sbc	r8, r29
     228:	8f 0a       	sbc	r8, r31
     22a:	91 0a       	sbc	r9, r17
     22c:	ad 0a       	sbc	r10, r29
     22e:	b8 0a       	sbc	r11, r24
     230:	c2 0a       	sbc	r12, r18
     232:	d0 0a       	sbc	r13, r16
     234:	d2 0a       	sbc	r13, r18
     236:	d4 0a       	sbc	r13, r20
     238:	de 0a       	sbc	r13, r30
     23a:	e8 0a       	sbc	r14, r24
     23c:	70 0e       	add	r7, r16
     23e:	73 0e       	add	r7, r19
     240:	76 0e       	add	r7, r22
     242:	79 0e       	add	r7, r25
     244:	7c 0e       	add	r7, r28
     246:	7f 0e       	add	r7, r31
     248:	82 0e       	add	r8, r18

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	ea ee       	ldi	r30, 0xEA	; 234
     25e:	f9 e2       	ldi	r31, 0x29	; 41
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a2 3b       	cpi	r26, 0xB2	; 178
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2c e2       	ldi	r18, 0x2C	; 44
     26e:	a2 eb       	ldi	r26, 0xB2	; 178
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	ab 35       	cpi	r26, 0x5B	; 91
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	45 d0       	rcall	.+138    	; 0x308 <main>
     27e:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     284:	e0 e8       	ldi	r30, 0x80	; 128
     286:	f6 e0       	ldi	r31, 0x06	; 6
     288:	8f e0       	ldi	r24, 0x0F	; 15
     28a:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	84 83       	std	Z+4, r24	; 0x04
     290:	08 95       	ret

00000292 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     292:	08 95       	ret

00000294 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     294:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <usb_state>
     298:	2e ee       	ldi	r18, 0xEE	; 238
     29a:	32 e0       	ldi	r19, 0x02	; 2
     29c:	42 9f       	mul	r20, r18
     29e:	c0 01       	movw	r24, r0
     2a0:	43 9f       	mul	r20, r19
     2a2:	90 0d       	add	r25, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	4a e4       	ldi	r20, 0x4A	; 74
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	6a ef       	ldi	r22, 0xFA	; 250
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	88 58       	subi	r24, 0x88	; 136
     2b0:	99 4d       	sbci	r25, 0xD9	; 217
     2b2:	30 c7       	rjmp	.+3680   	; 0x1114 <udi_vendor_iso_in_run>
     2b4:	08 95       	ret

000002b6 <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * PACKET_SIZE], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2b6:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <usb_state>
     2ba:	2e ee       	ldi	r18, 0xEE	; 238
     2bc:	32 e0       	ldi	r19, 0x02	; 2
     2be:	42 9f       	mul	r20, r18
     2c0:	c0 01       	movw	r24, r0
     2c2:	43 9f       	mul	r20, r19
     2c4:	90 0d       	add	r25, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	4b e5       	ldi	r20, 0x5B	; 91
     2ca:	51 e0       	ldi	r21, 0x01	; 1
     2cc:	6a ef       	ldi	r22, 0xFA	; 250
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	8e 58       	subi	r24, 0x8E	; 142
     2d2:	98 4d       	sbci	r25, 0xD8	; 216
     2d4:	2b c7       	rjmp	.+3670   	; 0x112c <udi_vendor_iso_in_run2>
     2d6:	08 95       	ret

000002d8 <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * PACKET_SIZE + 250], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     2d8:	40 91 b4 20 	lds	r20, 0x20B4	; 0x8020b4 <usb_state>
     2dc:	2e ee       	ldi	r18, 0xEE	; 238
     2de:	32 e0       	ldi	r19, 0x02	; 2
     2e0:	42 9f       	mul	r20, r18
     2e2:	c0 01       	movw	r24, r0
     2e4:	43 9f       	mul	r20, r19
     2e6:	90 0d       	add	r25, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	4c e6       	ldi	r20, 0x6C	; 108
     2ec:	51 e0       	ldi	r21, 0x01	; 1
     2ee:	6a ef       	ldi	r22, 0xFA	; 250
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	84 59       	subi	r24, 0x94	; 148
     2f4:	97 4d       	sbci	r25, 0xD7	; 215
     2f6:	26 d7       	rcall	.+3660   	; 0x1144 <udi_vendor_iso_in_run3>
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * PACKET_SIZE + 500], PACKET_SIZE, iso_callback);
	usb_state = !usb_state;
     2f8:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <usb_state>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	91 11       	cpse	r25, r1
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <usb_state>
     306:	08 95       	ret

00000308 <main>:
volatile unsigned char usb_state_prev;
volatile unsigned char readyToInit = 0;


int main(void){
	irq_initialize_vectors();
     308:	87 e0       	ldi	r24, 0x07	; 7
     30a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     30e:	78 94       	sei
	sysclk_init();
     310:	14 d6       	rcall	.+3112   	; 0xf3a <sysclk_init>
	board_init();
     312:	bf df       	rcall	.-130    	; 0x292 <board_init>
	udc_start();
     314:	0e 94 99 09 	call	0x1332	; 0x1332 <udc_start>
	tiny_dac_setup();
     318:	db d0       	rcall	.+438    	; 0x4d0 <tiny_dac_setup>
	tiny_dma_setup();
     31a:	fe d0       	rcall	.+508    	; 0x518 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	9a d0       	rcall	.+308    	; 0x456 <tiny_adc_setup>
	tiny_adc_pid_setup();
     322:	86 d0       	rcall	.+268    	; 0x430 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     324:	8c e0       	ldi	r24, 0x0C	; 12
     326:	7a d0       	rcall	.+244    	; 0x41c <tiny_adc_ch1setup>
	tiny_timer_setup();
     328:	18 d5       	rcall	.+2608   	; 0xd5a <tiny_timer_setup>
	tiny_uart_setup();
     32a:	d6 d5       	rcall	.+2988   	; 0xed8 <tiny_uart_setup>
	tiny_spi_setup();
     32c:	ed d5       	rcall	.+3034   	; 0xf08 <tiny_spi_setup>
	tiny_dig_setup();
     32e:	aa df       	rcall	.-172    	; 0x284 <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");
	
	
	precalc_DMA_CH0_DESTADDR0_b1_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE]) >> 0) & 0xFF;
     330:	28 e7       	ldi	r18, 0x78	; 120
     332:	36 e2       	ldi	r19, 0x26	; 38
     334:	20 93 75 24 	sts	0x2475, r18	; 0x802475 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_0>
	precalc_DMA_CH0_DESTADDR0_b1_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE]) >> 0) & 0xFF;
     338:	86 e6       	ldi	r24, 0x66	; 102
     33a:	99 e2       	ldi	r25, 0x29	; 41
     33c:	80 93 76 24 	sts	0x2476, r24	; 0x802476 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_1>
	precalc_DMA_CH0_DESTADDR1_b1_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE]) >> 8) & 0xFF;
     340:	30 93 61 22 	sts	0x2261, r19	; 0x802261 <precalc_DMA_CH0_DESTADDR1_b1_state_equals_0>
	precalc_DMA_CH0_DESTADDR1_b1_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE]) >> 8) & 0xFF;
     344:	90 93 60 22 	sts	0x2260, r25	; 0x802260 <precalc_DMA_CH0_DESTADDR1_b1_state_equals_1>
	
	precalc_DMA_CH1_DESTADDR0_b2_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;
     348:	2f ee       	ldi	r18, 0xEF	; 239
     34a:	37 e2       	ldi	r19, 0x27	; 39
     34c:	20 93 5b 22 	sts	0x225B, r18	; 0x80225b <precalc_DMA_CH1_DESTADDR0_b2_state_equals_0>
	precalc_DMA_CH1_DESTADDR0_b2_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;
     350:	8d ed       	ldi	r24, 0xDD	; 221
     352:	9a e2       	ldi	r25, 0x2A	; 42
     354:	80 93 54 2c 	sts	0x2C54, r24	; 0x802c54 <precalc_DMA_CH1_DESTADDR0_b2_state_equals_1>
	precalc_DMA_CH1_DESTADDR1_b2_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     358:	30 93 64 24 	sts	0x2464, r19	; 0x802464 <precalc_DMA_CH1_DESTADDR1_b2_state_equals_0>
	precalc_DMA_CH1_DESTADDR1_b2_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     35c:	90 93 5a 22 	sts	0x225A, r25	; 0x80225a <precalc_DMA_CH1_DESTADDR1_b2_state_equals_1>
     360:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <debug_counter>
     364:	90 91 5d 22 	lds	r25, 0x225D	; 0x80225d <debug_counter+0x1>
     368:	a0 91 5e 22 	lds	r26, 0x225E	; 0x80225e <debug_counter+0x2>
     36c:	b0 91 5f 22 	lds	r27, 0x225F	; 0x80225f <debug_counter+0x3>


	while (true) {
		debug_counter++;
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	a1 1d       	adc	r26, r1
     374:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	21 ee       	ldi	r18, 0xE1	; 225
     37a:	92 07       	cpc	r25, r18
     37c:	25 ef       	ldi	r18, 0xF5	; 245
     37e:	a2 07       	cpc	r26, r18
     380:	25 e0       	ldi	r18, 0x05	; 5
     382:	b2 07       	cpc	r27, r18
     384:	18 f0       	brcs	.+6      	; 0x38c <main+0x84>
			debug_counter = 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     3a8:	e3 cf       	rjmp	.-58     	; 0x370 <main+0x68>

000003aa <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     3aa:	08 95       	ret

000003ac <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     3ac:	08 95       	ret

000003ae <main_sof_action>:
	return;
}

void main_sof_action(void)
{
     3ae:	08 95       	ret

000003b0 <main_vendor_enable>:
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <main_b_vendor_enable>
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     3b6:	4a e4       	ldi	r20, 0x4A	; 74
     3b8:	51 e0       	ldi	r21, 0x01	; 1
     3ba:	6e ee       	ldi	r22, 0xEE	; 238
     3bc:	72 e0       	ldi	r23, 0x02	; 2
     3be:	88 e7       	ldi	r24, 0x78	; 120
     3c0:	96 e2       	ldi	r25, 0x26	; 38
     3c2:	a8 d6       	rcall	.+3408   	; 0x1114 <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     3c4:	4b e5       	ldi	r20, 0x5B	; 91
     3c6:	51 e0       	ldi	r21, 0x01	; 1
     3c8:	6e ee       	ldi	r22, 0xEE	; 238
     3ca:	72 e0       	ldi	r23, 0x02	; 2
     3cc:	82 e7       	ldi	r24, 0x72	; 114
     3ce:	97 e2       	ldi	r25, 0x27	; 39
     3d0:	ad d6       	rcall	.+3418   	; 0x112c <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     3d2:	4c e6       	ldi	r20, 0x6C	; 108
     3d4:	51 e0       	ldi	r21, 0x01	; 1
     3d6:	6e ee       	ldi	r22, 0xEE	; 238
     3d8:	72 e0       	ldi	r23, 0x02	; 2
     3da:	8c e6       	ldi	r24, 0x6C	; 108
     3dc:	98 e2       	ldi	r25, 0x28	; 40
     3de:	b2 d6       	rcall	.+3428   	; 0x1144 <udi_vendor_iso_in_run3>
	return true;
}
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	08 95       	ret

000003e4 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     3e4:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <main_b_vendor_enable>
     3e8:	08 95       	ret

000003ea <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	08 95       	ret

000003ee <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	08 95       	ret

000003f2 <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     3f2:	e0 e0       	ldi	r30, 0x00	; 0
     3f4:	f2 e0       	ldi	r31, 0x02	; 2
     3f6:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     3f8:	98 2f       	mov	r25, r24
     3fa:	9c 71       	andi	r25, 0x1C	; 28
     3fc:	93 68       	ori	r25, 0x83	; 131
     3fe:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     400:	88 23       	and	r24, r24
     402:	1c f4       	brge	.+6      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     404:	90 e1       	ldi	r25, 0x10	; 16
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	02 c0       	rjmp	.+4      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	89 2b       	or	r24, r25
     410:	e0 e0       	ldi	r30, 0x00	; 0
     412:	f2 e0       	ldi	r31, 0x02	; 2
     414:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     416:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     418:	16 a2       	std	Z+38, r1	; 0x26
     41a:	08 95       	ret

0000041c <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     41c:	e0 e0       	ldi	r30, 0x00	; 0
     41e:	f2 e0       	ldi	r31, 0x02	; 2
     420:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     422:	83 68       	ori	r24, 0x83	; 131
     424:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     426:	80 e1       	ldi	r24, 0x10	; 16
     428:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     42a:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     42c:	16 aa       	std	Z+54, r1	; 0x36
     42e:	08 95       	ret

00000430 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     430:	e0 e0       	ldi	r30, 0x00	; 0
     432:	f2 e0       	ldi	r31, 0x02	; 2
     434:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     436:	83 e8       	ldi	r24, 0x83	; 131
     438:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     43a:	8f e2       	ldi	r24, 0x2F	; 47
     43c:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     43e:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     440:	16 a6       	std	Z+46, r1	; 0x2e
     442:	08 95       	ret

00000444 <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     444:	aa ec       	ldi	r26, 0xCA	; 202
     446:	b1 e0       	ldi	r27, 0x01	; 1
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     44c:	e8 2f       	mov	r30, r24
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     452:	1c 92       	st	X, r1

	return( result );
     454:	08 95       	ret

00000456 <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     45a:	e0 e7       	ldi	r30, 0x70	; 112
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	91 81       	ldd	r25, Z+1	; 0x01
     460:	9d 7f       	andi	r25, 0xFD	; 253
     462:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     464:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     468:	62 30       	cpi	r22, 0x02	; 2
     46a:	31 f1       	breq	.+76     	; 0x4b8 <tiny_adc_setup+0x62>
     46c:	e0 e0       	ldi	r30, 0x00	; 0
     46e:	f2 e0       	ldi	r31, 0x02	; 2
     470:	9c e1       	ldi	r25, 0x1C	; 28
     472:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     474:	90 e4       	ldi	r25, 0x40	; 64
     476:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     478:	81 11       	cpse	r24, r1
     47a:	02 c0       	rjmp	.+4      	; 0x480 <tiny_adc_setup+0x2a>
     47c:	80 e4       	ldi	r24, 0x40	; 64
     47e:	01 c0       	rjmp	.+2      	; 0x482 <tiny_adc_setup+0x2c>
     480:	80 ec       	ldi	r24, 0xC0	; 192
     482:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     486:	61 30       	cpi	r22, 0x01	; 1
     488:	11 f0       	breq	.+4      	; 0x48e <tiny_adc_setup+0x38>
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	01 c0       	rjmp	.+2      	; 0x490 <tiny_adc_setup+0x3a>
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	c0 e0       	ldi	r28, 0x00	; 0
     492:	d2 e0       	ldi	r29, 0x02	; 2
     494:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     496:	80 e2       	ldi	r24, 0x20	; 32
     498:	d5 df       	rcall	.-86     	; 0x444 <ReadCalibrationByte>
     49a:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     49c:	81 e2       	ldi	r24, 0x21	; 33
     49e:	d2 df       	rcall	.-92     	; 0x444 <ReadCalibrationByte>
     4a0:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     4a2:	18 8e       	std	Y+24, r1	; 0x18
     4a4:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     4aa:	c2 df       	rcall	.-124    	; 0x430 <tiny_adc_pid_setup>
     4ac:	0e c0       	rjmp	.+28     	; 0x4ca <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4ae:	80 ec       	ldi	r24, 0xC0	; 192
     4b0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	ec cf       	rjmp	.-40     	; 0x490 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     4b8:	e0 e0       	ldi	r30, 0x00	; 0
     4ba:	f2 e0       	ldi	r31, 0x02	; 2
     4bc:	9e e1       	ldi	r25, 0x1E	; 30
     4be:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     4c0:	90 e4       	ldi	r25, 0x40	; 64
     4c2:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4c4:	81 11       	cpse	r24, r1
     4c6:	f3 cf       	rjmp	.-26     	; 0x4ae <tiny_adc_setup+0x58>
     4c8:	d9 cf       	rjmp	.-78     	; 0x47c <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     4d4:	e0 e7       	ldi	r30, 0x70	; 112
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	82 81       	ldd	r24, Z+2	; 0x02
     4da:	8b 7f       	andi	r24, 0xFB	; 251
     4dc:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     4de:	c0 e2       	ldi	r28, 0x20	; 32
     4e0:	d3 e0       	ldi	r29, 0x03	; 3
     4e2:	8d e0       	ldi	r24, 0x0D	; 13
     4e4:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     4e6:	80 e4       	ldi	r24, 0x40	; 64
     4e8:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     4ee:	83 e3       	ldi	r24, 0x33	; 51
     4f0:	a9 df       	rcall	.-174    	; 0x444 <ReadCalibrationByte>
     4f2:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     4f4:	82 e3       	ldi	r24, 0x32	; 50
     4f6:	a6 df       	rcall	.-180    	; 0x444 <ReadCalibrationByte>
     4f8:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     4fa:	87 e3       	ldi	r24, 0x37	; 55
     4fc:	a3 df       	rcall	.-186    	; 0x444 <ReadCalibrationByte>
     4fe:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     500:	86 e3       	ldi	r24, 0x36	; 54
     502:	a0 df       	rcall	.-192    	; 0x444 <ReadCalibrationByte>
     504:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     506:	e0 e2       	ldi	r30, 0x20	; 32
     508:	f6 e0       	ldi	r31, 0x06	; 6
     50a:	80 81       	ld	r24, Z
     50c:	83 60       	ori	r24, 0x03	; 3
     50e:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     510:	14 82       	std	Z+4, r1	; 0x04
	
	

     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     518:	e0 e7       	ldi	r30, 0x70	; 112
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	8e 7f       	andi	r24, 0xFE	; 254
     520:	80 83       	st	Z, r24
     522:	82 e8       	ldi	r24, 0x82	; 130
     524:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     528:	08 95       	ret

0000052a <tiny_dma_flush>:
     52a:	e0 e0       	ldi	r30, 0x00	; 0
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	10 8a       	std	Z+16, r1	; 0x10
     530:	80 e4       	ldi	r24, 0x40	; 64
     532:	80 8b       	std	Z+16, r24	; 0x10
     534:	10 a2       	std	Z+32, r1	; 0x20
     536:	80 a3       	std	Z+32, r24	; 0x20
     538:	10 aa       	std	Z+48, r1	; 0x30
     53a:	80 ab       	std	Z+48, r24	; 0x30
     53c:	e0 e4       	ldi	r30, 0x40	; 64
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	10 82       	st	Z, r1
     542:	80 83       	st	Z, r24
     544:	08 95       	ret

00000546 <tiny_dma_set_mode_0>:
     546:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
     54a:	ef df       	rcall	.-34     	; 0x52a <tiny_dma_flush>
     54c:	e0 e0       	ldi	r30, 0x00	; 0
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	16 aa       	std	Z+54, r1	; 0x36
     552:	94 e2       	ldi	r25, 0x24	; 36
     554:	90 ab       	std	Z+48, r25	; 0x30
     556:	11 aa       	std	Z+49, r1	; 0x31
     558:	49 e5       	ldi	r20, 0x59	; 89
     55a:	42 ab       	std	Z+50, r20	; 0x32
     55c:	32 e0       	ldi	r19, 0x02	; 2
     55e:	33 ab       	std	Z+51, r19	; 0x33
     560:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     564:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     568:	64 ab       	std	Z+52, r22	; 0x34
     56a:	75 ab       	std	Z+53, r23	; 0x35
     56c:	67 e7       	ldi	r22, 0x77	; 119
     56e:	74 e2       	ldi	r23, 0x24	; 36
     570:	60 af       	std	Z+56, r22	; 0x38
     572:	71 af       	std	Z+57, r23	; 0x39
     574:	12 ae       	std	Z+58, r1	; 0x3a
     576:	8b e3       	ldi	r24, 0x3B	; 59
     578:	84 af       	std	Z+60, r24	; 0x3c
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     580:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     584:	20 a9       	ldd	r18, Z+48	; 0x30
     586:	20 68       	ori	r18, 0x80	; 128
     588:	20 ab       	std	Z+48, r18	; 0x30
     58a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     58e:	a0 e4       	ldi	r26, 0x40	; 64
     590:	b1 e0       	ldi	r27, 0x01	; 1
     592:	9c 93       	st	X, r25
     594:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     598:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     59c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     5a0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     5a4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     5a8:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     5ac:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     5b0:	44 e6       	ldi	r20, 0x64	; 100
     5b2:	52 e2       	ldi	r21, 0x22	; 34
     5b4:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     5b8:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     5bc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     5c0:	29 e3       	ldi	r18, 0x39	; 57
     5c2:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     5c6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     5ca:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     5ce:	2c 91       	ld	r18, X
     5d0:	20 68       	ori	r18, 0x80	; 128
     5d2:	2c 93       	st	X, r18
     5d4:	10 8a       	std	Z+16, r1	; 0x10
     5d6:	20 e4       	ldi	r18, 0x40	; 64
     5d8:	20 8b       	std	Z+16, r18	; 0x10
     5da:	24 e0       	ldi	r18, 0x04	; 4
     5dc:	20 8b       	std	Z+16, r18	; 0x10
     5de:	81 8b       	std	Z+17, r24	; 0x11
     5e0:	81 e9       	ldi	r24, 0x91	; 145
     5e2:	82 8b       	std	Z+18, r24	; 0x12
     5e4:	80 e1       	ldi	r24, 0x10	; 16
     5e6:	83 8b       	std	Z+19, r24	; 0x13
     5e8:	47 e7       	ldi	r20, 0x77	; 119
     5ea:	51 e0       	ldi	r21, 0x01	; 1
     5ec:	44 8b       	std	Z+20, r20	; 0x14
     5ee:	55 8b       	std	Z+21, r21	; 0x15
     5f0:	90 8f       	std	Z+24, r25	; 0x18
     5f2:	31 8f       	std	Z+25, r19	; 0x19
     5f4:	12 8e       	std	Z+26, r1	; 0x1a
     5f6:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b1_state>
     5fa:	2e ee       	ldi	r18, 0xEE	; 238
     5fc:	32 e0       	ldi	r19, 0x02	; 2
     5fe:	42 9f       	mul	r20, r18
     600:	c0 01       	movw	r24, r0
     602:	43 9f       	mul	r20, r19
     604:	90 0d       	add	r25, r0
     606:	11 24       	eor	r1, r1
     608:	88 58       	subi	r24, 0x88	; 136
     60a:	99 4d       	sbci	r25, 0xD9	; 217
     60c:	84 8f       	std	Z+28, r24	; 0x1c
     60e:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <b1_state>
     612:	42 9f       	mul	r20, r18
     614:	c0 01       	movw	r24, r0
     616:	43 9f       	mul	r20, r19
     618:	90 0d       	add	r25, r0
     61a:	11 24       	eor	r1, r1
     61c:	88 58       	subi	r24, 0x88	; 136
     61e:	99 4d       	sbci	r25, 0xD9	; 217
     620:	95 8f       	std	Z+29, r25	; 0x1d
     622:	16 8e       	std	Z+30, r1	; 0x1e
     624:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <b1_state>
     628:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <b2_state>
     62c:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <usb_state>
     630:	80 89       	ldd	r24, Z+16	; 0x10
     632:	80 68       	ori	r24, 0x80	; 128
     634:	80 8b       	std	Z+16, r24	; 0x10
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <__data_end>
     63c:	08 95       	ret

0000063e <tiny_dma_set_mode_1>:
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     648:	70 df       	rcall	.-288    	; 0x52a <tiny_dma_flush>
     64a:	e0 e0       	ldi	r30, 0x00	; 0
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	10 aa       	std	Z+48, r1	; 0x30
     650:	80 e4       	ldi	r24, 0x40	; 64
     652:	80 ab       	std	Z+48, r24	; 0x30
     654:	94 e0       	ldi	r25, 0x04	; 4
     656:	90 ab       	std	Z+48, r25	; 0x30
     658:	11 aa       	std	Z+49, r1	; 0x31
     65a:	12 aa       	std	Z+50, r1	; 0x32
     65c:	5b e4       	ldi	r21, 0x4B	; 75
     65e:	53 ab       	std	Z+51, r21	; 0x33
     660:	14 aa       	std	Z+52, r1	; 0x34
     662:	15 aa       	std	Z+53, r1	; 0x35
     664:	16 aa       	std	Z+54, r1	; 0x36
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	30 e2       	ldi	r19, 0x20	; 32
     66a:	20 af       	std	Z+56, r18	; 0x38
     66c:	31 af       	std	Z+57, r19	; 0x39
     66e:	12 ae       	std	Z+58, r1	; 0x3a
     670:	40 ea       	ldi	r20, 0xA0	; 160
     672:	44 af       	std	Z+60, r20	; 0x3c
     674:	38 e0       	ldi	r19, 0x08	; 8
     676:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     67a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     67e:	80 a9       	ldd	r24, Z+48	; 0x30
     680:	80 6a       	ori	r24, 0xA0	; 160
     682:	80 ab       	std	Z+48, r24	; 0x30
     684:	85 e5       	ldi	r24, 0x55	; 85
     686:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     68a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     68e:	a0 e4       	ldi	r26, 0x40	; 64
     690:	b1 e0       	ldi	r27, 0x01	; 1
     692:	d4 e2       	ldi	r29, 0x24	; 36
     694:	dc 93       	st	X, r29
     696:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     69a:	89 e5       	ldi	r24, 0x59	; 89
     69c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     6a0:	c2 e0       	ldi	r28, 0x02	; 2
     6a2:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     6a6:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     6aa:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     6ae:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     6b2:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     6b6:	67 e7       	ldi	r22, 0x77	; 119
     6b8:	74 e2       	ldi	r23, 0x24	; 36
     6ba:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     6be:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     6c2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     6c6:	8b e3       	ldi	r24, 0x3B	; 59
     6c8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     6d2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     6d6:	2c 91       	ld	r18, X
     6d8:	20 68       	ori	r18, 0x80	; 128
     6da:	2c 93       	st	X, r18
     6dc:	90 8b       	std	Z+16, r25	; 0x10
     6de:	81 8b       	std	Z+17, r24	; 0x11
     6e0:	a1 e9       	ldi	r26, 0x91	; 145
     6e2:	a2 8b       	std	Z+18, r26	; 0x12
     6e4:	20 e1       	ldi	r18, 0x10	; 16
     6e6:	23 8b       	std	Z+19, r18	; 0x13
     6e8:	67 e7       	ldi	r22, 0x77	; 119
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	64 8b       	std	Z+20, r22	; 0x14
     6ee:	75 8b       	std	Z+21, r23	; 0x15
     6f0:	d0 8f       	std	Z+24, r29	; 0x18
     6f2:	c1 8f       	std	Z+25, r28	; 0x19
     6f4:	12 8e       	std	Z+26, r1	; 0x1a
     6f6:	c8 e7       	ldi	r28, 0x78	; 120
     6f8:	d6 e2       	ldi	r29, 0x26	; 38
     6fa:	c4 8f       	std	Z+28, r28	; 0x1c
     6fc:	d5 8f       	std	Z+29, r29	; 0x1d
     6fe:	16 8e       	std	Z+30, r1	; 0x1e
     700:	20 89       	ldd	r18, Z+16	; 0x10
     702:	20 68       	ori	r18, 0x80	; 128
     704:	20 8b       	std	Z+16, r18	; 0x10
     706:	90 a3       	std	Z+32, r25	; 0x20
     708:	81 a3       	std	Z+33, r24	; 0x21
     70a:	a2 a3       	std	Z+34, r26	; 0x22
     70c:	53 a3       	std	Z+35, r21	; 0x23
     70e:	64 a3       	std	Z+36, r22	; 0x24
     710:	75 a3       	std	Z+37, r23	; 0x25
     712:	40 a7       	std	Z+40, r20	; 0x28
     714:	31 a7       	std	Z+41, r19	; 0x29
     716:	12 a6       	std	Z+42, r1	; 0x2a
     718:	8f ee       	ldi	r24, 0xEF	; 239
     71a:	97 e2       	ldi	r25, 0x27	; 39
     71c:	84 a7       	std	Z+44, r24	; 0x2c
     71e:	95 a7       	std	Z+45, r25	; 0x2d
     720:	16 a6       	std	Z+46, r1	; 0x2e
     722:	80 a1       	ldd	r24, Z+32	; 0x20
     724:	80 68       	ori	r24, 0x80	; 128
     726:	80 a3       	std	Z+32, r24	; 0x20
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <tiny_dma_set_mode_2>:
     72e:	cf 93       	push	r28
     730:	f8 94       	cli
     732:	c2 e0       	ldi	r28, 0x02	; 2
     734:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     738:	f8 de       	rcall	.-528    	; 0x52a <tiny_dma_flush>
     73a:	e0 e0       	ldi	r30, 0x00	; 0
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	16 aa       	std	Z+54, r1	; 0x36
     740:	94 e2       	ldi	r25, 0x24	; 36
     742:	90 ab       	std	Z+48, r25	; 0x30
     744:	11 aa       	std	Z+49, r1	; 0x31
     746:	39 e5       	ldi	r19, 0x59	; 89
     748:	32 ab       	std	Z+50, r19	; 0x32
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	83 ab       	std	Z+51, r24	; 0x33
     74e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     752:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     756:	44 ab       	std	Z+52, r20	; 0x34
     758:	55 ab       	std	Z+53, r21	; 0x35
     75a:	44 e6       	ldi	r20, 0x64	; 100
     75c:	52 e2       	ldi	r21, 0x22	; 34
     75e:	40 af       	std	Z+56, r20	; 0x38
     760:	51 af       	std	Z+57, r21	; 0x39
     762:	12 ae       	std	Z+58, r1	; 0x3a
     764:	29 e3       	ldi	r18, 0x39	; 57
     766:	24 af       	std	Z+60, r18	; 0x3c
     768:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     76c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     770:	20 a9       	ldd	r18, Z+48	; 0x30
     772:	20 68       	ori	r18, 0x80	; 128
     774:	20 ab       	std	Z+48, r18	; 0x30
     776:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     77a:	a0 e4       	ldi	r26, 0x40	; 64
     77c:	b1 e0       	ldi	r27, 0x01	; 1
     77e:	9c 93       	st	X, r25
     780:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     784:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     788:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     78c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     790:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     794:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     798:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     79c:	27 e7       	ldi	r18, 0x77	; 119
     79e:	34 e2       	ldi	r19, 0x24	; 36
     7a0:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     7a4:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     7a8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     7ac:	2b e3       	ldi	r18, 0x3B	; 59
     7ae:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     7b2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     7b6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     7ba:	2c 91       	ld	r18, X
     7bc:	20 68       	ori	r18, 0x80	; 128
     7be:	2c 93       	st	X, r18
     7c0:	54 e0       	ldi	r21, 0x04	; 4
     7c2:	50 8b       	std	Z+16, r21	; 0x10
     7c4:	81 8b       	std	Z+17, r24	; 0x11
     7c6:	41 e9       	ldi	r20, 0x91	; 145
     7c8:	42 8b       	std	Z+18, r20	; 0x12
     7ca:	c3 8b       	std	Z+19, r28	; 0x13
     7cc:	27 e7       	ldi	r18, 0x77	; 119
     7ce:	31 e0       	ldi	r19, 0x01	; 1
     7d0:	24 8b       	std	Z+20, r18	; 0x14
     7d2:	35 8b       	std	Z+21, r19	; 0x15
     7d4:	90 8f       	std	Z+24, r25	; 0x18
     7d6:	c1 8f       	std	Z+25, r28	; 0x19
     7d8:	12 8e       	std	Z+26, r1	; 0x1a
     7da:	68 e7       	ldi	r22, 0x78	; 120
     7dc:	76 e2       	ldi	r23, 0x26	; 38
     7de:	64 8f       	std	Z+28, r22	; 0x1c
     7e0:	75 8f       	std	Z+29, r23	; 0x1d
     7e2:	16 8e       	std	Z+30, r1	; 0x1e
     7e4:	50 a3       	std	Z+32, r21	; 0x20
     7e6:	81 a3       	std	Z+33, r24	; 0x21
     7e8:	42 a3       	std	Z+34, r20	; 0x22
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	83 a3       	std	Z+35, r24	; 0x23
     7ee:	24 a3       	std	Z+36, r18	; 0x24
     7f0:	35 a3       	std	Z+37, r19	; 0x25
     7f2:	84 e3       	ldi	r24, 0x34	; 52
     7f4:	80 a7       	std	Z+40, r24	; 0x28
     7f6:	c1 a7       	std	Z+41, r28	; 0x29
     7f8:	12 a6       	std	Z+42, r1	; 0x2a
     7fa:	8f ee       	ldi	r24, 0xEF	; 239
     7fc:	97 e2       	ldi	r25, 0x27	; 39
     7fe:	84 a7       	std	Z+44, r24	; 0x2c
     800:	95 a7       	std	Z+45, r25	; 0x2d
     802:	16 a6       	std	Z+46, r1	; 0x2e
     804:	80 89       	ldd	r24, Z+16	; 0x10
     806:	80 68       	ori	r24, 0x80	; 128
     808:	80 8b       	std	Z+16, r24	; 0x10
     80a:	00 c0       	rjmp	.+0      	; 0x80c <tiny_dma_set_mode_2+0xde>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <tiny_dma_set_mode_2+0xe0>
     80e:	00 00       	nop
     810:	80 a1       	ldd	r24, Z+32	; 0x20
     812:	80 68       	ori	r24, 0x80	; 128
     814:	80 a3       	std	Z+32, r24	; 0x20
     816:	78 94       	sei
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <tiny_dma_set_mode_3>:
     81c:	cf 93       	push	r28
     81e:	c3 e0       	ldi	r28, 0x03	; 3
     820:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     824:	82 de       	rcall	.-764    	; 0x52a <tiny_dma_flush>
     826:	e0 e0       	ldi	r30, 0x00	; 0
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	10 a2       	std	Z+32, r1	; 0x20
     82c:	50 e4       	ldi	r21, 0x40	; 64
     82e:	50 a3       	std	Z+32, r21	; 0x20
     830:	44 e0       	ldi	r20, 0x04	; 4
     832:	40 a3       	std	Z+32, r20	; 0x20
     834:	11 a2       	std	Z+33, r1	; 0x21
     836:	12 a2       	std	Z+34, r1	; 0x22
     838:	3b e4       	ldi	r19, 0x4B	; 75
     83a:	33 a3       	std	Z+35, r19	; 0x23
     83c:	14 a2       	std	Z+36, r1	; 0x24
     83e:	15 a2       	std	Z+37, r1	; 0x25
     840:	16 a2       	std	Z+38, r1	; 0x26
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e2       	ldi	r25, 0x20	; 32
     846:	80 a7       	std	Z+40, r24	; 0x28
     848:	91 a7       	std	Z+41, r25	; 0x29
     84a:	12 a6       	std	Z+42, r1	; 0x2a
     84c:	20 ea       	ldi	r18, 0xA0	; 160
     84e:	24 a7       	std	Z+44, r18	; 0x2c
     850:	98 e0       	ldi	r25, 0x08	; 8
     852:	95 a7       	std	Z+45, r25	; 0x2d
     854:	16 a6       	std	Z+46, r1	; 0x2e
     856:	80 a1       	ldd	r24, Z+32	; 0x20
     858:	80 6a       	ori	r24, 0xA0	; 160
     85a:	80 a3       	std	Z+32, r24	; 0x20
     85c:	85 e5       	ldi	r24, 0x55	; 85
     85e:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     862:	16 aa       	std	Z+54, r1	; 0x36
     864:	74 e2       	ldi	r23, 0x24	; 36
     866:	70 ab       	std	Z+48, r23	; 0x30
     868:	11 aa       	std	Z+49, r1	; 0x31
     86a:	69 e5       	ldi	r22, 0x59	; 89
     86c:	62 ab       	std	Z+50, r22	; 0x32
     86e:	c3 ab       	std	Z+51, r28	; 0x33
     870:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <dacBuf_len>
     874:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <dacBuf_len+0x1>
     878:	a4 ab       	std	Z+52, r26	; 0x34
     87a:	b5 ab       	std	Z+53, r27	; 0x35
     87c:	a4 e6       	ldi	r26, 0x64	; 100
     87e:	b2 e2       	ldi	r27, 0x22	; 34
     880:	a0 af       	std	Z+56, r26	; 0x38
     882:	b1 af       	std	Z+57, r27	; 0x39
     884:	12 ae       	std	Z+58, r1	; 0x3a
     886:	89 e3       	ldi	r24, 0x39	; 57
     888:	84 af       	std	Z+60, r24	; 0x3c
     88a:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     88e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     892:	80 a9       	ldd	r24, Z+48	; 0x30
     894:	80 68       	ori	r24, 0x80	; 128
     896:	80 ab       	std	Z+48, r24	; 0x30
     898:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     89c:	a0 e4       	ldi	r26, 0x40	; 64
     89e:	b1 e0       	ldi	r27, 0x01	; 1
     8a0:	7c 93       	st	X, r23
     8a2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8a6:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     8b0:	60 91 02 20 	lds	r22, 0x2002	; 0x802002 <auxDacBufLen>
     8b4:	70 91 03 20 	lds	r23, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     8b8:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     8bc:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     8c0:	67 e7       	ldi	r22, 0x77	; 119
     8c2:	74 e2       	ldi	r23, 0x24	; 36
     8c4:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     8c8:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     8cc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8d0:	8b e3       	ldi	r24, 0x3B	; 59
     8d2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     8d6:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     8da:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     8de:	8c 91       	ld	r24, X
     8e0:	80 68       	ori	r24, 0x80	; 128
     8e2:	8c 93       	st	X, r24
     8e4:	10 8a       	std	Z+16, r1	; 0x10
     8e6:	50 8b       	std	Z+16, r21	; 0x10
     8e8:	40 8b       	std	Z+16, r20	; 0x10
     8ea:	c1 8b       	std	Z+17, r28	; 0x11
     8ec:	81 e9       	ldi	r24, 0x91	; 145
     8ee:	82 8b       	std	Z+18, r24	; 0x12
     8f0:	33 8b       	std	Z+19, r19	; 0x13
     8f2:	47 e7       	ldi	r20, 0x77	; 119
     8f4:	51 e0       	ldi	r21, 0x01	; 1
     8f6:	44 8b       	std	Z+20, r20	; 0x14
     8f8:	55 8b       	std	Z+21, r21	; 0x15
     8fa:	20 8f       	std	Z+24, r18	; 0x18
     8fc:	91 8f       	std	Z+25, r25	; 0x19
     8fe:	12 8e       	std	Z+26, r1	; 0x1a
     900:	88 e7       	ldi	r24, 0x78	; 120
     902:	96 e2       	ldi	r25, 0x26	; 38
     904:	84 8f       	std	Z+28, r24	; 0x1c
     906:	95 8f       	std	Z+29, r25	; 0x1d
     908:	16 8e       	std	Z+30, r1	; 0x1e
     90a:	80 89       	ldd	r24, Z+16	; 0x10
     90c:	80 68       	ori	r24, 0x80	; 128
     90e:	80 8b       	std	Z+16, r24	; 0x10
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <tiny_dma_set_mode_4>:
     914:	cf 93       	push	r28
     916:	c4 e0       	ldi	r28, 0x04	; 4
     918:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     91c:	06 de       	rcall	.-1012   	; 0x52a <tiny_dma_flush>
     91e:	e0 e0       	ldi	r30, 0x00	; 0
     920:	f1 e0       	ldi	r31, 0x01	; 1
     922:	10 a2       	std	Z+32, r1	; 0x20
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	80 a3       	std	Z+32, r24	; 0x20
     928:	c0 a3       	std	Z+32, r28	; 0x20
     92a:	11 a2       	std	Z+33, r1	; 0x21
     92c:	12 a2       	std	Z+34, r1	; 0x22
     92e:	4b e4       	ldi	r20, 0x4B	; 75
     930:	43 a3       	std	Z+35, r20	; 0x23
     932:	14 a2       	std	Z+36, r1	; 0x24
     934:	15 a2       	std	Z+37, r1	; 0x25
     936:	16 a2       	std	Z+38, r1	; 0x26
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e2       	ldi	r25, 0x20	; 32
     93c:	80 a7       	std	Z+40, r24	; 0x28
     93e:	91 a7       	std	Z+41, r25	; 0x29
     940:	12 a6       	std	Z+42, r1	; 0x2a
     942:	60 ea       	ldi	r22, 0xA0	; 160
     944:	64 a7       	std	Z+44, r22	; 0x2c
     946:	88 e0       	ldi	r24, 0x08	; 8
     948:	85 a7       	std	Z+45, r24	; 0x2d
     94a:	16 a6       	std	Z+46, r1	; 0x2e
     94c:	90 a1       	ldd	r25, Z+32	; 0x20
     94e:	90 6a       	ori	r25, 0xA0	; 160
     950:	90 a3       	std	Z+32, r25	; 0x20
     952:	95 e5       	ldi	r25, 0x55	; 85
     954:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     958:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     95c:	a0 e4       	ldi	r26, 0x40	; 64
     95e:	b1 e0       	ldi	r27, 0x01	; 1
     960:	94 e2       	ldi	r25, 0x24	; 36
     962:	9c 93       	st	X, r25
     964:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     968:	99 e5       	ldi	r25, 0x59	; 89
     96a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     974:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
     978:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     97c:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     980:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     984:	27 e7       	ldi	r18, 0x77	; 119
     986:	34 e2       	ldi	r19, 0x24	; 36
     988:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     98c:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     990:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     994:	9b e3       	ldi	r25, 0x3B	; 59
     996:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     9a0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     9a4:	2c 91       	ld	r18, X
     9a6:	20 68       	ori	r18, 0x80	; 128
     9a8:	2c 93       	st	X, r18
     9aa:	c0 8b       	std	Z+16, r28	; 0x10
     9ac:	91 8b       	std	Z+17, r25	; 0x11
     9ae:	31 e9       	ldi	r19, 0x91	; 145
     9b0:	32 8b       	std	Z+18, r19	; 0x12
     9b2:	43 8b       	std	Z+19, r20	; 0x13
     9b4:	47 e7       	ldi	r20, 0x77	; 119
     9b6:	51 e0       	ldi	r21, 0x01	; 1
     9b8:	44 8b       	std	Z+20, r20	; 0x14
     9ba:	55 8b       	std	Z+21, r21	; 0x15
     9bc:	60 8f       	std	Z+24, r22	; 0x18
     9be:	81 8f       	std	Z+25, r24	; 0x19
     9c0:	12 8e       	std	Z+26, r1	; 0x1a
     9c2:	68 e7       	ldi	r22, 0x78	; 120
     9c4:	76 e2       	ldi	r23, 0x26	; 38
     9c6:	64 8f       	std	Z+28, r22	; 0x1c
     9c8:	75 8f       	std	Z+29, r23	; 0x1d
     9ca:	16 8e       	std	Z+30, r1	; 0x1e
     9cc:	20 89       	ldd	r18, Z+16	; 0x10
     9ce:	20 68       	ori	r18, 0x80	; 128
     9d0:	20 8b       	std	Z+16, r18	; 0x10
     9d2:	c0 ab       	std	Z+48, r28	; 0x30
     9d4:	91 ab       	std	Z+49, r25	; 0x31
     9d6:	32 ab       	std	Z+50, r19	; 0x32
     9d8:	9a e4       	ldi	r25, 0x4A	; 74
     9da:	93 ab       	std	Z+51, r25	; 0x33
     9dc:	44 ab       	std	Z+52, r20	; 0x34
     9de:	55 ab       	std	Z+53, r21	; 0x35
     9e0:	93 ec       	ldi	r25, 0xC3	; 195
     9e2:	90 af       	std	Z+56, r25	; 0x38
     9e4:	81 af       	std	Z+57, r24	; 0x39
     9e6:	12 ae       	std	Z+58, r1	; 0x3a
     9e8:	8f ee       	ldi	r24, 0xEF	; 239
     9ea:	97 e2       	ldi	r25, 0x27	; 39
     9ec:	84 af       	std	Z+60, r24	; 0x3c
     9ee:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     9f2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     9f6:	80 a9       	ldd	r24, Z+48	; 0x30
     9f8:	80 68       	ori	r24, 0x80	; 128
     9fa:	80 ab       	std	Z+48, r24	; 0x30
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <tiny_dma_set_mode_5>:
     a00:	85 e0       	ldi	r24, 0x05	; 5
     a02:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     a06:	91 dd       	rcall	.-1246   	; 0x52a <tiny_dma_flush>
     a08:	e0 e0       	ldi	r30, 0x00	; 0
     a0a:	f1 e0       	ldi	r31, 0x01	; 1
     a0c:	16 aa       	std	Z+54, r1	; 0x36
     a0e:	34 e2       	ldi	r19, 0x24	; 36
     a10:	30 ab       	std	Z+48, r19	; 0x30
     a12:	11 aa       	std	Z+49, r1	; 0x31
     a14:	29 e5       	ldi	r18, 0x59	; 89
     a16:	22 ab       	std	Z+50, r18	; 0x32
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	83 ab       	std	Z+51, r24	; 0x33
     a1c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     a20:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     a24:	44 ab       	std	Z+52, r20	; 0x34
     a26:	55 ab       	std	Z+53, r21	; 0x35
     a28:	44 e6       	ldi	r20, 0x64	; 100
     a2a:	52 e2       	ldi	r21, 0x22	; 34
     a2c:	40 af       	std	Z+56, r20	; 0x38
     a2e:	51 af       	std	Z+57, r21	; 0x39
     a30:	12 ae       	std	Z+58, r1	; 0x3a
     a32:	99 e3       	ldi	r25, 0x39	; 57
     a34:	94 af       	std	Z+60, r25	; 0x3c
     a36:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     a3a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     a3e:	90 a9       	ldd	r25, Z+48	; 0x30
     a40:	90 68       	ori	r25, 0x80	; 128
     a42:	90 ab       	std	Z+48, r25	; 0x30
     a44:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     a48:	e0 e4       	ldi	r30, 0x40	; 64
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	30 83       	st	Z, r19
     a4e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     a52:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     a56:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     a5a:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
     a5e:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
     a62:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     a66:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     a6a:	27 e7       	ldi	r18, 0x77	; 119
     a6c:	34 e2       	ldi	r19, 0x24	; 36
     a6e:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     a72:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     a76:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     a7a:	9b e3       	ldi	r25, 0x3B	; 59
     a7c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     a80:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     a84:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     a88:	80 81       	ld	r24, Z
     a8a:	80 68       	ori	r24, 0x80	; 128
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret

00000a90 <tiny_dma_set_mode_6>:
     a90:	86 e0       	ldi	r24, 0x06	; 6
     a92:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     a96:	49 dd       	rcall	.-1390   	; 0x52a <tiny_dma_flush>
     a98:	e0 e0       	ldi	r30, 0x00	; 0
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	16 aa       	std	Z+54, r1	; 0x36
     a9e:	94 e2       	ldi	r25, 0x24	; 36
     aa0:	90 ab       	std	Z+48, r25	; 0x30
     aa2:	11 aa       	std	Z+49, r1	; 0x31
     aa4:	39 e5       	ldi	r19, 0x59	; 89
     aa6:	32 ab       	std	Z+50, r19	; 0x32
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	83 ab       	std	Z+51, r24	; 0x33
     aac:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     ab0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     ab4:	44 ab       	std	Z+52, r20	; 0x34
     ab6:	55 ab       	std	Z+53, r21	; 0x35
     ab8:	44 e6       	ldi	r20, 0x64	; 100
     aba:	52 e2       	ldi	r21, 0x22	; 34
     abc:	40 af       	std	Z+56, r20	; 0x38
     abe:	51 af       	std	Z+57, r21	; 0x39
     ac0:	12 ae       	std	Z+58, r1	; 0x3a
     ac2:	29 e3       	ldi	r18, 0x39	; 57
     ac4:	24 af       	std	Z+60, r18	; 0x3c
     ac6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     aca:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     ace:	20 a9       	ldd	r18, Z+48	; 0x30
     ad0:	20 68       	ori	r18, 0x80	; 128
     ad2:	20 ab       	std	Z+48, r18	; 0x30
     ad4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     ad8:	a0 e4       	ldi	r26, 0x40	; 64
     ada:	b1 e0       	ldi	r27, 0x01	; 1
     adc:	9c 93       	st	X, r25
     ade:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ae2:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     ae6:	32 e0       	ldi	r19, 0x02	; 2
     ae8:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     aec:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     af0:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     af4:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     af8:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     afc:	47 e7       	ldi	r20, 0x77	; 119
     afe:	54 e2       	ldi	r21, 0x24	; 36
     b00:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b04:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b08:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b0c:	2b e3       	ldi	r18, 0x3B	; 59
     b0e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b12:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b16:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     b1a:	2c 91       	ld	r18, X
     b1c:	20 68       	ori	r18, 0x80	; 128
     b1e:	2c 93       	st	X, r18
     b20:	10 8a       	std	Z+16, r1	; 0x10
     b22:	20 e4       	ldi	r18, 0x40	; 64
     b24:	20 8b       	std	Z+16, r18	; 0x10
     b26:	24 e0       	ldi	r18, 0x04	; 4
     b28:	20 8b       	std	Z+16, r18	; 0x10
     b2a:	81 8b       	std	Z+17, r24	; 0x11
     b2c:	81 e9       	ldi	r24, 0x91	; 145
     b2e:	82 8b       	std	Z+18, r24	; 0x12
     b30:	80 e1       	ldi	r24, 0x10	; 16
     b32:	83 8b       	std	Z+19, r24	; 0x13
     b34:	4e ee       	ldi	r20, 0xEE	; 238
     b36:	52 e0       	ldi	r21, 0x02	; 2
     b38:	44 8b       	std	Z+20, r20	; 0x14
     b3a:	55 8b       	std	Z+21, r21	; 0x15
     b3c:	90 8f       	std	Z+24, r25	; 0x18
     b3e:	31 8f       	std	Z+25, r19	; 0x19
     b40:	12 8e       	std	Z+26, r1	; 0x1a
     b42:	88 e7       	ldi	r24, 0x78	; 120
     b44:	96 e2       	ldi	r25, 0x26	; 38
     b46:	84 8f       	std	Z+28, r24	; 0x1c
     b48:	95 8f       	std	Z+29, r25	; 0x1d
     b4a:	16 8e       	std	Z+30, r1	; 0x1e
     b4c:	80 89       	ldd	r24, Z+16	; 0x10
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	80 8b       	std	Z+16, r24	; 0x10
     b52:	08 95       	ret

00000b54 <tiny_dma_set_mode_7>:
     b54:	87 e0       	ldi	r24, 0x07	; 7
     b56:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     b5a:	e7 dc       	rcall	.-1586   	; 0x52a <tiny_dma_flush>
     b5c:	e0 e0       	ldi	r30, 0x00	; 0
     b5e:	f1 e0       	ldi	r31, 0x01	; 1
     b60:	16 aa       	std	Z+54, r1	; 0x36
     b62:	94 e2       	ldi	r25, 0x24	; 36
     b64:	90 ab       	std	Z+48, r25	; 0x30
     b66:	11 aa       	std	Z+49, r1	; 0x31
     b68:	39 e5       	ldi	r19, 0x59	; 89
     b6a:	32 ab       	std	Z+50, r19	; 0x32
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	83 ab       	std	Z+51, r24	; 0x33
     b70:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <dacBuf_len>
     b74:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <dacBuf_len+0x1>
     b78:	44 ab       	std	Z+52, r20	; 0x34
     b7a:	55 ab       	std	Z+53, r21	; 0x35
     b7c:	44 e6       	ldi	r20, 0x64	; 100
     b7e:	52 e2       	ldi	r21, 0x22	; 34
     b80:	40 af       	std	Z+56, r20	; 0x38
     b82:	51 af       	std	Z+57, r21	; 0x39
     b84:	12 ae       	std	Z+58, r1	; 0x3a
     b86:	29 e3       	ldi	r18, 0x39	; 57
     b88:	24 af       	std	Z+60, r18	; 0x3c
     b8a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__TEXT_REGION_LENGTH__+0x70013d>
     b8e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__TEXT_REGION_LENGTH__+0x70013e>
     b92:	20 a9       	ldd	r18, Z+48	; 0x30
     b94:	20 68       	ori	r18, 0x80	; 128
     b96:	20 ab       	std	Z+48, r18	; 0x30
     b98:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x700146>
     b9c:	a0 e4       	ldi	r26, 0x40	; 64
     b9e:	b1 e0       	ldi	r27, 0x01	; 1
     ba0:	9c 93       	st	X, r25
     ba2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ba6:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     baa:	32 e0       	ldi	r19, 0x02	; 2
     bac:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bb0:	40 91 02 20 	lds	r20, 0x2002	; 0x802002 <auxDacBufLen>
     bb4:	50 91 03 20 	lds	r21, 0x2003	; 0x802003 <auxDacBufLen+0x1>
     bb8:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x700144>
     bbc:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x700145>
     bc0:	47 e7       	ldi	r20, 0x77	; 119
     bc2:	54 e2       	ldi	r21, 0x24	; 36
     bc4:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     bc8:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     bcc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bd0:	2b e3       	ldi	r18, 0x3B	; 59
     bd2:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bd6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     bda:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x70014e>
     bde:	2c 91       	ld	r18, X
     be0:	20 68       	ori	r18, 0x80	; 128
     be2:	2c 93       	st	X, r18
     be4:	10 8a       	std	Z+16, r1	; 0x10
     be6:	20 e4       	ldi	r18, 0x40	; 64
     be8:	20 8b       	std	Z+16, r18	; 0x10
     bea:	25 e0       	ldi	r18, 0x05	; 5
     bec:	20 8b       	std	Z+16, r18	; 0x10
     bee:	81 8b       	std	Z+17, r24	; 0x11
     bf0:	81 e9       	ldi	r24, 0x91	; 145
     bf2:	82 8b       	std	Z+18, r24	; 0x12
     bf4:	80 e1       	ldi	r24, 0x10	; 16
     bf6:	83 8b       	std	Z+19, r24	; 0x13
     bf8:	4e ee       	ldi	r20, 0xEE	; 238
     bfa:	52 e0       	ldi	r21, 0x02	; 2
     bfc:	44 8b       	std	Z+20, r20	; 0x14
     bfe:	55 8b       	std	Z+21, r21	; 0x15
     c00:	90 8f       	std	Z+24, r25	; 0x18
     c02:	31 8f       	std	Z+25, r19	; 0x19
     c04:	12 8e       	std	Z+26, r1	; 0x1a
     c06:	88 e7       	ldi	r24, 0x78	; 120
     c08:	96 e2       	ldi	r25, 0x26	; 38
     c0a:	84 8f       	std	Z+28, r24	; 0x1c
     c0c:	95 8f       	std	Z+29, r25	; 0x1d
     c0e:	16 8e       	std	Z+30, r1	; 0x1e
     c10:	80 89       	ldd	r24, Z+16	; 0x10
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	80 8b       	std	Z+16, r24	; 0x10
     c16:	08 95       	ret

00000c18 <__vector_6>:
}

ISR(DMA_CH0_vect){
     c18:	1f 92       	push	r1
     c1a:	0f 92       	push	r0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	0f 92       	push	r0
     c20:	11 24       	eor	r1, r1
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	ef 93       	push	r30
     c28:	ff 93       	push	r31
		DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     c2a:	87 e7       	ldi	r24, 0x77	; 119
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
     c32:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
		if(b1_state){
     c36:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <b1_state>
     c3a:	88 23       	and	r24, r24
     c3c:	49 f0       	breq	.+18     	; 0xc50 <__vector_6+0x38>
			DMA.CH0.DESTADDR0 = precalc_DMA_CH0_DESTADDR0_b1_state_equals_1;
     c3e:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_1>
     c42:	e0 e0       	ldi	r30, 0x00	; 0
     c44:	f1 e0       	ldi	r31, 0x01	; 1
     c46:	84 8f       	std	Z+28, r24	; 0x1c
			DMA.CH0.DESTADDR1 = precalc_DMA_CH0_DESTADDR1_b1_state_equals_1;
     c48:	80 91 60 22 	lds	r24, 0x2260	; 0x802260 <precalc_DMA_CH0_DESTADDR1_b1_state_equals_1>
     c4c:	85 8f       	std	Z+29, r24	; 0x1d
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <__vector_6+0x48>
		} else {
			DMA.CH0.DESTADDR0 = precalc_DMA_CH0_DESTADDR0_b1_state_equals_0;
     c50:	80 91 75 24 	lds	r24, 0x2475	; 0x802475 <precalc_DMA_CH0_DESTADDR0_b1_state_equals_0>
     c54:	e0 e0       	ldi	r30, 0x00	; 0
     c56:	f1 e0       	ldi	r31, 0x01	; 1
     c58:	84 8f       	std	Z+28, r24	; 0x1c
			DMA.CH0.DESTADDR1 = precalc_DMA_CH0_DESTADDR1_b1_state_equals_0;
     c5a:	80 91 61 22 	lds	r24, 0x2261	; 0x802261 <precalc_DMA_CH0_DESTADDR1_b1_state_equals_0>
     c5e:	85 8f       	std	Z+29, r24	; 0x1d
	...
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");

		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     c7c:	e0 e0       	ldi	r30, 0x00	; 0
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	80 89       	ldd	r24, Z+16	; 0x10
     c82:	80 68       	ori	r24, 0x80	; 128
     c84:	80 8b       	std	Z+16, r24	; 0x10
		EVSYS.STROBE=0x02;
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__TEXT_REGION_LENGTH__+0x700190>

		b1_state = !b1_state;
     c8c:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <b1_state>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	91 11       	cpse	r25, r1
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <b1_state>
		DMA.INTFLAGS = 0x01;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
			default:
			////////////////////////////////////////
			break;
		}
		*/
}
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_7>:

ISR(DMA_CH1_vect){
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
		DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     cc4:	87 e7       	ldi	r24, 0x77	; 119
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     ccc:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
		
		if(b2_state){
     cd0:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <b2_state>
     cd4:	88 23       	and	r24, r24
     cd6:	49 f0       	breq	.+18     	; 0xcea <__vector_7+0x38>
			DMA.CH1.DESTADDR0 = precalc_DMA_CH1_DESTADDR0_b2_state_equals_1;
     cd8:	80 91 54 2c 	lds	r24, 0x2C54	; 0x802c54 <precalc_DMA_CH1_DESTADDR0_b2_state_equals_1>
     cdc:	e0 e0       	ldi	r30, 0x00	; 0
     cde:	f1 e0       	ldi	r31, 0x01	; 1
     ce0:	84 a7       	std	Z+44, r24	; 0x2c
			DMA.CH1.DESTADDR1 = precalc_DMA_CH1_DESTADDR1_b2_state_equals_1;
     ce2:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <precalc_DMA_CH1_DESTADDR1_b2_state_equals_1>
     ce6:	85 a7       	std	Z+45, r24	; 0x2d
     ce8:	08 c0       	rjmp	.+16     	; 0xcfa <__vector_7+0x48>
			} else {
			DMA.CH1.DESTADDR0 = precalc_DMA_CH1_DESTADDR0_b2_state_equals_0;
     cea:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <precalc_DMA_CH1_DESTADDR0_b2_state_equals_0>
     cee:	e0 e0       	ldi	r30, 0x00	; 0
     cf0:	f1 e0       	ldi	r31, 0x01	; 1
     cf2:	84 a7       	std	Z+44, r24	; 0x2c
			DMA.CH1.DESTADDR1 = precalc_DMA_CH1_DESTADDR1_b2_state_equals_0;
     cf4:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <precalc_DMA_CH1_DESTADDR1_b2_state_equals_0>
     cf8:	85 a7       	std	Z+45, r24	; 0x2d
		}
		//Must enable last for REPCNT won't work!
		asm("nop");
     cfa:	00 00       	nop
		asm("nop");
     cfc:	00 00       	nop


		DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     cfe:	e0 e0       	ldi	r30, 0x00	; 0
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	80 a1       	ldd	r24, Z+32	; 0x20
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	80 a3       	std	Z+32, r24	; 0x20
		EVSYS.STROBE = 0x01;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__TEXT_REGION_LENGTH__+0x700190>
		b2_state = !b2_state;
     d0e:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <b2_state>
     d12:	91 11       	cpse	r25, r1
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <b2_state>
		DMA.INTFLAGS = 0x02;
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
			default:
			////////////////////////////////////////
			break;
		}
		*/
}
     d20:	ff 91       	pop	r31
     d22:	ef 91       	pop	r30
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_8>:
ISR(DMA_CH2_vect){
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	b2_state = !b2_state;*/
}
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <__vector_9>:

ISR(DMA_CH3_vect){
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	b2_state = !b2_state;*/
}
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	0f 90       	pop	r0
     d56:	1f 90       	pop	r1
     d58:	18 95       	reti

00000d5a <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     d5a:	e0 e7       	ldi	r30, 0x70	; 112
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	83 81       	ldd	r24, Z+3	; 0x03
     d60:	8c 7f       	andi	r24, 0xFC	; 252
     d62:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     d64:	84 81       	ldd	r24, Z+4	; 0x04
     d66:	8c 7f       	andi	r24, 0xFC	; 252
     d68:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     d6a:	80 81       	ld	r24, Z
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     d70:	e0 e8       	ldi	r30, 0x80	; 128
     d72:	f1 e0       	ldi	r31, 0x01	; 1
     d74:	80 ec       	ldi	r24, 0xC0	; 192
     d76:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     d78:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = EVSYS_CHMUX_ADCA_CH0_gc;
     d7a:	80 e2       	ldi	r24, 0x20	; 32
     d7c:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     d7e:	11 86       	std	Z+9, r1	; 0x09
		
		EVSYS.CH0MUX = EVSYS_CHMUX_ADCA_CH2_gc;
     d80:	82 e2       	ldi	r24, 0x22	; 34
     d82:	80 83       	st	Z, r24
		EVSYS.CH0CTRL = 0x00; //No filtering or Quadrature stuff
     d84:	10 86       	std	Z+8, r1	; 0x08

			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b8 e0       	ldi	r27, 0x08	; 8
     d8a:	34 e0       	ldi	r19, 0x04	; 4
     d8c:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     d8e:	23 e0       	ldi	r18, 0x03	; 3
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	2c 93       	st	X, r18
     d94:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     d96:	14 96       	adiw	r26, 0x04	; 4
     d98:	1c 92       	st	X, r1
     d9a:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
     d9c:	85 ed       	ldi	r24, 0xD5	; 213
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	96 96       	adiw	r26, 0x26	; 38
     da2:	8d 93       	st	X+, r24
     da4:	9c 93       	st	X, r25
     da6:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
     da8:	16 96       	adiw	r26, 0x06	; 6
     daa:	1c 92       	st	X, r1
     dac:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     dae:	e0 e4       	ldi	r30, 0x40	; 64
     db0:	f8 e0       	ldi	r31, 0x08	; 8
     db2:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     db4:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     db6:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     db8:	86 a3       	std	Z+38, r24	; 0x26
     dba:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     dbc:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     dbe:	e0 e6       	ldi	r30, 0x60	; 96
     dc0:	f6 e0       	ldi	r31, 0x06	; 6
     dc2:	80 81       	ld	r24, Z
     dc4:	80 61       	ori	r24, 0x10	; 16
     dc6:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     dc8:	e0 e4       	ldi	r30, 0x40	; 64
     dca:	f9 e0       	ldi	r31, 0x09	; 9
     dcc:	83 e1       	ldi	r24, 0x13	; 19
     dce:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     dd0:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     dd6:	a6 a3       	std	Z+38, r26	; 0x26
     dd8:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     dda:	10 a6       	std	Z+40, r1	; 0x28
     ddc:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 83       	st	Z, r24
     de2:	08 95       	ret

00000de4 <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	1f 92       	push	r1
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
	if (global_mode == 7){
     e0e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     e12:	87 30       	cpi	r24, 0x07	; 7
     e14:	31 f4       	brne	.+12     	; 0xe22 <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
     e16:	e0 e0       	ldi	r30, 0x00	; 0
     e18:	f2 e0       	ldi	r31, 0x02	; 2
     e1a:	84 a5       	ldd	r24, Z+44	; 0x2c
     e1c:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
     e1e:	95 a5       	ldd	r25, Z+45	; 0x2d
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
     e22:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
     e26:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <PSU_target>
     e2a:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
     e2c:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e30:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	0c f4       	brge	.+2      	; 0xe3c <__vector_83+0x58>
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	99 23       	and	r25, r25
     e3e:	c9 f0       	breq	.+50     	; 0xe72 <__vector_83+0x8e>
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	2a 3f       	cpi	r18, 0xFA	; 250
     e44:	37 40       	sbci	r19, 0x07	; 7
     e46:	08 f0       	brcs	.+2      	; 0xe4a <__vector_83+0x66>
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	99 23       	and	r25, r25
     e4c:	91 f0       	breq	.+36     	; 0xe72 <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
     e4e:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e52:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e56:	89 30       	cpi	r24, 0x09	; 9
     e58:	1c f4       	brge	.+6      	; 0xe60 <__vector_83+0x7c>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <__vector_83+0x80>
     e60:	86 e0       	ldi	r24, 0x06	; 6
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	82 0f       	add	r24, r18
     e66:	93 1f       	adc	r25, r19
     e68:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     e6c:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
     e70:	23 c0       	rjmp	.+70     	; 0xeb8 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
     e72:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e76:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	0c f0       	brlt	.+2      	; 0xe82 <__vector_83+0x9e>
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	99 23       	and	r25, r25
     e84:	c9 f0       	breq	.+50     	; 0xeb8 <__vector_83+0xd4>
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	27 30       	cpi	r18, 0x07	; 7
     e8a:	31 05       	cpc	r19, r1
     e8c:	08 f4       	brcc	.+2      	; 0xe90 <__vector_83+0xac>
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	99 23       	and	r25, r25
     e92:	91 f0       	breq	.+36     	; 0xeb8 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
     e94:	20 91 68 09 	lds	r18, 0x0968	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
     e98:	30 91 69 09 	lds	r19, 0x0969	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
     e9c:	88 3f       	cpi	r24, 0xF8	; 248
     e9e:	1c f0       	brlt	.+6      	; 0xea6 <__vector_83+0xc2>
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <__vector_83+0xc6>
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a9 01       	movw	r20, r18
     eac:	48 1b       	sub	r20, r24
     eae:	59 0b       	sbc	r21, r25
     eb0:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
     eb4:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	}
     eb8:	0f 90       	pop	r0
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
     ed8:	e0 e7       	ldi	r30, 0x70	; 112
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	83 81       	ldd	r24, Z+3	; 0x03
     ede:	8f 7e       	andi	r24, 0xEF	; 239
     ee0:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
     ee2:	e0 e4       	ldi	r30, 0x40	; 64
     ee4:	f6 e0       	ldi	r31, 0x06	; 6
     ee6:	80 81       	ld	r24, Z
     ee8:	8a 6a       	ori	r24, 0xAA	; 170
     eea:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     ef0:	88 e5       	ldi	r24, 0x58	; 88
     ef2:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
     ef4:	e0 ea       	ldi	r30, 0xA0	; 160
     ef6:	f8 e0       	ldi	r31, 0x08	; 8
     ef8:	84 ec       	ldi	r24, 0xC4	; 196
     efa:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
     f00:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     f02:	88 e1       	ldi	r24, 0x18	; 24
     f04:	84 83       	std	Z+4, r24	; 0x04
     f06:	08 95       	ret

00000f08 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
     f08:	e0 e7       	ldi	r30, 0x70	; 112
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	83 81       	ldd	r24, Z+3	; 0x03
     f0e:	87 7f       	andi	r24, 0xF7	; 247
     f10:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
     f12:	e0 ec       	ldi	r30, 0xC0	; 192
     f14:	f8 e0       	ldi	r31, 0x08	; 8
     f16:	80 e4       	ldi	r24, 0x40	; 64
     f18:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     f1a:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     f1c:	88 e5       	ldi	r24, 0x58	; 88
     f1e:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <__TEXT_REGION_LENGTH__+0x700655>
     f22:	08 95       	ret

00000f24 <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
	asm("nop");
     f2e:	00 00       	nop
}
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	00 d0       	rcall	.+0      	; 0xf44 <sysclk_init+0xa>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <sysclk_init+0xc>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     f50:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     f54:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f58:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f5c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f60:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f64:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     f68:	64 e0       	ldi	r22, 0x04	; 4
     f6a:	81 e4       	ldi	r24, 0x41	; 65
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	ba d5       	rcall	.+2932   	; 0x1ae4 <ccp_write_io>
     f70:	6c e1       	ldi	r22, 0x1C	; 28
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	bc d5       	rcall	.+2936   	; 0x1af0 <nvm_read_byte>
     f78:	8a 83       	std	Y+2, r24	; 0x02
     f7a:	6d e1       	ldi	r22, 0x1D	; 29
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	b7 d5       	rcall	.+2926   	; 0x1af0 <nvm_read_byte>
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	21 f4       	brne	.+8      	; 0xf94 <sysclk_init+0x5a>
     f8c:	80 e4       	ldi	r24, 0x40	; 64
     f8e:	93 e2       	ldi	r25, 0x23	; 35
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	9c 83       	std	Y+4, r25	; 0x04
     f9c:	e0 e6       	ldi	r30, 0x60	; 96
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	82 83       	std	Z+2, r24	; 0x02
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	83 83       	std	Z+3, r24	; 0x03
     fa6:	9f b7       	in	r25, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	e0 e5       	ldi	r30, 0x50	; 80
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	80 83       	st	Z, r24
     fb4:	9f bf       	out	0x3f, r25	; 63
     fb6:	81 81       	ldd	r24, Z+1	; 0x01
     fb8:	81 ff       	sbrs	r24, 1
     fba:	fd cf       	rjmp	.-6      	; 0xfb6 <sysclk_init+0x7c>
     fbc:	9f b7       	in	r25, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	00 e5       	ldi	r16, 0x50	; 80
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	d8 01       	movw	r26, r16
     fc6:	16 96       	adiw	r26, 0x06	; 6
     fc8:	8c 91       	ld	r24, X
     fca:	16 97       	sbiw	r26, 0x06	; 6
     fcc:	89 7f       	andi	r24, 0xF9	; 249
     fce:	16 96       	adiw	r26, 0x06	; 6
     fd0:	8c 93       	st	X, r24
     fd2:	16 97       	sbiw	r26, 0x06	; 6
     fd4:	e0 e6       	ldi	r30, 0x60	; 96
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 e8       	ldi	r24, 0x80	; 128
     fda:	85 83       	std	Z+5, r24	; 0x05
     fdc:	8b eb       	ldi	r24, 0xBB	; 187
     fde:	86 83       	std	Z+6, r24	; 0x06
     fe0:	16 96       	adiw	r26, 0x06	; 6
     fe2:	8c 91       	ld	r24, X
     fe4:	16 97       	sbiw	r26, 0x06	; 6
     fe6:	84 60       	ori	r24, 0x04	; 4
     fe8:	16 96       	adiw	r26, 0x06	; 6
     fea:	8c 93       	st	X, r24
     fec:	80 81       	ld	r24, Z
     fee:	81 60       	ori	r24, 0x01	; 1
     ff0:	80 83       	st	Z, r24
     ff2:	9f bf       	out	0x3f, r25	; 63
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	80 e4       	ldi	r24, 0x40	; 64
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	74 d5       	rcall	.+2792   	; 0x1ae4 <ccp_write_io>
     ffc:	9f b7       	in	r25, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	f8 01       	movw	r30, r16
    1002:	80 81       	ld	r24, Z
    1004:	8e 7f       	andi	r24, 0xFE	; 254
    1006:	80 83       	st	Z, r24
    1008:	9f bf       	out	0x3f, r25	; 63
    100a:	24 96       	adiw	r28, 0x04	; 4
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	08 95       	ret

0000101a <sysclk_enable_module>:
    101a:	9f b7       	in	r25, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	e8 2f       	mov	r30, r24
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	e0 59       	subi	r30, 0x90	; 144
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	60 95       	com	r22
    1028:	80 81       	ld	r24, Z
    102a:	68 23       	and	r22, r24
    102c:	60 83       	st	Z, r22
    102e:	9f bf       	out	0x3f, r25	; 63
    1030:	08 95       	ret

00001032 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1032:	86 30       	cpi	r24, 0x06	; 6
    1034:	11 f0       	breq	.+4      	; 0x103a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	01 c0       	rjmp	.+2      	; 0x103c <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    103a:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    103c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1040:	81 fd       	sbrc	r24, 1
    1042:	26 c0       	rjmp	.+76     	; 0x1090 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1044:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1046:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1048:	e0 e5       	ldi	r30, 0x50	; 80
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	82 60       	ori	r24, 0x02	; 2
    1050:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1052:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1054:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1056:	81 ff       	sbrs	r24, 1
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    105a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    105c:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    105e:	a0 e5       	ldi	r26, 0x50	; 80
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	16 96       	adiw	r26, 0x06	; 6
    1064:	8c 91       	ld	r24, X
    1066:	16 97       	sbiw	r26, 0x06	; 6
    1068:	89 7f       	andi	r24, 0xF9	; 249
    106a:	16 96       	adiw	r26, 0x06	; 6
    106c:	8c 93       	st	X, r24
    106e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1070:	e0 e6       	ldi	r30, 0x60	; 96
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 e8       	ldi	r24, 0x80	; 128
    1076:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1078:	8b eb       	ldi	r24, 0xBB	; 187
    107a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    107c:	16 96       	adiw	r26, 0x06	; 6
    107e:	8c 91       	ld	r24, X
    1080:	16 97       	sbiw	r26, 0x06	; 6
    1082:	84 60       	ori	r24, 0x04	; 4
    1084:	16 96       	adiw	r26, 0x06	; 6
    1086:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1088:	80 81       	ld	r24, Z
    108a:	81 60       	ori	r24, 0x01	; 1
    108c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    108e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1090:	63 60       	ori	r22, 0x03	; 3
    1092:	84 e4       	ldi	r24, 0x44	; 68
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	26 d5       	rcall	.+2636   	; 0x1ae4 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1098:	60 e4       	ldi	r22, 0x40	; 64
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	be cf       	rjmp	.-132    	; 0x101a <sysclk_enable_module>
    109e:	08 95       	ret

000010a0 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    10a0:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <udi_vendor_alternate_setting>
    10a4:	08 95       	ret

000010a6 <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    10a6:	40 d1       	rcall	.+640    	; 0x1328 <udc_get_interface_desc>
    10a8:	fc 01       	movw	r30, r24
    10aa:	83 81       	ldd	r24, Z+3	; 0x03
    10ac:	80 93 b8 20 	sts	0x20B8, r24	; 0x8020b8 <udi_vendor_alternate_setting>
	if (0 == udi_vendor_alternate_setting) {
    10b0:	81 11       	cpse	r24, r1
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    10b4:	7d c9       	rjmp	.-3334   	; 0x3b0 <main_vendor_enable>
    10b6:	08 95       	ret
			return false;
		}
	}
	return true;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
}
    10ba:	08 95       	ret

000010bc <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    10bc:	80 91 b8 20 	lds	r24, 0x20B8	; 0x8020b8 <udi_vendor_alternate_setting>
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    10c4:	8f c9       	rjmp	.-3298   	; 0x3e4 <main_vendor_disable>
    10c6:	08 95       	ret

000010c8 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    10c8:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq>
    10cc:	88 23       	and	r24, r24
    10ce:	4c f4       	brge	.+18     	; 0x10e2 <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    10d0:	80 76       	andi	r24, 0x60	; 96
    10d2:	80 34       	cpi	r24, 0x40	; 64
    10d4:	a9 f4       	brne	.+42     	; 0x1100 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    10d6:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    10da:	81 11       	cpse	r24, r1
    10dc:	13 c0       	rjmp	.+38     	; 0x1104 <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    10de:	87 c9       	rjmp	.-3314   	; 0x3ee <main_setup_in_received>
    10e0:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    10e2:	80 76       	andi	r24, 0x60	; 96
    10e4:	80 34       	cpi	r24, 0x40	; 64
    10e6:	81 f4       	brne	.+32     	; 0x1108 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    10e8:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    10ec:	81 11       	cpse	r24, r1
    10ee:	0e c0       	rjmp	.+28     	; 0x110c <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    10f0:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    10f4:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    10f8:	89 2b       	or	r24, r25
    10fa:	51 f0       	breq	.+20     	; 0x1110 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    10fc:	76 c9       	rjmp	.-3348   	; 0x3ea <main_setup_out_received>
    10fe:	08 95       	ret
		}
	}
	return false; // Not supported request
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	08 95       	ret
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	08 95       	ret
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	08 95       	ret
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	08 95       	ret
    1110:	80 e0       	ldi	r24, 0x00	; 0
}
    1112:	08 95       	ret

00001114 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    111a:	8a 01       	movw	r16, r20
    111c:	ac 01       	movw	r20, r24
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	81 e8       	ldi	r24, 0x81	; 129
    1122:	0e 94 e6 11 	call	0x23cc	; 0x23cc <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	08 95       	ret

0000112c <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    1132:	8a 01       	movw	r16, r20
    1134:	ac 01       	movw	r20, r24
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	82 e8       	ldi	r24, 0x82	; 130
    113a:	0e 94 e6 11 	call	0x23cc	; 0x23cc <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	08 95       	ret

00001144 <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    114a:	8a 01       	movw	r16, r20
    114c:	ac 01       	movw	r20, r24
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	83 e8       	ldi	r24, 0x83	; 131
    1152:	0e 94 e6 11 	call	0x23cc	; 0x23cc <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

0000115c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    115c:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <udc_ptr_conf>
    1160:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    1164:	01 90       	ld	r0, Z+
    1166:	f0 81       	ld	r31, Z
    1168:	e0 2d       	mov	r30, r0
    116a:	22 81       	ldd	r18, Z+2	; 0x02
    116c:	33 81       	ldd	r19, Z+3	; 0x03
    116e:	2e 0f       	add	r18, r30
    1170:	3f 1f       	adc	r19, r31
    1172:	fc 01       	movw	r30, r24
    1174:	40 81       	ld	r20, Z
    1176:	e4 0f       	add	r30, r20
    1178:	f1 1d       	adc	r31, r1
    117a:	e2 17       	cp	r30, r18
    117c:	f3 07       	cpc	r31, r19
    117e:	b8 f4       	brcc	.+46     	; 0x11ae <udc_next_desc_in_iface+0x52>
    1180:	81 81       	ldd	r24, Z+1	; 0x01
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	b9 f0       	breq	.+46     	; 0x11b4 <udc_next_desc_in_iface+0x58>
    1186:	86 13       	cpse	r24, r22
    1188:	09 c0       	rjmp	.+18     	; 0x119c <udc_next_desc_in_iface+0x40>
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <udc_next_desc_in_iface+0x3a>
    118c:	81 81       	ldd	r24, Z+1	; 0x01
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	a1 f0       	breq	.+40     	; 0x11ba <udc_next_desc_in_iface+0x5e>
    1192:	86 13       	cpse	r24, r22
    1194:	03 c0       	rjmp	.+6      	; 0x119c <udc_next_desc_in_iface+0x40>
    1196:	8e 2f       	mov	r24, r30
    1198:	9f 2f       	mov	r25, r31
    119a:	08 95       	ret
    119c:	80 81       	ld	r24, Z
    119e:	e8 0f       	add	r30, r24
    11a0:	f1 1d       	adc	r31, r1
    11a2:	e2 17       	cp	r30, r18
    11a4:	f3 07       	cpc	r31, r19
    11a6:	90 f3       	brcs	.-28     	; 0x118c <udc_next_desc_in_iface+0x30>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	08 95       	ret
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	08 95       	ret
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	08 95       	ret
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	08 95       	ret

000011c0 <udc_valid_address>:
    11c0:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    11c4:	8f 77       	andi	r24, 0x7F	; 127
    11c6:	0c 94 14 11 	jmp	0x2228	; 0x2228 <udd_set_address>
    11ca:	08 95       	ret

000011cc <udc_update_iface_desc>:
    11cc:	90 91 c0 20 	lds	r25, 0x20C0	; 0x8020c0 <udc_num_configuration>
    11d0:	99 23       	and	r25, r25
    11d2:	81 f1       	breq	.+96     	; 0x1234 <udc_update_iface_desc+0x68>
    11d4:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <udc_ptr_conf>
    11d8:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    11dc:	01 90       	ld	r0, Z+
    11de:	f0 81       	ld	r31, Z
    11e0:	e0 2d       	mov	r30, r0
    11e2:	94 81       	ldd	r25, Z+4	; 0x04
    11e4:	89 17       	cp	r24, r25
    11e6:	40 f5       	brcc	.+80     	; 0x1238 <udc_update_iface_desc+0x6c>
    11e8:	e0 93 bb 20 	sts	0x20BB, r30	; 0x8020bb <udc_ptr_iface>
    11ec:	f0 93 bc 20 	sts	0x20BC, r31	; 0x8020bc <udc_ptr_iface+0x1>
    11f0:	22 81       	ldd	r18, Z+2	; 0x02
    11f2:	33 81       	ldd	r19, Z+3	; 0x03
    11f4:	2e 0f       	add	r18, r30
    11f6:	3f 1f       	adc	r19, r31
    11f8:	e2 17       	cp	r30, r18
    11fa:	f3 07       	cpc	r31, r19
    11fc:	f8 f4       	brcc	.+62     	; 0x123c <udc_update_iface_desc+0x70>
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	94 30       	cpi	r25, 0x04	; 4
    1202:	61 f4       	brne	.+24     	; 0x121c <udc_update_iface_desc+0x50>
    1204:	92 81       	ldd	r25, Z+2	; 0x02
    1206:	98 13       	cpse	r25, r24
    1208:	09 c0       	rjmp	.+18     	; 0x121c <udc_update_iface_desc+0x50>
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	96 13       	cpse	r25, r22
    120e:	06 c0       	rjmp	.+12     	; 0x121c <udc_update_iface_desc+0x50>
    1210:	e0 93 bb 20 	sts	0x20BB, r30	; 0x8020bb <udc_ptr_iface>
    1214:	f0 93 bc 20 	sts	0x20BC, r31	; 0x8020bc <udc_ptr_iface+0x1>
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	08 95       	ret
    121c:	90 81       	ld	r25, Z
    121e:	e9 0f       	add	r30, r25
    1220:	f1 1d       	adc	r31, r1
    1222:	e2 17       	cp	r30, r18
    1224:	f3 07       	cpc	r31, r19
    1226:	58 f3       	brcs	.-42     	; 0x11fe <udc_update_iface_desc+0x32>
    1228:	e0 93 bb 20 	sts	0x20BB, r30	; 0x8020bb <udc_ptr_iface>
    122c:	f0 93 bc 20 	sts	0x20BC, r31	; 0x8020bc <udc_ptr_iface+0x1>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	08 95       	ret
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	08 95       	ret
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	08 95       	ret
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	08 95       	ret

00001240 <udc_iface_disable>:
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	c8 2f       	mov	r28, r24
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	be df       	rcall	.-132    	; 0x11cc <udc_update_iface_desc>
    1250:	18 2f       	mov	r17, r24
    1252:	88 23       	and	r24, r24
    1254:	81 f1       	breq	.+96     	; 0x12b6 <udc_iface_disable+0x76>
    1256:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <udc_ptr_conf>
    125a:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    125e:	ec 2f       	mov	r30, r28
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	12 96       	adiw	r26, 0x02	; 2
    1268:	8d 91       	ld	r24, X+
    126a:	9c 91       	ld	r25, X
    126c:	13 97       	sbiw	r26, 0x03	; 3
    126e:	e8 0f       	add	r30, r24
    1270:	f9 1f       	adc	r31, r25
    1272:	e0 80       	ld	r14, Z
    1274:	f1 80       	ldd	r15, Z+1	; 0x01
    1276:	d7 01       	movw	r26, r14
    1278:	16 96       	adiw	r26, 0x06	; 6
    127a:	ed 91       	ld	r30, X+
    127c:	fc 91       	ld	r31, X
    127e:	17 97       	sbiw	r26, 0x07	; 7
    1280:	09 95       	icall
    1282:	68 2f       	mov	r22, r24
    1284:	8c 2f       	mov	r24, r28
    1286:	a2 df       	rcall	.-188    	; 0x11cc <udc_update_iface_desc>
    1288:	18 2f       	mov	r17, r24
    128a:	88 23       	and	r24, r24
    128c:	a1 f0       	breq	.+40     	; 0x12b6 <udc_iface_disable+0x76>
    128e:	c0 91 bb 20 	lds	r28, 0x20BB	; 0x8020bb <udc_ptr_iface>
    1292:	d0 91 bc 20 	lds	r29, 0x20BC	; 0x8020bc <udc_ptr_iface+0x1>
    1296:	65 e0       	ldi	r22, 0x05	; 5
    1298:	ce 01       	movw	r24, r28
    129a:	60 df       	rcall	.-320    	; 0x115c <udc_next_desc_in_iface>
    129c:	ec 01       	movw	r28, r24
    129e:	89 2b       	or	r24, r25
    12a0:	21 f0       	breq	.+8      	; 0x12aa <udc_iface_disable+0x6a>
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <udd_ep_free>
    12a8:	f6 cf       	rjmp	.-20     	; 0x1296 <udc_iface_disable+0x56>
    12aa:	d7 01       	movw	r26, r14
    12ac:	12 96       	adiw	r26, 0x02	; 2
    12ae:	ed 91       	ld	r30, X+
    12b0:	fc 91       	ld	r31, X
    12b2:	13 97       	sbiw	r26, 0x03	; 3
    12b4:	09 95       	icall
    12b6:	81 2f       	mov	r24, r17
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	08 95       	ret

000012c4 <udc_iface_enable>:
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	18 2f       	mov	r17, r24
    12cc:	7f df       	rcall	.-258    	; 0x11cc <udc_update_iface_desc>
    12ce:	88 23       	and	r24, r24
    12d0:	39 f1       	breq	.+78     	; 0x1320 <udc_iface_enable+0x5c>
    12d2:	c0 91 bb 20 	lds	r28, 0x20BB	; 0x8020bb <udc_ptr_iface>
    12d6:	d0 91 bc 20 	lds	r29, 0x20BC	; 0x8020bc <udc_ptr_iface+0x1>
    12da:	65 e0       	ldi	r22, 0x05	; 5
    12dc:	ce 01       	movw	r24, r28
    12de:	3e df       	rcall	.-388    	; 0x115c <udc_next_desc_in_iface>
    12e0:	ec 01       	movw	r28, r24
    12e2:	89 2b       	or	r24, r25
    12e4:	41 f0       	breq	.+16     	; 0x12f6 <udc_iface_enable+0x32>
    12e6:	4c 81       	ldd	r20, Y+4	; 0x04
    12e8:	5d 81       	ldd	r21, Y+5	; 0x05
    12ea:	6b 81       	ldd	r22, Y+3	; 0x03
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	a9 d7       	rcall	.+3922   	; 0x2242 <udd_ep_alloc>
    12f0:	81 11       	cpse	r24, r1
    12f2:	f3 cf       	rjmp	.-26     	; 0x12da <udc_iface_enable+0x16>
    12f4:	15 c0       	rjmp	.+42     	; 0x1320 <udc_iface_enable+0x5c>
    12f6:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <udc_ptr_conf>
    12fa:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    12fe:	e1 2f       	mov	r30, r17
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	e8 0f       	add	r30, r24
    1310:	f9 1f       	adc	r31, r25
    1312:	01 90       	ld	r0, Z+
    1314:	f0 81       	ld	r31, Z
    1316:	e0 2d       	mov	r30, r0
    1318:	01 90       	ld	r0, Z+
    131a:	f0 81       	ld	r31, Z
    131c:	e0 2d       	mov	r30, r0
    131e:	09 95       	icall
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	08 95       	ret

00001328 <udc_get_interface_desc>:
    1328:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <udc_ptr_iface>
    132c:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <udc_ptr_iface+0x1>
    1330:	08 95       	ret

00001332 <udc_start>:
    1332:	f5 c6       	rjmp	.+3562   	; 0x211e <udd_enable>
    1334:	08 95       	ret

00001336 <udc_reset>:
    1336:	cf 93       	push	r28
    1338:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    133c:	88 23       	and	r24, r24
    133e:	c1 f0       	breq	.+48     	; 0x1370 <udc_reset+0x3a>
    1340:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <udc_ptr_conf>
    1344:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    1348:	01 90       	ld	r0, Z+
    134a:	f0 81       	ld	r31, Z
    134c:	e0 2d       	mov	r30, r0
    134e:	84 81       	ldd	r24, Z+4	; 0x04
    1350:	88 23       	and	r24, r24
    1352:	71 f0       	breq	.+28     	; 0x1370 <udc_reset+0x3a>
    1354:	c0 e0       	ldi	r28, 0x00	; 0
    1356:	8c 2f       	mov	r24, r28
    1358:	73 df       	rcall	.-282    	; 0x1240 <udc_iface_disable>
    135a:	cf 5f       	subi	r28, 0xFF	; 255
    135c:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <udc_ptr_conf>
    1360:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    1364:	01 90       	ld	r0, Z+
    1366:	f0 81       	ld	r31, Z
    1368:	e0 2d       	mov	r30, r0
    136a:	84 81       	ldd	r24, Z+4	; 0x04
    136c:	c8 17       	cp	r28, r24
    136e:	98 f3       	brcs	.-26     	; 0x1356 <udc_reset+0x20>
    1370:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <udc_num_configuration>
    1374:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <udc_device_status>
    1378:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <udc_device_status+0x1>
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1380:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1382:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1386:	88 23       	and	r24, r24
    1388:	49 f1       	breq	.+82     	; 0x13dc <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    138a:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <udc_ptr_conf>
    138e:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1398:	84 81       	ldd	r24, Z+4	; 0x04
    139a:	88 23       	and	r24, r24
    139c:	f9 f0       	breq	.+62     	; 0x13dc <udc_sof_notify+0x5c>
    139e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    13a0:	ec 2f       	mov	r30, r28
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	12 96       	adiw	r26, 0x02	; 2
    13aa:	8d 91       	ld	r24, X+
    13ac:	9c 91       	ld	r25, X
    13ae:	13 97       	sbiw	r26, 0x03	; 3
    13b0:	e8 0f       	add	r30, r24
    13b2:	f9 1f       	adc	r31, r25
    13b4:	01 90       	ld	r0, Z+
    13b6:	f0 81       	ld	r31, Z
    13b8:	e0 2d       	mov	r30, r0
    13ba:	00 84       	ldd	r0, Z+8	; 0x08
    13bc:	f1 85       	ldd	r31, Z+9	; 0x09
    13be:	e0 2d       	mov	r30, r0
    13c0:	30 97       	sbiw	r30, 0x00	; 0
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    13c4:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    13c6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13c8:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <udc_ptr_conf>
    13cc:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    13d0:	ed 91       	ld	r30, X+
    13d2:	fc 91       	ld	r31, X
    13d4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    13d6:	84 81       	ldd	r24, Z+4	; 0x04
    13d8:	c8 17       	cp	r28, r24
    13da:	10 f3       	brcs	.-60     	; 0x13a0 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    13e8:	e5 e6       	ldi	r30, 0x65	; 101
    13ea:	f4 e2       	ldi	r31, 0x24	; 36
    13ec:	12 86       	std	Z+10, r1	; 0x0a
    13ee:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    13f0:	14 86       	std	Z+12, r1	; 0x0c
    13f2:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    13f4:	16 86       	std	Z+14, r1	; 0x0e
    13f6:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    13f8:	80 81       	ld	r24, Z
    13fa:	88 23       	and	r24, r24
    13fc:	3c f4       	brge	.+14     	; 0x140c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    13fe:	20 91 6b 24 	lds	r18, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    1402:	30 91 6c 24 	lds	r19, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    1406:	23 2b       	or	r18, r19
    1408:	09 f4       	brne	.+2      	; 0x140c <udc_process_setup+0x2c>
    140a:	60 c3       	rjmp	.+1728   	; 0x1acc <udc_process_setup+0x6ec>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    140c:	80 76       	andi	r24, 0x60	; 96
    140e:	80 34       	cpi	r24, 0x40	; 64
    1410:	09 f0       	breq	.+2      	; 0x1414 <udc_process_setup+0x34>
    1412:	fe c0       	rjmp	.+508    	; 0x1610 <udc_process_setup+0x230>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    1414:	e0 91 66 24 	lds	r30, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    1418:	8e 2f       	mov	r24, r30
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	fc 01       	movw	r30, r24
    141e:	e0 5a       	subi	r30, 0xA0	; 160
    1420:	f1 09       	sbc	r31, r1
    1422:	e8 30       	cpi	r30, 0x08	; 8
    1424:	f1 05       	cpc	r31, r1
    1426:	08 f0       	brcs	.+2      	; 0x142a <udc_process_setup+0x4a>
    1428:	ea c0       	rjmp	.+468    	; 0x15fe <udc_process_setup+0x21e>
    142a:	e2 50       	subi	r30, 0x02	; 2
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			asm("nop");
    1432:	00 00       	nop
    1434:	4f c3       	rjmp	.+1694   	; 0x1ad4 <udc_process_setup+0x6f4>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    1436:	e0 e0       	ldi	r30, 0x00	; 0
    1438:	f8 e0       	ldi	r31, 0x08	; 8
    143a:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    143c:	c5 e6       	ldi	r28, 0x65	; 101
    143e:	d4 e2       	ldi	r29, 0x24	; 36
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	86 ab       	std	Z+54, r24	; 0x36
    1446:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	8f 70       	andi	r24, 0x0F	; 15
    144c:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    144e:	6e 81       	ldd	r22, Y+6	; 0x06
    1450:	7f 81       	ldd	r23, Y+7	; 0x07
    1452:	84 e6       	ldi	r24, 0x64	; 100
    1454:	92 e2       	ldi	r25, 0x22	; 34
    1456:	ee d6       	rcall	.+3548   	; 0x2234 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    1458:	8e 81       	ldd	r24, Y+6	; 0x06
    145a:	9f 81       	ldd	r25, Y+7	; 0x07
    145c:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <dacBuf_len>
    1460:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <dacBuf_len+0x1>
    1464:	82 17       	cp	r24, r18
    1466:	93 07       	cpc	r25, r19
    1468:	09 f4       	brne	.+2      	; 0x146c <udc_process_setup+0x8c>
    146a:	34 c3       	rjmp	.+1640   	; 0x1ad4 <udc_process_setup+0x6f4>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    146c:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <dacBuf_len>
    1470:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <dacBuf_len+0x1>
				switch(global_mode){
    1474:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    1478:	8e 2f       	mov	r24, r30
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	88 30       	cpi	r24, 0x08	; 8
    147e:	91 05       	cpc	r25, r1
    1480:	08 f0       	brcs	.+2      	; 0x1484 <udc_process_setup+0xa4>
    1482:	bf c0       	rjmp	.+382    	; 0x1602 <udc_process_setup+0x222>
    1484:	fc 01       	movw	r30, r24
    1486:	ea 5f       	subi	r30, 0xFA	; 250
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    148e:	5b d8       	rcall	.-3914   	; 0x546 <tiny_dma_set_mode_0>
    1490:	21 c3       	rjmp	.+1602   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1492:	d5 d8       	rcall	.-3670   	; 0x63e <tiny_dma_set_mode_1>
    1494:	1f c3       	rjmp	.+1598   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1496:	4b d9       	rcall	.-3434   	; 0x72e <tiny_dma_set_mode_2>
    1498:	1d c3       	rjmp	.+1594   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 3:
					tiny_dma_set_mode_3();
    149a:	c0 d9       	rcall	.-3200   	; 0x81c <tiny_dma_set_mode_3>
    149c:	1b c3       	rjmp	.+1590   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 4:
					tiny_dma_set_mode_4();
    149e:	3a da       	rcall	.-2956   	; 0x914 <tiny_dma_set_mode_4>
    14a0:	19 c3       	rjmp	.+1586   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 5:
					tiny_dma_set_mode_5();
    14a2:	ae da       	rcall	.-2724   	; 0xa00 <tiny_dma_set_mode_5>
    14a4:	17 c3       	rjmp	.+1582   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 6:
					tiny_dma_set_mode_6();
    14a6:	f4 da       	rcall	.-2584   	; 0xa90 <tiny_dma_set_mode_6>
    14a8:	15 c3       	rjmp	.+1578   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 7:
					tiny_dma_set_mode_7();
    14aa:	54 db       	rcall	.-2392   	; 0xb54 <tiny_dma_set_mode_7>
    14ac:	13 c3       	rjmp	.+1574   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    14ae:	e0 e4       	ldi	r30, 0x40	; 64
    14b0:	f8 e0       	ldi	r31, 0x08	; 8
    14b2:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    14b4:	c5 e6       	ldi	r28, 0x65	; 101
    14b6:	d4 e2       	ldi	r29, 0x24	; 36
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	9b 81       	ldd	r25, Y+3	; 0x03
    14bc:	86 ab       	std	Z+54, r24	; 0x36
    14be:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	8f 70       	andi	r24, 0x0F	; 15
    14c4:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    14c6:	6e 81       	ldd	r22, Y+6	; 0x06
    14c8:	7f 81       	ldd	r23, Y+7	; 0x07
    14ca:	87 e7       	ldi	r24, 0x77	; 119
    14cc:	94 e2       	ldi	r25, 0x24	; 36
    14ce:	b2 d6       	rcall	.+3428   	; 0x2234 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    14d0:	8e 81       	ldd	r24, Y+6	; 0x06
    14d2:	9f 81       	ldd	r25, Y+7	; 0x07
    14d4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <auxDacBufLen>
    14d8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <auxDacBufLen+0x1>
    14dc:	82 17       	cp	r24, r18
    14de:	93 07       	cpc	r25, r19
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <udc_process_setup+0x104>
    14e2:	f8 c2       	rjmp	.+1520   	; 0x1ad4 <udc_process_setup+0x6f4>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    14e4:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <auxDacBufLen>
    14e8:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <auxDacBufLen+0x1>
				switch(global_mode){
    14ec:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
    14f0:	8e 2f       	mov	r24, r30
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	91 05       	cpc	r25, r1
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <udc_process_setup+0x11c>
    14fa:	85 c0       	rjmp	.+266    	; 0x1606 <udc_process_setup+0x226>
    14fc:	fc 01       	movw	r30, r24
    14fe:	e2 5f       	subi	r30, 0xF2	; 242
    1500:	fe 4f       	sbci	r31, 0xFE	; 254
    1502:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1506:	1f d8       	rcall	.-4034   	; 0x546 <tiny_dma_set_mode_0>
    1508:	e5 c2       	rjmp	.+1482   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 1:
					tiny_dma_set_mode_1();
    150a:	99 d8       	rcall	.-3790   	; 0x63e <tiny_dma_set_mode_1>
    150c:	e3 c2       	rjmp	.+1478   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 2:
					tiny_dma_set_mode_2();
    150e:	0f d9       	rcall	.-3554   	; 0x72e <tiny_dma_set_mode_2>
    1510:	e1 c2       	rjmp	.+1474   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1512:	84 d9       	rcall	.-3320   	; 0x81c <tiny_dma_set_mode_3>
    1514:	df c2       	rjmp	.+1470   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1516:	fe d9       	rcall	.-3076   	; 0x914 <tiny_dma_set_mode_4>
    1518:	dd c2       	rjmp	.+1466   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 5:
					tiny_dma_set_mode_5();
    151a:	72 da       	rcall	.-2844   	; 0xa00 <tiny_dma_set_mode_5>
    151c:	db c2       	rjmp	.+1462   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 6:
					tiny_dma_set_mode_6();
    151e:	b8 da       	rcall	.-2704   	; 0xa90 <tiny_dma_set_mode_6>
    1520:	d9 c2       	rjmp	.+1458   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1522:	18 db       	rcall	.-2512   	; 0xb54 <tiny_dma_set_mode_7>
    1524:	d7 c2       	rjmp	.+1454   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1526:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    152a:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
			PSU_target = udd_g_ctrlreq.req.wValue;
    152e:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    1532:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <PSU_target>
    1536:	ce c2       	rjmp	.+1436   	; 0x1ad4 <udc_process_setup+0x6f4>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    1538:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    153c:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1540:	c9 c2       	rjmp	.+1426   	; 0x1ad4 <udc_process_setup+0x6f4>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    1542:	e0 91 67 24 	lds	r30, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    1546:	f0 91 68 24 	lds	r31, 0x2468	; 0x802468 <udd_g_ctrlreq+0x3>
    154a:	e8 30       	cpi	r30, 0x08	; 8
    154c:	f1 05       	cpc	r31, r1
    154e:	08 f0       	brcs	.+2      	; 0x1552 <udc_process_setup+0x172>
    1550:	5c c0       	rjmp	.+184    	; 0x160a <udc_process_setup+0x22a>
    1552:	ea 5e       	subi	r30, 0xEA	; 234
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1562:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    1566:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    156a:	0e 94 a3 02 	call	0x546	; 0x546 <tiny_dma_set_mode_0>
    156e:	b2 c2       	rjmp	.+1380   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1578:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    157c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    1580:	5e d8       	rcall	.-3908   	; 0x63e <tiny_dma_set_mode_1>
    1582:	a8 c2       	rjmp	.+1360   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    158c:	c5 e6       	ldi	r28, 0x65	; 101
    158e:	d4 e2       	ldi	r29, 0x24	; 36
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	0e 94 0e 02 	call	0x41c	; 0x41c <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    159c:	c8 d8       	rcall	.-3696   	; 0x72e <tiny_dma_set_mode_2>
    159e:	9a c2       	rjmp	.+1332   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    15a0:	3d d9       	rcall	.-3462   	; 0x81c <tiny_dma_set_mode_3>
    15a2:	98 c2       	rjmp	.+1328   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    15a4:	b7 d9       	rcall	.-3218   	; 0x914 <tiny_dma_set_mode_4>
    15a6:	96 c2       	rjmp	.+1324   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15b0:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    15b4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    15b8:	23 da       	rcall	.-3002   	; 0xa00 <tiny_dma_set_mode_5>
    15ba:	8c c2       	rjmp	.+1304   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15c4:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    15c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    15cc:	61 da       	rcall	.-2878   	; 0xa90 <tiny_dma_set_mode_6>
    15ce:	82 c2       	rjmp	.+1284   	; 0x1ad4 <udc_process_setup+0x6f4>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    15d0:	62 e0       	ldi	r22, 0x02	; 2
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	0e 94 2b 02 	call	0x456	; 0x456 <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    15d8:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    15dc:	80 68       	ori	r24, 0x80	; 128
    15de:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    15e2:	b8 da       	rcall	.-2704   	; 0xb54 <tiny_dma_set_mode_7>
    15e4:	77 c2       	rjmp	.+1262   	; 0x1ad4 <udc_process_setup+0x6f4>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    15e6:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    15ea:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    15ee:	72 c2       	rjmp	.+1252   	; 0x1ad4 <udc_process_setup+0x6f4>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    15f0:	e9 e7       	ldi	r30, 0x79	; 121
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	88 ed       	ldi	r24, 0xD8	; 216
    15f8:	f8 94       	cli
    15fa:	84 bf       	out	0x34, r24	; 52
    15fc:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	05 c0       	rjmp	.+10     	; 0x160c <udc_process_setup+0x22c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	03 c0       	rjmp	.+6      	; 0x160c <udc_process_setup+0x22c>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	01 c0       	rjmp	.+2      	; 0x160c <udc_process_setup+0x22c>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    160a:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    160c:	81 11       	cpse	r24, r1
    160e:	65 c2       	rjmp	.+1226   	; 0x1ada <udc_process_setup+0x6fa>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1610:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq>
    1614:	98 2f       	mov	r25, r24
    1616:	90 76       	andi	r25, 0x60	; 96
    1618:	09 f0       	breq	.+2      	; 0x161c <udc_process_setup+0x23c>
    161a:	e1 c1       	rjmp	.+962    	; 0x19de <udc_process_setup+0x5fe>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    161c:	88 23       	and	r24, r24
    161e:	0c f0       	brlt	.+2      	; 0x1622 <udc_process_setup+0x242>
    1620:	05 c1       	rjmp	.+522    	; 0x182c <udc_process_setup+0x44c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1622:	20 91 6b 24 	lds	r18, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    1626:	30 91 6c 24 	lds	r19, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    162a:	21 15       	cp	r18, r1
    162c:	31 05       	cpc	r19, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <udc_process_setup+0x252>
    1630:	d6 c1       	rjmp	.+940    	; 0x19de <udc_process_setup+0x5fe>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1632:	8f 71       	andi	r24, 0x1F	; 31
    1634:	09 f0       	breq	.+2      	; 0x1638 <udc_process_setup+0x258>
    1636:	a3 c0       	rjmp	.+326    	; 0x177e <udc_process_setup+0x39e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1638:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    163c:	96 30       	cpi	r25, 0x06	; 6
    163e:	79 f0       	breq	.+30     	; 0x165e <udc_process_setup+0x27e>
    1640:	98 30       	cpi	r25, 0x08	; 8
    1642:	09 f4       	brne	.+2      	; 0x1646 <udc_process_setup+0x266>
    1644:	92 c0       	rjmp	.+292    	; 0x176a <udc_process_setup+0x38a>
    1646:	91 11       	cpse	r25, r1
    1648:	9a c0       	rjmp	.+308    	; 0x177e <udc_process_setup+0x39e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	09 f0       	breq	.+2      	; 0x1652 <udc_process_setup+0x272>
    1650:	c6 c1       	rjmp	.+908    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1652:	62 e0       	ldi	r22, 0x02	; 2
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	84 ec       	ldi	r24, 0xC4	; 196
    1658:	90 e2       	ldi	r25, 0x20	; 32
    165a:	ec d5       	rcall	.+3032   	; 0x2234 <udd_set_setup_payload>
    165c:	3d c2       	rjmp	.+1146   	; 0x1ad8 <udc_process_setup+0x6f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    165e:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    1662:	90 91 68 24 	lds	r25, 0x2468	; 0x802468 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1666:	29 2f       	mov	r18, r25
    1668:	33 27       	eor	r19, r19
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	a9 f0       	breq	.+42     	; 0x169a <udc_process_setup+0x2ba>
    1670:	24 f4       	brge	.+8      	; 0x167a <udc_process_setup+0x29a>
    1672:	21 30       	cpi	r18, 0x01	; 1
    1674:	31 05       	cpc	r19, r1
    1676:	41 f0       	breq	.+16     	; 0x1688 <udc_process_setup+0x2a8>
    1678:	a9 c1       	rjmp	.+850    	; 0x19cc <udc_process_setup+0x5ec>
    167a:	23 30       	cpi	r18, 0x03	; 3
    167c:	31 05       	cpc	r19, r1
    167e:	d9 f1       	breq	.+118    	; 0x16f6 <udc_process_setup+0x316>
    1680:	2f 30       	cpi	r18, 0x0F	; 15
    1682:	31 05       	cpc	r19, r1
    1684:	51 f1       	breq	.+84     	; 0x16da <udc_process_setup+0x2fa>
    1686:	a2 c1       	rjmp	.+836    	; 0x19cc <udc_process_setup+0x5ec>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1688:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <udc_config>
    168c:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1690:	dc 01       	movw	r26, r24
    1692:	6c 91       	ld	r22, X
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	ce d5       	rcall	.+2972   	; 0x2234 <udd_set_setup_payload>
    1698:	59 c0       	rjmp	.+178    	; 0x174c <udc_process_setup+0x36c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    169a:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    169e:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
    16a2:	21 89       	ldd	r18, Z+17	; 0x11
    16a4:	82 17       	cp	r24, r18
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <udc_process_setup+0x2ca>
    16a8:	9a c1       	rjmp	.+820    	; 0x19de <udc_process_setup+0x5fe>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    16aa:	99 27       	eor	r25, r25
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    16b8:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    16bc:	e8 0f       	add	r30, r24
    16be:	f9 1f       	adc	r31, r25
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    16c4:	fc 01       	movw	r30, r24
    16c6:	62 81       	ldd	r22, Z+2	; 0x02
    16c8:	73 81       	ldd	r23, Z+3	; 0x03
    16ca:	b4 d5       	rcall	.+2920   	; 0x2234 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    16cc:	e0 91 6d 24 	lds	r30, 0x246D	; 0x80246d <udd_g_ctrlreq+0x8>
    16d0:	f0 91 6e 24 	lds	r31, 0x246E	; 0x80246e <udd_g_ctrlreq+0x9>
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	81 83       	std	Z+1, r24	; 0x01
    16d8:	39 c0       	rjmp	.+114    	; 0x174c <udc_process_setup+0x36c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    16da:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config+0x4>
    16de:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x5>
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <udc_process_setup+0x308>
    16e6:	7b c1       	rjmp	.+758    	; 0x19de <udc_process_setup+0x5fe>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    16e8:	dc 01       	movw	r26, r24
    16ea:	12 96       	adiw	r26, 0x02	; 2
    16ec:	6d 91       	ld	r22, X+
    16ee:	7c 91       	ld	r23, X
    16f0:	13 97       	sbiw	r26, 0x03	; 3
    16f2:	a0 d5       	rcall	.+2880   	; 0x2234 <udd_set_setup_payload>
    16f4:	2b c0       	rjmp	.+86     	; 0x174c <udc_process_setup+0x36c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    16f6:	99 27       	eor	r25, r25
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	71 f0       	breq	.+28     	; 0x171a <udc_process_setup+0x33a>
    16fe:	38 f0       	brcs	.+14     	; 0x170e <udc_process_setup+0x32e>
    1700:	02 97       	sbiw	r24, 0x02	; 2
    1702:	09 f0       	breq	.+2      	; 0x1706 <udc_process_setup+0x326>
    1704:	6c c1       	rjmp	.+728    	; 0x19de <udc_process_setup+0x5fe>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1706:	8a e8       	ldi	r24, 0x8A	; 138
    1708:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    170a:	28 e1       	ldi	r18, 0x18	; 24
    170c:	09 c0       	rjmp	.+18     	; 0x1720 <udc_process_setup+0x340>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    170e:	64 e0       	ldi	r22, 0x04	; 4
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	8e ea       	ldi	r24, 0xAE	; 174
    1714:	90 e2       	ldi	r25, 0x20	; 32
    1716:	8e d5       	rcall	.+2844   	; 0x2234 <udd_set_setup_payload>
    1718:	19 c0       	rjmp	.+50     	; 0x174c <udc_process_setup+0x36c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    171a:	83 ea       	ldi	r24, 0xA3	; 163
    171c:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    171e:	29 e0       	ldi	r18, 0x09	; 9
    1720:	38 2f       	mov	r19, r24
    1722:	aa e5       	ldi	r26, 0x5A	; 90
    1724:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1726:	e8 2f       	mov	r30, r24
    1728:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    172a:	81 91       	ld	r24, Z+
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	8d 93       	st	X+, r24
    1730:	9d 93       	st	X+, r25
    1732:	8e 2f       	mov	r24, r30
    1734:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1736:	82 17       	cp	r24, r18
    1738:	c0 f3       	brcs	.-16     	; 0x172a <udc_process_setup+0x34a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    173a:	62 2f       	mov	r22, r18
    173c:	66 0f       	add	r22, r22
    173e:	6e 5f       	subi	r22, 0xFE	; 254
    1740:	60 93 58 20 	sts	0x2058, r22	; 0x802058 <udc_string_desc>
		udd_set_setup_payload(
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	88 e5       	ldi	r24, 0x58	; 88
    1748:	90 e2       	ldi	r25, 0x20	; 32
    174a:	74 d5       	rcall	.+2792   	; 0x2234 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    174c:	e5 e6       	ldi	r30, 0x65	; 101
    174e:	f4 e2       	ldi	r31, 0x24	; 36
    1750:	86 81       	ldd	r24, Z+6	; 0x06
    1752:	97 81       	ldd	r25, Z+7	; 0x07
    1754:	22 85       	ldd	r18, Z+10	; 0x0a
    1756:	33 85       	ldd	r19, Z+11	; 0x0b
    1758:	82 17       	cp	r24, r18
    175a:	93 07       	cpc	r25, r19
    175c:	08 f0       	brcs	.+2      	; 0x1760 <udc_process_setup+0x380>
    175e:	bc c1       	rjmp	.+888    	; 0x1ad8 <udc_process_setup+0x6f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1760:	80 93 6f 24 	sts	0x246F, r24	; 0x80246f <udd_g_ctrlreq+0xa>
    1764:	90 93 70 24 	sts	0x2470, r25	; 0x802470 <udd_g_ctrlreq+0xb>
    1768:	b7 c1       	rjmp	.+878    	; 0x1ad8 <udc_process_setup+0x6f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    176a:	21 30       	cpi	r18, 0x01	; 1
    176c:	31 05       	cpc	r19, r1
    176e:	09 f0       	breq	.+2      	; 0x1772 <udc_process_setup+0x392>
    1770:	36 c1       	rjmp	.+620    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	80 ec       	ldi	r24, 0xC0	; 192
    1778:	90 e2       	ldi	r25, 0x20	; 32
    177a:	5c d5       	rcall	.+2744   	; 0x2234 <udd_set_setup_payload>
    177c:	ad c1       	rjmp	.+858    	; 0x1ad8 <udc_process_setup+0x6f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	e1 f5       	brne	.+120    	; 0x17fa <udc_process_setup+0x41a>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1782:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    1786:	9a 30       	cpi	r25, 0x0A	; 10
    1788:	c1 f5       	brne	.+112    	; 0x17fa <udc_process_setup+0x41a>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    178a:	21 30       	cpi	r18, 0x01	; 1
    178c:	31 05       	cpc	r19, r1
    178e:	09 f0       	breq	.+2      	; 0x1792 <udc_process_setup+0x3b2>
    1790:	26 c1       	rjmp	.+588    	; 0x19de <udc_process_setup+0x5fe>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1792:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1796:	88 23       	and	r24, r24
    1798:	09 f4       	brne	.+2      	; 0x179c <udc_process_setup+0x3bc>
    179a:	21 c1       	rjmp	.+578    	; 0x19de <udc_process_setup+0x5fe>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    179c:	c0 91 69 24 	lds	r28, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    17a0:	d0 91 6a 24 	lds	r29, 0x246A	; 0x80246a <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    17a4:	00 91 bd 20 	lds	r16, 0x20BD	; 0x8020bd <udc_ptr_conf>
    17a8:	10 91 be 20 	lds	r17, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    17ac:	d8 01       	movw	r26, r16
    17ae:	ed 91       	ld	r30, X+
    17b0:	fc 91       	ld	r31, X
    17b2:	84 81       	ldd	r24, Z+4	; 0x04
    17b4:	c8 17       	cp	r28, r24
    17b6:	08 f0       	brcs	.+2      	; 0x17ba <udc_process_setup+0x3da>
    17b8:	12 c1       	rjmp	.+548    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	8c 2f       	mov	r24, r28
    17be:	06 dd       	rcall	.-1524   	; 0x11cc <udc_update_iface_desc>
    17c0:	88 23       	and	r24, r24
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <udc_process_setup+0x3e6>
    17c4:	0c c1       	rjmp	.+536    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    17c6:	ce 01       	movw	r24, r28
    17c8:	99 27       	eor	r25, r25
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	d8 01       	movw	r26, r16
    17d0:	12 96       	adiw	r26, 0x02	; 2
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	13 97       	sbiw	r26, 0x03	; 3
    17d8:	e8 0f       	add	r30, r24
    17da:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    17dc:	01 90       	ld	r0, Z+
    17de:	f0 81       	ld	r31, Z
    17e0:	e0 2d       	mov	r30, r0
    17e2:	86 81       	ldd	r24, Z+6	; 0x06
    17e4:	97 81       	ldd	r25, Z+7	; 0x07
    17e6:	fc 01       	movw	r30, r24
    17e8:	09 95       	icall
    17ea:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	82 ec       	ldi	r24, 0xC2	; 194
    17f4:	90 e2       	ldi	r25, 0x20	; 32
    17f6:	1e d5       	rcall	.+2620   	; 0x2234 <udd_set_setup_payload>
    17f8:	6f c1       	rjmp	.+734    	; 0x1ad8 <udc_process_setup+0x6f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    17fa:	82 30       	cpi	r24, 0x02	; 2
    17fc:	09 f0       	breq	.+2      	; 0x1800 <udc_process_setup+0x420>
    17fe:	ef c0       	rjmp	.+478    	; 0x19de <udc_process_setup+0x5fe>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1800:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    1804:	81 11       	cpse	r24, r1
    1806:	e4 c0       	rjmp	.+456    	; 0x19d0 <udc_process_setup+0x5f0>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	09 f0       	breq	.+2      	; 0x1810 <udc_process_setup+0x430>
    180e:	e7 c0       	rjmp	.+462    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1810:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    1814:	8b d5       	rcall	.+2838   	; 0x232c <udd_ep_is_halted>
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <udc_ep_status.5531>
    181c:	90 93 ba 20 	sts	0x20BA, r25	; 0x8020ba <udc_ep_status.5531+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	89 eb       	ldi	r24, 0xB9	; 185
    1826:	90 e2       	ldi	r25, 0x20	; 32
    1828:	05 d5       	rcall	.+2570   	; 0x2234 <udd_set_setup_payload>
    182a:	56 c1       	rjmp	.+684    	; 0x1ad8 <udc_process_setup+0x6f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    182c:	8f 71       	andi	r24, 0x1F	; 31
    182e:	09 f0       	breq	.+2      	; 0x1832 <udc_process_setup+0x452>
    1830:	83 c0       	rjmp	.+262    	; 0x1938 <udc_process_setup+0x558>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1832:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    1836:	93 30       	cpi	r25, 0x03	; 3
    1838:	09 f4       	brne	.+2      	; 0x183c <udc_process_setup+0x45c>
    183a:	cc c0       	rjmp	.+408    	; 0x19d4 <udc_process_setup+0x5f4>
    183c:	18 f4       	brcc	.+6      	; 0x1844 <udc_process_setup+0x464>
    183e:	91 30       	cpi	r25, 0x01	; 1
    1840:	a1 f0       	breq	.+40     	; 0x186a <udc_process_setup+0x48a>
    1842:	7a c0       	rjmp	.+244    	; 0x1938 <udc_process_setup+0x558>
    1844:	95 30       	cpi	r25, 0x05	; 5
    1846:	19 f0       	breq	.+6      	; 0x184e <udc_process_setup+0x46e>
    1848:	99 30       	cpi	r25, 0x09	; 9
    184a:	39 f1       	breq	.+78     	; 0x189a <udc_process_setup+0x4ba>
    184c:	75 c0       	rjmp	.+234    	; 0x1938 <udc_process_setup+0x558>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    184e:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    1852:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    1856:	89 2b       	or	r24, r25
    1858:	09 f0       	breq	.+2      	; 0x185c <udc_process_setup+0x47c>
    185a:	c1 c0       	rjmp	.+386    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    185c:	80 ee       	ldi	r24, 0xE0	; 224
    185e:	98 e0       	ldi	r25, 0x08	; 8
    1860:	80 93 71 24 	sts	0x2471, r24	; 0x802471 <udd_g_ctrlreq+0xc>
    1864:	90 93 72 24 	sts	0x2472, r25	; 0x802472 <udd_g_ctrlreq+0xd>
    1868:	37 c1       	rjmp	.+622    	; 0x1ad8 <udc_process_setup+0x6f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    186a:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    186e:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    1872:	89 2b       	or	r24, r25
    1874:	09 f0       	breq	.+2      	; 0x1878 <udc_process_setup+0x498>
    1876:	b3 c0       	rjmp	.+358    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1878:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    187c:	90 91 68 24 	lds	r25, 0x2468	; 0x802468 <udd_g_ctrlreq+0x3>
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	09 f0       	breq	.+2      	; 0x1886 <udc_process_setup+0x4a6>
    1884:	ac c0       	rjmp	.+344    	; 0x19de <udc_process_setup+0x5fe>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1886:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <udc_device_status>
    188a:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <udc_device_status+0x1>
    188e:	8d 7f       	andi	r24, 0xFD	; 253
    1890:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <udc_device_status>
    1894:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <udc_device_status+0x1>
    1898:	1f c1       	rjmp	.+574    	; 0x1ad8 <udc_process_setup+0x6f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    189a:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    189e:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    18a2:	89 2b       	or	r24, r25
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <udc_process_setup+0x4c8>
    18a6:	9b c0       	rjmp	.+310    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    18a8:	c2 d4       	rcall	.+2436   	; 0x222e <udd_getaddress>
    18aa:	88 23       	and	r24, r24
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <udc_process_setup+0x4d0>
    18ae:	97 c0       	rjmp	.+302    	; 0x19de <udc_process_setup+0x5fe>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    18b0:	20 91 67 24 	lds	r18, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    18b4:	30 91 68 24 	lds	r19, 0x2468	; 0x802468 <udd_g_ctrlreq+0x3>
    18b8:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    18ba:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <udc_config>
    18be:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    18c2:	81 89       	ldd	r24, Z+17	; 0x11
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	82 17       	cp	r24, r18
    18c8:	93 07       	cpc	r25, r19
    18ca:	08 f4       	brcc	.+2      	; 0x18ce <udc_process_setup+0x4ee>
    18cc:	88 c0       	rjmp	.+272    	; 0x19de <udc_process_setup+0x5fe>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    18ce:	33 dd       	rcall	.-1434   	; 0x1336 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    18d0:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    18d4:	90 91 68 24 	lds	r25, 0x2468	; 0x802468 <udd_g_ctrlreq+0x3>
    18d8:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    18dc:	88 23       	and	r24, r24
    18de:	09 f4       	brne	.+2      	; 0x18e2 <udc_process_setup+0x502>
    18e0:	fb c0       	rjmp	.+502    	; 0x1ad8 <udc_process_setup+0x6f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    18e2:	99 27       	eor	r25, r25
    18e4:	81 50       	subi	r24, 0x01	; 1
    18e6:	90 4c       	sbci	r25, 0xC0	; 192
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <udc_config+0x2>
    18f4:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <udc_config+0x3>
    18f8:	e8 0f       	add	r30, r24
    18fa:	f9 1f       	adc	r31, r25
    18fc:	e0 93 bd 20 	sts	0x20BD, r30	; 0x8020bd <udc_ptr_conf>
    1900:	f0 93 be 20 	sts	0x20BE, r31	; 0x8020be <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1904:	01 90       	ld	r0, Z+
    1906:	f0 81       	ld	r31, Z
    1908:	e0 2d       	mov	r30, r0
    190a:	84 81       	ldd	r24, Z+4	; 0x04
    190c:	88 23       	and	r24, r24
    190e:	09 f4       	brne	.+2      	; 0x1912 <udc_process_setup+0x532>
    1910:	e3 c0       	rjmp	.+454    	; 0x1ad8 <udc_process_setup+0x6f8>
    1912:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	8c 2f       	mov	r24, r28
    1918:	d5 dc       	rcall	.-1622   	; 0x12c4 <udc_iface_enable>
    191a:	88 23       	and	r24, r24
    191c:	09 f4       	brne	.+2      	; 0x1920 <udc_process_setup+0x540>
    191e:	5f c0       	rjmp	.+190    	; 0x19de <udc_process_setup+0x5fe>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1920:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1922:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <udc_ptr_conf>
    1926:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    192a:	01 90       	ld	r0, Z+
    192c:	f0 81       	ld	r31, Z
    192e:	e0 2d       	mov	r30, r0
    1930:	84 81       	ldd	r24, Z+4	; 0x04
    1932:	c8 17       	cp	r28, r24
    1934:	78 f3       	brcs	.-34     	; 0x1914 <udc_process_setup+0x534>
    1936:	d0 c0       	rjmp	.+416    	; 0x1ad8 <udc_process_setup+0x6f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	e1 f4       	brne	.+56     	; 0x1974 <udc_process_setup+0x594>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    193c:	90 91 66 24 	lds	r25, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    1940:	9b 30       	cpi	r25, 0x0B	; 11
    1942:	c1 f4       	brne	.+48     	; 0x1974 <udc_process_setup+0x594>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1944:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    1948:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    194c:	89 2b       	or	r24, r25
    194e:	09 f0       	breq	.+2      	; 0x1952 <udc_process_setup+0x572>
    1950:	46 c0       	rjmp	.+140    	; 0x19de <udc_process_setup+0x5fe>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1952:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1956:	88 23       	and	r24, r24
    1958:	09 f4       	brne	.+2      	; 0x195c <udc_process_setup+0x57c>
    195a:	41 c0       	rjmp	.+130    	; 0x19de <udc_process_setup+0x5fe>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    195c:	e5 e6       	ldi	r30, 0x65	; 101
    195e:	f4 e2       	ldi	r31, 0x24	; 36
    1960:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1962:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1964:	8c 2f       	mov	r24, r28
    1966:	6c dc       	rcall	.-1832   	; 0x1240 <udc_iface_disable>
    1968:	88 23       	and	r24, r24
    196a:	c9 f1       	breq	.+114    	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    196c:	6d 2f       	mov	r22, r29
    196e:	8c 2f       	mov	r24, r28
    1970:	a9 dc       	rcall	.-1710   	; 0x12c4 <udc_iface_enable>
    1972:	33 c0       	rjmp	.+102    	; 0x19da <udc_process_setup+0x5fa>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	99 f5       	brne	.+102    	; 0x19de <udc_process_setup+0x5fe>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1978:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_g_ctrlreq+0x1>
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	19 f0       	breq	.+6      	; 0x1986 <udc_process_setup+0x5a6>
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	89 f0       	breq	.+34     	; 0x19a6 <udc_process_setup+0x5c6>
    1984:	29 c0       	rjmp	.+82     	; 0x19d8 <udc_process_setup+0x5f8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1986:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    198a:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    198e:	89 2b       	or	r24, r25
    1990:	31 f5       	brne	.+76     	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1992:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    1996:	90 91 68 24 	lds	r25, 0x2468	; 0x802468 <udd_g_ctrlreq+0x3>
    199a:	89 2b       	or	r24, r25
    199c:	01 f5       	brne	.+64     	; 0x19de <udc_process_setup+0x5fe>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    199e:	80 91 69 24 	lds	r24, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    19a2:	df d4       	rcall	.+2494   	; 0x2362 <udd_ep_clear_halt>
    19a4:	1a c0       	rjmp	.+52     	; 0x19da <udc_process_setup+0x5fa>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19a6:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    19aa:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    19ae:	89 2b       	or	r24, r25
    19b0:	b1 f4       	brne	.+44     	; 0x19de <udc_process_setup+0x5fe>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    19b2:	80 91 67 24 	lds	r24, 0x2467	; 0x802467 <udd_g_ctrlreq+0x2>
    19b6:	90 91 68 24 	lds	r25, 0x2468	; 0x802468 <udd_g_ctrlreq+0x3>
    19ba:	89 2b       	or	r24, r25
    19bc:	81 f4       	brne	.+32     	; 0x19de <udc_process_setup+0x5fe>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    19be:	c5 e6       	ldi	r28, 0x65	; 101
    19c0:	d4 e2       	ldi	r29, 0x24	; 36
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	b7 d5       	rcall	.+2926   	; 0x2534 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	1a d6       	rcall	.+3124   	; 0x25fe <udd_ep_set_halt>
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <udc_process_setup+0x5fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	05 c0       	rjmp	.+10     	; 0x19da <udc_process_setup+0x5fa>
				break;
			}
		}
#endif
	}
	return false;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <udc_process_setup+0x5fa>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <udc_process_setup+0x5fa>
				break;
			}
		}
#endif
	}
	return false;
    19d8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    19da:	81 11       	cpse	r24, r1
    19dc:	7e c0       	rjmp	.+252    	; 0x1ada <udc_process_setup+0x6fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    19de:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq>
    19e2:	8f 71       	andi	r24, 0x1F	; 31
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	71 f5       	brne	.+92     	; 0x1a44 <udc_process_setup+0x664>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    19e8:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    19ec:	88 23       	and	r24, r24
    19ee:	51 f1       	breq	.+84     	; 0x1a44 <udc_process_setup+0x664>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    19f0:	00 91 69 24 	lds	r16, 0x2469	; 0x802469 <udd_g_ctrlreq+0x4>
    19f4:	10 91 6a 24 	lds	r17, 0x246A	; 0x80246a <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    19f8:	c0 91 bd 20 	lds	r28, 0x20BD	; 0x8020bd <udc_ptr_conf>
    19fc:	d0 91 be 20 	lds	r29, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    1a00:	e8 81       	ld	r30, Y
    1a02:	f9 81       	ldd	r31, Y+1	; 0x01
    1a04:	84 81       	ldd	r24, Z+4	; 0x04
    1a06:	08 17       	cp	r16, r24
    1a08:	e8 f4       	brcc	.+58     	; 0x1a44 <udc_process_setup+0x664>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	80 2f       	mov	r24, r16
    1a0e:	de db       	rcall	.-2116   	; 0x11cc <udc_update_iface_desc>
    1a10:	88 23       	and	r24, r24
    1a12:	c1 f0       	breq	.+48     	; 0x1a44 <udc_process_setup+0x664>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a14:	f8 01       	movw	r30, r16
    1a16:	ff 27       	eor	r31, r31
    1a18:	cf 01       	movw	r24, r30
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a20:	fb 81       	ldd	r31, Y+3	; 0x03
    1a22:	e8 0f       	add	r30, r24
    1a24:	f9 1f       	adc	r31, r25
    1a26:	c0 81       	ld	r28, Z
    1a28:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a2a:	ee 81       	ldd	r30, Y+6	; 0x06
    1a2c:	ff 81       	ldd	r31, Y+7	; 0x07
    1a2e:	09 95       	icall
    1a30:	68 2f       	mov	r22, r24
    1a32:	80 2f       	mov	r24, r16
    1a34:	cb db       	rcall	.-2154   	; 0x11cc <udc_update_iface_desc>
    1a36:	88 23       	and	r24, r24
    1a38:	29 f0       	breq	.+10     	; 0x1a44 <udc_process_setup+0x664>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1a3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a3e:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1a40:	81 11       	cpse	r24, r1
    1a42:	4b c0       	rjmp	.+150    	; 0x1ada <udc_process_setup+0x6fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1a44:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq>
    1a48:	8f 71       	andi	r24, 0x1F	; 31
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <udc_process_setup+0x670>
    1a4e:	40 c0       	rjmp	.+128    	; 0x1ad0 <udc_process_setup+0x6f0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a50:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <udc_num_configuration>
    1a54:	88 23       	and	r24, r24
    1a56:	b1 f1       	breq	.+108    	; 0x1ac4 <udc_process_setup+0x6e4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a58:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <udc_ptr_conf>
    1a5c:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    1a60:	ed 91       	ld	r30, X+
    1a62:	fc 91       	ld	r31, X
    1a64:	11 97       	sbiw	r26, 0x01	; 1
    1a66:	84 81       	ldd	r24, Z+4	; 0x04
    1a68:	88 23       	and	r24, r24
    1a6a:	71 f1       	breq	.+92     	; 0x1ac8 <udc_process_setup+0x6e8>
    1a6c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a6e:	ec 2f       	mov	r30, r28
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	12 96       	adiw	r26, 0x02	; 2
    1a78:	8d 91       	ld	r24, X+
    1a7a:	9c 91       	ld	r25, X
    1a7c:	13 97       	sbiw	r26, 0x03	; 3
    1a7e:	e8 0f       	add	r30, r24
    1a80:	f9 1f       	adc	r31, r25
    1a82:	00 81       	ld	r16, Z
    1a84:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a86:	d8 01       	movw	r26, r16
    1a88:	16 96       	adiw	r26, 0x06	; 6
    1a8a:	ed 91       	ld	r30, X+
    1a8c:	fc 91       	ld	r31, X
    1a8e:	17 97       	sbiw	r26, 0x07	; 7
    1a90:	09 95       	icall
    1a92:	68 2f       	mov	r22, r24
    1a94:	8c 2f       	mov	r24, r28
    1a96:	9a db       	rcall	.-2252   	; 0x11cc <udc_update_iface_desc>
    1a98:	88 23       	and	r24, r24
    1a9a:	f9 f0       	breq	.+62     	; 0x1ada <udc_process_setup+0x6fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1a9c:	d8 01       	movw	r26, r16
    1a9e:	14 96       	adiw	r26, 0x04	; 4
    1aa0:	ed 91       	ld	r30, X+
    1aa2:	fc 91       	ld	r31, X
    1aa4:	15 97       	sbiw	r26, 0x05	; 5
    1aa6:	09 95       	icall
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	17 c0       	rjmp	.+46     	; 0x1ada <udc_process_setup+0x6fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1aac:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1aae:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <udc_ptr_conf>
    1ab2:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <udc_ptr_conf+0x1>
    1ab6:	ed 91       	ld	r30, X+
    1ab8:	fc 91       	ld	r31, X
    1aba:	11 97       	sbiw	r26, 0x01	; 1
    1abc:	94 81       	ldd	r25, Z+4	; 0x04
    1abe:	c9 17       	cp	r28, r25
    1ac0:	b0 f2       	brcs	.-84     	; 0x1a6e <udc_process_setup+0x68e>
    1ac2:	0b c0       	rjmp	.+22     	; 0x1ada <udc_process_setup+0x6fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <udc_process_setup+0x6fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <udc_process_setup+0x6fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <udc_process_setup+0x6fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <udc_process_setup+0x6fa>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <udc_process_setup+0x6fa>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1ae4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1ae6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1ae8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1aea:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1aec:	60 83       	st	Z, r22
	ret                             // Return to caller
    1aee:	08 95       	ret

00001af0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1af0:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1af4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1af6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1af8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1afc:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1afe:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1b02:	08 95       	ret

00001b04 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1b04:	81 11       	cpse	r24, r1
    1b06:	22 c0       	rjmp	.+68     	; 0x1b4c <udd_sleep_mode+0x48>
    1b08:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1b0c:	99 23       	and	r25, r25
    1b0e:	d9 f0       	breq	.+54     	; 0x1b46 <udd_sleep_mode+0x42>
    1b10:	90 91 56 2c 	lds	r25, 0x2C56	; 0x802c56 <sleepmgr_locks+0x1>
    1b14:	91 11       	cpse	r25, r1
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <udd_sleep_mode+0x16>
    1b18:	ff cf       	rjmp	.-2      	; 0x1b18 <udd_sleep_mode+0x14>
    1b1a:	2f b7       	in	r18, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	e5 e5       	ldi	r30, 0x55	; 85
    1b20:	fc e2       	ldi	r31, 0x2C	; 44
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	2f bf       	out	0x3f, r18	; 63
    1b2a:	0d c0       	rjmp	.+26     	; 0x1b46 <udd_sleep_mode+0x42>
    1b2c:	90 91 56 2c 	lds	r25, 0x2C56	; 0x802c56 <sleepmgr_locks+0x1>
    1b30:	9f 3f       	cpi	r25, 0xFF	; 255
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <udd_sleep_mode+0x32>
    1b34:	ff cf       	rjmp	.-2      	; 0x1b34 <udd_sleep_mode+0x30>
    1b36:	2f b7       	in	r18, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	e5 e5       	ldi	r30, 0x55	; 85
    1b3c:	fc e2       	ldi	r31, 0x2C	; 44
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	9f 5f       	subi	r25, 0xFF	; 255
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	2f bf       	out	0x3f, r18	; 63
    1b46:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <udd_b_idle>
    1b4a:	08 95       	ret
    1b4c:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <udd_b_idle>
    1b50:	99 23       	and	r25, r25
    1b52:	61 f3       	breq	.-40     	; 0x1b2c <udd_sleep_mode+0x28>
    1b54:	f8 cf       	rjmp	.-16     	; 0x1b46 <udd_sleep_mode+0x42>

00001b56 <udd_ctrl_init>:
    1b56:	0f 93       	push	r16
    1b58:	e8 ec       	ldi	r30, 0xC8	; 200
    1b5a:	f4 e0       	ldi	r31, 0x04	; 4
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8f 7d       	andi	r24, 0xDF	; 223
    1b60:	80 83       	st	Z, r24
    1b62:	80 81       	ld	r24, Z
    1b64:	8f 7d       	andi	r24, 0xDF	; 223
    1b66:	80 83       	st	Z, r24
    1b68:	ec e1       	ldi	r30, 0x1C	; 28
    1b6a:	f2 e2       	ldi	r31, 0x22	; 34
    1b6c:	02 e0       	ldi	r16, 0x02	; 2
    1b6e:	05 93       	las	Z, r16
    1b70:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1b74:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1b78:	00 e2       	ldi	r16, 0x20	; 32
    1b7a:	06 93       	lac	Z, r16
    1b7c:	00 e4       	ldi	r16, 0x40	; 64
    1b7e:	06 93       	lac	Z, r16
    1b80:	e4 e1       	ldi	r30, 0x14	; 20
    1b82:	f2 e2       	ldi	r31, 0x22	; 34
    1b84:	00 e2       	ldi	r16, 0x20	; 32
    1b86:	06 93       	lac	Z, r16
    1b88:	00 e4       	ldi	r16, 0x40	; 64
    1b8a:	06 93       	lac	Z, r16
    1b8c:	e5 e6       	ldi	r30, 0x65	; 101
    1b8e:	f4 e2       	ldi	r31, 0x24	; 36
    1b90:	14 86       	std	Z+12, r1	; 0x0c
    1b92:	15 86       	std	Z+13, r1	; 0x0d
    1b94:	16 86       	std	Z+14, r1	; 0x0e
    1b96:	17 86       	std	Z+15, r1	; 0x0f
    1b98:	12 86       	std	Z+10, r1	; 0x0a
    1b9a:	13 86       	std	Z+11, r1	; 0x0b
    1b9c:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udd_ep_control_state>
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <udd_ctrl_stall_data>:
    1ba4:	0f 93       	push	r16
    1ba6:	85 e0       	ldi	r24, 0x05	; 5
    1ba8:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    1bac:	ed e1       	ldi	r30, 0x1D	; 29
    1bae:	f2 e2       	ldi	r31, 0x22	; 34
    1bb0:	04 e0       	ldi	r16, 0x04	; 4
    1bb2:	05 93       	las	Z, r16
    1bb4:	e5 e1       	ldi	r30, 0x15	; 21
    1bb6:	f2 e2       	ldi	r31, 0x22	; 34
    1bb8:	04 e0       	ldi	r16, 0x04	; 4
    1bba:	05 93       	las	Z, r16
    1bbc:	0f 91       	pop	r16
    1bbe:	08 95       	ret

00001bc0 <udd_ctrl_send_zlp_in>:
    1bc0:	0f 93       	push	r16
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    1bc8:	10 92 1e 22 	sts	0x221E, r1	; 0x80221e <udd_sram+0x1a>
    1bcc:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <udd_sram+0x1b>
    1bd0:	ec e1       	ldi	r30, 0x1C	; 28
    1bd2:	f2 e2       	ldi	r31, 0x22	; 34
    1bd4:	02 e0       	ldi	r16, 0x02	; 2
    1bd6:	06 93       	lac	Z, r16
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <udd_ctrl_endofrequest>:
    1bdc:	e0 91 71 24 	lds	r30, 0x2471	; 0x802471 <udd_g_ctrlreq+0xc>
    1be0:	f0 91 72 24 	lds	r31, 0x2472	; 0x802472 <udd_g_ctrlreq+0xd>
    1be4:	30 97       	sbiw	r30, 0x00	; 0
    1be6:	09 f0       	breq	.+2      	; 0x1bea <udd_ctrl_endofrequest+0xe>
    1be8:	09 95       	icall
    1bea:	08 95       	ret

00001bec <udd_ctrl_in_sent>:
    1bec:	0f 93       	push	r16
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    1bf6:	83 30       	cpi	r24, 0x03	; 3
    1bf8:	19 f4       	brne	.+6      	; 0x1c00 <udd_ctrl_in_sent+0x14>
    1bfa:	f0 df       	rcall	.-32     	; 0x1bdc <udd_ctrl_endofrequest>
    1bfc:	ac df       	rcall	.-168    	; 0x1b56 <udd_ctrl_init>
    1bfe:	5e c0       	rjmp	.+188    	; 0x1cbc <udd_ctrl_in_sent+0xd0>
    1c00:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1c04:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1c08:	c0 91 6f 24 	lds	r28, 0x246F	; 0x80246f <udd_g_ctrlreq+0xa>
    1c0c:	d0 91 70 24 	lds	r29, 0x2470	; 0x802470 <udd_g_ctrlreq+0xb>
    1c10:	c8 1b       	sub	r28, r24
    1c12:	d9 0b       	sbc	r29, r25
    1c14:	71 f5       	brne	.+92     	; 0x1c72 <udd_ctrl_in_sent+0x86>
    1c16:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    1c1a:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    1c1e:	82 0f       	add	r24, r18
    1c20:	93 1f       	adc	r25, r19
    1c22:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    1c26:	90 93 00 22 	sts	0x2200, r25	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    1c2a:	20 91 6b 24 	lds	r18, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    1c2e:	30 91 6c 24 	lds	r19, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    1c32:	82 17       	cp	r24, r18
    1c34:	93 07       	cpc	r25, r19
    1c36:	21 f0       	breq	.+8      	; 0x1c40 <udd_ctrl_in_sent+0x54>
    1c38:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <b_shortpacket.5272>
    1c3c:	88 23       	and	r24, r24
    1c3e:	41 f0       	breq	.+16     	; 0x1c50 <udd_ctrl_in_sent+0x64>
    1c40:	84 e0       	ldi	r24, 0x04	; 4
    1c42:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    1c46:	e4 e1       	ldi	r30, 0x14	; 20
    1c48:	f2 e2       	ldi	r31, 0x22	; 34
    1c4a:	02 e0       	ldi	r16, 0x02	; 2
    1c4c:	06 93       	lac	Z, r16
    1c4e:	36 c0       	rjmp	.+108    	; 0x1cbc <udd_ctrl_in_sent+0xd0>
    1c50:	e0 91 73 24 	lds	r30, 0x2473	; 0x802473 <udd_g_ctrlreq+0xe>
    1c54:	f0 91 74 24 	lds	r31, 0x2474	; 0x802474 <udd_g_ctrlreq+0xf>
    1c58:	30 97       	sbiw	r30, 0x00	; 0
    1c5a:	99 f0       	breq	.+38     	; 0x1c82 <udd_ctrl_in_sent+0x96>
    1c5c:	09 95       	icall
    1c5e:	88 23       	and	r24, r24
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <udd_ctrl_in_sent+0x96>
    1c62:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1c66:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1c6a:	c0 91 6f 24 	lds	r28, 0x246F	; 0x80246f <udd_g_ctrlreq+0xa>
    1c6e:	d0 91 70 24 	lds	r29, 0x2470	; 0x802470 <udd_g_ctrlreq+0xb>
    1c72:	c0 34       	cpi	r28, 0x40	; 64
    1c74:	d1 05       	cpc	r29, r1
    1c76:	28 f0       	brcs	.+10     	; 0x1c82 <udd_ctrl_in_sent+0x96>
    1c78:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <b_shortpacket.5272>
    1c7c:	c0 e4       	ldi	r28, 0x40	; 64
    1c7e:	d0 e0       	ldi	r29, 0x00	; 0
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <udd_ctrl_in_sent+0x9c>
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <b_shortpacket.5272>
    1c88:	e4 e0       	ldi	r30, 0x04	; 4
    1c8a:	f2 e2       	ldi	r31, 0x22	; 34
    1c8c:	c2 8f       	std	Z+26, r28	; 0x1a
    1c8e:	d3 8f       	std	Z+27, r29	; 0x1b
    1c90:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1c94:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1c98:	20 91 6d 24 	lds	r18, 0x246D	; 0x80246d <udd_g_ctrlreq+0x8>
    1c9c:	30 91 6e 24 	lds	r19, 0x246E	; 0x80246e <udd_g_ctrlreq+0x9>
    1ca0:	28 0f       	add	r18, r24
    1ca2:	39 1f       	adc	r19, r25
    1ca4:	24 8f       	std	Z+28, r18	; 0x1c
    1ca6:	35 8f       	std	Z+29, r19	; 0x1d
    1ca8:	c8 0f       	add	r28, r24
    1caa:	d9 1f       	adc	r29, r25
    1cac:	c0 93 fd 21 	sts	0x21FD, r28	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1cb0:	d0 93 fe 21 	sts	0x21FE, r29	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1cb4:	ec e1       	ldi	r30, 0x1C	; 28
    1cb6:	f2 e2       	ldi	r31, 0x22	; 34
    1cb8:	02 e0       	ldi	r16, 0x02	; 2
    1cba:	06 93       	lac	Z, r16
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	0f 91       	pop	r16
    1cc2:	08 95       	ret

00001cc4 <udd_ep_get_size>:
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	81 81       	ldd	r24, Z+1	; 0x01
    1cc8:	e8 2f       	mov	r30, r24
    1cca:	e7 70       	andi	r30, 0x07	; 7
    1ccc:	8e 2f       	mov	r24, r30
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	31 97       	sbiw	r30, 0x01	; 1
    1cd4:	e7 30       	cpi	r30, 0x07	; 7
    1cd6:	f1 05       	cpc	r31, r1
    1cd8:	c0 f4       	brcc	.+48     	; 0x1d0a <udd_ep_get_size+0x46>
    1cda:	e2 5e       	subi	r30, 0xE2	; 226
    1cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cde:	74 c6       	rjmp	.+3304   	; 0x29c8 <__tablejump2__>
    1ce0:	80 e1       	ldi	r24, 0x10	; 16
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	08 95       	ret
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	08 95       	ret
    1cec:	80 e4       	ldi	r24, 0x40	; 64
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	08 95       	ret
    1cf2:	80 e8       	ldi	r24, 0x80	; 128
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	08 95       	ret
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	08 95       	ret
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	92 e0       	ldi	r25, 0x02	; 2
    1d02:	08 95       	ret
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	93 e0       	ldi	r25, 0x03	; 3
    1d08:	08 95       	ret
    1d0a:	88 e0       	ldi	r24, 0x08	; 8
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	08 95       	ret

00001d10 <udd_ep_get_job>:
    1d10:	28 2f       	mov	r18, r24
    1d12:	2f 70       	andi	r18, 0x0F	; 15
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	08 2e       	mov	r0, r24
    1d1c:	00 0c       	add	r0, r0
    1d1e:	99 0b       	sbc	r25, r25
    1d20:	88 27       	eor	r24, r24
    1d22:	99 0f       	add	r25, r25
    1d24:	88 1f       	adc	r24, r24
    1d26:	99 27       	eor	r25, r25
    1d28:	82 0f       	add	r24, r18
    1d2a:	93 1f       	adc	r25, r19
    1d2c:	02 97       	sbiw	r24, 0x02	; 2
    1d2e:	9c 01       	movw	r18, r24
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	22 0f       	add	r18, r18
    1d36:	33 1f       	adc	r19, r19
    1d38:	22 0f       	add	r18, r18
    1d3a:	33 1f       	adc	r19, r19
    1d3c:	82 0f       	add	r24, r18
    1d3e:	93 1f       	adc	r25, r19
    1d40:	89 57       	subi	r24, 0x79	; 121
    1d42:	9e 4d       	sbci	r25, 0xDE	; 222
    1d44:	08 95       	ret

00001d46 <udd_ctrl_interrupt_tc_setup>:
    1d46:	0f 93       	push	r16
    1d48:	cf 93       	push	r28
    1d4a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1d4e:	80 ff       	sbrs	r24, 0
    1d50:	62 c0       	rjmp	.+196    	; 0x1e16 <udd_ctrl_interrupt_tc_setup+0xd0>
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1d58:	e4 e1       	ldi	r30, 0x14	; 20
    1d5a:	f2 e2       	ldi	r31, 0x22	; 34
    1d5c:	00 e8       	ldi	r16, 0x80	; 128
    1d5e:	06 93       	lac	Z, r16
    1d60:	ec e1       	ldi	r30, 0x1C	; 28
    1d62:	f2 e2       	ldi	r31, 0x22	; 34
    1d64:	00 e8       	ldi	r16, 0x80	; 128
    1d66:	06 93       	lac	Z, r16
    1d68:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1d6c:	e4 e1       	ldi	r30, 0x14	; 20
    1d6e:	f2 e2       	ldi	r31, 0x22	; 34
    1d70:	00 e1       	ldi	r16, 0x10	; 16
    1d72:	06 93       	lac	Z, r16
    1d74:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    1d78:	88 23       	and	r24, r24
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <udd_ctrl_interrupt_tc_setup+0x40>
    1d7c:	83 50       	subi	r24, 0x03	; 3
    1d7e:	82 30       	cpi	r24, 0x02	; 2
    1d80:	08 f4       	brcc	.+2      	; 0x1d84 <udd_ctrl_interrupt_tc_setup+0x3e>
    1d82:	2c df       	rcall	.-424    	; 0x1bdc <udd_ctrl_endofrequest>
    1d84:	e8 de       	rcall	.-560    	; 0x1b56 <udd_ctrl_init>
    1d86:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <udd_sram+0x12>
    1d8a:	90 91 17 22 	lds	r25, 0x2217	; 0x802217 <udd_sram+0x13>
    1d8e:	08 97       	sbiw	r24, 0x08	; 8
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <udd_ctrl_interrupt_tc_setup+0x4e>
    1d92:	43 c0       	rjmp	.+134    	; 0x1e1a <udd_ctrl_interrupt_tc_setup+0xd4>
    1d94:	88 e0       	ldi	r24, 0x08	; 8
    1d96:	ed eb       	ldi	r30, 0xBD	; 189
    1d98:	f1 e2       	ldi	r31, 0x21	; 33
    1d9a:	a5 e6       	ldi	r26, 0x65	; 101
    1d9c:	b4 e2       	ldi	r27, 0x24	; 36
    1d9e:	01 90       	ld	r0, Z+
    1da0:	0d 92       	st	X+, r0
    1da2:	8a 95       	dec	r24
    1da4:	e1 f7       	brne	.-8      	; 0x1d9e <udd_ctrl_interrupt_tc_setup+0x58>
    1da6:	e8 ec       	ldi	r30, 0xC8	; 200
    1da8:	f4 e0       	ldi	r31, 0x04	; 4
    1daa:	80 81       	ld	r24, Z
    1dac:	80 62       	ori	r24, 0x20	; 32
    1dae:	80 83       	st	Z, r24
    1db0:	80 81       	ld	r24, Z
    1db2:	80 62       	ori	r24, 0x20	; 32
    1db4:	80 83       	st	Z, r24
    1db6:	14 db       	rcall	.-2520   	; 0x13e0 <udc_process_setup>
    1db8:	c8 2f       	mov	r28, r24
    1dba:	81 11       	cpse	r24, r1
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <udd_ctrl_interrupt_tc_setup+0x7e>
    1dbe:	f2 de       	rcall	.-540    	; 0x1ba4 <udd_ctrl_stall_data>
    1dc0:	c1 e0       	ldi	r28, 0x01	; 1
    1dc2:	2c c0       	rjmp	.+88     	; 0x1e1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1dc4:	80 91 65 24 	lds	r24, 0x2465	; 0x802465 <udd_g_ctrlreq>
    1dc8:	88 23       	and	r24, r24
    1dca:	6c f4       	brge	.+26     	; 0x1de6 <udd_ctrl_interrupt_tc_setup+0xa0>
    1dcc:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    1dd0:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    1dd4:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1dd8:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    1de2:	04 df       	rcall	.-504    	; 0x1bec <udd_ctrl_in_sent>
    1de4:	1b c0       	rjmp	.+54     	; 0x1e1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1de6:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    1dea:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    1dee:	89 2b       	or	r24, r25
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <udd_ctrl_interrupt_tc_setup+0xb0>
    1df2:	e6 de       	rcall	.-564    	; 0x1bc0 <udd_ctrl_send_zlp_in>
    1df4:	13 c0       	rjmp	.+38     	; 0x1e1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1df6:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    1dfa:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    1dfe:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_payload_nb_trans>
    1e02:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
    1e0c:	e4 e1       	ldi	r30, 0x14	; 20
    1e0e:	f2 e2       	ldi	r31, 0x22	; 34
    1e10:	02 e0       	ldi	r16, 0x02	; 2
    1e12:	06 93       	lac	Z, r16
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1e16:	c0 e0       	ldi	r28, 0x00	; 0
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <udd_ctrl_interrupt_tc_setup+0xd6>
    1e1a:	c1 e0       	ldi	r28, 0x01	; 1
    1e1c:	8c 2f       	mov	r24, r28
    1e1e:	cf 91       	pop	r28
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <udd_ep_trans_complet>:
    1e24:	8f 92       	push	r8
    1e26:	9f 92       	push	r9
    1e28:	af 92       	push	r10
    1e2a:	bf 92       	push	r11
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	d8 2e       	mov	r13, r24
    1e3c:	69 df       	rcall	.-302    	; 0x1d10 <udd_ep_get_job>
    1e3e:	8c 01       	movw	r16, r24
    1e40:	bd 2c       	mov	r11, r13
    1e42:	bb 1c       	adc	r11, r11
    1e44:	bb 24       	eor	r11, r11
    1e46:	bb 1c       	adc	r11, r11
    1e48:	cd 2d       	mov	r28, r13
    1e4a:	cf 70       	andi	r28, 0x0F	; 15
    1e4c:	d0 e0       	ldi	r29, 0x00	; 0
    1e4e:	cc 0f       	add	r28, r28
    1e50:	dd 1f       	adc	r29, r29
    1e52:	cb 0d       	add	r28, r11
    1e54:	d1 1d       	adc	r29, r1
    1e56:	ce 01       	movw	r24, r28
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	9c 01       	movw	r18, r24
    1e66:	2c 5e       	subi	r18, 0xEC	; 236
    1e68:	3d 4d       	sbci	r19, 0xDD	; 221
    1e6a:	79 01       	movw	r14, r18
    1e6c:	c9 01       	movw	r24, r18
    1e6e:	2a df       	rcall	.-428    	; 0x1cc4 <udd_ep_get_size>
    1e70:	4c 01       	movw	r8, r24
    1e72:	bb 20       	and	r11, r11
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <udd_ep_trans_complet+0x54>
    1e76:	70 c0       	rjmp	.+224    	; 0x1f58 <udd_ep_trans_complet+0x134>
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	ee 0f       	add	r30, r30
    1e80:	ff 1f       	adc	r31, r31
    1e82:	ee 0f       	add	r30, r30
    1e84:	ff 1f       	adc	r31, r31
    1e86:	ec 5f       	subi	r30, 0xFC	; 252
    1e88:	fd 4d       	sbci	r31, 0xDD	; 221
    1e8a:	26 89       	ldd	r18, Z+22	; 0x16
    1e8c:	37 89       	ldd	r19, Z+23	; 0x17
    1e8e:	d8 01       	movw	r26, r16
    1e90:	15 96       	adiw	r26, 0x05	; 5
    1e92:	8d 91       	ld	r24, X+
    1e94:	9c 91       	ld	r25, X
    1e96:	16 97       	sbiw	r26, 0x06	; 6
    1e98:	82 0f       	add	r24, r18
    1e9a:	93 1f       	adc	r25, r19
    1e9c:	15 96       	adiw	r26, 0x05	; 5
    1e9e:	8d 93       	st	X+, r24
    1ea0:	9c 93       	st	X, r25
    1ea2:	16 97       	sbiw	r26, 0x06	; 6
    1ea4:	13 96       	adiw	r26, 0x03	; 3
    1ea6:	2d 91       	ld	r18, X+
    1ea8:	3c 91       	ld	r19, X
    1eaa:	14 97       	sbiw	r26, 0x04	; 4
    1eac:	82 17       	cp	r24, r18
    1eae:	93 07       	cpc	r25, r19
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <udd_ep_trans_complet+0x90>
    1eb2:	3c c0       	rjmp	.+120    	; 0x1f2c <udd_ep_trans_complet+0x108>
    1eb4:	28 1b       	sub	r18, r24
    1eb6:	39 0b       	sbc	r19, r25
    1eb8:	21 15       	cp	r18, r1
    1eba:	b4 e0       	ldi	r27, 0x04	; 4
    1ebc:	3b 07       	cpc	r19, r27
    1ebe:	38 f0       	brcs	.+14     	; 0x1ece <udd_ep_trans_complet+0xaa>
    1ec0:	2f ef       	ldi	r18, 0xFF	; 255
    1ec2:	33 e0       	ldi	r19, 0x03	; 3
    1ec4:	c9 01       	movw	r24, r18
    1ec6:	b4 01       	movw	r22, r8
    1ec8:	6b d5       	rcall	.+2774   	; 0x29a0 <__udivmodhi4>
    1eca:	28 1b       	sub	r18, r24
    1ecc:	39 0b       	sbc	r19, r25
    1ece:	f8 01       	movw	r30, r16
    1ed0:	80 81       	ld	r24, Z
    1ed2:	81 ff       	sbrs	r24, 1
    1ed4:	09 c0       	rjmp	.+18     	; 0x1ee8 <udd_ep_trans_complet+0xc4>
    1ed6:	c9 01       	movw	r24, r18
    1ed8:	b4 01       	movw	r22, r8
    1eda:	62 d5       	rcall	.+2756   	; 0x29a0 <__udivmodhi4>
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	89 2b       	or	r24, r25
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <udd_ep_trans_complet+0xc0>
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	84 2f       	mov	r24, r20
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <udd_ep_trans_complet+0xc6>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	d8 01       	movw	r26, r16
    1eec:	9c 91       	ld	r25, X
    1eee:	80 fb       	bst	r24, 0
    1ef0:	91 f9       	bld	r25, 1
    1ef2:	9c 93       	st	X, r25
    1ef4:	cc 0f       	add	r28, r28
    1ef6:	dd 1f       	adc	r29, r29
    1ef8:	cc 0f       	add	r28, r28
    1efa:	dd 1f       	adc	r29, r29
    1efc:	cc 0f       	add	r28, r28
    1efe:	dd 1f       	adc	r29, r29
    1f00:	cc 5f       	subi	r28, 0xFC	; 252
    1f02:	dd 4d       	sbci	r29, 0xDD	; 221
    1f04:	1e 8a       	std	Y+22, r1	; 0x16
    1f06:	1f 8a       	std	Y+23, r1	; 0x17
    1f08:	2a 8b       	std	Y+18, r18	; 0x12
    1f0a:	3b 8b       	std	Y+19, r19	; 0x13
    1f0c:	11 96       	adiw	r26, 0x01	; 1
    1f0e:	2d 91       	ld	r18, X+
    1f10:	3c 91       	ld	r19, X
    1f12:	12 97       	sbiw	r26, 0x02	; 2
    1f14:	15 96       	adiw	r26, 0x05	; 5
    1f16:	8d 91       	ld	r24, X+
    1f18:	9c 91       	ld	r25, X
    1f1a:	16 97       	sbiw	r26, 0x06	; 6
    1f1c:	82 0f       	add	r24, r18
    1f1e:	93 1f       	adc	r25, r19
    1f20:	8c 8b       	std	Y+20, r24	; 0x14
    1f22:	9d 8b       	std	Y+21, r25	; 0x15
    1f24:	f7 01       	movw	r30, r14
    1f26:	02 e0       	ldi	r16, 0x02	; 2
    1f28:	06 93       	lac	Z, r16
    1f2a:	ca c0       	rjmp	.+404    	; 0x20c0 <udd_ep_trans_complet+0x29c>
    1f2c:	d8 01       	movw	r26, r16
    1f2e:	8c 91       	ld	r24, X
    1f30:	81 ff       	sbrs	r24, 1
    1f32:	b3 c0       	rjmp	.+358    	; 0x209a <udd_ep_trans_complet+0x276>
    1f34:	8d 7f       	andi	r24, 0xFD	; 253
    1f36:	8c 93       	st	X, r24
    1f38:	cc 0f       	add	r28, r28
    1f3a:	dd 1f       	adc	r29, r29
    1f3c:	cc 0f       	add	r28, r28
    1f3e:	dd 1f       	adc	r29, r29
    1f40:	cc 0f       	add	r28, r28
    1f42:	dd 1f       	adc	r29, r29
    1f44:	cc 5f       	subi	r28, 0xFC	; 252
    1f46:	dd 4d       	sbci	r29, 0xDD	; 221
    1f48:	1e 8a       	std	Y+22, r1	; 0x16
    1f4a:	1f 8a       	std	Y+23, r1	; 0x17
    1f4c:	1a 8a       	std	Y+18, r1	; 0x12
    1f4e:	1b 8a       	std	Y+19, r1	; 0x13
    1f50:	f7 01       	movw	r30, r14
    1f52:	02 e0       	ldi	r16, 0x02	; 2
    1f54:	06 93       	lac	Z, r16
    1f56:	b4 c0       	rjmp	.+360    	; 0x20c0 <udd_ep_trans_complet+0x29c>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	ec 5f       	subi	r30, 0xFC	; 252
    1f68:	fd 4d       	sbci	r31, 0xDD	; 221
    1f6a:	a2 88       	ldd	r10, Z+18	; 0x12
    1f6c:	b3 88       	ldd	r11, Z+19	; 0x13
    1f6e:	d8 01       	movw	r26, r16
    1f70:	8c 91       	ld	r24, X
    1f72:	82 ff       	sbrs	r24, 2
    1f74:	19 c0       	rjmp	.+50     	; 0x1fa8 <udd_ep_trans_complet+0x184>
    1f76:	11 96       	adiw	r26, 0x01	; 1
    1f78:	ed 91       	ld	r30, X+
    1f7a:	fc 91       	ld	r31, X
    1f7c:	12 97       	sbiw	r26, 0x02	; 2
    1f7e:	15 96       	adiw	r26, 0x05	; 5
    1f80:	2d 91       	ld	r18, X+
    1f82:	3c 91       	ld	r19, X
    1f84:	16 97       	sbiw	r26, 0x06	; 6
    1f86:	13 96       	adiw	r26, 0x03	; 3
    1f88:	8d 91       	ld	r24, X+
    1f8a:	9c 91       	ld	r25, X
    1f8c:	14 97       	sbiw	r26, 0x04	; 4
    1f8e:	b4 01       	movw	r22, r8
    1f90:	07 d5       	rcall	.+2574   	; 0x29a0 <__udivmodhi4>
    1f92:	b0 e4       	ldi	r27, 0x40	; 64
    1f94:	db 9e       	mul	r13, r27
    1f96:	b0 01       	movw	r22, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	69 57       	subi	r22, 0x79	; 121
    1f9c:	7f 4d       	sbci	r23, 0xDF	; 223
    1f9e:	ac 01       	movw	r20, r24
    1fa0:	cf 01       	movw	r24, r30
    1fa2:	82 0f       	add	r24, r18
    1fa4:	93 1f       	adc	r25, r19
    1fa6:	16 d5       	rcall	.+2604   	; 0x29d4 <memcpy>
    1fa8:	f8 01       	movw	r30, r16
    1faa:	25 81       	ldd	r18, Z+5	; 0x05
    1fac:	36 81       	ldd	r19, Z+6	; 0x06
    1fae:	2a 0d       	add	r18, r10
    1fb0:	3b 1d       	adc	r19, r11
    1fb2:	25 83       	std	Z+5, r18	; 0x05
    1fb4:	36 83       	std	Z+6, r19	; 0x06
    1fb6:	83 81       	ldd	r24, Z+3	; 0x03
    1fb8:	94 81       	ldd	r25, Z+4	; 0x04
    1fba:	82 17       	cp	r24, r18
    1fbc:	93 07       	cpc	r25, r19
    1fbe:	68 f4       	brcc	.+26     	; 0x1fda <udd_ep_trans_complet+0x1b6>
    1fc0:	85 83       	std	Z+5, r24	; 0x05
    1fc2:	96 83       	std	Z+6, r25	; 0x06
    1fc4:	cc 0f       	add	r28, r28
    1fc6:	dd 1f       	adc	r29, r29
    1fc8:	cc 0f       	add	r28, r28
    1fca:	dd 1f       	adc	r29, r29
    1fcc:	cc 0f       	add	r28, r28
    1fce:	dd 1f       	adc	r29, r29
    1fd0:	cc 5f       	subi	r28, 0xFC	; 252
    1fd2:	dd 4d       	sbci	r29, 0xDD	; 221
    1fd4:	8e 89       	ldd	r24, Y+22	; 0x16
    1fd6:	9f 89       	ldd	r25, Y+23	; 0x17
    1fd8:	60 c0       	rjmp	.+192    	; 0x209a <udd_ep_trans_complet+0x276>
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ec 5f       	subi	r30, 0xFC	; 252
    1fea:	fd 4d       	sbci	r31, 0xDD	; 221
    1fec:	46 89       	ldd	r20, Z+22	; 0x16
    1fee:	57 89       	ldd	r21, Z+23	; 0x17
    1ff0:	4a 15       	cp	r20, r10
    1ff2:	5b 05       	cpc	r21, r11
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <udd_ep_trans_complet+0x1d4>
    1ff6:	51 c0       	rjmp	.+162    	; 0x209a <udd_ep_trans_complet+0x276>
    1ff8:	28 17       	cp	r18, r24
    1ffa:	39 07       	cpc	r19, r25
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <udd_ep_trans_complet+0x1dc>
    1ffe:	4d c0       	rjmp	.+154    	; 0x209a <udd_ep_trans_complet+0x276>
    2000:	ac 01       	movw	r20, r24
    2002:	42 1b       	sub	r20, r18
    2004:	53 0b       	sbc	r21, r19
    2006:	9a 01       	movw	r18, r20
    2008:	21 15       	cp	r18, r1
    200a:	54 e0       	ldi	r21, 0x04	; 4
    200c:	35 07       	cpc	r19, r21
    200e:	50 f0       	brcs	.+20     	; 0x2024 <udd_ep_trans_complet+0x200>
    2010:	2f ef       	ldi	r18, 0xFF	; 255
    2012:	33 e0       	ldi	r19, 0x03	; 3
    2014:	c9 01       	movw	r24, r18
    2016:	b4 01       	movw	r22, r8
    2018:	c3 d4       	rcall	.+2438   	; 0x29a0 <__udivmodhi4>
    201a:	d9 01       	movw	r26, r18
    201c:	a8 1b       	sub	r26, r24
    201e:	b9 0b       	sbc	r27, r25
    2020:	cd 01       	movw	r24, r26
    2022:	07 c0       	rjmp	.+14     	; 0x2032 <udd_ep_trans_complet+0x20e>
    2024:	c9 01       	movw	r24, r18
    2026:	b4 01       	movw	r22, r8
    2028:	bb d4       	rcall	.+2422   	; 0x29a0 <__udivmodhi4>
    202a:	f9 01       	movw	r30, r18
    202c:	e8 1b       	sub	r30, r24
    202e:	f9 0b       	sbc	r31, r25
    2030:	cf 01       	movw	r24, r30
    2032:	fe 01       	movw	r30, r28
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	ee 0f       	add	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	ec 5f       	subi	r30, 0xFC	; 252
    2042:	fd 4d       	sbci	r31, 0xDD	; 221
    2044:	12 8a       	std	Z+18, r1	; 0x12
    2046:	13 8a       	std	Z+19, r1	; 0x13
    2048:	88 15       	cp	r24, r8
    204a:	99 05       	cpc	r25, r9
    204c:	78 f4       	brcc	.+30     	; 0x206c <udd_ep_trans_complet+0x248>
    204e:	d8 01       	movw	r26, r16
    2050:	8c 91       	ld	r24, X
    2052:	84 60       	ori	r24, 0x04	; 4
    2054:	8c 93       	st	X, r24
    2056:	b0 e4       	ldi	r27, 0x40	; 64
    2058:	db 9e       	mul	r13, r27
    205a:	c0 01       	movw	r24, r0
    205c:	11 24       	eor	r1, r1
    205e:	89 57       	subi	r24, 0x79	; 121
    2060:	9f 4d       	sbci	r25, 0xDF	; 223
    2062:	84 8b       	std	Z+20, r24	; 0x14
    2064:	95 8b       	std	Z+21, r25	; 0x15
    2066:	86 8a       	std	Z+22, r8	; 0x16
    2068:	97 8a       	std	Z+23, r9	; 0x17
    206a:	13 c0       	rjmp	.+38     	; 0x2092 <udd_ep_trans_complet+0x26e>
    206c:	f8 01       	movw	r30, r16
    206e:	41 81       	ldd	r20, Z+1	; 0x01
    2070:	52 81       	ldd	r21, Z+2	; 0x02
    2072:	25 81       	ldd	r18, Z+5	; 0x05
    2074:	36 81       	ldd	r19, Z+6	; 0x06
    2076:	24 0f       	add	r18, r20
    2078:	35 1f       	adc	r19, r21
    207a:	cc 0f       	add	r28, r28
    207c:	dd 1f       	adc	r29, r29
    207e:	cc 0f       	add	r28, r28
    2080:	dd 1f       	adc	r29, r29
    2082:	cc 0f       	add	r28, r28
    2084:	dd 1f       	adc	r29, r29
    2086:	cc 5f       	subi	r28, 0xFC	; 252
    2088:	dd 4d       	sbci	r29, 0xDD	; 221
    208a:	2c 8b       	std	Y+20, r18	; 0x14
    208c:	3d 8b       	std	Y+21, r19	; 0x15
    208e:	8e 8b       	std	Y+22, r24	; 0x16
    2090:	9f 8b       	std	Y+23, r25	; 0x17
    2092:	f7 01       	movw	r30, r14
    2094:	02 e0       	ldi	r16, 0x02	; 2
    2096:	06 93       	lac	Z, r16
    2098:	13 c0       	rjmp	.+38     	; 0x20c0 <udd_ep_trans_complet+0x29c>
    209a:	d8 01       	movw	r26, r16
    209c:	8c 91       	ld	r24, X
    209e:	80 ff       	sbrs	r24, 0
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <udd_ep_trans_complet+0x29c>
    20a2:	8e 7f       	andi	r24, 0xFE	; 254
    20a4:	8c 93       	st	X, r24
    20a6:	17 96       	adiw	r26, 0x07	; 7
    20a8:	ed 91       	ld	r30, X+
    20aa:	fc 91       	ld	r31, X
    20ac:	18 97       	sbiw	r26, 0x08	; 8
    20ae:	30 97       	sbiw	r30, 0x00	; 0
    20b0:	39 f0       	breq	.+14     	; 0x20c0 <udd_ep_trans_complet+0x29c>
    20b2:	15 96       	adiw	r26, 0x05	; 5
    20b4:	6d 91       	ld	r22, X+
    20b6:	7c 91       	ld	r23, X
    20b8:	16 97       	sbiw	r26, 0x06	; 6
    20ba:	4d 2d       	mov	r20, r13
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	09 95       	icall
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	bf 90       	pop	r11
    20d0:	af 90       	pop	r10
    20d2:	9f 90       	pop	r9
    20d4:	8f 90       	pop	r8
    20d6:	08 95       	ret

000020d8 <udd_attach>:
    20d8:	cf 93       	push	r28
    20da:	cf b7       	in	r28, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	11 dd       	rcall	.-1502   	; 0x1b04 <udd_sleep_mode>
    20e2:	ea ec       	ldi	r30, 0xCA	; 202
    20e4:	f4 e0       	ldi	r31, 0x04	; 4
    20e6:	80 e4       	ldi	r24, 0x40	; 64
    20e8:	80 83       	st	Z, r24
    20ea:	80 e2       	ldi	r24, 0x20	; 32
    20ec:	80 83       	st	Z, r24
    20ee:	e1 ec       	ldi	r30, 0xC1	; 193
    20f0:	f4 e0       	ldi	r31, 0x04	; 4
    20f2:	80 81       	ld	r24, Z
    20f4:	81 60       	ori	r24, 0x01	; 1
    20f6:	80 83       	st	Z, r24
    20f8:	a9 ec       	ldi	r26, 0xC9	; 201
    20fa:	b4 e0       	ldi	r27, 0x04	; 4
    20fc:	8c 91       	ld	r24, X
    20fe:	82 60       	ori	r24, 0x02	; 2
    2100:	8c 93       	st	X, r24
    2102:	e8 ec       	ldi	r30, 0xC8	; 200
    2104:	f4 e0       	ldi	r31, 0x04	; 4
    2106:	80 81       	ld	r24, Z
    2108:	80 64       	ori	r24, 0x40	; 64
    210a:	80 83       	st	Z, r24
    210c:	8c 91       	ld	r24, X
    210e:	81 60       	ori	r24, 0x01	; 1
    2110:	8c 93       	st	X, r24
    2112:	80 81       	ld	r24, Z
    2114:	80 68       	ori	r24, 0x80	; 128
    2116:	80 83       	st	Z, r24
    2118:	cf bf       	out	0x3f, r28	; 63
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <udd_enable>:
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	c0 e6       	ldi	r28, 0x60	; 96
    2124:	d0 e0       	ldi	r29, 0x00	; 0
    2126:	18 82       	st	Y, r1
    2128:	80 e3       	ldi	r24, 0x30	; 48
    212a:	0e 94 19 08 	call	0x1032	; 0x1032 <sysclk_enable_usb>
    212e:	e0 ec       	ldi	r30, 0xC0	; 192
    2130:	f4 e0       	ldi	r31, 0x04	; 4
    2132:	80 81       	ld	r24, Z
    2134:	80 64       	ori	r24, 0x40	; 64
    2136:	80 83       	st	Z, r24
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	88 83       	st	Y, r24
    213c:	cf b7       	in	r28, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	fc 01       	movw	r30, r24
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	ee 0f       	add	r30, r30
    2150:	ff 1f       	adc	r31, r31
    2152:	ec 5f       	subi	r30, 0xFC	; 252
    2154:	fd 4d       	sbci	r31, 0xDD	; 221
    2156:	11 8a       	std	Z+17, r1	; 0x11
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	88 30       	cpi	r24, 0x08	; 8
    215c:	91 05       	cpc	r25, r1
    215e:	91 f7       	brne	.-28     	; 0x2144 <udd_enable+0x26>
    2160:	e7 e8       	ldi	r30, 0x87	; 135
    2162:	f1 e2       	ldi	r31, 0x21	; 33
    2164:	80 81       	ld	r24, Z
    2166:	8e 7f       	andi	r24, 0xFE	; 254
    2168:	80 83       	st	Z, r24
    216a:	e0 e9       	ldi	r30, 0x90	; 144
    216c:	f1 e2       	ldi	r31, 0x21	; 33
    216e:	80 81       	ld	r24, Z
    2170:	8e 7f       	andi	r24, 0xFE	; 254
    2172:	80 83       	st	Z, r24
    2174:	e9 e9       	ldi	r30, 0x99	; 153
    2176:	f1 e2       	ldi	r31, 0x21	; 33
    2178:	80 81       	ld	r24, Z
    217a:	8e 7f       	andi	r24, 0xFE	; 254
    217c:	80 83       	st	Z, r24
    217e:	e2 ea       	ldi	r30, 0xA2	; 162
    2180:	f1 e2       	ldi	r31, 0x21	; 33
    2182:	80 81       	ld	r24, Z
    2184:	8e 7f       	andi	r24, 0xFE	; 254
    2186:	80 83       	st	Z, r24
    2188:	eb ea       	ldi	r30, 0xAB	; 171
    218a:	f1 e2       	ldi	r31, 0x21	; 33
    218c:	80 81       	ld	r24, Z
    218e:	8e 7f       	andi	r24, 0xFE	; 254
    2190:	80 83       	st	Z, r24
    2192:	e4 eb       	ldi	r30, 0xB4	; 180
    2194:	f1 e2       	ldi	r31, 0x21	; 33
    2196:	80 81       	ld	r24, Z
    2198:	8e 7f       	andi	r24, 0xFE	; 254
    219a:	80 83       	st	Z, r24
    219c:	6a e1       	ldi	r22, 0x1A	; 26
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	a6 dc       	rcall	.-1716   	; 0x1af0 <nvm_read_byte>
    21a4:	8f 3f       	cpi	r24, 0xFF	; 255
    21a6:	19 f0       	breq	.+6      	; 0x21ae <udd_enable+0x90>
    21a8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <udd_enable+0x96>
    21ae:	8f e1       	ldi	r24, 0x1F	; 31
    21b0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    21b4:	6b e1       	ldi	r22, 0x1B	; 27
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	9a dc       	rcall	.-1740   	; 0x1af0 <nvm_read_byte>
    21bc:	8f 3f       	cpi	r24, 0xFF	; 255
    21be:	19 f0       	breq	.+6      	; 0x21c6 <udd_enable+0xa8>
    21c0:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <udd_enable+0xae>
    21c6:	8f e1       	ldi	r24, 0x1F	; 31
    21c8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    21cc:	e0 ec       	ldi	r30, 0xC0	; 192
    21ce:	f4 e0       	ldi	r31, 0x04	; 4
    21d0:	80 81       	ld	r24, Z
    21d2:	83 60       	ori	r24, 0x03	; 3
    21d4:	80 83       	st	Z, r24
    21d6:	80 81       	ld	r24, Z
    21d8:	80 68       	ori	r24, 0x80	; 128
    21da:	80 83       	st	Z, r24
    21dc:	80 81       	ld	r24, Z
    21de:	80 61       	ori	r24, 0x10	; 16
    21e0:	80 83       	st	Z, r24
    21e2:	84 e1       	ldi	r24, 0x14	; 20
    21e4:	92 e2       	ldi	r25, 0x22	; 34
    21e6:	86 83       	std	Z+6, r24	; 0x06
    21e8:	97 83       	std	Z+7, r25	; 0x07
    21ea:	80 81       	ld	r24, Z
    21ec:	80 62       	ori	r24, 0x20	; 32
    21ee:	80 83       	st	Z, r24
    21f0:	8f ef       	ldi	r24, 0xFF	; 255
    21f2:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    21f6:	e8 ec       	ldi	r30, 0xC8	; 200
    21f8:	f4 e0       	ldi	r31, 0x04	; 4
    21fa:	80 81       	ld	r24, Z
    21fc:	82 60       	ori	r24, 0x02	; 2
    21fe:	80 83       	st	Z, r24
    2200:	10 92 58 22 	sts	0x2258, r1	; 0x802258 <udd_b_idle>
    2204:	80 91 5a 2c 	lds	r24, 0x2C5A	; 0x802c5a <sleepmgr_locks+0x5>
    2208:	8f 3f       	cpi	r24, 0xFF	; 255
    220a:	09 f4       	brne	.+2      	; 0x220e <udd_enable+0xf0>
    220c:	ff cf       	rjmp	.-2      	; 0x220c <udd_enable+0xee>
    220e:	9f b7       	in	r25, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	e5 e5       	ldi	r30, 0x55	; 85
    2214:	fc e2       	ldi	r31, 0x2C	; 44
    2216:	85 81       	ldd	r24, Z+5	; 0x05
    2218:	8f 5f       	subi	r24, 0xFF	; 255
    221a:	85 83       	std	Z+5, r24	; 0x05
    221c:	9f bf       	out	0x3f, r25	; 63
    221e:	5c df       	rcall	.-328    	; 0x20d8 <udd_attach>
    2220:	cf bf       	out	0x3f, r28	; 63
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	08 95       	ret

00002228 <udd_set_address>:
    2228:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    222c:	08 95       	ret

0000222e <udd_getaddress>:
    222e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    2232:	08 95       	ret

00002234 <udd_set_setup_payload>:
    2234:	e5 e6       	ldi	r30, 0x65	; 101
    2236:	f4 e2       	ldi	r31, 0x24	; 36
    2238:	80 87       	std	Z+8, r24	; 0x08
    223a:	91 87       	std	Z+9, r25	; 0x09
    223c:	62 87       	std	Z+10, r22	; 0x0a
    223e:	73 87       	std	Z+11, r23	; 0x0b
    2240:	08 95       	ret

00002242 <udd_ep_alloc>:
    2242:	28 2f       	mov	r18, r24
    2244:	2f 70       	andi	r18, 0x0F	; 15
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	22 0f       	add	r18, r18
    224a:	33 1f       	adc	r19, r19
    224c:	08 2e       	mov	r0, r24
    224e:	00 0c       	add	r0, r0
    2250:	99 0b       	sbc	r25, r25
    2252:	88 27       	eor	r24, r24
    2254:	99 0f       	add	r25, r25
    2256:	88 1f       	adc	r24, r24
    2258:	99 27       	eor	r25, r25
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	fc 01       	movw	r30, r24
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	ee 0f       	add	r30, r30
    2266:	ff 1f       	adc	r31, r31
    2268:	ee 0f       	add	r30, r30
    226a:	ff 1f       	adc	r31, r31
    226c:	ec 5f       	subi	r30, 0xFC	; 252
    226e:	fd 4d       	sbci	r31, 0xDD	; 221
    2270:	21 89       	ldd	r18, Z+17	; 0x11
    2272:	20 7c       	andi	r18, 0xC0	; 192
    2274:	09 f0       	breq	.+2      	; 0x2278 <udd_ep_alloc+0x36>
    2276:	58 c0       	rjmp	.+176    	; 0x2328 <udd_ep_alloc+0xe6>
    2278:	63 70       	andi	r22, 0x03	; 3
    227a:	61 30       	cpi	r22, 0x01	; 1
    227c:	11 f0       	breq	.+4      	; 0x2282 <udd_ep_alloc+0x40>
    227e:	18 f4       	brcc	.+6      	; 0x2286 <udd_ep_alloc+0x44>
    2280:	04 c0       	rjmp	.+8      	; 0x228a <udd_ep_alloc+0x48>
    2282:	20 ec       	ldi	r18, 0xC0	; 192
    2284:	03 c0       	rjmp	.+6      	; 0x228c <udd_ep_alloc+0x4a>
    2286:	20 e8       	ldi	r18, 0x80	; 128
    2288:	01 c0       	rjmp	.+2      	; 0x228c <udd_ep_alloc+0x4a>
    228a:	20 e4       	ldi	r18, 0x40	; 64
    228c:	40 38       	cpi	r20, 0x80	; 128
    228e:	51 05       	cpc	r21, r1
    2290:	e9 f0       	breq	.+58     	; 0x22cc <udd_ep_alloc+0x8a>
    2292:	50 f4       	brcc	.+20     	; 0x22a8 <udd_ep_alloc+0x66>
    2294:	40 32       	cpi	r20, 0x20	; 32
    2296:	51 05       	cpc	r21, r1
    2298:	a9 f0       	breq	.+42     	; 0x22c4 <udd_ep_alloc+0x82>
    229a:	40 34       	cpi	r20, 0x40	; 64
    229c:	51 05       	cpc	r21, r1
    229e:	a1 f0       	breq	.+40     	; 0x22c8 <udd_ep_alloc+0x86>
    22a0:	40 31       	cpi	r20, 0x10	; 16
    22a2:	51 05       	cpc	r21, r1
    22a4:	d9 f4       	brne	.+54     	; 0x22dc <udd_ep_alloc+0x9a>
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <udd_ep_alloc+0x7e>
    22a8:	41 15       	cp	r20, r1
    22aa:	32 e0       	ldi	r19, 0x02	; 2
    22ac:	53 07       	cpc	r21, r19
    22ae:	91 f0       	breq	.+36     	; 0x22d4 <udd_ep_alloc+0x92>
    22b0:	4f 3f       	cpi	r20, 0xFF	; 255
    22b2:	33 e0       	ldi	r19, 0x03	; 3
    22b4:	53 07       	cpc	r21, r19
    22b6:	81 f0       	breq	.+32     	; 0x22d8 <udd_ep_alloc+0x96>
    22b8:	41 15       	cp	r20, r1
    22ba:	51 40       	sbci	r21, 0x01	; 1
    22bc:	79 f4       	brne	.+30     	; 0x22dc <udd_ep_alloc+0x9a>
    22be:	08 c0       	rjmp	.+16     	; 0x22d0 <udd_ep_alloc+0x8e>
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0d c0       	rjmp	.+26     	; 0x22de <udd_ep_alloc+0x9c>
    22c4:	42 e0       	ldi	r20, 0x02	; 2
    22c6:	0b c0       	rjmp	.+22     	; 0x22de <udd_ep_alloc+0x9c>
    22c8:	43 e0       	ldi	r20, 0x03	; 3
    22ca:	09 c0       	rjmp	.+18     	; 0x22de <udd_ep_alloc+0x9c>
    22cc:	44 e0       	ldi	r20, 0x04	; 4
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <udd_ep_alloc+0x9c>
    22d0:	45 e0       	ldi	r20, 0x05	; 5
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <udd_ep_alloc+0x9c>
    22d4:	46 e0       	ldi	r20, 0x06	; 6
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <udd_ep_alloc+0x9c>
    22d8:	47 e0       	ldi	r20, 0x07	; 7
    22da:	01 c0       	rjmp	.+2      	; 0x22de <udd_ep_alloc+0x9c>
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	fc 01       	movw	r30, r24
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	ee 0f       	add	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	ec 5f       	subi	r30, 0xFC	; 252
    22ee:	fd 4d       	sbci	r31, 0xDD	; 221
    22f0:	11 8a       	std	Z+17, r1	; 0x11
    22f2:	dc 01       	movw	r26, r24
    22f4:	aa 0f       	add	r26, r26
    22f6:	bb 1f       	adc	r27, r27
    22f8:	aa 0f       	add	r26, r26
    22fa:	bb 1f       	adc	r27, r27
    22fc:	aa 0f       	add	r26, r26
    22fe:	bb 1f       	adc	r27, r27
    2300:	ac 5e       	subi	r26, 0xEC	; 236
    2302:	bd 4d       	sbci	r27, 0xDD	; 221
    2304:	36 e0       	ldi	r19, 0x06	; 6
    2306:	3c 93       	st	X, r19
    2308:	24 2b       	or	r18, r20
    230a:	21 8b       	std	Z+17, r18	; 0x11
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	fc 01       	movw	r30, r24
    231a:	ec 5f       	subi	r30, 0xFC	; 252
    231c:	fd 4d       	sbci	r31, 0xDD	; 221
    231e:	81 89       	ldd	r24, Z+17	; 0x11
    2320:	80 62       	ori	r24, 0x20	; 32
    2322:	81 8b       	std	Z+17, r24	; 0x11
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	08 95       	ret
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	08 95       	ret

0000232c <udd_ep_is_halted>:
    232c:	e8 2f       	mov	r30, r24
    232e:	ef 70       	andi	r30, 0x0F	; 15
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	08 2e       	mov	r0, r24
    2338:	00 0c       	add	r0, r0
    233a:	99 0b       	sbc	r25, r25
    233c:	88 27       	eor	r24, r24
    233e:	99 0f       	add	r25, r25
    2340:	88 1f       	adc	r24, r24
    2342:	99 27       	eor	r25, r25
    2344:	e8 0f       	add	r30, r24
    2346:	f9 1f       	adc	r31, r25
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	ec 5f       	subi	r30, 0xFC	; 252
    2356:	fd 4d       	sbci	r31, 0xDD	; 221
    2358:	81 89       	ldd	r24, Z+17	; 0x11
    235a:	82 fb       	bst	r24, 2
    235c:	88 27       	eor	r24, r24
    235e:	80 f9       	bld	r24, 0
    2360:	08 95       	ret

00002362 <udd_ep_clear_halt>:
    2362:	28 2f       	mov	r18, r24
    2364:	2f 70       	andi	r18, 0x0F	; 15
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	a9 01       	movw	r20, r18
    236a:	44 0f       	add	r20, r20
    236c:	55 1f       	adc	r21, r21
    236e:	28 2f       	mov	r18, r24
    2370:	08 2e       	mov	r0, r24
    2372:	00 0c       	add	r0, r0
    2374:	33 0b       	sbc	r19, r19
    2376:	22 27       	eor	r18, r18
    2378:	33 0f       	add	r19, r19
    237a:	22 1f       	adc	r18, r18
    237c:	33 27       	eor	r19, r19
    237e:	24 0f       	add	r18, r20
    2380:	35 1f       	adc	r19, r21
    2382:	f9 01       	movw	r30, r18
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ec 5f       	subi	r30, 0xFC	; 252
    2392:	fd 4d       	sbci	r31, 0xDD	; 221
    2394:	91 89       	ldd	r25, Z+17	; 0x11
    2396:	92 ff       	sbrs	r25, 2
    2398:	17 c0       	rjmp	.+46     	; 0x23c8 <udd_ep_clear_halt+0x66>
    239a:	22 0f       	add	r18, r18
    239c:	33 1f       	adc	r19, r19
    239e:	22 0f       	add	r18, r18
    23a0:	33 1f       	adc	r19, r19
    23a2:	22 0f       	add	r18, r18
    23a4:	33 1f       	adc	r19, r19
    23a6:	f9 01       	movw	r30, r18
    23a8:	ec 5f       	subi	r30, 0xFC	; 252
    23aa:	fd 4d       	sbci	r31, 0xDD	; 221
    23ac:	91 89       	ldd	r25, Z+17	; 0x11
    23ae:	9b 7f       	andi	r25, 0xFB	; 251
    23b0:	91 8b       	std	Z+17, r25	; 0x11
    23b2:	ae dc       	rcall	.-1700   	; 0x1d10 <udd_ep_get_job>
    23b4:	fc 01       	movw	r30, r24
    23b6:	80 81       	ld	r24, Z
    23b8:	80 ff       	sbrs	r24, 0
    23ba:	06 c0       	rjmp	.+12     	; 0x23c8 <udd_ep_clear_halt+0x66>
    23bc:	8e 7f       	andi	r24, 0xFE	; 254
    23be:	80 83       	st	Z, r24
    23c0:	07 80       	ldd	r0, Z+7	; 0x07
    23c2:	f0 85       	ldd	r31, Z+8	; 0x08
    23c4:	e0 2d       	mov	r30, r0
    23c6:	09 95       	icall
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	08 95       	ret

000023cc <udd_ep_run>:
    23cc:	7f 92       	push	r7
    23ce:	8f 92       	push	r8
    23d0:	9f 92       	push	r9
    23d2:	af 92       	push	r10
    23d4:	bf 92       	push	r11
    23d6:	cf 92       	push	r12
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	98 2e       	mov	r9, r24
    23e8:	86 2e       	mov	r8, r22
    23ea:	6a 01       	movw	r12, r20
    23ec:	79 01       	movw	r14, r18
    23ee:	90 dc       	rcall	.-1760   	; 0x1d10 <udd_ep_get_job>
    23f0:	5c 01       	movw	r10, r24
    23f2:	79 2c       	mov	r7, r9
    23f4:	77 1c       	adc	r7, r7
    23f6:	77 24       	eor	r7, r7
    23f8:	77 1c       	adc	r7, r7
    23fa:	c9 2d       	mov	r28, r9
    23fc:	cf 70       	andi	r28, 0x0F	; 15
    23fe:	d0 e0       	ldi	r29, 0x00	; 0
    2400:	cc 0f       	add	r28, r28
    2402:	dd 1f       	adc	r29, r29
    2404:	c7 0d       	add	r28, r7
    2406:	d1 1d       	adc	r29, r1
    2408:	fe 01       	movw	r30, r28
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	ee 0f       	add	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	ee 0f       	add	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	ec 5f       	subi	r30, 0xFC	; 252
    2418:	fd 4d       	sbci	r31, 0xDD	; 221
    241a:	81 89       	ldd	r24, Z+17	; 0x11
    241c:	80 7c       	andi	r24, 0xC0	; 192
    241e:	09 f4       	brne	.+2      	; 0x2422 <udd_ep_run+0x56>
    2420:	75 c0       	rjmp	.+234    	; 0x250c <udd_ep_run+0x140>
    2422:	fe 01       	movw	r30, r28
    2424:	ee 0f       	add	r30, r30
    2426:	ff 1f       	adc	r31, r31
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	ee 0f       	add	r30, r30
    242e:	ff 1f       	adc	r31, r31
    2430:	ec 5f       	subi	r30, 0xFC	; 252
    2432:	fd 4d       	sbci	r31, 0xDD	; 221
    2434:	81 89       	ldd	r24, Z+17	; 0x11
    2436:	80 7c       	andi	r24, 0xC0	; 192
    2438:	80 3c       	cpi	r24, 0xC0	; 192
    243a:	61 f0       	breq	.+24     	; 0x2454 <udd_ep_run+0x88>
    243c:	fe 01       	movw	r30, r28
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	ee 0f       	add	r30, r30
    2448:	ff 1f       	adc	r31, r31
    244a:	ec 5f       	subi	r30, 0xFC	; 252
    244c:	fd 4d       	sbci	r31, 0xDD	; 221
    244e:	81 89       	ldd	r24, Z+17	; 0x11
    2450:	82 fd       	sbrc	r24, 2
    2452:	5e c0       	rjmp	.+188    	; 0x2510 <udd_ep_run+0x144>
    2454:	f5 01       	movw	r30, r10
    2456:	80 81       	ld	r24, Z
    2458:	80 fd       	sbrc	r24, 0
    245a:	5c c0       	rjmp	.+184    	; 0x2514 <udd_ep_run+0x148>
    245c:	81 60       	ori	r24, 0x01	; 1
    245e:	80 83       	st	Z, r24
    2460:	c1 82       	std	Z+1, r12	; 0x01
    2462:	d2 82       	std	Z+2, r13	; 0x02
    2464:	e3 82       	std	Z+3, r14	; 0x03
    2466:	f4 82       	std	Z+4, r15	; 0x04
    2468:	15 82       	std	Z+5, r1	; 0x05
    246a:	16 82       	std	Z+6, r1	; 0x06
    246c:	07 83       	std	Z+7, r16	; 0x07
    246e:	10 87       	std	Z+8, r17	; 0x08
    2470:	81 10       	cpse	r8, r1
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <udd_ep_run+0xb4>
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	e1 14       	cp	r14, r1
    2478:	f1 04       	cpc	r15, r1
    247a:	19 f0       	breq	.+6      	; 0x2482 <udd_ep_run+0xb6>
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	01 c0       	rjmp	.+2      	; 0x2482 <udd_ep_run+0xb6>
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	f5 01       	movw	r30, r10
    2484:	80 81       	ld	r24, Z
    2486:	90 fb       	bst	r25, 0
    2488:	81 f9       	bld	r24, 1
    248a:	8b 7f       	andi	r24, 0xFB	; 251
    248c:	80 83       	st	Z, r24
    248e:	77 20       	and	r7, r7
    2490:	59 f0       	breq	.+22     	; 0x24a8 <udd_ep_run+0xdc>
    2492:	cc 0f       	add	r28, r28
    2494:	dd 1f       	adc	r29, r29
    2496:	cc 0f       	add	r28, r28
    2498:	dd 1f       	adc	r29, r29
    249a:	cc 0f       	add	r28, r28
    249c:	dd 1f       	adc	r29, r29
    249e:	cc 5f       	subi	r28, 0xFC	; 252
    24a0:	dd 4d       	sbci	r29, 0xDD	; 221
    24a2:	1e 8a       	std	Y+22, r1	; 0x16
    24a4:	1f 8a       	std	Y+23, r1	; 0x17
    24a6:	2d c0       	rjmp	.+90     	; 0x2502 <udd_ep_run+0x136>
    24a8:	fe 01       	movw	r30, r28
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	ec 5f       	subi	r30, 0xFC	; 252
    24b8:	fd 4d       	sbci	r31, 0xDD	; 221
    24ba:	81 89       	ldd	r24, Z+17	; 0x11
    24bc:	80 7c       	andi	r24, 0xC0	; 192
    24be:	80 3c       	cpi	r24, 0xC0	; 192
    24c0:	a1 f4       	brne	.+40     	; 0x24ea <udd_ep_run+0x11e>
    24c2:	ce 01       	movw	r24, r28
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	8c 5e       	subi	r24, 0xEC	; 236
    24d2:	9d 4d       	sbci	r25, 0xDD	; 221
    24d4:	f7 db       	rcall	.-2066   	; 0x1cc4 <udd_ep_get_size>
    24d6:	bc 01       	movw	r22, r24
    24d8:	c7 01       	movw	r24, r14
    24da:	62 d2       	rcall	.+1220   	; 0x29a0 <__udivmodhi4>
    24dc:	89 2b       	or	r24, r25
    24de:	29 f0       	breq	.+10     	; 0x24ea <udd_ep_run+0x11e>
    24e0:	f5 01       	movw	r30, r10
    24e2:	80 81       	ld	r24, Z
    24e4:	8e 7f       	andi	r24, 0xFE	; 254
    24e6:	80 83       	st	Z, r24
    24e8:	16 c0       	rjmp	.+44     	; 0x2516 <udd_ep_run+0x14a>
    24ea:	cc 0f       	add	r28, r28
    24ec:	dd 1f       	adc	r29, r29
    24ee:	cc 0f       	add	r28, r28
    24f0:	dd 1f       	adc	r29, r29
    24f2:	cc 0f       	add	r28, r28
    24f4:	dd 1f       	adc	r29, r29
    24f6:	cc 5f       	subi	r28, 0xFC	; 252
    24f8:	dd 4d       	sbci	r29, 0xDD	; 221
    24fa:	1a 8a       	std	Y+18, r1	; 0x12
    24fc:	1b 8a       	std	Y+19, r1	; 0x13
    24fe:	1e 8a       	std	Y+22, r1	; 0x16
    2500:	1f 8a       	std	Y+23, r1	; 0x17
    2502:	89 2d       	mov	r24, r9
    2504:	8f dc       	rcall	.-1762   	; 0x1e24 <udd_ep_trans_complet>
    2506:	77 24       	eor	r7, r7
    2508:	73 94       	inc	r7
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <udd_ep_run+0x14a>
    250c:	71 2c       	mov	r7, r1
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <udd_ep_run+0x14a>
    2510:	71 2c       	mov	r7, r1
    2512:	01 c0       	rjmp	.+2      	; 0x2516 <udd_ep_run+0x14a>
    2514:	71 2c       	mov	r7, r1
    2516:	87 2d       	mov	r24, r7
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	ff 90       	pop	r15
    2522:	ef 90       	pop	r14
    2524:	df 90       	pop	r13
    2526:	cf 90       	pop	r12
    2528:	bf 90       	pop	r11
    252a:	af 90       	pop	r10
    252c:	9f 90       	pop	r9
    252e:	8f 90       	pop	r8
    2530:	7f 90       	pop	r7
    2532:	08 95       	ret

00002534 <udd_ep_abort>:
    2534:	ff 92       	push	r15
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	18 2f       	mov	r17, r24
    2540:	f8 2e       	mov	r15, r24
    2542:	ff 1c       	adc	r15, r15
    2544:	ff 24       	eor	r15, r15
    2546:	ff 1c       	adc	r15, r15
    2548:	c8 2f       	mov	r28, r24
    254a:	cf 70       	andi	r28, 0x0F	; 15
    254c:	d0 e0       	ldi	r29, 0x00	; 0
    254e:	cc 0f       	add	r28, r28
    2550:	dd 1f       	adc	r29, r29
    2552:	cf 0d       	add	r28, r15
    2554:	d1 1d       	adc	r29, r1
    2556:	dc db       	rcall	.-2120   	; 0x1d10 <udd_ep_get_job>
    2558:	dc 01       	movw	r26, r24
    255a:	fe 01       	movw	r30, r28
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	ee 0f       	add	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ec 5e       	subi	r30, 0xEC	; 236
    256a:	fd 4d       	sbci	r31, 0xDD	; 221
    256c:	02 e0       	ldi	r16, 0x02	; 2
    256e:	05 93       	las	Z, r16
    2570:	8c 91       	ld	r24, X
    2572:	80 ff       	sbrs	r24, 0
    2574:	22 c0       	rjmp	.+68     	; 0x25ba <udd_ep_abort+0x86>
    2576:	8e 7f       	andi	r24, 0xFE	; 254
    2578:	8c 93       	st	X, r24
    257a:	17 96       	adiw	r26, 0x07	; 7
    257c:	ed 91       	ld	r30, X+
    257e:	fc 91       	ld	r31, X
    2580:	18 97       	sbiw	r26, 0x08	; 8
    2582:	30 97       	sbiw	r30, 0x00	; 0
    2584:	d1 f0       	breq	.+52     	; 0x25ba <udd_ep_abort+0x86>
    2586:	ff 20       	and	r15, r15
    2588:	59 f0       	breq	.+22     	; 0x25a0 <udd_ep_abort+0x6c>
    258a:	cc 0f       	add	r28, r28
    258c:	dd 1f       	adc	r29, r29
    258e:	cc 0f       	add	r28, r28
    2590:	dd 1f       	adc	r29, r29
    2592:	cc 0f       	add	r28, r28
    2594:	dd 1f       	adc	r29, r29
    2596:	cc 5f       	subi	r28, 0xFC	; 252
    2598:	dd 4d       	sbci	r29, 0xDD	; 221
    259a:	6e 89       	ldd	r22, Y+22	; 0x16
    259c:	7f 89       	ldd	r23, Y+23	; 0x17
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <udd_ep_abort+0x80>
    25a0:	cc 0f       	add	r28, r28
    25a2:	dd 1f       	adc	r29, r29
    25a4:	cc 0f       	add	r28, r28
    25a6:	dd 1f       	adc	r29, r29
    25a8:	cc 0f       	add	r28, r28
    25aa:	dd 1f       	adc	r29, r29
    25ac:	cc 5f       	subi	r28, 0xFC	; 252
    25ae:	dd 4d       	sbci	r29, 0xDD	; 221
    25b0:	6a 89       	ldd	r22, Y+18	; 0x12
    25b2:	7b 89       	ldd	r23, Y+19	; 0x13
    25b4:	41 2f       	mov	r20, r17
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	09 95       	icall
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	ff 90       	pop	r15
    25c4:	08 95       	ret

000025c6 <udd_ep_free>:
    25c6:	cf 93       	push	r28
    25c8:	c8 2f       	mov	r28, r24
    25ca:	b4 df       	rcall	.-152    	; 0x2534 <udd_ep_abort>
    25cc:	ec 2f       	mov	r30, r28
    25ce:	ef 70       	andi	r30, 0x0F	; 15
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	ee 0f       	add	r30, r30
    25d4:	ff 1f       	adc	r31, r31
    25d6:	8c 2f       	mov	r24, r28
    25d8:	cc 0f       	add	r28, r28
    25da:	99 0b       	sbc	r25, r25
    25dc:	88 27       	eor	r24, r24
    25de:	99 0f       	add	r25, r25
    25e0:	88 1f       	adc	r24, r24
    25e2:	99 27       	eor	r25, r25
    25e4:	e8 0f       	add	r30, r24
    25e6:	f9 1f       	adc	r31, r25
    25e8:	ee 0f       	add	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	ee 0f       	add	r30, r30
    25ee:	ff 1f       	adc	r31, r31
    25f0:	ee 0f       	add	r30, r30
    25f2:	ff 1f       	adc	r31, r31
    25f4:	ec 5f       	subi	r30, 0xFC	; 252
    25f6:	fd 4d       	sbci	r31, 0xDD	; 221
    25f8:	11 8a       	std	Z+17, r1	; 0x11
    25fa:	cf 91       	pop	r28
    25fc:	08 95       	ret

000025fe <udd_ep_set_halt>:
    25fe:	0f 93       	push	r16
    2600:	e8 2f       	mov	r30, r24
    2602:	ef 70       	andi	r30, 0x0F	; 15
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	28 2f       	mov	r18, r24
    260c:	08 2e       	mov	r0, r24
    260e:	00 0c       	add	r0, r0
    2610:	33 0b       	sbc	r19, r19
    2612:	22 27       	eor	r18, r18
    2614:	33 0f       	add	r19, r19
    2616:	22 1f       	adc	r18, r18
    2618:	33 27       	eor	r19, r19
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	df 01       	movw	r26, r30
    2620:	aa 0f       	add	r26, r26
    2622:	bb 1f       	adc	r27, r27
    2624:	aa 0f       	add	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	aa 0f       	add	r26, r26
    262a:	bb 1f       	adc	r27, r27
    262c:	ac 5f       	subi	r26, 0xFC	; 252
    262e:	bd 4d       	sbci	r27, 0xDD	; 221
    2630:	51 96       	adiw	r26, 0x11	; 17
    2632:	9c 91       	ld	r25, X
    2634:	51 97       	sbiw	r26, 0x11	; 17
    2636:	94 60       	ori	r25, 0x04	; 4
    2638:	51 96       	adiw	r26, 0x11	; 17
    263a:	9c 93       	st	X, r25
    263c:	ee 0f       	add	r30, r30
    263e:	ff 1f       	adc	r31, r31
    2640:	ee 0f       	add	r30, r30
    2642:	ff 1f       	adc	r31, r31
    2644:	ee 0f       	add	r30, r30
    2646:	ff 1f       	adc	r31, r31
    2648:	ec 5e       	subi	r30, 0xEC	; 236
    264a:	fd 4d       	sbci	r31, 0xDD	; 221
    264c:	01 e0       	ldi	r16, 0x01	; 1
    264e:	06 93       	lac	Z, r16
    2650:	71 df       	rcall	.-286    	; 0x2534 <udd_ep_abort>
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	0f 91       	pop	r16
    2656:	08 95       	ret

00002658 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2658:	1f 92       	push	r1
    265a:	0f 92       	push	r0
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	0f 92       	push	r0
    2660:	11 24       	eor	r1, r1
    2662:	0f 93       	push	r16
    2664:	2f 93       	push	r18
    2666:	3f 93       	push	r19
    2668:	4f 93       	push	r20
    266a:	5f 93       	push	r21
    266c:	6f 93       	push	r22
    266e:	7f 93       	push	r23
    2670:	8f 93       	push	r24
    2672:	9f 93       	push	r25
    2674:	af 93       	push	r26
    2676:	bf 93       	push	r27
    2678:	ef 93       	push	r30
    267a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    267c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2680:	88 23       	and	r24, r24
    2682:	44 f4       	brge	.+16     	; 0x2694 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    2684:	80 e8       	ldi	r24, 0x80	; 128
    2686:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    268a:	0e 94 c0 09 	call	0x1380	; 0x1380 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    268e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2692:	8a c0       	rjmp	.+276    	; 0x27a8 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2694:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2698:	82 ff       	sbrs	r24, 2
    269a:	20 c0       	rjmp	.+64     	; 0x26dc <__vector_125+0x84>
		udd_ack_underflow_event();
    269c:	84 e0       	ldi	r24, 0x04	; 4
    269e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    26a2:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <udd_sram+0x18>
    26a6:	86 ff       	sbrs	r24, 6
    26a8:	7f c0       	rjmp	.+254    	; 0x27a8 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26aa:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    26ae:	81 fd       	sbrc	r24, 1
    26b0:	7b c0       	rjmp	.+246    	; 0x27a8 <__vector_125+0x150>
    26b2:	49 db       	rcall	.-2414   	; 0x1d46 <udd_ctrl_interrupt_tc_setup>
    26b4:	81 11       	cpse	r24, r1
    26b6:	78 c0       	rjmp	.+240    	; 0x27a8 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    26b8:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    26bc:	81 30       	cpi	r24, 0x01	; 1
    26be:	11 f4       	brne	.+4      	; 0x26c4 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    26c0:	7f da       	rcall	.-2818   	; 0x1bc0 <udd_ctrl_send_zlp_in>
    26c2:	72 c0       	rjmp	.+228    	; 0x27a8 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    26c4:	84 30       	cpi	r24, 0x04	; 4
    26c6:	09 f0       	breq	.+2      	; 0x26ca <__vector_125+0x72>
    26c8:	6f c0       	rjmp	.+222    	; 0x27a8 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    26ca:	ed e1       	ldi	r30, 0x1D	; 29
    26cc:	f2 e2       	ldi	r31, 0x22	; 34
    26ce:	04 e0       	ldi	r16, 0x04	; 4
    26d0:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    26d2:	e5 e1       	ldi	r30, 0x15	; 21
    26d4:	f2 e2       	ldi	r31, 0x22	; 34
    26d6:	04 e0       	ldi	r16, 0x04	; 4
    26d8:	05 93       	las	Z, r16
    26da:	66 c0       	rjmp	.+204    	; 0x27a8 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    26dc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    26e0:	81 ff       	sbrs	r24, 1
    26e2:	5d c0       	rjmp	.+186    	; 0x279e <__vector_125+0x146>
		udd_ack_overflow_event();
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    26ea:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udd_sram+0x10>
    26ee:	86 ff       	sbrs	r24, 6
    26f0:	5b c0       	rjmp	.+182    	; 0x27a8 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26f2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    26f6:	81 fd       	sbrc	r24, 1
    26f8:	57 c0       	rjmp	.+174    	; 0x27a8 <__vector_125+0x150>
    26fa:	25 db       	rcall	.-2486   	; 0x1d46 <udd_ctrl_interrupt_tc_setup>
    26fc:	81 11       	cpse	r24, r1
    26fe:	54 c0       	rjmp	.+168    	; 0x27a8 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2700:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    2704:	82 30       	cpi	r24, 0x02	; 2
    2706:	41 f4       	brne	.+16     	; 0x2718 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2708:	84 e0       	ldi	r24, 0x04	; 4
    270a:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    270e:	e4 e1       	ldi	r30, 0x14	; 20
    2710:	f2 e2       	ldi	r31, 0x22	; 34
    2712:	02 e0       	ldi	r16, 0x02	; 2
    2714:	06 93       	lac	Z, r16
    2716:	48 c0       	rjmp	.+144    	; 0x27a8 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2718:	83 30       	cpi	r24, 0x03	; 3
    271a:	09 f0       	breq	.+2      	; 0x271e <__vector_125+0xc6>
    271c:	45 c0       	rjmp	.+138    	; 0x27a8 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    271e:	ed e1       	ldi	r30, 0x1D	; 29
    2720:	f2 e2       	ldi	r31, 0x22	; 34
    2722:	04 e0       	ldi	r16, 0x04	; 4
    2724:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2726:	e5 e1       	ldi	r30, 0x15	; 21
    2728:	f2 e2       	ldi	r31, 0x22	; 34
    272a:	04 e0       	ldi	r16, 0x04	; 4
    272c:	05 93       	las	Z, r16
    272e:	3c c0       	rjmp	.+120    	; 0x27a8 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2730:	80 e1       	ldi	r24, 0x10	; 16
    2732:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	fd de       	rcall	.-518    	; 0x2534 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    273a:	81 e8       	ldi	r24, 0x81	; 129
    273c:	fb de       	rcall	.-522    	; 0x2534 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	f9 de       	rcall	.-526    	; 0x2534 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2742:	82 e8       	ldi	r24, 0x82	; 130
    2744:	f7 de       	rcall	.-530    	; 0x2534 <udd_ep_abort>
		}
#endif
		udc_reset();
    2746:	0e 94 9b 09 	call	0x1336	; 0x1336 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    274a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    274e:	e4 e0       	ldi	r30, 0x04	; 4
    2750:	f2 e2       	ldi	r31, 0x22	; 34
    2752:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    2754:	96 e0       	ldi	r25, 0x06	; 6
    2756:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2758:	83 e4       	ldi	r24, 0x43	; 67
    275a:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    275c:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    275e:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2760:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2762:	8d eb       	ldi	r24, 0xBD	; 189
    2764:	91 e2       	ldi	r25, 0x21	; 33
    2766:	84 8b       	std	Z+20, r24	; 0x14
    2768:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    276a:	f5 d9       	rcall	.-3094   	; 0x1b56 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    276c:	1d c0       	rjmp	.+58     	; 0x27a8 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    276e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2772:	86 ff       	sbrs	r24, 6
    2774:	08 c0       	rjmp	.+16     	; 0x2786 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2776:	80 e4       	ldi	r24, 0x40	; 64
    2778:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	c2 d9       	rcall	.-3196   	; 0x1b04 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2780:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2784:	11 c0       	rjmp	.+34     	; 0x27a8 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    2786:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    278a:	85 ff       	sbrs	r24, 5
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <__vector_125+0x150>
		udd_ack_resume_event();
    278e:	80 e2       	ldi	r24, 0x20	; 32
    2790:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	b6 d9       	rcall	.-3220   	; 0x1b04 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2798:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    279c:	05 c0       	rjmp	.+10     	; 0x27a8 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    279e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    27a2:	84 fd       	sbrc	r24, 4
    27a4:	c5 cf       	rjmp	.-118    	; 0x2730 <__vector_125+0xd8>
    27a6:	e3 cf       	rjmp	.-58     	; 0x276e <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    27a8:	ff 91       	pop	r31
    27aa:	ef 91       	pop	r30
    27ac:	bf 91       	pop	r27
    27ae:	af 91       	pop	r26
    27b0:	9f 91       	pop	r25
    27b2:	8f 91       	pop	r24
    27b4:	7f 91       	pop	r23
    27b6:	6f 91       	pop	r22
    27b8:	5f 91       	pop	r21
    27ba:	4f 91       	pop	r20
    27bc:	3f 91       	pop	r19
    27be:	2f 91       	pop	r18
    27c0:	0f 91       	pop	r16
    27c2:	0f 90       	pop	r0
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	0f 90       	pop	r0
    27c8:	1f 90       	pop	r1
    27ca:	18 95       	reti

000027cc <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    27cc:	1f 92       	push	r1
    27ce:	0f 92       	push	r0
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	0f 92       	push	r0
    27d4:	11 24       	eor	r1, r1
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	2f 93       	push	r18
    27dc:	3f 93       	push	r19
    27de:	4f 93       	push	r20
    27e0:	5f 93       	push	r21
    27e2:	6f 93       	push	r22
    27e4:	7f 93       	push	r23
    27e6:	8f 93       	push	r24
    27e8:	9f 93       	push	r25
    27ea:	af 93       	push	r26
    27ec:	bf 93       	push	r27
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	ef 93       	push	r30
    27f4:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    27f6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    27fa:	81 fd       	sbrc	r24, 1
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    27fe:	a3 da       	rcall	.-2746   	; 0x1d46 <udd_ctrl_interrupt_tc_setup>
    2800:	81 11       	cpse	r24, r1
    2802:	b9 c0       	rjmp	.+370    	; 0x2976 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    280a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    280e:	81 95       	neg	r24
    2810:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2812:	e4 e1       	ldi	r30, 0x14	; 20
    2814:	f2 e2       	ldi	r31, 0x22	; 34
    2816:	e8 1b       	sub	r30, r24
    2818:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    281a:	20 81       	ld	r18, Z
    281c:	31 81       	ldd	r19, Z+1	; 0x01
    281e:	24 51       	subi	r18, 0x14	; 20
    2820:	32 42       	sbci	r19, 0x22	; 34
    2822:	36 95       	lsr	r19
    2824:	27 95       	ror	r18
    2826:	36 95       	lsr	r19
    2828:	27 95       	ror	r18
    282a:	36 95       	lsr	r19
    282c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    282e:	82 2f       	mov	r24, r18
    2830:	86 95       	lsr	r24
    2832:	20 fd       	sbrc	r18, 0
    2834:	02 c0       	rjmp	.+4      	; 0x283a <__vector_126+0x6e>
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	01 c0       	rjmp	.+2      	; 0x283c <__vector_126+0x70>
    283a:	90 e8       	ldi	r25, 0x80	; 128
    283c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    283e:	e8 2f       	mov	r30, r24
    2840:	ef 70       	andi	r30, 0x0F	; 15
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	ee 0f       	add	r30, r30
    2846:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2848:	28 2f       	mov	r18, r24
    284a:	08 2e       	mov	r0, r24
    284c:	00 0c       	add	r0, r0
    284e:	33 0b       	sbc	r19, r19
    2850:	22 27       	eor	r18, r18
    2852:	33 0f       	add	r19, r19
    2854:	22 1f       	adc	r18, r18
    2856:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2858:	e2 0f       	add	r30, r18
    285a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    285c:	df 01       	movw	r26, r30
    285e:	aa 0f       	add	r26, r26
    2860:	bb 1f       	adc	r27, r27
    2862:	aa 0f       	add	r26, r26
    2864:	bb 1f       	adc	r27, r27
    2866:	aa 0f       	add	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	ac 5e       	subi	r26, 0xEC	; 236
    286c:	bd 4d       	sbci	r27, 0xDD	; 221
    286e:	9c 91       	ld	r25, X
    2870:	95 ff       	sbrs	r25, 5
    2872:	81 c0       	rjmp	.+258    	; 0x2976 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2874:	fd 01       	movw	r30, r26
    2876:	00 e2       	ldi	r16, 0x20	; 32
    2878:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    287a:	81 11       	cpse	r24, r1
    287c:	77 c0       	rjmp	.+238    	; 0x296c <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    287e:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <udd_ep_control_state>
    2882:	84 30       	cpi	r24, 0x04	; 4
    2884:	19 f4       	brne	.+6      	; 0x288c <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2886:	aa d9       	rcall	.-3244   	; 0x1bdc <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2888:	66 d9       	rcall	.-3380   	; 0x1b56 <udd_ctrl_init>
    288a:	75 c0       	rjmp	.+234    	; 0x2976 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    288c:	00 91 16 22 	lds	r16, 0x2216	; 0x802216 <udd_sram+0x12>
    2890:	10 91 17 22 	lds	r17, 0x2217	; 0x802217 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2894:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <udd_g_ctrlreq+0xa>
    2898:	90 91 70 24 	lds	r25, 0x2470	; 0x802470 <udd_g_ctrlreq+0xb>
    289c:	c0 91 fd 21 	lds	r28, 0x21FD	; 0x8021fd <udd_ctrl_payload_nb_trans>
    28a0:	d0 91 fe 21 	lds	r29, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    28a4:	9e 01       	movw	r18, r28
    28a6:	20 0f       	add	r18, r16
    28a8:	31 1f       	adc	r19, r17
    28aa:	82 17       	cp	r24, r18
    28ac:	93 07       	cpc	r25, r19
    28ae:	18 f4       	brcc	.+6      	; 0x28b6 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    28b0:	8c 01       	movw	r16, r24
    28b2:	0c 1b       	sub	r16, r28
    28b4:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    28b6:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <udd_g_ctrlreq+0x8>
    28ba:	90 91 6e 24 	lds	r25, 0x246E	; 0x80246e <udd_g_ctrlreq+0x9>
    28be:	a8 01       	movw	r20, r16
    28c0:	6d eb       	ldi	r22, 0xBD	; 189
    28c2:	71 e2       	ldi	r23, 0x21	; 33
    28c4:	8c 0f       	add	r24, r28
    28c6:	9d 1f       	adc	r25, r29
    28c8:	85 d0       	rcall	.+266    	; 0x29d4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    28ca:	c0 0f       	add	r28, r16
    28cc:	d1 1f       	adc	r29, r17
    28ce:	c0 93 fd 21 	sts	0x21FD, r28	; 0x8021fd <udd_ctrl_payload_nb_trans>
    28d2:	d0 93 fe 21 	sts	0x21FE, r29	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    28d6:	00 34       	cpi	r16, 0x40	; 64
    28d8:	11 05       	cpc	r17, r1
    28da:	69 f4       	brne	.+26     	; 0x28f6 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    28dc:	80 91 ff 21 	lds	r24, 0x21FF	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    28e0:	90 91 00 22 	lds	r25, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    28e4:	8c 0f       	add	r24, r28
    28e6:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    28e8:	20 91 6b 24 	lds	r18, 0x246B	; 0x80246b <udd_g_ctrlreq+0x6>
    28ec:	30 91 6c 24 	lds	r19, 0x246C	; 0x80246c <udd_g_ctrlreq+0x7>
    28f0:	82 17       	cp	r24, r18
    28f2:	93 07       	cpc	r25, r19
    28f4:	80 f0       	brcs	.+32     	; 0x2916 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    28f6:	e5 e6       	ldi	r30, 0x65	; 101
    28f8:	f4 e2       	ldi	r31, 0x24	; 36
    28fa:	c2 87       	std	Z+10, r28	; 0x0a
    28fc:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    28fe:	06 84       	ldd	r0, Z+14	; 0x0e
    2900:	f7 85       	ldd	r31, Z+15	; 0x0f
    2902:	e0 2d       	mov	r30, r0
    2904:	30 97       	sbiw	r30, 0x00	; 0
    2906:	29 f0       	breq	.+10     	; 0x2912 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2908:	09 95       	icall
    290a:	81 11       	cpse	r24, r1
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    290e:	4a d9       	rcall	.-3436   	; 0x1ba4 <udd_ctrl_stall_data>
    2910:	32 c0       	rjmp	.+100    	; 0x2976 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2912:	56 d9       	rcall	.-3412   	; 0x1bc0 <udd_ctrl_send_zlp_in>
    2914:	30 c0       	rjmp	.+96     	; 0x2976 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2916:	80 91 6f 24 	lds	r24, 0x246F	; 0x80246f <udd_g_ctrlreq+0xa>
    291a:	90 91 70 24 	lds	r25, 0x2470	; 0x802470 <udd_g_ctrlreq+0xb>
    291e:	c8 17       	cp	r28, r24
    2920:	d9 07       	cpc	r29, r25
    2922:	f9 f4       	brne	.+62     	; 0x2962 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2924:	e0 91 73 24 	lds	r30, 0x2473	; 0x802473 <udd_g_ctrlreq+0xe>
    2928:	f0 91 74 24 	lds	r31, 0x2474	; 0x802474 <udd_g_ctrlreq+0xf>
    292c:	30 97       	sbiw	r30, 0x00	; 0
    292e:	11 f4       	brne	.+4      	; 0x2934 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2930:	39 d9       	rcall	.-3470   	; 0x1ba4 <udd_ctrl_stall_data>
    2932:	21 c0       	rjmp	.+66     	; 0x2976 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2934:	09 95       	icall
    2936:	81 11       	cpse	r24, r1
    2938:	02 c0       	rjmp	.+4      	; 0x293e <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    293a:	34 d9       	rcall	.-3480   	; 0x1ba4 <udd_ctrl_stall_data>
    293c:	1c c0       	rjmp	.+56     	; 0x2976 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    293e:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    2942:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
    2946:	80 91 fd 21 	lds	r24, 0x21FD	; 0x8021fd <udd_ctrl_payload_nb_trans>
    294a:	90 91 fe 21 	lds	r25, 0x21FE	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
    294e:	82 0f       	add	r24, r18
    2950:	93 1f       	adc	r25, r19
    2952:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <udd_ctrl_prev_payload_nb_trans>
    2956:	90 93 00 22 	sts	0x2200, r25	; 0x802200 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    295a:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <udd_ctrl_payload_nb_trans>
    295e:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2962:	e4 e1       	ldi	r30, 0x14	; 20
    2964:	f2 e2       	ldi	r31, 0x22	; 34
    2966:	02 e0       	ldi	r16, 0x02	; 2
    2968:	06 93       	lac	Z, r16
    296a:	05 c0       	rjmp	.+10     	; 0x2976 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    296c:	80 38       	cpi	r24, 0x80	; 128
    296e:	11 f4       	brne	.+4      	; 0x2974 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2970:	3d d9       	rcall	.-3462   	; 0x1bec <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2974:	57 da       	rcall	.-2898   	; 0x1e24 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2976:	ff 91       	pop	r31
    2978:	ef 91       	pop	r30
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	bf 91       	pop	r27
    2980:	af 91       	pop	r26
    2982:	9f 91       	pop	r25
    2984:	8f 91       	pop	r24
    2986:	7f 91       	pop	r23
    2988:	6f 91       	pop	r22
    298a:	5f 91       	pop	r21
    298c:	4f 91       	pop	r20
    298e:	3f 91       	pop	r19
    2990:	2f 91       	pop	r18
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	0f 90       	pop	r0
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	0f 90       	pop	r0
    299c:	1f 90       	pop	r1
    299e:	18 95       	reti

000029a0 <__udivmodhi4>:
    29a0:	aa 1b       	sub	r26, r26
    29a2:	bb 1b       	sub	r27, r27
    29a4:	51 e1       	ldi	r21, 0x11	; 17
    29a6:	07 c0       	rjmp	.+14     	; 0x29b6 <__udivmodhi4_ep>

000029a8 <__udivmodhi4_loop>:
    29a8:	aa 1f       	adc	r26, r26
    29aa:	bb 1f       	adc	r27, r27
    29ac:	a6 17       	cp	r26, r22
    29ae:	b7 07       	cpc	r27, r23
    29b0:	10 f0       	brcs	.+4      	; 0x29b6 <__udivmodhi4_ep>
    29b2:	a6 1b       	sub	r26, r22
    29b4:	b7 0b       	sbc	r27, r23

000029b6 <__udivmodhi4_ep>:
    29b6:	88 1f       	adc	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	5a 95       	dec	r21
    29bc:	a9 f7       	brne	.-22     	; 0x29a8 <__udivmodhi4_loop>
    29be:	80 95       	com	r24
    29c0:	90 95       	com	r25
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	08 95       	ret

000029c8 <__tablejump2__>:
    29c8:	ee 0f       	add	r30, r30
    29ca:	ff 1f       	adc	r31, r31
    29cc:	05 90       	lpm	r0, Z+
    29ce:	f4 91       	lpm	r31, Z
    29d0:	e0 2d       	mov	r30, r0
    29d2:	09 94       	ijmp

000029d4 <memcpy>:
    29d4:	fb 01       	movw	r30, r22
    29d6:	dc 01       	movw	r26, r24
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <memcpy+0xa>
    29da:	01 90       	ld	r0, Z+
    29dc:	0d 92       	st	X+, r0
    29de:	41 50       	subi	r20, 0x01	; 1
    29e0:	50 40       	sbci	r21, 0x00	; 0
    29e2:	d8 f7       	brcc	.-10     	; 0x29da <memcpy+0x6>
    29e4:	08 95       	ret

000029e6 <_exit>:
    29e6:	f8 94       	cli

000029e8 <__stop_program>:
    29e8:	ff cf       	rjmp	.-2      	; 0x29e8 <__stop_program>
