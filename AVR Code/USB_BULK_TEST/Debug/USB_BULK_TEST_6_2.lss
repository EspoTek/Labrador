
USB_BULK_TEST_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00802000  00002a56  00002aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dad  008020b2  008020b2  00002b9e  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b9e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004c8  00000000  00000000  00002bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ae20  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001c10  00000000  00000000  0000deb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008b73  00000000  00000000  0000fac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a84  00000000  00000000  0001863c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002fc25  00000000  00000000  000190c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000022ab  00000000  00000000  00048ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f8  00000000  00000000  0004af90  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ba62  00000000  00000000  0004b388  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c1       	rjmp	.+584    	; 0x24a <__ctors_end>
       2:	00 00       	nop
       4:	3e c1       	rjmp	.+636    	; 0x282 <__bad_interrupt>
       6:	00 00       	nop
       8:	3c c1       	rjmp	.+632    	; 0x282 <__bad_interrupt>
       a:	00 00       	nop
       c:	3a c1       	rjmp	.+628    	; 0x282 <__bad_interrupt>
       e:	00 00       	nop
      10:	38 c1       	rjmp	.+624    	; 0x282 <__bad_interrupt>
      12:	00 00       	nop
      14:	36 c1       	rjmp	.+620    	; 0x282 <__bad_interrupt>
      16:	00 00       	nop
      18:	33 c6       	rjmp	.+3174   	; 0xc80 <__vector_6>
      1a:	00 00       	nop
      1c:	7e c6       	rjmp	.+3324   	; 0xd1a <__vector_7>
      1e:	00 00       	nop
      20:	bc c6       	rjmp	.+3448   	; 0xd9a <__vector_8>
      22:	00 00       	nop
      24:	c4 c6       	rjmp	.+3464   	; 0xdae <__vector_9>
      26:	00 00       	nop
      28:	2c c1       	rjmp	.+600    	; 0x282 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2a c1       	rjmp	.+596    	; 0x282 <__bad_interrupt>
      2e:	00 00       	nop
      30:	28 c1       	rjmp	.+592    	; 0x282 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c1       	rjmp	.+588    	; 0x282 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c1       	rjmp	.+584    	; 0x282 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	22 c1       	rjmp	.+580    	; 0x282 <__bad_interrupt>
      3e:	00 00       	nop
      40:	20 c1       	rjmp	.+576    	; 0x282 <__bad_interrupt>
      42:	00 00       	nop
      44:	1e c1       	rjmp	.+572    	; 0x282 <__bad_interrupt>
      46:	00 00       	nop
      48:	1c c1       	rjmp	.+568    	; 0x282 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1a c1       	rjmp	.+564    	; 0x282 <__bad_interrupt>
      4e:	00 00       	nop
      50:	18 c1       	rjmp	.+560    	; 0x282 <__bad_interrupt>
      52:	00 00       	nop
      54:	16 c1       	rjmp	.+556    	; 0x282 <__bad_interrupt>
      56:	00 00       	nop
      58:	14 c1       	rjmp	.+552    	; 0x282 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c1       	rjmp	.+548    	; 0x282 <__bad_interrupt>
      5e:	00 00       	nop
      60:	95 c7       	rjmp	.+3882   	; 0xf8c <__vector_24>
      62:	00 00       	nop
      64:	0e c1       	rjmp	.+540    	; 0x282 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c c1       	rjmp	.+536    	; 0x282 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0a c1       	rjmp	.+532    	; 0x282 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 c1       	rjmp	.+528    	; 0x282 <__bad_interrupt>
      72:	00 00       	nop
      74:	06 c1       	rjmp	.+524    	; 0x282 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	02 c1       	rjmp	.+516    	; 0x282 <__bad_interrupt>
      7e:	00 00       	nop
      80:	00 c1       	rjmp	.+512    	; 0x282 <__bad_interrupt>
      82:	00 00       	nop
      84:	fe c0       	rjmp	.+508    	; 0x282 <__bad_interrupt>
      86:	00 00       	nop
      88:	fc c0       	rjmp	.+504    	; 0x282 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa c0       	rjmp	.+500    	; 0x282 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f8 c0       	rjmp	.+496    	; 0x282 <__bad_interrupt>
      92:	00 00       	nop
      94:	f6 c0       	rjmp	.+492    	; 0x282 <__bad_interrupt>
      96:	00 00       	nop
      98:	f4 c0       	rjmp	.+488    	; 0x282 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f2 c0       	rjmp	.+484    	; 0x282 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f0 c0       	rjmp	.+480    	; 0x282 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ee c0       	rjmp	.+476    	; 0x282 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ec c0       	rjmp	.+472    	; 0x282 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ea c0       	rjmp	.+468    	; 0x282 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e8 c0       	rjmp	.+464    	; 0x282 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e6 c0       	rjmp	.+460    	; 0x282 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e4 c0       	rjmp	.+456    	; 0x282 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e2 c0       	rjmp	.+452    	; 0x282 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e0 c0       	rjmp	.+448    	; 0x282 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	de c0       	rjmp	.+444    	; 0x282 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dc c0       	rjmp	.+440    	; 0x282 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	da c0       	rjmp	.+436    	; 0x282 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d8 c0       	rjmp	.+432    	; 0x282 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d6 c0       	rjmp	.+428    	; 0x282 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d2 c0       	rjmp	.+420    	; 0x282 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce c0       	rjmp	.+412    	; 0x282 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cc c0       	rjmp	.+408    	; 0x282 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ca c0       	rjmp	.+404    	; 0x282 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c6 c0       	rjmp	.+396    	; 0x282 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c4 c0       	rjmp	.+392    	; 0x282 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c2 c0       	rjmp	.+388    	; 0x282 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c0 c0       	rjmp	.+384    	; 0x282 <__bad_interrupt>
     102:	00 00       	nop
     104:	be c0       	rjmp	.+380    	; 0x282 <__bad_interrupt>
     106:	00 00       	nop
     108:	bc c0       	rjmp	.+376    	; 0x282 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ba c0       	rjmp	.+372    	; 0x282 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b8 c0       	rjmp	.+368    	; 0x282 <__bad_interrupt>
     112:	00 00       	nop
     114:	b6 c0       	rjmp	.+364    	; 0x282 <__bad_interrupt>
     116:	00 00       	nop
     118:	b4 c0       	rjmp	.+360    	; 0x282 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b2 c0       	rjmp	.+356    	; 0x282 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b0 c0       	rjmp	.+352    	; 0x282 <__bad_interrupt>
     122:	00 00       	nop
     124:	ae c0       	rjmp	.+348    	; 0x282 <__bad_interrupt>
     126:	00 00       	nop
     128:	ac c0       	rjmp	.+344    	; 0x282 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	aa c0       	rjmp	.+340    	; 0x282 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a8 c0       	rjmp	.+336    	; 0x282 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c0       	rjmp	.+332    	; 0x282 <__bad_interrupt>
     136:	00 00       	nop
     138:	a4 c0       	rjmp	.+328    	; 0x282 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a0 c0       	rjmp	.+320    	; 0x282 <__bad_interrupt>
     142:	00 00       	nop
     144:	9e c0       	rjmp	.+316    	; 0x282 <__bad_interrupt>
     146:	00 00       	nop
     148:	9c c0       	rjmp	.+312    	; 0x282 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7f c6       	rjmp	.+3326   	; 0xe4c <__vector_83>
     14e:	00 00       	nop
     150:	98 c0       	rjmp	.+304    	; 0x282 <__bad_interrupt>
     152:	00 00       	nop
     154:	96 c0       	rjmp	.+300    	; 0x282 <__bad_interrupt>
     156:	00 00       	nop
     158:	94 c0       	rjmp	.+296    	; 0x282 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	92 c0       	rjmp	.+292    	; 0x282 <__bad_interrupt>
     15e:	00 00       	nop
     160:	90 c0       	rjmp	.+288    	; 0x282 <__bad_interrupt>
     162:	00 00       	nop
     164:	8e c0       	rjmp	.+284    	; 0x282 <__bad_interrupt>
     166:	00 00       	nop
     168:	8c c0       	rjmp	.+280    	; 0x282 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8a c0       	rjmp	.+276    	; 0x282 <__bad_interrupt>
     16e:	00 00       	nop
     170:	88 c0       	rjmp	.+272    	; 0x282 <__bad_interrupt>
     172:	00 00       	nop
     174:	86 c0       	rjmp	.+268    	; 0x282 <__bad_interrupt>
     176:	00 00       	nop
     178:	84 c0       	rjmp	.+264    	; 0x282 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	82 c0       	rjmp	.+260    	; 0x282 <__bad_interrupt>
     17e:	00 00       	nop
     180:	80 c0       	rjmp	.+256    	; 0x282 <__bad_interrupt>
     182:	00 00       	nop
     184:	7e c0       	rjmp	.+252    	; 0x282 <__bad_interrupt>
     186:	00 00       	nop
     188:	7c c0       	rjmp	.+248    	; 0x282 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7a c0       	rjmp	.+244    	; 0x282 <__bad_interrupt>
     18e:	00 00       	nop
     190:	78 c0       	rjmp	.+240    	; 0x282 <__bad_interrupt>
     192:	00 00       	nop
     194:	76 c0       	rjmp	.+236    	; 0x282 <__bad_interrupt>
     196:	00 00       	nop
     198:	74 c0       	rjmp	.+232    	; 0x282 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	72 c0       	rjmp	.+228    	; 0x282 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	70 c0       	rjmp	.+224    	; 0x282 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	6e c0       	rjmp	.+220    	; 0x282 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6a c0       	rjmp	.+212    	; 0x282 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	68 c0       	rjmp	.+208    	; 0x282 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	66 c0       	rjmp	.+204    	; 0x282 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	64 c0       	rjmp	.+200    	; 0x282 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	62 c0       	rjmp	.+196    	; 0x282 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	60 c0       	rjmp	.+192    	; 0x282 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5c c0       	rjmp	.+184    	; 0x282 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5a c0       	rjmp	.+180    	; 0x282 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	58 c0       	rjmp	.+176    	; 0x282 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	56 c0       	rjmp	.+172    	; 0x282 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	54 c0       	rjmp	.+168    	; 0x282 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	52 c0       	rjmp	.+164    	; 0x282 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	50 c0       	rjmp	.+160    	; 0x282 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	4e c0       	rjmp	.+156    	; 0x282 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	4c c0       	rjmp	.+152    	; 0x282 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4a c0       	rjmp	.+148    	; 0x282 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	48 c0       	rjmp	.+144    	; 0x282 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__vector_125>
     1f8:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_126>
     1fc:	4d 0a       	sbc	r4, r29
     1fe:	51 0a       	sbc	r5, r17
     200:	8d 0a       	sbc	r8, r29
     202:	c9 0a       	sbc	r12, r25
     204:	d2 0a       	sbc	r13, r18
     206:	d7 0a       	sbc	r13, r23
     208:	29 0b       	sbc	r18, r25
     20a:	2e 0b       	sbc	r18, r30
     20c:	7d 0a       	sbc	r7, r29
     20e:	7f 0a       	sbc	r7, r31
     210:	81 0a       	sbc	r8, r17
     212:	83 0a       	sbc	r8, r19
     214:	85 0a       	sbc	r8, r21
     216:	87 0a       	sbc	r8, r23
     218:	89 0a       	sbc	r8, r25
     21a:	8b 0a       	sbc	r8, r27
     21c:	b9 0a       	sbc	r11, r25
     21e:	bb 0a       	sbc	r11, r27
     220:	bd 0a       	sbc	r11, r29
     222:	bf 0a       	sbc	r11, r31
     224:	c1 0a       	sbc	r12, r17
     226:	c3 0a       	sbc	r12, r19
     228:	c5 0a       	sbc	r12, r21
     22a:	c7 0a       	sbc	r12, r23
     22c:	e3 0a       	sbc	r14, r19
     22e:	ee 0a       	sbc	r14, r30
     230:	f8 0a       	sbc	r15, r24
     232:	06 0b       	sbc	r16, r22
     234:	08 0b       	sbc	r16, r24
     236:	0a 0b       	sbc	r16, r26
     238:	14 0b       	sbc	r17, r20
     23a:	1e 0b       	sbc	r17, r30
     23c:	a6 0e       	add	r10, r22
     23e:	a9 0e       	add	r10, r25
     240:	ac 0e       	add	r10, r28
     242:	af 0e       	add	r10, r31
     244:	b2 0e       	add	r11, r18
     246:	b5 0e       	add	r11, r21
     248:	b8 0e       	add	r11, r24

0000024a <__ctors_end>:
     24a:	11 24       	eor	r1, r1
     24c:	1f be       	out	0x3f, r1	; 63
     24e:	cf ef       	ldi	r28, 0xFF	; 255
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df e2       	ldi	r29, 0x2F	; 47
     254:	de bf       	out	0x3e, r29	; 62

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e6 e5       	ldi	r30, 0x56	; 86
     25e:	fa e2       	ldi	r31, 0x2A	; 42
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x10>
     262:	05 90       	lpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a2 3b       	cpi	r26, 0xB2	; 178
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0xc>

0000026c <__do_clear_bss>:
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	a2 eb       	ldi	r26, 0xB2	; 178
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	af 35       	cpi	r26, 0x5F	; 95
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	45 d0       	rcall	.+138    	; 0x308 <main>
     27e:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <_exit>

00000282 <__bad_interrupt>:
     282:	be ce       	rjmp	.-644    	; 0x0 <__vectors>

00000284 <tiny_dig_setup>:
#include "tiny_dig.h"
#include "globals.h"


void tiny_dig_setup(void){
	PORTE.DIR = 0x0f;
     284:	e0 e8       	ldi	r30, 0x80	; 128
     286:	f6 e0       	ldi	r31, 0x06	; 6
     288:	8f e0       	ldi	r24, 0x0F	; 15
     28a:	80 83       	st	Z, r24
	PORTE.OUT = 0x05;
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	84 83       	std	Z+4, r24	; 0x04
     290:	08 95       	ret

00000292 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     292:	08 95       	ret

00000294 <iso_callback>:
{
	return true;
}

void iso_callback(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[usb_state * PACKET_SIZE], 250, iso_callback);
     294:	40 91 b7 20 	lds	r20, 0x20B7
     298:	2e ee       	ldi	r18, 0xEE	; 238
     29a:	32 e0       	ldi	r19, 0x02	; 2
     29c:	42 9f       	mul	r20, r18
     29e:	c0 01       	movw	r24, r0
     2a0:	43 9f       	mul	r20, r19
     2a2:	90 0d       	add	r25, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	4a e4       	ldi	r20, 0x4A	; 74
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	6a ef       	ldi	r22, 0xFA	; 250
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	84 58       	subi	r24, 0x84	; 132
     2b0:	99 4d       	sbci	r25, 0xD9	; 217
     2b2:	64 c7       	rjmp	.+3784   	; 0x117c <udi_vendor_iso_in_run>
     2b4:	08 95       	ret

000002b6 <iso_callback2>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * PACKET_SIZE], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback2(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 250], 250, iso_callback2);
     2b6:	40 91 b7 20 	lds	r20, 0x20B7
     2ba:	2e ee       	ldi	r18, 0xEE	; 238
     2bc:	32 e0       	ldi	r19, 0x02	; 2
     2be:	42 9f       	mul	r20, r18
     2c0:	c0 01       	movw	r24, r0
     2c2:	43 9f       	mul	r20, r19
     2c4:	90 0d       	add	r25, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	4b e5       	ldi	r20, 0x5B	; 91
     2ca:	51 e0       	ldi	r21, 0x01	; 1
     2cc:	6a ef       	ldi	r22, 0xFA	; 250
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	8a 58       	subi	r24, 0x8A	; 138
     2d2:	98 4d       	sbci	r25, 0xD8	; 216
     2d4:	5f c7       	rjmp	.+3774   	; 0x1194 <udi_vendor_iso_in_run2>
     2d6:	08 95       	ret

000002d8 <iso_callback3>:
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * PACKET_SIZE + 250], PACKET_SIZE, iso_callback);
	return;
}

void iso_callback3(udd_ep_status_t status, iram_size_t nb_transfered, udd_ep_id_t ep){
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[usb_state * PACKET_SIZE + 500], 250, iso_callback3);
     2d8:	40 91 b7 20 	lds	r20, 0x20B7
     2dc:	2e ee       	ldi	r18, 0xEE	; 238
     2de:	32 e0       	ldi	r19, 0x02	; 2
     2e0:	42 9f       	mul	r20, r18
     2e2:	c0 01       	movw	r24, r0
     2e4:	43 9f       	mul	r20, r19
     2e6:	90 0d       	add	r25, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	4c e6       	ldi	r20, 0x6C	; 108
     2ec:	51 e0       	ldi	r21, 0x01	; 1
     2ee:	6a ef       	ldi	r22, 0xFA	; 250
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	80 59       	subi	r24, 0x90	; 144
     2f4:	97 4d       	sbci	r25, 0xD7	; 215
     2f6:	5a d7       	rcall	.+3764   	; 0x11ac <udi_vendor_iso_in_run3>
	//if((int8_t) USB.FIFORP > -16) udi_vendor_iso_in_run((uint8_t *)&isoBuf[!usb_state * PACKET_SIZE + 500], PACKET_SIZE, iso_callback);
	usb_state = !usb_state;
     2f8:	90 91 b7 20 	lds	r25, 0x20B7
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	91 11       	cpse	r25, r1
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	80 93 b7 20 	sts	0x20B7, r24
     306:	08 95       	ret

00000308 <main>:
volatile unsigned short timerVals[TIMER_VAL_MAX];
volatile unsigned short timerValCtr = 0;


int main(void){
	irq_initialize_vectors();
     308:	87 e0       	ldi	r24, 0x07	; 7
     30a:	80 93 a2 00 	sts	0x00A2, r24
	cpu_irq_enable();
     30e:	78 94       	sei
	sysclk_init();
     310:	48 d6       	rcall	.+3216   	; 0xfa2 <sysclk_init>
	//OSC.DFLLCTRL = 
	board_init();
     312:	bf df       	rcall	.-130    	; 0x292 <board_init>
	udc_start();
     314:	0e 94 cd 09 	call	0x139a	; 0x139a <udc_start>
	tiny_dac_setup();
     318:	0f d1       	rcall	.+542    	; 0x538 <tiny_dac_setup>
	tiny_dma_setup();
     31a:	32 d1       	rcall	.+612    	; 0x580 <tiny_dma_setup>
	tiny_adc_setup(0, 0);
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	ce d0       	rcall	.+412    	; 0x4be <tiny_adc_setup>
	tiny_adc_pid_setup();
     322:	ba d0       	rcall	.+372    	; 0x498 <tiny_adc_pid_setup>
	tiny_adc_ch1setup(12);
     324:	8c e0       	ldi	r24, 0x0C	; 12
     326:	ae d0       	rcall	.+348    	; 0x484 <tiny_adc_ch1setup>
	tiny_timer_setup();
     328:	4c d5       	rcall	.+2712   	; 0xdc2 <tiny_timer_setup>
	tiny_uart_setup();
     32a:	0a d6       	rcall	.+3092   	; 0xf40 <tiny_uart_setup>
	tiny_spi_setup();
     32c:	21 d6       	rcall	.+3138   	; 0xf70 <tiny_spi_setup>
	tiny_dig_setup();
     32e:	aa df       	rcall	.-172    	; 0x284 <tiny_dig_setup>
			
	//USARTC0.DATA = 0x55;
	//asm("nop");
	
	
	precalc_DMA_CH0_DESTADDR0_b1_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE]) >> 0) & 0xFF;
     330:	2c e7       	ldi	r18, 0x7C	; 124
     332:	36 e2       	ldi	r19, 0x26	; 38
     334:	20 93 77 24 	sts	0x2477, r18
	precalc_DMA_CH0_DESTADDR0_b1_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE]) >> 0) & 0xFF;
     338:	8a e6       	ldi	r24, 0x6A	; 106
     33a:	99 e2       	ldi	r25, 0x29	; 41
     33c:	80 93 7a 24 	sts	0x247A, r24
	precalc_DMA_CH0_DESTADDR1_b1_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE]) >> 8) & 0xFF;
     340:	30 93 61 22 	sts	0x2261, r19
	precalc_DMA_CH0_DESTADDR1_b1_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE]) >> 8) & 0xFF;
     344:	90 93 60 22 	sts	0x2260, r25
	
	precalc_DMA_CH1_DESTADDR0_b2_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;
     348:	23 ef       	ldi	r18, 0xF3	; 243
     34a:	37 e2       	ldi	r19, 0x27	; 39
     34c:	20 93 5b 22 	sts	0x225B, r18
	precalc_DMA_CH1_DESTADDR0_b2_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;
     350:	81 ee       	ldi	r24, 0xE1	; 225
     352:	9a e2       	ldi	r25, 0x2A	; 42
     354:	80 93 58 2c 	sts	0x2C58, r24
	precalc_DMA_CH1_DESTADDR1_b2_state_equals_0 = (( (uint16_t) &isoBuf[0 * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     358:	30 93 64 24 	sts	0x2464, r19
	precalc_DMA_CH1_DESTADDR1_b2_state_equals_1 = (( (uint16_t) &isoBuf[1 * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;
     35c:	90 93 5a 22 	sts	0x225A, r25


	PR.PRPE &=0b11111110;
     360:	e0 e7       	ldi	r30, 0x70	; 112
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	85 81       	ldd	r24, Z+5	; 0x05
     366:	8e 7f       	andi	r24, 0xFE	; 254
     368:	85 83       	std	Z+5, r24	; 0x05
	TCE0.CTRLB = 0x00;
     36a:	e0 e0       	ldi	r30, 0x00	; 0
     36c:	fa e0       	ldi	r31, 0x0A	; 10
     36e:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLE = TC_BYTEM_NORMAL_gc;
     370:	14 82       	std	Z+4, r1	; 0x04
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     372:	16 82       	std	Z+6, r1	; 0x06
	TCE0.PER = 24000;  // Max value of CNT
     374:	80 ec       	ldi	r24, 0xC0	; 192
     376:	9d e5       	ldi	r25, 0x5D	; 93
     378:	86 a3       	std	Z+38, r24	; 0x26
     37a:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 83       	st	Z, r24
     380:	80 91 5c 22 	lds	r24, 0x225C
     384:	90 91 5d 22 	lds	r25, 0x225D
     388:	a0 91 5e 22 	lds	r26, 0x225E
     38c:	b0 91 5f 22 	lds	r27, 0x225F


	while (true) {
		debug_counter++;
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	a1 1d       	adc	r26, r1
     394:	b1 1d       	adc	r27, r1
		if(debug_counter > 100000000){
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	21 ee       	ldi	r18, 0xE1	; 225
     39a:	92 07       	cpc	r25, r18
     39c:	25 ef       	ldi	r18, 0xF5	; 245
     39e:	a2 07       	cpc	r26, r18
     3a0:	25 e0       	ldi	r18, 0x05	; 5
     3a2:	b2 07       	cpc	r27, r18
     3a4:	18 f0       	brcs	.+6      	; 0x3ac <main+0xa4>
			debug_counter = 0;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	dc 01       	movw	r26, r24
	...
			asm("nop");
			asm("nop");
			asm("nop");
	//test_byte = ADCA.CH1.RESH;
	//DO NOTHING!
	}
     3c8:	e3 cf       	rjmp	.-58     	; 0x390 <main+0x88>

000003ca <main_suspend_action>:
//! Global variable to give and record information about setup request management
udd_ctrl_request_t udd_g_ctrlreq;

//CALLBACKS:
void main_suspend_action(void)
{
     3ca:	08 95       	ret

000003cc <main_resume_action>:
	return;
}

void main_resume_action(void)
{
     3cc:	08 95       	ret

000003ce <main_sof_action>:
	return;
}

void main_sof_action(void)
{
	timerVals[timerValCtr] = TCE0.CNT;
     3ce:	e0 91 b2 20 	lds	r30, 0x20B2
     3d2:	f0 91 b3 20 	lds	r31, 0x20B3
     3d6:	80 91 20 0a 	lds	r24, 0x0A20
     3da:	90 91 21 0a 	lds	r25, 0x0A21
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	e7 5a       	subi	r30, 0xA7	; 167
     3e4:	f3 4d       	sbci	r31, 0xD3	; 211
     3e6:	80 83       	st	Z, r24
     3e8:	91 83       	std	Z+1, r25	; 0x01
	if(timerValCtr<TIMER_VAL_MAX) timerValCtr++;
     3ea:	80 91 b2 20 	lds	r24, 0x20B2
     3ee:	90 91 b3 20 	lds	r25, 0x20B3
     3f2:	8f 3f       	cpi	r24, 0xFF	; 255
     3f4:	91 05       	cpc	r25, r1
     3f6:	09 f0       	breq	.+2      	; 0x3fa <main_sof_action+0x2c>
     3f8:	50 f4       	brcc	.+20     	; 0x40e <main_sof_action+0x40>
     3fa:	80 91 b2 20 	lds	r24, 0x20B2
     3fe:	90 91 b3 20 	lds	r25, 0x20B3
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	80 93 b2 20 	sts	0x20B2, r24
     408:	90 93 b3 20 	sts	0x20B3, r25
     40c:	08 95       	ret
	else timerValCtr = 0;
     40e:	10 92 b2 20 	sts	0x20B2, r1
     412:	10 92 b3 20 	sts	0x20B3, r1
     416:	08 95       	ret

00000418 <main_vendor_enable>:
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 ba 20 	sts	0x20BA, r24
	udi_vendor_iso_in_run((uint8_t *)&isoBuf[0], PACKET_SIZE, iso_callback);
     41e:	4a e4       	ldi	r20, 0x4A	; 74
     420:	51 e0       	ldi	r21, 0x01	; 1
     422:	6e ee       	ldi	r22, 0xEE	; 238
     424:	72 e0       	ldi	r23, 0x02	; 2
     426:	8c e7       	ldi	r24, 0x7C	; 124
     428:	96 e2       	ldi	r25, 0x26	; 38
     42a:	a8 d6       	rcall	.+3408   	; 0x117c <udi_vendor_iso_in_run>
	udi_vendor_iso_in_run2((uint8_t *)&isoBuf[250], PACKET_SIZE, iso_callback2);
     42c:	4b e5       	ldi	r20, 0x5B	; 91
     42e:	51 e0       	ldi	r21, 0x01	; 1
     430:	6e ee       	ldi	r22, 0xEE	; 238
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	86 e7       	ldi	r24, 0x76	; 118
     436:	97 e2       	ldi	r25, 0x27	; 39
     438:	ad d6       	rcall	.+3418   	; 0x1194 <udi_vendor_iso_in_run2>
	udi_vendor_iso_in_run3((uint8_t *)&isoBuf[500], PACKET_SIZE, iso_callback3);
     43a:	4c e6       	ldi	r20, 0x6C	; 108
     43c:	51 e0       	ldi	r21, 0x01	; 1
     43e:	6e ee       	ldi	r22, 0xEE	; 238
     440:	72 e0       	ldi	r23, 0x02	; 2
     442:	80 e7       	ldi	r24, 0x70	; 112
     444:	98 e2       	ldi	r25, 0x28	; 40
     446:	b2 d6       	rcall	.+3428   	; 0x11ac <udi_vendor_iso_in_run3>
	return true;
}
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	08 95       	ret

0000044c <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     44c:	10 92 ba 20 	sts	0x20BA, r1
     450:	08 95       	ret

00000452 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	return 1;
}
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	08 95       	ret

00000456 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	return true;
}
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	08 95       	ret

0000045a <tiny_adc_ch0setup>:
		
	return;
}

void tiny_adc_ch0setup(unsigned char gain_mask){
	ADCA.CH0.CTRL = 0x00; //Reset
     45a:	e0 e0       	ldi	r30, 0x00	; 0
     45c:	f2 e0       	ldi	r31, 0x02	; 2
     45e:	10 a2       	std	Z+32, r1	; 0x20
	ADCA.CH0.CTRL = ADC_CH_START_bm | (gain_mask&0x1c) | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     460:	98 2f       	mov	r25, r24
     462:	9c 71       	andi	r25, 0x1C	; 28
     464:	93 68       	ori	r25, 0x83	; 131
     466:	90 a3       	std	Z+32, r25	; 0x20
	#ifdef VERO
			ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
	#else
			ADCA.CH0.MUXCTRL = ((gain_mask&0x80) ? ADC_CH_MUXPOS_PIN2_gc :  ADC_CH_MUXPOS_PIN0_gc) | ((gain_mask&0x80) ? ADC_CH_MUXNEG_PIN6_gc :  ADC_CH_MUXNEG_PIN4_gc);
     468:	88 23       	and	r24, r24
     46a:	1c f4       	brge	.+6      	; 0x472 <tiny_adc_ch0setup+0x18>
     46c:	90 e1       	ldi	r25, 0x10	; 16
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	02 c0       	rjmp	.+4      	; 0x476 <tiny_adc_ch0setup+0x1c>
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	89 2b       	or	r24, r25
     478:	e0 e0       	ldi	r30, 0x00	; 0
     47a:	f2 e0       	ldi	r31, 0x02	; 2
     47c:	81 a3       	std	Z+33, r24	; 0x21
	#endif
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     47e:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CH0.SCAN = 0x00;  //Disable scanning
     480:	16 a2       	std	Z+38, r1	; 0x26
     482:	08 95       	ret

00000484 <tiny_adc_ch1setup>:
}

void tiny_adc_ch1setup(unsigned char gain_mask){
	ADCA.CH2.CTRL = 0x00; //Reset
     484:	e0 e0       	ldi	r30, 0x00	; 0
     486:	f2 e0       	ldi	r31, 0x02	; 2
     488:	10 aa       	std	Z+48, r1	; 0x30
	ADCA.CH2.CTRL = ADC_CH_START_bm | gain_mask | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     48a:	83 68       	ori	r24, 0x83	; 131
     48c:	80 ab       	std	Z+48, r24	; 0x30
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc | ADC_CH_MUXNEG_PIN4_gc;
     48e:	80 e1       	ldi	r24, 0x10	; 16
     490:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     492:	12 aa       	std	Z+50, r1	; 0x32
	ADCA.CH2.SCAN = 0x00;  //Disable scanning
     494:	16 aa       	std	Z+54, r1	; 0x36
     496:	08 95       	ret

00000498 <tiny_adc_pid_setup>:
}

void tiny_adc_pid_setup(void){
	ADCA.CH1.CTRL = 0x00; //Reset
     498:	e0 e0       	ldi	r30, 0x00	; 0
     49a:	f2 e0       	ldi	r31, 0x02	; 2
     49c:	10 a6       	std	Z+40, r1	; 0x28
	ADCA.CH1.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
     49e:	83 e8       	ldi	r24, 0x83	; 131
     4a0:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | 0b00000111;
     4a2:	8f e2       	ldi	r24, 0x2F	; 47
     4a4:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     4a6:	12 a6       	std	Z+42, r1	; 0x2a
	ADCA.CH1.SCAN = 0x00;  //Disable scanning
     4a8:	16 a6       	std	Z+46, r1	; 0x2e
     4aa:	08 95       	ret

000004ac <ReadCalibrationByte>:
//FROM: http://www.avrfreaks.net/forum/xmega-production-signature-row
uint8_t ReadCalibrationByte(uint8_t index){
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     4ac:	aa ec       	ldi	r26, 0xCA	; 202
     4ae:	b1 e0       	ldi	r27, 0x01	; 1
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     4b4:	e8 2f       	mov	r30, r24
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     4ba:	1c 92       	st	X, r1

	return( result );
     4bc:	08 95       	ret

000004be <tiny_adc_setup>:
// These 2 files need to be included in order to read
// the production calibration values from EEPROM
#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
	PR.PRPA &=0b11111101;
     4c2:	e0 e7       	ldi	r30, 0x70	; 112
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	91 81       	ldd	r25, Z+1	; 0x01
     4c8:	9d 7f       	andi	r25, 0xFD	; 253
     4ca:	91 83       	std	Z+1, r25	; 0x01
	
	ADCA.CTRLA = 0x00; //Turn off
     4cc:	10 92 00 02 	sts	0x0200, r1
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     4d0:	62 30       	cpi	r22, 0x02	; 2
     4d2:	31 f1       	breq	.+76     	; 0x520 <tiny_adc_setup+0x62>
     4d4:	e0 e0       	ldi	r30, 0x00	; 0
     4d6:	f2 e0       	ldi	r31, 0x02	; 2
     4d8:	9c e1       	ldi	r25, 0x1C	; 28
     4da:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     4dc:	90 e4       	ldi	r25, 0x40	; 64
     4de:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     4e0:	81 11       	cpse	r24, r1
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <tiny_adc_setup+0x2a>
     4e4:	80 e4       	ldi	r24, 0x40	; 64
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <tiny_adc_setup+0x2c>
     4e8:	80 ec       	ldi	r24, 0xC0	; 192
     4ea:	80 93 03 02 	sts	0x0203, r24
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     4ee:	61 30       	cpi	r22, 0x01	; 1
     4f0:	11 f0       	breq	.+4      	; 0x4f6 <tiny_adc_setup+0x38>
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <tiny_adc_setup+0x3a>
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	d2 e0       	ldi	r29, 0x02	; 2
     4fc:	8c 83       	std	Y+4, r24	; 0x04
	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));	//Load calibration bytes from production row.
     4fe:	80 e2       	ldi	r24, 0x20	; 32
     500:	d5 df       	rcall	.-86     	; 0x4ac <ReadCalibrationByte>
     502:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));	//Load calibration bytes from production row.
     504:	81 e2       	ldi	r24, 0x21	; 33
     506:	d2 df       	rcall	.-92     	; 0x4ac <ReadCalibrationByte>
     508:	8d 87       	std	Y+13, r24	; 0x0d
	ADCA.CMP = 0x0000;		//No compare used
     50a:	18 8e       	std	Y+24, r1	; 0x18
     50c:	19 8e       	std	Y+25, r1	; 0x19

	ADCA.CTRLA = ADC_ENABLE_bm;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	88 83       	st	Y, r24
	
	tiny_adc_pid_setup();
     512:	c2 df       	rcall	.-124    	; 0x498 <tiny_adc_pid_setup>
     514:	0e c0       	rjmp	.+28     	; 0x532 <tiny_adc_setup+0x74>
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     516:	80 ec       	ldi	r24, 0xC0	; 192
     518:	80 93 03 02 	sts	0x0203, r24
	
	ADCA.PRESCALER = seven_fiddy_ksps == 1 ? ADC_PRESCALER_DIV16_gc : ADC_PRESCALER_DIV32_gc;  //ADC Clock = Sysclock/128
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	ec cf       	rjmp	.-40     	; 0x4f8 <tiny_adc_setup+0x3a>

void tiny_adc_setup(unsigned char ch2_enable, unsigned char seven_fiddy_ksps){
	PR.PRPA &=0b11111101;
	
	ADCA.CTRLA = 0x00; //Turn off
	ADCA.CTRLB = ADC_FREERUN_bm | (seven_fiddy_ksps == 2 ? ADC_RESOLUTION_LEFT12BIT_gc : ADC_RESOLUTION_8BIT_gc) | ADC_CONMODE_bm ;
     520:	e0 e0       	ldi	r30, 0x00	; 0
     522:	f2 e0       	ldi	r31, 0x02	; 2
     524:	9e e1       	ldi	r25, 0x1E	; 30
     526:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_INTVCC2_gc;
     528:	90 e4       	ldi	r25, 0x40	; 64
     52a:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ch2_enable ? ADC_SWEEP_0123_gc : ADC_SWEEP_01_gc;  //Non-zero causes issues with interrupts!  ;.;		
     52c:	81 11       	cpse	r24, r1
     52e:	f3 cf       	rjmp	.-26     	; 0x516 <tiny_adc_setup+0x58>
     530:	d9 cf       	rjmp	.-78     	; 0x4e4 <tiny_adc_setup+0x26>
	ADCA.CTRLA = ADC_ENABLE_bm;
	
	tiny_adc_pid_setup();
		
	return;
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <tiny_dac_setup>:
#include "tiny_adc.h"

#include <avr/pgmspace.h>
#include <stddef.h>

void tiny_dac_setup(void){
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
	
	//Turn on in PR
	PR.PRPB &=0b11111011;
     53c:	e0 e7       	ldi	r30, 0x70	; 112
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	82 81       	ldd	r24, Z+2	; 0x02
     542:	8b 7f       	andi	r24, 0xFB	; 251
     544:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA = DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
     546:	c0 e2       	ldi	r28, 0x20	; 32
     548:	d3 e0       	ldi	r29, 0x03	; 3
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	88 83       	st	Y, r24
	DACB.CTRLB = DAC_CHSEL_DUAL_gc;
     54e:	80 e4       	ldi	r24, 0x40	; 64
     550:	89 83       	std	Y+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | DAC_LEFTADJ_bm;
     552:	89 e0       	ldi	r24, 0x09	; 9
     554:	8a 83       	std	Y+2, r24	; 0x02
	//EVCTRL unset
	//DACB.CH0DATAH = 127;//contains (8-bit) sample, assuming left adjust!
	
	//TODO: Calibrate
	DACB.CH0GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL));	//Load calibration bytes from production row.
     556:	83 e3       	ldi	r24, 0x33	; 51
     558:	a9 df       	rcall	.-174    	; 0x4ac <ReadCalibrationByte>
     55a:	88 87       	std	Y+8, r24	; 0x08
	DACB.CH0OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL));	//Load calibration bytes from production row.
     55c:	82 e3       	ldi	r24, 0x32	; 50
     55e:	a6 df       	rcall	.-180    	; 0x4ac <ReadCalibrationByte>
     560:	89 87       	std	Y+9, r24	; 0x09

	DACB.CH1GAINCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL));	//Load calibration bytes from production row.
     562:	87 e3       	ldi	r24, 0x37	; 55
     564:	a3 df       	rcall	.-186    	; 0x4ac <ReadCalibrationByte>
     566:	8a 87       	std	Y+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL));	//Load calibration bytes from production row.
     568:	86 e3       	ldi	r24, 0x36	; 54
     56a:	a0 df       	rcall	.-192    	; 0x4ac <ReadCalibrationByte>
     56c:	8b 87       	std	Y+11, r24	; 0x0b

	//Set up for triple mode!
	PORTB.DIR |= 0x03;
     56e:	e0 e2       	ldi	r30, 0x20	; 32
     570:	f6 e0       	ldi	r31, 0x06	; 6
     572:	80 81       	ld	r24, Z
     574:	83 60       	ori	r24, 0x03	; 3
     576:	80 83       	st	Z, r24
	PORTB.OUT = 0x00;
     578:	14 82       	std	Z+4, r1	; 0x04
	
	

     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <tiny_dma_setup>:
				
		//Must enable last for REPCNT won't work!
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!	
}

void tiny_dma_loop_mode_7(void){
     580:	e0 e7       	ldi	r30, 0x70	; 112
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	8e 7f       	andi	r24, 0xFE	; 254
     588:	80 83       	st	Z, r24
     58a:	82 e8       	ldi	r24, 0x82	; 130
     58c:	80 93 00 01 	sts	0x0100, r24
     590:	08 95       	ret

00000592 <tiny_dma_flush>:
     592:	e0 e0       	ldi	r30, 0x00	; 0
     594:	f1 e0       	ldi	r31, 0x01	; 1
     596:	10 8a       	std	Z+16, r1	; 0x10
     598:	80 e4       	ldi	r24, 0x40	; 64
     59a:	80 8b       	std	Z+16, r24	; 0x10
     59c:	10 a2       	std	Z+32, r1	; 0x20
     59e:	80 a3       	std	Z+32, r24	; 0x20
     5a0:	10 aa       	std	Z+48, r1	; 0x30
     5a2:	80 ab       	std	Z+48, r24	; 0x30
     5a4:	e0 e4       	ldi	r30, 0x40	; 64
     5a6:	f1 e0       	ldi	r31, 0x01	; 1
     5a8:	10 82       	st	Z, r1
     5aa:	80 83       	st	Z, r24
     5ac:	08 95       	ret

000005ae <tiny_dma_set_mode_0>:
     5ae:	10 92 00 20 	sts	0x2000, r1
     5b2:	ef df       	rcall	.-34     	; 0x592 <tiny_dma_flush>
     5b4:	e0 e0       	ldi	r30, 0x00	; 0
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	16 aa       	std	Z+54, r1	; 0x36
     5ba:	94 e2       	ldi	r25, 0x24	; 36
     5bc:	90 ab       	std	Z+48, r25	; 0x30
     5be:	11 aa       	std	Z+49, r1	; 0x31
     5c0:	49 e5       	ldi	r20, 0x59	; 89
     5c2:	42 ab       	std	Z+50, r20	; 0x32
     5c4:	32 e0       	ldi	r19, 0x02	; 2
     5c6:	33 ab       	std	Z+51, r19	; 0x33
     5c8:	60 91 02 20 	lds	r22, 0x2002
     5cc:	70 91 03 20 	lds	r23, 0x2003
     5d0:	64 ab       	std	Z+52, r22	; 0x34
     5d2:	75 ab       	std	Z+53, r23	; 0x35
     5d4:	6b e7       	ldi	r22, 0x7B	; 123
     5d6:	74 e2       	ldi	r23, 0x24	; 36
     5d8:	60 af       	std	Z+56, r22	; 0x38
     5da:	71 af       	std	Z+57, r23	; 0x39
     5dc:	12 ae       	std	Z+58, r1	; 0x3a
     5de:	8b e3       	ldi	r24, 0x3B	; 59
     5e0:	84 af       	std	Z+60, r24	; 0x3c
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	80 93 3d 01 	sts	0x013D, r24
     5e8:	10 92 3e 01 	sts	0x013E, r1
     5ec:	20 a9       	ldd	r18, Z+48	; 0x30
     5ee:	20 68       	ori	r18, 0x80	; 128
     5f0:	20 ab       	std	Z+48, r18	; 0x30
     5f2:	10 92 46 01 	sts	0x0146, r1
     5f6:	a0 e4       	ldi	r26, 0x40	; 64
     5f8:	b1 e0       	ldi	r27, 0x01	; 1
     5fa:	9c 93       	st	X, r25
     5fc:	10 92 41 01 	sts	0x0141, r1
     600:	40 93 42 01 	sts	0x0142, r20
     604:	80 93 43 01 	sts	0x0143, r24
     608:	40 91 04 20 	lds	r20, 0x2004
     60c:	50 91 05 20 	lds	r21, 0x2005
     610:	40 93 44 01 	sts	0x0144, r20
     614:	50 93 45 01 	sts	0x0145, r21
     618:	44 e6       	ldi	r20, 0x64	; 100
     61a:	52 e2       	ldi	r21, 0x22	; 34
     61c:	40 93 48 01 	sts	0x0148, r20
     620:	50 93 49 01 	sts	0x0149, r21
     624:	10 92 4a 01 	sts	0x014A, r1
     628:	29 e3       	ldi	r18, 0x39	; 57
     62a:	20 93 4c 01 	sts	0x014C, r18
     62e:	80 93 4d 01 	sts	0x014D, r24
     632:	10 92 4e 01 	sts	0x014E, r1
     636:	2c 91       	ld	r18, X
     638:	20 68       	ori	r18, 0x80	; 128
     63a:	2c 93       	st	X, r18
     63c:	10 8a       	std	Z+16, r1	; 0x10
     63e:	20 e4       	ldi	r18, 0x40	; 64
     640:	20 8b       	std	Z+16, r18	; 0x10
     642:	24 e0       	ldi	r18, 0x04	; 4
     644:	20 8b       	std	Z+16, r18	; 0x10
     646:	81 8b       	std	Z+17, r24	; 0x11
     648:	81 e9       	ldi	r24, 0x91	; 145
     64a:	82 8b       	std	Z+18, r24	; 0x12
     64c:	80 e1       	ldi	r24, 0x10	; 16
     64e:	83 8b       	std	Z+19, r24	; 0x13
     650:	47 e7       	ldi	r20, 0x77	; 119
     652:	51 e0       	ldi	r21, 0x01	; 1
     654:	44 8b       	std	Z+20, r20	; 0x14
     656:	55 8b       	std	Z+21, r21	; 0x15
     658:	90 8f       	std	Z+24, r25	; 0x18
     65a:	31 8f       	std	Z+25, r19	; 0x19
     65c:	12 8e       	std	Z+26, r1	; 0x1a
     65e:	40 91 b9 20 	lds	r20, 0x20B9
     662:	2e ee       	ldi	r18, 0xEE	; 238
     664:	32 e0       	ldi	r19, 0x02	; 2
     666:	42 9f       	mul	r20, r18
     668:	c0 01       	movw	r24, r0
     66a:	43 9f       	mul	r20, r19
     66c:	90 0d       	add	r25, r0
     66e:	11 24       	eor	r1, r1
     670:	84 58       	subi	r24, 0x84	; 132
     672:	99 4d       	sbci	r25, 0xD9	; 217
     674:	84 8f       	std	Z+28, r24	; 0x1c
     676:	40 91 b9 20 	lds	r20, 0x20B9
     67a:	42 9f       	mul	r20, r18
     67c:	c0 01       	movw	r24, r0
     67e:	43 9f       	mul	r20, r19
     680:	90 0d       	add	r25, r0
     682:	11 24       	eor	r1, r1
     684:	84 58       	subi	r24, 0x84	; 132
     686:	99 4d       	sbci	r25, 0xD9	; 217
     688:	95 8f       	std	Z+29, r25	; 0x1d
     68a:	16 8e       	std	Z+30, r1	; 0x1e
     68c:	10 92 b9 20 	sts	0x20B9, r1
     690:	10 92 b8 20 	sts	0x20B8, r1
     694:	10 92 b7 20 	sts	0x20B7, r1
     698:	80 89       	ldd	r24, Z+16	; 0x10
     69a:	80 68       	ori	r24, 0x80	; 128
     69c:	80 8b       	std	Z+16, r24	; 0x10
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	80 93 b5 20 	sts	0x20B5, r24
     6a4:	08 95       	ret

000006a6 <tiny_dma_set_mode_1>:
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 00 20 	sts	0x2000, r24
     6b0:	70 df       	rcall	.-288    	; 0x592 <tiny_dma_flush>
     6b2:	e0 e0       	ldi	r30, 0x00	; 0
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	10 aa       	std	Z+48, r1	; 0x30
     6b8:	80 e4       	ldi	r24, 0x40	; 64
     6ba:	80 ab       	std	Z+48, r24	; 0x30
     6bc:	94 e0       	ldi	r25, 0x04	; 4
     6be:	90 ab       	std	Z+48, r25	; 0x30
     6c0:	11 aa       	std	Z+49, r1	; 0x31
     6c2:	12 aa       	std	Z+50, r1	; 0x32
     6c4:	5b e4       	ldi	r21, 0x4B	; 75
     6c6:	53 ab       	std	Z+51, r21	; 0x33
     6c8:	14 aa       	std	Z+52, r1	; 0x34
     6ca:	15 aa       	std	Z+53, r1	; 0x35
     6cc:	16 aa       	std	Z+54, r1	; 0x36
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e2       	ldi	r19, 0x20	; 32
     6d2:	20 af       	std	Z+56, r18	; 0x38
     6d4:	31 af       	std	Z+57, r19	; 0x39
     6d6:	12 ae       	std	Z+58, r1	; 0x3a
     6d8:	40 ea       	ldi	r20, 0xA0	; 160
     6da:	44 af       	std	Z+60, r20	; 0x3c
     6dc:	38 e0       	ldi	r19, 0x08	; 8
     6de:	30 93 3d 01 	sts	0x013D, r19
     6e2:	10 92 3e 01 	sts	0x013E, r1
     6e6:	80 a9       	ldd	r24, Z+48	; 0x30
     6e8:	80 6a       	ori	r24, 0xA0	; 160
     6ea:	80 ab       	std	Z+48, r24	; 0x30
     6ec:	85 e5       	ldi	r24, 0x55	; 85
     6ee:	80 93 a0 08 	sts	0x08A0, r24
     6f2:	10 92 46 01 	sts	0x0146, r1
     6f6:	a0 e4       	ldi	r26, 0x40	; 64
     6f8:	b1 e0       	ldi	r27, 0x01	; 1
     6fa:	d4 e2       	ldi	r29, 0x24	; 36
     6fc:	dc 93       	st	X, r29
     6fe:	10 92 41 01 	sts	0x0141, r1
     702:	89 e5       	ldi	r24, 0x59	; 89
     704:	80 93 42 01 	sts	0x0142, r24
     708:	c2 e0       	ldi	r28, 0x02	; 2
     70a:	c0 93 43 01 	sts	0x0143, r28
     70e:	60 91 02 20 	lds	r22, 0x2002
     712:	70 91 03 20 	lds	r23, 0x2003
     716:	60 93 44 01 	sts	0x0144, r22
     71a:	70 93 45 01 	sts	0x0145, r23
     71e:	6b e7       	ldi	r22, 0x7B	; 123
     720:	74 e2       	ldi	r23, 0x24	; 36
     722:	60 93 48 01 	sts	0x0148, r22
     726:	70 93 49 01 	sts	0x0149, r23
     72a:	10 92 4a 01 	sts	0x014A, r1
     72e:	8b e3       	ldi	r24, 0x3B	; 59
     730:	80 93 4c 01 	sts	0x014C, r24
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	80 93 4d 01 	sts	0x014D, r24
     73a:	10 92 4e 01 	sts	0x014E, r1
     73e:	2c 91       	ld	r18, X
     740:	20 68       	ori	r18, 0x80	; 128
     742:	2c 93       	st	X, r18
     744:	90 8b       	std	Z+16, r25	; 0x10
     746:	81 8b       	std	Z+17, r24	; 0x11
     748:	a1 e9       	ldi	r26, 0x91	; 145
     74a:	a2 8b       	std	Z+18, r26	; 0x12
     74c:	20 e1       	ldi	r18, 0x10	; 16
     74e:	23 8b       	std	Z+19, r18	; 0x13
     750:	67 e7       	ldi	r22, 0x77	; 119
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	64 8b       	std	Z+20, r22	; 0x14
     756:	75 8b       	std	Z+21, r23	; 0x15
     758:	d0 8f       	std	Z+24, r29	; 0x18
     75a:	c1 8f       	std	Z+25, r28	; 0x19
     75c:	12 8e       	std	Z+26, r1	; 0x1a
     75e:	cc e7       	ldi	r28, 0x7C	; 124
     760:	d6 e2       	ldi	r29, 0x26	; 38
     762:	c4 8f       	std	Z+28, r28	; 0x1c
     764:	d5 8f       	std	Z+29, r29	; 0x1d
     766:	16 8e       	std	Z+30, r1	; 0x1e
     768:	20 89       	ldd	r18, Z+16	; 0x10
     76a:	20 68       	ori	r18, 0x80	; 128
     76c:	20 8b       	std	Z+16, r18	; 0x10
     76e:	90 a3       	std	Z+32, r25	; 0x20
     770:	81 a3       	std	Z+33, r24	; 0x21
     772:	a2 a3       	std	Z+34, r26	; 0x22
     774:	53 a3       	std	Z+35, r21	; 0x23
     776:	64 a3       	std	Z+36, r22	; 0x24
     778:	75 a3       	std	Z+37, r23	; 0x25
     77a:	40 a7       	std	Z+40, r20	; 0x28
     77c:	31 a7       	std	Z+41, r19	; 0x29
     77e:	12 a6       	std	Z+42, r1	; 0x2a
     780:	83 ef       	ldi	r24, 0xF3	; 243
     782:	97 e2       	ldi	r25, 0x27	; 39
     784:	84 a7       	std	Z+44, r24	; 0x2c
     786:	95 a7       	std	Z+45, r25	; 0x2d
     788:	16 a6       	std	Z+46, r1	; 0x2e
     78a:	80 a1       	ldd	r24, Z+32	; 0x20
     78c:	80 68       	ori	r24, 0x80	; 128
     78e:	80 a3       	std	Z+32, r24	; 0x20
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <tiny_dma_set_mode_2>:
     796:	cf 93       	push	r28
     798:	f8 94       	cli
     79a:	c2 e0       	ldi	r28, 0x02	; 2
     79c:	c0 93 00 20 	sts	0x2000, r28
     7a0:	f8 de       	rcall	.-528    	; 0x592 <tiny_dma_flush>
     7a2:	e0 e0       	ldi	r30, 0x00	; 0
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	16 aa       	std	Z+54, r1	; 0x36
     7a8:	94 e2       	ldi	r25, 0x24	; 36
     7aa:	90 ab       	std	Z+48, r25	; 0x30
     7ac:	11 aa       	std	Z+49, r1	; 0x31
     7ae:	39 e5       	ldi	r19, 0x59	; 89
     7b0:	32 ab       	std	Z+50, r19	; 0x32
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	83 ab       	std	Z+51, r24	; 0x33
     7b6:	40 91 04 20 	lds	r20, 0x2004
     7ba:	50 91 05 20 	lds	r21, 0x2005
     7be:	44 ab       	std	Z+52, r20	; 0x34
     7c0:	55 ab       	std	Z+53, r21	; 0x35
     7c2:	44 e6       	ldi	r20, 0x64	; 100
     7c4:	52 e2       	ldi	r21, 0x22	; 34
     7c6:	40 af       	std	Z+56, r20	; 0x38
     7c8:	51 af       	std	Z+57, r21	; 0x39
     7ca:	12 ae       	std	Z+58, r1	; 0x3a
     7cc:	29 e3       	ldi	r18, 0x39	; 57
     7ce:	24 af       	std	Z+60, r18	; 0x3c
     7d0:	80 93 3d 01 	sts	0x013D, r24
     7d4:	10 92 3e 01 	sts	0x013E, r1
     7d8:	20 a9       	ldd	r18, Z+48	; 0x30
     7da:	20 68       	ori	r18, 0x80	; 128
     7dc:	20 ab       	std	Z+48, r18	; 0x30
     7de:	10 92 46 01 	sts	0x0146, r1
     7e2:	a0 e4       	ldi	r26, 0x40	; 64
     7e4:	b1 e0       	ldi	r27, 0x01	; 1
     7e6:	9c 93       	st	X, r25
     7e8:	10 92 41 01 	sts	0x0141, r1
     7ec:	30 93 42 01 	sts	0x0142, r19
     7f0:	80 93 43 01 	sts	0x0143, r24
     7f4:	20 91 02 20 	lds	r18, 0x2002
     7f8:	30 91 03 20 	lds	r19, 0x2003
     7fc:	20 93 44 01 	sts	0x0144, r18
     800:	30 93 45 01 	sts	0x0145, r19
     804:	2b e7       	ldi	r18, 0x7B	; 123
     806:	34 e2       	ldi	r19, 0x24	; 36
     808:	20 93 48 01 	sts	0x0148, r18
     80c:	30 93 49 01 	sts	0x0149, r19
     810:	10 92 4a 01 	sts	0x014A, r1
     814:	2b e3       	ldi	r18, 0x3B	; 59
     816:	20 93 4c 01 	sts	0x014C, r18
     81a:	80 93 4d 01 	sts	0x014D, r24
     81e:	10 92 4e 01 	sts	0x014E, r1
     822:	2c 91       	ld	r18, X
     824:	20 68       	ori	r18, 0x80	; 128
     826:	2c 93       	st	X, r18
     828:	54 e0       	ldi	r21, 0x04	; 4
     82a:	50 8b       	std	Z+16, r21	; 0x10
     82c:	81 8b       	std	Z+17, r24	; 0x11
     82e:	41 e9       	ldi	r20, 0x91	; 145
     830:	42 8b       	std	Z+18, r20	; 0x12
     832:	c3 8b       	std	Z+19, r28	; 0x13
     834:	27 e7       	ldi	r18, 0x77	; 119
     836:	31 e0       	ldi	r19, 0x01	; 1
     838:	24 8b       	std	Z+20, r18	; 0x14
     83a:	35 8b       	std	Z+21, r19	; 0x15
     83c:	90 8f       	std	Z+24, r25	; 0x18
     83e:	c1 8f       	std	Z+25, r28	; 0x19
     840:	12 8e       	std	Z+26, r1	; 0x1a
     842:	6c e7       	ldi	r22, 0x7C	; 124
     844:	76 e2       	ldi	r23, 0x26	; 38
     846:	64 8f       	std	Z+28, r22	; 0x1c
     848:	75 8f       	std	Z+29, r23	; 0x1d
     84a:	16 8e       	std	Z+30, r1	; 0x1e
     84c:	50 a3       	std	Z+32, r21	; 0x20
     84e:	81 a3       	std	Z+33, r24	; 0x21
     850:	42 a3       	std	Z+34, r20	; 0x22
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	83 a3       	std	Z+35, r24	; 0x23
     856:	24 a3       	std	Z+36, r18	; 0x24
     858:	35 a3       	std	Z+37, r19	; 0x25
     85a:	84 e3       	ldi	r24, 0x34	; 52
     85c:	80 a7       	std	Z+40, r24	; 0x28
     85e:	c1 a7       	std	Z+41, r28	; 0x29
     860:	12 a6       	std	Z+42, r1	; 0x2a
     862:	83 ef       	ldi	r24, 0xF3	; 243
     864:	97 e2       	ldi	r25, 0x27	; 39
     866:	84 a7       	std	Z+44, r24	; 0x2c
     868:	95 a7       	std	Z+45, r25	; 0x2d
     86a:	16 a6       	std	Z+46, r1	; 0x2e
     86c:	80 89       	ldd	r24, Z+16	; 0x10
     86e:	80 68       	ori	r24, 0x80	; 128
     870:	80 8b       	std	Z+16, r24	; 0x10
     872:	00 c0       	rjmp	.+0      	; 0x874 <tiny_dma_set_mode_2+0xde>
     874:	00 c0       	rjmp	.+0      	; 0x876 <tiny_dma_set_mode_2+0xe0>
     876:	00 00       	nop
     878:	80 a1       	ldd	r24, Z+32	; 0x20
     87a:	80 68       	ori	r24, 0x80	; 128
     87c:	80 a3       	std	Z+32, r24	; 0x20
     87e:	78 94       	sei
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <tiny_dma_set_mode_3>:
     884:	cf 93       	push	r28
     886:	c3 e0       	ldi	r28, 0x03	; 3
     888:	c0 93 00 20 	sts	0x2000, r28
     88c:	82 de       	rcall	.-764    	; 0x592 <tiny_dma_flush>
     88e:	e0 e0       	ldi	r30, 0x00	; 0
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	10 a2       	std	Z+32, r1	; 0x20
     894:	50 e4       	ldi	r21, 0x40	; 64
     896:	50 a3       	std	Z+32, r21	; 0x20
     898:	44 e0       	ldi	r20, 0x04	; 4
     89a:	40 a3       	std	Z+32, r20	; 0x20
     89c:	11 a2       	std	Z+33, r1	; 0x21
     89e:	12 a2       	std	Z+34, r1	; 0x22
     8a0:	3b e4       	ldi	r19, 0x4B	; 75
     8a2:	33 a3       	std	Z+35, r19	; 0x23
     8a4:	14 a2       	std	Z+36, r1	; 0x24
     8a6:	15 a2       	std	Z+37, r1	; 0x25
     8a8:	16 a2       	std	Z+38, r1	; 0x26
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e2       	ldi	r25, 0x20	; 32
     8ae:	80 a7       	std	Z+40, r24	; 0x28
     8b0:	91 a7       	std	Z+41, r25	; 0x29
     8b2:	12 a6       	std	Z+42, r1	; 0x2a
     8b4:	20 ea       	ldi	r18, 0xA0	; 160
     8b6:	24 a7       	std	Z+44, r18	; 0x2c
     8b8:	98 e0       	ldi	r25, 0x08	; 8
     8ba:	95 a7       	std	Z+45, r25	; 0x2d
     8bc:	16 a6       	std	Z+46, r1	; 0x2e
     8be:	80 a1       	ldd	r24, Z+32	; 0x20
     8c0:	80 6a       	ori	r24, 0xA0	; 160
     8c2:	80 a3       	std	Z+32, r24	; 0x20
     8c4:	85 e5       	ldi	r24, 0x55	; 85
     8c6:	80 93 a0 08 	sts	0x08A0, r24
     8ca:	16 aa       	std	Z+54, r1	; 0x36
     8cc:	74 e2       	ldi	r23, 0x24	; 36
     8ce:	70 ab       	std	Z+48, r23	; 0x30
     8d0:	11 aa       	std	Z+49, r1	; 0x31
     8d2:	69 e5       	ldi	r22, 0x59	; 89
     8d4:	62 ab       	std	Z+50, r22	; 0x32
     8d6:	c3 ab       	std	Z+51, r28	; 0x33
     8d8:	a0 91 04 20 	lds	r26, 0x2004
     8dc:	b0 91 05 20 	lds	r27, 0x2005
     8e0:	a4 ab       	std	Z+52, r26	; 0x34
     8e2:	b5 ab       	std	Z+53, r27	; 0x35
     8e4:	a4 e6       	ldi	r26, 0x64	; 100
     8e6:	b2 e2       	ldi	r27, 0x22	; 34
     8e8:	a0 af       	std	Z+56, r26	; 0x38
     8ea:	b1 af       	std	Z+57, r27	; 0x39
     8ec:	12 ae       	std	Z+58, r1	; 0x3a
     8ee:	89 e3       	ldi	r24, 0x39	; 57
     8f0:	84 af       	std	Z+60, r24	; 0x3c
     8f2:	c0 93 3d 01 	sts	0x013D, r28
     8f6:	10 92 3e 01 	sts	0x013E, r1
     8fa:	80 a9       	ldd	r24, Z+48	; 0x30
     8fc:	80 68       	ori	r24, 0x80	; 128
     8fe:	80 ab       	std	Z+48, r24	; 0x30
     900:	10 92 46 01 	sts	0x0146, r1
     904:	a0 e4       	ldi	r26, 0x40	; 64
     906:	b1 e0       	ldi	r27, 0x01	; 1
     908:	7c 93       	st	X, r23
     90a:	10 92 41 01 	sts	0x0141, r1
     90e:	60 93 42 01 	sts	0x0142, r22
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	80 93 43 01 	sts	0x0143, r24
     918:	60 91 02 20 	lds	r22, 0x2002
     91c:	70 91 03 20 	lds	r23, 0x2003
     920:	60 93 44 01 	sts	0x0144, r22
     924:	70 93 45 01 	sts	0x0145, r23
     928:	6b e7       	ldi	r22, 0x7B	; 123
     92a:	74 e2       	ldi	r23, 0x24	; 36
     92c:	60 93 48 01 	sts	0x0148, r22
     930:	70 93 49 01 	sts	0x0149, r23
     934:	10 92 4a 01 	sts	0x014A, r1
     938:	8b e3       	ldi	r24, 0x3B	; 59
     93a:	80 93 4c 01 	sts	0x014C, r24
     93e:	c0 93 4d 01 	sts	0x014D, r28
     942:	10 92 4e 01 	sts	0x014E, r1
     946:	8c 91       	ld	r24, X
     948:	80 68       	ori	r24, 0x80	; 128
     94a:	8c 93       	st	X, r24
     94c:	10 8a       	std	Z+16, r1	; 0x10
     94e:	50 8b       	std	Z+16, r21	; 0x10
     950:	40 8b       	std	Z+16, r20	; 0x10
     952:	c1 8b       	std	Z+17, r28	; 0x11
     954:	81 e9       	ldi	r24, 0x91	; 145
     956:	82 8b       	std	Z+18, r24	; 0x12
     958:	33 8b       	std	Z+19, r19	; 0x13
     95a:	47 e7       	ldi	r20, 0x77	; 119
     95c:	51 e0       	ldi	r21, 0x01	; 1
     95e:	44 8b       	std	Z+20, r20	; 0x14
     960:	55 8b       	std	Z+21, r21	; 0x15
     962:	20 8f       	std	Z+24, r18	; 0x18
     964:	91 8f       	std	Z+25, r25	; 0x19
     966:	12 8e       	std	Z+26, r1	; 0x1a
     968:	8c e7       	ldi	r24, 0x7C	; 124
     96a:	96 e2       	ldi	r25, 0x26	; 38
     96c:	84 8f       	std	Z+28, r24	; 0x1c
     96e:	95 8f       	std	Z+29, r25	; 0x1d
     970:	16 8e       	std	Z+30, r1	; 0x1e
     972:	80 89       	ldd	r24, Z+16	; 0x10
     974:	80 68       	ori	r24, 0x80	; 128
     976:	80 8b       	std	Z+16, r24	; 0x10
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <tiny_dma_set_mode_4>:
     97c:	cf 93       	push	r28
     97e:	c4 e0       	ldi	r28, 0x04	; 4
     980:	c0 93 00 20 	sts	0x2000, r28
     984:	06 de       	rcall	.-1012   	; 0x592 <tiny_dma_flush>
     986:	e0 e0       	ldi	r30, 0x00	; 0
     988:	f1 e0       	ldi	r31, 0x01	; 1
     98a:	10 a2       	std	Z+32, r1	; 0x20
     98c:	80 e4       	ldi	r24, 0x40	; 64
     98e:	80 a3       	std	Z+32, r24	; 0x20
     990:	c0 a3       	std	Z+32, r28	; 0x20
     992:	11 a2       	std	Z+33, r1	; 0x21
     994:	12 a2       	std	Z+34, r1	; 0x22
     996:	4b e4       	ldi	r20, 0x4B	; 75
     998:	43 a3       	std	Z+35, r20	; 0x23
     99a:	14 a2       	std	Z+36, r1	; 0x24
     99c:	15 a2       	std	Z+37, r1	; 0x25
     99e:	16 a2       	std	Z+38, r1	; 0x26
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e2       	ldi	r25, 0x20	; 32
     9a4:	80 a7       	std	Z+40, r24	; 0x28
     9a6:	91 a7       	std	Z+41, r25	; 0x29
     9a8:	12 a6       	std	Z+42, r1	; 0x2a
     9aa:	60 ea       	ldi	r22, 0xA0	; 160
     9ac:	64 a7       	std	Z+44, r22	; 0x2c
     9ae:	88 e0       	ldi	r24, 0x08	; 8
     9b0:	85 a7       	std	Z+45, r24	; 0x2d
     9b2:	16 a6       	std	Z+46, r1	; 0x2e
     9b4:	90 a1       	ldd	r25, Z+32	; 0x20
     9b6:	90 6a       	ori	r25, 0xA0	; 160
     9b8:	90 a3       	std	Z+32, r25	; 0x20
     9ba:	95 e5       	ldi	r25, 0x55	; 85
     9bc:	90 93 a0 08 	sts	0x08A0, r25
     9c0:	10 92 46 01 	sts	0x0146, r1
     9c4:	a0 e4       	ldi	r26, 0x40	; 64
     9c6:	b1 e0       	ldi	r27, 0x01	; 1
     9c8:	94 e2       	ldi	r25, 0x24	; 36
     9ca:	9c 93       	st	X, r25
     9cc:	10 92 41 01 	sts	0x0141, r1
     9d0:	99 e5       	ldi	r25, 0x59	; 89
     9d2:	90 93 42 01 	sts	0x0142, r25
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	90 93 43 01 	sts	0x0143, r25
     9dc:	20 91 02 20 	lds	r18, 0x2002
     9e0:	30 91 03 20 	lds	r19, 0x2003
     9e4:	20 93 44 01 	sts	0x0144, r18
     9e8:	30 93 45 01 	sts	0x0145, r19
     9ec:	2b e7       	ldi	r18, 0x7B	; 123
     9ee:	34 e2       	ldi	r19, 0x24	; 36
     9f0:	20 93 48 01 	sts	0x0148, r18
     9f4:	30 93 49 01 	sts	0x0149, r19
     9f8:	10 92 4a 01 	sts	0x014A, r1
     9fc:	9b e3       	ldi	r25, 0x3B	; 59
     9fe:	90 93 4c 01 	sts	0x014C, r25
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	90 93 4d 01 	sts	0x014D, r25
     a08:	10 92 4e 01 	sts	0x014E, r1
     a0c:	2c 91       	ld	r18, X
     a0e:	20 68       	ori	r18, 0x80	; 128
     a10:	2c 93       	st	X, r18
     a12:	c0 8b       	std	Z+16, r28	; 0x10
     a14:	91 8b       	std	Z+17, r25	; 0x11
     a16:	31 e9       	ldi	r19, 0x91	; 145
     a18:	32 8b       	std	Z+18, r19	; 0x12
     a1a:	43 8b       	std	Z+19, r20	; 0x13
     a1c:	47 e7       	ldi	r20, 0x77	; 119
     a1e:	51 e0       	ldi	r21, 0x01	; 1
     a20:	44 8b       	std	Z+20, r20	; 0x14
     a22:	55 8b       	std	Z+21, r21	; 0x15
     a24:	60 8f       	std	Z+24, r22	; 0x18
     a26:	81 8f       	std	Z+25, r24	; 0x19
     a28:	12 8e       	std	Z+26, r1	; 0x1a
     a2a:	6c e7       	ldi	r22, 0x7C	; 124
     a2c:	76 e2       	ldi	r23, 0x26	; 38
     a2e:	64 8f       	std	Z+28, r22	; 0x1c
     a30:	75 8f       	std	Z+29, r23	; 0x1d
     a32:	16 8e       	std	Z+30, r1	; 0x1e
     a34:	20 89       	ldd	r18, Z+16	; 0x10
     a36:	20 68       	ori	r18, 0x80	; 128
     a38:	20 8b       	std	Z+16, r18	; 0x10
     a3a:	c0 ab       	std	Z+48, r28	; 0x30
     a3c:	91 ab       	std	Z+49, r25	; 0x31
     a3e:	32 ab       	std	Z+50, r19	; 0x32
     a40:	9a e4       	ldi	r25, 0x4A	; 74
     a42:	93 ab       	std	Z+51, r25	; 0x33
     a44:	44 ab       	std	Z+52, r20	; 0x34
     a46:	55 ab       	std	Z+53, r21	; 0x35
     a48:	93 ec       	ldi	r25, 0xC3	; 195
     a4a:	90 af       	std	Z+56, r25	; 0x38
     a4c:	81 af       	std	Z+57, r24	; 0x39
     a4e:	12 ae       	std	Z+58, r1	; 0x3a
     a50:	83 ef       	ldi	r24, 0xF3	; 243
     a52:	97 e2       	ldi	r25, 0x27	; 39
     a54:	84 af       	std	Z+60, r24	; 0x3c
     a56:	90 93 3d 01 	sts	0x013D, r25
     a5a:	10 92 3e 01 	sts	0x013E, r1
     a5e:	80 a9       	ldd	r24, Z+48	; 0x30
     a60:	80 68       	ori	r24, 0x80	; 128
     a62:	80 ab       	std	Z+48, r24	; 0x30
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <tiny_dma_set_mode_5>:
     a68:	85 e0       	ldi	r24, 0x05	; 5
     a6a:	80 93 00 20 	sts	0x2000, r24
     a6e:	91 dd       	rcall	.-1246   	; 0x592 <tiny_dma_flush>
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f1 e0       	ldi	r31, 0x01	; 1
     a74:	16 aa       	std	Z+54, r1	; 0x36
     a76:	34 e2       	ldi	r19, 0x24	; 36
     a78:	30 ab       	std	Z+48, r19	; 0x30
     a7a:	11 aa       	std	Z+49, r1	; 0x31
     a7c:	29 e5       	ldi	r18, 0x59	; 89
     a7e:	22 ab       	std	Z+50, r18	; 0x32
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	83 ab       	std	Z+51, r24	; 0x33
     a84:	40 91 04 20 	lds	r20, 0x2004
     a88:	50 91 05 20 	lds	r21, 0x2005
     a8c:	44 ab       	std	Z+52, r20	; 0x34
     a8e:	55 ab       	std	Z+53, r21	; 0x35
     a90:	44 e6       	ldi	r20, 0x64	; 100
     a92:	52 e2       	ldi	r21, 0x22	; 34
     a94:	40 af       	std	Z+56, r20	; 0x38
     a96:	51 af       	std	Z+57, r21	; 0x39
     a98:	12 ae       	std	Z+58, r1	; 0x3a
     a9a:	99 e3       	ldi	r25, 0x39	; 57
     a9c:	94 af       	std	Z+60, r25	; 0x3c
     a9e:	80 93 3d 01 	sts	0x013D, r24
     aa2:	10 92 3e 01 	sts	0x013E, r1
     aa6:	90 a9       	ldd	r25, Z+48	; 0x30
     aa8:	90 68       	ori	r25, 0x80	; 128
     aaa:	90 ab       	std	Z+48, r25	; 0x30
     aac:	10 92 46 01 	sts	0x0146, r1
     ab0:	e0 e4       	ldi	r30, 0x40	; 64
     ab2:	f1 e0       	ldi	r31, 0x01	; 1
     ab4:	30 83       	st	Z, r19
     ab6:	10 92 41 01 	sts	0x0141, r1
     aba:	20 93 42 01 	sts	0x0142, r18
     abe:	80 93 43 01 	sts	0x0143, r24
     ac2:	20 91 04 20 	lds	r18, 0x2004
     ac6:	30 91 05 20 	lds	r19, 0x2005
     aca:	20 93 44 01 	sts	0x0144, r18
     ace:	30 93 45 01 	sts	0x0145, r19
     ad2:	2b e7       	ldi	r18, 0x7B	; 123
     ad4:	34 e2       	ldi	r19, 0x24	; 36
     ad6:	20 93 48 01 	sts	0x0148, r18
     ada:	30 93 49 01 	sts	0x0149, r19
     ade:	10 92 4a 01 	sts	0x014A, r1
     ae2:	9b e3       	ldi	r25, 0x3B	; 59
     ae4:	90 93 4c 01 	sts	0x014C, r25
     ae8:	80 93 4d 01 	sts	0x014D, r24
     aec:	10 92 4e 01 	sts	0x014E, r1
     af0:	80 81       	ld	r24, Z
     af2:	80 68       	ori	r24, 0x80	; 128
     af4:	80 83       	st	Z, r24
     af6:	08 95       	ret

00000af8 <tiny_dma_set_mode_6>:
     af8:	86 e0       	ldi	r24, 0x06	; 6
     afa:	80 93 00 20 	sts	0x2000, r24
     afe:	49 dd       	rcall	.-1390   	; 0x592 <tiny_dma_flush>
     b00:	e0 e0       	ldi	r30, 0x00	; 0
     b02:	f1 e0       	ldi	r31, 0x01	; 1
     b04:	16 aa       	std	Z+54, r1	; 0x36
     b06:	94 e2       	ldi	r25, 0x24	; 36
     b08:	90 ab       	std	Z+48, r25	; 0x30
     b0a:	11 aa       	std	Z+49, r1	; 0x31
     b0c:	39 e5       	ldi	r19, 0x59	; 89
     b0e:	32 ab       	std	Z+50, r19	; 0x32
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	83 ab       	std	Z+51, r24	; 0x33
     b14:	40 91 04 20 	lds	r20, 0x2004
     b18:	50 91 05 20 	lds	r21, 0x2005
     b1c:	44 ab       	std	Z+52, r20	; 0x34
     b1e:	55 ab       	std	Z+53, r21	; 0x35
     b20:	44 e6       	ldi	r20, 0x64	; 100
     b22:	52 e2       	ldi	r21, 0x22	; 34
     b24:	40 af       	std	Z+56, r20	; 0x38
     b26:	51 af       	std	Z+57, r21	; 0x39
     b28:	12 ae       	std	Z+58, r1	; 0x3a
     b2a:	29 e3       	ldi	r18, 0x39	; 57
     b2c:	24 af       	std	Z+60, r18	; 0x3c
     b2e:	80 93 3d 01 	sts	0x013D, r24
     b32:	10 92 3e 01 	sts	0x013E, r1
     b36:	20 a9       	ldd	r18, Z+48	; 0x30
     b38:	20 68       	ori	r18, 0x80	; 128
     b3a:	20 ab       	std	Z+48, r18	; 0x30
     b3c:	10 92 46 01 	sts	0x0146, r1
     b40:	a0 e4       	ldi	r26, 0x40	; 64
     b42:	b1 e0       	ldi	r27, 0x01	; 1
     b44:	9c 93       	st	X, r25
     b46:	10 92 41 01 	sts	0x0141, r1
     b4a:	30 93 42 01 	sts	0x0142, r19
     b4e:	32 e0       	ldi	r19, 0x02	; 2
     b50:	30 93 43 01 	sts	0x0143, r19
     b54:	40 91 02 20 	lds	r20, 0x2002
     b58:	50 91 03 20 	lds	r21, 0x2003
     b5c:	40 93 44 01 	sts	0x0144, r20
     b60:	50 93 45 01 	sts	0x0145, r21
     b64:	4b e7       	ldi	r20, 0x7B	; 123
     b66:	54 e2       	ldi	r21, 0x24	; 36
     b68:	40 93 48 01 	sts	0x0148, r20
     b6c:	50 93 49 01 	sts	0x0149, r21
     b70:	10 92 4a 01 	sts	0x014A, r1
     b74:	2b e3       	ldi	r18, 0x3B	; 59
     b76:	20 93 4c 01 	sts	0x014C, r18
     b7a:	80 93 4d 01 	sts	0x014D, r24
     b7e:	10 92 4e 01 	sts	0x014E, r1
     b82:	2c 91       	ld	r18, X
     b84:	20 68       	ori	r18, 0x80	; 128
     b86:	2c 93       	st	X, r18
     b88:	10 8a       	std	Z+16, r1	; 0x10
     b8a:	20 e4       	ldi	r18, 0x40	; 64
     b8c:	20 8b       	std	Z+16, r18	; 0x10
     b8e:	24 e0       	ldi	r18, 0x04	; 4
     b90:	20 8b       	std	Z+16, r18	; 0x10
     b92:	81 8b       	std	Z+17, r24	; 0x11
     b94:	81 e9       	ldi	r24, 0x91	; 145
     b96:	82 8b       	std	Z+18, r24	; 0x12
     b98:	80 e1       	ldi	r24, 0x10	; 16
     b9a:	83 8b       	std	Z+19, r24	; 0x13
     b9c:	4e ee       	ldi	r20, 0xEE	; 238
     b9e:	52 e0       	ldi	r21, 0x02	; 2
     ba0:	44 8b       	std	Z+20, r20	; 0x14
     ba2:	55 8b       	std	Z+21, r21	; 0x15
     ba4:	90 8f       	std	Z+24, r25	; 0x18
     ba6:	31 8f       	std	Z+25, r19	; 0x19
     ba8:	12 8e       	std	Z+26, r1	; 0x1a
     baa:	8c e7       	ldi	r24, 0x7C	; 124
     bac:	96 e2       	ldi	r25, 0x26	; 38
     bae:	84 8f       	std	Z+28, r24	; 0x1c
     bb0:	95 8f       	std	Z+29, r25	; 0x1d
     bb2:	16 8e       	std	Z+30, r1	; 0x1e
     bb4:	80 89       	ldd	r24, Z+16	; 0x10
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	80 8b       	std	Z+16, r24	; 0x10
     bba:	08 95       	ret

00000bbc <tiny_dma_set_mode_7>:
     bbc:	87 e0       	ldi	r24, 0x07	; 7
     bbe:	80 93 00 20 	sts	0x2000, r24
     bc2:	e7 dc       	rcall	.-1586   	; 0x592 <tiny_dma_flush>
     bc4:	e0 e0       	ldi	r30, 0x00	; 0
     bc6:	f1 e0       	ldi	r31, 0x01	; 1
     bc8:	16 aa       	std	Z+54, r1	; 0x36
     bca:	94 e2       	ldi	r25, 0x24	; 36
     bcc:	90 ab       	std	Z+48, r25	; 0x30
     bce:	11 aa       	std	Z+49, r1	; 0x31
     bd0:	39 e5       	ldi	r19, 0x59	; 89
     bd2:	32 ab       	std	Z+50, r19	; 0x32
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	83 ab       	std	Z+51, r24	; 0x33
     bd8:	40 91 04 20 	lds	r20, 0x2004
     bdc:	50 91 05 20 	lds	r21, 0x2005
     be0:	44 ab       	std	Z+52, r20	; 0x34
     be2:	55 ab       	std	Z+53, r21	; 0x35
     be4:	44 e6       	ldi	r20, 0x64	; 100
     be6:	52 e2       	ldi	r21, 0x22	; 34
     be8:	40 af       	std	Z+56, r20	; 0x38
     bea:	51 af       	std	Z+57, r21	; 0x39
     bec:	12 ae       	std	Z+58, r1	; 0x3a
     bee:	29 e3       	ldi	r18, 0x39	; 57
     bf0:	24 af       	std	Z+60, r18	; 0x3c
     bf2:	80 93 3d 01 	sts	0x013D, r24
     bf6:	10 92 3e 01 	sts	0x013E, r1
     bfa:	20 a9       	ldd	r18, Z+48	; 0x30
     bfc:	20 68       	ori	r18, 0x80	; 128
     bfe:	20 ab       	std	Z+48, r18	; 0x30
     c00:	10 92 46 01 	sts	0x0146, r1
     c04:	a0 e4       	ldi	r26, 0x40	; 64
     c06:	b1 e0       	ldi	r27, 0x01	; 1
     c08:	9c 93       	st	X, r25
     c0a:	10 92 41 01 	sts	0x0141, r1
     c0e:	30 93 42 01 	sts	0x0142, r19
     c12:	32 e0       	ldi	r19, 0x02	; 2
     c14:	30 93 43 01 	sts	0x0143, r19
     c18:	40 91 02 20 	lds	r20, 0x2002
     c1c:	50 91 03 20 	lds	r21, 0x2003
     c20:	40 93 44 01 	sts	0x0144, r20
     c24:	50 93 45 01 	sts	0x0145, r21
     c28:	4b e7       	ldi	r20, 0x7B	; 123
     c2a:	54 e2       	ldi	r21, 0x24	; 36
     c2c:	40 93 48 01 	sts	0x0148, r20
     c30:	50 93 49 01 	sts	0x0149, r21
     c34:	10 92 4a 01 	sts	0x014A, r1
     c38:	2b e3       	ldi	r18, 0x3B	; 59
     c3a:	20 93 4c 01 	sts	0x014C, r18
     c3e:	80 93 4d 01 	sts	0x014D, r24
     c42:	10 92 4e 01 	sts	0x014E, r1
     c46:	2c 91       	ld	r18, X
     c48:	20 68       	ori	r18, 0x80	; 128
     c4a:	2c 93       	st	X, r18
     c4c:	10 8a       	std	Z+16, r1	; 0x10
     c4e:	20 e4       	ldi	r18, 0x40	; 64
     c50:	20 8b       	std	Z+16, r18	; 0x10
     c52:	25 e0       	ldi	r18, 0x05	; 5
     c54:	20 8b       	std	Z+16, r18	; 0x10
     c56:	81 8b       	std	Z+17, r24	; 0x11
     c58:	81 e9       	ldi	r24, 0x91	; 145
     c5a:	82 8b       	std	Z+18, r24	; 0x12
     c5c:	80 e1       	ldi	r24, 0x10	; 16
     c5e:	83 8b       	std	Z+19, r24	; 0x13
     c60:	4e ee       	ldi	r20, 0xEE	; 238
     c62:	52 e0       	ldi	r21, 0x02	; 2
     c64:	44 8b       	std	Z+20, r20	; 0x14
     c66:	55 8b       	std	Z+21, r21	; 0x15
     c68:	90 8f       	std	Z+24, r25	; 0x18
     c6a:	31 8f       	std	Z+25, r19	; 0x19
     c6c:	12 8e       	std	Z+26, r1	; 0x1a
     c6e:	8c e7       	ldi	r24, 0x7C	; 124
     c70:	96 e2       	ldi	r25, 0x26	; 38
     c72:	84 8f       	std	Z+28, r24	; 0x1c
     c74:	95 8f       	std	Z+29, r25	; 0x1d
     c76:	16 8e       	std	Z+30, r1	; 0x1e
     c78:	80 89       	ldd	r24, Z+16	; 0x10
     c7a:	80 68       	ori	r24, 0x80	; 128
     c7c:	80 8b       	std	Z+16, r24	; 0x10
     c7e:	08 95       	ret

00000c80 <__vector_6>:
}

ISR(DMA_CH0_vect){
     c80:	1f 92       	push	r1
     c82:	0f 92       	push	r0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
		DMA.CH0.TRFCNT = HALFPACKET_SIZE;
     c92:	87 e7       	ldi	r24, 0x77	; 119
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	80 93 14 01 	sts	0x0114, r24
     c9a:	90 93 15 01 	sts	0x0115, r25
		if(b1_state){
     c9e:	80 91 b9 20 	lds	r24, 0x20B9
     ca2:	88 23       	and	r24, r24
     ca4:	49 f0       	breq	.+18     	; 0xcb8 <__vector_6+0x38>
			DMA.CH0.DESTADDR0 = precalc_DMA_CH0_DESTADDR0_b1_state_equals_1;
     ca6:	80 91 7a 24 	lds	r24, 0x247A
     caa:	e0 e0       	ldi	r30, 0x00	; 0
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	84 8f       	std	Z+28, r24	; 0x1c
			DMA.CH0.DESTADDR1 = precalc_DMA_CH0_DESTADDR1_b1_state_equals_1;
     cb0:	80 91 60 22 	lds	r24, 0x2260
     cb4:	85 8f       	std	Z+29, r24	; 0x1d
     cb6:	08 c0       	rjmp	.+16     	; 0xcc8 <__vector_6+0x48>
		} else {
			DMA.CH0.DESTADDR0 = precalc_DMA_CH0_DESTADDR0_b1_state_equals_0;
     cb8:	80 91 77 24 	lds	r24, 0x2477
     cbc:	e0 e0       	ldi	r30, 0x00	; 0
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	84 8f       	std	Z+28, r24	; 0x1c
			DMA.CH0.DESTADDR1 = precalc_DMA_CH0_DESTADDR1_b1_state_equals_0;
     cc2:	80 91 61 22 	lds	r24, 0x2261
     cc6:	85 8f       	std	Z+29, r24	; 0x1d
	...
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");

		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     ce4:	e0 e0       	ldi	r30, 0x00	; 0
     ce6:	f1 e0       	ldi	r31, 0x01	; 1
     ce8:	80 89       	ldd	r24, Z+16	; 0x10
     cea:	80 68       	ori	r24, 0x80	; 128
     cec:	80 8b       	std	Z+16, r24	; 0x10
		EVSYS.STROBE=0x02;
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	80 93 90 01 	sts	0x0190, r24

		b1_state = !b1_state;
     cf4:	90 91 b9 20 	lds	r25, 0x20B9
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	91 11       	cpse	r25, r1
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	80 93 b9 20 	sts	0x20B9, r24
		DMA.INTFLAGS = 0x01;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 03 01 	sts	0x0103, r24
			default:
			////////////////////////////////////////
			break;
		}
		*/
}
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <__vector_7>:

ISR(DMA_CH1_vect){
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
		DMA.CH1.TRFCNT = HALFPACKET_SIZE;
     d2c:	87 e7       	ldi	r24, 0x77	; 119
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	80 93 24 01 	sts	0x0124, r24
     d34:	90 93 25 01 	sts	0x0125, r25
		
		if(b2_state){
     d38:	80 91 b8 20 	lds	r24, 0x20B8
     d3c:	88 23       	and	r24, r24
     d3e:	49 f0       	breq	.+18     	; 0xd52 <__vector_7+0x38>
			DMA.CH1.DESTADDR0 = precalc_DMA_CH1_DESTADDR0_b2_state_equals_1;
     d40:	80 91 58 2c 	lds	r24, 0x2C58
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	f1 e0       	ldi	r31, 0x01	; 1
     d48:	84 a7       	std	Z+44, r24	; 0x2c
			DMA.CH1.DESTADDR1 = precalc_DMA_CH1_DESTADDR1_b2_state_equals_1;
     d4a:	80 91 5a 22 	lds	r24, 0x225A
     d4e:	85 a7       	std	Z+45, r24	; 0x2d
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <__vector_7+0x48>
			} else {
			DMA.CH1.DESTADDR0 = precalc_DMA_CH1_DESTADDR0_b2_state_equals_0;
     d52:	80 91 5b 22 	lds	r24, 0x225B
     d56:	e0 e0       	ldi	r30, 0x00	; 0
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	84 a7       	std	Z+44, r24	; 0x2c
			DMA.CH1.DESTADDR1 = precalc_DMA_CH1_DESTADDR1_b2_state_equals_0;
     d5c:	80 91 64 24 	lds	r24, 0x2464
     d60:	85 a7       	std	Z+45, r24	; 0x2d
		}
		//Must enable last for REPCNT won't work!
		asm("nop");
     d62:	00 00       	nop
		asm("nop");
     d64:	00 00       	nop


		DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
     d66:	e0 e0       	ldi	r30, 0x00	; 0
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	80 a1       	ldd	r24, Z+32	; 0x20
     d6c:	80 68       	ori	r24, 0x80	; 128
     d6e:	80 a3       	std	Z+32, r24	; 0x20
		EVSYS.STROBE = 0x01;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 90 01 	sts	0x0190, r24
		b2_state = !b2_state;
     d76:	90 91 b8 20 	lds	r25, 0x20B8
     d7a:	91 11       	cpse	r25, r1
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	80 93 b8 20 	sts	0x20B8, r24
		DMA.INTFLAGS = 0x02;
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	80 93 03 01 	sts	0x0103, r24
			default:
			////////////////////////////////////////
			break;
		}
		*/
}
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <__vector_8>:
ISR(DMA_CH2_vect){
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
	DMA.CH2.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
	DMA.CH2.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state * PACKET_SIZE + HALFPACKET_SIZE]) >> 8) & 0xFF;	
	//Must enable last for REPCNT won't work!
	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	b2_state = !b2_state;*/
}
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <__vector_9>:

ISR(DMA_CH3_vect){
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
	DMA.CH3.DESTADDR0 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 0) & 0xFF;  //Dest address is isoBuf
	DMA.CH3.DESTADDR1 = (( (uint16_t) &isoBuf[b2_state*PACKET_SIZE+HALFPACKET_SIZE]) >> 8) & 0xFF;
	//Must enable last for REPCNT won't work!
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;  //Enable!
	b2_state = !b2_state;*/
}
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <tiny_timer_setup>:
#define PSU_PER 2048	
#define jump 6

void tiny_timer_setup(void){
	//Turn everything on!
		PR.PRPC &= 0b11111100; //Enable TCC0, TCC1
     dc2:	e0 e7       	ldi	r30, 0x70	; 112
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	83 81       	ldd	r24, Z+3	; 0x03
     dc8:	8c 7f       	andi	r24, 0xFC	; 252
     dca:	83 83       	std	Z+3, r24	; 0x03
		PR.PRPD &= 0b11111100; //Enable TCD0, TCD1
     dcc:	84 81       	ldd	r24, Z+4	; 0x04
     dce:	8c 7f       	andi	r24, 0xFC	; 252
     dd0:	84 83       	std	Z+4, r24	; 0x04
		PR.PRGEN &= 0b11111101; //Enable EVSYS
     dd2:	80 81       	ld	r24, Z
     dd4:	8d 7f       	andi	r24, 0xFD	; 253
     dd6:	80 83       	st	Z, r24
	
	//Set up EVSYS
		EVSYS.CH2MUX = TCDAC_OVF;
     dd8:	e0 e8       	ldi	r30, 0x80	; 128
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	80 ec       	ldi	r24, 0xC0	; 192
     dde:	82 83       	std	Z+2, r24	; 0x02
		EVSYS.CH2CTRL = 0x00; //No filtering or Quadrature stuff
     de0:	12 86       	std	Z+10, r1	; 0x0a
		
		EVSYS.CH1MUX = EVSYS_CHMUX_ADCA_CH0_gc;
     de2:	80 e2       	ldi	r24, 0x20	; 32
     de4:	81 83       	std	Z+1, r24	; 0x01
		EVSYS.CH1CTRL = 0x00; //No filtering or Quadrature stuff
     de6:	11 86       	std	Z+9, r1	; 0x09
		
		EVSYS.CH0MUX = EVSYS_CHMUX_ADCA_CH2_gc;
     de8:	82 e2       	ldi	r24, 0x22	; 34
     dea:	80 83       	st	Z, r24
		EVSYS.CH0CTRL = 0x00; //No filtering or Quadrature stuff
     dec:	10 86       	std	Z+8, r1	; 0x08

			
	//Waveform (50Hz sin wave)
		TC_DAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b8 e0       	ldi	r27, 0x08	; 8
     df2:	34 e0       	ldi	r19, 0x04	; 4
     df4:	3c 93       	st	X, r19
		TC_DAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     df6:	23 e0       	ldi	r18, 0x03	; 3
     df8:	11 96       	adiw	r26, 0x01	; 1
     dfa:	2c 93       	st	X, r18
     dfc:	11 97       	sbiw	r26, 0x01	; 1
		TC_DAC.CTRLE = TC_BYTEM_NORMAL_gc;
     dfe:	14 96       	adiw	r26, 0x04	; 4
     e00:	1c 92       	st	X, r1
     e02:	14 97       	sbiw	r26, 0x04	; 4
		TC_DAC.PER = 469;
     e04:	85 ed       	ldi	r24, 0xD5	; 213
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	96 96       	adiw	r26, 0x26	; 38
     e0a:	8d 93       	st	X+, r24
     e0c:	9c 93       	st	X, r25
     e0e:	97 97       	sbiw	r26, 0x27	; 39
		TC_DAC.INTCTRLA = 0x00;
     e10:	16 96       	adiw	r26, 0x06	; 6
     e12:	1c 92       	st	X, r1
     e14:	16 97       	sbiw	r26, 0x06	; 6
	//Aux channel (blank 50Hz)
		TC_AUXDAC.CTRLA = 0x04; //Some clk setting - not 100% sure since it was SW generated
     e16:	e0 e4       	ldi	r30, 0x40	; 64
     e18:	f8 e0       	ldi	r31, 0x08	; 8
     e1a:	30 83       	st	Z, r19
		TC_AUXDAC.CTRLB = TC_WGMODE_SINGLESLOPE_gc;  //No enable is set
     e1c:	21 83       	std	Z+1, r18	; 0x01
		TC_AUXDAC.CTRLE = TC_BYTEM_NORMAL_gc;
     e1e:	14 82       	std	Z+4, r1	; 0x04
		TC_AUXDAC.PER = 469;
     e20:	86 a3       	std	Z+38, r24	; 0x26
     e22:	97 a3       	std	Z+39, r25	; 0x27
		TC_AUXDAC.INTCTRLA = 0x00;
     e24:	16 82       	std	Z+6, r1	; 0x06
	
	//PSU 
		PORTD.DIR |= 0b00010000;
     e26:	e0 e6       	ldi	r30, 0x60	; 96
     e28:	f6 e0       	ldi	r31, 0x06	; 6
     e2a:	80 81       	ld	r24, Z
     e2c:	80 61       	ori	r24, 0x10	; 16
     e2e:	80 83       	st	Z, r24
		TC_PSU.CTRLB = 0x10 | TC_WGMODE_SINGLESLOPE_gc;  //CCAEN is set
     e30:	e0 e4       	ldi	r30, 0x40	; 64
     e32:	f9 e0       	ldi	r31, 0x09	; 9
     e34:	83 e1       	ldi	r24, 0x13	; 19
     e36:	81 83       	std	Z+1, r24	; 0x01
		TC_PSU.CTRLE = TC_BYTEM_NORMAL_gc;
     e38:	14 82       	std	Z+4, r1	; 0x04
		TC_PSU.INTCTRLA = TC_OVFINTLVL_MED_gc;
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	86 83       	std	Z+6, r24	; 0x06
		TC_PSU.PER = PSU_PER;  // Max value of CNT
     e3e:	a6 a3       	std	Z+38, r26	; 0x26
     e40:	b7 a3       	std	Z+39, r27	; 0x27
		TC_PSU.CCA = 0; //Initial Duty cycle of 0%
     e42:	10 a6       	std	Z+40, r1	; 0x28
     e44:	11 a6       	std	Z+41, r1	; 0x29
		TC_PSU.CTRLA = TC_CLKSEL_DIV1_gc;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 83       	st	Z, r24
     e4a:	08 95       	ret

00000e4c <__vector_83>:
		TCC1.PER = 1800;  // Max value of CNT
		TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
		*/
}

ISR(TC_PSU_OVF){
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	char tempvar;
	char err;
	volatile char nothing;
	TC_PSU.INTFLAGS = 0xff;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	80 93 4c 09 	sts	0x094C, r24
	if (global_mode == 7){
     e76:	80 91 00 20 	lds	r24, 0x2000
     e7a:	87 30       	cpi	r24, 0x07	; 7
     e7c:	31 f4       	brne	.+12     	; 0xe8a <__vector_83+0x3e>
		nothing = ADCA.CH1.RESL;
     e7e:	e0 e0       	ldi	r30, 0x00	; 0
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	84 a5       	ldd	r24, Z+44	; 0x2c
     e84:	89 83       	std	Y+1, r24	; 0x01
		tempvar = ADCA.CH1.RESH;
     e86:	95 a5       	ldd	r25, Z+45	; 0x2d
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <__vector_83+0x42>
	}
	else{
		tempvar = ADCA.CH1.RESL;
     e8a:	90 91 2c 02 	lds	r25, 0x022C
	}
	//tempvar = (global_mode == 7 ? (char) ADCA.CH1.RESH : (char) ADCA.CH1.RESL);
	//test_byte = tempvar;

	err = (char) (PSU_target - tempvar);
     e8e:	80 91 b6 20 	lds	r24, 0x20B6
     e92:	89 1b       	sub	r24, r25
	if ((err > 1) & ((unsigned short) TC_PSU.CCA < PSU_PER - jump) ){
     e94:	20 91 68 09 	lds	r18, 0x0968
     e98:	30 91 69 09 	lds	r19, 0x0969
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	0c f4       	brge	.+2      	; 0xea4 <__vector_83+0x58>
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	99 23       	and	r25, r25
     ea6:	c9 f0       	breq	.+50     	; 0xeda <__vector_83+0x8e>
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	2a 3f       	cpi	r18, 0xFA	; 250
     eac:	37 40       	sbci	r19, 0x07	; 7
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <__vector_83+0x66>
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	99 23       	and	r25, r25
     eb4:	91 f0       	breq	.+36     	; 0xeda <__vector_83+0x8e>
		TC_PSU.CCABUF = TC_PSU.CCA + ((err > 8) ? jump : 1);
     eb6:	20 91 68 09 	lds	r18, 0x0968
     eba:	30 91 69 09 	lds	r19, 0x0969
     ebe:	89 30       	cpi	r24, 0x09	; 9
     ec0:	1c f4       	brge	.+6      	; 0xec8 <__vector_83+0x7c>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <__vector_83+0x80>
     ec8:	86 e0       	ldi	r24, 0x06	; 6
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	82 0f       	add	r24, r18
     ece:	93 1f       	adc	r25, r19
     ed0:	80 93 78 09 	sts	0x0978, r24
     ed4:	90 93 79 09 	sts	0x0979, r25
     ed8:	23 c0       	rjmp	.+70     	; 0xf20 <__vector_83+0xd4>
	}
	else if ((err < -1) & ((unsigned short) TC_PSU.CCA > jump)){
     eda:	20 91 68 09 	lds	r18, 0x0968
     ede:	30 91 69 09 	lds	r19, 0x0969
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	8f 3f       	cpi	r24, 0xFF	; 255
     ee6:	0c f0       	brlt	.+2      	; 0xeea <__vector_83+0x9e>
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	99 23       	and	r25, r25
     eec:	c9 f0       	breq	.+50     	; 0xf20 <__vector_83+0xd4>
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	27 30       	cpi	r18, 0x07	; 7
     ef2:	31 05       	cpc	r19, r1
     ef4:	08 f4       	brcc	.+2      	; 0xef8 <__vector_83+0xac>
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	99 23       	and	r25, r25
     efa:	91 f0       	breq	.+36     	; 0xf20 <__vector_83+0xd4>
		TC_PSU.CCABUF = TC_PSU.CCA - ((err < -8) ? jump : 1);
     efc:	20 91 68 09 	lds	r18, 0x0968
     f00:	30 91 69 09 	lds	r19, 0x0969
     f04:	88 3f       	cpi	r24, 0xF8	; 248
     f06:	1c f0       	brlt	.+6      	; 0xf0e <__vector_83+0xc2>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <__vector_83+0xc6>
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a9 01       	movw	r20, r18
     f14:	48 1b       	sub	r20, r24
     f16:	59 0b       	sbc	r21, r25
     f18:	40 93 78 09 	sts	0x0978, r20
     f1c:	50 93 79 09 	sts	0x0979, r21
	}
     f20:	0f 90       	pop	r0
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0
     f3c:	1f 90       	pop	r1
     f3e:	18 95       	reti

00000f40 <tiny_uart_setup>:
#include "tiny_uart.h"
#include "globals.h"


void tiny_uart_setup(void){
	PR.PRPC &= 0b11101111;
     f40:	e0 e7       	ldi	r30, 0x70	; 112
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	83 81       	ldd	r24, Z+3	; 0x03
     f46:	8f 7e       	andi	r24, 0xEF	; 239
     f48:	83 83       	std	Z+3, r24	; 0x03
	//PR.PRPE &= 0b11111110;  ???
	
	PORTC.DIR |= 0b10101010;
     f4a:	e0 e4       	ldi	r30, 0x40	; 64
     f4c:	f6 e0       	ldi	r31, 0x06	; 6
     f4e:	80 81       	ld	r24, Z
     f50:	8a 6a       	ori	r24, 0xAA	; 170
     f52:	80 83       	st	Z, r24
	PORTC.OUT = 0xff;
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	84 83       	std	Z+4, r24	; 0x04
	PORTC.PIN2CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     f58:	88 e5       	ldi	r24, 0x58	; 88
     f5a:	82 8b       	std	Z+18, r24	; 0x12
	//PORTC.REMAP = 0x10; //Remap USART to [7:4]
	//#ifndef VERO
//		PORTC.REMAP = 0x20; //Swap MOSI and SCK - for small boards only!!!
	//#endif
	
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | 0b00000100; //LSB received first, UPCHA disabled
     f5c:	e0 ea       	ldi	r30, 0xA0	; 160
     f5e:	f8 e0       	ldi	r31, 0x08	; 8
     f60:	84 ec       	ldi	r24, 0xC4	; 196
     f62:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = 3;  	//BSEL = fper/(2fbaud) -1;  24/(2*3) - 1 = 3
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x00;//USART_BSCALE0_bm;
     f68:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     f6a:	88 e1       	ldi	r24, 0x18	; 24
     f6c:	84 83       	std	Z+4, r24	; 0x04
     f6e:	08 95       	ret

00000f70 <tiny_spi_setup>:
}


void tiny_spi_setup(void){
	//Power Reduction disable
	PR.PRPC &= 0b11110111;
     f70:	e0 e7       	ldi	r30, 0x70	; 112
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	83 81       	ldd	r24, Z+3	; 0x03
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	83 83       	std	Z+3, r24	; 0x03
	
	//SPI enable
	SPIC.CTRL = SPI_ENABLE_bm;  //Slave mode
     f7a:	e0 ec       	ldi	r30, 0xC0	; 192
     f7c:	f8 e0       	ldi	r31, 0x08	; 8
     f7e:	80 e4       	ldi	r24, 0x40	; 64
     f80:	80 83       	st	Z, r24
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     f82:	11 82       	std	Z+1, r1	; 0x01
	//#ifdef VERO
		PORTC.PIN5CTRL = PORT_INVEN_bm | PORT_OPC_PULLUP_gc;
     f84:	88 e5       	ldi	r24, 0x58	; 88
     f86:	80 93 55 06 	sts	0x0655, r24
     f8a:	08 95       	ret

00000f8c <__vector_24>:
	//#endif
		
	return;
}

ISR(SPIC_INT_vect){
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
	asm("nop");
     f96:	00 00       	nop
}
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	00 d0       	rcall	.+0      	; 0xfac <sysclk_init+0xa>
     fac:	00 d0       	rcall	.+0      	; 0xfae <sysclk_init+0xc>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	80 93 70 00 	sts	0x0070, r24
     fb8:	80 93 71 00 	sts	0x0071, r24
     fbc:	80 93 72 00 	sts	0x0072, r24
     fc0:	80 93 73 00 	sts	0x0073, r24
     fc4:	80 93 74 00 	sts	0x0074, r24
     fc8:	80 93 75 00 	sts	0x0075, r24
     fcc:	80 93 76 00 	sts	0x0076, r24
     fd0:	64 e0       	ldi	r22, 0x04	; 4
     fd2:	81 e4       	ldi	r24, 0x41	; 65
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	bc d5       	rcall	.+2936   	; 0x1b50 <ccp_write_io>
     fd8:	6c e1       	ldi	r22, 0x1C	; 28
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	be d5       	rcall	.+2940   	; 0x1b5c <nvm_read_byte>
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	6d e1       	ldi	r22, 0x1D	; 29
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	b9 d5       	rcall	.+2930   	; 0x1b5c <nvm_read_byte>
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	21 f4       	brne	.+8      	; 0xffc <sysclk_init+0x5a>
     ff4:	80 e4       	ldi	r24, 0x40	; 64
     ff6:	93 e2       	ldi	r25, 0x23	; 35
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	9c 83       	std	Y+4, r25	; 0x04
    1004:	e0 e6       	ldi	r30, 0x60	; 96
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	82 83       	std	Z+2, r24	; 0x02
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	83 83       	std	Z+3, r24	; 0x03
    100e:	9f b7       	in	r25, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	e0 e5       	ldi	r30, 0x50	; 80
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	80 83       	st	Z, r24
    101c:	9f bf       	out	0x3f, r25	; 63
    101e:	81 81       	ldd	r24, Z+1	; 0x01
    1020:	81 ff       	sbrs	r24, 1
    1022:	fd cf       	rjmp	.-6      	; 0x101e <sysclk_init+0x7c>
    1024:	9f b7       	in	r25, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	00 e5       	ldi	r16, 0x50	; 80
    102a:	10 e0       	ldi	r17, 0x00	; 0
    102c:	d8 01       	movw	r26, r16
    102e:	16 96       	adiw	r26, 0x06	; 6
    1030:	8c 91       	ld	r24, X
    1032:	16 97       	sbiw	r26, 0x06	; 6
    1034:	89 7f       	andi	r24, 0xF9	; 249
    1036:	16 96       	adiw	r26, 0x06	; 6
    1038:	8c 93       	st	X, r24
    103a:	16 97       	sbiw	r26, 0x06	; 6
    103c:	e0 e6       	ldi	r30, 0x60	; 96
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 e8       	ldi	r24, 0x80	; 128
    1042:	85 83       	std	Z+5, r24	; 0x05
    1044:	8b eb       	ldi	r24, 0xBB	; 187
    1046:	86 83       	std	Z+6, r24	; 0x06
    1048:	16 96       	adiw	r26, 0x06	; 6
    104a:	8c 91       	ld	r24, X
    104c:	16 97       	sbiw	r26, 0x06	; 6
    104e:	84 60       	ori	r24, 0x04	; 4
    1050:	16 96       	adiw	r26, 0x06	; 6
    1052:	8c 93       	st	X, r24
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	80 83       	st	Z, r24
    105a:	9f bf       	out	0x3f, r25	; 63
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	80 e4       	ldi	r24, 0x40	; 64
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	76 d5       	rcall	.+2796   	; 0x1b50 <ccp_write_io>
    1064:	9f b7       	in	r25, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	f8 01       	movw	r30, r16
    106a:	80 81       	ld	r24, Z
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	80 83       	st	Z, r24
    1070:	9f bf       	out	0x3f, r25	; 63
    1072:	24 96       	adiw	r28, 0x04	; 4
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	08 95       	ret

00001082 <sysclk_enable_module>:
    1082:	9f b7       	in	r25, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	e8 2f       	mov	r30, r24
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	e0 59       	subi	r30, 0x90	; 144
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	60 95       	com	r22
    1090:	80 81       	ld	r24, Z
    1092:	68 23       	and	r22, r24
    1094:	60 83       	st	Z, r22
    1096:	9f bf       	out	0x3f, r25	; 63
    1098:	08 95       	ret

0000109a <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    109a:	86 30       	cpi	r24, 0x06	; 6
    109c:	11 f0       	breq	.+4      	; 0x10a2 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    10a2:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10a4:	80 91 51 00 	lds	r24, 0x0051
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    10a8:	81 fd       	sbrc	r24, 1
    10aa:	26 c0       	rjmp	.+76     	; 0x10f8 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    10ac:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    10ae:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    10b0:	e0 e5       	ldi	r30, 0x50	; 80
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	82 60       	ori	r24, 0x02	; 2
    10b8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10ba:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10bc:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    10be:	81 ff       	sbrs	r24, 1
    10c0:	fd cf       	rjmp	.-6      	; 0x10bc <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    10c2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    10c4:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    10c6:	a0 e5       	ldi	r26, 0x50	; 80
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	16 96       	adiw	r26, 0x06	; 6
    10cc:	8c 91       	ld	r24, X
    10ce:	16 97       	sbiw	r26, 0x06	; 6
    10d0:	89 7f       	andi	r24, 0xF9	; 249
    10d2:	16 96       	adiw	r26, 0x06	; 6
    10d4:	8c 93       	st	X, r24
    10d6:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    10d8:	e0 e6       	ldi	r30, 0x60	; 96
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 e8       	ldi	r24, 0x80	; 128
    10de:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    10e0:	8b eb       	ldi	r24, 0xBB	; 187
    10e2:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    10e4:	16 96       	adiw	r26, 0x06	; 6
    10e6:	8c 91       	ld	r24, X
    10e8:	16 97       	sbiw	r26, 0x06	; 6
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	16 96       	adiw	r26, 0x06	; 6
    10ee:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    10f0:	80 81       	ld	r24, Z
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10f6:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    10f8:	63 60       	ori	r22, 0x03	; 3
    10fa:	84 e4       	ldi	r24, 0x44	; 68
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	28 d5       	rcall	.+2640   	; 0x1b50 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1100:	60 e4       	ldi	r22, 0x40	; 64
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	be cf       	rjmp	.-132    	; 0x1082 <sysclk_enable_module>
    1106:	08 95       	ret

00001108 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    1108:	80 91 bb 20 	lds	r24, 0x20BB
    110c:	08 95       	ret

0000110e <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    110e:	40 d1       	rcall	.+640    	; 0x1390 <udc_get_interface_desc>
    1110:	fc 01       	movw	r30, r24
    1112:	83 81       	ldd	r24, Z+3	; 0x03
    1114:	80 93 bb 20 	sts	0x20BB, r24
	if (0 == udi_vendor_alternate_setting) {
    1118:	81 11       	cpse	r24, r1
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <udi_vendor_enable+0x12>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    111c:	7d c9       	rjmp	.-3334   	; 0x418 <main_vendor_enable>
    111e:	08 95       	ret
			return false;
		}
	}
	return true;
    1120:	81 e0       	ldi	r24, 0x01	; 1
}
    1122:	08 95       	ret

00001124 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    1124:	80 91 bb 20 	lds	r24, 0x20BB
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	09 f4       	brne	.+2      	; 0x112e <udi_vendor_disable+0xa>
		UDI_VENDOR_DISABLE_EXT();
    112c:	8f c9       	rjmp	.-3298   	; 0x44c <main_vendor_disable>
    112e:	08 95       	ret

00001130 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    1130:	80 91 65 24 	lds	r24, 0x2465
    1134:	88 23       	and	r24, r24
    1136:	4c f4       	brge	.+18     	; 0x114a <udi_vendor_setup+0x1a>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    1138:	80 76       	andi	r24, 0x60	; 96
    113a:	80 34       	cpi	r24, 0x40	; 64
    113c:	a9 f4       	brne	.+42     	; 0x1168 <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    113e:	80 91 66 24 	lds	r24, 0x2466
    1142:	81 11       	cpse	r24, r1
    1144:	13 c0       	rjmp	.+38     	; 0x116c <udi_vendor_setup+0x3c>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    1146:	87 c9       	rjmp	.-3314   	; 0x456 <main_setup_in_received>
    1148:	08 95       	ret
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    114a:	80 76       	andi	r24, 0x60	; 96
    114c:	80 34       	cpi	r24, 0x40	; 64
    114e:	81 f4       	brne	.+32     	; 0x1170 <udi_vendor_setup+0x40>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    1150:	80 91 66 24 	lds	r24, 0x2466
    1154:	81 11       	cpse	r24, r1
    1156:	0e c0       	rjmp	.+28     	; 0x1174 <udi_vendor_setup+0x44>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    1158:	80 91 6b 24 	lds	r24, 0x246B
    115c:	90 91 6c 24 	lds	r25, 0x246C
    1160:	89 2b       	or	r24, r25
    1162:	51 f0       	breq	.+20     	; 0x1178 <udi_vendor_setup+0x48>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    1164:	76 c9       	rjmp	.-3348   	; 0x452 <main_setup_out_received>
    1166:	08 95       	ret
		}
	}
	return false; // Not supported request
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	08 95       	ret
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	08 95       	ret
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	08 95       	ret
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	08 95       	ret
    1178:	80 e0       	ldi	r24, 0x00	; 0
}
    117a:	08 95       	ret

0000117c <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    1182:	8a 01       	movw	r16, r20
    1184:	ac 01       	movw	r20, r24
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	81 e8       	ldi	r24, 0x81	; 129
    118a:	0e 94 1c 12 	call	0x2438	; 0x2438 <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret

00001194 <udi_vendor_iso_in_run2>:

bool udi_vendor_iso_in_run2(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 1,
    119a:	8a 01       	movw	r16, r20
    119c:	ac 01       	movw	r20, r24
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	82 e8       	ldi	r24, 0x82	; 130
    11a2:	0e 94 1c 12 	call	0x2438	; 0x2438 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	08 95       	ret

000011ac <udi_vendor_iso_in_run3>:

bool udi_vendor_iso_in_run3(uint8_t * buf, iram_size_t buf_size,
udd_callback_trans_t callback)
{
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN + 2,
    11b2:	8a 01       	movw	r16, r20
    11b4:	ac 01       	movw	r20, r24
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	83 e8       	ldi	r24, 0x83	; 131
    11ba:	0e 94 1c 12 	call	0x2438	; 0x2438 <udd_ep_run>
	false,
	buf,
	buf_size,
	callback);
}
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    11c4:	e0 91 c0 20 	lds	r30, 0x20C0
    11c8:	f0 91 c1 20 	lds	r31, 0x20C1
    11cc:	01 90       	ld	r0, Z+
    11ce:	f0 81       	ld	r31, Z
    11d0:	e0 2d       	mov	r30, r0
    11d2:	22 81       	ldd	r18, Z+2	; 0x02
    11d4:	33 81       	ldd	r19, Z+3	; 0x03
    11d6:	2e 0f       	add	r18, r30
    11d8:	3f 1f       	adc	r19, r31
    11da:	fc 01       	movw	r30, r24
    11dc:	40 81       	ld	r20, Z
    11de:	e4 0f       	add	r30, r20
    11e0:	f1 1d       	adc	r31, r1
    11e2:	e2 17       	cp	r30, r18
    11e4:	f3 07       	cpc	r31, r19
    11e6:	b8 f4       	brcc	.+46     	; 0x1216 <udc_next_desc_in_iface+0x52>
    11e8:	81 81       	ldd	r24, Z+1	; 0x01
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	b9 f0       	breq	.+46     	; 0x121c <udc_next_desc_in_iface+0x58>
    11ee:	86 13       	cpse	r24, r22
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <udc_next_desc_in_iface+0x40>
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <udc_next_desc_in_iface+0x3a>
    11f4:	81 81       	ldd	r24, Z+1	; 0x01
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	a1 f0       	breq	.+40     	; 0x1222 <udc_next_desc_in_iface+0x5e>
    11fa:	86 13       	cpse	r24, r22
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <udc_next_desc_in_iface+0x40>
    11fe:	8e 2f       	mov	r24, r30
    1200:	9f 2f       	mov	r25, r31
    1202:	08 95       	ret
    1204:	80 81       	ld	r24, Z
    1206:	e8 0f       	add	r30, r24
    1208:	f1 1d       	adc	r31, r1
    120a:	e2 17       	cp	r30, r18
    120c:	f3 07       	cpc	r31, r19
    120e:	90 f3       	brcs	.-28     	; 0x11f4 <udc_next_desc_in_iface+0x30>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	08 95       	ret
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	08 95       	ret
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	08 95       	ret
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	08 95       	ret

00001228 <udc_valid_address>:
    1228:	80 91 67 24 	lds	r24, 0x2467
    122c:	8f 77       	andi	r24, 0x7F	; 127
    122e:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <udd_set_address>
    1232:	08 95       	ret

00001234 <udc_update_iface_desc>:
    1234:	90 91 c2 20 	lds	r25, 0x20C2
    1238:	99 23       	and	r25, r25
    123a:	81 f1       	breq	.+96     	; 0x129c <udc_update_iface_desc+0x68>
    123c:	e0 91 c0 20 	lds	r30, 0x20C0
    1240:	f0 91 c1 20 	lds	r31, 0x20C1
    1244:	01 90       	ld	r0, Z+
    1246:	f0 81       	ld	r31, Z
    1248:	e0 2d       	mov	r30, r0
    124a:	94 81       	ldd	r25, Z+4	; 0x04
    124c:	89 17       	cp	r24, r25
    124e:	40 f5       	brcc	.+80     	; 0x12a0 <udc_update_iface_desc+0x6c>
    1250:	e0 93 be 20 	sts	0x20BE, r30
    1254:	f0 93 bf 20 	sts	0x20BF, r31
    1258:	22 81       	ldd	r18, Z+2	; 0x02
    125a:	33 81       	ldd	r19, Z+3	; 0x03
    125c:	2e 0f       	add	r18, r30
    125e:	3f 1f       	adc	r19, r31
    1260:	e2 17       	cp	r30, r18
    1262:	f3 07       	cpc	r31, r19
    1264:	f8 f4       	brcc	.+62     	; 0x12a4 <udc_update_iface_desc+0x70>
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	94 30       	cpi	r25, 0x04	; 4
    126a:	61 f4       	brne	.+24     	; 0x1284 <udc_update_iface_desc+0x50>
    126c:	92 81       	ldd	r25, Z+2	; 0x02
    126e:	98 13       	cpse	r25, r24
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <udc_update_iface_desc+0x50>
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	96 13       	cpse	r25, r22
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <udc_update_iface_desc+0x50>
    1278:	e0 93 be 20 	sts	0x20BE, r30
    127c:	f0 93 bf 20 	sts	0x20BF, r31
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	08 95       	ret
    1284:	90 81       	ld	r25, Z
    1286:	e9 0f       	add	r30, r25
    1288:	f1 1d       	adc	r31, r1
    128a:	e2 17       	cp	r30, r18
    128c:	f3 07       	cpc	r31, r19
    128e:	58 f3       	brcs	.-42     	; 0x1266 <udc_update_iface_desc+0x32>
    1290:	e0 93 be 20 	sts	0x20BE, r30
    1294:	f0 93 bf 20 	sts	0x20BF, r31
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	08 95       	ret
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	08 95       	ret
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	08 95       	ret

000012a8 <udc_iface_disable>:
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	c8 2f       	mov	r28, r24
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	be df       	rcall	.-132    	; 0x1234 <udc_update_iface_desc>
    12b8:	18 2f       	mov	r17, r24
    12ba:	88 23       	and	r24, r24
    12bc:	81 f1       	breq	.+96     	; 0x131e <udc_iface_disable+0x76>
    12be:	a0 91 c0 20 	lds	r26, 0x20C0
    12c2:	b0 91 c1 20 	lds	r27, 0x20C1
    12c6:	ec 2f       	mov	r30, r28
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	12 96       	adiw	r26, 0x02	; 2
    12d0:	8d 91       	ld	r24, X+
    12d2:	9c 91       	ld	r25, X
    12d4:	13 97       	sbiw	r26, 0x03	; 3
    12d6:	e8 0f       	add	r30, r24
    12d8:	f9 1f       	adc	r31, r25
    12da:	e0 80       	ld	r14, Z
    12dc:	f1 80       	ldd	r15, Z+1	; 0x01
    12de:	d7 01       	movw	r26, r14
    12e0:	16 96       	adiw	r26, 0x06	; 6
    12e2:	ed 91       	ld	r30, X+
    12e4:	fc 91       	ld	r31, X
    12e6:	17 97       	sbiw	r26, 0x07	; 7
    12e8:	09 95       	icall
    12ea:	68 2f       	mov	r22, r24
    12ec:	8c 2f       	mov	r24, r28
    12ee:	a2 df       	rcall	.-188    	; 0x1234 <udc_update_iface_desc>
    12f0:	18 2f       	mov	r17, r24
    12f2:	88 23       	and	r24, r24
    12f4:	a1 f0       	breq	.+40     	; 0x131e <udc_iface_disable+0x76>
    12f6:	c0 91 be 20 	lds	r28, 0x20BE
    12fa:	d0 91 bf 20 	lds	r29, 0x20BF
    12fe:	65 e0       	ldi	r22, 0x05	; 5
    1300:	ce 01       	movw	r24, r28
    1302:	60 df       	rcall	.-320    	; 0x11c4 <udc_next_desc_in_iface>
    1304:	ec 01       	movw	r28, r24
    1306:	89 2b       	or	r24, r25
    1308:	21 f0       	breq	.+8      	; 0x1312 <udc_iface_disable+0x6a>
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	0e 94 19 13 	call	0x2632	; 0x2632 <udd_ep_free>
    1310:	f6 cf       	rjmp	.-20     	; 0x12fe <udc_iface_disable+0x56>
    1312:	d7 01       	movw	r26, r14
    1314:	12 96       	adiw	r26, 0x02	; 2
    1316:	ed 91       	ld	r30, X+
    1318:	fc 91       	ld	r31, X
    131a:	13 97       	sbiw	r26, 0x03	; 3
    131c:	09 95       	icall
    131e:	81 2f       	mov	r24, r17
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	08 95       	ret

0000132c <udc_iface_enable>:
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	18 2f       	mov	r17, r24
    1334:	7f df       	rcall	.-258    	; 0x1234 <udc_update_iface_desc>
    1336:	88 23       	and	r24, r24
    1338:	39 f1       	breq	.+78     	; 0x1388 <udc_iface_enable+0x5c>
    133a:	c0 91 be 20 	lds	r28, 0x20BE
    133e:	d0 91 bf 20 	lds	r29, 0x20BF
    1342:	65 e0       	ldi	r22, 0x05	; 5
    1344:	ce 01       	movw	r24, r28
    1346:	3e df       	rcall	.-388    	; 0x11c4 <udc_next_desc_in_iface>
    1348:	ec 01       	movw	r28, r24
    134a:	89 2b       	or	r24, r25
    134c:	41 f0       	breq	.+16     	; 0x135e <udc_iface_enable+0x32>
    134e:	4c 81       	ldd	r20, Y+4	; 0x04
    1350:	5d 81       	ldd	r21, Y+5	; 0x05
    1352:	6b 81       	ldd	r22, Y+3	; 0x03
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	ab d7       	rcall	.+3926   	; 0x22ae <udd_ep_alloc>
    1358:	81 11       	cpse	r24, r1
    135a:	f3 cf       	rjmp	.-26     	; 0x1342 <udc_iface_enable+0x16>
    135c:	15 c0       	rjmp	.+42     	; 0x1388 <udc_iface_enable+0x5c>
    135e:	a0 91 c0 20 	lds	r26, 0x20C0
    1362:	b0 91 c1 20 	lds	r27, 0x20C1
    1366:	e1 2f       	mov	r30, r17
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	ee 0f       	add	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	12 96       	adiw	r26, 0x02	; 2
    1370:	8d 91       	ld	r24, X+
    1372:	9c 91       	ld	r25, X
    1374:	13 97       	sbiw	r26, 0x03	; 3
    1376:	e8 0f       	add	r30, r24
    1378:	f9 1f       	adc	r31, r25
    137a:	01 90       	ld	r0, Z+
    137c:	f0 81       	ld	r31, Z
    137e:	e0 2d       	mov	r30, r0
    1380:	01 90       	ld	r0, Z+
    1382:	f0 81       	ld	r31, Z
    1384:	e0 2d       	mov	r30, r0
    1386:	09 95       	icall
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	08 95       	ret

00001390 <udc_get_interface_desc>:
    1390:	80 91 be 20 	lds	r24, 0x20BE
    1394:	90 91 bf 20 	lds	r25, 0x20BF
    1398:	08 95       	ret

0000139a <udc_start>:
    139a:	f7 c6       	rjmp	.+3566   	; 0x218a <udd_enable>
    139c:	08 95       	ret

0000139e <udc_reset>:
    139e:	cf 93       	push	r28
    13a0:	80 91 c2 20 	lds	r24, 0x20C2
    13a4:	88 23       	and	r24, r24
    13a6:	c1 f0       	breq	.+48     	; 0x13d8 <udc_reset+0x3a>
    13a8:	e0 91 c0 20 	lds	r30, 0x20C0
    13ac:	f0 91 c1 20 	lds	r31, 0x20C1
    13b0:	01 90       	ld	r0, Z+
    13b2:	f0 81       	ld	r31, Z
    13b4:	e0 2d       	mov	r30, r0
    13b6:	84 81       	ldd	r24, Z+4	; 0x04
    13b8:	88 23       	and	r24, r24
    13ba:	71 f0       	breq	.+28     	; 0x13d8 <udc_reset+0x3a>
    13bc:	c0 e0       	ldi	r28, 0x00	; 0
    13be:	8c 2f       	mov	r24, r28
    13c0:	73 df       	rcall	.-282    	; 0x12a8 <udc_iface_disable>
    13c2:	cf 5f       	subi	r28, 0xFF	; 255
    13c4:	e0 91 c0 20 	lds	r30, 0x20C0
    13c8:	f0 91 c1 20 	lds	r31, 0x20C1
    13cc:	01 90       	ld	r0, Z+
    13ce:	f0 81       	ld	r31, Z
    13d0:	e0 2d       	mov	r30, r0
    13d2:	84 81       	ldd	r24, Z+4	; 0x04
    13d4:	c8 17       	cp	r28, r24
    13d6:	98 f3       	brcs	.-26     	; 0x13be <udc_reset+0x20>
    13d8:	10 92 c2 20 	sts	0x20C2, r1
    13dc:	10 92 c6 20 	sts	0x20C6, r1
    13e0:	10 92 c7 20 	sts	0x20C7, r1
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    13e8:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    13ea:	80 91 c2 20 	lds	r24, 0x20C2
    13ee:	88 23       	and	r24, r24
    13f0:	49 f1       	breq	.+82     	; 0x1444 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13f2:	a0 91 c0 20 	lds	r26, 0x20C0
    13f6:	b0 91 c1 20 	lds	r27, 0x20C1
    13fa:	ed 91       	ld	r30, X+
    13fc:	fc 91       	ld	r31, X
    13fe:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1400:	84 81       	ldd	r24, Z+4	; 0x04
    1402:	88 23       	and	r24, r24
    1404:	f9 f0       	breq	.+62     	; 0x1444 <udc_sof_notify+0x5c>
    1406:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1408:	ec 2f       	mov	r30, r28
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	8d 91       	ld	r24, X+
    1414:	9c 91       	ld	r25, X
    1416:	13 97       	sbiw	r26, 0x03	; 3
    1418:	e8 0f       	add	r30, r24
    141a:	f9 1f       	adc	r31, r25
    141c:	01 90       	ld	r0, Z+
    141e:	f0 81       	ld	r31, Z
    1420:	e0 2d       	mov	r30, r0
    1422:	00 84       	ldd	r0, Z+8	; 0x08
    1424:	f1 85       	ldd	r31, Z+9	; 0x09
    1426:	e0 2d       	mov	r30, r0
    1428:	30 97       	sbiw	r30, 0x00	; 0
    142a:	09 f0       	breq	.+2      	; 0x142e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    142c:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    142e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1430:	a0 91 c0 20 	lds	r26, 0x20C0
    1434:	b0 91 c1 20 	lds	r27, 0x20C1
    1438:	ed 91       	ld	r30, X+
    143a:	fc 91       	ld	r31, X
    143c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    143e:	84 81       	ldd	r24, Z+4	; 0x04
    1440:	c8 17       	cp	r28, r24
    1442:	10 f3       	brcs	.-60     	; 0x1408 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1450:	e5 e6       	ldi	r30, 0x65	; 101
    1452:	f4 e2       	ldi	r31, 0x24	; 36
    1454:	12 86       	std	Z+10, r1	; 0x0a
    1456:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1458:	14 86       	std	Z+12, r1	; 0x0c
    145a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    145c:	16 86       	std	Z+14, r1	; 0x0e
    145e:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1460:	80 81       	ld	r24, Z
    1462:	88 23       	and	r24, r24
    1464:	3c f4       	brge	.+14     	; 0x1474 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1466:	20 91 6b 24 	lds	r18, 0x246B
    146a:	30 91 6c 24 	lds	r19, 0x246C
    146e:	23 2b       	or	r18, r19
    1470:	09 f4       	brne	.+2      	; 0x1474 <udc_process_setup+0x2c>
    1472:	62 c3       	rjmp	.+1732   	; 0x1b38 <udc_process_setup+0x6f0>
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
    1474:	80 76       	andi	r24, 0x60	; 96
    1476:	80 34       	cpi	r24, 0x40	; 64
    1478:	09 f0       	breq	.+2      	; 0x147c <udc_process_setup+0x34>
    147a:	00 c1       	rjmp	.+512    	; 0x167c <udc_process_setup+0x234>
	}
	return false;
}

static bool udc_reqvend(void){
	switch (udd_g_ctrlreq.req.bRequest){
    147c:	e0 91 66 24 	lds	r30, 0x2466
    1480:	8e 2f       	mov	r24, r30
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	fc 01       	movw	r30, r24
    1486:	e0 5a       	subi	r30, 0xA0	; 160
    1488:	f1 09       	sbc	r31, r1
    148a:	e8 30       	cpi	r30, 0x08	; 8
    148c:	f1 05       	cpc	r31, r1
    148e:	08 f0       	brcs	.+2      	; 0x1492 <udc_process_setup+0x4a>
    1490:	ec c0       	rjmp	.+472    	; 0x166a <udc_process_setup+0x222>
    1492:	e2 50       	subi	r30, 0x02	; 2
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__tablejump2__>
		case 0xa0: //Break!  (Debug command)
			delayed_debug = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	80 93 b4 20 	sts	0x20B4, r24
    14a0:	4f c3       	rjmp	.+1694   	; 0x1b40 <udc_process_setup+0x6f8>
			return 1;
		case 0xa1: //Receive waveform for signal gen
			TC_DAC.CTRLA = 0x00;
    14a2:	e0 e0       	ldi	r30, 0x00	; 0
    14a4:	f8 e0       	ldi	r31, 0x08	; 8
    14a6:	10 82       	st	Z, r1
			TC_DAC.PERBUF = udd_g_ctrlreq.req.wValue;
    14a8:	c5 e6       	ldi	r28, 0x65	; 101
    14aa:	d4 e2       	ldi	r29, 0x24	; 36
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	86 ab       	std	Z+54, r24	; 0x36
    14b2:	97 ab       	std	Z+55, r25	; 0x37
			TC_DAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	8f 70       	andi	r24, 0x0F	; 15
    14b8:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH1, udd_g_ctrlreq.req.wLength);
    14ba:	6e 81       	ldd	r22, Y+6	; 0x06
    14bc:	7f 81       	ldd	r23, Y+7	; 0x07
    14be:	84 e6       	ldi	r24, 0x64	; 100
    14c0:	92 e2       	ldi	r25, 0x22	; 34
    14c2:	ee d6       	rcall	.+3548   	; 0x22a0 <udd_set_setup_payload>
			if(dacBuf_len != udd_g_ctrlreq.req.wLength){
    14c4:	8e 81       	ldd	r24, Y+6	; 0x06
    14c6:	9f 81       	ldd	r25, Y+7	; 0x07
    14c8:	20 91 04 20 	lds	r18, 0x2004
    14cc:	30 91 05 20 	lds	r19, 0x2005
    14d0:	82 17       	cp	r24, r18
    14d2:	93 07       	cpc	r25, r19
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <udc_process_setup+0x90>
    14d6:	34 c3       	rjmp	.+1640   	; 0x1b40 <udc_process_setup+0x6f8>
				dacBuf_len = udd_g_ctrlreq.req.wLength;
    14d8:	80 93 04 20 	sts	0x2004, r24
    14dc:	90 93 05 20 	sts	0x2005, r25
				switch(global_mode){
    14e0:	e0 91 00 20 	lds	r30, 0x2000
    14e4:	8e 2f       	mov	r24, r30
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	88 30       	cpi	r24, 0x08	; 8
    14ea:	91 05       	cpc	r25, r1
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <udc_process_setup+0xa8>
    14ee:	bf c0       	rjmp	.+382    	; 0x166e <udc_process_setup+0x226>
    14f0:	fc 01       	movw	r30, r24
    14f2:	ea 5f       	subi	r30, 0xFA	; 250
    14f4:	fe 4f       	sbci	r31, 0xFE	; 254
    14f6:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    14fa:	59 d8       	rcall	.-3918   	; 0x5ae <tiny_dma_set_mode_0>
    14fc:	21 c3       	rjmp	.+1602   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 1:
					tiny_dma_set_mode_1();
    14fe:	d3 d8       	rcall	.-3674   	; 0x6a6 <tiny_dma_set_mode_1>
    1500:	1f c3       	rjmp	.+1598   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 2:
					tiny_dma_set_mode_2();
    1502:	49 d9       	rcall	.-3438   	; 0x796 <tiny_dma_set_mode_2>
    1504:	1d c3       	rjmp	.+1594   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 3:
					tiny_dma_set_mode_3();
    1506:	be d9       	rcall	.-3204   	; 0x884 <tiny_dma_set_mode_3>
    1508:	1b c3       	rjmp	.+1590   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 4:
					tiny_dma_set_mode_4();
    150a:	38 da       	rcall	.-2960   	; 0x97c <tiny_dma_set_mode_4>
    150c:	19 c3       	rjmp	.+1586   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 5:
					tiny_dma_set_mode_5();
    150e:	ac da       	rcall	.-2728   	; 0xa68 <tiny_dma_set_mode_5>
    1510:	17 c3       	rjmp	.+1582   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 6:
					tiny_dma_set_mode_6();
    1512:	f2 da       	rcall	.-2588   	; 0xaf8 <tiny_dma_set_mode_6>
    1514:	15 c3       	rjmp	.+1578   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 7:
					tiny_dma_set_mode_7();
    1516:	52 db       	rcall	.-2396   	; 0xbbc <tiny_dma_set_mode_7>
    1518:	13 c3       	rjmp	.+1574   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
				}
			}
			return 1;
		case 0xa2: //CH2 waveform
			TC_AUXDAC.CTRLA = 0x00;
    151a:	e0 e4       	ldi	r30, 0x40	; 64
    151c:	f8 e0       	ldi	r31, 0x08	; 8
    151e:	10 82       	st	Z, r1
			TC_AUXDAC.PERBUF = udd_g_ctrlreq.req.wValue;
    1520:	c5 e6       	ldi	r28, 0x65	; 101
    1522:	d4 e2       	ldi	r29, 0x24	; 36
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	86 ab       	std	Z+54, r24	; 0x36
    152a:	97 ab       	std	Z+55, r25	; 0x37
			TC_AUXDAC.CTRLA = (unsigned char) udd_g_ctrlreq.req.wIndex & 0x0F;
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	8f 70       	andi	r24, 0x0F	; 15
    1530:	80 83       	st	Z, r24
			udd_set_setup_payload(dacBuf_CH2, udd_g_ctrlreq.req.wLength);
    1532:	6e 81       	ldd	r22, Y+6	; 0x06
    1534:	7f 81       	ldd	r23, Y+7	; 0x07
    1536:	8b e7       	ldi	r24, 0x7B	; 123
    1538:	94 e2       	ldi	r25, 0x24	; 36
    153a:	b2 d6       	rcall	.+3428   	; 0x22a0 <udd_set_setup_payload>
			if(auxDacBufLen != udd_g_ctrlreq.req.wLength){
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	9f 81       	ldd	r25, Y+7	; 0x07
    1540:	20 91 02 20 	lds	r18, 0x2002
    1544:	30 91 03 20 	lds	r19, 0x2003
    1548:	82 17       	cp	r24, r18
    154a:	93 07       	cpc	r25, r19
    154c:	09 f4       	brne	.+2      	; 0x1550 <udc_process_setup+0x108>
    154e:	f8 c2       	rjmp	.+1520   	; 0x1b40 <udc_process_setup+0x6f8>
				auxDacBufLen = udd_g_ctrlreq.req.wLength;
    1550:	80 93 02 20 	sts	0x2002, r24
    1554:	90 93 03 20 	sts	0x2003, r25
				switch(global_mode){
    1558:	e0 91 00 20 	lds	r30, 0x2000
    155c:	8e 2f       	mov	r24, r30
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	88 30       	cpi	r24, 0x08	; 8
    1562:	91 05       	cpc	r25, r1
    1564:	08 f0       	brcs	.+2      	; 0x1568 <udc_process_setup+0x120>
    1566:	85 c0       	rjmp	.+266    	; 0x1672 <udc_process_setup+0x22a>
    1568:	fc 01       	movw	r30, r24
    156a:	e2 5f       	subi	r30, 0xF2	; 242
    156c:	fe 4f       	sbci	r31, 0xFE	; 254
    156e:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__tablejump2__>
					case 0:
					tiny_dma_set_mode_0();
    1572:	1d d8       	rcall	.-4038   	; 0x5ae <tiny_dma_set_mode_0>
    1574:	e5 c2       	rjmp	.+1482   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 1:
					tiny_dma_set_mode_1();
    1576:	97 d8       	rcall	.-3794   	; 0x6a6 <tiny_dma_set_mode_1>
    1578:	e3 c2       	rjmp	.+1478   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 2:
					tiny_dma_set_mode_2();
    157a:	0d d9       	rcall	.-3558   	; 0x796 <tiny_dma_set_mode_2>
    157c:	e1 c2       	rjmp	.+1474   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 3:
					tiny_dma_set_mode_3();
    157e:	82 d9       	rcall	.-3324   	; 0x884 <tiny_dma_set_mode_3>
    1580:	df c2       	rjmp	.+1470   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 4:
					tiny_dma_set_mode_4();
    1582:	fc d9       	rcall	.-3080   	; 0x97c <tiny_dma_set_mode_4>
    1584:	dd c2       	rjmp	.+1466   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 5:
					tiny_dma_set_mode_5();
    1586:	70 da       	rcall	.-2848   	; 0xa68 <tiny_dma_set_mode_5>
    1588:	db c2       	rjmp	.+1462   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 6:
					tiny_dma_set_mode_6();
    158a:	b6 da       	rcall	.-2708   	; 0xaf8 <tiny_dma_set_mode_6>
    158c:	d9 c2       	rjmp	.+1458   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
					case 7:
					tiny_dma_set_mode_7();
    158e:	16 db       	rcall	.-2516   	; 0xbbc <tiny_dma_set_mode_7>
    1590:	d7 c2       	rjmp	.+1454   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
				}
			}
			return 1;
		case 0xa3: //PSU voltage control
			TC_PSU.CCA = 0;
    1592:	10 92 68 09 	sts	0x0968, r1
    1596:	10 92 69 09 	sts	0x0969, r1
			PSU_target = udd_g_ctrlreq.req.wValue;
    159a:	80 91 67 24 	lds	r24, 0x2467
    159e:	80 93 b6 20 	sts	0x20B6, r24
    15a2:	ce c2       	rjmp	.+1436   	; 0x1b40 <udc_process_setup+0x6f8>
			return 1;
		case 0xa4: //Triple mode
			PORTB.OUT = udd_g_ctrlreq.req.wValue;
    15a4:	80 91 67 24 	lds	r24, 0x2467
    15a8:	80 93 24 06 	sts	0x0624, r24
    15ac:	c9 c2       	rjmp	.+1426   	; 0x1b40 <udc_process_setup+0x6f8>
			return 1;			
		case 0xa5: //Control Gain and Scope modes
			switch(udd_g_ctrlreq.req.wValue){
    15ae:	e0 91 67 24 	lds	r30, 0x2467
    15b2:	f0 91 68 24 	lds	r31, 0x2468
    15b6:	e8 30       	cpi	r30, 0x08	; 8
    15b8:	f1 05       	cpc	r31, r1
    15ba:	08 f0       	brcs	.+2      	; 0x15be <udc_process_setup+0x176>
    15bc:	5c c0       	rjmp	.+184    	; 0x1676 <udc_process_setup+0x22e>
    15be:	ea 5e       	subi	r30, 0xEA	; 234
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__tablejump2__>
				case 0:  //Mode 0
					tiny_adc_setup(0, 0);
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	0e 94 5f 02 	call	0x4be	; 0x4be <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15ce:	80 91 69 24 	lds	r24, 0x2469
    15d2:	0e 94 2d 02 	call	0x45a	; 0x45a <tiny_adc_ch0setup>
					tiny_dma_set_mode_0();
    15d6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <tiny_dma_set_mode_0>
    15da:	b2 c2       	rjmp	.+1380   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
				case 1:  //Mode 1
					tiny_adc_setup(0, 0);
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 5f 02 	call	0x4be	; 0x4be <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15e4:	80 91 69 24 	lds	r24, 0x2469
    15e8:	0e 94 2d 02 	call	0x45a	; 0x45a <tiny_adc_ch0setup>
					tiny_dma_set_mode_1();
    15ec:	5c d8       	rcall	.-3912   	; 0x6a6 <tiny_dma_set_mode_1>
    15ee:	a8 c2       	rjmp	.+1360   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
				case 2:  //Mode 2
					tiny_adc_setup(1, 1);
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 5f 02 	call	0x4be	; 0x4be <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    15f8:	c5 e6       	ldi	r28, 0x65	; 101
    15fa:	d4 e2       	ldi	r29, 0x24	; 36
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	0e 94 2d 02 	call	0x45a	; 0x45a <tiny_adc_ch0setup>
					tiny_adc_ch1setup(udd_g_ctrlreq.req.wIndex>>8);
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	0e 94 42 02 	call	0x484	; 0x484 <tiny_adc_ch1setup>
					tiny_dma_set_mode_2();
    1608:	c6 d8       	rcall	.-3700   	; 0x796 <tiny_dma_set_mode_2>
    160a:	9a c2       	rjmp	.+1332   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
				case 3:  //Mode 3
					tiny_dma_set_mode_3();
    160c:	3b d9       	rcall	.-3466   	; 0x884 <tiny_dma_set_mode_3>
    160e:	98 c2       	rjmp	.+1328   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
				case 4:  //Mode 4
					tiny_dma_set_mode_4();
    1610:	b5 d9       	rcall	.-3222   	; 0x97c <tiny_dma_set_mode_4>
    1612:	96 c2       	rjmp	.+1324   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
				case 5:  //Mode 5
					tiny_adc_setup(0, 0);
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	0e 94 5f 02 	call	0x4be	; 0x4be <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    161c:	80 91 69 24 	lds	r24, 0x2469
    1620:	0e 94 2d 02 	call	0x45a	; 0x45a <tiny_adc_ch0setup>
					tiny_dma_set_mode_5();
    1624:	21 da       	rcall	.-3006   	; 0xa68 <tiny_dma_set_mode_5>
    1626:	8c c2       	rjmp	.+1304   	; 0x1b40 <udc_process_setup+0x6f8>
					break;
				case 6:  //Mode 6
					tiny_adc_setup(0, 1);
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	0e 94 5f 02 	call	0x4be	; 0x4be <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex);
    1630:	80 91 69 24 	lds	r24, 0x2469
    1634:	0e 94 2d 02 	call	0x45a	; 0x45a <tiny_adc_ch0setup>
					tiny_dma_set_mode_6();
    1638:	5f da       	rcall	.-2882   	; 0xaf8 <tiny_dma_set_mode_6>
    163a:	82 c2       	rjmp	.+1284   	; 0x1b40 <udc_process_setup+0x6f8>
					break;		
				case 7:  //Mode 7
					tiny_adc_setup(0, 2);
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 5f 02 	call	0x4be	; 0x4be <tiny_adc_setup>
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
    1644:	80 91 69 24 	lds	r24, 0x2469
    1648:	80 68       	ori	r24, 0x80	; 128
    164a:	0e 94 2d 02 	call	0x45a	; 0x45a <tiny_adc_ch0setup>
					tiny_dma_set_mode_7();
    164e:	b6 da       	rcall	.-2708   	; 0xbbc <tiny_dma_set_mode_7>
    1650:	77 c2       	rjmp	.+1262   	; 0x1b40 <udc_process_setup+0x6f8>
				default:
					return 0;
			}
			return 1;
		case 0xa6:  //Digital out???
			PORTE.OUT = udd_g_ctrlreq.req.wValue;
    1652:	80 91 67 24 	lds	r24, 0x2467
    1656:	80 93 84 06 	sts	0x0684, r24
    165a:	72 c2       	rjmp	.+1252   	; 0x1b40 <udc_process_setup+0x6f8>
		case 0xa7:  //Soft Reset
		
		//Code here from SprinterSB
		//http://www.avrfreaks.net/comment/872674
		//I don't understand it, but it seems to do the job
			    __asm volatile ("cli"                 "\n\t"
    165c:	e9 e7       	ldi	r30, 0x79	; 121
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	88 ed       	ldi	r24, 0xD8	; 216
    1664:	f8 94       	cli
    1666:	84 bf       	out	0x34, r24	; 52
    1668:	90 83       	st	Z, r25
			    [swrst] "r" ((uint8_t) RST_SWRST_bm),
			    [rst]   "e" (&RST.CTRL)
			    : "memory");
			    __builtin_unreachable();
		default:
			return 0;
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <udc_process_setup+0x230>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <udc_process_setup+0x230>
					case 7:
					tiny_dma_set_mode_7();
					break;
				}
			}
			return 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <udc_process_setup+0x230>
					tiny_adc_setup(0, 2);
					tiny_adc_ch0setup(udd_g_ctrlreq.req.wIndex | 0x80);
					tiny_dma_set_mode_7();
					break;
				default:
					return 0;
    1676:	80 e0       	ldi	r24, 0x00	; 0
			return false; // Error from USB host
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
    1678:	81 11       	cpse	r24, r1
    167a:	65 c2       	rjmp	.+1226   	; 0x1b46 <udc_process_setup+0x6fe>
			return true;
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    167c:	80 91 65 24 	lds	r24, 0x2465
    1680:	98 2f       	mov	r25, r24
    1682:	90 76       	andi	r25, 0x60	; 96
    1684:	09 f0       	breq	.+2      	; 0x1688 <udc_process_setup+0x240>
    1686:	e1 c1       	rjmp	.+962    	; 0x1a4a <udc_process_setup+0x602>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1688:	88 23       	and	r24, r24
    168a:	0c f0       	brlt	.+2      	; 0x168e <udc_process_setup+0x246>
    168c:	05 c1       	rjmp	.+522    	; 0x1898 <udc_process_setup+0x450>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    168e:	20 91 6b 24 	lds	r18, 0x246B
    1692:	30 91 6c 24 	lds	r19, 0x246C
    1696:	21 15       	cp	r18, r1
    1698:	31 05       	cpc	r19, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <udc_process_setup+0x256>
    169c:	d6 c1       	rjmp	.+940    	; 0x1a4a <udc_process_setup+0x602>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    169e:	8f 71       	andi	r24, 0x1F	; 31
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <udc_process_setup+0x25c>
    16a2:	a3 c0       	rjmp	.+326    	; 0x17ea <udc_process_setup+0x3a2>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    16a4:	90 91 66 24 	lds	r25, 0x2466
    16a8:	96 30       	cpi	r25, 0x06	; 6
    16aa:	79 f0       	breq	.+30     	; 0x16ca <udc_process_setup+0x282>
    16ac:	98 30       	cpi	r25, 0x08	; 8
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <udc_process_setup+0x26a>
    16b0:	92 c0       	rjmp	.+292    	; 0x17d6 <udc_process_setup+0x38e>
    16b2:	91 11       	cpse	r25, r1
    16b4:	9a c0       	rjmp	.+308    	; 0x17ea <udc_process_setup+0x3a2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	09 f0       	breq	.+2      	; 0x16be <udc_process_setup+0x276>
    16bc:	c6 c1       	rjmp	.+908    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    16be:	62 e0       	ldi	r22, 0x02	; 2
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	86 ec       	ldi	r24, 0xC6	; 198
    16c4:	90 e2       	ldi	r25, 0x20	; 32
    16c6:	ec d5       	rcall	.+3032   	; 0x22a0 <udd_set_setup_payload>
    16c8:	3d c2       	rjmp	.+1146   	; 0x1b44 <udc_process_setup+0x6fc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    16ca:	80 91 67 24 	lds	r24, 0x2467
    16ce:	90 91 68 24 	lds	r25, 0x2468

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    16d2:	29 2f       	mov	r18, r25
    16d4:	33 27       	eor	r19, r19
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	a9 f0       	breq	.+42     	; 0x1706 <udc_process_setup+0x2be>
    16dc:	24 f4       	brge	.+8      	; 0x16e6 <udc_process_setup+0x29e>
    16de:	21 30       	cpi	r18, 0x01	; 1
    16e0:	31 05       	cpc	r19, r1
    16e2:	41 f0       	breq	.+16     	; 0x16f4 <udc_process_setup+0x2ac>
    16e4:	a9 c1       	rjmp	.+850    	; 0x1a38 <udc_process_setup+0x5f0>
    16e6:	23 30       	cpi	r18, 0x03	; 3
    16e8:	31 05       	cpc	r19, r1
    16ea:	d9 f1       	breq	.+118    	; 0x1762 <udc_process_setup+0x31a>
    16ec:	2f 30       	cpi	r18, 0x0F	; 15
    16ee:	31 05       	cpc	r19, r1
    16f0:	51 f1       	breq	.+84     	; 0x1746 <udc_process_setup+0x2fe>
    16f2:	a2 c1       	rjmp	.+836    	; 0x1a38 <udc_process_setup+0x5f0>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    16f4:	80 91 10 20 	lds	r24, 0x2010
    16f8:	90 91 11 20 	lds	r25, 0x2011
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    16fc:	dc 01       	movw	r26, r24
    16fe:	6c 91       	ld	r22, X
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	ce d5       	rcall	.+2972   	; 0x22a0 <udd_set_setup_payload>
    1704:	59 c0       	rjmp	.+178    	; 0x17b8 <udc_process_setup+0x370>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1706:	e0 91 10 20 	lds	r30, 0x2010
    170a:	f0 91 11 20 	lds	r31, 0x2011
    170e:	21 89       	ldd	r18, Z+17	; 0x11
    1710:	82 17       	cp	r24, r18
    1712:	08 f0       	brcs	.+2      	; 0x1716 <udc_process_setup+0x2ce>
    1714:	9a c1       	rjmp	.+820    	; 0x1a4a <udc_process_setup+0x602>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1716:	99 27       	eor	r25, r25
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	e0 91 12 20 	lds	r30, 0x2012
    1724:	f0 91 13 20 	lds	r31, 0x2013
    1728:	e8 0f       	add	r30, r24
    172a:	f9 1f       	adc	r31, r25
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1730:	fc 01       	movw	r30, r24
    1732:	62 81       	ldd	r22, Z+2	; 0x02
    1734:	73 81       	ldd	r23, Z+3	; 0x03
    1736:	b4 d5       	rcall	.+2920   	; 0x22a0 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1738:	e0 91 6d 24 	lds	r30, 0x246D
    173c:	f0 91 6e 24 	lds	r31, 0x246E
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	81 83       	std	Z+1, r24	; 0x01
    1744:	39 c0       	rjmp	.+114    	; 0x17b8 <udc_process_setup+0x370>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1746:	80 91 14 20 	lds	r24, 0x2014
    174a:	90 91 15 20 	lds	r25, 0x2015
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	09 f4       	brne	.+2      	; 0x1754 <udc_process_setup+0x30c>
    1752:	7b c1       	rjmp	.+758    	; 0x1a4a <udc_process_setup+0x602>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1754:	dc 01       	movw	r26, r24
    1756:	12 96       	adiw	r26, 0x02	; 2
    1758:	6d 91       	ld	r22, X+
    175a:	7c 91       	ld	r23, X
    175c:	13 97       	sbiw	r26, 0x03	; 3
    175e:	a0 d5       	rcall	.+2880   	; 0x22a0 <udd_set_setup_payload>
    1760:	2b c0       	rjmp	.+86     	; 0x17b8 <udc_process_setup+0x370>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1762:	99 27       	eor	r25, r25
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	71 f0       	breq	.+28     	; 0x1786 <udc_process_setup+0x33e>
    176a:	38 f0       	brcs	.+14     	; 0x177a <udc_process_setup+0x332>
    176c:	02 97       	sbiw	r24, 0x02	; 2
    176e:	09 f0       	breq	.+2      	; 0x1772 <udc_process_setup+0x32a>
    1770:	6c c1       	rjmp	.+728    	; 0x1a4a <udc_process_setup+0x602>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1772:	8a e8       	ldi	r24, 0x8A	; 138
    1774:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1776:	28 e1       	ldi	r18, 0x18	; 24
    1778:	09 c0       	rjmp	.+18     	; 0x178c <udc_process_setup+0x344>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    177a:	64 e0       	ldi	r22, 0x04	; 4
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	8e ea       	ldi	r24, 0xAE	; 174
    1780:	90 e2       	ldi	r25, 0x20	; 32
    1782:	8e d5       	rcall	.+2844   	; 0x22a0 <udd_set_setup_payload>
    1784:	19 c0       	rjmp	.+50     	; 0x17b8 <udc_process_setup+0x370>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1786:	83 ea       	ldi	r24, 0xA3	; 163
    1788:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    178a:	29 e0       	ldi	r18, 0x09	; 9
    178c:	38 2f       	mov	r19, r24
    178e:	aa e5       	ldi	r26, 0x5A	; 90
    1790:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1792:	e8 2f       	mov	r30, r24
    1794:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1796:	81 91       	ld	r24, Z+
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	8d 93       	st	X+, r24
    179c:	9d 93       	st	X+, r25
    179e:	8e 2f       	mov	r24, r30
    17a0:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    17a2:	82 17       	cp	r24, r18
    17a4:	c0 f3       	brcs	.-16     	; 0x1796 <udc_process_setup+0x34e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    17a6:	62 2f       	mov	r22, r18
    17a8:	66 0f       	add	r22, r22
    17aa:	6e 5f       	subi	r22, 0xFE	; 254
    17ac:	60 93 58 20 	sts	0x2058, r22
		udd_set_setup_payload(
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	88 e5       	ldi	r24, 0x58	; 88
    17b4:	90 e2       	ldi	r25, 0x20	; 32
    17b6:	74 d5       	rcall	.+2792   	; 0x22a0 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    17b8:	e5 e6       	ldi	r30, 0x65	; 101
    17ba:	f4 e2       	ldi	r31, 0x24	; 36
    17bc:	86 81       	ldd	r24, Z+6	; 0x06
    17be:	97 81       	ldd	r25, Z+7	; 0x07
    17c0:	22 85       	ldd	r18, Z+10	; 0x0a
    17c2:	33 85       	ldd	r19, Z+11	; 0x0b
    17c4:	82 17       	cp	r24, r18
    17c6:	93 07       	cpc	r25, r19
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <udc_process_setup+0x384>
    17ca:	bc c1       	rjmp	.+888    	; 0x1b44 <udc_process_setup+0x6fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    17cc:	80 93 6f 24 	sts	0x246F, r24
    17d0:	90 93 70 24 	sts	0x2470, r25
    17d4:	b7 c1       	rjmp	.+878    	; 0x1b44 <udc_process_setup+0x6fc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    17d6:	21 30       	cpi	r18, 0x01	; 1
    17d8:	31 05       	cpc	r19, r1
    17da:	09 f0       	breq	.+2      	; 0x17de <udc_process_setup+0x396>
    17dc:	36 c1       	rjmp	.+620    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	82 ec       	ldi	r24, 0xC2	; 194
    17e4:	90 e2       	ldi	r25, 0x20	; 32
    17e6:	5c d5       	rcall	.+2744   	; 0x22a0 <udd_set_setup_payload>
    17e8:	ad c1       	rjmp	.+858    	; 0x1b44 <udc_process_setup+0x6fc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	e1 f5       	brne	.+120    	; 0x1866 <udc_process_setup+0x41e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    17ee:	90 91 66 24 	lds	r25, 0x2466
    17f2:	9a 30       	cpi	r25, 0x0A	; 10
    17f4:	c1 f5       	brne	.+112    	; 0x1866 <udc_process_setup+0x41e>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    17f6:	21 30       	cpi	r18, 0x01	; 1
    17f8:	31 05       	cpc	r19, r1
    17fa:	09 f0       	breq	.+2      	; 0x17fe <udc_process_setup+0x3b6>
    17fc:	26 c1       	rjmp	.+588    	; 0x1a4a <udc_process_setup+0x602>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    17fe:	80 91 c2 20 	lds	r24, 0x20C2
    1802:	88 23       	and	r24, r24
    1804:	09 f4       	brne	.+2      	; 0x1808 <udc_process_setup+0x3c0>
    1806:	21 c1       	rjmp	.+578    	; 0x1a4a <udc_process_setup+0x602>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1808:	c0 91 69 24 	lds	r28, 0x2469
    180c:	d0 91 6a 24 	lds	r29, 0x246A
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1810:	00 91 c0 20 	lds	r16, 0x20C0
    1814:	10 91 c1 20 	lds	r17, 0x20C1
    1818:	d8 01       	movw	r26, r16
    181a:	ed 91       	ld	r30, X+
    181c:	fc 91       	ld	r31, X
    181e:	84 81       	ldd	r24, Z+4	; 0x04
    1820:	c8 17       	cp	r28, r24
    1822:	08 f0       	brcs	.+2      	; 0x1826 <udc_process_setup+0x3de>
    1824:	12 c1       	rjmp	.+548    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	8c 2f       	mov	r24, r28
    182a:	04 dd       	rcall	.-1528   	; 0x1234 <udc_update_iface_desc>
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <udc_process_setup+0x3ea>
    1830:	0c c1       	rjmp	.+536    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1832:	ce 01       	movw	r24, r28
    1834:	99 27       	eor	r25, r25
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	d8 01       	movw	r26, r16
    183c:	12 96       	adiw	r26, 0x02	; 2
    183e:	ed 91       	ld	r30, X+
    1840:	fc 91       	ld	r31, X
    1842:	13 97       	sbiw	r26, 0x03	; 3
    1844:	e8 0f       	add	r30, r24
    1846:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1848:	01 90       	ld	r0, Z+
    184a:	f0 81       	ld	r31, Z
    184c:	e0 2d       	mov	r30, r0
    184e:	86 81       	ldd	r24, Z+6	; 0x06
    1850:	97 81       	ldd	r25, Z+7	; 0x07
    1852:	fc 01       	movw	r30, r24
    1854:	09 95       	icall
    1856:	80 93 c4 20 	sts	0x20C4, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	84 ec       	ldi	r24, 0xC4	; 196
    1860:	90 e2       	ldi	r25, 0x20	; 32
    1862:	1e d5       	rcall	.+2620   	; 0x22a0 <udd_set_setup_payload>
    1864:	6f c1       	rjmp	.+734    	; 0x1b44 <udc_process_setup+0x6fc>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1866:	82 30       	cpi	r24, 0x02	; 2
    1868:	09 f0       	breq	.+2      	; 0x186c <udc_process_setup+0x424>
    186a:	ef c0       	rjmp	.+478    	; 0x1a4a <udc_process_setup+0x602>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    186c:	80 91 66 24 	lds	r24, 0x2466
    1870:	81 11       	cpse	r24, r1
    1872:	e4 c0       	rjmp	.+456    	; 0x1a3c <udc_process_setup+0x5f4>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	09 f0       	breq	.+2      	; 0x187c <udc_process_setup+0x434>
    187a:	e7 c0       	rjmp	.+462    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    187c:	80 91 69 24 	lds	r24, 0x2469
    1880:	8b d5       	rcall	.+2838   	; 0x2398 <udd_ep_is_halted>
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	80 93 bc 20 	sts	0x20BC, r24
    1888:	90 93 bd 20 	sts	0x20BD, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    188c:	62 e0       	ldi	r22, 0x02	; 2
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	8c eb       	ldi	r24, 0xBC	; 188
    1892:	90 e2       	ldi	r25, 0x20	; 32
    1894:	05 d5       	rcall	.+2570   	; 0x22a0 <udd_set_setup_payload>
    1896:	56 c1       	rjmp	.+684    	; 0x1b44 <udc_process_setup+0x6fc>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1898:	8f 71       	andi	r24, 0x1F	; 31
    189a:	09 f0       	breq	.+2      	; 0x189e <udc_process_setup+0x456>
    189c:	83 c0       	rjmp	.+262    	; 0x19a4 <udc_process_setup+0x55c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    189e:	90 91 66 24 	lds	r25, 0x2466
    18a2:	93 30       	cpi	r25, 0x03	; 3
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <udc_process_setup+0x460>
    18a6:	cc c0       	rjmp	.+408    	; 0x1a40 <udc_process_setup+0x5f8>
    18a8:	18 f4       	brcc	.+6      	; 0x18b0 <udc_process_setup+0x468>
    18aa:	91 30       	cpi	r25, 0x01	; 1
    18ac:	a1 f0       	breq	.+40     	; 0x18d6 <udc_process_setup+0x48e>
    18ae:	7a c0       	rjmp	.+244    	; 0x19a4 <udc_process_setup+0x55c>
    18b0:	95 30       	cpi	r25, 0x05	; 5
    18b2:	19 f0       	breq	.+6      	; 0x18ba <udc_process_setup+0x472>
    18b4:	99 30       	cpi	r25, 0x09	; 9
    18b6:	39 f1       	breq	.+78     	; 0x1906 <udc_process_setup+0x4be>
    18b8:	75 c0       	rjmp	.+234    	; 0x19a4 <udc_process_setup+0x55c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18ba:	80 91 6b 24 	lds	r24, 0x246B
    18be:	90 91 6c 24 	lds	r25, 0x246C
    18c2:	89 2b       	or	r24, r25
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <udc_process_setup+0x480>
    18c6:	c1 c0       	rjmp	.+386    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    18c8:	84 e1       	ldi	r24, 0x14	; 20
    18ca:	99 e0       	ldi	r25, 0x09	; 9
    18cc:	80 93 71 24 	sts	0x2471, r24
    18d0:	90 93 72 24 	sts	0x2472, r25
    18d4:	37 c1       	rjmp	.+622    	; 0x1b44 <udc_process_setup+0x6fc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18d6:	80 91 6b 24 	lds	r24, 0x246B
    18da:	90 91 6c 24 	lds	r25, 0x246C
    18de:	89 2b       	or	r24, r25
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <udc_process_setup+0x49c>
    18e2:	b3 c0       	rjmp	.+358    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    18e4:	80 91 67 24 	lds	r24, 0x2467
    18e8:	90 91 68 24 	lds	r25, 0x2468
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <udc_process_setup+0x4aa>
    18f0:	ac c0       	rjmp	.+344    	; 0x1a4a <udc_process_setup+0x602>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    18f2:	80 91 c6 20 	lds	r24, 0x20C6
    18f6:	90 91 c7 20 	lds	r25, 0x20C7
    18fa:	8d 7f       	andi	r24, 0xFD	; 253
    18fc:	80 93 c6 20 	sts	0x20C6, r24
    1900:	90 93 c7 20 	sts	0x20C7, r25
    1904:	1f c1       	rjmp	.+574    	; 0x1b44 <udc_process_setup+0x6fc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1906:	80 91 6b 24 	lds	r24, 0x246B
    190a:	90 91 6c 24 	lds	r25, 0x246C
    190e:	89 2b       	or	r24, r25
    1910:	09 f0       	breq	.+2      	; 0x1914 <udc_process_setup+0x4cc>
    1912:	9b c0       	rjmp	.+310    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1914:	c2 d4       	rcall	.+2436   	; 0x229a <udd_getaddress>
    1916:	88 23       	and	r24, r24
    1918:	09 f4       	brne	.+2      	; 0x191c <udc_process_setup+0x4d4>
    191a:	97 c0       	rjmp	.+302    	; 0x1a4a <udc_process_setup+0x602>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    191c:	20 91 67 24 	lds	r18, 0x2467
    1920:	30 91 68 24 	lds	r19, 0x2468
    1924:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1926:	e0 91 10 20 	lds	r30, 0x2010
    192a:	f0 91 11 20 	lds	r31, 0x2011
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    192e:	81 89       	ldd	r24, Z+17	; 0x11
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	82 17       	cp	r24, r18
    1934:	93 07       	cpc	r25, r19
    1936:	08 f4       	brcc	.+2      	; 0x193a <udc_process_setup+0x4f2>
    1938:	88 c0       	rjmp	.+272    	; 0x1a4a <udc_process_setup+0x602>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    193a:	31 dd       	rcall	.-1438   	; 0x139e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    193c:	80 91 67 24 	lds	r24, 0x2467
    1940:	90 91 68 24 	lds	r25, 0x2468
    1944:	80 93 c2 20 	sts	0x20C2, r24
	if (udc_num_configuration == 0) {
    1948:	88 23       	and	r24, r24
    194a:	09 f4       	brne	.+2      	; 0x194e <udc_process_setup+0x506>
    194c:	fb c0       	rjmp	.+502    	; 0x1b44 <udc_process_setup+0x6fc>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    194e:	99 27       	eor	r25, r25
    1950:	81 50       	subi	r24, 0x01	; 1
    1952:	90 4c       	sbci	r25, 0xC0	; 192
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	e0 91 12 20 	lds	r30, 0x2012
    1960:	f0 91 13 20 	lds	r31, 0x2013
    1964:	e8 0f       	add	r30, r24
    1966:	f9 1f       	adc	r31, r25
    1968:	e0 93 c0 20 	sts	0x20C0, r30
    196c:	f0 93 c1 20 	sts	0x20C1, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1970:	01 90       	ld	r0, Z+
    1972:	f0 81       	ld	r31, Z
    1974:	e0 2d       	mov	r30, r0
    1976:	84 81       	ldd	r24, Z+4	; 0x04
    1978:	88 23       	and	r24, r24
    197a:	09 f4       	brne	.+2      	; 0x197e <udc_process_setup+0x536>
    197c:	e3 c0       	rjmp	.+454    	; 0x1b44 <udc_process_setup+0x6fc>
    197e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	8c 2f       	mov	r24, r28
    1984:	d3 dc       	rcall	.-1626   	; 0x132c <udc_iface_enable>
    1986:	88 23       	and	r24, r24
    1988:	09 f4       	brne	.+2      	; 0x198c <udc_process_setup+0x544>
    198a:	5f c0       	rjmp	.+190    	; 0x1a4a <udc_process_setup+0x602>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    198c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    198e:	e0 91 c0 20 	lds	r30, 0x20C0
    1992:	f0 91 c1 20 	lds	r31, 0x20C1
    1996:	01 90       	ld	r0, Z+
    1998:	f0 81       	ld	r31, Z
    199a:	e0 2d       	mov	r30, r0
    199c:	84 81       	ldd	r24, Z+4	; 0x04
    199e:	c8 17       	cp	r28, r24
    19a0:	78 f3       	brcs	.-34     	; 0x1980 <udc_process_setup+0x538>
    19a2:	d0 c0       	rjmp	.+416    	; 0x1b44 <udc_process_setup+0x6fc>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	e1 f4       	brne	.+56     	; 0x19e0 <udc_process_setup+0x598>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    19a8:	90 91 66 24 	lds	r25, 0x2466
    19ac:	9b 30       	cpi	r25, 0x0B	; 11
    19ae:	c1 f4       	brne	.+48     	; 0x19e0 <udc_process_setup+0x598>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    19b0:	80 91 6b 24 	lds	r24, 0x246B
    19b4:	90 91 6c 24 	lds	r25, 0x246C
    19b8:	89 2b       	or	r24, r25
    19ba:	09 f0       	breq	.+2      	; 0x19be <udc_process_setup+0x576>
    19bc:	46 c0       	rjmp	.+140    	; 0x1a4a <udc_process_setup+0x602>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    19be:	80 91 c2 20 	lds	r24, 0x20C2
    19c2:	88 23       	and	r24, r24
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <udc_process_setup+0x580>
    19c6:	41 c0       	rjmp	.+130    	; 0x1a4a <udc_process_setup+0x602>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    19c8:	e5 e6       	ldi	r30, 0x65	; 101
    19ca:	f4 e2       	ldi	r31, 0x24	; 36
    19cc:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    19ce:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    19d0:	8c 2f       	mov	r24, r28
    19d2:	6a dc       	rcall	.-1836   	; 0x12a8 <udc_iface_disable>
    19d4:	88 23       	and	r24, r24
    19d6:	c9 f1       	breq	.+114    	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    19d8:	6d 2f       	mov	r22, r29
    19da:	8c 2f       	mov	r24, r28
    19dc:	a7 dc       	rcall	.-1714   	; 0x132c <udc_iface_enable>
    19de:	33 c0       	rjmp	.+102    	; 0x1a46 <udc_process_setup+0x5fe>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	99 f5       	brne	.+102    	; 0x1a4a <udc_process_setup+0x602>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    19e4:	80 91 66 24 	lds	r24, 0x2466
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <udc_process_setup+0x5aa>
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	89 f0       	breq	.+34     	; 0x1a12 <udc_process_setup+0x5ca>
    19f0:	29 c0       	rjmp	.+82     	; 0x1a44 <udc_process_setup+0x5fc>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19f2:	80 91 6b 24 	lds	r24, 0x246B
    19f6:	90 91 6c 24 	lds	r25, 0x246C
    19fa:	89 2b       	or	r24, r25
    19fc:	31 f5       	brne	.+76     	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    19fe:	80 91 67 24 	lds	r24, 0x2467
    1a02:	90 91 68 24 	lds	r25, 0x2468
    1a06:	89 2b       	or	r24, r25
    1a08:	01 f5       	brne	.+64     	; 0x1a4a <udc_process_setup+0x602>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a0a:	80 91 69 24 	lds	r24, 0x2469
    1a0e:	df d4       	rcall	.+2494   	; 0x23ce <udd_ep_clear_halt>
    1a10:	1a c0       	rjmp	.+52     	; 0x1a46 <udc_process_setup+0x5fe>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1a12:	80 91 6b 24 	lds	r24, 0x246B
    1a16:	90 91 6c 24 	lds	r25, 0x246C
    1a1a:	89 2b       	or	r24, r25
    1a1c:	b1 f4       	brne	.+44     	; 0x1a4a <udc_process_setup+0x602>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1a1e:	80 91 67 24 	lds	r24, 0x2467
    1a22:	90 91 68 24 	lds	r25, 0x2468
    1a26:	89 2b       	or	r24, r25
    1a28:	81 f4       	brne	.+32     	; 0x1a4a <udc_process_setup+0x602>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a2a:	c5 e6       	ldi	r28, 0x65	; 101
    1a2c:	d4 e2       	ldi	r29, 0x24	; 36
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a30:	b7 d5       	rcall	.+2926   	; 0x25a0 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	1a d6       	rcall	.+3124   	; 0x266a <udd_ep_set_halt>
    1a36:	07 c0       	rjmp	.+14     	; 0x1a46 <udc_process_setup+0x5fe>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <udc_process_setup+0x5fe>
				break;
			}
		}
#endif
	}
	return false;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	03 c0       	rjmp	.+6      	; 0x1a46 <udc_process_setup+0x5fe>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <udc_process_setup+0x5fe>
				break;
			}
		}
#endif
	}
	return false;
    1a44:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1a46:	81 11       	cpse	r24, r1
    1a48:	7e c0       	rjmp	.+252    	; 0x1b46 <udc_process_setup+0x6fe>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1a4a:	80 91 65 24 	lds	r24, 0x2465
    1a4e:	8f 71       	andi	r24, 0x1F	; 31
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	71 f5       	brne	.+92     	; 0x1ab0 <udc_process_setup+0x668>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a54:	80 91 c2 20 	lds	r24, 0x20C2
    1a58:	88 23       	and	r24, r24
    1a5a:	51 f1       	breq	.+84     	; 0x1ab0 <udc_process_setup+0x668>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a5c:	00 91 69 24 	lds	r16, 0x2469
    1a60:	10 91 6a 24 	lds	r17, 0x246A
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a64:	c0 91 c0 20 	lds	r28, 0x20C0
    1a68:	d0 91 c1 20 	lds	r29, 0x20C1
    1a6c:	e8 81       	ld	r30, Y
    1a6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a70:	84 81       	ldd	r24, Z+4	; 0x04
    1a72:	08 17       	cp	r16, r24
    1a74:	e8 f4       	brcc	.+58     	; 0x1ab0 <udc_process_setup+0x668>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	80 2f       	mov	r24, r16
    1a7a:	dc db       	rcall	.-2120   	; 0x1234 <udc_update_iface_desc>
    1a7c:	88 23       	and	r24, r24
    1a7e:	c1 f0       	breq	.+48     	; 0x1ab0 <udc_process_setup+0x668>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a80:	f8 01       	movw	r30, r16
    1a82:	ff 27       	eor	r31, r31
    1a84:	cf 01       	movw	r24, r30
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a8e:	e8 0f       	add	r30, r24
    1a90:	f9 1f       	adc	r31, r25
    1a92:	c0 81       	ld	r28, Z
    1a94:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a96:	ee 81       	ldd	r30, Y+6	; 0x06
    1a98:	ff 81       	ldd	r31, Y+7	; 0x07
    1a9a:	09 95       	icall
    1a9c:	68 2f       	mov	r22, r24
    1a9e:	80 2f       	mov	r24, r16
    1aa0:	c9 db       	rcall	.-2158   	; 0x1234 <udc_update_iface_desc>
    1aa2:	88 23       	and	r24, r24
    1aa4:	29 f0       	breq	.+10     	; 0x1ab0 <udc_process_setup+0x668>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1aa6:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa8:	fd 81       	ldd	r31, Y+5	; 0x05
    1aaa:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1aac:	81 11       	cpse	r24, r1
    1aae:	4b c0       	rjmp	.+150    	; 0x1b46 <udc_process_setup+0x6fe>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1ab0:	80 91 65 24 	lds	r24, 0x2465
    1ab4:	8f 71       	andi	r24, 0x1F	; 31
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <udc_process_setup+0x674>
    1aba:	40 c0       	rjmp	.+128    	; 0x1b3c <udc_process_setup+0x6f4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1abc:	80 91 c2 20 	lds	r24, 0x20C2
    1ac0:	88 23       	and	r24, r24
    1ac2:	b1 f1       	breq	.+108    	; 0x1b30 <udc_process_setup+0x6e8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ac4:	a0 91 c0 20 	lds	r26, 0x20C0
    1ac8:	b0 91 c1 20 	lds	r27, 0x20C1
    1acc:	ed 91       	ld	r30, X+
    1ace:	fc 91       	ld	r31, X
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	84 81       	ldd	r24, Z+4	; 0x04
    1ad4:	88 23       	and	r24, r24
    1ad6:	71 f1       	breq	.+92     	; 0x1b34 <udc_process_setup+0x6ec>
    1ad8:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1ada:	ec 2f       	mov	r30, r28
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	12 96       	adiw	r26, 0x02	; 2
    1ae4:	8d 91       	ld	r24, X+
    1ae6:	9c 91       	ld	r25, X
    1ae8:	13 97       	sbiw	r26, 0x03	; 3
    1aea:	e8 0f       	add	r30, r24
    1aec:	f9 1f       	adc	r31, r25
    1aee:	00 81       	ld	r16, Z
    1af0:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1af2:	d8 01       	movw	r26, r16
    1af4:	16 96       	adiw	r26, 0x06	; 6
    1af6:	ed 91       	ld	r30, X+
    1af8:	fc 91       	ld	r31, X
    1afa:	17 97       	sbiw	r26, 0x07	; 7
    1afc:	09 95       	icall
    1afe:	68 2f       	mov	r22, r24
    1b00:	8c 2f       	mov	r24, r28
    1b02:	98 db       	rcall	.-2256   	; 0x1234 <udc_update_iface_desc>
    1b04:	88 23       	and	r24, r24
    1b06:	f9 f0       	breq	.+62     	; 0x1b46 <udc_process_setup+0x6fe>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1b08:	d8 01       	movw	r26, r16
    1b0a:	14 96       	adiw	r26, 0x04	; 4
    1b0c:	ed 91       	ld	r30, X+
    1b0e:	fc 91       	ld	r31, X
    1b10:	15 97       	sbiw	r26, 0x05	; 5
    1b12:	09 95       	icall
    1b14:	81 11       	cpse	r24, r1
    1b16:	17 c0       	rjmp	.+46     	; 0x1b46 <udc_process_setup+0x6fe>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1b18:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b1a:	a0 91 c0 20 	lds	r26, 0x20C0
    1b1e:	b0 91 c1 20 	lds	r27, 0x20C1
    1b22:	ed 91       	ld	r30, X+
    1b24:	fc 91       	ld	r31, X
    1b26:	11 97       	sbiw	r26, 0x01	; 1
    1b28:	94 81       	ldd	r25, Z+4	; 0x04
    1b2a:	c9 17       	cp	r28, r25
    1b2c:	b0 f2       	brcs	.-84     	; 0x1ada <udc_process_setup+0x692>
    1b2e:	0b c0       	rjmp	.+22     	; 0x1b46 <udc_process_setup+0x6fe>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	09 c0       	rjmp	.+18     	; 0x1b46 <udc_process_setup+0x6fe>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	07 c0       	rjmp	.+14     	; 0x1b46 <udc_process_setup+0x6fe>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <udc_process_setup+0x6fe>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <udc_process_setup+0x6fe>
		}
	}
	
	if (Udd_setup_type() == USB_REQ_TYPE_VENDOR){
		if (udc_reqvend()) {
			return true;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <udc_process_setup+0x6fe>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1b50:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1b52:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1b54:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1b56:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1b58:	60 83       	st	Z, r22
	ret                             // Return to caller
    1b5a:	08 95       	ret

00001b5c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1b5c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1b60:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1b62:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1b64:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1b68:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1b6a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1b6e:	08 95       	ret

00001b70 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1b70:	81 11       	cpse	r24, r1
    1b72:	22 c0       	rjmp	.+68     	; 0x1bb8 <udd_sleep_mode+0x48>
    1b74:	90 91 58 22 	lds	r25, 0x2258
    1b78:	99 23       	and	r25, r25
    1b7a:	d9 f0       	breq	.+54     	; 0x1bb2 <udd_sleep_mode+0x42>
    1b7c:	90 91 5a 2e 	lds	r25, 0x2E5A
    1b80:	91 11       	cpse	r25, r1
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <udd_sleep_mode+0x16>
    1b84:	ff cf       	rjmp	.-2      	; 0x1b84 <udd_sleep_mode+0x14>
    1b86:	2f b7       	in	r18, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	e9 e5       	ldi	r30, 0x59	; 89
    1b8c:	fe e2       	ldi	r31, 0x2E	; 46
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	91 50       	subi	r25, 0x01	; 1
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	2f bf       	out	0x3f, r18	; 63
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <udd_sleep_mode+0x42>
    1b98:	90 91 5a 2e 	lds	r25, 0x2E5A
    1b9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <udd_sleep_mode+0x32>
    1ba0:	ff cf       	rjmp	.-2      	; 0x1ba0 <udd_sleep_mode+0x30>
    1ba2:	2f b7       	in	r18, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	e9 e5       	ldi	r30, 0x59	; 89
    1ba8:	fe e2       	ldi	r31, 0x2E	; 46
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	9f 5f       	subi	r25, 0xFF	; 255
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	2f bf       	out	0x3f, r18	; 63
    1bb2:	80 93 58 22 	sts	0x2258, r24
    1bb6:	08 95       	ret
    1bb8:	90 91 58 22 	lds	r25, 0x2258
    1bbc:	99 23       	and	r25, r25
    1bbe:	61 f3       	breq	.-40     	; 0x1b98 <udd_sleep_mode+0x28>
    1bc0:	f8 cf       	rjmp	.-16     	; 0x1bb2 <udd_sleep_mode+0x42>

00001bc2 <udd_ctrl_init>:
    1bc2:	0f 93       	push	r16
    1bc4:	e8 ec       	ldi	r30, 0xC8	; 200
    1bc6:	f4 e0       	ldi	r31, 0x04	; 4
    1bc8:	80 81       	ld	r24, Z
    1bca:	8f 7d       	andi	r24, 0xDF	; 223
    1bcc:	80 83       	st	Z, r24
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 7d       	andi	r24, 0xDF	; 223
    1bd2:	80 83       	st	Z, r24
    1bd4:	ec e1       	ldi	r30, 0x1C	; 28
    1bd6:	f2 e2       	ldi	r31, 0x22	; 34
    1bd8:	02 e0       	ldi	r16, 0x02	; 2
    1bda:	05 93       	las	Z, r16
    1bdc:	10 92 1e 22 	sts	0x221E, r1
    1be0:	10 92 1f 22 	sts	0x221F, r1
    1be4:	00 e2       	ldi	r16, 0x20	; 32
    1be6:	06 93       	lac	Z, r16
    1be8:	00 e4       	ldi	r16, 0x40	; 64
    1bea:	06 93       	lac	Z, r16
    1bec:	e4 e1       	ldi	r30, 0x14	; 20
    1bee:	f2 e2       	ldi	r31, 0x22	; 34
    1bf0:	00 e2       	ldi	r16, 0x20	; 32
    1bf2:	06 93       	lac	Z, r16
    1bf4:	00 e4       	ldi	r16, 0x40	; 64
    1bf6:	06 93       	lac	Z, r16
    1bf8:	e5 e6       	ldi	r30, 0x65	; 101
    1bfa:	f4 e2       	ldi	r31, 0x24	; 36
    1bfc:	14 86       	std	Z+12, r1	; 0x0c
    1bfe:	15 86       	std	Z+13, r1	; 0x0d
    1c00:	16 86       	std	Z+14, r1	; 0x0e
    1c02:	17 86       	std	Z+15, r1	; 0x0f
    1c04:	12 86       	std	Z+10, r1	; 0x0a
    1c06:	13 86       	std	Z+11, r1	; 0x0b
    1c08:	10 92 03 22 	sts	0x2203, r1
    1c0c:	0f 91       	pop	r16
    1c0e:	08 95       	ret

00001c10 <udd_ctrl_stall_data>:
    1c10:	0f 93       	push	r16
    1c12:	85 e0       	ldi	r24, 0x05	; 5
    1c14:	80 93 03 22 	sts	0x2203, r24
    1c18:	ed e1       	ldi	r30, 0x1D	; 29
    1c1a:	f2 e2       	ldi	r31, 0x22	; 34
    1c1c:	04 e0       	ldi	r16, 0x04	; 4
    1c1e:	05 93       	las	Z, r16
    1c20:	e5 e1       	ldi	r30, 0x15	; 21
    1c22:	f2 e2       	ldi	r31, 0x22	; 34
    1c24:	04 e0       	ldi	r16, 0x04	; 4
    1c26:	05 93       	las	Z, r16
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <udd_ctrl_send_zlp_in>:
    1c2c:	0f 93       	push	r16
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	80 93 03 22 	sts	0x2203, r24
    1c34:	10 92 1e 22 	sts	0x221E, r1
    1c38:	10 92 1f 22 	sts	0x221F, r1
    1c3c:	ec e1       	ldi	r30, 0x1C	; 28
    1c3e:	f2 e2       	ldi	r31, 0x22	; 34
    1c40:	02 e0       	ldi	r16, 0x02	; 2
    1c42:	06 93       	lac	Z, r16
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <udd_ctrl_endofrequest>:
    1c48:	e0 91 71 24 	lds	r30, 0x2471
    1c4c:	f0 91 72 24 	lds	r31, 0x2472
    1c50:	30 97       	sbiw	r30, 0x00	; 0
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <udd_ctrl_endofrequest+0xe>
    1c54:	09 95       	icall
    1c56:	08 95       	ret

00001c58 <udd_ctrl_in_sent>:
    1c58:	0f 93       	push	r16
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	80 91 03 22 	lds	r24, 0x2203
    1c62:	83 30       	cpi	r24, 0x03	; 3
    1c64:	19 f4       	brne	.+6      	; 0x1c6c <udd_ctrl_in_sent+0x14>
    1c66:	f0 df       	rcall	.-32     	; 0x1c48 <udd_ctrl_endofrequest>
    1c68:	ac df       	rcall	.-168    	; 0x1bc2 <udd_ctrl_init>
    1c6a:	5e c0       	rjmp	.+188    	; 0x1d28 <udd_ctrl_in_sent+0xd0>
    1c6c:	80 91 ff 21 	lds	r24, 0x21FF
    1c70:	90 91 00 22 	lds	r25, 0x2200
    1c74:	c0 91 6f 24 	lds	r28, 0x246F
    1c78:	d0 91 70 24 	lds	r29, 0x2470
    1c7c:	c8 1b       	sub	r28, r24
    1c7e:	d9 0b       	sbc	r29, r25
    1c80:	71 f5       	brne	.+92     	; 0x1cde <udd_ctrl_in_sent+0x86>
    1c82:	20 91 01 22 	lds	r18, 0x2201
    1c86:	30 91 02 22 	lds	r19, 0x2202
    1c8a:	82 0f       	add	r24, r18
    1c8c:	93 1f       	adc	r25, r19
    1c8e:	80 93 01 22 	sts	0x2201, r24
    1c92:	90 93 02 22 	sts	0x2202, r25
    1c96:	20 91 6b 24 	lds	r18, 0x246B
    1c9a:	30 91 6c 24 	lds	r19, 0x246C
    1c9e:	82 17       	cp	r24, r18
    1ca0:	93 07       	cpc	r25, r19
    1ca2:	21 f0       	breq	.+8      	; 0x1cac <udd_ctrl_in_sent+0x54>
    1ca4:	80 91 c8 20 	lds	r24, 0x20C8
    1ca8:	88 23       	and	r24, r24
    1caa:	41 f0       	breq	.+16     	; 0x1cbc <udd_ctrl_in_sent+0x64>
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	80 93 03 22 	sts	0x2203, r24
    1cb2:	e4 e1       	ldi	r30, 0x14	; 20
    1cb4:	f2 e2       	ldi	r31, 0x22	; 34
    1cb6:	02 e0       	ldi	r16, 0x02	; 2
    1cb8:	06 93       	lac	Z, r16
    1cba:	36 c0       	rjmp	.+108    	; 0x1d28 <udd_ctrl_in_sent+0xd0>
    1cbc:	e0 91 73 24 	lds	r30, 0x2473
    1cc0:	f0 91 74 24 	lds	r31, 0x2474
    1cc4:	30 97       	sbiw	r30, 0x00	; 0
    1cc6:	99 f0       	breq	.+38     	; 0x1cee <udd_ctrl_in_sent+0x96>
    1cc8:	09 95       	icall
    1cca:	88 23       	and	r24, r24
    1ccc:	81 f0       	breq	.+32     	; 0x1cee <udd_ctrl_in_sent+0x96>
    1cce:	10 92 ff 21 	sts	0x21FF, r1
    1cd2:	10 92 00 22 	sts	0x2200, r1
    1cd6:	c0 91 6f 24 	lds	r28, 0x246F
    1cda:	d0 91 70 24 	lds	r29, 0x2470
    1cde:	c0 34       	cpi	r28, 0x40	; 64
    1ce0:	d1 05       	cpc	r29, r1
    1ce2:	28 f0       	brcs	.+10     	; 0x1cee <udd_ctrl_in_sent+0x96>
    1ce4:	10 92 c8 20 	sts	0x20C8, r1
    1ce8:	c0 e4       	ldi	r28, 0x40	; 64
    1cea:	d0 e0       	ldi	r29, 0x00	; 0
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <udd_ctrl_in_sent+0x9c>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	80 93 c8 20 	sts	0x20C8, r24
    1cf4:	e4 e0       	ldi	r30, 0x04	; 4
    1cf6:	f2 e2       	ldi	r31, 0x22	; 34
    1cf8:	c2 8f       	std	Z+26, r28	; 0x1a
    1cfa:	d3 8f       	std	Z+27, r29	; 0x1b
    1cfc:	80 91 ff 21 	lds	r24, 0x21FF
    1d00:	90 91 00 22 	lds	r25, 0x2200
    1d04:	20 91 6d 24 	lds	r18, 0x246D
    1d08:	30 91 6e 24 	lds	r19, 0x246E
    1d0c:	28 0f       	add	r18, r24
    1d0e:	39 1f       	adc	r19, r25
    1d10:	24 8f       	std	Z+28, r18	; 0x1c
    1d12:	35 8f       	std	Z+29, r19	; 0x1d
    1d14:	c8 0f       	add	r28, r24
    1d16:	d9 1f       	adc	r29, r25
    1d18:	c0 93 ff 21 	sts	0x21FF, r28
    1d1c:	d0 93 00 22 	sts	0x2200, r29
    1d20:	ec e1       	ldi	r30, 0x1C	; 28
    1d22:	f2 e2       	ldi	r31, 0x22	; 34
    1d24:	02 e0       	ldi	r16, 0x02	; 2
    1d26:	06 93       	lac	Z, r16
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	0f 91       	pop	r16
    1d2e:	08 95       	ret

00001d30 <udd_ep_get_size>:
    1d30:	fc 01       	movw	r30, r24
    1d32:	81 81       	ldd	r24, Z+1	; 0x01
    1d34:	e8 2f       	mov	r30, r24
    1d36:	e7 70       	andi	r30, 0x07	; 7
    1d38:	8e 2f       	mov	r24, r30
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	31 97       	sbiw	r30, 0x01	; 1
    1d40:	e7 30       	cpi	r30, 0x07	; 7
    1d42:	f1 05       	cpc	r31, r1
    1d44:	c0 f4       	brcc	.+48     	; 0x1d76 <udd_ep_get_size+0x46>
    1d46:	e2 5e       	subi	r30, 0xE2	; 226
    1d48:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4a:	74 c6       	rjmp	.+3304   	; 0x2a34 <__tablejump2__>
    1d4c:	80 e1       	ldi	r24, 0x10	; 16
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	08 95       	ret
    1d52:	80 e2       	ldi	r24, 0x20	; 32
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	08 95       	ret
    1d58:	80 e4       	ldi	r24, 0x40	; 64
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	08 95       	ret
    1d5e:	80 e8       	ldi	r24, 0x80	; 128
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	08 95       	ret
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	08 95       	ret
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	92 e0       	ldi	r25, 0x02	; 2
    1d6e:	08 95       	ret
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	93 e0       	ldi	r25, 0x03	; 3
    1d74:	08 95       	ret
    1d76:	88 e0       	ldi	r24, 0x08	; 8
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	08 95       	ret

00001d7c <udd_ep_get_job>:
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	2f 70       	andi	r18, 0x0F	; 15
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	22 0f       	add	r18, r18
    1d84:	33 1f       	adc	r19, r19
    1d86:	08 2e       	mov	r0, r24
    1d88:	00 0c       	add	r0, r0
    1d8a:	99 0b       	sbc	r25, r25
    1d8c:	88 27       	eor	r24, r24
    1d8e:	99 0f       	add	r25, r25
    1d90:	88 1f       	adc	r24, r24
    1d92:	99 27       	eor	r25, r25
    1d94:	82 0f       	add	r24, r18
    1d96:	93 1f       	adc	r25, r19
    1d98:	02 97       	sbiw	r24, 0x02	; 2
    1d9a:	9c 01       	movw	r18, r24
    1d9c:	22 0f       	add	r18, r18
    1d9e:	33 1f       	adc	r19, r19
    1da0:	22 0f       	add	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	22 0f       	add	r18, r18
    1da6:	33 1f       	adc	r19, r19
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	87 57       	subi	r24, 0x77	; 119
    1dae:	9e 4d       	sbci	r25, 0xDE	; 222
    1db0:	08 95       	ret

00001db2 <udd_ctrl_interrupt_tc_setup>:
    1db2:	0f 93       	push	r16
    1db4:	cf 93       	push	r28
    1db6:	80 91 cc 04 	lds	r24, 0x04CC
    1dba:	80 ff       	sbrs	r24, 0
    1dbc:	62 c0       	rjmp	.+196    	; 0x1e82 <udd_ctrl_interrupt_tc_setup+0xd0>
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 93 cc 04 	sts	0x04CC, r24
    1dc4:	e4 e1       	ldi	r30, 0x14	; 20
    1dc6:	f2 e2       	ldi	r31, 0x22	; 34
    1dc8:	00 e8       	ldi	r16, 0x80	; 128
    1dca:	06 93       	lac	Z, r16
    1dcc:	ec e1       	ldi	r30, 0x1C	; 28
    1dce:	f2 e2       	ldi	r31, 0x22	; 34
    1dd0:	00 e8       	ldi	r16, 0x80	; 128
    1dd2:	06 93       	lac	Z, r16
    1dd4:	80 93 ca 04 	sts	0x04CA, r24
    1dd8:	e4 e1       	ldi	r30, 0x14	; 20
    1dda:	f2 e2       	ldi	r31, 0x22	; 34
    1ddc:	00 e1       	ldi	r16, 0x10	; 16
    1dde:	06 93       	lac	Z, r16
    1de0:	80 91 03 22 	lds	r24, 0x2203
    1de4:	88 23       	and	r24, r24
    1de6:	29 f0       	breq	.+10     	; 0x1df2 <udd_ctrl_interrupt_tc_setup+0x40>
    1de8:	83 50       	subi	r24, 0x03	; 3
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	08 f4       	brcc	.+2      	; 0x1df0 <udd_ctrl_interrupt_tc_setup+0x3e>
    1dee:	2c df       	rcall	.-424    	; 0x1c48 <udd_ctrl_endofrequest>
    1df0:	e8 de       	rcall	.-560    	; 0x1bc2 <udd_ctrl_init>
    1df2:	80 91 16 22 	lds	r24, 0x2216
    1df6:	90 91 17 22 	lds	r25, 0x2217
    1dfa:	08 97       	sbiw	r24, 0x08	; 8
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <udd_ctrl_interrupt_tc_setup+0x4e>
    1dfe:	43 c0       	rjmp	.+134    	; 0x1e86 <udd_ctrl_interrupt_tc_setup+0xd4>
    1e00:	88 e0       	ldi	r24, 0x08	; 8
    1e02:	ef eb       	ldi	r30, 0xBF	; 191
    1e04:	f1 e2       	ldi	r31, 0x21	; 33
    1e06:	a5 e6       	ldi	r26, 0x65	; 101
    1e08:	b4 e2       	ldi	r27, 0x24	; 36
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	0d 92       	st	X+, r0
    1e0e:	8a 95       	dec	r24
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <udd_ctrl_interrupt_tc_setup+0x58>
    1e12:	e8 ec       	ldi	r30, 0xC8	; 200
    1e14:	f4 e0       	ldi	r31, 0x04	; 4
    1e16:	80 81       	ld	r24, Z
    1e18:	80 62       	ori	r24, 0x20	; 32
    1e1a:	80 83       	st	Z, r24
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 62       	ori	r24, 0x20	; 32
    1e20:	80 83       	st	Z, r24
    1e22:	12 db       	rcall	.-2524   	; 0x1448 <udc_process_setup>
    1e24:	c8 2f       	mov	r28, r24
    1e26:	81 11       	cpse	r24, r1
    1e28:	03 c0       	rjmp	.+6      	; 0x1e30 <udd_ctrl_interrupt_tc_setup+0x7e>
    1e2a:	f2 de       	rcall	.-540    	; 0x1c10 <udd_ctrl_stall_data>
    1e2c:	c1 e0       	ldi	r28, 0x01	; 1
    1e2e:	2c c0       	rjmp	.+88     	; 0x1e88 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e30:	80 91 65 24 	lds	r24, 0x2465
    1e34:	88 23       	and	r24, r24
    1e36:	6c f4       	brge	.+26     	; 0x1e52 <udd_ctrl_interrupt_tc_setup+0xa0>
    1e38:	10 92 01 22 	sts	0x2201, r1
    1e3c:	10 92 02 22 	sts	0x2202, r1
    1e40:	10 92 ff 21 	sts	0x21FF, r1
    1e44:	10 92 00 22 	sts	0x2200, r1
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	80 93 03 22 	sts	0x2203, r24
    1e4e:	04 df       	rcall	.-504    	; 0x1c58 <udd_ctrl_in_sent>
    1e50:	1b c0       	rjmp	.+54     	; 0x1e88 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e52:	80 91 6b 24 	lds	r24, 0x246B
    1e56:	90 91 6c 24 	lds	r25, 0x246C
    1e5a:	89 2b       	or	r24, r25
    1e5c:	11 f4       	brne	.+4      	; 0x1e62 <udd_ctrl_interrupt_tc_setup+0xb0>
    1e5e:	e6 de       	rcall	.-564    	; 0x1c2c <udd_ctrl_send_zlp_in>
    1e60:	13 c0       	rjmp	.+38     	; 0x1e88 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e62:	10 92 01 22 	sts	0x2201, r1
    1e66:	10 92 02 22 	sts	0x2202, r1
    1e6a:	10 92 ff 21 	sts	0x21FF, r1
    1e6e:	10 92 00 22 	sts	0x2200, r1
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 03 22 	sts	0x2203, r24
    1e78:	e4 e1       	ldi	r30, 0x14	; 20
    1e7a:	f2 e2       	ldi	r31, 0x22	; 34
    1e7c:	02 e0       	ldi	r16, 0x02	; 2
    1e7e:	06 93       	lac	Z, r16
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e82:	c0 e0       	ldi	r28, 0x00	; 0
    1e84:	01 c0       	rjmp	.+2      	; 0x1e88 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e86:	c1 e0       	ldi	r28, 0x01	; 1
    1e88:	8c 2f       	mov	r24, r28
    1e8a:	cf 91       	pop	r28
    1e8c:	0f 91       	pop	r16
    1e8e:	08 95       	ret

00001e90 <udd_ep_trans_complet>:
    1e90:	8f 92       	push	r8
    1e92:	9f 92       	push	r9
    1e94:	af 92       	push	r10
    1e96:	bf 92       	push	r11
    1e98:	df 92       	push	r13
    1e9a:	ef 92       	push	r14
    1e9c:	ff 92       	push	r15
    1e9e:	0f 93       	push	r16
    1ea0:	1f 93       	push	r17
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	d8 2e       	mov	r13, r24
    1ea8:	69 df       	rcall	.-302    	; 0x1d7c <udd_ep_get_job>
    1eaa:	8c 01       	movw	r16, r24
    1eac:	bd 2c       	mov	r11, r13
    1eae:	bb 1c       	adc	r11, r11
    1eb0:	bb 24       	eor	r11, r11
    1eb2:	bb 1c       	adc	r11, r11
    1eb4:	cd 2d       	mov	r28, r13
    1eb6:	cf 70       	andi	r28, 0x0F	; 15
    1eb8:	d0 e0       	ldi	r29, 0x00	; 0
    1eba:	cc 0f       	add	r28, r28
    1ebc:	dd 1f       	adc	r29, r29
    1ebe:	cb 0d       	add	r28, r11
    1ec0:	d1 1d       	adc	r29, r1
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	9c 01       	movw	r18, r24
    1ed2:	2c 5e       	subi	r18, 0xEC	; 236
    1ed4:	3d 4d       	sbci	r19, 0xDD	; 221
    1ed6:	79 01       	movw	r14, r18
    1ed8:	c9 01       	movw	r24, r18
    1eda:	2a df       	rcall	.-428    	; 0x1d30 <udd_ep_get_size>
    1edc:	4c 01       	movw	r8, r24
    1ede:	bb 20       	and	r11, r11
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <udd_ep_trans_complet+0x54>
    1ee2:	70 c0       	rjmp	.+224    	; 0x1fc4 <udd_ep_trans_complet+0x134>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	ec 5f       	subi	r30, 0xFC	; 252
    1ef4:	fd 4d       	sbci	r31, 0xDD	; 221
    1ef6:	26 89       	ldd	r18, Z+22	; 0x16
    1ef8:	37 89       	ldd	r19, Z+23	; 0x17
    1efa:	d8 01       	movw	r26, r16
    1efc:	15 96       	adiw	r26, 0x05	; 5
    1efe:	8d 91       	ld	r24, X+
    1f00:	9c 91       	ld	r25, X
    1f02:	16 97       	sbiw	r26, 0x06	; 6
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	15 96       	adiw	r26, 0x05	; 5
    1f0a:	8d 93       	st	X+, r24
    1f0c:	9c 93       	st	X, r25
    1f0e:	16 97       	sbiw	r26, 0x06	; 6
    1f10:	13 96       	adiw	r26, 0x03	; 3
    1f12:	2d 91       	ld	r18, X+
    1f14:	3c 91       	ld	r19, X
    1f16:	14 97       	sbiw	r26, 0x04	; 4
    1f18:	82 17       	cp	r24, r18
    1f1a:	93 07       	cpc	r25, r19
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <udd_ep_trans_complet+0x90>
    1f1e:	3c c0       	rjmp	.+120    	; 0x1f98 <udd_ep_trans_complet+0x108>
    1f20:	28 1b       	sub	r18, r24
    1f22:	39 0b       	sbc	r19, r25
    1f24:	21 15       	cp	r18, r1
    1f26:	b4 e0       	ldi	r27, 0x04	; 4
    1f28:	3b 07       	cpc	r19, r27
    1f2a:	38 f0       	brcs	.+14     	; 0x1f3a <udd_ep_trans_complet+0xaa>
    1f2c:	2f ef       	ldi	r18, 0xFF	; 255
    1f2e:	33 e0       	ldi	r19, 0x03	; 3
    1f30:	c9 01       	movw	r24, r18
    1f32:	b4 01       	movw	r22, r8
    1f34:	6b d5       	rcall	.+2774   	; 0x2a0c <__udivmodhi4>
    1f36:	28 1b       	sub	r18, r24
    1f38:	39 0b       	sbc	r19, r25
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 81       	ld	r24, Z
    1f3e:	81 ff       	sbrs	r24, 1
    1f40:	09 c0       	rjmp	.+18     	; 0x1f54 <udd_ep_trans_complet+0xc4>
    1f42:	c9 01       	movw	r24, r18
    1f44:	b4 01       	movw	r22, r8
    1f46:	62 d5       	rcall	.+2756   	; 0x2a0c <__udivmodhi4>
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	89 2b       	or	r24, r25
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <udd_ep_trans_complet+0xc0>
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	84 2f       	mov	r24, r20
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <udd_ep_trans_complet+0xc6>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	d8 01       	movw	r26, r16
    1f58:	9c 91       	ld	r25, X
    1f5a:	80 fb       	bst	r24, 0
    1f5c:	91 f9       	bld	r25, 1
    1f5e:	9c 93       	st	X, r25
    1f60:	cc 0f       	add	r28, r28
    1f62:	dd 1f       	adc	r29, r29
    1f64:	cc 0f       	add	r28, r28
    1f66:	dd 1f       	adc	r29, r29
    1f68:	cc 0f       	add	r28, r28
    1f6a:	dd 1f       	adc	r29, r29
    1f6c:	cc 5f       	subi	r28, 0xFC	; 252
    1f6e:	dd 4d       	sbci	r29, 0xDD	; 221
    1f70:	1e 8a       	std	Y+22, r1	; 0x16
    1f72:	1f 8a       	std	Y+23, r1	; 0x17
    1f74:	2a 8b       	std	Y+18, r18	; 0x12
    1f76:	3b 8b       	std	Y+19, r19	; 0x13
    1f78:	11 96       	adiw	r26, 0x01	; 1
    1f7a:	2d 91       	ld	r18, X+
    1f7c:	3c 91       	ld	r19, X
    1f7e:	12 97       	sbiw	r26, 0x02	; 2
    1f80:	15 96       	adiw	r26, 0x05	; 5
    1f82:	8d 91       	ld	r24, X+
    1f84:	9c 91       	ld	r25, X
    1f86:	16 97       	sbiw	r26, 0x06	; 6
    1f88:	82 0f       	add	r24, r18
    1f8a:	93 1f       	adc	r25, r19
    1f8c:	8c 8b       	std	Y+20, r24	; 0x14
    1f8e:	9d 8b       	std	Y+21, r25	; 0x15
    1f90:	f7 01       	movw	r30, r14
    1f92:	02 e0       	ldi	r16, 0x02	; 2
    1f94:	06 93       	lac	Z, r16
    1f96:	ca c0       	rjmp	.+404    	; 0x212c <udd_ep_trans_complet+0x29c>
    1f98:	d8 01       	movw	r26, r16
    1f9a:	8c 91       	ld	r24, X
    1f9c:	81 ff       	sbrs	r24, 1
    1f9e:	b3 c0       	rjmp	.+358    	; 0x2106 <udd_ep_trans_complet+0x276>
    1fa0:	8d 7f       	andi	r24, 0xFD	; 253
    1fa2:	8c 93       	st	X, r24
    1fa4:	cc 0f       	add	r28, r28
    1fa6:	dd 1f       	adc	r29, r29
    1fa8:	cc 0f       	add	r28, r28
    1faa:	dd 1f       	adc	r29, r29
    1fac:	cc 0f       	add	r28, r28
    1fae:	dd 1f       	adc	r29, r29
    1fb0:	cc 5f       	subi	r28, 0xFC	; 252
    1fb2:	dd 4d       	sbci	r29, 0xDD	; 221
    1fb4:	1e 8a       	std	Y+22, r1	; 0x16
    1fb6:	1f 8a       	std	Y+23, r1	; 0x17
    1fb8:	1a 8a       	std	Y+18, r1	; 0x12
    1fba:	1b 8a       	std	Y+19, r1	; 0x13
    1fbc:	f7 01       	movw	r30, r14
    1fbe:	02 e0       	ldi	r16, 0x02	; 2
    1fc0:	06 93       	lac	Z, r16
    1fc2:	b4 c0       	rjmp	.+360    	; 0x212c <udd_ep_trans_complet+0x29c>
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ee 0f       	add	r30, r30
    1fc8:	ff 1f       	adc	r31, r31
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	ec 5f       	subi	r30, 0xFC	; 252
    1fd4:	fd 4d       	sbci	r31, 0xDD	; 221
    1fd6:	a2 88       	ldd	r10, Z+18	; 0x12
    1fd8:	b3 88       	ldd	r11, Z+19	; 0x13
    1fda:	d8 01       	movw	r26, r16
    1fdc:	8c 91       	ld	r24, X
    1fde:	82 ff       	sbrs	r24, 2
    1fe0:	19 c0       	rjmp	.+50     	; 0x2014 <udd_ep_trans_complet+0x184>
    1fe2:	11 96       	adiw	r26, 0x01	; 1
    1fe4:	ed 91       	ld	r30, X+
    1fe6:	fc 91       	ld	r31, X
    1fe8:	12 97       	sbiw	r26, 0x02	; 2
    1fea:	15 96       	adiw	r26, 0x05	; 5
    1fec:	2d 91       	ld	r18, X+
    1fee:	3c 91       	ld	r19, X
    1ff0:	16 97       	sbiw	r26, 0x06	; 6
    1ff2:	13 96       	adiw	r26, 0x03	; 3
    1ff4:	8d 91       	ld	r24, X+
    1ff6:	9c 91       	ld	r25, X
    1ff8:	14 97       	sbiw	r26, 0x04	; 4
    1ffa:	b4 01       	movw	r22, r8
    1ffc:	07 d5       	rcall	.+2574   	; 0x2a0c <__udivmodhi4>
    1ffe:	b0 e4       	ldi	r27, 0x40	; 64
    2000:	db 9e       	mul	r13, r27
    2002:	b0 01       	movw	r22, r0
    2004:	11 24       	eor	r1, r1
    2006:	67 57       	subi	r22, 0x77	; 119
    2008:	7f 4d       	sbci	r23, 0xDF	; 223
    200a:	ac 01       	movw	r20, r24
    200c:	cf 01       	movw	r24, r30
    200e:	82 0f       	add	r24, r18
    2010:	93 1f       	adc	r25, r19
    2012:	16 d5       	rcall	.+2604   	; 0x2a40 <memcpy>
    2014:	f8 01       	movw	r30, r16
    2016:	25 81       	ldd	r18, Z+5	; 0x05
    2018:	36 81       	ldd	r19, Z+6	; 0x06
    201a:	2a 0d       	add	r18, r10
    201c:	3b 1d       	adc	r19, r11
    201e:	25 83       	std	Z+5, r18	; 0x05
    2020:	36 83       	std	Z+6, r19	; 0x06
    2022:	83 81       	ldd	r24, Z+3	; 0x03
    2024:	94 81       	ldd	r25, Z+4	; 0x04
    2026:	82 17       	cp	r24, r18
    2028:	93 07       	cpc	r25, r19
    202a:	68 f4       	brcc	.+26     	; 0x2046 <udd_ep_trans_complet+0x1b6>
    202c:	85 83       	std	Z+5, r24	; 0x05
    202e:	96 83       	std	Z+6, r25	; 0x06
    2030:	cc 0f       	add	r28, r28
    2032:	dd 1f       	adc	r29, r29
    2034:	cc 0f       	add	r28, r28
    2036:	dd 1f       	adc	r29, r29
    2038:	cc 0f       	add	r28, r28
    203a:	dd 1f       	adc	r29, r29
    203c:	cc 5f       	subi	r28, 0xFC	; 252
    203e:	dd 4d       	sbci	r29, 0xDD	; 221
    2040:	8e 89       	ldd	r24, Y+22	; 0x16
    2042:	9f 89       	ldd	r25, Y+23	; 0x17
    2044:	60 c0       	rjmp	.+192    	; 0x2106 <udd_ep_trans_complet+0x276>
    2046:	fe 01       	movw	r30, r28
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	ec 5f       	subi	r30, 0xFC	; 252
    2056:	fd 4d       	sbci	r31, 0xDD	; 221
    2058:	46 89       	ldd	r20, Z+22	; 0x16
    205a:	57 89       	ldd	r21, Z+23	; 0x17
    205c:	4a 15       	cp	r20, r10
    205e:	5b 05       	cpc	r21, r11
    2060:	09 f0       	breq	.+2      	; 0x2064 <udd_ep_trans_complet+0x1d4>
    2062:	51 c0       	rjmp	.+162    	; 0x2106 <udd_ep_trans_complet+0x276>
    2064:	28 17       	cp	r18, r24
    2066:	39 07       	cpc	r19, r25
    2068:	09 f4       	brne	.+2      	; 0x206c <udd_ep_trans_complet+0x1dc>
    206a:	4d c0       	rjmp	.+154    	; 0x2106 <udd_ep_trans_complet+0x276>
    206c:	ac 01       	movw	r20, r24
    206e:	42 1b       	sub	r20, r18
    2070:	53 0b       	sbc	r21, r19
    2072:	9a 01       	movw	r18, r20
    2074:	21 15       	cp	r18, r1
    2076:	54 e0       	ldi	r21, 0x04	; 4
    2078:	35 07       	cpc	r19, r21
    207a:	50 f0       	brcs	.+20     	; 0x2090 <udd_ep_trans_complet+0x200>
    207c:	2f ef       	ldi	r18, 0xFF	; 255
    207e:	33 e0       	ldi	r19, 0x03	; 3
    2080:	c9 01       	movw	r24, r18
    2082:	b4 01       	movw	r22, r8
    2084:	c3 d4       	rcall	.+2438   	; 0x2a0c <__udivmodhi4>
    2086:	d9 01       	movw	r26, r18
    2088:	a8 1b       	sub	r26, r24
    208a:	b9 0b       	sbc	r27, r25
    208c:	cd 01       	movw	r24, r26
    208e:	07 c0       	rjmp	.+14     	; 0x209e <udd_ep_trans_complet+0x20e>
    2090:	c9 01       	movw	r24, r18
    2092:	b4 01       	movw	r22, r8
    2094:	bb d4       	rcall	.+2422   	; 0x2a0c <__udivmodhi4>
    2096:	f9 01       	movw	r30, r18
    2098:	e8 1b       	sub	r30, r24
    209a:	f9 0b       	sbc	r31, r25
    209c:	cf 01       	movw	r24, r30
    209e:	fe 01       	movw	r30, r28
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	ec 5f       	subi	r30, 0xFC	; 252
    20ae:	fd 4d       	sbci	r31, 0xDD	; 221
    20b0:	12 8a       	std	Z+18, r1	; 0x12
    20b2:	13 8a       	std	Z+19, r1	; 0x13
    20b4:	88 15       	cp	r24, r8
    20b6:	99 05       	cpc	r25, r9
    20b8:	78 f4       	brcc	.+30     	; 0x20d8 <udd_ep_trans_complet+0x248>
    20ba:	d8 01       	movw	r26, r16
    20bc:	8c 91       	ld	r24, X
    20be:	84 60       	ori	r24, 0x04	; 4
    20c0:	8c 93       	st	X, r24
    20c2:	b0 e4       	ldi	r27, 0x40	; 64
    20c4:	db 9e       	mul	r13, r27
    20c6:	c0 01       	movw	r24, r0
    20c8:	11 24       	eor	r1, r1
    20ca:	87 57       	subi	r24, 0x77	; 119
    20cc:	9f 4d       	sbci	r25, 0xDF	; 223
    20ce:	84 8b       	std	Z+20, r24	; 0x14
    20d0:	95 8b       	std	Z+21, r25	; 0x15
    20d2:	86 8a       	std	Z+22, r8	; 0x16
    20d4:	97 8a       	std	Z+23, r9	; 0x17
    20d6:	13 c0       	rjmp	.+38     	; 0x20fe <udd_ep_trans_complet+0x26e>
    20d8:	f8 01       	movw	r30, r16
    20da:	41 81       	ldd	r20, Z+1	; 0x01
    20dc:	52 81       	ldd	r21, Z+2	; 0x02
    20de:	25 81       	ldd	r18, Z+5	; 0x05
    20e0:	36 81       	ldd	r19, Z+6	; 0x06
    20e2:	24 0f       	add	r18, r20
    20e4:	35 1f       	adc	r19, r21
    20e6:	cc 0f       	add	r28, r28
    20e8:	dd 1f       	adc	r29, r29
    20ea:	cc 0f       	add	r28, r28
    20ec:	dd 1f       	adc	r29, r29
    20ee:	cc 0f       	add	r28, r28
    20f0:	dd 1f       	adc	r29, r29
    20f2:	cc 5f       	subi	r28, 0xFC	; 252
    20f4:	dd 4d       	sbci	r29, 0xDD	; 221
    20f6:	2c 8b       	std	Y+20, r18	; 0x14
    20f8:	3d 8b       	std	Y+21, r19	; 0x15
    20fa:	8e 8b       	std	Y+22, r24	; 0x16
    20fc:	9f 8b       	std	Y+23, r25	; 0x17
    20fe:	f7 01       	movw	r30, r14
    2100:	02 e0       	ldi	r16, 0x02	; 2
    2102:	06 93       	lac	Z, r16
    2104:	13 c0       	rjmp	.+38     	; 0x212c <udd_ep_trans_complet+0x29c>
    2106:	d8 01       	movw	r26, r16
    2108:	8c 91       	ld	r24, X
    210a:	80 ff       	sbrs	r24, 0
    210c:	0f c0       	rjmp	.+30     	; 0x212c <udd_ep_trans_complet+0x29c>
    210e:	8e 7f       	andi	r24, 0xFE	; 254
    2110:	8c 93       	st	X, r24
    2112:	17 96       	adiw	r26, 0x07	; 7
    2114:	ed 91       	ld	r30, X+
    2116:	fc 91       	ld	r31, X
    2118:	18 97       	sbiw	r26, 0x08	; 8
    211a:	30 97       	sbiw	r30, 0x00	; 0
    211c:	39 f0       	breq	.+14     	; 0x212c <udd_ep_trans_complet+0x29c>
    211e:	15 96       	adiw	r26, 0x05	; 5
    2120:	6d 91       	ld	r22, X+
    2122:	7c 91       	ld	r23, X
    2124:	16 97       	sbiw	r26, 0x06	; 6
    2126:	4d 2d       	mov	r20, r13
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	09 95       	icall
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	df 90       	pop	r13
    213a:	bf 90       	pop	r11
    213c:	af 90       	pop	r10
    213e:	9f 90       	pop	r9
    2140:	8f 90       	pop	r8
    2142:	08 95       	ret

00002144 <udd_attach>:
    2144:	cf 93       	push	r28
    2146:	cf b7       	in	r28, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	11 dd       	rcall	.-1502   	; 0x1b70 <udd_sleep_mode>
    214e:	ea ec       	ldi	r30, 0xCA	; 202
    2150:	f4 e0       	ldi	r31, 0x04	; 4
    2152:	80 e4       	ldi	r24, 0x40	; 64
    2154:	80 83       	st	Z, r24
    2156:	80 e2       	ldi	r24, 0x20	; 32
    2158:	80 83       	st	Z, r24
    215a:	e1 ec       	ldi	r30, 0xC1	; 193
    215c:	f4 e0       	ldi	r31, 0x04	; 4
    215e:	80 81       	ld	r24, Z
    2160:	81 60       	ori	r24, 0x01	; 1
    2162:	80 83       	st	Z, r24
    2164:	a9 ec       	ldi	r26, 0xC9	; 201
    2166:	b4 e0       	ldi	r27, 0x04	; 4
    2168:	8c 91       	ld	r24, X
    216a:	82 60       	ori	r24, 0x02	; 2
    216c:	8c 93       	st	X, r24
    216e:	e8 ec       	ldi	r30, 0xC8	; 200
    2170:	f4 e0       	ldi	r31, 0x04	; 4
    2172:	80 81       	ld	r24, Z
    2174:	80 64       	ori	r24, 0x40	; 64
    2176:	80 83       	st	Z, r24
    2178:	8c 91       	ld	r24, X
    217a:	81 60       	ori	r24, 0x01	; 1
    217c:	8c 93       	st	X, r24
    217e:	80 81       	ld	r24, Z
    2180:	80 68       	ori	r24, 0x80	; 128
    2182:	80 83       	st	Z, r24
    2184:	cf bf       	out	0x3f, r28	; 63
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <udd_enable>:
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	c0 e6       	ldi	r28, 0x60	; 96
    2190:	d0 e0       	ldi	r29, 0x00	; 0
    2192:	18 82       	st	Y, r1
    2194:	80 e3       	ldi	r24, 0x30	; 48
    2196:	0e 94 4d 08 	call	0x109a	; 0x109a <sysclk_enable_usb>
    219a:	e0 ec       	ldi	r30, 0xC0	; 192
    219c:	f4 e0       	ldi	r31, 0x04	; 4
    219e:	80 81       	ld	r24, Z
    21a0:	80 64       	ori	r24, 0x40	; 64
    21a2:	80 83       	st	Z, r24
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	88 83       	st	Y, r24
    21a8:	cf b7       	in	r28, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	fc 01       	movw	r30, r24
    21b2:	ee 0f       	add	r30, r30
    21b4:	ff 1f       	adc	r31, r31
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	ec 5f       	subi	r30, 0xFC	; 252
    21c0:	fd 4d       	sbci	r31, 0xDD	; 221
    21c2:	11 8a       	std	Z+17, r1	; 0x11
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	88 30       	cpi	r24, 0x08	; 8
    21c8:	91 05       	cpc	r25, r1
    21ca:	91 f7       	brne	.-28     	; 0x21b0 <udd_enable+0x26>
    21cc:	e9 e8       	ldi	r30, 0x89	; 137
    21ce:	f1 e2       	ldi	r31, 0x21	; 33
    21d0:	80 81       	ld	r24, Z
    21d2:	8e 7f       	andi	r24, 0xFE	; 254
    21d4:	80 83       	st	Z, r24
    21d6:	e2 e9       	ldi	r30, 0x92	; 146
    21d8:	f1 e2       	ldi	r31, 0x21	; 33
    21da:	80 81       	ld	r24, Z
    21dc:	8e 7f       	andi	r24, 0xFE	; 254
    21de:	80 83       	st	Z, r24
    21e0:	eb e9       	ldi	r30, 0x9B	; 155
    21e2:	f1 e2       	ldi	r31, 0x21	; 33
    21e4:	80 81       	ld	r24, Z
    21e6:	8e 7f       	andi	r24, 0xFE	; 254
    21e8:	80 83       	st	Z, r24
    21ea:	e4 ea       	ldi	r30, 0xA4	; 164
    21ec:	f1 e2       	ldi	r31, 0x21	; 33
    21ee:	80 81       	ld	r24, Z
    21f0:	8e 7f       	andi	r24, 0xFE	; 254
    21f2:	80 83       	st	Z, r24
    21f4:	ed ea       	ldi	r30, 0xAD	; 173
    21f6:	f1 e2       	ldi	r31, 0x21	; 33
    21f8:	80 81       	ld	r24, Z
    21fa:	8e 7f       	andi	r24, 0xFE	; 254
    21fc:	80 83       	st	Z, r24
    21fe:	e6 eb       	ldi	r30, 0xB6	; 182
    2200:	f1 e2       	ldi	r31, 0x21	; 33
    2202:	80 81       	ld	r24, Z
    2204:	8e 7f       	andi	r24, 0xFE	; 254
    2206:	80 83       	st	Z, r24
    2208:	6a e1       	ldi	r22, 0x1A	; 26
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	a6 dc       	rcall	.-1716   	; 0x1b5c <nvm_read_byte>
    2210:	8f 3f       	cpi	r24, 0xFF	; 255
    2212:	19 f0       	breq	.+6      	; 0x221a <udd_enable+0x90>
    2214:	80 93 fa 04 	sts	0x04FA, r24
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <udd_enable+0x96>
    221a:	8f e1       	ldi	r24, 0x1F	; 31
    221c:	80 93 fa 04 	sts	0x04FA, r24
    2220:	6b e1       	ldi	r22, 0x1B	; 27
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	9a dc       	rcall	.-1740   	; 0x1b5c <nvm_read_byte>
    2228:	8f 3f       	cpi	r24, 0xFF	; 255
    222a:	19 f0       	breq	.+6      	; 0x2232 <udd_enable+0xa8>
    222c:	80 93 fb 04 	sts	0x04FB, r24
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <udd_enable+0xae>
    2232:	8f e1       	ldi	r24, 0x1F	; 31
    2234:	80 93 fb 04 	sts	0x04FB, r24
    2238:	e0 ec       	ldi	r30, 0xC0	; 192
    223a:	f4 e0       	ldi	r31, 0x04	; 4
    223c:	80 81       	ld	r24, Z
    223e:	83 60       	ori	r24, 0x03	; 3
    2240:	80 83       	st	Z, r24
    2242:	80 81       	ld	r24, Z
    2244:	80 68       	ori	r24, 0x80	; 128
    2246:	80 83       	st	Z, r24
    2248:	80 81       	ld	r24, Z
    224a:	80 61       	ori	r24, 0x10	; 16
    224c:	80 83       	st	Z, r24
    224e:	84 e1       	ldi	r24, 0x14	; 20
    2250:	92 e2       	ldi	r25, 0x22	; 34
    2252:	86 83       	std	Z+6, r24	; 0x06
    2254:	97 83       	std	Z+7, r25	; 0x07
    2256:	80 81       	ld	r24, Z
    2258:	80 62       	ori	r24, 0x20	; 32
    225a:	80 83       	st	Z, r24
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	80 93 c5 04 	sts	0x04C5, r24
    2262:	e8 ec       	ldi	r30, 0xC8	; 200
    2264:	f4 e0       	ldi	r31, 0x04	; 4
    2266:	80 81       	ld	r24, Z
    2268:	82 60       	ori	r24, 0x02	; 2
    226a:	80 83       	st	Z, r24
    226c:	10 92 58 22 	sts	0x2258, r1
    2270:	80 91 5e 2e 	lds	r24, 0x2E5E
    2274:	8f 3f       	cpi	r24, 0xFF	; 255
    2276:	09 f4       	brne	.+2      	; 0x227a <udd_enable+0xf0>
    2278:	ff cf       	rjmp	.-2      	; 0x2278 <udd_enable+0xee>
    227a:	9f b7       	in	r25, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	e9 e5       	ldi	r30, 0x59	; 89
    2280:	fe e2       	ldi	r31, 0x2E	; 46
    2282:	85 81       	ldd	r24, Z+5	; 0x05
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	85 83       	std	Z+5, r24	; 0x05
    2288:	9f bf       	out	0x3f, r25	; 63
    228a:	5c df       	rcall	.-328    	; 0x2144 <udd_attach>
    228c:	cf bf       	out	0x3f, r28	; 63
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	08 95       	ret

00002294 <udd_set_address>:
    2294:	80 93 c3 04 	sts	0x04C3, r24
    2298:	08 95       	ret

0000229a <udd_getaddress>:
    229a:	80 91 c3 04 	lds	r24, 0x04C3
    229e:	08 95       	ret

000022a0 <udd_set_setup_payload>:
    22a0:	e5 e6       	ldi	r30, 0x65	; 101
    22a2:	f4 e2       	ldi	r31, 0x24	; 36
    22a4:	80 87       	std	Z+8, r24	; 0x08
    22a6:	91 87       	std	Z+9, r25	; 0x09
    22a8:	62 87       	std	Z+10, r22	; 0x0a
    22aa:	73 87       	std	Z+11, r23	; 0x0b
    22ac:	08 95       	ret

000022ae <udd_ep_alloc>:
    22ae:	28 2f       	mov	r18, r24
    22b0:	2f 70       	andi	r18, 0x0F	; 15
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	22 0f       	add	r18, r18
    22b6:	33 1f       	adc	r19, r19
    22b8:	08 2e       	mov	r0, r24
    22ba:	00 0c       	add	r0, r0
    22bc:	99 0b       	sbc	r25, r25
    22be:	88 27       	eor	r24, r24
    22c0:	99 0f       	add	r25, r25
    22c2:	88 1f       	adc	r24, r24
    22c4:	99 27       	eor	r25, r25
    22c6:	82 0f       	add	r24, r18
    22c8:	93 1f       	adc	r25, r19
    22ca:	fc 01       	movw	r30, r24
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	ec 5f       	subi	r30, 0xFC	; 252
    22da:	fd 4d       	sbci	r31, 0xDD	; 221
    22dc:	21 89       	ldd	r18, Z+17	; 0x11
    22de:	20 7c       	andi	r18, 0xC0	; 192
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <udd_ep_alloc+0x36>
    22e2:	58 c0       	rjmp	.+176    	; 0x2394 <udd_ep_alloc+0xe6>
    22e4:	63 70       	andi	r22, 0x03	; 3
    22e6:	61 30       	cpi	r22, 0x01	; 1
    22e8:	11 f0       	breq	.+4      	; 0x22ee <udd_ep_alloc+0x40>
    22ea:	18 f4       	brcc	.+6      	; 0x22f2 <udd_ep_alloc+0x44>
    22ec:	04 c0       	rjmp	.+8      	; 0x22f6 <udd_ep_alloc+0x48>
    22ee:	20 ec       	ldi	r18, 0xC0	; 192
    22f0:	03 c0       	rjmp	.+6      	; 0x22f8 <udd_ep_alloc+0x4a>
    22f2:	20 e8       	ldi	r18, 0x80	; 128
    22f4:	01 c0       	rjmp	.+2      	; 0x22f8 <udd_ep_alloc+0x4a>
    22f6:	20 e4       	ldi	r18, 0x40	; 64
    22f8:	40 38       	cpi	r20, 0x80	; 128
    22fa:	51 05       	cpc	r21, r1
    22fc:	e9 f0       	breq	.+58     	; 0x2338 <udd_ep_alloc+0x8a>
    22fe:	50 f4       	brcc	.+20     	; 0x2314 <udd_ep_alloc+0x66>
    2300:	40 32       	cpi	r20, 0x20	; 32
    2302:	51 05       	cpc	r21, r1
    2304:	a9 f0       	breq	.+42     	; 0x2330 <udd_ep_alloc+0x82>
    2306:	40 34       	cpi	r20, 0x40	; 64
    2308:	51 05       	cpc	r21, r1
    230a:	a1 f0       	breq	.+40     	; 0x2334 <udd_ep_alloc+0x86>
    230c:	40 31       	cpi	r20, 0x10	; 16
    230e:	51 05       	cpc	r21, r1
    2310:	d9 f4       	brne	.+54     	; 0x2348 <udd_ep_alloc+0x9a>
    2312:	0c c0       	rjmp	.+24     	; 0x232c <udd_ep_alloc+0x7e>
    2314:	41 15       	cp	r20, r1
    2316:	32 e0       	ldi	r19, 0x02	; 2
    2318:	53 07       	cpc	r21, r19
    231a:	91 f0       	breq	.+36     	; 0x2340 <udd_ep_alloc+0x92>
    231c:	4f 3f       	cpi	r20, 0xFF	; 255
    231e:	33 e0       	ldi	r19, 0x03	; 3
    2320:	53 07       	cpc	r21, r19
    2322:	81 f0       	breq	.+32     	; 0x2344 <udd_ep_alloc+0x96>
    2324:	41 15       	cp	r20, r1
    2326:	51 40       	sbci	r21, 0x01	; 1
    2328:	79 f4       	brne	.+30     	; 0x2348 <udd_ep_alloc+0x9a>
    232a:	08 c0       	rjmp	.+16     	; 0x233c <udd_ep_alloc+0x8e>
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0d c0       	rjmp	.+26     	; 0x234a <udd_ep_alloc+0x9c>
    2330:	42 e0       	ldi	r20, 0x02	; 2
    2332:	0b c0       	rjmp	.+22     	; 0x234a <udd_ep_alloc+0x9c>
    2334:	43 e0       	ldi	r20, 0x03	; 3
    2336:	09 c0       	rjmp	.+18     	; 0x234a <udd_ep_alloc+0x9c>
    2338:	44 e0       	ldi	r20, 0x04	; 4
    233a:	07 c0       	rjmp	.+14     	; 0x234a <udd_ep_alloc+0x9c>
    233c:	45 e0       	ldi	r20, 0x05	; 5
    233e:	05 c0       	rjmp	.+10     	; 0x234a <udd_ep_alloc+0x9c>
    2340:	46 e0       	ldi	r20, 0x06	; 6
    2342:	03 c0       	rjmp	.+6      	; 0x234a <udd_ep_alloc+0x9c>
    2344:	47 e0       	ldi	r20, 0x07	; 7
    2346:	01 c0       	rjmp	.+2      	; 0x234a <udd_ep_alloc+0x9c>
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	fc 01       	movw	r30, r24
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	ec 5f       	subi	r30, 0xFC	; 252
    235a:	fd 4d       	sbci	r31, 0xDD	; 221
    235c:	11 8a       	std	Z+17, r1	; 0x11
    235e:	dc 01       	movw	r26, r24
    2360:	aa 0f       	add	r26, r26
    2362:	bb 1f       	adc	r27, r27
    2364:	aa 0f       	add	r26, r26
    2366:	bb 1f       	adc	r27, r27
    2368:	aa 0f       	add	r26, r26
    236a:	bb 1f       	adc	r27, r27
    236c:	ac 5e       	subi	r26, 0xEC	; 236
    236e:	bd 4d       	sbci	r27, 0xDD	; 221
    2370:	36 e0       	ldi	r19, 0x06	; 6
    2372:	3c 93       	st	X, r19
    2374:	24 2b       	or	r18, r20
    2376:	21 8b       	std	Z+17, r18	; 0x11
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	fc 01       	movw	r30, r24
    2386:	ec 5f       	subi	r30, 0xFC	; 252
    2388:	fd 4d       	sbci	r31, 0xDD	; 221
    238a:	81 89       	ldd	r24, Z+17	; 0x11
    238c:	80 62       	ori	r24, 0x20	; 32
    238e:	81 8b       	std	Z+17, r24	; 0x11
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	08 95       	ret
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	08 95       	ret

00002398 <udd_ep_is_halted>:
    2398:	e8 2f       	mov	r30, r24
    239a:	ef 70       	andi	r30, 0x0F	; 15
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	08 2e       	mov	r0, r24
    23a4:	00 0c       	add	r0, r0
    23a6:	99 0b       	sbc	r25, r25
    23a8:	88 27       	eor	r24, r24
    23aa:	99 0f       	add	r25, r25
    23ac:	88 1f       	adc	r24, r24
    23ae:	99 27       	eor	r25, r25
    23b0:	e8 0f       	add	r30, r24
    23b2:	f9 1f       	adc	r31, r25
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	ee 0f       	add	r30, r30
    23ba:	ff 1f       	adc	r31, r31
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	ec 5f       	subi	r30, 0xFC	; 252
    23c2:	fd 4d       	sbci	r31, 0xDD	; 221
    23c4:	81 89       	ldd	r24, Z+17	; 0x11
    23c6:	82 fb       	bst	r24, 2
    23c8:	88 27       	eor	r24, r24
    23ca:	80 f9       	bld	r24, 0
    23cc:	08 95       	ret

000023ce <udd_ep_clear_halt>:
    23ce:	28 2f       	mov	r18, r24
    23d0:	2f 70       	andi	r18, 0x0F	; 15
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	a9 01       	movw	r20, r18
    23d6:	44 0f       	add	r20, r20
    23d8:	55 1f       	adc	r21, r21
    23da:	28 2f       	mov	r18, r24
    23dc:	08 2e       	mov	r0, r24
    23de:	00 0c       	add	r0, r0
    23e0:	33 0b       	sbc	r19, r19
    23e2:	22 27       	eor	r18, r18
    23e4:	33 0f       	add	r19, r19
    23e6:	22 1f       	adc	r18, r18
    23e8:	33 27       	eor	r19, r19
    23ea:	24 0f       	add	r18, r20
    23ec:	35 1f       	adc	r19, r21
    23ee:	f9 01       	movw	r30, r18
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	ec 5f       	subi	r30, 0xFC	; 252
    23fe:	fd 4d       	sbci	r31, 0xDD	; 221
    2400:	91 89       	ldd	r25, Z+17	; 0x11
    2402:	92 ff       	sbrs	r25, 2
    2404:	17 c0       	rjmp	.+46     	; 0x2434 <udd_ep_clear_halt+0x66>
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	22 0f       	add	r18, r18
    240c:	33 1f       	adc	r19, r19
    240e:	22 0f       	add	r18, r18
    2410:	33 1f       	adc	r19, r19
    2412:	f9 01       	movw	r30, r18
    2414:	ec 5f       	subi	r30, 0xFC	; 252
    2416:	fd 4d       	sbci	r31, 0xDD	; 221
    2418:	91 89       	ldd	r25, Z+17	; 0x11
    241a:	9b 7f       	andi	r25, 0xFB	; 251
    241c:	91 8b       	std	Z+17, r25	; 0x11
    241e:	ae dc       	rcall	.-1700   	; 0x1d7c <udd_ep_get_job>
    2420:	fc 01       	movw	r30, r24
    2422:	80 81       	ld	r24, Z
    2424:	80 ff       	sbrs	r24, 0
    2426:	06 c0       	rjmp	.+12     	; 0x2434 <udd_ep_clear_halt+0x66>
    2428:	8e 7f       	andi	r24, 0xFE	; 254
    242a:	80 83       	st	Z, r24
    242c:	07 80       	ldd	r0, Z+7	; 0x07
    242e:	f0 85       	ldd	r31, Z+8	; 0x08
    2430:	e0 2d       	mov	r30, r0
    2432:	09 95       	icall
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	08 95       	ret

00002438 <udd_ep_run>:
    2438:	7f 92       	push	r7
    243a:	8f 92       	push	r8
    243c:	9f 92       	push	r9
    243e:	af 92       	push	r10
    2440:	bf 92       	push	r11
    2442:	cf 92       	push	r12
    2444:	df 92       	push	r13
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	98 2e       	mov	r9, r24
    2454:	86 2e       	mov	r8, r22
    2456:	6a 01       	movw	r12, r20
    2458:	79 01       	movw	r14, r18
    245a:	90 dc       	rcall	.-1760   	; 0x1d7c <udd_ep_get_job>
    245c:	5c 01       	movw	r10, r24
    245e:	79 2c       	mov	r7, r9
    2460:	77 1c       	adc	r7, r7
    2462:	77 24       	eor	r7, r7
    2464:	77 1c       	adc	r7, r7
    2466:	c9 2d       	mov	r28, r9
    2468:	cf 70       	andi	r28, 0x0F	; 15
    246a:	d0 e0       	ldi	r29, 0x00	; 0
    246c:	cc 0f       	add	r28, r28
    246e:	dd 1f       	adc	r29, r29
    2470:	c7 0d       	add	r28, r7
    2472:	d1 1d       	adc	r29, r1
    2474:	fe 01       	movw	r30, r28
    2476:	ee 0f       	add	r30, r30
    2478:	ff 1f       	adc	r31, r31
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	ec 5f       	subi	r30, 0xFC	; 252
    2484:	fd 4d       	sbci	r31, 0xDD	; 221
    2486:	81 89       	ldd	r24, Z+17	; 0x11
    2488:	80 7c       	andi	r24, 0xC0	; 192
    248a:	09 f4       	brne	.+2      	; 0x248e <udd_ep_run+0x56>
    248c:	75 c0       	rjmp	.+234    	; 0x2578 <udd_ep_run+0x140>
    248e:	fe 01       	movw	r30, r28
    2490:	ee 0f       	add	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	ec 5f       	subi	r30, 0xFC	; 252
    249e:	fd 4d       	sbci	r31, 0xDD	; 221
    24a0:	81 89       	ldd	r24, Z+17	; 0x11
    24a2:	80 7c       	andi	r24, 0xC0	; 192
    24a4:	80 3c       	cpi	r24, 0xC0	; 192
    24a6:	61 f0       	breq	.+24     	; 0x24c0 <udd_ep_run+0x88>
    24a8:	fe 01       	movw	r30, r28
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	ec 5f       	subi	r30, 0xFC	; 252
    24b8:	fd 4d       	sbci	r31, 0xDD	; 221
    24ba:	81 89       	ldd	r24, Z+17	; 0x11
    24bc:	82 fd       	sbrc	r24, 2
    24be:	5e c0       	rjmp	.+188    	; 0x257c <udd_ep_run+0x144>
    24c0:	f5 01       	movw	r30, r10
    24c2:	80 81       	ld	r24, Z
    24c4:	80 fd       	sbrc	r24, 0
    24c6:	5c c0       	rjmp	.+184    	; 0x2580 <udd_ep_run+0x148>
    24c8:	81 60       	ori	r24, 0x01	; 1
    24ca:	80 83       	st	Z, r24
    24cc:	c1 82       	std	Z+1, r12	; 0x01
    24ce:	d2 82       	std	Z+2, r13	; 0x02
    24d0:	e3 82       	std	Z+3, r14	; 0x03
    24d2:	f4 82       	std	Z+4, r15	; 0x04
    24d4:	15 82       	std	Z+5, r1	; 0x05
    24d6:	16 82       	std	Z+6, r1	; 0x06
    24d8:	07 83       	std	Z+7, r16	; 0x07
    24da:	10 87       	std	Z+8, r17	; 0x08
    24dc:	81 10       	cpse	r8, r1
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <udd_ep_run+0xb4>
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	e1 14       	cp	r14, r1
    24e4:	f1 04       	cpc	r15, r1
    24e6:	19 f0       	breq	.+6      	; 0x24ee <udd_ep_run+0xb6>
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	01 c0       	rjmp	.+2      	; 0x24ee <udd_ep_run+0xb6>
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	f5 01       	movw	r30, r10
    24f0:	80 81       	ld	r24, Z
    24f2:	90 fb       	bst	r25, 0
    24f4:	81 f9       	bld	r24, 1
    24f6:	8b 7f       	andi	r24, 0xFB	; 251
    24f8:	80 83       	st	Z, r24
    24fa:	77 20       	and	r7, r7
    24fc:	59 f0       	breq	.+22     	; 0x2514 <udd_ep_run+0xdc>
    24fe:	cc 0f       	add	r28, r28
    2500:	dd 1f       	adc	r29, r29
    2502:	cc 0f       	add	r28, r28
    2504:	dd 1f       	adc	r29, r29
    2506:	cc 0f       	add	r28, r28
    2508:	dd 1f       	adc	r29, r29
    250a:	cc 5f       	subi	r28, 0xFC	; 252
    250c:	dd 4d       	sbci	r29, 0xDD	; 221
    250e:	1e 8a       	std	Y+22, r1	; 0x16
    2510:	1f 8a       	std	Y+23, r1	; 0x17
    2512:	2d c0       	rjmp	.+90     	; 0x256e <udd_ep_run+0x136>
    2514:	fe 01       	movw	r30, r28
    2516:	ee 0f       	add	r30, r30
    2518:	ff 1f       	adc	r31, r31
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	ec 5f       	subi	r30, 0xFC	; 252
    2524:	fd 4d       	sbci	r31, 0xDD	; 221
    2526:	81 89       	ldd	r24, Z+17	; 0x11
    2528:	80 7c       	andi	r24, 0xC0	; 192
    252a:	80 3c       	cpi	r24, 0xC0	; 192
    252c:	a1 f4       	brne	.+40     	; 0x2556 <udd_ep_run+0x11e>
    252e:	ce 01       	movw	r24, r28
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	8c 5e       	subi	r24, 0xEC	; 236
    253e:	9d 4d       	sbci	r25, 0xDD	; 221
    2540:	f7 db       	rcall	.-2066   	; 0x1d30 <udd_ep_get_size>
    2542:	bc 01       	movw	r22, r24
    2544:	c7 01       	movw	r24, r14
    2546:	62 d2       	rcall	.+1220   	; 0x2a0c <__udivmodhi4>
    2548:	89 2b       	or	r24, r25
    254a:	29 f0       	breq	.+10     	; 0x2556 <udd_ep_run+0x11e>
    254c:	f5 01       	movw	r30, r10
    254e:	80 81       	ld	r24, Z
    2550:	8e 7f       	andi	r24, 0xFE	; 254
    2552:	80 83       	st	Z, r24
    2554:	16 c0       	rjmp	.+44     	; 0x2582 <udd_ep_run+0x14a>
    2556:	cc 0f       	add	r28, r28
    2558:	dd 1f       	adc	r29, r29
    255a:	cc 0f       	add	r28, r28
    255c:	dd 1f       	adc	r29, r29
    255e:	cc 0f       	add	r28, r28
    2560:	dd 1f       	adc	r29, r29
    2562:	cc 5f       	subi	r28, 0xFC	; 252
    2564:	dd 4d       	sbci	r29, 0xDD	; 221
    2566:	1a 8a       	std	Y+18, r1	; 0x12
    2568:	1b 8a       	std	Y+19, r1	; 0x13
    256a:	1e 8a       	std	Y+22, r1	; 0x16
    256c:	1f 8a       	std	Y+23, r1	; 0x17
    256e:	89 2d       	mov	r24, r9
    2570:	8f dc       	rcall	.-1762   	; 0x1e90 <udd_ep_trans_complet>
    2572:	77 24       	eor	r7, r7
    2574:	73 94       	inc	r7
    2576:	05 c0       	rjmp	.+10     	; 0x2582 <udd_ep_run+0x14a>
    2578:	71 2c       	mov	r7, r1
    257a:	03 c0       	rjmp	.+6      	; 0x2582 <udd_ep_run+0x14a>
    257c:	71 2c       	mov	r7, r1
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <udd_ep_run+0x14a>
    2580:	71 2c       	mov	r7, r1
    2582:	87 2d       	mov	r24, r7
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	ff 90       	pop	r15
    258e:	ef 90       	pop	r14
    2590:	df 90       	pop	r13
    2592:	cf 90       	pop	r12
    2594:	bf 90       	pop	r11
    2596:	af 90       	pop	r10
    2598:	9f 90       	pop	r9
    259a:	8f 90       	pop	r8
    259c:	7f 90       	pop	r7
    259e:	08 95       	ret

000025a0 <udd_ep_abort>:
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	18 2f       	mov	r17, r24
    25ac:	f8 2e       	mov	r15, r24
    25ae:	ff 1c       	adc	r15, r15
    25b0:	ff 24       	eor	r15, r15
    25b2:	ff 1c       	adc	r15, r15
    25b4:	c8 2f       	mov	r28, r24
    25b6:	cf 70       	andi	r28, 0x0F	; 15
    25b8:	d0 e0       	ldi	r29, 0x00	; 0
    25ba:	cc 0f       	add	r28, r28
    25bc:	dd 1f       	adc	r29, r29
    25be:	cf 0d       	add	r28, r15
    25c0:	d1 1d       	adc	r29, r1
    25c2:	dc db       	rcall	.-2120   	; 0x1d7c <udd_ep_get_job>
    25c4:	dc 01       	movw	r26, r24
    25c6:	fe 01       	movw	r30, r28
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	ec 5e       	subi	r30, 0xEC	; 236
    25d6:	fd 4d       	sbci	r31, 0xDD	; 221
    25d8:	02 e0       	ldi	r16, 0x02	; 2
    25da:	05 93       	las	Z, r16
    25dc:	8c 91       	ld	r24, X
    25de:	80 ff       	sbrs	r24, 0
    25e0:	22 c0       	rjmp	.+68     	; 0x2626 <udd_ep_abort+0x86>
    25e2:	8e 7f       	andi	r24, 0xFE	; 254
    25e4:	8c 93       	st	X, r24
    25e6:	17 96       	adiw	r26, 0x07	; 7
    25e8:	ed 91       	ld	r30, X+
    25ea:	fc 91       	ld	r31, X
    25ec:	18 97       	sbiw	r26, 0x08	; 8
    25ee:	30 97       	sbiw	r30, 0x00	; 0
    25f0:	d1 f0       	breq	.+52     	; 0x2626 <udd_ep_abort+0x86>
    25f2:	ff 20       	and	r15, r15
    25f4:	59 f0       	breq	.+22     	; 0x260c <udd_ep_abort+0x6c>
    25f6:	cc 0f       	add	r28, r28
    25f8:	dd 1f       	adc	r29, r29
    25fa:	cc 0f       	add	r28, r28
    25fc:	dd 1f       	adc	r29, r29
    25fe:	cc 0f       	add	r28, r28
    2600:	dd 1f       	adc	r29, r29
    2602:	cc 5f       	subi	r28, 0xFC	; 252
    2604:	dd 4d       	sbci	r29, 0xDD	; 221
    2606:	6e 89       	ldd	r22, Y+22	; 0x16
    2608:	7f 89       	ldd	r23, Y+23	; 0x17
    260a:	0a c0       	rjmp	.+20     	; 0x2620 <udd_ep_abort+0x80>
    260c:	cc 0f       	add	r28, r28
    260e:	dd 1f       	adc	r29, r29
    2610:	cc 0f       	add	r28, r28
    2612:	dd 1f       	adc	r29, r29
    2614:	cc 0f       	add	r28, r28
    2616:	dd 1f       	adc	r29, r29
    2618:	cc 5f       	subi	r28, 0xFC	; 252
    261a:	dd 4d       	sbci	r29, 0xDD	; 221
    261c:	6a 89       	ldd	r22, Y+18	; 0x12
    261e:	7b 89       	ldd	r23, Y+19	; 0x13
    2620:	41 2f       	mov	r20, r17
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	09 95       	icall
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	08 95       	ret

00002632 <udd_ep_free>:
    2632:	cf 93       	push	r28
    2634:	c8 2f       	mov	r28, r24
    2636:	b4 df       	rcall	.-152    	; 0x25a0 <udd_ep_abort>
    2638:	ec 2f       	mov	r30, r28
    263a:	ef 70       	andi	r30, 0x0F	; 15
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	8c 2f       	mov	r24, r28
    2644:	cc 0f       	add	r28, r28
    2646:	99 0b       	sbc	r25, r25
    2648:	88 27       	eor	r24, r24
    264a:	99 0f       	add	r25, r25
    264c:	88 1f       	adc	r24, r24
    264e:	99 27       	eor	r25, r25
    2650:	e8 0f       	add	r30, r24
    2652:	f9 1f       	adc	r31, r25
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	ec 5f       	subi	r30, 0xFC	; 252
    2662:	fd 4d       	sbci	r31, 0xDD	; 221
    2664:	11 8a       	std	Z+17, r1	; 0x11
    2666:	cf 91       	pop	r28
    2668:	08 95       	ret

0000266a <udd_ep_set_halt>:
    266a:	0f 93       	push	r16
    266c:	e8 2f       	mov	r30, r24
    266e:	ef 70       	andi	r30, 0x0F	; 15
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	28 2f       	mov	r18, r24
    2678:	08 2e       	mov	r0, r24
    267a:	00 0c       	add	r0, r0
    267c:	33 0b       	sbc	r19, r19
    267e:	22 27       	eor	r18, r18
    2680:	33 0f       	add	r19, r19
    2682:	22 1f       	adc	r18, r18
    2684:	33 27       	eor	r19, r19
    2686:	e2 0f       	add	r30, r18
    2688:	f3 1f       	adc	r31, r19
    268a:	df 01       	movw	r26, r30
    268c:	aa 0f       	add	r26, r26
    268e:	bb 1f       	adc	r27, r27
    2690:	aa 0f       	add	r26, r26
    2692:	bb 1f       	adc	r27, r27
    2694:	aa 0f       	add	r26, r26
    2696:	bb 1f       	adc	r27, r27
    2698:	ac 5f       	subi	r26, 0xFC	; 252
    269a:	bd 4d       	sbci	r27, 0xDD	; 221
    269c:	51 96       	adiw	r26, 0x11	; 17
    269e:	9c 91       	ld	r25, X
    26a0:	51 97       	sbiw	r26, 0x11	; 17
    26a2:	94 60       	ori	r25, 0x04	; 4
    26a4:	51 96       	adiw	r26, 0x11	; 17
    26a6:	9c 93       	st	X, r25
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ec 5e       	subi	r30, 0xEC	; 236
    26b6:	fd 4d       	sbci	r31, 0xDD	; 221
    26b8:	01 e0       	ldi	r16, 0x01	; 1
    26ba:	06 93       	lac	Z, r16
    26bc:	71 df       	rcall	.-286    	; 0x25a0 <udd_ep_abort>
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	0f 91       	pop	r16
    26c2:	08 95       	ret

000026c4 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    26c4:	1f 92       	push	r1
    26c6:	0f 92       	push	r0
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	0f 92       	push	r0
    26cc:	11 24       	eor	r1, r1
    26ce:	0f 93       	push	r16
    26d0:	2f 93       	push	r18
    26d2:	3f 93       	push	r19
    26d4:	4f 93       	push	r20
    26d6:	5f 93       	push	r21
    26d8:	6f 93       	push	r22
    26da:	7f 93       	push	r23
    26dc:	8f 93       	push	r24
    26de:	9f 93       	push	r25
    26e0:	af 93       	push	r26
    26e2:	bf 93       	push	r27
    26e4:	ef 93       	push	r30
    26e6:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    26e8:	80 91 cb 04 	lds	r24, 0x04CB
    26ec:	88 23       	and	r24, r24
    26ee:	44 f4       	brge	.+16     	; 0x2700 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    26f0:	80 e8       	ldi	r24, 0x80	; 128
    26f2:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    26f6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    26fa:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    26fe:	8a c0       	rjmp	.+276    	; 0x2814 <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2700:	80 91 cb 04 	lds	r24, 0x04CB
    2704:	82 ff       	sbrs	r24, 2
    2706:	20 c0       	rjmp	.+64     	; 0x2748 <__vector_125+0x84>
		udd_ack_underflow_event();
    2708:	84 e0       	ldi	r24, 0x04	; 4
    270a:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    270e:	80 91 1c 22 	lds	r24, 0x221C
    2712:	86 ff       	sbrs	r24, 6
    2714:	7f c0       	rjmp	.+254    	; 0x2814 <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2716:	80 91 cc 04 	lds	r24, 0x04CC
    271a:	81 fd       	sbrc	r24, 1
    271c:	7b c0       	rjmp	.+246    	; 0x2814 <__vector_125+0x150>
    271e:	49 db       	rcall	.-2414   	; 0x1db2 <udd_ctrl_interrupt_tc_setup>
    2720:	81 11       	cpse	r24, r1
    2722:	78 c0       	rjmp	.+240    	; 0x2814 <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2724:	80 91 03 22 	lds	r24, 0x2203
    2728:	81 30       	cpi	r24, 0x01	; 1
    272a:	11 f4       	brne	.+4      	; 0x2730 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    272c:	7f da       	rcall	.-2818   	; 0x1c2c <udd_ctrl_send_zlp_in>
    272e:	72 c0       	rjmp	.+228    	; 0x2814 <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2730:	84 30       	cpi	r24, 0x04	; 4
    2732:	09 f0       	breq	.+2      	; 0x2736 <__vector_125+0x72>
    2734:	6f c0       	rjmp	.+222    	; 0x2814 <__vector_125+0x150>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2736:	ed e1       	ldi	r30, 0x1D	; 29
    2738:	f2 e2       	ldi	r31, 0x22	; 34
    273a:	04 e0       	ldi	r16, 0x04	; 4
    273c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    273e:	e5 e1       	ldi	r30, 0x15	; 21
    2740:	f2 e2       	ldi	r31, 0x22	; 34
    2742:	04 e0       	ldi	r16, 0x04	; 4
    2744:	05 93       	las	Z, r16
    2746:	66 c0       	rjmp	.+204    	; 0x2814 <__vector_125+0x150>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2748:	80 91 cb 04 	lds	r24, 0x04CB
    274c:	81 ff       	sbrs	r24, 1
    274e:	5d c0       	rjmp	.+186    	; 0x280a <__vector_125+0x146>
		udd_ack_overflow_event();
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    2756:	80 91 14 22 	lds	r24, 0x2214
    275a:	86 ff       	sbrs	r24, 6
    275c:	5b c0       	rjmp	.+182    	; 0x2814 <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    275e:	80 91 cc 04 	lds	r24, 0x04CC
    2762:	81 fd       	sbrc	r24, 1
    2764:	57 c0       	rjmp	.+174    	; 0x2814 <__vector_125+0x150>
    2766:	25 db       	rcall	.-2486   	; 0x1db2 <udd_ctrl_interrupt_tc_setup>
    2768:	81 11       	cpse	r24, r1
    276a:	54 c0       	rjmp	.+168    	; 0x2814 <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    276c:	80 91 03 22 	lds	r24, 0x2203
    2770:	82 30       	cpi	r24, 0x02	; 2
    2772:	41 f4       	brne	.+16     	; 0x2784 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2774:	84 e0       	ldi	r24, 0x04	; 4
    2776:	80 93 03 22 	sts	0x2203, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    277a:	e4 e1       	ldi	r30, 0x14	; 20
    277c:	f2 e2       	ldi	r31, 0x22	; 34
    277e:	02 e0       	ldi	r16, 0x02	; 2
    2780:	06 93       	lac	Z, r16
    2782:	48 c0       	rjmp	.+144    	; 0x2814 <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2784:	83 30       	cpi	r24, 0x03	; 3
    2786:	09 f0       	breq	.+2      	; 0x278a <__vector_125+0xc6>
    2788:	45 c0       	rjmp	.+138    	; 0x2814 <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    278a:	ed e1       	ldi	r30, 0x1D	; 29
    278c:	f2 e2       	ldi	r31, 0x22	; 34
    278e:	04 e0       	ldi	r16, 0x04	; 4
    2790:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2792:	e5 e1       	ldi	r30, 0x15	; 21
    2794:	f2 e2       	ldi	r31, 0x22	; 34
    2796:	04 e0       	ldi	r16, 0x04	; 4
    2798:	05 93       	las	Z, r16
    279a:	3c c0       	rjmp	.+120    	; 0x2814 <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    279c:	80 e1       	ldi	r24, 0x10	; 16
    279e:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	fd de       	rcall	.-518    	; 0x25a0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    27a6:	81 e8       	ldi	r24, 0x81	; 129
    27a8:	fb de       	rcall	.-522    	; 0x25a0 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	f9 de       	rcall	.-526    	; 0x25a0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    27ae:	82 e8       	ldi	r24, 0x82	; 130
    27b0:	f7 de       	rcall	.-530    	; 0x25a0 <udd_ep_abort>
		}
#endif
		udc_reset();
    27b2:	0e 94 cf 09 	call	0x139e	; 0x139e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    27b6:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    27ba:	e4 e0       	ldi	r30, 0x04	; 4
    27bc:	f2 e2       	ldi	r31, 0x22	; 34
    27be:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    27c0:	96 e0       	ldi	r25, 0x06	; 6
    27c2:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    27c4:	83 e4       	ldi	r24, 0x43	; 67
    27c6:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    27c8:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    27ca:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    27cc:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    27ce:	8f eb       	ldi	r24, 0xBF	; 191
    27d0:	91 e2       	ldi	r25, 0x21	; 33
    27d2:	84 8b       	std	Z+20, r24	; 0x14
    27d4:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    27d6:	f5 d9       	rcall	.-3094   	; 0x1bc2 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    27d8:	1d c0       	rjmp	.+58     	; 0x2814 <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    27da:	80 91 cb 04 	lds	r24, 0x04CB
    27de:	86 ff       	sbrs	r24, 6
    27e0:	08 c0       	rjmp	.+16     	; 0x27f2 <__vector_125+0x12e>
		udd_ack_suspend_event();
    27e2:	80 e4       	ldi	r24, 0x40	; 64
    27e4:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	c2 d9       	rcall	.-3196   	; 0x1b70 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    27ec:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    27f0:	11 c0       	rjmp	.+34     	; 0x2814 <__vector_125+0x150>
	}

	if (udd_is_resume_event()) {
    27f2:	80 91 cb 04 	lds	r24, 0x04CB
    27f6:	85 ff       	sbrs	r24, 5
    27f8:	0d c0       	rjmp	.+26     	; 0x2814 <__vector_125+0x150>
		udd_ack_resume_event();
    27fa:	80 e2       	ldi	r24, 0x20	; 32
    27fc:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	b6 d9       	rcall	.-3220   	; 0x1b70 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2804:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2808:	05 c0       	rjmp	.+10     	; 0x2814 <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    280a:	80 91 cb 04 	lds	r24, 0x04CB
    280e:	84 fd       	sbrc	r24, 4
    2810:	c5 cf       	rjmp	.-118    	; 0x279c <__vector_125+0xd8>
    2812:	e3 cf       	rjmp	.-58     	; 0x27da <__vector_125+0x116>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2814:	ff 91       	pop	r31
    2816:	ef 91       	pop	r30
    2818:	bf 91       	pop	r27
    281a:	af 91       	pop	r26
    281c:	9f 91       	pop	r25
    281e:	8f 91       	pop	r24
    2820:	7f 91       	pop	r23
    2822:	6f 91       	pop	r22
    2824:	5f 91       	pop	r21
    2826:	4f 91       	pop	r20
    2828:	3f 91       	pop	r19
    282a:	2f 91       	pop	r18
    282c:	0f 91       	pop	r16
    282e:	0f 90       	pop	r0
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	0f 90       	pop	r0
    2834:	1f 90       	pop	r1
    2836:	18 95       	reti

00002838 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2838:	1f 92       	push	r1
    283a:	0f 92       	push	r0
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	0f 92       	push	r0
    2840:	11 24       	eor	r1, r1
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	2f 93       	push	r18
    2848:	3f 93       	push	r19
    284a:	4f 93       	push	r20
    284c:	5f 93       	push	r21
    284e:	6f 93       	push	r22
    2850:	7f 93       	push	r23
    2852:	8f 93       	push	r24
    2854:	9f 93       	push	r25
    2856:	af 93       	push	r26
    2858:	bf 93       	push	r27
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	ef 93       	push	r30
    2860:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2862:	80 91 cc 04 	lds	r24, 0x04CC
    2866:	81 fd       	sbrc	r24, 1
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    286a:	a3 da       	rcall	.-2746   	; 0x1db2 <udd_ctrl_interrupt_tc_setup>
    286c:	81 11       	cpse	r24, r1
    286e:	b9 c0       	rjmp	.+370    	; 0x29e2 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2870:	82 e0       	ldi	r24, 0x02	; 2
    2872:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2876:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    287a:	81 95       	neg	r24
    287c:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    287e:	e4 e1       	ldi	r30, 0x14	; 20
    2880:	f2 e2       	ldi	r31, 0x22	; 34
    2882:	e8 1b       	sub	r30, r24
    2884:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2886:	20 81       	ld	r18, Z
    2888:	31 81       	ldd	r19, Z+1	; 0x01
    288a:	24 51       	subi	r18, 0x14	; 20
    288c:	32 42       	sbci	r19, 0x22	; 34
    288e:	36 95       	lsr	r19
    2890:	27 95       	ror	r18
    2892:	36 95       	lsr	r19
    2894:	27 95       	ror	r18
    2896:	36 95       	lsr	r19
    2898:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    289a:	82 2f       	mov	r24, r18
    289c:	86 95       	lsr	r24
    289e:	20 fd       	sbrc	r18, 0
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <__vector_126+0x6e>
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <__vector_126+0x70>
    28a6:	90 e8       	ldi	r25, 0x80	; 128
    28a8:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    28aa:	e8 2f       	mov	r30, r24
    28ac:	ef 70       	andi	r30, 0x0F	; 15
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	ee 0f       	add	r30, r30
    28b2:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    28b4:	28 2f       	mov	r18, r24
    28b6:	08 2e       	mov	r0, r24
    28b8:	00 0c       	add	r0, r0
    28ba:	33 0b       	sbc	r19, r19
    28bc:	22 27       	eor	r18, r18
    28be:	33 0f       	add	r19, r19
    28c0:	22 1f       	adc	r18, r18
    28c2:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    28c4:	e2 0f       	add	r30, r18
    28c6:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    28c8:	df 01       	movw	r26, r30
    28ca:	aa 0f       	add	r26, r26
    28cc:	bb 1f       	adc	r27, r27
    28ce:	aa 0f       	add	r26, r26
    28d0:	bb 1f       	adc	r27, r27
    28d2:	aa 0f       	add	r26, r26
    28d4:	bb 1f       	adc	r27, r27
    28d6:	ac 5e       	subi	r26, 0xEC	; 236
    28d8:	bd 4d       	sbci	r27, 0xDD	; 221
    28da:	9c 91       	ld	r25, X
    28dc:	95 ff       	sbrs	r25, 5
    28de:	81 c0       	rjmp	.+258    	; 0x29e2 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    28e0:	fd 01       	movw	r30, r26
    28e2:	00 e2       	ldi	r16, 0x20	; 32
    28e4:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    28e6:	81 11       	cpse	r24, r1
    28e8:	77 c0       	rjmp	.+238    	; 0x29d8 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    28ea:	80 91 03 22 	lds	r24, 0x2203
    28ee:	84 30       	cpi	r24, 0x04	; 4
    28f0:	19 f4       	brne	.+6      	; 0x28f8 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    28f2:	aa d9       	rcall	.-3244   	; 0x1c48 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    28f4:	66 d9       	rcall	.-3380   	; 0x1bc2 <udd_ctrl_init>
    28f6:	75 c0       	rjmp	.+234    	; 0x29e2 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    28f8:	00 91 16 22 	lds	r16, 0x2216
    28fc:	10 91 17 22 	lds	r17, 0x2217

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2900:	80 91 6f 24 	lds	r24, 0x246F
    2904:	90 91 70 24 	lds	r25, 0x2470
    2908:	c0 91 ff 21 	lds	r28, 0x21FF
    290c:	d0 91 00 22 	lds	r29, 0x2200
    2910:	9e 01       	movw	r18, r28
    2912:	20 0f       	add	r18, r16
    2914:	31 1f       	adc	r19, r17
    2916:	82 17       	cp	r24, r18
    2918:	93 07       	cpc	r25, r19
    291a:	18 f4       	brcc	.+6      	; 0x2922 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    291c:	8c 01       	movw	r16, r24
    291e:	0c 1b       	sub	r16, r28
    2920:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2922:	80 91 6d 24 	lds	r24, 0x246D
    2926:	90 91 6e 24 	lds	r25, 0x246E
    292a:	a8 01       	movw	r20, r16
    292c:	6f eb       	ldi	r22, 0xBF	; 191
    292e:	71 e2       	ldi	r23, 0x21	; 33
    2930:	8c 0f       	add	r24, r28
    2932:	9d 1f       	adc	r25, r29
    2934:	85 d0       	rcall	.+266    	; 0x2a40 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2936:	c0 0f       	add	r28, r16
    2938:	d1 1f       	adc	r29, r17
    293a:	c0 93 ff 21 	sts	0x21FF, r28
    293e:	d0 93 00 22 	sts	0x2200, r29

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2942:	00 34       	cpi	r16, 0x40	; 64
    2944:	11 05       	cpc	r17, r1
    2946:	69 f4       	brne	.+26     	; 0x2962 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2948:	80 91 01 22 	lds	r24, 0x2201
    294c:	90 91 02 22 	lds	r25, 0x2202
    2950:	8c 0f       	add	r24, r28
    2952:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2954:	20 91 6b 24 	lds	r18, 0x246B
    2958:	30 91 6c 24 	lds	r19, 0x246C
    295c:	82 17       	cp	r24, r18
    295e:	93 07       	cpc	r25, r19
    2960:	80 f0       	brcs	.+32     	; 0x2982 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2962:	e5 e6       	ldi	r30, 0x65	; 101
    2964:	f4 e2       	ldi	r31, 0x24	; 36
    2966:	c2 87       	std	Z+10, r28	; 0x0a
    2968:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    296a:	06 84       	ldd	r0, Z+14	; 0x0e
    296c:	f7 85       	ldd	r31, Z+15	; 0x0f
    296e:	e0 2d       	mov	r30, r0
    2970:	30 97       	sbiw	r30, 0x00	; 0
    2972:	29 f0       	breq	.+10     	; 0x297e <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    2974:	09 95       	icall
    2976:	81 11       	cpse	r24, r1
    2978:	02 c0       	rjmp	.+4      	; 0x297e <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    297a:	4a d9       	rcall	.-3436   	; 0x1c10 <udd_ctrl_stall_data>
    297c:	32 c0       	rjmp	.+100    	; 0x29e2 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    297e:	56 d9       	rcall	.-3412   	; 0x1c2c <udd_ctrl_send_zlp_in>
    2980:	30 c0       	rjmp	.+96     	; 0x29e2 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2982:	80 91 6f 24 	lds	r24, 0x246F
    2986:	90 91 70 24 	lds	r25, 0x2470
    298a:	c8 17       	cp	r28, r24
    298c:	d9 07       	cpc	r29, r25
    298e:	f9 f4       	brne	.+62     	; 0x29ce <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2990:	e0 91 73 24 	lds	r30, 0x2473
    2994:	f0 91 74 24 	lds	r31, 0x2474
    2998:	30 97       	sbiw	r30, 0x00	; 0
    299a:	11 f4       	brne	.+4      	; 0x29a0 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    299c:	39 d9       	rcall	.-3470   	; 0x1c10 <udd_ctrl_stall_data>
    299e:	21 c0       	rjmp	.+66     	; 0x29e2 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    29a0:	09 95       	icall
    29a2:	81 11       	cpse	r24, r1
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    29a6:	34 d9       	rcall	.-3480   	; 0x1c10 <udd_ctrl_stall_data>
    29a8:	1c c0       	rjmp	.+56     	; 0x29e2 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    29aa:	20 91 01 22 	lds	r18, 0x2201
    29ae:	30 91 02 22 	lds	r19, 0x2202
    29b2:	80 91 ff 21 	lds	r24, 0x21FF
    29b6:	90 91 00 22 	lds	r25, 0x2200
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	80 93 01 22 	sts	0x2201, r24
    29c2:	90 93 02 22 	sts	0x2202, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    29c6:	10 92 ff 21 	sts	0x21FF, r1
    29ca:	10 92 00 22 	sts	0x2200, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    29ce:	e4 e1       	ldi	r30, 0x14	; 20
    29d0:	f2 e2       	ldi	r31, 0x22	; 34
    29d2:	02 e0       	ldi	r16, 0x02	; 2
    29d4:	06 93       	lac	Z, r16
    29d6:	05 c0       	rjmp	.+10     	; 0x29e2 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    29d8:	80 38       	cpi	r24, 0x80	; 128
    29da:	11 f4       	brne	.+4      	; 0x29e0 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    29dc:	3d d9       	rcall	.-3462   	; 0x1c58 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    29de:	01 c0       	rjmp	.+2      	; 0x29e2 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    29e0:	57 da       	rcall	.-2898   	; 0x1e90 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    29e2:	ff 91       	pop	r31
    29e4:	ef 91       	pop	r30
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	bf 91       	pop	r27
    29ec:	af 91       	pop	r26
    29ee:	9f 91       	pop	r25
    29f0:	8f 91       	pop	r24
    29f2:	7f 91       	pop	r23
    29f4:	6f 91       	pop	r22
    29f6:	5f 91       	pop	r21
    29f8:	4f 91       	pop	r20
    29fa:	3f 91       	pop	r19
    29fc:	2f 91       	pop	r18
    29fe:	1f 91       	pop	r17
    2a00:	0f 91       	pop	r16
    2a02:	0f 90       	pop	r0
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	0f 90       	pop	r0
    2a08:	1f 90       	pop	r1
    2a0a:	18 95       	reti

00002a0c <__udivmodhi4>:
    2a0c:	aa 1b       	sub	r26, r26
    2a0e:	bb 1b       	sub	r27, r27
    2a10:	51 e1       	ldi	r21, 0x11	; 17
    2a12:	07 c0       	rjmp	.+14     	; 0x2a22 <__udivmodhi4_ep>

00002a14 <__udivmodhi4_loop>:
    2a14:	aa 1f       	adc	r26, r26
    2a16:	bb 1f       	adc	r27, r27
    2a18:	a6 17       	cp	r26, r22
    2a1a:	b7 07       	cpc	r27, r23
    2a1c:	10 f0       	brcs	.+4      	; 0x2a22 <__udivmodhi4_ep>
    2a1e:	a6 1b       	sub	r26, r22
    2a20:	b7 0b       	sbc	r27, r23

00002a22 <__udivmodhi4_ep>:
    2a22:	88 1f       	adc	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	5a 95       	dec	r21
    2a28:	a9 f7       	brne	.-22     	; 0x2a14 <__udivmodhi4_loop>
    2a2a:	80 95       	com	r24
    2a2c:	90 95       	com	r25
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	08 95       	ret

00002a34 <__tablejump2__>:
    2a34:	ee 0f       	add	r30, r30
    2a36:	ff 1f       	adc	r31, r31

00002a38 <__tablejump__>:
    2a38:	05 90       	lpm	r0, Z+
    2a3a:	f4 91       	lpm	r31, Z
    2a3c:	e0 2d       	mov	r30, r0
    2a3e:	09 94       	ijmp

00002a40 <memcpy>:
    2a40:	fb 01       	movw	r30, r22
    2a42:	dc 01       	movw	r26, r24
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <memcpy+0xa>
    2a46:	01 90       	ld	r0, Z+
    2a48:	0d 92       	st	X+, r0
    2a4a:	41 50       	subi	r20, 0x01	; 1
    2a4c:	50 40       	sbci	r21, 0x00	; 0
    2a4e:	d8 f7       	brcc	.-10     	; 0x2a46 <memcpy+0x6>
    2a50:	08 95       	ret

00002a52 <_exit>:
    2a52:	f8 94       	cli

00002a54 <__stop_program>:
    2a54:	ff cf       	rjmp	.-2      	; 0x2a54 <__stop_program>
